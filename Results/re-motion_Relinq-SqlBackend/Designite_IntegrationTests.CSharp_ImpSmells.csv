Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,IsCompatibleWith,The method has 112 lines of code.
Long Method,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,NextToken,The method has 176 lines of code.
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,ParseComparison,Cyclomatic complexity of the method is 15
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,ParseIntegerLiteral,Cyclomatic complexity of the method is 8
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,ParseIdentifier,Cyclomatic complexity of the method is 10
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,ParseMemberAccess,Cyclomatic complexity of the method is 10
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,PromoteExpression,Cyclomatic complexity of the method is 12
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,ParseNumber,Cyclomatic complexity of the method is 22
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,IsCompatibleWith,Cyclomatic complexity of the method is 14
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,CompareConversions,Cyclomatic complexity of the method is 8
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,NextToken,Cyclomatic complexity of the method is 36
Long Parameter List,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,CheckAndPromoteOperands,The method has 5 parameters. Parameters: signatures' opName' left' right' errorPos
Long Parameter List,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,FindMethod,The method has 5 parameters. Parameters: type' methodName' staticAccess' args' method
Long Identifier,System.Linq.Dynamic,Res,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,,The length of the parameter AmbiguousConstructorInvocation is 30.
Long Statement,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,AdvancedTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\AdvancedTests.cs,LinqToSqlAdvanced01,The length of the statement  "      Expression expr = Expression.Call (typeof (Queryable)' "Select"' new[] { typeof (Customer)' typeof (string) }' Expression.Constant (custs)' pred); " is 146.
Long Statement,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,AdvancedTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\AdvancedTests.cs,LinqToSqlAdvanced02,The length of the statement  "      Expression expr = Expression.Call (typeof (Queryable)' "Where"' new[] { typeof (Customer) }' Expression.Constant (custs)' pred); " is 128.
Long Statement,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,AdvancedTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\AdvancedTests.cs,LinqToSqlAdvanced03,The length of the statement  "          new[] { typeof (Customer)' typeof (string) }' custs.Expression' Expression.Lambda (Expression.Property (param' "ContactName")' param)); " is 135.
Long Statement,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,AdvancedTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\AdvancedTests.cs,LinqToSqlAdvanced04,The length of the statement  "      Expression expr1 = Expression.Call (typeof (Queryable)' "Select"' new[] { typeof (Customer)' typeof (string) }' Expression.Constant (custs)' pred1); " is 148.
Long Statement,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,AdvancedTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\AdvancedTests.cs,LinqToSqlAdvanced04,The length of the statement  "      Expression expr2 = Expression.Call (typeof (Queryable)' "Select"' new[] { typeof (Employee)' typeof (string) }' Expression.Constant (employees)' pred2); " is 152.
Long Statement,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,ExternalMappingTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\ExternalMappingTests.cs,LinqToSqlExternal01,The length of the statement  "      //string path = Path.GetFullPath (Path.Combine (Environment.CurrentDirectory' @"..\..\..\Linq.IntegrationTests\TestDomain\Northwind\NorthwindMapped.map")); " is 155.
Long Statement,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,InheritanceTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\InheritanceTests.cs,LinqToSqlInheritance06,The length of the statement  "      //Console.WriteLine("The discriminator value for con is unknown. So' its type should be {0}"' con.GetType().ToString()); " is 120.
Long Statement,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,SelectDistinctTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\SelectDistinctTests.cs,LinqToSqlLocalMethodCall01,The length of the statement  "              select new { c.CustomerID' c.CompanyName' Phone = c.Phone' InternationalPhone = PhoneNumberConverter (c.Country' c.Phone) }; " is 124.
Long Statement,Remotion.Linq.IntegrationTests.CSharp.SystemTests,GroupByTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\GroupByTests.cs,GroupBy_TopLevel,The length of the statement  "                        "This SQL generator does not support queries returning groupings that result from a GroupBy operator because SQL is not suited to " " is 131.
Long Statement,Remotion.Linq.IntegrationTests.CSharp.SystemTests,GroupByTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\GroupByTests.cs,GroupBy_TopLevel,The length of the statement  "                        + "LINQ groupings. Use 'group into' and either return the items of the groupings by feeding them into an additional from clause' or perform " " is 141.
Long Statement,Remotion.Linq.IntegrationTests.CSharp.SystemTests,GroupByTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\GroupByTests.cs,GroupBy_NonEntityKey,The length of the statement  "      var stableResult = query.AsEnumerable().OrderBy (t => t.CustomerID).ThenBy (t => t.PostalCode).ThenBy (t => t.ContactTitle); " is 124.
Long Statement,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,Sum_WithEmptyResultSet_AndAggregatedValueIsNotNullableProperty_ThrowsNotSupportedException,The length of the statement  "                .With.Message.EqualTo ("The null value cannot be assigned to a member with type System.Int32 which is a non-nullable value type.")); " is 132.
Long Statement,Remotion.Linq.IntegrationTests.CSharp.SystemTests,SelectTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\SelectTests.cs,WithMemberInitExpression_InOuterMostLevel,The length of the statement  "          p => new ProductData (p.ProductID) { Name = p.ProductName' Discontinued = p.Discontinued' HasUnitsInStock = p.UnitsInStock > 0 }); " is 130.
Long Statement,Remotion.Linq.IntegrationTests.CSharp.SystemTests,SubQueryTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\SubQueryTests.cs,QueryWithSubQuery_InSelectClause,The length of the statement  "                    + "'(from c in Cooks from a in Assistants select new { GroupID = c.ID' Element = a }).AsEnumerable().GroupBy (t => t.GroupID' t => t.Element)'" " is 143.
Long Statement,Remotion.Linq.IntegrationTests.CSharp.SystemTests,SubQueryTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\SubQueryTests.cs,QueryWithSubQuery_InSelectClause,The length of the statement  "                    + "Note that above query will group the query result in-memory' which might be inefficient' depending on the number of results returned " " is 137.
Complex Conditional,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,ParseComparison,The conditional expression  "token.id == TokenId.Equal || token.id == TokenId.DoubleEqual ||                  token.id == TokenId.ExclamationEqual || token.id == TokenId.LessGreater ||                  token.id == TokenId.GreaterThan || token.id == TokenId.GreaterThanEqual ||                  token.id == TokenId.LessThan || token.id == TokenId.LessThanEqual"  is complex.
Complex Conditional,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,ParseMultiplicative,The conditional expression  "token.id == TokenId.Asterisk || token.id == TokenId.Slash ||                  token.id == TokenId.Percent || TokenIdentifierIs("mod")"  is complex.
Complex Conditional,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,GenerateConversion,The conditional expression  "(IsNumericType(exprType) || IsEnumType(exprType)) &&                      (IsNumericType(type)) || IsEnumType(type)"  is complex.
Complex Conditional,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,GenerateConversion,The conditional expression  "exprType.IsAssignableFrom(type) || type.IsAssignableFrom(exprType) ||                  exprType.IsInterface || type.IsInterface"  is complex.
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,AdvancedTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\AdvancedTests.cs,LinqToSqlAdvanced06,The following statement contains a magic number: var prods = from p in DB.Products.OrderByDescending (p => p.UnitPrice).Take (10)                    where p.Discontinued                    select p;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,ConversionOperatorsTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\ConversionOperatorsTests.cs,LinqToSqlConversion02,The following statement contains a magic number: TestExecutor.Execute (qArray[3]' MethodBase.GetCurrentMethod());
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,ConversionOperatorsTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\ConversionOperatorsTests.cs,LinqToSqlConversion03,The following statement contains a magic number: var q =            from e in DB.Employees            where e.HireDate >= new DateTime (1994' 1' 1)            select e;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,ExistsInAnyAllContainsTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\ExistsInAnyAllContainsTests.cs,LinqToSqlExists04,The following statement contains a magic number: var order = (from o in DB.Orders                     where o.OrderID == 10248                     select o).First ();
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,GroupByHavingTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\GroupByHavingTests.cs,LinqToSqlGroupBy08,The following statement contains a magic number: var q =            from p in DB.Products            group p by p.CategoryID into g            where g.Count () >= 10            select new            {              g.Key'              ProductCount = g.Count ()            };
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,GroupByHavingTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\GroupByHavingTests.cs,LinqToSqlGroupBy10,The following statement contains a magic number: var categories =            from p in DB.Products            group p by new { Criterion = p.UnitPrice > 10 } into g            select g;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,PagingTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\PagingTests.cs,LinqToSqlPaging01,The following statement contains a magic number: var q = (                    from c in DB.Customers                    orderby c.ContactName                    select c)            .Skip (50)            .Take (10);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,PagingTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\PagingTests.cs,LinqToSqlPaging01,The following statement contains a magic number: var q = (                    from c in DB.Customers                    orderby c.ContactName                    select c)            .Skip (50)            .Take (10);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,PagingTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\PagingTests.cs,LinqToSqlPaging02,The following statement contains a magic number: var q = (                    from p in DB.Products                    where p.ProductID > 50                    orderby p.ProductID                    select p)            .Take (10);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,PagingTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\PagingTests.cs,LinqToSqlPaging02,The following statement contains a magic number: var q = (                    from p in DB.Products                    where p.ProductID > 50                    orderby p.ProductID                    select p)            .Take (10);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,SelectDistinctTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\SelectDistinctTests.cs,LinqToSqlSelect04,The following statement contains a magic number: var q =            from p in DB.Products            select new { p.ProductID' HalfPrice = p.UnitPrice / 2 };
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,SqlMethodsTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\SqlMethodsTests.cs,LinqToSqlSqlMethods02,The following statement contains a magic number: var q = from o in DB.Orders                where SqlMethods.DateDiffDay (o.OrderDate' o.ShippedDate) < 10                select o;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,StoredProceduresTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\StoredProceduresTests.cs,LinqToSqlStoredProc03_2,The following statement contains a magic number: IMultipleResults result = DB.WholeOrPartialCustomersSet (2);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,GroupStringDateFunctions,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\StringDateFunctionsTests.cs,LinqToSqlString02,The following statement contains a magic number: var q =            from p in DB.Products            where p.ProductName.Length < 10            select p;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,GroupStringDateFunctions,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\StringDateFunctionsTests.cs,LinqToSqlString07,The following statement contains a magic number: var q =            from p in DB.Products            select p.ProductName.Substring (3);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,GroupStringDateFunctions,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\StringDateFunctionsTests.cs,LinqToSqlString08,The following statement contains a magic number: var q =            from e in DB.Employees            where e.HomePhone.Substring (6' 3) == "555"            select e;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,GroupStringDateFunctions,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\StringDateFunctionsTests.cs,LinqToSqlString08,The following statement contains a magic number: var q =            from e in DB.Employees            where e.HomePhone.Substring (6' 3) == "555"            select e;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,GroupStringDateFunctions,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\StringDateFunctionsTests.cs,LinqToSqlString11,The following statement contains a magic number: var q =            from e in DB.Employees            select e.HomePhone.Substring (0' 5).Trim ();
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,GroupStringDateFunctions,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\StringDateFunctionsTests.cs,LinqToSqlString12,The following statement contains a magic number: var q =            from e in DB.Employees            where e.HomePhone.Substring (4' 1) == ")"            select e.HomePhone.Insert (5' ":");
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,GroupStringDateFunctions,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\StringDateFunctionsTests.cs,LinqToSqlString12,The following statement contains a magic number: var q =            from e in DB.Employees            where e.HomePhone.Substring (4' 1) == ")"            select e.HomePhone.Insert (5' ":");
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,GroupStringDateFunctions,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\StringDateFunctionsTests.cs,LinqToSqlString13,The following statement contains a magic number: var q =            from e in DB.Employees            where e.HomePhone.Substring (4' 1) == ")"            select e.HomePhone.Remove (9);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,GroupStringDateFunctions,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\StringDateFunctionsTests.cs,LinqToSqlString13,The following statement contains a magic number: var q =            from e in DB.Employees            where e.HomePhone.Substring (4' 1) == ")"            select e.HomePhone.Remove (9);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,GroupStringDateFunctions,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\StringDateFunctionsTests.cs,LinqToSqlString14,The following statement contains a magic number: var q =            from e in DB.Employees            where e.HomePhone.Substring (4' 1) == ")"            select e.HomePhone.Remove (0' 6);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,GroupStringDateFunctions,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\StringDateFunctionsTests.cs,LinqToSqlString14,The following statement contains a magic number: var q =            from e in DB.Employees            where e.HomePhone.Substring (4' 1) == ")"            select e.HomePhone.Remove (0' 6);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,GroupStringDateFunctions,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\StringDateFunctionsTests.cs,LinqToSqlString16,The following statement contains a magic number: var q =            from o in DB.Orders            where o.OrderDate.Value.Year == 1997            select o;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,GroupStringDateFunctions,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\StringDateFunctionsTests.cs,LinqToSqlString17,The following statement contains a magic number: var q =            from o in DB.Orders            where o.OrderDate.Value.Month == 12            select o;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,GroupStringDateFunctions,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\StringDateFunctionsTests.cs,LinqToSqlString18,The following statement contains a magic number: var q =            from o in DB.Orders            where o.OrderDate.Value.Day == 31            select o;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,TopBottomTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\TopBottomTests.cs,LinqToSqlTop01,The following statement contains a magic number: var q = (                    from e in DB.Employees                    orderby e.HireDate                    select e)            .Take (5);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,TopBottomTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\TopBottomTests.cs,LinqToSqlTop02,The following statement contains a magic number: var q = (                    from p in DB.Products                    orderby p.UnitPrice descending                    select p)            .Skip (10);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,UserDefinedFunctionsTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\UserDefinedFunctionsTests.cs,LinqToSqlUserDefined03,The following statement contains a magic number: var q = from p in DB.Functions.ProductsUnderThisUnitPrice (10.25M)                where !(p.Discontinued ?? false)                select p;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,UserDefinedFunctionsTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\UserDefinedFunctionsTests.cs,LinqToSqlUserDefined04,The following statement contains a magic number: var q = from c in DB.Categories                join p in DB.Functions.ProductsUnderThisUnitPrice (8.50M) on c.CategoryID equals p.CategoryID into prods                from p in prods                select new { c.CategoryID' c.CategoryName' p.ProductName' p.UnitPrice };
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,WhereTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\WhereTests.cs,LinqToSqlWhere02,The following statement contains a magic number: var q =            from e in DB.Employees            where e.HireDate >= new DateTime (1994' 1' 1)            select e;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,WhereTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\WhereTests.cs,LinqToSqlWhere04,The following statement contains a magic number: var q =            from p in DB.Products            where p.UnitPrice > 10m || p.Discontinued            select p;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,WhereTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\WhereTests.cs,LinqToSqlWhere05,The following statement contains a magic number: var q =            DB.Products.Where (p => p.UnitPrice > 10m).Where (p => p.Discontinued);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.LinqSamples101,WhereTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\LinqSamples101\WhereTests.cs,LinqToSqlWhere08,The following statement contains a magic number: Order ord = DB.Orders.First (o => o.Freight > 10.00M);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DistinctTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DistinctTests.cs,Distinct_BeforeSkip,The following statement contains a magic number: var query = DB.Orders.Select (o => o.Customer).Distinct().Skip (2).Select (c => c.CustomerID);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DistinctTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DistinctTests.cs,Distinct_BeforeTake,The following statement contains a magic number: var query = DB.Orders.Select (o => o.Customer).Distinct().Take (2).Select (c => c.CustomerID);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DistinctTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DistinctTests.cs,Distinct_BeforeSkipTake,The following statement contains a magic number: var query = DB.Orders.Select (o => o.Customer).Distinct().Skip (5).Take (2).Select (c => c.CustomerID);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DistinctTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DistinctTests.cs,Distinct_BeforeSkipTake,The following statement contains a magic number: var query = DB.Orders.Select (o => o.Customer).Distinct().Skip (5).Take (2).Select (c => c.CustomerID);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,GroupByTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\GroupByTests.cs,GroupBy_AfterTake,The following statement contains a magic number: var query = DB.Orders.Take (10).GroupBy (c => c.Customer).Select (g => g.Key.CustomerID);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddYears,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddYears (1)'              Two = o.OrderDate.Value.AddYears (-1)'              Three = o.OrderDate.Value.AddYears (1501)'              Four = o.OrderDate.Value.AddYears (-201)'              Five = o.OrderDate.Value.AddYears (8000)'              Six = o.OrderDate.Value.AddYears (-200)'              Seven = o.OrderDate.Value.AddYears (o.OrderID % 1000)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddYears,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddYears (1)'              Two = o.OrderDate.Value.AddYears (-1)'              Three = o.OrderDate.Value.AddYears (1501)'              Four = o.OrderDate.Value.AddYears (-201)'              Five = o.OrderDate.Value.AddYears (8000)'              Six = o.OrderDate.Value.AddYears (-200)'              Seven = o.OrderDate.Value.AddYears (o.OrderID % 1000)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddYears,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddYears (1)'              Two = o.OrderDate.Value.AddYears (-1)'              Three = o.OrderDate.Value.AddYears (1501)'              Four = o.OrderDate.Value.AddYears (-201)'              Five = o.OrderDate.Value.AddYears (8000)'              Six = o.OrderDate.Value.AddYears (-200)'              Seven = o.OrderDate.Value.AddYears (o.OrderID % 1000)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddYears,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddYears (1)'              Two = o.OrderDate.Value.AddYears (-1)'              Three = o.OrderDate.Value.AddYears (1501)'              Four = o.OrderDate.Value.AddYears (-201)'              Five = o.OrderDate.Value.AddYears (8000)'              Six = o.OrderDate.Value.AddYears (-200)'              Seven = o.OrderDate.Value.AddYears (o.OrderID % 1000)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddYears,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddYears (1)'              Two = o.OrderDate.Value.AddYears (-1)'              Three = o.OrderDate.Value.AddYears (1501)'              Four = o.OrderDate.Value.AddYears (-201)'              Five = o.OrderDate.Value.AddYears (8000)'              Six = o.OrderDate.Value.AddYears (-200)'              Seven = o.OrderDate.Value.AddYears (o.OrderID % 1000)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddMonths,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddMonths (1)'              Two = o.OrderDate.Value.AddMonths (-1)'              Three = o.OrderDate.Value.AddMonths (1501)'              Four = o.OrderDate.Value.AddMonths (-1501)'              Five = o.OrderDate.Value.AddMonths (50073)'              Six = o.OrderDate.Value.AddMonths (-2073)'              Seven = o.OrderDate.Value.AddMonths (o.OrderID)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddMonths,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddMonths (1)'              Two = o.OrderDate.Value.AddMonths (-1)'              Three = o.OrderDate.Value.AddMonths (1501)'              Four = o.OrderDate.Value.AddMonths (-1501)'              Five = o.OrderDate.Value.AddMonths (50073)'              Six = o.OrderDate.Value.AddMonths (-2073)'              Seven = o.OrderDate.Value.AddMonths (o.OrderID)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddMonths,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddMonths (1)'              Two = o.OrderDate.Value.AddMonths (-1)'              Three = o.OrderDate.Value.AddMonths (1501)'              Four = o.OrderDate.Value.AddMonths (-1501)'              Five = o.OrderDate.Value.AddMonths (50073)'              Six = o.OrderDate.Value.AddMonths (-2073)'              Seven = o.OrderDate.Value.AddMonths (o.OrderID)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddMonths,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddMonths (1)'              Two = o.OrderDate.Value.AddMonths (-1)'              Three = o.OrderDate.Value.AddMonths (1501)'              Four = o.OrderDate.Value.AddMonths (-1501)'              Five = o.OrderDate.Value.AddMonths (50073)'              Six = o.OrderDate.Value.AddMonths (-2073)'              Seven = o.OrderDate.Value.AddMonths (o.OrderID)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddDays,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddDays (1.5)'              Two = o.OrderDate.Value.AddDays (-1.5)'              Three = o.OrderDate.Value.AddDays (1500.76)'              Four = o.OrderDate.Value.AddDays (-1500.76)'              Five = o.OrderDate.Value.AddDays (365114.7142132)'              Six = o.OrderDate.Value.AddDays (-65114.7142132)'              Seven = o.OrderDate.Value.AddDays (0.0001)'              Eight = o.OrderDate.Value.AddDays (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddDays,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddDays (1.5)'              Two = o.OrderDate.Value.AddDays (-1.5)'              Three = o.OrderDate.Value.AddDays (1500.76)'              Four = o.OrderDate.Value.AddDays (-1500.76)'              Five = o.OrderDate.Value.AddDays (365114.7142132)'              Six = o.OrderDate.Value.AddDays (-65114.7142132)'              Seven = o.OrderDate.Value.AddDays (0.0001)'              Eight = o.OrderDate.Value.AddDays (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddDays,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddDays (1.5)'              Two = o.OrderDate.Value.AddDays (-1.5)'              Three = o.OrderDate.Value.AddDays (1500.76)'              Four = o.OrderDate.Value.AddDays (-1500.76)'              Five = o.OrderDate.Value.AddDays (365114.7142132)'              Six = o.OrderDate.Value.AddDays (-65114.7142132)'              Seven = o.OrderDate.Value.AddDays (0.0001)'              Eight = o.OrderDate.Value.AddDays (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddDays,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddDays (1.5)'              Two = o.OrderDate.Value.AddDays (-1.5)'              Three = o.OrderDate.Value.AddDays (1500.76)'              Four = o.OrderDate.Value.AddDays (-1500.76)'              Five = o.OrderDate.Value.AddDays (365114.7142132)'              Six = o.OrderDate.Value.AddDays (-65114.7142132)'              Seven = o.OrderDate.Value.AddDays (0.0001)'              Eight = o.OrderDate.Value.AddDays (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddDays,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddDays (1.5)'              Two = o.OrderDate.Value.AddDays (-1.5)'              Three = o.OrderDate.Value.AddDays (1500.76)'              Four = o.OrderDate.Value.AddDays (-1500.76)'              Five = o.OrderDate.Value.AddDays (365114.7142132)'              Six = o.OrderDate.Value.AddDays (-65114.7142132)'              Seven = o.OrderDate.Value.AddDays (0.0001)'              Eight = o.OrderDate.Value.AddDays (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddDays,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddDays (1.5)'              Two = o.OrderDate.Value.AddDays (-1.5)'              Three = o.OrderDate.Value.AddDays (1500.76)'              Four = o.OrderDate.Value.AddDays (-1500.76)'              Five = o.OrderDate.Value.AddDays (365114.7142132)'              Six = o.OrderDate.Value.AddDays (-65114.7142132)'              Seven = o.OrderDate.Value.AddDays (0.0001)'              Eight = o.OrderDate.Value.AddDays (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddDays,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddDays (1.5)'              Two = o.OrderDate.Value.AddDays (-1.5)'              Three = o.OrderDate.Value.AddDays (1500.76)'              Four = o.OrderDate.Value.AddDays (-1500.76)'              Five = o.OrderDate.Value.AddDays (365114.7142132)'              Six = o.OrderDate.Value.AddDays (-65114.7142132)'              Seven = o.OrderDate.Value.AddDays (0.0001)'              Eight = o.OrderDate.Value.AddDays (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddDays,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddDays (1.5)'              Two = o.OrderDate.Value.AddDays (-1.5)'              Three = o.OrderDate.Value.AddDays (1500.76)'              Four = o.OrderDate.Value.AddDays (-1500.76)'              Five = o.OrderDate.Value.AddDays (365114.7142132)'              Six = o.OrderDate.Value.AddDays (-65114.7142132)'              Seven = o.OrderDate.Value.AddDays (0.0001)'              Eight = o.OrderDate.Value.AddDays (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddHours,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddHours (1.5)'              Two = o.OrderDate.Value.AddHours (-1.5)'              Three = o.OrderDate.Value.AddHours (1500.76)'              Four = o.OrderDate.Value.AddHours (-1500.76)'              Five = o.OrderDate.Value.AddHours (36511474.712)'              Six = o.OrderDate.Value.AddHours (-511474.712)'              Seven = o.OrderDate.Value.AddHours (0.0001)'              Eight = o.OrderDate.Value.AddHours (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddHours,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddHours (1.5)'              Two = o.OrderDate.Value.AddHours (-1.5)'              Three = o.OrderDate.Value.AddHours (1500.76)'              Four = o.OrderDate.Value.AddHours (-1500.76)'              Five = o.OrderDate.Value.AddHours (36511474.712)'              Six = o.OrderDate.Value.AddHours (-511474.712)'              Seven = o.OrderDate.Value.AddHours (0.0001)'              Eight = o.OrderDate.Value.AddHours (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddHours,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddHours (1.5)'              Two = o.OrderDate.Value.AddHours (-1.5)'              Three = o.OrderDate.Value.AddHours (1500.76)'              Four = o.OrderDate.Value.AddHours (-1500.76)'              Five = o.OrderDate.Value.AddHours (36511474.712)'              Six = o.OrderDate.Value.AddHours (-511474.712)'              Seven = o.OrderDate.Value.AddHours (0.0001)'              Eight = o.OrderDate.Value.AddHours (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddHours,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddHours (1.5)'              Two = o.OrderDate.Value.AddHours (-1.5)'              Three = o.OrderDate.Value.AddHours (1500.76)'              Four = o.OrderDate.Value.AddHours (-1500.76)'              Five = o.OrderDate.Value.AddHours (36511474.712)'              Six = o.OrderDate.Value.AddHours (-511474.712)'              Seven = o.OrderDate.Value.AddHours (0.0001)'              Eight = o.OrderDate.Value.AddHours (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddHours,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddHours (1.5)'              Two = o.OrderDate.Value.AddHours (-1.5)'              Three = o.OrderDate.Value.AddHours (1500.76)'              Four = o.OrderDate.Value.AddHours (-1500.76)'              Five = o.OrderDate.Value.AddHours (36511474.712)'              Six = o.OrderDate.Value.AddHours (-511474.712)'              Seven = o.OrderDate.Value.AddHours (0.0001)'              Eight = o.OrderDate.Value.AddHours (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddHours,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddHours (1.5)'              Two = o.OrderDate.Value.AddHours (-1.5)'              Three = o.OrderDate.Value.AddHours (1500.76)'              Four = o.OrderDate.Value.AddHours (-1500.76)'              Five = o.OrderDate.Value.AddHours (36511474.712)'              Six = o.OrderDate.Value.AddHours (-511474.712)'              Seven = o.OrderDate.Value.AddHours (0.0001)'              Eight = o.OrderDate.Value.AddHours (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddHours,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddHours (1.5)'              Two = o.OrderDate.Value.AddHours (-1.5)'              Three = o.OrderDate.Value.AddHours (1500.76)'              Four = o.OrderDate.Value.AddHours (-1500.76)'              Five = o.OrderDate.Value.AddHours (36511474.712)'              Six = o.OrderDate.Value.AddHours (-511474.712)'              Seven = o.OrderDate.Value.AddHours (0.0001)'              Eight = o.OrderDate.Value.AddHours (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddHours,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddHours (1.5)'              Two = o.OrderDate.Value.AddHours (-1.5)'              Three = o.OrderDate.Value.AddHours (1500.76)'              Four = o.OrderDate.Value.AddHours (-1500.76)'              Five = o.OrderDate.Value.AddHours (36511474.712)'              Six = o.OrderDate.Value.AddHours (-511474.712)'              Seven = o.OrderDate.Value.AddHours (0.0001)'              Eight = o.OrderDate.Value.AddHours (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddMinutes,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddMinutes (1.5)'              Two = o.OrderDate.Value.AddMinutes (-1.5)'              Three = o.OrderDate.Value.AddMinutes (1500.76)'              Four = o.OrderDate.Value.AddMinutes (-1500.76)'              Five = o.OrderDate.Value.AddMinutes (36511474.712)'              Six = o.OrderDate.Value.AddMinutes (-36511474.712)'              Seven = o.OrderDate.Value.AddMinutes (0.0001)'              Eight = o.OrderDate.Value.AddMinutes (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddMinutes,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddMinutes (1.5)'              Two = o.OrderDate.Value.AddMinutes (-1.5)'              Three = o.OrderDate.Value.AddMinutes (1500.76)'              Four = o.OrderDate.Value.AddMinutes (-1500.76)'              Five = o.OrderDate.Value.AddMinutes (36511474.712)'              Six = o.OrderDate.Value.AddMinutes (-36511474.712)'              Seven = o.OrderDate.Value.AddMinutes (0.0001)'              Eight = o.OrderDate.Value.AddMinutes (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddMinutes,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddMinutes (1.5)'              Two = o.OrderDate.Value.AddMinutes (-1.5)'              Three = o.OrderDate.Value.AddMinutes (1500.76)'              Four = o.OrderDate.Value.AddMinutes (-1500.76)'              Five = o.OrderDate.Value.AddMinutes (36511474.712)'              Six = o.OrderDate.Value.AddMinutes (-36511474.712)'              Seven = o.OrderDate.Value.AddMinutes (0.0001)'              Eight = o.OrderDate.Value.AddMinutes (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddMinutes,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddMinutes (1.5)'              Two = o.OrderDate.Value.AddMinutes (-1.5)'              Three = o.OrderDate.Value.AddMinutes (1500.76)'              Four = o.OrderDate.Value.AddMinutes (-1500.76)'              Five = o.OrderDate.Value.AddMinutes (36511474.712)'              Six = o.OrderDate.Value.AddMinutes (-36511474.712)'              Seven = o.OrderDate.Value.AddMinutes (0.0001)'              Eight = o.OrderDate.Value.AddMinutes (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddMinutes,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddMinutes (1.5)'              Two = o.OrderDate.Value.AddMinutes (-1.5)'              Three = o.OrderDate.Value.AddMinutes (1500.76)'              Four = o.OrderDate.Value.AddMinutes (-1500.76)'              Five = o.OrderDate.Value.AddMinutes (36511474.712)'              Six = o.OrderDate.Value.AddMinutes (-36511474.712)'              Seven = o.OrderDate.Value.AddMinutes (0.0001)'              Eight = o.OrderDate.Value.AddMinutes (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddMinutes,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddMinutes (1.5)'              Two = o.OrderDate.Value.AddMinutes (-1.5)'              Three = o.OrderDate.Value.AddMinutes (1500.76)'              Four = o.OrderDate.Value.AddMinutes (-1500.76)'              Five = o.OrderDate.Value.AddMinutes (36511474.712)'              Six = o.OrderDate.Value.AddMinutes (-36511474.712)'              Seven = o.OrderDate.Value.AddMinutes (0.0001)'              Eight = o.OrderDate.Value.AddMinutes (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddMinutes,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddMinutes (1.5)'              Two = o.OrderDate.Value.AddMinutes (-1.5)'              Three = o.OrderDate.Value.AddMinutes (1500.76)'              Four = o.OrderDate.Value.AddMinutes (-1500.76)'              Five = o.OrderDate.Value.AddMinutes (36511474.712)'              Six = o.OrderDate.Value.AddMinutes (-36511474.712)'              Seven = o.OrderDate.Value.AddMinutes (0.0001)'              Eight = o.OrderDate.Value.AddMinutes (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddMinutes,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddMinutes (1.5)'              Two = o.OrderDate.Value.AddMinutes (-1.5)'              Three = o.OrderDate.Value.AddMinutes (1500.76)'              Four = o.OrderDate.Value.AddMinutes (-1500.76)'              Five = o.OrderDate.Value.AddMinutes (36511474.712)'              Six = o.OrderDate.Value.AddMinutes (-36511474.712)'              Seven = o.OrderDate.Value.AddMinutes (0.0001)'              Eight = o.OrderDate.Value.AddMinutes (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddSeconds,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddSeconds (1.5)'              Two = o.OrderDate.Value.AddSeconds (-1.5)'              Three = o.OrderDate.Value.AddSeconds (1500.76)'              Four = o.OrderDate.Value.AddSeconds (-1500.76)'              Five = o.OrderDate.Value.AddSeconds (3651147445.712)'              Six = o.OrderDate.Value.AddSeconds (-3651147445.712)'              Seven = o.OrderDate.Value.AddSeconds (0.0001)'              Eight = o.OrderDate.Value.AddSeconds (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddSeconds,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddSeconds (1.5)'              Two = o.OrderDate.Value.AddSeconds (-1.5)'              Three = o.OrderDate.Value.AddSeconds (1500.76)'              Four = o.OrderDate.Value.AddSeconds (-1500.76)'              Five = o.OrderDate.Value.AddSeconds (3651147445.712)'              Six = o.OrderDate.Value.AddSeconds (-3651147445.712)'              Seven = o.OrderDate.Value.AddSeconds (0.0001)'              Eight = o.OrderDate.Value.AddSeconds (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddSeconds,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddSeconds (1.5)'              Two = o.OrderDate.Value.AddSeconds (-1.5)'              Three = o.OrderDate.Value.AddSeconds (1500.76)'              Four = o.OrderDate.Value.AddSeconds (-1500.76)'              Five = o.OrderDate.Value.AddSeconds (3651147445.712)'              Six = o.OrderDate.Value.AddSeconds (-3651147445.712)'              Seven = o.OrderDate.Value.AddSeconds (0.0001)'              Eight = o.OrderDate.Value.AddSeconds (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddSeconds,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddSeconds (1.5)'              Two = o.OrderDate.Value.AddSeconds (-1.5)'              Three = o.OrderDate.Value.AddSeconds (1500.76)'              Four = o.OrderDate.Value.AddSeconds (-1500.76)'              Five = o.OrderDate.Value.AddSeconds (3651147445.712)'              Six = o.OrderDate.Value.AddSeconds (-3651147445.712)'              Seven = o.OrderDate.Value.AddSeconds (0.0001)'              Eight = o.OrderDate.Value.AddSeconds (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddSeconds,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddSeconds (1.5)'              Two = o.OrderDate.Value.AddSeconds (-1.5)'              Three = o.OrderDate.Value.AddSeconds (1500.76)'              Four = o.OrderDate.Value.AddSeconds (-1500.76)'              Five = o.OrderDate.Value.AddSeconds (3651147445.712)'              Six = o.OrderDate.Value.AddSeconds (-3651147445.712)'              Seven = o.OrderDate.Value.AddSeconds (0.0001)'              Eight = o.OrderDate.Value.AddSeconds (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddSeconds,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddSeconds (1.5)'              Two = o.OrderDate.Value.AddSeconds (-1.5)'              Three = o.OrderDate.Value.AddSeconds (1500.76)'              Four = o.OrderDate.Value.AddSeconds (-1500.76)'              Five = o.OrderDate.Value.AddSeconds (3651147445.712)'              Six = o.OrderDate.Value.AddSeconds (-3651147445.712)'              Seven = o.OrderDate.Value.AddSeconds (0.0001)'              Eight = o.OrderDate.Value.AddSeconds (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddSeconds,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddSeconds (1.5)'              Two = o.OrderDate.Value.AddSeconds (-1.5)'              Three = o.OrderDate.Value.AddSeconds (1500.76)'              Four = o.OrderDate.Value.AddSeconds (-1500.76)'              Five = o.OrderDate.Value.AddSeconds (3651147445.712)'              Six = o.OrderDate.Value.AddSeconds (-3651147445.712)'              Seven = o.OrderDate.Value.AddSeconds (0.0001)'              Eight = o.OrderDate.Value.AddSeconds (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddSeconds,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddSeconds (1.5)'              Two = o.OrderDate.Value.AddSeconds (-1.5)'              Three = o.OrderDate.Value.AddSeconds (1500.76)'              Four = o.OrderDate.Value.AddSeconds (-1500.76)'              Five = o.OrderDate.Value.AddSeconds (3651147445.712)'              Six = o.OrderDate.Value.AddSeconds (-3651147445.712)'              Seven = o.OrderDate.Value.AddSeconds (0.0001)'              Eight = o.OrderDate.Value.AddSeconds (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddMilliseconds,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddMilliseconds (1.5)'              Two = o.OrderDate.Value.AddMilliseconds (-1.5)'              Three = o.OrderDate.Value.AddMilliseconds (1500.76)'              Four = o.OrderDate.Value.AddMilliseconds (-1500.76)'              Five = o.OrderDate.Value.AddMilliseconds (3651147445123.712)'              Six = o.OrderDate.Value.AddMilliseconds (-3651147445123.712)'              Seven = o.OrderDate.Value.AddMilliseconds (0.0001)'              Eight = o.OrderDate.Value.AddMilliseconds (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddMilliseconds,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddMilliseconds (1.5)'              Two = o.OrderDate.Value.AddMilliseconds (-1.5)'              Three = o.OrderDate.Value.AddMilliseconds (1500.76)'              Four = o.OrderDate.Value.AddMilliseconds (-1500.76)'              Five = o.OrderDate.Value.AddMilliseconds (3651147445123.712)'              Six = o.OrderDate.Value.AddMilliseconds (-3651147445123.712)'              Seven = o.OrderDate.Value.AddMilliseconds (0.0001)'              Eight = o.OrderDate.Value.AddMilliseconds (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddMilliseconds,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddMilliseconds (1.5)'              Two = o.OrderDate.Value.AddMilliseconds (-1.5)'              Three = o.OrderDate.Value.AddMilliseconds (1500.76)'              Four = o.OrderDate.Value.AddMilliseconds (-1500.76)'              Five = o.OrderDate.Value.AddMilliseconds (3651147445123.712)'              Six = o.OrderDate.Value.AddMilliseconds (-3651147445123.712)'              Seven = o.OrderDate.Value.AddMilliseconds (0.0001)'              Eight = o.OrderDate.Value.AddMilliseconds (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddMilliseconds,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddMilliseconds (1.5)'              Two = o.OrderDate.Value.AddMilliseconds (-1.5)'              Three = o.OrderDate.Value.AddMilliseconds (1500.76)'              Four = o.OrderDate.Value.AddMilliseconds (-1500.76)'              Five = o.OrderDate.Value.AddMilliseconds (3651147445123.712)'              Six = o.OrderDate.Value.AddMilliseconds (-3651147445123.712)'              Seven = o.OrderDate.Value.AddMilliseconds (0.0001)'              Eight = o.OrderDate.Value.AddMilliseconds (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddMilliseconds,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddMilliseconds (1.5)'              Two = o.OrderDate.Value.AddMilliseconds (-1.5)'              Three = o.OrderDate.Value.AddMilliseconds (1500.76)'              Four = o.OrderDate.Value.AddMilliseconds (-1500.76)'              Five = o.OrderDate.Value.AddMilliseconds (3651147445123.712)'              Six = o.OrderDate.Value.AddMilliseconds (-3651147445123.712)'              Seven = o.OrderDate.Value.AddMilliseconds (0.0001)'              Eight = o.OrderDate.Value.AddMilliseconds (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddMilliseconds,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddMilliseconds (1.5)'              Two = o.OrderDate.Value.AddMilliseconds (-1.5)'              Three = o.OrderDate.Value.AddMilliseconds (1500.76)'              Four = o.OrderDate.Value.AddMilliseconds (-1500.76)'              Five = o.OrderDate.Value.AddMilliseconds (3651147445123.712)'              Six = o.OrderDate.Value.AddMilliseconds (-3651147445123.712)'              Seven = o.OrderDate.Value.AddMilliseconds (0.0001)'              Eight = o.OrderDate.Value.AddMilliseconds (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddMilliseconds,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddMilliseconds (1.5)'              Two = o.OrderDate.Value.AddMilliseconds (-1.5)'              Three = o.OrderDate.Value.AddMilliseconds (1500.76)'              Four = o.OrderDate.Value.AddMilliseconds (-1500.76)'              Five = o.OrderDate.Value.AddMilliseconds (3651147445123.712)'              Six = o.OrderDate.Value.AddMilliseconds (-3651147445123.712)'              Seven = o.OrderDate.Value.AddMilliseconds (0.0001)'              Eight = o.OrderDate.Value.AddMilliseconds (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddMilliseconds,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddMilliseconds (1.5)'              Two = o.OrderDate.Value.AddMilliseconds (-1.5)'              Three = o.OrderDate.Value.AddMilliseconds (1500.76)'              Four = o.OrderDate.Value.AddMilliseconds (-1500.76)'              Five = o.OrderDate.Value.AddMilliseconds (3651147445123.712)'              Six = o.OrderDate.Value.AddMilliseconds (-3651147445123.712)'              Seven = o.OrderDate.Value.AddMilliseconds (0.0001)'              Eight = o.OrderDate.Value.AddMilliseconds (-0.0001)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddTicks,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddTicks (1)'              Two = o.OrderDate.Value.AddTicks (-1)'              Three = o.OrderDate.Value.AddTicks (1501)'              Four = o.OrderDate.Value.AddTicks (-1501)'              Five = o.OrderDate.Value.AddTicks (507365465231654654L)'              Six = o.OrderDate.Value.AddTicks (-57365465231654654L)'              Seven = o.OrderDate.Value.AddTicks (o.OrderID)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddTicks,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddTicks (1)'              Two = o.OrderDate.Value.AddTicks (-1)'              Three = o.OrderDate.Value.AddTicks (1501)'              Four = o.OrderDate.Value.AddTicks (-1501)'              Five = o.OrderDate.Value.AddTicks (507365465231654654L)'              Six = o.OrderDate.Value.AddTicks (-57365465231654654L)'              Seven = o.OrderDate.Value.AddTicks (o.OrderID)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddTicks,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddTicks (1)'              Two = o.OrderDate.Value.AddTicks (-1)'              Three = o.OrderDate.Value.AddTicks (1501)'              Four = o.OrderDate.Value.AddTicks (-1501)'              Five = o.OrderDate.Value.AddTicks (507365465231654654L)'              Six = o.OrderDate.Value.AddTicks (-57365465231654654L)'              Seven = o.OrderDate.Value.AddTicks (o.OrderID)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,AddTicks,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.AddTicks (1)'              Two = o.OrderDate.Value.AddTicks (-1)'              Three = o.OrderDate.Value.AddTicks (1501)'              Four = o.OrderDate.Value.AddTicks (-1501)'              Five = o.OrderDate.Value.AddTicks (507365465231654654L)'              Six = o.OrderDate.Value.AddTicks (-57365465231654654L)'              Seven = o.OrderDate.Value.AddTicks (o.OrderID)'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,Add_TimeSpan,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.Add (TimeSpan.FromDays (1.5))'              Two = o.OrderDate.Value.Add (TimeSpan.FromDays (-1.5))'              Three = o.OrderDate.Value.Add (TimeSpan.FromDays (1500.76))'              Four = o.OrderDate.Value.Add (TimeSpan.FromDays (-1500.76))'              Five = o.OrderDate.Value.Add (TimeSpan.FromDays (365114.7))'              Six = o.OrderDate.Value.Add (TimeSpan.FromDays (-65114.7))'              Seven = o.OrderDate.Value.Add (TimeSpan.FromDays (0.0001))'              Eight = o.OrderDate.Value.Add (TimeSpan.FromDays (-0.0001))'              Nine = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1.5))'              Ten = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1.5))'              Eleven = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1500.76))'              Twelve = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1500.76))'              Thirteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (54987987987987.7))'              Fourteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-4987987987987.7))'              Fifteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (0.0001))'              Sixteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-0.0001))'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,Add_TimeSpan,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.Add (TimeSpan.FromDays (1.5))'              Two = o.OrderDate.Value.Add (TimeSpan.FromDays (-1.5))'              Three = o.OrderDate.Value.Add (TimeSpan.FromDays (1500.76))'              Four = o.OrderDate.Value.Add (TimeSpan.FromDays (-1500.76))'              Five = o.OrderDate.Value.Add (TimeSpan.FromDays (365114.7))'              Six = o.OrderDate.Value.Add (TimeSpan.FromDays (-65114.7))'              Seven = o.OrderDate.Value.Add (TimeSpan.FromDays (0.0001))'              Eight = o.OrderDate.Value.Add (TimeSpan.FromDays (-0.0001))'              Nine = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1.5))'              Ten = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1.5))'              Eleven = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1500.76))'              Twelve = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1500.76))'              Thirteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (54987987987987.7))'              Fourteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-4987987987987.7))'              Fifteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (0.0001))'              Sixteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-0.0001))'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,Add_TimeSpan,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.Add (TimeSpan.FromDays (1.5))'              Two = o.OrderDate.Value.Add (TimeSpan.FromDays (-1.5))'              Three = o.OrderDate.Value.Add (TimeSpan.FromDays (1500.76))'              Four = o.OrderDate.Value.Add (TimeSpan.FromDays (-1500.76))'              Five = o.OrderDate.Value.Add (TimeSpan.FromDays (365114.7))'              Six = o.OrderDate.Value.Add (TimeSpan.FromDays (-65114.7))'              Seven = o.OrderDate.Value.Add (TimeSpan.FromDays (0.0001))'              Eight = o.OrderDate.Value.Add (TimeSpan.FromDays (-0.0001))'              Nine = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1.5))'              Ten = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1.5))'              Eleven = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1500.76))'              Twelve = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1500.76))'              Thirteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (54987987987987.7))'              Fourteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-4987987987987.7))'              Fifteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (0.0001))'              Sixteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-0.0001))'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,Add_TimeSpan,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.Add (TimeSpan.FromDays (1.5))'              Two = o.OrderDate.Value.Add (TimeSpan.FromDays (-1.5))'              Three = o.OrderDate.Value.Add (TimeSpan.FromDays (1500.76))'              Four = o.OrderDate.Value.Add (TimeSpan.FromDays (-1500.76))'              Five = o.OrderDate.Value.Add (TimeSpan.FromDays (365114.7))'              Six = o.OrderDate.Value.Add (TimeSpan.FromDays (-65114.7))'              Seven = o.OrderDate.Value.Add (TimeSpan.FromDays (0.0001))'              Eight = o.OrderDate.Value.Add (TimeSpan.FromDays (-0.0001))'              Nine = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1.5))'              Ten = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1.5))'              Eleven = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1500.76))'              Twelve = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1500.76))'              Thirteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (54987987987987.7))'              Fourteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-4987987987987.7))'              Fifteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (0.0001))'              Sixteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-0.0001))'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,Add_TimeSpan,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.Add (TimeSpan.FromDays (1.5))'              Two = o.OrderDate.Value.Add (TimeSpan.FromDays (-1.5))'              Three = o.OrderDate.Value.Add (TimeSpan.FromDays (1500.76))'              Four = o.OrderDate.Value.Add (TimeSpan.FromDays (-1500.76))'              Five = o.OrderDate.Value.Add (TimeSpan.FromDays (365114.7))'              Six = o.OrderDate.Value.Add (TimeSpan.FromDays (-65114.7))'              Seven = o.OrderDate.Value.Add (TimeSpan.FromDays (0.0001))'              Eight = o.OrderDate.Value.Add (TimeSpan.FromDays (-0.0001))'              Nine = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1.5))'              Ten = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1.5))'              Eleven = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1500.76))'              Twelve = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1500.76))'              Thirteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (54987987987987.7))'              Fourteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-4987987987987.7))'              Fifteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (0.0001))'              Sixteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-0.0001))'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,Add_TimeSpan,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.Add (TimeSpan.FromDays (1.5))'              Two = o.OrderDate.Value.Add (TimeSpan.FromDays (-1.5))'              Three = o.OrderDate.Value.Add (TimeSpan.FromDays (1500.76))'              Four = o.OrderDate.Value.Add (TimeSpan.FromDays (-1500.76))'              Five = o.OrderDate.Value.Add (TimeSpan.FromDays (365114.7))'              Six = o.OrderDate.Value.Add (TimeSpan.FromDays (-65114.7))'              Seven = o.OrderDate.Value.Add (TimeSpan.FromDays (0.0001))'              Eight = o.OrderDate.Value.Add (TimeSpan.FromDays (-0.0001))'              Nine = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1.5))'              Ten = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1.5))'              Eleven = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1500.76))'              Twelve = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1500.76))'              Thirteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (54987987987987.7))'              Fourteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-4987987987987.7))'              Fifteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (0.0001))'              Sixteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-0.0001))'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,Add_TimeSpan,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.Add (TimeSpan.FromDays (1.5))'              Two = o.OrderDate.Value.Add (TimeSpan.FromDays (-1.5))'              Three = o.OrderDate.Value.Add (TimeSpan.FromDays (1500.76))'              Four = o.OrderDate.Value.Add (TimeSpan.FromDays (-1500.76))'              Five = o.OrderDate.Value.Add (TimeSpan.FromDays (365114.7))'              Six = o.OrderDate.Value.Add (TimeSpan.FromDays (-65114.7))'              Seven = o.OrderDate.Value.Add (TimeSpan.FromDays (0.0001))'              Eight = o.OrderDate.Value.Add (TimeSpan.FromDays (-0.0001))'              Nine = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1.5))'              Ten = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1.5))'              Eleven = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1500.76))'              Twelve = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1500.76))'              Thirteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (54987987987987.7))'              Fourteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-4987987987987.7))'              Fifteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (0.0001))'              Sixteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-0.0001))'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,Add_TimeSpan,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.Add (TimeSpan.FromDays (1.5))'              Two = o.OrderDate.Value.Add (TimeSpan.FromDays (-1.5))'              Three = o.OrderDate.Value.Add (TimeSpan.FromDays (1500.76))'              Four = o.OrderDate.Value.Add (TimeSpan.FromDays (-1500.76))'              Five = o.OrderDate.Value.Add (TimeSpan.FromDays (365114.7))'              Six = o.OrderDate.Value.Add (TimeSpan.FromDays (-65114.7))'              Seven = o.OrderDate.Value.Add (TimeSpan.FromDays (0.0001))'              Eight = o.OrderDate.Value.Add (TimeSpan.FromDays (-0.0001))'              Nine = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1.5))'              Ten = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1.5))'              Eleven = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1500.76))'              Twelve = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1500.76))'              Thirteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (54987987987987.7))'              Fourteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-4987987987987.7))'              Fifteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (0.0001))'              Sixteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-0.0001))'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,Add_TimeSpan,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.Add (TimeSpan.FromDays (1.5))'              Two = o.OrderDate.Value.Add (TimeSpan.FromDays (-1.5))'              Three = o.OrderDate.Value.Add (TimeSpan.FromDays (1500.76))'              Four = o.OrderDate.Value.Add (TimeSpan.FromDays (-1500.76))'              Five = o.OrderDate.Value.Add (TimeSpan.FromDays (365114.7))'              Six = o.OrderDate.Value.Add (TimeSpan.FromDays (-65114.7))'              Seven = o.OrderDate.Value.Add (TimeSpan.FromDays (0.0001))'              Eight = o.OrderDate.Value.Add (TimeSpan.FromDays (-0.0001))'              Nine = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1.5))'              Ten = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1.5))'              Eleven = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1500.76))'              Twelve = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1500.76))'              Thirteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (54987987987987.7))'              Fourteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-4987987987987.7))'              Fifteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (0.0001))'              Sixteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-0.0001))'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,Add_TimeSpan,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.Add (TimeSpan.FromDays (1.5))'              Two = o.OrderDate.Value.Add (TimeSpan.FromDays (-1.5))'              Three = o.OrderDate.Value.Add (TimeSpan.FromDays (1500.76))'              Four = o.OrderDate.Value.Add (TimeSpan.FromDays (-1500.76))'              Five = o.OrderDate.Value.Add (TimeSpan.FromDays (365114.7))'              Six = o.OrderDate.Value.Add (TimeSpan.FromDays (-65114.7))'              Seven = o.OrderDate.Value.Add (TimeSpan.FromDays (0.0001))'              Eight = o.OrderDate.Value.Add (TimeSpan.FromDays (-0.0001))'              Nine = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1.5))'              Ten = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1.5))'              Eleven = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1500.76))'              Twelve = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1500.76))'              Thirteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (54987987987987.7))'              Fourteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-4987987987987.7))'              Fifteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (0.0001))'              Sixteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-0.0001))'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,Add_TimeSpan,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.Add (TimeSpan.FromDays (1.5))'              Two = o.OrderDate.Value.Add (TimeSpan.FromDays (-1.5))'              Three = o.OrderDate.Value.Add (TimeSpan.FromDays (1500.76))'              Four = o.OrderDate.Value.Add (TimeSpan.FromDays (-1500.76))'              Five = o.OrderDate.Value.Add (TimeSpan.FromDays (365114.7))'              Six = o.OrderDate.Value.Add (TimeSpan.FromDays (-65114.7))'              Seven = o.OrderDate.Value.Add (TimeSpan.FromDays (0.0001))'              Eight = o.OrderDate.Value.Add (TimeSpan.FromDays (-0.0001))'              Nine = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1.5))'              Ten = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1.5))'              Eleven = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1500.76))'              Twelve = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1500.76))'              Thirteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (54987987987987.7))'              Fourteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-4987987987987.7))'              Fifteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (0.0001))'              Sixteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-0.0001))'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,Add_TimeSpan,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.Add (TimeSpan.FromDays (1.5))'              Two = o.OrderDate.Value.Add (TimeSpan.FromDays (-1.5))'              Three = o.OrderDate.Value.Add (TimeSpan.FromDays (1500.76))'              Four = o.OrderDate.Value.Add (TimeSpan.FromDays (-1500.76))'              Five = o.OrderDate.Value.Add (TimeSpan.FromDays (365114.7))'              Six = o.OrderDate.Value.Add (TimeSpan.FromDays (-65114.7))'              Seven = o.OrderDate.Value.Add (TimeSpan.FromDays (0.0001))'              Eight = o.OrderDate.Value.Add (TimeSpan.FromDays (-0.0001))'              Nine = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1.5))'              Ten = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1.5))'              Eleven = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1500.76))'              Twelve = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1500.76))'              Thirteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (54987987987987.7))'              Fourteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-4987987987987.7))'              Fifteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (0.0001))'              Sixteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-0.0001))'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,Add_TimeSpan,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.Add (TimeSpan.FromDays (1.5))'              Two = o.OrderDate.Value.Add (TimeSpan.FromDays (-1.5))'              Three = o.OrderDate.Value.Add (TimeSpan.FromDays (1500.76))'              Four = o.OrderDate.Value.Add (TimeSpan.FromDays (-1500.76))'              Five = o.OrderDate.Value.Add (TimeSpan.FromDays (365114.7))'              Six = o.OrderDate.Value.Add (TimeSpan.FromDays (-65114.7))'              Seven = o.OrderDate.Value.Add (TimeSpan.FromDays (0.0001))'              Eight = o.OrderDate.Value.Add (TimeSpan.FromDays (-0.0001))'              Nine = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1.5))'              Ten = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1.5))'              Eleven = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1500.76))'              Twelve = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1500.76))'              Thirteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (54987987987987.7))'              Fourteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-4987987987987.7))'              Fifteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (0.0001))'              Sixteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-0.0001))'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,Add_TimeSpan,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.Add (TimeSpan.FromDays (1.5))'              Two = o.OrderDate.Value.Add (TimeSpan.FromDays (-1.5))'              Three = o.OrderDate.Value.Add (TimeSpan.FromDays (1500.76))'              Four = o.OrderDate.Value.Add (TimeSpan.FromDays (-1500.76))'              Five = o.OrderDate.Value.Add (TimeSpan.FromDays (365114.7))'              Six = o.OrderDate.Value.Add (TimeSpan.FromDays (-65114.7))'              Seven = o.OrderDate.Value.Add (TimeSpan.FromDays (0.0001))'              Eight = o.OrderDate.Value.Add (TimeSpan.FromDays (-0.0001))'              Nine = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1.5))'              Ten = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1.5))'              Eleven = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1500.76))'              Twelve = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1500.76))'              Thirteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (54987987987987.7))'              Fourteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-4987987987987.7))'              Fifteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (0.0001))'              Sixteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-0.0001))'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,Add_TimeSpan,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.Add (TimeSpan.FromDays (1.5))'              Two = o.OrderDate.Value.Add (TimeSpan.FromDays (-1.5))'              Three = o.OrderDate.Value.Add (TimeSpan.FromDays (1500.76))'              Four = o.OrderDate.Value.Add (TimeSpan.FromDays (-1500.76))'              Five = o.OrderDate.Value.Add (TimeSpan.FromDays (365114.7))'              Six = o.OrderDate.Value.Add (TimeSpan.FromDays (-65114.7))'              Seven = o.OrderDate.Value.Add (TimeSpan.FromDays (0.0001))'              Eight = o.OrderDate.Value.Add (TimeSpan.FromDays (-0.0001))'              Nine = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1.5))'              Ten = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1.5))'              Eleven = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1500.76))'              Twelve = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1500.76))'              Thirteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (54987987987987.7))'              Fourteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-4987987987987.7))'              Fifteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (0.0001))'              Sixteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-0.0001))'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,DateTimeAddTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DateTimeAddTests.cs,Add_TimeSpan,The following statement contains a magic number: var query = DB.Orders.Select (            o => new            {              One = o.OrderDate.Value.Add (TimeSpan.FromDays (1.5))'              Two = o.OrderDate.Value.Add (TimeSpan.FromDays (-1.5))'              Three = o.OrderDate.Value.Add (TimeSpan.FromDays (1500.76))'              Four = o.OrderDate.Value.Add (TimeSpan.FromDays (-1500.76))'              Five = o.OrderDate.Value.Add (TimeSpan.FromDays (365114.7))'              Six = o.OrderDate.Value.Add (TimeSpan.FromDays (-65114.7))'              Seven = o.OrderDate.Value.Add (TimeSpan.FromDays (0.0001))'              Eight = o.OrderDate.Value.Add (TimeSpan.FromDays (-0.0001))'              Nine = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1.5))'              Ten = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1.5))'              Eleven = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (1500.76))'              Twelve = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-1500.76))'              Thirteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (54987987987987.7))'              Fourteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-4987987987987.7))'              Fifteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (0.0001))'              Sixteen = o.OrderDate.Value.Add (TimeSpan.FromMilliseconds (-0.0001))'            });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.MiscTests,ConvertTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\ConvertTests.cs,Convert_ToString_MoreThan30Characters,The following statement contains a magic number: var query = DB.Customers.Where (c => c.CompanyName.Length > 30).Select (c => Convert.ToString (c.CompanyName));
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,ParseStringLiteral,The following statement contains a magic number: string s = token.text.Substring(1' token.text.Length - 2);
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,ParseIif,The following statement contains a magic number: args.Length != 3
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,ParseIif,The following statement contains a magic number: return GenerateConditional(args[0]' args[1]' args[2]' errorPos);
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,IsSignedIntegralType,The following statement contains a magic number: return GetNumericTypeKind(type) == 2;
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,IsUnsignedIntegralType,The following statement contains a magic number: return GetNumericTypeKind(type) == 3;
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,GetNumericTypeKind,The following statement contains a magic number: switch (Type.GetTypeCode(type)) {                  case TypeCode.Char:                  case TypeCode.Single:                  case TypeCode.Double:                  case TypeCode.Decimal:                      return 1;                  case TypeCode.SByte:                  case TypeCode.Int16:                  case TypeCode.Int32:                  case TypeCode.Int64:                      return 2;                  case TypeCode.Byte:                  case TypeCode.UInt16:                  case TypeCode.UInt32:                  case TypeCode.UInt64:                      return 3;                  default:                      return 0;              }
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,GetNumericTypeKind,The following statement contains a magic number: switch (Type.GetTypeCode(type)) {                  case TypeCode.Char:                  case TypeCode.Single:                  case TypeCode.Double:                  case TypeCode.Decimal:                      return 1;                  case TypeCode.SByte:                  case TypeCode.Int16:                  case TypeCode.Int32:                  case TypeCode.Int64:                      return 2;                  case TypeCode.Byte:                  case TypeCode.UInt16:                  case TypeCode.UInt32:                  case TypeCode.UInt64:                      return 3;                  default:                      return 0;              }
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,CustomProjectionTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\CustomProjectionTests.cs,SequenceOfEntityProperties,The following statement contains a magic number: var query =            from od in DB.OrderDetails            where od.Quantity <= 55            select od.Quantity;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,CustomProjectionTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\CustomProjectionTests.cs,SequenceOfPrimaryKeys,The following statement contains a magic number: var query =            (from od in DB.OrderDetails              where od.Quantity <= 55              select od.OrderID);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,CustomProjectionTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\CustomProjectionTests.cs,SequenceOfForeignKeyIDs,The following statement contains a magic number: var query =            (from od in DB.OrderDetails              where od.Quantity == 10              select od.Order.OrderID);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,CustomProjectionTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\CustomProjectionTests.cs,ComplexProjection,The following statement contains a magic number: var query =            (from o in DB.Orders              where o.OrderID == 10248              select new { o.OrderID' o.OrderDate' Property = new { o.Customer.ContactName' o.OrderDetails.Count } });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,CustomProjectionTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\CustomProjectionTests.cs,ComplexProjection_WithSingleQuery,The following statement contains a magic number: var query =            (from o in DB.Orders              where o.OrderID == 10248              select new { o.OrderID' o.OrderDate' Property = new { o.Customer.ContactName' o.OrderDetails.Count } }).Single();
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,CustomProjectionTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\CustomProjectionTests.cs,SingleBoolean,The following statement contains a magic number: var query =            (from p in DB.Products              where p.ProductID == 2              select p.Discontinued);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,CustomProjectionTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\CustomProjectionTests.cs,SingleNullableBoolean,The following statement contains a magic number: var query =            (from e in DB.Employees              where e.EmployeeID == 2              select e.HasCar);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,CustomProjectionTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\CustomProjectionTests.cs,ComplexProjection_WithBooleans,The following statement contains a magic number: var query =            (from p in DB.Products              where p.ProductID == 2              select new { p.Discontinued });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,CustomProjectionTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\CustomProjectionTests.cs,ComplexProjection_WithNullableBooleans,The following statement contains a magic number: var query =            (from p in DB.Employees             where p.EmployeeID == 2             select new { p.HasCar });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,CustomProjectionTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\CustomProjectionTests.cs,SingleProperty,The following statement contains a magic number: var query =            (from p in DB.Products              where p.ProductID == 2              select p.ProductName);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,CustomProjectionTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\CustomProjectionTests.cs,ComplexProjection_WithValueTypes,The following statement contains a magic number: var query =            (from p in DB.Products              where p.ProductID == 2              select new { p.ProductID });
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,GroupByTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\GroupByTests.cs,GroupBy_AccessKey_Nesting,The following statement contains a magic number: var query =            from o in DB.Orders            from x in                (                    from c in o.OrderDetails                    group c by c.Quantity                    into ordersByCustomer                    select new { OrderID = o.OrderID' OrderDetail = ordersByCustomer }                    )            let customerName = x.OrderDetail.Key            where customerName == 25            select o;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,LetTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\LetTests.cs,QueryWithLet_LetWithColumn,The following statement contains a magic number: var query =            from o in DB.Orders            let y = o.OrderID            where y > 10248 && y < 10255            select o;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,LetTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\LetTests.cs,QueryWithLet_LetWithColumn,The following statement contains a magic number: var query =            from o in DB.Orders            let y = o.OrderID            where y > 10248 && y < 10255            select o;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,LetTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\LetTests.cs,QueryWithLet_AndMultipleFromClauses,The following statement contains a magic number: var query =            from od in DB.OrderDetails            from o in DB.Orders            let x = od.Order            where od.Order.OrderID == 10248            where o == od.Order            select x;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,LetTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\LetTests.cs,QueryWithMemberFromClause_WithLet,The following statement contains a magic number: var query =            from c in DB.OrderDetails            let x = c.Order            from od in x.OrderDetails            where c.Order.OrderID == 10248            select od;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,MethodCallsTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\MethodCallsTests.cs,Insert_AtEndOfString,The following statement contains a magic number: var query =            from c in DB.Customers            where c.City.Insert (4' "Test") == "BernTest"            select c;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,MultiFromTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\MultiFromTests.cs,Query_WithSeveralFroms,The following statement contains a magic number: var query =            from o in DB.Orders            from c in DB.OrderDetails            where c.Order == o            where o.OrderID == 10248            select c;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,MultiFromTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\MultiFromTests.cs,QueryWithMemberFromClause,The following statement contains a magic number: var query =            from o in DB.Orders            from od in DB.OrderDetails            where o.OrderID == 10248            select od;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,OrderByTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\OrderByTests.cs,AutomaticOrderByHandlingInSubStatements_InFromClause_WithTopExpression,The following statement contains a magic number: var query =            from o in DB.Orders            from i in                (from c in DB.Customers                  where c == o.Customer                  orderby c.City                  select c).Take (10)            select i;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,OrderByTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\OrderByTests.cs,AutomaticOrderByHandlingInSubStatements_InWhereClause_WithTopExpression,The following statement contains a magic number: var query =            from o in DB.Orders            where                (from so in DB.Orders                  orderby so.EmployeeID                  where so.OrderID == 10248                  select so.EmployeeID)                    .Single() != null && o.EmployeeID < 6            select o;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,OrderByTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\OrderByTests.cs,AutomaticOrderByHandlingInSubStatements_InWhereClause_WithTopExpression,The following statement contains a magic number: var query =            from o in DB.Orders            where                (from so in DB.Orders                  orderby so.EmployeeID                  where so.OrderID == 10248                  select so.EmployeeID)                    .Single() != null && o.EmployeeID < 6            select o;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,OrderByTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\OrderByTests.cs,AutomaticOrderByHandlingInSubStatements_InWhereClause_WithoutTopExpression,The following statement contains a magic number: var query =            from o in DB.Orders            where                (from so in DB.Orders                  orderby so.EmployeeID                  where so.OrderID == 10248                  select so.EmployeeID)                    .Count() > 0 && o.EmployeeID < 6            select o;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,OrderByTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\OrderByTests.cs,AutomaticOrderByHandlingInSubStatements_InWhereClause_WithoutTopExpression,The following statement contains a magic number: var query =            from o in DB.Orders            where                (from so in DB.Orders                  orderby so.EmployeeID                  where so.OrderID == 10248                  select so.EmployeeID)                    .Count() > 0 && o.EmployeeID < 6            select o;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,Query_WithEntitySetContains,The following statement contains a magic number: var orderDetail = DB.Orders.Single (x => x.OrderID == 10248);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,Query_WithEntitySetCount,The following statement contains a magic number: var query =            from o in DB.Orders            where o.OrderDetails.Count == 2            select o;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,QueryWithSingle,The following statement contains a magic number: var query =            (from o in DB.Orders              where o.OrderID == 10248              select o).Single();
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,QueryWithSingleOrDefault_ReturnsSingleItem,The following statement contains a magic number: var query =            (from o in DB.Orders              where o.OrderID == 10248              select o).SingleOrDefault();
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,QueryWithSingleOrDefault_ReturnsNull_WhenNoItem,The following statement contains a magic number: var query =            (from o in DB.Orders              where o.OrderID == 999999              select o).SingleOrDefault();
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,QueryWithCount_InSubquery,The following statement contains a magic number: var query =            (from o in DB.Orders              where (from od in DB.OrderDetails where od.Order == o select od).Count() == 2              select o);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,QueryDistinctTest,The following statement contains a magic number: var query =            (from o in DB.Orders              from od in o.OrderDetails              where od.OrderID == 10248              select o).Distinct();
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,QueryWithArithmeticOperations,The following statement contains a magic number: var query =            from od in DB.OrderDetails            where (od.Quantity + od.Quantity) == 30            select od;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,QueryWithSubstring,The following statement contains a magic number: var query =            from c in DB.Customers            where c.ContactName.Substring (1' 3).Contains ("Ana")            select c;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,QueryWithTake,The following statement contains a magic number: var query =            (from o in DB.Orders              orderby o.OrderID              select o).Take (3);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,QueryWithTake_SubQueryAsArgument,The following statement contains a magic number: var query =            from o in DB.Orders            from od in o.OrderDetails.Take (o.OrderDetails.Where(od => od.Quantity < 25).Count())            where o.OrderID == 10248            select od;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,QueryWithTake_SubQueryAsArgument,The following statement contains a magic number: var query =            from o in DB.Orders            from od in o.OrderDetails.Take (o.OrderDetails.Where(od => od.Quantity < 25).Count())            where o.OrderID == 10248            select od;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,QueryWithContainsInWhere_OnCollection,The following statement contains a magic number: var possibleItems = new[] { 10248' 10249' 10250 };
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,QueryWithContainsInWhere_OnCollection,The following statement contains a magic number: var possibleItems = new[] { 10248' 10249' 10250 };
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,QueryWithContainsInWhere_OnCollection,The following statement contains a magic number: var possibleItems = new[] { 10248' 10249' 10250 };
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,QueryWithContainsInWhere_OnCollection_WithObjectIDs,The following statement contains a magic number: var possibleItems = new[] { 10248' 10249 };
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,QueryWithContainsInWhere_OnCollection_WithObjectIDs,The following statement contains a magic number: var possibleItems = new[] { 10248' 10249 };
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,QueryWithAll_AfterIncompatibleResultOperator,The following statement contains a magic number: var query = DB.Customers.Take (10).Take (20).All (c => c.City == "Berlin");
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,QueryWithAll_AfterIncompatibleResultOperator,The following statement contains a magic number: var query = DB.Customers.Take (10).Take (20).All (c => c.City == "Berlin");
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,QueryWithOrderBy_BeforeCount_DueToIncompatibleResultOperators,The following statement contains a magic number: var query = DB.Customers.OrderBy (c => c.City).Take (10).Count();
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,QueryWithAll_InSubquery,The following statement contains a magic number: var query =            from o in DB.Orders            where o.OrderDetails.All (od => od.ProductID == 11)            select o;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,DefaultIsEmpty_WithoutJoin,The following statement contains a magic number: var query =            (from o in DB.Orders              where o.OrderID == 10248              select o).DefaultIfEmpty();
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,DefaultIsEmpty_WithJoin,The following statement contains a magic number: var query =            (from o in DB.Orders              join c in DB.Customers on o.Customer equals c into goc              from oc in goc.DefaultIfEmpty()              where o.OrderID == 10248              select oc);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,Average_OnTopLevel_WithIntProperty,The following statement contains a magic number: double average =            (from o in DB.Orders              where o.OrderID <= 10255              select o).Average (o => o.OrderID);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,Average_OnTopLevel_WithIntProperty,The following statement contains a magic number: Assert.That (average' Is.EqualTo (10251));
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,Average_OnTopLevel_WithIntProperty_CastToFloat,The following statement contains a magic number: var query =            (from o in DB.Orders              where o.OrderID <= 10255              select o).Average (o => (float) o.OrderID);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,Average_InSubquery_WithIntProperty,The following statement contains a magic number: var query =            from c in DB.Customers            where c.Orders.Average (o => o.OrderID) == 1.5            select c;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,Sum_InSubquery,The following statement contains a magic number: var query =            (from o in DB.Orders              where (from s2 in DB.Orders select s2.OrderID).Sum() == 20497              select o);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,Skip_WithEntity,The following statement contains a magic number: var query =            (from o in DB.Orders              orderby o.OrderID              select o).Skip (6);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,Skip_WithEntity_WithoutExplicitOrdering,The following statement contains a magic number: var query =            (from o in DB.Orders              select o).Skip (6).Count();
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,TakeAfterSkip,The following statement contains a magic number: var query =            (from o in DB.Orders              orderby o.OrderID              select o).Skip (3).Take (2);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,ResultOperatorTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\ResultOperatorTests.cs,TakeAfterSkip,The following statement contains a magic number: var query =            (from o in DB.Orders              orderby o.OrderID              select o).Skip (3).Take (2);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,SelectTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\SelectTests.cs,LogicalMemberAccessOnCoalesceExpression,The following statement contains a magic number: var query =            from o in DB.Orders            where (o.ShipRegion ?? o.Customer.Region).Length == 2            select o;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,SelectTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\SelectTests.cs,LogicalMemberAccessOnConditionalExpression,The following statement contains a magic number: var query =            from o in DB.Orders            where (o.ShipRegion == "Isle of Wight" ? o.ShipRegion : o.Customer.Region).Length == 13            select o;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,SelectTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\SelectTests.cs,Query_WithConstant,The following statement contains a magic number: var query =            (from o in DB.Orders              where o.OrderID == 10248              select 1).Single();
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,SelectTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\SelectTests.cs,Query_WithObjectID,The following statement contains a magic number: var query =            (from o in DB.Orders              where o.OrderID == 10248              select o.OrderID).Single();
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,SetOperationsTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\SetOperationsTests.cs,Union_WithNonDiscardedOrderByWithTake,The following statement contains a magic number: var query =            DB.Contacts.OfType<CustomerContact>().Select (c => c.ContactID).OrderByDescending (c => c).Take (3)                .Union (DB.Contacts.OfType<ShipperContact>().Select (c => c.ContactID).OrderByDescending (c => c)).Take (3);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,SetOperationsTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\SetOperationsTests.cs,Union_WithNonDiscardedOrderByWithTake,The following statement contains a magic number: var query =            DB.Contacts.OfType<CustomerContact>().Select (c => c.ContactID).OrderByDescending (c => c).Take (3)                .Union (DB.Contacts.OfType<ShipperContact>().Select (c => c.ContactID).OrderByDescending (c => c)).Take (3);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,SetOperationsTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\SetOperationsTests.cs,Concat_WithNonDiscardedOrderByWithTake,The following statement contains a magic number: var query =            DB.Contacts.OfType<CustomerContact>().Select (c => c.ContactID).OrderByDescending (c => c).Take (3)                .Concat (DB.Contacts.OfType<ShipperContact>().Select (c => c.ContactID).OrderByDescending (c => c)).Take (3);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,SetOperationsTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\SetOperationsTests.cs,Concat_WithNonDiscardedOrderByWithTake,The following statement contains a magic number: var query =            DB.Contacts.OfType<CustomerContact>().Select (c => c.ContactID).OrderByDescending (c => c).Take (3)                .Concat (DB.Contacts.OfType<ShipperContact>().Select (c => c.ContactID).OrderByDescending (c => c)).Take (3);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,SubQueryTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\SubQueryTests.cs,QueryWithSubQueryInWhere_AccessingOuterVariable_InMainFromClause,The following statement contains a magic number: var orders = DB.Orders.Single (x => x.OrderID == 10248);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,SubQueryTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\SubQueryTests.cs,QueryWithSubQueryAndJoinInWhere_WithOuterVariable,The following statement contains a magic number: var outerCustomer = DB.Orders.Single (x => x.OrderID == 10248);
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,SubQueryTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\SubQueryTests.cs,SubQueryWithNonConstantFromExpression,The following statement contains a magic number: var query =            from o in DB.Orders            from od in (from od1 in o.OrderDetails select od1)            where o.OrderID == 10248            select od;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,SubQueryTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\SubQueryTests.cs,OrderingsInSubQuery_WithTake,The following statement contains a magic number: var query =            from o in (from o in DB.Orders              orderby o.OrderID              select o).Take (2)            select o;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,SubQueryTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\SubQueryTests.cs,OrderingsInSubQuery_WithoutTakeOrDistinct_WithAccessToMemberOfSubQuery,The following statement contains a magic number: var query =            from c in DB.Customers            where c.CustomerID == "ALFKI"            from o in (from o in c.Orders orderby o.OrderID ascending select o)            where o.OrderID < 10249            select o;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,SubQueryTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\SubQueryTests.cs,MemberAccess_OnSubQuery_WithEntities,The following statement contains a magic number: var query =            (from o in DB.Orders              where o.OrderID == 10248              select (from od in o.OrderDetails                orderby od.OrderID                select od).First().Product).Single();
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,SubQueryTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\SubQueryTests.cs,MemberAccess_OnSubQuery_WithColumns,The following statement contains a magic number: var query =            (from o in DB.Orders              where o.OrderID == 10248              select (from od in o.OrderDetails                orderby od.OrderID                select od.Order.CustomerID).First().Length).Single();
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,WhereTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\WhereTests.cs,QueryWithWhereConditionAndStartsWith_NonConstantValue,The following statement contains a magic number: var query =            from c in DB.Customers            where c.PostalCode.StartsWith (DB.Customers.Select (x => x.Fax.Substring (0' 3)).First())            select c;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,WhereTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\WhereTests.cs,QueryWithWhereAndEndsWith_NonConstantValue,The following statement contains a magic number: var query =            from c in DB.Customers            where c.City.EndsWith (DB.Customers.Select (x => x.City.Substring (x.PostalCode.Length - 2)).First())            select c;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,WhereTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\WhereTests.cs,QueryWithContains_Like_NonConstantValue,The following statement contains a magic number: var query =            from c in DB.Customers            where c.City.Contains (DB.Customers.OrderBy (x => x.City).Select (y => y.City.Substring (1' 2)).First())            select c;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,WhereTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\WhereTests.cs,QueryWithWhere_BooleanPropertyAndAnother,The following statement contains a magic number: int discontinuedProductID = 5;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,WhereTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\WhereTests.cs,QueryWithWhere_BooleanPropertyAndAnother_Negate,The following statement contains a magic number: int notDiscontinuedProductID = 4;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,WhereTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\WhereTests.cs,QueryWithWhere_BooleanPropertyAndAnother_ExplicitComparison_True,The following statement contains a magic number: int discontinuedProductID = 5;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,WhereTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\WhereTests.cs,QueryWithWhere_BooleanPropertyAndAnother_ExplicitComparison_False,The following statement contains a magic number: int notDiscontinuedProductID = 4;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,WhereTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\WhereTests.cs,QueryWithEqualConditionInWherePart,The following statement contains a magic number: var query =            from o2 in DB.Orders            where o2.OrderID == (o2.OrderID == 1 ? 2 : 3)            select o2;
Magic Number,Remotion.Linq.IntegrationTests.CSharp.SystemTests,WhereTests,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\SystemTests\WhereTests.cs,QueryWithEqualConditionInWherePart,The following statement contains a magic number: var query =            from o2 in DB.Orders            where o2.OrderID == (o2.OrderID == 1 ? 2 : 3)            select o2;
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,ParseComparison,The following switch statement is missing a default case: switch (op.id) {                      case TokenId.Equal:                      case TokenId.DoubleEqual:                          left = GenerateEqual(left' right);                          break;                      case TokenId.ExclamationEqual:                      case TokenId.LessGreater:                          left = GenerateNotEqual(left' right);                          break;                      case TokenId.GreaterThan:                          left = GenerateGreaterThan(left' right);                          break;                      case TokenId.GreaterThanEqual:                          left = GenerateGreaterThanEqual(left' right);                          break;                      case TokenId.LessThan:                          left = GenerateLessThan(left' right);                          break;                      case TokenId.LessThanEqual:                          left = GenerateLessThanEqual(left' right);                          break;                  }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,ParseAdditive,The following switch statement is missing a default case: switch (op.id) {                      case TokenId.Plus:                          if (left.Type == typeof(string) || right.Type == typeof(string))                              goto case TokenId.Amphersand;                          CheckAndPromoteOperands(typeof(IAddSignatures)' op.text' ref left' ref right' op.pos);                          left = GenerateAdd(left' right);                          break;                      case TokenId.Minus:                          CheckAndPromoteOperands(typeof(ISubtractSignatures)' op.text' ref left' ref right' op.pos);                          left = GenerateSubtract(left' right);                          break;                      case TokenId.Amphersand:                          left = GenerateStringConcat(left' right);                          break;                  }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,ParseMultiplicative,The following switch statement is missing a default case: switch (op.id) {                      case TokenId.Asterisk:                          left = Expression.Multiply(left' right);                          break;                      case TokenId.Slash:                          left = Expression.Divide(left' right);                          break;                      case TokenId.Percent:                      case TokenId.Identifier:                          left = Expression.Modulo(left' right);                          break;                  }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,PromoteExpression,The following switch statement is missing a default case: switch (Type.GetTypeCode(ce.Type)) {                              case TypeCode.Int32:                              case TypeCode.UInt32:                              case TypeCode.Int64:                              case TypeCode.UInt64:                                  value = ParseNumber(text' target);                                  break;                              case TypeCode.Double:                                  if (target == typeof(decimal)) value = ParseNumber(text' target);                                  break;                              case TypeCode.String:                                  value = ParseEnum(text' target);                                  break;                          }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,ParseNumber,The following switch statement is missing a default case: switch (Type.GetTypeCode(GetNonNullableType(type))) {                  case TypeCode.SByte:                      sbyte sb;                      if (sbyte.TryParse(text' out sb)) return sb;                      break;                  case TypeCode.Byte:                      byte b;                      if (byte.TryParse(text' out b)) return b;                      break;                  case TypeCode.Int16:                      short s;                      if (short.TryParse(text' out s)) return s;                      break;                  case TypeCode.UInt16:                      ushort us;                      if (ushort.TryParse(text' out us)) return us;                      break;                  case TypeCode.Int32:                      int i;                      if (int.TryParse(text' out i)) return i;                      break;                  case TypeCode.UInt32:                      uint ui;                      if (uint.TryParse(text' out ui)) return ui;                      break;                  case TypeCode.Int64:                      long l;                      if (long.TryParse(text' out l)) return l;                      break;                  case TypeCode.UInt64:                      ulong ul;                      if (ulong.TryParse(text' out ul)) return ul;                      break;                  case TypeCode.Single:                      float f;                      if (float.TryParse(text' out f)) return f;                      break;                  case TypeCode.Double:                      double d;                      if (double.TryParse(text' out d)) return d;                      break;                  case TypeCode.Decimal:                      decimal e;                      if (decimal.TryParse(text' out e)) return e;                      break;              }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {                          case TypeCode.SByte:                          case TypeCode.Int16:                          case TypeCode.Int32:                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {                          case TypeCode.Byte:                          case TypeCode.Int16:                          case TypeCode.UInt16:                          case TypeCode.Int32:                          case TypeCode.UInt32:                          case TypeCode.Int64:                          case TypeCode.UInt64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {                          case TypeCode.Int16:                          case TypeCode.Int32:                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {                          case TypeCode.UInt16:                          case TypeCode.Int32:                          case TypeCode.UInt32:                          case TypeCode.Int64:                          case TypeCode.UInt64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {                          case TypeCode.Int32:                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {                          case TypeCode.UInt32:                          case TypeCode.Int64:                          case TypeCode.UInt64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {                          case TypeCode.UInt64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\IntegrationTests.CSharp\MiscTests\DynamicLinq\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {                          case TypeCode.Single:                          case TypeCode.Double:                              return true;                      }
