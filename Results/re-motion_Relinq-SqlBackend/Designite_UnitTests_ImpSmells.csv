Implementation smell,Namespace,Class,File,Method,Description
Long Method,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub_CreateDatabaseUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub_CreateDatabaseUtility.cs,GetSampleDataEntities,The method has 108 lines of code.
Long Method,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub.cs,ResolveJoinInfo,The method has 103 lines of code.
Long Method,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,ResultOperatorAfterSetOperation_CausesSubQuery,The method has 121 lines of code.
Complex Method,Remotion.Development.UnitTesting,PrivateInvoke,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\App_Packages\Remotion.Development.UnitTesting.PrivateInvoke.Sources.1.15.23.0\PrivateInvoke.cs,GetMethodBaseInternal,Cyclomatic complexity of the method is 9
Complex Method,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub.cs,ResolveJoinInfo,Cyclomatic complexity of the method is 12
Complex Method,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub.cs,ResolveMemberExpression,Cyclomatic complexity of the method is 17
Long Parameter List,Remotion.Development.UnitTesting,PrivateInvoke,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\App_Packages\Remotion.Development.UnitTesting.PrivateInvoke.Sources.1.15.23.0\PrivateInvoke.cs,InvokeMethodInternal,The method has 5 parameters. Parameters: instance' type' bindingFlags' methodName' arguments
Long Parameter List,Remotion.Development.UnitTesting,PrivateInvoke,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\App_Packages\Remotion.Development.UnitTesting.PrivateInvoke.Sources.1.15.23.0\PrivateInvoke.cs,SetPropertyInternal,The method has 5 parameters. Parameters: instance' type' bindingFlags' propertyName' value
Long Parameter List,Remotion.Development.UnitTesting,PrivateInvoke,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\App_Packages\Remotion.Development.UnitTesting.PrivateInvoke.Sources.1.15.23.0\PrivateInvoke.cs,SetFieldInternal,The method has 5 parameters. Parameters: instance' type' bindingFlags' fieldName' value
Long Parameter List,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub.cs,CreateResolvedJoinInfo,The method has 8 parameters. Parameters: originatingEntity' leftColumnName' leftColumnType' leftColumnIsPrimaryKey' joinedTableInfo' rightColumnName' rightColumnType' rightColumnIsPrimaryKey
Long Parameter List,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SqlBackendIntegrationTestBase,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SqlBackendIntegrationTestBase.cs,CheckQuery,The method has 5 parameters. Parameters: queryable' expectedStatement' expectedInMemoryProjection' simplifyInMemoryProjection' expectedParameters
Long Parameter List,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SqlBackendIntegrationTestBase,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SqlBackendIntegrationTestBase.cs,CheckQuery,The method has 5 parameters. Parameters: queryExpression' expectedStatement' expectedInMemoryProjection' simplify' expectedParameters
Long Parameter List,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SqlBackendIntegrationTestBase,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SqlBackendIntegrationTestBase.cs,CheckQuery,The method has 5 parameters. Parameters: queryModel' expectedStatement' expectedInMemoryProjection' simplifyInMemoryProjection' expectedParameters
Long Parameter List,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlTableAndJoinTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlTableAndJoinTextGeneratorTest.cs,CreateResolvedJoinInfo,The method has 6 parameters. Parameters: type' originalTableAlias' leftSideKeyName' joinedTableName' joinedTableAlias' rightSideKeyName
Long Parameter List,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,TestableSqlPreparationFromExpressionVisitor,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\TestableSqlPreparationFromExpressionVisitor.cs,TestableSqlPreparationFromExpressionVisitor,The method has 6 parameters. Parameters: generator' stage' provider' context' tableGenerator' orderingExtractionPolicy
Long Parameter List,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,TestableResultOperatorHandler,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\TestableResultOperatorHandler.cs,HandleResultOperator,The method has 5 parameters. Parameters: resultOperator' sqlStatementBuilder' generator' stage' context
Long Parameter List,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,TestableResultOperatorHandler,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\TestableResultOperatorHandler.cs,MoveCurrentStatementToSqlTable,The method has 5 parameters. Parameters: sqlStatementBuilder' context' tableGenerator' stage' orderingExtractionPolicy
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,CompoundExpressionComparisonSplitterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\CompoundExpressionComparisonSplitterTest.cs,,The length of the parameter _compoundExpressionComparisonSplitter is 37.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,GroupAggregateSimplifierTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\GroupAggregateSimplifierTest.cs,,The length of the parameter _associatedGroupingSelectExpression is 35.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,GroupAggregateSimplifierTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\GroupAggregateSimplifierTest.cs,,The length of the parameter _resolvedJoinedGroupingSubStatement is 35.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,GroupAggregateSimplifierTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\GroupAggregateSimplifierTest.cs,,The length of the parameter _resolvedElementExpressionReference is 35.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,GroupAggregateSimplifierTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\GroupAggregateSimplifierTest.cs,,The length of the parameter _simplifiableResolvedSqlStatement is 33.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,GroupAggregateSimplifierTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\GroupAggregateSimplifierTest.cs,,The length of the parameter _simplifiableUnresolvedProjection is 33.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,NamedExpressionCombinerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\NamedExpressionCombinerTest.cs,,The length of the parameter _typeForNewExpressionConstructor is 32.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SubStatementReferenceResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SubStatementReferenceResolverTest.cs,ResolveSubStatementReferenceExpression_CreatesSqlGroupingReferenceExpression_ForSqlGroupingSelectExpression,The length of the parameter expectedReferencedKeyExpression is 31.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SubStatementReferenceResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SubStatementReferenceResolverTest.cs,ResolveSubStatementReferenceExpression_CreatesSqlGroupingReferenceExpression_ForSqlGroupingSelectExpression,The length of the parameter expectedReferencedElementExpression is 35.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SubStatementReferenceResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SubStatementReferenceResolverTest.cs,ResolveSubStatementReferenceExpression_CreatesSqlGroupingReferenceExpression_ForSqlGroupingSelectExpression,The length of the parameter referencedAggregationExpression is 31.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SubStatementReferenceResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SubStatementReferenceResolverTest.cs,ResolveSubStatementReferenceExpression_CreatesSqlGroupingReferenceExpression_ForSqlGroupingSelectExpression,The length of the parameter expectedReferencedAggregationExpression is 39.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,DefaultMappingResolutionStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\DefaultMappingResolutionStageTest.cs,ResolveTableInfo,The length of the parameter fakeResolvedSubStatementTableInfo is 33.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,Visit_ValueSemantics_LeavesMethodCallExpression,The length of the parameter methodWithBoolResultExpression is 30.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitConstantExpression_BoolConstants_ValueRequired,The length of the parameter expectedExpressionNullableTrue is 30.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitConstantExpression_BoolConstants_ValueRequired,The length of the parameter expectedExpressionNullableFalse is 31.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitConstantExpression_BoolConstants_ValueRequired,The length of the parameter expectedExpressionNullableNull is 30.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitConstantExpression_BoolConstants_SingleValueRequired,The length of the parameter expectedExpressionNullableTrue is 30.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitConstantExpression_BoolConstants_SingleValueRequired,The length of the parameter expectedExpressionNullableFalse is 31.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitConstantExpression_BoolConstants_SingleValueRequired,The length of the parameter expectedExpressionNullableNull is 30.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitConstantExpression_BoolConstants_PredicateRequired,The length of the parameter expectedExpressionNullableTrue is 30.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitConstantExpression_BoolConstants_PredicateRequired,The length of the parameter expectedExpressionNullableFalse is 31.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitConstantExpression_BoolConstants_PredicateRequired,The length of the parameter expectedExpressionNullableNull is 30.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_BinaryBoolExpression_Coalesce,The length of the parameter expectedResultForPredicateSemantics is 35.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_BinaryBoolExpression_Coalesce_OptimizationForCoalesceToFalse,The length of the parameter expectedExpressionForValueSemantics is 35.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_BinaryBoolExpression_Coalesce_OptimizationForCoalesceToFalse,The length of the parameter expectedResultForPredicateSemantics is 35.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitUnaryExpression_SqlConvertedBooleanExpression,The length of the parameter convertToNullableBoolExpression is 31.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitSqlIsNotNullExpression_AppliesSingleValueSemantics_AllowsSingleValue,The length of the parameter sqlIsNotNullExpressionWithValue is 31.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitSqlIsNotNullExpression_AppliesSingleValueSemantics_ThrowsForComplexValue,The length of the parameter sqlIsNotNullExpressionWithEntity is 32.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,CreateVisitor,The length of the parameter resolveEntityRefMemberExpressions is 33.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,,The length of the parameter _compoundComparisonSplitterMock is 31.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingTableInfoVisitorTest.cs,ResolveTableInfo_GroupReferenceTableInfo,The length of the parameter expectedResultSelectProjection is 30.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,NestedSelectProjection_MemberAccess_ToANewExpression_WithMemberNotInitialized,The length of the parameter querySourceReferenceExpression is 30.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SqlBackendIntegrationTestBase,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SqlBackendIntegrationTestBase.cs,ReplaceConvertExpressionMarker,The length of the parameter simplifiedExpectedInMemoryProjection is 36.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlCompositeCustomTextGeneratorExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlCompositeCustomTextGeneratorExpressionTest.cs,,The length of the parameter _sqlCompositeCustomTextGeneratorExpression is 42.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitNewExpression_WithoutMembers,The length of the parameter expectedProjectionForNamedExpression is 36.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitNewExpression_WithoutMembers,The length of the parameter expectedProjectionForEntityExpression is 37.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitNewExpression_WithoutMembers,The length of the parameter expectedProjectionForNewExpression is 34.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitNewExpression_WithMembers,The length of the parameter expectedProjectionForNamedExpression is 36.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitNewExpression_WithMembers,The length of the parameter expectedProjectionForEntityExpression is 37.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitNewExpression_WithMembers,The length of the parameter expectedProjectionForNewExpression is 34.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitNewExpression_NoSetOperations_ConstantsAreMovedToProjection,The length of the parameter expectedProjectionForNamedExpression is 36.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitNewExpression_NoSetOperations_ConstantsAreMovedToProjection,The length of the parameter expectedProjectionForEntityExpression is 37.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitNewExpression_NoSetOperations_ConstantsAreMovedToProjection,The length of the parameter expectedProjectionForNewExpression is 34.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitNewExpression_WithSetOperations_ConstantsAreNotMovedToProjection,The length of the parameter expectedProjectionForNamedExpression is 36.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitNewExpression_WithSetOperations_ConstantsAreNotMovedToProjection,The length of the parameter expectedProjectionForEntityExpression is 37.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitNewExpression_WithSetOperations_ConstantsAreNotMovedToProjection,The length of the parameter expectedProjectionForNewExpression is 34.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitMethodCallExpression_NoSetOperations,The length of the parameter expectedProjectionForInstanceExpression is 39.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitMethodCallExpression_NoSetOperations,The length of the parameter expectedProjectionForArgumentExpression is 39.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitMethodCallExpression_NoSetOperations_WithoutObject,The length of the parameter expectedProjectionForArgumentExpression is 39.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,TestableSqlCustomTextGeneratorExpression,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\TestableSqlCustomTextGeneratorExpression.cs,Generate,The length of the parameter textGeneratingExpressionVisitor is 31.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,MethodInfoBasedMethodCallTransformerRegistryTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodInfoBasedMethodCallTransformerRegistryTest.cs,GetTransformer_DontFindGenerator_ReturnsNull,The length of the parameter methodCallSqlGeneratorRegistry is 30.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,MethodInfoBasedMethodCallTransformerRegistryTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodInfoBasedMethodCallTransformerRegistryTest.cs,GetItem_DontFindGenerator_ReturnsNull,The length of the parameter methodCallSqlGeneratorRegistry is 30.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,MethodInfoBasedMethodCallTransformerRegistryTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodInfoBasedMethodCallTransformerRegistryTest.cs,GetTransformer,The length of the parameter methodCallSqlGeneratorRegistry is 30.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,MethodInfoBasedMethodCallTransformerRegistryTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodInfoBasedMethodCallTransformerRegistryTest.cs,GetItem,The length of the parameter methodCallSqlGeneratorRegistry is 30.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,MethodInfoBasedMethodCallTransformerRegistryTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodInfoBasedMethodCallTransformerRegistryTest.cs,,The length of the parameter _methodCallTransformerRegistry is 30.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,NameBasedMethodCallTransformerRegistryTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\NameBasedMethodCallTransformerRegistryTest.cs,,The length of the parameter _methodCallTransformerRegistry is 30.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationSubStatementTableFactoryTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationSubStatementTableFactoryTest.cs,SetUp,The length of the parameter builderForStatementWithOrderings is 32.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationSubStatementTableFactoryTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationSubStatementTableFactoryTest.cs,CreateSqlTableForSubStatement_WithOrderingsAndTopExpression_AndDoNotExtractOrderingsPolicy_ReturnsTableWithOrderings_WithOriginalProjection,The length of the parameter statementWithOrderingsAndTopExpression is 38.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,DefaultSqlPreparationStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\DefaultSqlPreparationStageTest.cs,,The length of the parameter _querySourceReferenceExpression is 31.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitQuerySourceReferenceExpression,The length of the parameter querySourceReferenceExpression is 30.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitQuerySourceReferenceExpression_WithNonNullWhereCondition,The length of the parameter querySourceReferenceExpression is 30.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitQuerySourceReferenceExpression_WithOrderings_AndExtractOrdingsPolicy,The length of the parameter querySourceReferenceExpression is 30.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitQuerySourceReferenceExpression_WithOrderings_AndDoNotExtractOrdingsPolicy,The length of the parameter querySourceReferenceExpression is 30.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,,The length of the parameter _methodCallTransformerProvider is 30.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationContextTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationContextTest.cs,GetExpressionMapping,The length of the parameter querySourceReferenceExpression is 30.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationContextTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationContextTest.cs,TryGetExpressiontMappingFromHierarchy,The length of the parameter querySourceReferenceExpression is 30.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationContextTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationContextTest.cs,GetExpressionMapping_GetFromParentContext,The length of the parameter querySourceReferenceExpression is 30.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationContextTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationContextTest.cs,TryGetExpressionMappingFromHierarchy_GetFromParentContext,The length of the parameter querySourceReferenceExpression is 30.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationQueryModelVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationQueryModelVisitorTest.cs,VisitQueryModel_ConstantExpression_Collection,The length of the parameter constantExpressionInSelectProjection is 36.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationQueryModelVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationQueryModelVisitorTest.cs,VisitQueryModel_ConstantExpression_Collection_TypeIsEnumerable_ButValueIsCollection,The length of the parameter constantExpressionInSelectProjection is 36.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationQueryModelVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationQueryModelVisitorTest.cs,AddPreparedFromExpression_WhereConditionIsAdded,The length of the parameter expectedCombinedWhereCondition is 30.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitMemberExpression_WithInnerSqlCaseExpression_NoElse,The length of the parameter nullableValueTypeMemberExpression is 33.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitMemberExpression_WithInnerSqlCaseExpression_NoElse,The length of the parameter expectedNullableValueTypeResult is 31.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,,The length of the parameter _cookQuerySourceReferenceExpression is 35.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,,The length of the parameter _methodCallTransformerProvider is 30.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,AllResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\AllResultOperatorHandlerTest.cs,HandleResultOperator_AllAfterGroupExpression,The length of the parameter innerStatementOfExistsExpression is 32.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,AllResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\AllResultOperatorHandlerTest.cs,HandleResultOperator_AllAfterSetOperation,The length of the parameter innerStatementOfExistsExpression is 32.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,AllResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\AllResultOperatorHandlerTest.cs,GetInnerStatementAfterExistsTransformation,The length of the parameter innerStatementOfExistsExpression is 32.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,GroupResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\GroupResultOperatorHandlerTest.cs,HandleResultOperator_TransformSubqueriesUsedAsGroupByKeys,The length of the parameter preparedSubStatementKeySelector is 31.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlStatementTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlStatementTest.cs,DifferentAggregationModifier,The length of the parameter selectProjectionWithCountAggregation is 36.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlStatementTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlStatementTest.cs,Equals_DifferentSetOperationCombinedStatements,The length of the parameter setOperationCombinedStatement1 is 30.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlStatementTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlStatementTest.cs,Equals_DifferentSetOperationCombinedStatements,The length of the parameter setOperationCombinedStatement2 is 30.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,SqlConvertedBooleanExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\SqlConvertedBooleanExpressionTest.cs,,The length of the parameter _sqlConvertedBooleanExpression is 30.
Long Identifier,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,SqlEntityConstantExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\SqlEntityConstantExpressionTest.cs,VisitChildren_VisitsIdentityExpression_Changed,The length of the parameter newSqlEntityConstantExpression is 30.
Long Statement,Remotion.Linq.SqlBackend.Utilities,ReflectionUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\Core\Utilities\ReflectionUtility.cs,GetItemTypeOfClosedGenericIEnumerable,The length of the statement  "        var message = string.Format ("Expected a closed generic type implementing IEnumerable<T>' but found '{0}'."' enumerableType); " is 125.
Long Statement,Remotion.Development.UnitTesting,PrivateInvoke,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\App_Packages\Remotion.Development.UnitTesting.PrivateInvoke.Sources.1.15.23.0\PrivateInvoke.cs,GetMethodBaseInternal,The length of the statement  "                var message = string.Format ("There is no method \"{0}\" in type {1} that accepts the specified argument types."' methodName' type); " is 132.
Long Statement,Remotion.Development.UnitTesting,PrivateInvoke,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\App_Packages\Remotion.Development.UnitTesting.PrivateInvoke.Sources.1.15.23.0\PrivateInvoke.cs,InvokeNonPublicMethod,The length of the statement  "      return InvokeMethodInternal (target' definingType' BindingFlags.Instance | BindingFlags.NonPublic' methodName' arguments); " is 122.
Long Statement,Remotion.Development.UnitTesting,PrivateInvoke,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\App_Packages\Remotion.Development.UnitTesting.PrivateInvoke.Sources.1.15.23.0\PrivateInvoke.cs,InvokePublicMethod,The length of the statement  "      return InvokeMethodInternal (target' target.GetType()' BindingFlags.Instance | BindingFlags.Public' methodName' arguments); " is 123.
Long Statement,Remotion.Development.UnitTesting,PrivateInvoke,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\App_Packages\Remotion.Development.UnitTesting.PrivateInvoke.Sources.1.15.23.0\PrivateInvoke.cs,GetPropertyInternal,The length of the statement  "        throw new ArgumentException ("No property '" + propertyName + "' found on type '" + type.FullName + "' with binding flags '" + bindingFlags + "'."' " is 147.
Long Statement,Remotion.Development.UnitTesting,PrivateInvoke,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\App_Packages\Remotion.Development.UnitTesting.PrivateInvoke.Sources.1.15.23.0\PrivateInvoke.cs,GetFieldInternal,The length of the statement  "        throw new ArgumentException ("No field '" + fieldName + "' found on type '" + type.FullName + "' with binding flags '" + bindingFlags + "'."' " is 141.
Long Statement,Remotion.Utilities,ArgumentUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\App_Packages\Remotion.Utilities.ArgumentUtility.Sources.1.15.23.0\ArgumentUtility.cs,CreateArgumentTypeException,The length of the statement  "        return new ArgumentException (string.Format ("Parameter '{0}' has unexpected type '{1}'."' argumentName' actualTypeName)' argumentName); " is 136.
Long Statement,Remotion.Utilities,ArgumentUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\App_Packages\Remotion.Utilities.ArgumentUtility.Sources.1.15.23.0\ArgumentUtility.cs,CreateArgumentTypeException,The length of the statement  "            string.Format ("Parameter '{0}' has type '{2}' when type '{1}' was expected."' argumentName' expectedType' actualTypeName)' " is 123.
Long Statement,Remotion.Utilities,ArgumentUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\App_Packages\Remotion.Utilities.ArgumentUtility.Sources.1.15.23.0\ArgumentUtility.cs,CreateArgumentItemNullException,The length of the statement  "      return new ArgumentNullException (argumentName' string.Format ("Item {0} of parameter '{1}' is null."' index' argumentName)); " is 125.
Long Statement,Remotion.Utilities,ExceptionUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\App_Packages\Remotion.Utilities.ExceptionUtility.Sources.1.15.23.0\ExceptionUtility.cs,PreserveStackTrace,The length of the statement  "      // http://weblogs.asp.net/fmarguerie/archive/2008/01/02/rethrowing-exceptions-and-preserving-the-full-call-stack-trace.aspx " is 123.
Long Statement,Remotion.Utilities,ExceptionUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\App_Packages\Remotion.Utilities.ExceptionUtility.Sources.1.15.23.0\ExceptionUtility.cs,GetInternalPreserveStackTrace,The length of the statement  "      var methodInfo = typeof (Exception).GetMethod ("InternalPreserveStackTrace"' BindingFlags.Instance | BindingFlags.NonPublic); " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests,BooleanUtilityTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\BooleanUtilityTest.cs,GetIntToBoolConversionMethod,The length of the statement  "          Is.Not.Null.And.EqualTo (typeof (BooleanUtility).GetMethod ("ConvertNullableIntToNullableBool"' new[] { typeof (int?) }))); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests,ConversionUtilityTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\ConversionUtilityTest.cs,MakeBinaryWithOperandConversion_BothOperands_LiftedToObject,The length of the statement  "      var expectedExpression = BinaryExpression.Equal (Expression.Convert (left' typeof (object))' Expression.Convert (right' typeof (object))); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub_CreateDatabaseUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub_CreateDatabaseUtility.cs,AppendInsertScript,The length of the statement  "      var resolvedTableInfo = (ResolvedSimpleTableInfo) mappingResolver.ResolveTableInfo (new UnresolvedTableInfo (entity.GetType())' generator); " is 139.
Long Statement,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub_CreateDatabaseUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub_CreateDatabaseUtility.cs,GetColumnValue,The length of the statement  "                .SelectMany (p => TryResolveProperty (mappingResolver' sqlEntityDefinition' p' entity)' (p' t) => new { Property = p' ColumnNameAndValue = t }) " is 143.
Long Statement,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub_CreateDatabaseUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub_CreateDatabaseUtility.cs,GetColumnValue,The length of the statement  "      // Assert.That (matchingProperties' Has.Length.LessThanOrEqualTo (1)' entity.GetType().Name + ": " + string.Join ("'"' matchingProperties)); " is 140.
Long Statement,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub_CreateDatabaseUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub_CreateDatabaseUtility.cs,GetSampleDataEntities,The length of the statement  "      var company1 = new Company { ID = 1' MainRestaurant = null' MainKitchen = null' DateOfIncorporation = new DateTime (2001' 01' 13)}; " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub_CreateDatabaseUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub_CreateDatabaseUtility.cs,GetSampleDataEntities,The length of the statement  "      var company2 = new Company { ID = 2' MainRestaurant = null' MainKitchen = null' DateOfIncorporation = new DateTime (1886' 02' 20) }; " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub_CreateDatabaseUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub_CreateDatabaseUtility.cs,GetSampleDataEntities,The length of the statement  "      return new object[] { company1' company2' restaurant1' restaurant2' kitchen1' kitchen2' kitchen3' chef1' chef2' knife1' knife2' cook1' cook2' cook3 }; " is 150.
Long Statement,Remotion.Linq.SqlBackend.UnitTests,MediumTrustUnmappedItemExceptionIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MediumTrustUnmappedItemExceptionIntegrationTest.cs,MediumTrust,The length of the statement  "      var testFixtureResults = SandboxTestRunner.RunTestFixturesInSandbox (new[] { typeof (UnmappedItemExceptionTest) }' permissions' null); " is 134.
Long Statement,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub.cs,ResolveTableInfo,The length of the statement  "          return new ResolvedSimpleTableInfo (tableInfo.ItemType' "dbo."+tableInfo.ItemType.Name + "Table"' generator.GetUniqueIdentifier ("t")); " is 135.
Long Statement,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub.cs,ResolveMemberExpression,The length of the statement  "      throw new NotSupportedException (string.Format ("Member '{0}' applied to column '{1}' is not supported."' memberInfo.Name' sqlColumnExpression)); " is 145.
Long Statement,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub.cs,ResolveConstantExpression,The length of the statement  "        return new SqlEntityConstantExpression (typeof (Cook)' constantExpression.Value' Expression.Constant (((Cook) constantExpression.Value).ID' typeof (int))); " is 155.
Long Statement,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub.cs,ResolveConstantExpression,The length of the statement  "        return new SqlEntityConstantExpression (typeof (Company)' constantExpression.Value' Expression.Constant (((Company) constantExpression.Value).ID' typeof (int))); " is 161.
Long Statement,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub.cs,ResolveConstantExpression,The length of the statement  "        return new SqlEntityConstantExpression (typeof (Knife)' constantExpression.Value' Expression.Constant (((Knife) constantExpression.Value).ID' typeof (MetaID))); " is 160.
Long Statement,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub.cs,TryResolveOptimizedIdentity,The length of the statement  "      if (entityRefMemberExpression.MemberInfo.DeclaringType == typeof (Cook) && entityRefMemberExpression.MemberInfo.Name == "Knife") " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub.cs,TryResolveOptimizedIdentity,The length of the statement  "      // Prepare a join' then check if the foreign key column is on the left side => this is the identity. (Otherwise' return null.) " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub.cs,TryResolveOptimizedIdentity,The length of the statement  "              new UnresolvedJoinInfo (entityRefMemberExpression.OriginatingEntity' entityRefMemberExpression.MemberInfo' JoinCardinality.One)' " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub.cs,CreateResolvedJoinInfo,The length of the statement  "          joinedTableInfo' ConversionUtility.MakeBinaryWithOperandConversion (ExpressionType.Equal' leftColumn' rightColumn' false' null)); " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub.cs,CreateMetaIDExpression,The length of the statement  "      var newExpression = Expression.New (metaIDCtor' new[] { valueExpression' classIDColumn }' new[] { typeof (MetaID).GetProperty ("Value")' typeof (MetaID).GetProperty ("ClassID") }); " is 180.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,CompoundExpressionComparisonSplitterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\CompoundExpressionComparisonSplitterTest.cs,SplitPotentialCompoundComparison_BinaryExpression_NewExpressionOnLeftSideWithOnePropertyInfoMember,The length of the statement  "      var expectedResult = Expression.Equal (leftArgumentExpression' Expression.MakeMemberAccess (rightExpression' typeof (TypeForNewExpression).GetProperty ("A"))); " is 159.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,CompoundExpressionComparisonSplitterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\CompoundExpressionComparisonSplitterTest.cs,SplitPotentialCompoundComparison_BinaryExpression_NewExpressionOnLeftSideWithTwoPropertyInfoMembers_Equal,The length of the statement  "                  leftArgumentExpression1' Expression.MakeMemberAccess (rightExpression' typeof (TypeForNewExpression).GetProperty ("A")))' " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,CompoundExpressionComparisonSplitterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\CompoundExpressionComparisonSplitterTest.cs,SplitPotentialCompoundComparison_BinaryExpression_NewExpressionOnLeftSideWithTwoPropertyInfoMembers_Equal,The length of the statement  "                  leftArgumentExpression2' Expression.MakeMemberAccess (rightExpression' typeof (TypeForNewExpression).GetProperty ("B")))); " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,CompoundExpressionComparisonSplitterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\CompoundExpressionComparisonSplitterTest.cs,SplitPotentialCompoundComparison_BinaryExpression_NewExpressionOnLeftSideWithTwoPropertyInfoMembers_NotEqual,The length of the statement  "                  leftArgumentExpression1' Expression.MakeMemberAccess (rightExpression' typeof (TypeForNewExpression).GetProperty ("A")))' " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,CompoundExpressionComparisonSplitterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\CompoundExpressionComparisonSplitterTest.cs,SplitPotentialCompoundComparison_BinaryExpression_NewExpressionOnLeftSideWithTwoPropertyInfoMembers_NotEqual,The length of the statement  "                  leftArgumentExpression2' Expression.MakeMemberAccess (rightExpression' typeof (TypeForNewExpression).GetProperty ("B")))); " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,CompoundExpressionComparisonSplitterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\CompoundExpressionComparisonSplitterTest.cs,SplitPotentialCompoundComparison_BinaryExpression_NewExpressionOnLeftSideWithOneMethodInfoMembers,The length of the statement  "          TypeForNewExpression.GetConstructor (typeof (int))' new[] { leftArgumentExpression }' new[] { leftArgumentMemberInfo }); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,CompoundExpressionComparisonSplitterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\CompoundExpressionComparisonSplitterTest.cs,SplitPotentialCompoundComparison_BinaryExpression_NewExpressionOnRightSideWithOnePropertyInfoMember,The length of the statement  "      var expectedResult = Expression.Equal (rightArgumentExpression' Expression.MakeMemberAccess (leftExpression' typeof (TypeForNewExpression).GetProperty ("A"))); " is 159.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,CompoundExpressionComparisonSplitterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\CompoundExpressionComparisonSplitterTest.cs,SplitPotentialCompoundComparison_BinaryExpression_MethodIsRemoved,The length of the statement  "      MethodInfo method = ((Func<int?' int?' bool>) SplitPotentialCompoundComparison_BinaryExpression_MethodIsRemoved_operator).Method; " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,CompoundExpressionComparisonSplitterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\CompoundExpressionComparisonSplitterTest.cs,SplitPotentialCompoundComparison_BinaryExpression_MethodIsRemoved,The length of the statement  "      var leftExpression = Expression.New (typeof (Nullable<>).MakeGenericType (typeof (int)).GetConstructors ()[0]' leftArgumentExpression); " is 135.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,CompoundExpressionComparisonSplitterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\CompoundExpressionComparisonSplitterTest.cs,SplitPotentialCompoundComparison_BinaryExpression_MethodIsRemoved,The length of the statement  "      var rightExpression = Expression.New (typeof (Nullable<>).MakeGenericType (typeof (int)).GetConstructors ()[0]' rightArgumentExpression); " is 137.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,CompoundExpressionComparisonSplitterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\CompoundExpressionComparisonSplitterTest.cs,SplitPotentialCompoundComparison_BinaryExpression_MethodIsRemoved,The length of the statement  "      BinaryExpression expression = Expression.MakeBinary (ExpressionType.Equal' leftExpression' rightExpression' true' method); " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,CompoundExpressionComparisonSplitterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\CompoundExpressionComparisonSplitterTest.cs,SplitPotentialCompoundComparison_SqlIsNullExpression_ExpandsNewExpression_ByCheckingAllArguments,The length of the statement  "      var newExpression = Expression.New (TypeForNewExpression.GetConstructor (typeof (int)' typeof (int))' new[] { arg1' arg2 }); " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,CompoundExpressionComparisonSplitterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\CompoundExpressionComparisonSplitterTest.cs,SplitPotentialCompoundComparison_SqlIsNotNullExpression_ExpandsNewExpression_ByCheckingAllArguments,The length of the statement  "      var newExpression = Expression.New (TypeForNewExpression.GetConstructor (typeof (int)' typeof (int))' new[] { arg1' arg2 }); " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,EntityIdentityResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\EntityIdentityResolverTest.cs,SetUp,The length of the statement  "      _entityExpression = SqlStatementModelObjectMother.CreateSqlEntityDefinitionExpression (typeof (Cook)' primaryKeyType: typeof (int)); " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,EntityIdentityResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\EntityIdentityResolverTest.cs,ResolvePotentialEntity_Entity_WithIdentityExpressionGeneratorReturningSelf_ThrowsInvalidOperationException,The length of the statement  "          Throws.InvalidOperationException.With.Message.EqualTo ("SqlEntityExpression cannot be the same instance as its identity Expression.")); " is 135.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,EntityIdentityResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\EntityIdentityResolverTest.cs,ResolvePotentialEntity_EntityConstant_StripsConversions,The length of the statement  "      var result = _entityIdentityResolver.ResolvePotentialEntity (Expression.Convert (_entityConstantExpression' typeof (object))); " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,EntityIdentityResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\EntityIdentityResolverTest.cs,ResolvePotentialEntity_EntityRefMember_StripsConversions,The length of the statement  "      var result = _entityIdentityResolver.ResolvePotentialEntity (Expression.Convert (_entityRefMemberExpression' typeof (object))); " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,EntityIdentityResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\EntityIdentityResolverTest.cs,ResolvePotentialEntity_Substatement_WithEntity_ResolvesToSubstatement_WithIdentity,The length of the statement  "      var subStatement = SqlStatementModelObjectMother.CreateSqlStatement (_entityExpression' SqlStatementModelObjectMother.CreateSqlTable()); " is 136.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,EntityIdentityResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\EntityIdentityResolverTest.cs,ResolvePotentialEntity_Substatement_WithEntity_ResolvesToSubstatement_WithIdentity,The length of the statement  "      SqlExpressionTreeComparer.CheckAreEqualTrees (expectedSelectProjection' ((SqlSubStatementExpression) result).SqlStatement.SelectProjection); " is 140.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,EntityIdentityResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\EntityIdentityResolverTest.cs,ResolvePotentialEntity_Substatement_WithEntity_ResolvesToSubstatement_WithIdentity,The length of the statement  "      Assert.That (((SqlSubStatementExpression) result).SqlStatement.DataInfo.DataType' Is.SameAs (typeof (IQueryable<int>))); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,EntityIdentityResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\EntityIdentityResolverTest.cs,ResolvePotentialEntity_Substatement_StripsConversions,The length of the statement  "      var subStatement = SqlStatementModelObjectMother.CreateSqlStatement (Expression.Convert (_entityExpression' typeof (object))' SqlStatementModelObjectMother.CreateSqlTable ()); " is 175.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,EntityIdentityResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\EntityIdentityResolverTest.cs,ResolvePotentialEntity_Substatement_StripsConversions,The length of the statement  "      var result = _entityIdentityResolver.ResolvePotentialEntity (Expression.Convert (subStatementExpression' typeof (object))); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,EntityIdentityResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\EntityIdentityResolverTest.cs,ResolvePotentialEntity_Substatement_StripsConversions,The length of the statement  "      SqlExpressionTreeComparer.CheckAreEqualTrees (expectedSelectProjection' ((SqlSubStatementExpression) result).SqlStatement.SelectProjection); " is 140.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,EntityIdentityResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\EntityIdentityResolverTest.cs,ResolvePotentialEntity_Substatement_StripsConversions,The length of the statement  "      Assert.That (((SqlSubStatementExpression) result).SqlStatement.DataInfo.DataType' Is.SameAs (typeof (IQueryable<int>))); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,EntityIdentityResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\EntityIdentityResolverTest.cs,ResolvePotentialEntity_ConvertedSubstatement_WithNoEntity_IsLeftUnchanged,The length of the statement  "      var subStatement = SqlStatementModelObjectMother.CreateSqlStatement (selectProjectionExpression' SqlStatementModelObjectMother.CreateSqlTable()); " is 145.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,EntityIdentityResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\EntityIdentityResolverTest.cs,ResolvePotentialEntity_LooksBehindNames,The length of the statement  "      SqlExpressionTreeComparer.CheckAreEqualTrees (new NamedExpression ("X"' _entityConstantExpression.IdentityExpression)' result); " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,EntityIdentityResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\EntityIdentityResolverTest.cs,ResolvePotentialEntityComparison_BinaryExpression_ResolvesEntitiesToIdentity,The length of the statement  "      var expected = Expression.Equal (_entityExpression.GetIdentityExpression()' _entityConstantExpression.IdentityExpression); " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,EntityIdentityResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\EntityIdentityResolverTest.cs,ResolvePotentialEntityComparison_BinaryExpression_RemovesOperatorMethod,The length of the statement  "          _entityExpression' _entityConstantExpression' false' MemberInfoFromExpressionUtility.GetMethod (() => FakeEqualityOperator (null' null))); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,EntityIdentityResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\EntityIdentityResolverTest.cs,ResolvePotentialEntityComparison_BinaryExpression_RemovesOperatorMethod,The length of the statement  "      var expected = Expression.Equal (_entityExpression.GetIdentityExpression ()' _entityConstantExpression.IdentityExpression); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,EntityIdentityResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\EntityIdentityResolverTest.cs,ResolvePotentialEntityComparison_SqlInExpression_ResolvesEntitiesToIdentity,The length of the statement  "      var expected = new SqlInExpression (_entityExpression.GetIdentityExpression ()' _entityConstantExpression.IdentityExpression); " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,EntityIdentityResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\EntityIdentityResolverTest.cs,ResolvePotentialEntityComparison_SqlInExpression_EntitiesAreResolvedToIdentity_LeftOnly,The length of the statement  "      var expected = new SqlInExpression (_entityExpression.GetIdentityExpression ()' Expression.Constant (null' typeof (Cook))); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,EntityIdentityResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\EntityIdentityResolverTest.cs,ResolvePotentialEntityComparison_SqlInExpression_EntitiesAreResolvedToIdentity_RightOnly,The length of the statement  "      var expected = new SqlInExpression (Expression.Constant (null' typeof (Cook))' _entityExpression.GetIdentityExpression ()); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,GroupAggregateSimplifierTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\GroupAggregateSimplifierTest.cs,SetUp,The length of the statement  "      _resolvedJoinedGroupingSubStatement = SqlStatementModelObjectMother.CreateSqlStatement (_associatedGroupingSelectExpression); " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,GroupAggregateSimplifierTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\GroupAggregateSimplifierTest.cs,IsSimplifiableGroupAggregate_False_NoResolvedJoinedGroupingTableInfo,The length of the statement  "      sqlStatementBuilder.SqlTables.Add (SqlStatementModelObjectMother.CreateSqlTable (new ResolvedSimpleTableInfo (typeof (int)' "table"' "t0"))); " is 141.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,GroupAggregateSimplifierTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\GroupAggregateSimplifierTest.cs,Visit_ReferenceToRightTable,The length of the statement  "      var visitor = new GroupAggregateSimplifier.SimplifyingVisitor (_resolvedJoinedGroupingTable' _associatedGroupingSelectExpression.ElementExpression); " is 148.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,GroupAggregateSimplifierTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\GroupAggregateSimplifierTest.cs,Visit_ReferenceToRightTable_Nested,The length of the statement  "      var visitor = new GroupAggregateSimplifier.SimplifyingVisitor (_resolvedJoinedGroupingTable' _associatedGroupingSelectExpression.ElementExpression); " is 148.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,GroupAggregateSimplifierTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\GroupAggregateSimplifierTest.cs,Visit_ReferenceToOtherTable,The length of the statement  "      var visitor = new GroupAggregateSimplifier.SimplifyingVisitor (_resolvedJoinedGroupingTable' _associatedGroupingSelectExpression.ElementExpression); " is 148.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,GroupAggregateSimplifierTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\GroupAggregateSimplifierTest.cs,Visit_AnyOtherExpression,The length of the statement  "      var visitor = new GroupAggregateSimplifier.SimplifyingVisitor (_resolvedJoinedGroupingTable' _associatedGroupingSelectExpression.ElementExpression); " is 148.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,MappingResolutionContextTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\MappingResolutionContextTest.cs,SetUp,The length of the statement  "      _groupingSelectExpression = new SqlGroupingSelectExpression (Expression.Constant ("key")' Expression.Constant ("element")); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,MappingResolutionContextTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\MappingResolutionContextTest.cs,UpdateEntityAndAddMapping,The length of the statement  "      var result = (SqlEntityDefinitionExpression) _context.UpdateEntityAndAddMapping (entity' entity.Type' "newAlias"' "newName"); " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,MappingResolutionContextTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\MappingResolutionContextTest.cs,UpdateGroupingSelectAndAddMapping,The length of the statement  "          _groupingSelectExpression' newKeyExpression' newElementExpression' new[] {newAggregationExpression1' newAggregationExpression2}); " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,MappingResolutionContextTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\MappingResolutionContextTest.cs,UpdateGroupingSelectAndAddMapping_MappingDoesNotExist,The length of the statement  "          _groupingSelectExpression' newKeyExpression' newElementExpression' new[] { newAggregationExpression1' newAggregationExpression2 }); " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,MemberAccessResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\MemberAccessResolverTest.cs,ResolveMemberAccess_OnEntity,The length of the statement  "     var result = MemberAccessResolver.ResolveMemberAccess (sqlEntityExpression' memberInfo' _resolverMock' _stageMock' _mappingResolutionContext); " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,MemberAccessResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\MemberAccessResolverTest.cs,ResolveMemberAccess_OnEntity_WithCollectionMember,The length of the statement  "      MemberAccessResolver.ResolveMemberAccess (sqlEntityExpression' memberInfo' _resolverMock' _stageMock' _mappingResolutionContext); " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,MemberAccessResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\MemberAccessResolverTest.cs,ResolveMemberAccess_OnEntityRefMemberExpression_NoOptimization,The length of the statement  "      var result = MemberAccessResolver.ResolveMemberAccess (entityRefMemberExpression' memberInfo' _resolverMock' _stageMock' _mappingResolutionContext); " is 148.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,MemberAccessResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\MemberAccessResolverTest.cs,ResolveMemberAccess_OnEntityRefMemberExpression_WithSuccessfulOptimization,The length of the statement  "      var result = MemberAccessResolver.ResolveMemberAccess (entityRefMemberExpression' memberInfo' _resolverMock' _stageMock' _mappingResolutionContext); " is 148.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,MemberAccessResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\MemberAccessResolverTest.cs,ResolveMemberAccess_OnEntityRefMemberExpression_WithSuccessfulOptimization,The length of the statement  "              Arg<SqlEntityRefMemberExpression>.Is.Anything' Arg<IJoinInfo>.Is.Anything' Arg<IMappingResolutionContext>.Is.Anything)); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,MemberAccessResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\MemberAccessResolverTest.cs,ResolveMemberAccess_OnUnaryExpression_Convert,The length of the statement  "      var result = MemberAccessResolver.ResolveMemberAccess(convertExpression' memberInfo'  _resolverMock' _stageMock' _mappingResolutionContext); " is 140.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,MemberAccessResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\MemberAccessResolverTest.cs,ResolveMemberAccess_OnUnaryExpression_NotConvert,The length of the statement  "      MemberAccessResolver.ResolveMemberAccess (convertExpression' memberInfo' _resolverMock' _stageMock' _mappingResolutionContext); " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,MemberAccessResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\MemberAccessResolverTest.cs,ResolveMemberAccess_OnNamedExpression,The length of the statement  "      var result = MemberAccessResolver.ResolveMemberAccess (namedExpression' memberInfo' _resolverMock' _stageMock' _mappingResolutionContext); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,MemberAccessResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\MemberAccessResolverTest.cs,ResolveMemberAccess_OnNestedNamedConvertExpressions,The length of the statement  "      var result = MemberAccessResolver.ResolveMemberAccess (outerMostConvertExpression' memberInfo' _resolverMock' _stageMock' _mappingResolutionContext); " is 149.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,MemberAccessResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\MemberAccessResolverTest.cs,ResolveMemberAccess_MemberAppliedToConstant,The length of the statement  "      MemberAccessResolver.ResolveMemberAccess (expression' memberInfo' _resolverMock' _stageMock' _mappingResolutionContext); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,MemberAccessResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\MemberAccessResolverTest.cs,ResolveMemberAccess_OnColumnExpression,The length of the statement  "      var result = MemberAccessResolver.ResolveMemberAccess (columnExpression' memberInfo' _resolverMock' _stageMock' _mappingResolutionContext); " is 139.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,MemberAccessResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\MemberAccessResolverTest.cs,ResolveMemberAccess_OnGroupingSelectExpression,The length of the statement  "      var result = MemberAccessResolver.ResolveMemberAccess (expression' memberInfo' _resolverMock' _stageMock' _mappingResolutionContext); " is 133.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,MemberAccessResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\MemberAccessResolverTest.cs,ResolveMemberAccess_OnGroupingSelectExpression_StripsNames,The length of the statement  "      var result = MemberAccessResolver.ResolveMemberAccess (expression' memberInfo' _resolverMock' _stageMock' _mappingResolutionContext); " is 133.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,MemberAccessResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\MemberAccessResolverTest.cs,ResolveMemberAccess_OnNewExpression_PropertyInfo,The length of the statement  "          new[] { new NamedExpression ("value"' new SqlLiteralExpression (1))' new NamedExpression ("value"' new SqlLiteralExpression (2)) }' " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,MemberAccessResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\MemberAccessResolverTest.cs,ResolveMemberAccess_OnNewExpression_FieldInfo,The length of the statement  "          new[] { new NamedExpression ("value"' new SqlLiteralExpression (1))' new NamedExpression ("value"' new SqlLiteralExpression (2)) }' " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,MemberAccessResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\MemberAccessResolverTest.cs,ResolveMemberAccess_OnNewExpression_NoMembers,The length of the statement  "          new[] { new NamedExpression ("value"' new SqlLiteralExpression (1))' new NamedExpression ("value"' new SqlLiteralExpression (2)) }); " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,MemberAccessResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\MemberAccessResolverTest.cs,ResolveMemberAccess_OnUnsupportedExpression,The length of the statement  "      MemberAccessResolver.ResolveMemberAccess (convertExpression' memberInfo' _resolverMock' _stageMock' _mappingResolutionContext); " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,MemberAccessResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\MemberAccessResolverTest.cs,ResolveMemberAccess_OnSqlTableReferenceExpression,The length of the statement  "      MemberAccessResolver.ResolveMemberAccess (expression' memberInfo' _resolverMock' _stageMock' _mappingResolutionContext); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,MemberAccessResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\MemberAccessResolverTest.cs,ResolveMemberAccess_OnSqlEntityConstantExpression,The length of the statement  "      MemberAccessResolver.ResolveMemberAccess (expression' memberInfo' _resolverMock' _stageMock' _mappingResolutionContext); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,NamedExpressionCombinerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\NamedExpressionCombinerTest.cs,ProcessNames_NamedExpression_ReturnsCombinedExpression,The length of the statement  "      var expression = new NamedExpression ("outer"' new NamedExpression ("inner"' new NamedExpression ("innermost"' Expression.Constant ("test")))); " is 143.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,NamedExpressionCombinerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\NamedExpressionCombinerTest.cs,ProcessNames_SqlEntityExpression,The length of the statement  "      Assert.That (_context.GetSqlTableForEntityExpression ((SqlEntityExpression) result)' Is.SameAs (tableRegisteredForEntity)); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,NamedExpressionCombinerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\NamedExpressionCombinerTest.cs,ProcessNames_MethodCallExpression,The length of the statement  "      var expression = Expression.Call (instance' MemberInfoFromExpressionUtility.GetMethod (() => 5.ToString ("arg"))' argument); " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,NamedExpressionCombinerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\NamedExpressionCombinerTest.cs,ProcessNames_SqlGroupingSelectExpression,The length of the statement  "      var groupingSelectExpression = new SqlGroupingSelectExpression (keyExpression' elementExpression' new[]{aggregationExpression}); " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,NamedExpressionCombinerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\NamedExpressionCombinerTest.cs,ProcessNames_Convert,The length of the statement  "      var namedExpression = new NamedExpression ("outer"' Expression.Convert (new NamedExpression ("inner"' Expression.Constant (1))' typeof (double))); " is 146.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,NamedExpressionCombinerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\NamedExpressionCombinerTest.cs,ProcessNames_Convert,The length of the statement  "      var expectedResult = Expression.Convert (new NamedExpression ("outer_inner"' Expression.Constant (1))' typeof (double)); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,NamedExpressionCombinerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\NamedExpressionCombinerTest.cs,ProcessNames_Convert_WithMethod,The length of the statement  "      var expectedResult = Expression.Convert (new NamedExpression ("outer_inner"' Expression.Constant (1))' typeof (double)' convertMethod); " is 135.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,NamedExpressionCombinerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\NamedExpressionCombinerTest.cs,ProcessNames_ConvertChecked,The length of the statement  "      var expectedResult = Expression.ConvertChecked (new NamedExpression ("outer_inner"' Expression.Constant (1))' typeof (double)); " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingSelectExpressionVisitorTest.cs,VisitSqlSubStatementExpression_ConvertsToSqlTable_ForStreamedSingleValueInfo,The length of the statement  "                  Arg<SqlSubStatementExpression>.Matches (e => e.SqlStatement == fakeResolvedSqlStatement)' Arg.Is (sqlStatement.SelectProjection))) " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingSelectExpressionVisitorTest.cs,VisitSqlSubStatementExpression_ConvertsToSqlTable_ForStreamedSingleValueInfo,The length of the statement  "          .Expect (mock => mock.ResolveTableReferenceExpression (Arg<SqlTableReferenceExpression>.Is.Anything' Arg.Is (_mappingResolutionContext))) " is 137.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingSelectExpressionVisitorTest.cs,VisitSqlSubStatementExpression_ConvertsToSqlTable_ForStreamedSingleValueInfo,The length of the statement  "                    { DataInfo = new StreamedSequenceInfo (typeof (IEnumerable<int>)' fakeResolvedSqlStatement.SelectProjection) }.GetSqlStatement(); " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextJoinInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextJoinInfoVisitorTest.cs,ApplyContext_VisitUnresolvedJoinInfo,The length of the statement  "      var unresolvedJoinInfo = new UnresolvedJoinInfo (entityExpression' typeof (Cook).GetProperty ("ID")' JoinCardinality.One); " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextJoinInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextJoinInfoVisitorTest.cs,ApplyContext_VisitUnresolvedJoinInfo,The length of the statement  "      var result = SqlContextJoinInfoVisitor.ApplyContext (unresolvedJoinInfo' SqlExpressionContext.ValueRequired' _stageMock' _mappingResolutionContext); " is 148.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextJoinInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextJoinInfoVisitorTest.cs,ApplyContext_VisitUnresolvedCollectionJoinInfo,The length of the statement  "      var unresolvedJoinInfo = new UnresolvedCollectionJoinInfo (Expression.Constant (new Cook ())' typeof (Cook).GetProperty ("IllnessDays")); " is 137.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextJoinInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextJoinInfoVisitorTest.cs,ApplyContext_VisitUnresolvedCollectionJoinInfo,The length of the statement  "      var result = SqlContextJoinInfoVisitor.ApplyContext (unresolvedJoinInfo' SqlExpressionContext.ValueRequired' _stageMock' _mappingResolutionContext); " is 148.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextJoinInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextJoinInfoVisitorTest.cs,ApplyContext_VisitResolvedJoinInfo_SameForeignTableInfo,The length of the statement  "          .Expect (mock => mock.ApplyContext (resolvedJoinInfo.ForeignTableInfo' SqlExpressionContext.ValueRequired' _mappingResolutionContext)) " is 134.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextJoinInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextJoinInfoVisitorTest.cs,ApplyContext_VisitResolvedJoinInfo_SameForeignTableInfo,The length of the statement  "      var result = SqlContextJoinInfoVisitor.ApplyContext (resolvedJoinInfo' SqlExpressionContext.ValueRequired' _stageMock' _mappingResolutionContext); " is 146.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextJoinInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextJoinInfoVisitorTest.cs,ApplyContext_VisitResolvedJoinInfo_NewForeignTableInfo,The length of the statement  "          .Expect (mock => mock.ApplyContext (resolvedJoinInfo.ForeignTableInfo' SqlExpressionContext.ValueRequired' _mappingResolutionContext)) " is 134.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextJoinInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextJoinInfoVisitorTest.cs,ApplyContext_VisitResolvedJoinInfo_NewForeignTableInfo,The length of the statement  "      var result = SqlContextJoinInfoVisitor.ApplyContext (resolvedJoinInfo' SqlExpressionContext.ValueRequired' _stageMock' _mappingResolutionContext); " is 146.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextSelectionAdjusterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextSelectionAdjusterTest.cs,VisitSqlStatement_NoExpressionChanged_SameSqlStatementIsReturned,The length of the statement  "          .Expect (mock => mock.ApplyContext (sqlStatement.SelectProjection' SqlExpressionContext.ValueRequired' _mappingResolutionContext)) " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextSelectionAdjusterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextSelectionAdjusterTest.cs,VisitSqlStatement_NoExpressionChanged_SameSqlStatementIsReturned,The length of the statement  "      var result = SqlContextSelectionAdjuster.ApplyContext (sqlStatement' SqlExpressionContext.ValueRequired' _stageMock' _mappingResolutionContext); " is 144.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextSelectionAdjusterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextSelectionAdjusterTest.cs,VisitSqlStatement_ExpressionsAndStreamedSequenceDataTypeChanged,The length of the statement  "      builder.DataInfo = new StreamedSequenceInfo (typeof (IQueryable<>).MakeGenericType (builder.SelectProjection.Type)' builder.SelectProjection); " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextSelectionAdjusterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextSelectionAdjusterTest.cs,VisitSqlStatement_ExpressionsAndStreamedSequenceDataTypeChanged,The length of the statement  "          .Expect (mock => mock.ApplyContext (sqlStatement.SelectProjection' SqlExpressionContext.ValueRequired' _mappingResolutionContext)) " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextSelectionAdjusterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextSelectionAdjusterTest.cs,VisitSqlStatement_ExpressionsAndStreamedSequenceDataTypeChanged,The length of the statement  "      var result = SqlContextSelectionAdjuster.ApplyContext (sqlStatement' SqlExpressionContext.ValueRequired' _stageMock' _mappingResolutionContext); " is 144.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextSelectionAdjusterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextSelectionAdjusterTest.cs,VisitSqlStatement_CopiesIsDistinctQueryFlag,The length of the statement  "      var builder = new SqlStatementBuilder (SqlStatementModelObjectMother.CreateSqlStatementWithCook()) { IsDistinctQuery = true }; " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextSelectionAdjusterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextSelectionAdjusterTest.cs,VisitSqlStatement_CopiesIsDistinctQueryFlag,The length of the statement  "          .Expect (mock => mock.ApplyContext (sqlStatement.SelectProjection' SqlExpressionContext.ValueRequired' _mappingResolutionContext)) " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextSelectionAdjusterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextSelectionAdjusterTest.cs,VisitSqlStatement_CopiesIsDistinctQueryFlag,The length of the statement  "      var result = SqlContextSelectionAdjuster.ApplyContext (sqlStatement' SqlExpressionContext.ValueRequired' _stageMock' _mappingResolutionContext); " is 144.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextSelectionAdjusterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextSelectionAdjusterTest.cs,VisitSqlStatement_EverthingIsCopiedIfSelectionProjectionHasChanged,The length of the statement  "          .Expect (mock => mock.ApplyContext (sqlStatement.SelectProjection' SqlExpressionContext.ValueRequired' _mappingResolutionContext)) " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextSelectionAdjusterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextSelectionAdjusterTest.cs,VisitSqlStatement_EverthingIsCopiedIfSelectionProjectionHasChanged,The length of the statement  "      var result = SqlContextSelectionAdjuster.ApplyContext (sqlStatement' SqlExpressionContext.ValueRequired' _stageMock' _mappingResolutionContext); " is 144.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextSelectionAdjusterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextSelectionAdjusterTest.cs,VisitSqlStatement_PrdicateRequired_ThrowsException,The length of the statement  "      SqlContextSelectionAdjuster.ApplyContext (sqlStatement' SqlExpressionContext.PredicateRequired' _stageMock' _mappingResolutionContext); " is 135.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextTableInfoVisitorTest.cs,ApplyContext_ResolvedSimpleTableInfo,The length of the statement  "      var result = SqlContextTableInfoVisitor.ApplyContext (tableInfo' SqlExpressionContext.ValueRequired' _stageMock' _mappingresolutionContext); " is 140.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextTableInfoVisitorTest.cs,ApplyContext_UnresolvedTableInfo,The length of the statement  "      var result = SqlContextTableInfoVisitor.ApplyContext (tableInfo' SqlExpressionContext.ValueRequired' _stageMock' _mappingresolutionContext); " is 140.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextTableInfoVisitorTest.cs,ApplyContext_ResolvedSubStatementTableInfo_SameTableInfo,The length of the statement  "          .Expect (mock => mock.ApplySelectionContext (subStatement' SqlExpressionContext.ValueRequired' _mappingresolutionContext)) " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextTableInfoVisitorTest.cs,ApplyContext_ResolvedSubStatementTableInfo_SameTableInfo,The length of the statement  "      var result = SqlContextTableInfoVisitor.ApplyContext (subStatementTableInfo' SqlExpressionContext.ValueRequired' _stageMock' _mappingresolutionContext); " is 152.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextTableInfoVisitorTest.cs,ApplyContext_ResolvedSubStatementTableInfo_NewTableInfo,The length of the statement  "          .Expect (mock => mock.ApplySelectionContext (subStatement' SqlExpressionContext.ValueRequired' _mappingresolutionContext)) " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextTableInfoVisitorTest.cs,ApplyContext_ResolvedJoinedGroupingTableInfo_SameTableInfo,The length of the statement  "          .Expect (mock => mock.ApplySelectionContext (subStatement' SqlExpressionContext.ValueRequired' _mappingresolutionContext)) " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextTableInfoVisitorTest.cs,ApplyContext_ResolvedJoinedGroupingTableInfo_SameTableInfo,The length of the statement  "      var result = SqlContextTableInfoVisitor.ApplyContext (joinedGroupingTableInfo' SqlExpressionContext.ValueRequired' _stageMock' _mappingresolutionContext); " is 154.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextTableInfoVisitorTest.cs,ApplyContext_ResolvedJoinedGroupingTableInfo_NewTableInfo,The length of the statement  "          .Expect (mock => mock.ApplySelectionContext (subStatement' SqlExpressionContext.ValueRequired' _mappingresolutionContext)) " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextTableInfoVisitorTest.cs,ApplyContext_ResolvedJoinedGroupingTableInfo_NewTableInfo,The length of the statement  "      var result = (ResolvedJoinedGroupingTableInfo) SqlContextTableInfoVisitor.ApplyContext (joinedGroupingTableInfo' SqlExpressionContext.ValueRequired' _stageMock' _mappingresolutionContext); " is 188.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextTableInfoVisitorTest.cs,ApplyContext_ResolvedJoinedGroupingTableInfo_NewTableInfo,The length of the statement  "      Assert.That (result.AssociatedGroupingSelectExpression' Is.SameAs (joinedGroupingTableInfo.AssociatedGroupingSelectExpression)); " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextTableInfoVisitorTest.cs,ApplyContext_SqlJoinedTable_SameJoinInfo,The length of the statement  "      var result = SqlContextTableInfoVisitor.ApplyContext (sqlJoinedTable' SqlExpressionContext.ValueRequired' _stageMock' _mappingresolutionContext); " is 145.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextTableInfoVisitorTest.cs,ApplyContext_SqlJoinedTable_NewJoinInfo,The length of the statement  "      var result = SqlContextTableInfoVisitor.ApplyContext (sqlJoinedTable' SqlExpressionContext.ValueRequired' _stageMock' _mappingresolutionContext); " is 145.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextTableInfoVisitorTest.cs,ApplyContext_UnresolvedGroupReferenceTableInfo,The length of the statement  "      SqlContextTableInfoVisitor.ApplyContext (tableInfo' SqlExpressionContext.ValueRequired' _stageMock' _mappingresolutionContext); " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SubStatementReferenceResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SubStatementReferenceResolverTest.cs,ResolveSubStatementReferenceExpression_CreatesNewExpressionWithReferences_ForNewExpressions,The length of the statement  "      var result = SubStatementReferenceResolver.ResolveSubStatementReferenceExpression (newExpression' tableInfo' sqlTable' _context); " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SubStatementReferenceResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SubStatementReferenceResolverTest.cs,ResolveSubStatementReferenceExpression_CreatesNewExpressionWithReferences_ForNewExpressions,The length of the statement  "          new Expression[] { new NamedExpression ("A"' new SqlColumnDefinitionExpression (typeof (int)' "q0"' "const"' false) ) }' " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SubStatementReferenceResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SubStatementReferenceResolverTest.cs,ResolveSubStatementReferenceExpression_CreatesNewExpressionWithReferences_ForNewExpressions_WithoutMembers,The length of the statement  "      var result = SubStatementReferenceResolver.ResolveSubStatementReferenceExpression (newExpression' tableInfo' sqlTable' _context); " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SubStatementReferenceResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SubStatementReferenceResolverTest.cs,ResolveSubStatementReferenceExpression_CreatesNewExpressionWithReferences_ForNewExpressions_WithoutMembers,The length of the statement  "          new Expression[] { new NamedExpression ("m0"' new SqlColumnDefinitionExpression (typeof (int)' "q0"' "const"' false)) }); " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SubStatementReferenceResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SubStatementReferenceResolverTest.cs,ResolveSubStatementReferenceExpression_CreatesEntityReference_ForEntities,The length of the statement  "      var result = SubStatementReferenceResolver.ResolveSubStatementReferenceExpression (entityDefinitionExpression' tableInfo' sqlTable' _context); " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SubStatementReferenceResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SubStatementReferenceResolverTest.cs,ResolveSubStatementReferenceExpression_CreatesSqlGroupingReferenceExpression_ForSqlGroupingSelectExpression,The length of the statement  "        DataInfo = new StreamedSequenceInfo (typeof (IGrouping<int' int>[])' Expression.Constant (null' typeof (IGrouping<int' int>))) " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SubStatementReferenceResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SubStatementReferenceResolverTest.cs,ResolveSubStatementReferenceExpression_CreatesSqlGroupingReferenceExpression_ForSqlGroupingSelectExpression,The length of the statement  "      var result = SubStatementReferenceResolver.ResolveSubStatementReferenceExpression (groupingSelectExpression' tableInfo' sqlTable' _context); " is 140.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SubStatementReferenceResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SubStatementReferenceResolverTest.cs,ResolveSubStatementReferenceExpression_CreatesSqlGroupingReferenceExpression_ForSqlGroupingSelectExpression,The length of the statement  "      var expectedReferencedElementExpression = new NamedExpression("element"' new SqlColumnDefinitionExpression (typeof (int)' "q0"' "element"' false)); " is 147.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SubStatementReferenceResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SubStatementReferenceResolverTest.cs,ResolveSubStatementReferenceExpression_CreatesSqlGroupingReferenceExpression_ForSqlGroupingSelectExpression,The length of the statement  "      var expectedReferencedAggregationExpression = new NamedExpression("a0"' new SqlColumnDefinitionExpression (typeof (int)' "q0"' "a0"' false)); " is 141.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SubStatementReferenceResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SubStatementReferenceResolverTest.cs,ResolveSubStatementReferenceExpression_CreatesSqlGroupingReferenceExpression_ForSqlGroupingSelectExpression,The length of the statement  "      SqlExpressionTreeComparer.CheckAreEqualTrees (expectedReferencedAggregationExpression' referencedAggregationExpression); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SubStatementReferenceResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SubStatementReferenceResolverTest.cs,ResolveSubStatementReferenceExpression_CreatesSqlGroupingSelectExpressionWithNamedExpressions,The length of the statement  "      var tableInfo = new ResolvedSubStatementTableInfo ("q0"' SqlStatementModelObjectMother.CreateSqlStatement_Resolved (typeof (Cook))); " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SubStatementReferenceResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SubStatementReferenceResolverTest.cs,ResolveSubStatementReferenceExpression_CreatesSqlGroupingSelectExpressionWithNamedExpressions,The length of the statement  "      var result = SubStatementReferenceResolver.ResolveSubStatementReferenceExpression (expression' tableInfo' sqlTable' _context); " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SubStatementReferenceResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SubStatementReferenceResolverTest.cs,ResolveSubStatementReferenceExpression_ResolvesChildren_ForUnknownExpression,The length of the statement  "      var expectedResult = new SqlConvertedBooleanExpression (new SqlColumnDefinitionExpression (typeof (int)' "q0"' "test"' false)); " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SubStatementReferenceResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SubStatementReferenceResolverTest.cs,ResolveSubStatementReferenceExpression_RegistersEntityTable_WithinUnknownExpression,The length of the statement  "      var referencedExpression = Expression.Convert (SqlStatementModelObjectMother.CreateSqlEntityDefinitionExpression (typeof (Cook))' typeof (Chef)); " is 145.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,DefaultMappingResolutionStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\DefaultMappingResolutionStageTest.cs,ResolveSelectExpression_SqlSubStatementExpressionWithStreamedSingleValueInfo,The length of the statement  "      var expectedDataInfo = new StreamedSequenceInfo (typeof (IEnumerable<>).MakeGenericType (sqlStatement.DataInfo.DataType)' sqlStatement.SelectProjection); " is 153.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,DefaultMappingResolutionStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\DefaultMappingResolutionStageTest.cs,ResolveSelectExpression_SqlSubStatementExpressionWithStreamedSingleValueInfo,The length of the statement  "      Assert.That (((ResolvedSubStatementTableInfo) ((SqlTable) sqlStatementBuilder.SqlTables[0]).TableInfo).SqlStatement' Is.EqualTo (expectedSqlStatement)); " is 152.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,DefaultMappingResolutionStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\DefaultMappingResolutionStageTest.cs,ResolveSqlStatement,The length of the statement  "      var tableReferenceExpression = new SqlTableReferenceExpression (new SqlTable (_fakeResolvedSimpleTableInfo' JoinSemantics.Inner)); " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,DefaultMappingResolutionStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\DefaultMappingResolutionStageTest.cs,ResolveSqlStatement,The length of the statement  "          .Expect (mock => mock.ResolveTableInfo ((UnresolvedTableInfo) ((SqlTable) sqlStatement.SqlTables[0]).TableInfo' _uniqueIdentifierGenerator)) " is 140.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,DefaultMappingResolutionStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\DefaultMappingResolutionStageTest.cs,ResolveSqlStatement,The length of the statement  "          .Expect (mock => mock.ResolveSimpleTableInfo (tableReferenceExpression.SqlTable.GetResolvedTableInfo()' _uniqueIdentifierGenerator)) " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,DefaultMappingResolutionStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\DefaultMappingResolutionStageTest.cs,ResolveTableReferenceExpression,The length of the statement  "      var expression = new SqlTableReferenceExpression (SqlStatementModelObjectMother.CreateSqlTable_WithResolvedTableInfo (typeof (Cook))); " is 134.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,DefaultMappingResolutionStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\DefaultMappingResolutionStageTest.cs,ResolveEntityRefMemberExpression,The length of the statement  "      _mappingResolutionContext.AddSqlEntityMapping (entityExpression' SqlStatementModelObjectMother.CreateSqlTable (typeof (Cook))); " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,DefaultMappingResolutionStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\DefaultMappingResolutionStageTest.cs,ResolveEntityRefMemberExpression,The length of the statement  "                  Arg<UnresolvedJoinInfo>.Matches (joinInfo => joinInfo.MemberInfo == kitchenCookMember)' Arg<UniqueIdentifierGenerator>.Is.Anything)) " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,DefaultMappingResolutionStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\DefaultMappingResolutionStageTest.cs,ResolveEntityRefMemberExpression,The length of the statement  "      var result = _stage.ResolveEntityRefMemberExpression (entityRefMemberExpression' unresolvedJoinInfo' _mappingResolutionContext); " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,DefaultMappingResolutionStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\DefaultMappingResolutionStageTest.cs,ApplyContext_Expression,The length of the statement  "      var result = _stage.ApplyContext (Expression.Constant (false)' SqlExpressionContext.PredicateRequired' _mappingResolutionContext); " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,DefaultMappingResolutionStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\DefaultMappingResolutionStageTest.cs,ApplySelectionContext_SqlStatement,The length of the statement  "      var result = _stage.ApplySelectionContext (sqlStatement' SqlExpressionContext.SingleValueRequired' _mappingResolutionContext); " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,DefaultMappingResolutionStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\DefaultMappingResolutionStageTest.cs,ApplyContext_TableInfo,The length of the statement  "      Assert.That (((ResolvedSubStatementTableInfo) result).SqlStatement.SelectProjection' Is.TypeOf (typeof (SqlConvertedBooleanExpression))); " is 137.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,DefaultMappingResolutionStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\DefaultMappingResolutionStageTest.cs,ApplyContext_TableInfo,The length of the statement  "          ((ConstantExpression) ((SqlConvertedBooleanExpression) ((ResolvedSubStatementTableInfo) result).SqlStatement.SelectProjection).Expression). " is 139.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,DefaultMappingResolutionStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\DefaultMappingResolutionStageTest.cs,ApplyContext_JoinInfo,The length of the statement  "      var joinInfo = new ResolvedJoinInfo (tableInfo' Expression.Equal (new SqlLiteralExpression (1)' new SqlLiteralExpression (1))); " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,DefaultMappingResolutionStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\DefaultMappingResolutionStageTest.cs,ApplyContext_JoinInfo,The length of the statement  "           ((SqlConvertedBooleanExpression) ((ResolvedSubStatementTableInfo) ((ResolvedJoinInfo) result).ForeignTableInfo).SqlStatement.SelectProjection) " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingJoinInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingJoinInfoVisitorTest.cs,ResolveJoinInfo_ResolvesUnresolvedJoinInfo,The length of the statement  "      var result = ResolvingJoinInfoVisitor.ResolveJoinInfo (_unresolvedJoinInfo' _resolverMock' _generator' _stageMock' _mappingResolutionContext); " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingJoinInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingJoinInfoVisitorTest.cs,ResolveJoinInfo_ResolvesUnresolvedJoinInfo_AndResolvesJoinedTable,The length of the statement  "      var result = ResolvingJoinInfoVisitor.ResolveJoinInfo (_unresolvedJoinInfo' _resolverMock' _generator' _stageMock' _mappingResolutionContext); " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingJoinInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingJoinInfoVisitorTest.cs,ResolveJoinInfo_ResolvesUnresolvedJoinInfo_AndResolvesCondition,The length of the statement  "      var result = ResolvingJoinInfoVisitor.ResolveJoinInfo (_unresolvedJoinInfo' _resolverMock' _generator' _stageMock' _mappingResolutionContext); " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingJoinInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingJoinInfoVisitorTest.cs,ResolveJoinInfo_ResolvesCollectionJoinInfo,The length of the statement  "          .Expect (mock => mock.ResolveCollectionSourceExpression (unresolvedCollectionJoinInfo.SourceExpression' _mappingResolutionContext)) " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingJoinInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingJoinInfoVisitorTest.cs,ResolveJoinInfo_ResolvesCollectionJoinInfo,The length of the statement  "      var resolvedJoinInfo = ResolvingJoinInfoVisitor.ResolveJoinInfo (unresolvedCollectionJoinInfo' _resolverMock' _generator' _stageMock' _mappingResolutionContext); " is 161.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingJoinInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingJoinInfoVisitorTest.cs,ResolveJoinInfo_ResolvesCollectionJoinInfo_UnaryExpression,The length of the statement  "          .Expect (mock => mock.ResolveCollectionSourceExpression (unresolvedCollectionJoinInfo.SourceExpression' _mappingResolutionContext)) " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingJoinInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingJoinInfoVisitorTest.cs,ResolveJoinInfo_ResolvesCollectionJoinInfo_UnaryExpression,The length of the statement  "      var resolvedJoinInfo = ResolvingJoinInfoVisitor.ResolveJoinInfo (unresolvedCollectionJoinInfo' _resolverMock' _generator' _stageMock' _mappingResolutionContext); " is 161.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingJoinInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingJoinInfoVisitorTest.cs,ResolveJoinInfo_ResolvesCollectionJoinInfo_NoEntity,The length of the statement  "          .Expect (mock => mock.ResolveCollectionSourceExpression (unresolvedCollectionJoinInfo.SourceExpression' _mappingResolutionContext)) " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingJoinInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingJoinInfoVisitorTest.cs,ResolveJoinInfo_ResolvesCollectionJoinInfo_NoEntity,The length of the statement  "      ResolvingJoinInfoVisitor.ResolveJoinInfo (unresolvedCollectionJoinInfo' _resolverMock' _generator' _stageMock' _mappingResolutionContext); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingJoinInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingJoinInfoVisitorTest.cs,ResolveJoinInfo_WithResolvedJoinInfo_ReresolvesTableInfo_AndKeys,The length of the statement  "      var result = ResolvingJoinInfoVisitor.ResolveJoinInfo (resolvedJoinInfo' _resolverMock' _generator' _stageMock' _mappingResolutionContext); " is 139.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlStatementResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlStatementResolverTest.cs,ResolveSqlStatement,The length of the statement  "      Assert.That (fakeSqlStatement' Is.Not.EqualTo (setOperationCombinedStatement.SqlStatement)' "This is important for the test below."); " is 133.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlStatementResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlStatementResolverTest.cs,ResolveSqlStatement,The length of the statement  "          .Expect (mock => mock.ResolveSelectExpression (Arg.Is(constantExpression)' Arg<SqlStatementBuilder>.Is.Anything' Arg.Is(_mappingResolutionContext))) " is 148.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlStatementResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlStatementResolverTest.cs,ResolveSqlStatement,The length of the statement  "      Assert.That (((StreamedSequenceInfo) resolvedSqlStatement.DataInfo).DataType' Is.EqualTo(typeof (IQueryable<>).MakeGenericType(typeof(Cook)))); " is 143.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlStatementResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlStatementResolverTest.cs,ResolveSqlStatement_WithNoChanges_ShouldLeaveAllObjectsTheSame,The length of the statement  "          .Expect (mock => mock.ResolveSelectExpression (Arg.Is(constantExpression)' Arg<SqlStatementBuilder>.Is.Anything' Arg.Is(_mappingResolutionContext))) " is 148.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,SetUp,The length of the statement  "      _valueRequiredVisitor = new TestableSqlContextExpressionVisitor (SqlExpressionContext.ValueRequired' _stageMock' _mappingResolutionContext); " is 140.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,ApplyContext,The length of the statement  "          new SqlConvertedBooleanExpression (valueExpression)' SqlExpressionContext.PredicateRequired' _stageMock' _mappingResolutionContext); " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,ApplyContext_SemanticsPropagatedToChildExpressionsByDefault,The length of the statement  "      var expressionOfCorrectType = new ReducibleExtensionExpression (new TestExtensionExpressionWithoutChildren (typeof (bool))); " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,ApplyContext_SemanticsPropagatedToChildExpressionsByDefault,The length of the statement  "          new ReducibleExtensionExpression (new SqlConvertedBooleanExpression (new TestExtensionExpressionWithoutChildren (typeof (int)))); " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,ApplyContext_SemanticsPropagatedToChildExpressionsByDefault,The length of the statement  "          Expression.Equal (((SqlConvertedBooleanExpression) expressionOfIncorrectType.Expression).Expression' new SqlLiteralExpression (1))); " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,Visit_CallsNodeSpecificVisitMethods,The length of the statement  "      var visitor = new TestableSqlContextExpressionVisitor (SqlExpressionContext.SingleValueRequired' _stageMock' _mappingResolutionContext); " is 136.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,Visit_ValueRequired_ConvertsBool_ToValue,The length of the statement  "      var visitor = new TestableSqlContextExpressionVisitor (SqlExpressionContext.ValueRequired' _stageMock' _mappingResolutionContext); " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,Visit_SingleValueRequired_ConvertsBool_ToSingleValue,The length of the statement  "      var visitor = new TestableSqlContextExpressionVisitor (SqlExpressionContext.SingleValueRequired' _stageMock' _mappingResolutionContext); " is 136.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,Visit_ValueRequired_LeavesExistingValue,The length of the statement  "      var visitor = new TestableSqlContextExpressionVisitor (SqlExpressionContext.ValueRequired' _stageMock' _mappingResolutionContext); " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,Visit_SingleValueRequired_LeavesExistingSingleValue,The length of the statement  "      var visitor = new TestableSqlContextExpressionVisitor (SqlExpressionContext.SingleValueRequired' _stageMock' _mappingResolutionContext); " is 136.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,Visit_ValueSemantics_LeavesMethodCallExpression,The length of the statement  "      var methodWithBoolResultExpression = Expression.Call (MemberInfoFromExpressionUtility.GetMethod (() => MethodWithBoolResult())); " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,Visit_LeavesExistingPredicate,The length of the statement  "      var visitor = new TestableSqlContextExpressionVisitor (SqlExpressionContext.PredicateRequired' _stageMock' _mappingResolutionContext); " is 134.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,Visit_ConvertedInt_ToPredicate,The length of the statement  "      var visitor = new TestableSqlContextExpressionVisitor (SqlExpressionContext.PredicateRequired' _stageMock' _mappingResolutionContext); " is 134.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,Visit_ConvertedInt_ToPredicate,The length of the statement  "      var expectedNullable = Expression.Equal (nullableExpression.Expression' new SqlLiteralExpression (1' true)' true' null); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,Visit_ThrowsOnNonConvertible_ToPredicate,The length of the statement  "      var visitor = new TestableSqlContextExpressionVisitor (SqlExpressionContext.PredicateRequired' _stageMock' _mappingResolutionContext); " is 134.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,Visit_ThrowsOnInvalidContext,The length of the statement  "      var visitor = new TestableSqlContextExpressionVisitor ((SqlExpressionContext) (-1)' _stageMock' _mappingResolutionContext); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,Visit_AppliesSpecifiedSemantics,The length of the statement  "      var visitor = new TestableSqlContextExpressionVisitor (SqlExpressionContext.ValueRequired' _stageMock' _mappingResolutionContext); " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitSqlColumnExpression_BoolColumn_ConvertedToIntColumn_NoPrimaryColumn_ValueRequired,The length of the statement  "      var expectedExpression = new SqlConvertedBooleanExpression (new SqlColumnDefinitionExpression (typeof (int)' "x"' "y"' false)); " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitSqlColumnExpression_BoolColumn_ConvertedToIntColumn_NoPrimaryColumn_ValueRequired,The length of the statement  "      var expectedNullableExpression = new SqlConvertedBooleanExpression (new SqlColumnDefinitionExpression (typeof (int?)' "x"' "y"' false)); " is 136.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitSqlColumnExpression_BoolColumn_ConvertedToIntColumn_IsPrimaryColumn_ValueRequired,The length of the statement  "      var expectedExpression = new SqlConvertedBooleanExpression (new SqlColumnDefinitionExpression (typeof (int)' "x"' "y"' true)); " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitSqlColumnExpression_BoolColumn_ConvertedToIntColumn_SingleValueRequired,The length of the statement  "      var expectedExpression = new SqlConvertedBooleanExpression (new SqlColumnDefinitionExpression (typeof (int)' "x"' "y"' false)); " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitSqlColumnExpression_BoolColumn_ConvertedToIntColumn_SingleValueRequired,The length of the statement  "      var expectedNullableExpression = new SqlConvertedBooleanExpression (new SqlColumnDefinitionExpression (typeof (int?)' "x"' "y"' false)); " is 136.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitSqlColumnExpression_BoolColumn_ConvertedToIntColumn_PredicateRequired,The length of the statement  "      var expectedExpression = new SqlConvertedBooleanExpression (new SqlColumnDefinitionExpression (typeof (int)' "x"' "y"' false)); " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitSqlColumnExpression_BoolColumn_ConvertedToIntColumn_PredicateRequired,The length of the statement  "      var expectedNullableExpression = new SqlConvertedBooleanExpression (new SqlColumnDefinitionExpression (typeof (int?)' "x"' "y"' false)); " is 136.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitSqlEntityExpression_WithNonSingleValueSemantics_LeavesEntity,The length of the statement  "      var visitor = new TestableSqlContextExpressionVisitor (SqlExpressionContext.ValueRequired' _stageMock' _mappingResolutionContext); " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_BinaryBoolExpression_ConvertsLeftRightToValue_ForEqual,The length of the statement  "      var nullableExpression = Expression.Equal (Expression.Constant (true' typeof (bool?))' Expression.Constant (false' typeof (bool?))' true' null); " is 144.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_BinaryBoolExpression_ConvertsLeftRightToValue_ForEqual,The length of the statement  "          new SqlConvertedBooleanExpression (Expression.Constant (1))' new SqlConvertedBooleanExpression (Expression.Constant (0))); " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_BinaryBoolExpression_RequiresSingleValue_ForEqual,The length of the statement  "          SqlStatementModelObjectMother.CreateSqlEntityDefinitionExpression (typeof (Cook))' new CustomExpression (typeof (Cook))); " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_BinaryBoolExpression_RequiresSingleValue_ForEqual,The length of the statement  "          new CustomExpression (typeof (Cook))' SqlStatementModelObjectMother.CreateSqlEntityDefinitionExpression (typeof (Cook))); " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_BinaryBoolExpression_RequiresSingleValue_ForEqual,The length of the statement  "      Assert.That (() => _valueRequiredVisitor.VisitBinary (complexExpressionRight)' Throws.TypeOf<NotSupportedException> ()); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_BinaryBoolExpression_ConvertsLeftRightToValue_ForNotEqual,The length of the statement  "      var nullableExpression = Expression.NotEqual (Expression.Constant (true' typeof (bool?))' Expression.Constant (false' typeof (bool?))' true' null); " is 147.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_BinaryBoolExpression_ConvertsLeftRightToValue_ForNotEqual,The length of the statement  "          new SqlConvertedBooleanExpression (Expression.Constant (1))' new SqlConvertedBooleanExpression (Expression.Constant (0))); " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_BinaryBoolExpression_RequiresSingleValue_ForNotEqual,The length of the statement  "          SqlStatementModelObjectMother.CreateSqlEntityDefinitionExpression (typeof (Cook))' new CustomExpression (typeof (Cook))); " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_BinaryBoolExpression_RequiresSingleValue_ForNotEqual,The length of the statement  "          new CustomExpression (typeof (Cook))' SqlStatementModelObjectMother.CreateSqlEntityDefinitionExpression (typeof (Cook))); " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_BinaryBoolExpression_RequiresSingleValue_ForNotEqual,The length of the statement  "      Assert.That (() => _valueRequiredVisitor.VisitBinary (complexExpressionRight)' Throws.TypeOf<NotSupportedException> ()); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_BinaryBoolExpression_ConvertsLeftRightToPredicate_ForAndAlso,The length of the statement  "      var nullableExpression = Expression.AndAlso (Expression.Constant (true' typeof (bool?))' Expression.Constant (false' typeof (bool?))); " is 134.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_BinaryBoolExpression_ConvertsLeftRightToPredicate_ForOrElse,The length of the statement  "      var nullableExpression = Expression.OrElse (Expression.Constant (true' typeof (bool?))' Expression.Constant (false' typeof (bool?))); " is 133.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_BinaryBoolExpression_ConvertsLeftRightToPredicate_ForAnd,The length of the statement  "      var nullableExpression = Expression.And (Expression.Constant (true' typeof (bool?))' Expression.Constant (false' typeof (bool?))); " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_BinaryBoolExpression_ConvertsLeftRightToPredicate_ForOr,The length of the statement  "      var nullableExpression = Expression.Or (Expression.Constant (true' typeof (bool?))' Expression.Constant (false' typeof (bool?))); " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_BinaryBoolExpression_ConvertsLeftRightToPredicate_ForExclusiveOr,The length of the statement  "      var nullableExpression = Expression.ExclusiveOr (Expression.Constant (true' typeof (bool?))' Expression.Constant (false' typeof (bool?))); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_BinaryBoolExpression_Coalesce,The length of the statement  "      // nullableBool ?? bool is converted not as ConvertedBool (nullableInt) ?? ConvertedBool (int)' but as ConvertedBool (nullableInt ?? int). " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_BinaryBoolExpression_Coalesce,The length of the statement  "      var nullableExpression = Expression.Coalesce (Expression.Constant (false' typeof (bool?))' Expression.Constant (true' typeof (bool?))); " is 135.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_BinaryBoolExpression_Coalesce_OptimizationForCoalesceToFalse,The length of the statement  "      // With predicate semantics' nullableBool ?? false is optimized to be the same as Convert (nullableBool' typeof (bool)) because SQL handles  " is 139.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_BinaryBoolExpression_RequiresSingleValue_ForCoalesce,The length of the statement  "          SqlStatementModelObjectMother.CreateSqlEntityDefinitionExpression (typeof (Cook))' new CustomExpression (typeof (Cook))); " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_BinaryBoolExpression_RequiresSingleValue_ForCoalesce,The length of the statement  "          new CustomExpression (typeof (Cook))' SqlStatementModelObjectMother.CreateSqlEntityDefinitionExpression (typeof (Cook))); " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_BinaryBoolExpression_RequiresSingleValue_ForCoalesce,The length of the statement  "      Assert.That (() => _valueRequiredVisitor.VisitBinary (complexExpressionRight)' Throws.TypeOf<NotSupportedException> ()); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_NonBoolBinaryExpression_OperandsGetSingleValueSemantics_SingleValueAllowed,The length of the statement  "      var binary = BinaryExpression.And (Expression.Convert (Expression.Not (Expression.Constant (true))' typeof (int))' Expression.Constant (5)); " is 140.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_NonBoolBinaryExpression_OperandsGetSingleValueSemantics_SingleValueAllowed,The length of the statement  "                      GetNonNullablePredicateAsValueExpression (Expression.Not (Expression.Equal (Expression.Constant (1)' new SqlLiteralExpression (1)))))' " is 134.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_NonBoolBinaryExpression_OperandsGetSingleValueSemantics_ComplexValueNotAllowed,The length of the statement  "      var complexExpressionLeft = BinaryExpression.And (entity' other' MemberInfoFromExpressionUtility.GetMethod (() => FakeAndOperator (null' null))); " is 145.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_NonBoolBinaryExpression_OperandsGetSingleValueSemantics_ComplexValueNotAllowed,The length of the statement  "      var complexExpressionRight = BinaryExpression.And (other' entity' MemberInfoFromExpressionUtility.GetMethod (() => FakeAndOperator (null' null))); " is 146.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_NonBoolBinaryExpression_OperandsGetSingleValueSemantics_ComplexValueNotAllowed,The length of the statement  "      Assert.That (() => _valueRequiredVisitor.VisitBinary (complexExpressionRight)' Throws.TypeOf<NotSupportedException> ()); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitUnaryExpression_UnaryBoolExpression_Not_OperandConvertedToPredicate,The length of the statement  "          Expression.Not (Expression.Equal (Expression.Constant (1' typeof (int?))' new SqlLiteralExpression (1' true)' true' null)); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitUnaryExpression_ConvertExpression_SameOperand,The length of the statement  "      var unaryExpression = Expression.Convert (SqlStatementModelObjectMother.CreateSqlEntityDefinitionExpression (typeof (Cook))' typeof (object)); " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitUnaryExpression_OtherUnaryExpression_OperandConvertedToSingleValue,The length of the statement  "                    GetNonNullablePredicateAsValueExpression (Expression.Not (Expression.Equal (Expression.Constant (1)' new SqlLiteralExpression (1)))))' " is 134.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitUnaryExpression_SqlConvertedBooleanExpression,The length of the statement  "      var expectedExpression = new SqlConvertedBooleanExpression (Expression.Convert (Expression.Constant (1' typeof (int?))' typeof (int))); " is 135.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitUnaryExpression_SqlConvertedBooleanExpression,The length of the statement  "      var expectedNullableExpression = new SqlConvertedBooleanExpression (Expression.Convert (Expression.Constant (1)' typeof (int?))); " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitSqlIsNullExpression_AppliesSingleValueSemantics_ThrowsForComplexValue,The length of the statement  "      Assert.That (() => _valueRequiredVisitor.VisitSqlIsNull (sqlIsNullExpressionWithEntity)' Throws.TypeOf<NotSupportedException> ()); " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitSqlIsNotNullExpression_AppliesSingleValueSemantics_ThrowsForComplexValue,The length of the statement  "      Assert.That (() => _valueRequiredVisitor.VisitSqlIsNotNull (sqlIsNotNullExpressionWithEntity)' Throws.TypeOf<NotSupportedException> ()); " is 136.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitSqlSubStatementExpression,The length of the statement  "          .Expect (mock => mock.ApplySelectionContext (sqlStatement' SqlExpressionContext.ValueRequired' _mappingResolutionContext)) " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitNewExpression_NoMembers,The length of the statement  "      var expression = Expression.New (TypeForNewExpression.GetConstructor (typeof (int))' new[] { Expression.Constant (0) }); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitMethodCallExpression_KeepsValueSemantics,The length of the statement  "      var expression = Expression.Call (instance' MemberInfoFromExpressionUtility.GetMethod (() => ((Cook) null).GetSubKitchenCook (null))' argument); " is 144.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitSqlGroupingSelectExpression_KeepsValueSemantics,The length of the statement  "      Assert.That (_mappingResolutionContext.GetReferencedGroupSource (((SqlGroupingSelectExpression) result))' Is.SameAs (sqlTable)); " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitSqlGroupingSelectExpression_VisitsChildren,The length of the statement  "      SqlExpressionTreeComparer.CheckAreEqualTrees (new SqlConvertedBooleanExpression (Expression.Constant (0))' result.KeyExpression); " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitSqlGroupingSelectExpression_VisitsChildren,The length of the statement  "      SqlExpressionTreeComparer.CheckAreEqualTrees (new SqlConvertedBooleanExpression (Expression.Constant (0))' result.ElementExpression); " is 133.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitSqlGroupingSelectExpression_VisitsChildren,The length of the statement  "      SqlExpressionTreeComparer.CheckAreEqualTrees (new SqlConvertedBooleanExpression (Expression.Constant (1))' result.AggregationExpressions[0]); " is 141.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitSqlFunctionExpression,The length of the statement  "      var expectedResult = new SqlFunctionExpression (typeof (int)' "Test"' new SqlConvertedBooleanExpression (Expression.Constant (1))); " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitSqlConvertExpression,The length of the statement  "      var expectedResult = new SqlConvertExpression (typeof (bool)' new SqlConvertedBooleanExpression (Expression.Constant (1))); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,SqlLikeExpression,The length of the statement  "      var expression = new SqlLikeExpression (Expression.Constant (true)' Expression.Constant (true)' new SqlLiteralExpression (@"\")); " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,SqlLikeExpression,The length of the statement  "          new SqlConvertedBooleanExpression (Expression.Constant (1))' new SqlConvertedBooleanExpression (Expression.Constant (1))' new SqlLiteralExpression (@"\")); " is 155.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitSqlCaseExpression_AppliesValueContext,The length of the statement  "          Expression.Equal (Expression.Constant (1)' new SqlLiteralExpression (1))' new SqlConvertedBooleanExpression (Expression.Constant (1))); " is 135.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitSqlCaseExpression_AppliesValueContext,The length of the statement  "          Expression.Equal (Expression.Constant (0)' new SqlLiteralExpression (1))' new SqlConvertedBooleanExpression (Expression.Constant (0))); " is 135.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitSqlCaseExpression_AppliesValueContext,The length of the statement  "      var expectedExpression = new SqlCaseExpression (typeof (bool)' new[] { expectedCase1' expectedCase2 }' expectedElseCase); " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitSqlCaseExpression_NoElse,The length of the statement  "          Expression.Equal (Expression.Constant (1)' new SqlLiteralExpression (1))' new SqlConvertedBooleanExpression (Expression.Constant (1))); " is 135.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitSqlCaseExpression_NoElse,The length of the statement  "          Expression.Equal (Expression.Constant (0)' new SqlLiteralExpression (1))' new SqlConvertedBooleanExpression (Expression.Constant (0))); " is 135.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitSqlRowNumberExpression,The length of the statement  "      var expression = new SqlRowNumberExpression (new[] { new Ordering (Expression.Constant (true)' OrderingDirection.Asc) }); " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitSqlRowNumberExpression,The length of the statement  "          new SqlRowNumberExpression (new[] { new Ordering (new SqlConvertedBooleanExpression (Expression.Constant (1))' OrderingDirection.Asc) }); " is 137.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitSqlRowNumberExpression,The length of the statement  "      SqlExpressionTreeComparer.CheckAreEqualTrees (expectedResult.Orderings[0].Expression' ((SqlRowNumberExpression) result).Orderings[0].Expression); " is 145.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,SqlInExpression,The length of the statement  "      var expectedResult = new SqlInExpression (new SqlConvertedBooleanExpression (Expression.Constant (1))' new SqlConvertedBooleanExpression (Expression.Constant (1))); " is 164.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,SqlInExpression_WithInvalidChildren,The length of the statement  "              "The SQL 'IN' operator (originally probably a call to a 'Contains' method) requires a single value' so the following expression " " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitAggregationExpression_AppliesValueContextToInnerExpression,The length of the statement  "      var aggregationExpression = new AggregationExpression (typeof (int)' Expression.Constant (true)' AggregationModifier.Count); " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitAggregationExpression_AppliesValueContextToInnerExpression,The length of the statement  "      var expected = new AggregationExpression (typeof (int)' new SqlConvertedBooleanExpression (Expression.Constant (1))' AggregationModifier.Count); " is 144.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,GetNonNullablePredicateAsValueExpression,The length of the statement  "      return SqlCaseExpression.CreateIfThenElse (typeof (int)' expression' new SqlLiteralExpression (1)' new SqlLiteralExpression (0)); " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,GetNullablePredicateAsValueExpression,The length of the statement  "      return SqlCaseExpression.CreateIfThenElseNull (typeof (int?)' expression' new SqlLiteralExpression (1)' new SqlLiteralExpression (0)); " is 134.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitMemberExpression,The length of the statement  "      var result = ResolvingExpressionVisitor.ResolveExpression (memberExpression' _resolverMock' _stageMock' _mappingResolutionContext' _generator); " is 143.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitMemberExpression_ResolvesSourceExpression,The length of the statement  "          .Expect (mock => mock.ResolveMemberAccess (fakeResolvedSourceExpression' memberInfo' _resolverMock' _mappingResolutionContext)) " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitBinaryExpression,The length of the statement  "      _resolverMock.Expect (mock => mock.ResolveConstantExpression ((ConstantExpression) fakeSplitComparison.Left)).Return (fakeSplitComparison.Left); " is 144.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitBinaryExpression,The length of the statement  "      _resolverMock.Expect (mock => mock.ResolveConstantExpression ((ConstantExpression) fakeSplitComparison.Right)).Return (fakeSplitComparison.Right); " is 146.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitBinaryExpression,The length of the statement  "      _entityIdentityResolverMock.Expect (mock => mock.ResolvePotentialEntityComparison (fakeSplitComparison)).Return (fakeSplitComparison); " is 134.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitBinaryExpression,The length of the statement  "      _compoundComparisonSplitterMock.Expect (mock => mock.SplitPotentialCompoundComparison (fakeSplitComparison)).Return (fakeSplitComparison); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitNamedExpression,The length of the statement  "          .Expect (mock => mock.ProcessNames (Arg<NamedExpression>.Matches (e => e.Name == "Name" && e.Expression == fakeResolvedInnerExpression))) " is 137.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitNamedExpression,The length of the statement  "          .Expect (mock => mock.ProcessNames (Arg<NamedExpression>.Matches (e => e.Name == "Name2" && e.Expression == fakeResolvedInnerExpression2))) " is 139.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitSqlExistsExpression,The length of the statement  "      _resolverMock.Expect (mock => mock.ResolveConstantExpression (fakeResolvedEntityIdentity)).Return (fakeResolvedEntityIdentity); " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitSqlExistsExpression,The length of the statement  "      _entityIdentityResolverMock.Expect (mock => mock.ResolvePotentialEntity (fakeResolvedEntityIdentity)).Return (fakeResolvedEntityIdentity); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitSqlIsNullExpression,The length of the statement  "          .Expect (mock => mock.ResolvePotentialEntityComparison (Arg<SqlIsNullExpression>.Matches (e => e.Expression == fakeResolvedInner))) " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitSqlIsNotNullExpression,The length of the statement  "          .Expect (mock => mock.ResolvePotentialEntityComparison (Arg<SqlIsNotNullExpression>.Matches (e => e.Expression == fakeResolvedInner))) " is 134.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitSqlEntityRefMemberExpression_ResolveFlagTrue,The length of the statement  "                      ji.OriginatingEntity == entityRefMemberExpression.OriginatingEntity && ji.MemberInfo == entityRefMemberExpression.MemberInfo " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,ResolveExpression_OptimizesEntityRefMemberComparisons,The length of the statement  "      var result = ResolvingExpressionVisitor.ResolveExpression (binary' _resolverMock' _stageMock' _mappingResolutionContext' _generator); " is 133.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingTableInfoVisitorTest.cs,ResolveTableInfo_Unresolved,The length of the statement  "      var result = ResolvingTableInfoVisitor.ResolveTableInfo (resolvedTableInfo' _resolverMock' _generator' _stageMock' _mappingResolutionContext); " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingTableInfoVisitorTest.cs,ResolveTableInfo_Unresolved_RevisitsResult_OnlyIfDifferent,The length of the statement  "      var result = ResolvingTableInfoVisitor.ResolveTableInfo (_unresolvedTableInfo' _resolverMock' _generator' _stageMock' _mappingResolutionContext); " is 145.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingTableInfoVisitorTest.cs,ResolveTableInfo_SubStatementTableInfo_SubStatementUnmodified,The length of the statement  "      var result = (ResolvedSubStatementTableInfo) ResolvingTableInfoVisitor.ResolveTableInfo (sqlSubStatementTableInfo' _resolverMock' _generator' _stageMock' _mappingResolutionContext); " is 181.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingTableInfoVisitorTest.cs,ResolveTableInfo_SubStatementTableInfo_SubStatementModified,The length of the statement  "      var result = (ResolvedSubStatementTableInfo) ResolvingTableInfoVisitor.ResolveTableInfo (sqlSubStatementTableInfo' _resolverMock' _generator' _stageMock' _mappingResolutionContext); " is 181.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingTableInfoVisitorTest.cs,ResolveTableInfo_JoinedGroupingTableInfo_SubStatementUnmodified,The length of the statement  "      var result = (ResolvedJoinedGroupingTableInfo) ResolvingTableInfoVisitor.ResolveTableInfo (sqlJoinedGroupingTableInfo' _resolverMock' _generator' _stageMock' _mappingResolutionContext); " is 185.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingTableInfoVisitorTest.cs,ResolveTableInfo_JoinedGroupingTableInfo_SubStatementModified,The length of the statement  "      var result = (ResolvedJoinedGroupingTableInfo) ResolvingTableInfoVisitor.ResolveTableInfo (sqlJoinedGroupingTableInfo' _resolverMock' _generator' _stageMock' _mappingResolutionContext); " is 185.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingTableInfoVisitorTest.cs,ResolveTableInfo_JoinedGroupingTableInfo_SubStatementModified,The length of the statement  "      Assert.That (result.AssociatedGroupingSelectExpression' Is.SameAs (sqlJoinedGroupingTableInfo.AssociatedGroupingSelectExpression)); " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingTableInfoVisitorTest.cs,ResolveTableInfo_SimpleTableInfo,The length of the statement  "      var result = ResolvingTableInfoVisitor.ResolveTableInfo (simpleTableInfo' _resolverMock' _generator' _stageMock' _mappingResolutionContext); " is 140.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingTableInfoVisitorTest.cs,ResolveTableInfo_SqlJoinedTable,The length of the statement  "      var result = ResolvingTableInfoVisitor.ResolveTableInfo (sqlJoinedTable' _resolverMock' _generator' _stageMock' _mappingResolutionContext); " is 139.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingTableInfoVisitorTest.cs,ResolveTableInfo_GroupReferenceTableInfo,The length of the statement  "      var groupSource = SqlStatementModelObjectMother.CreateSqlTable (new ResolvedSubStatementTableInfo ("q0"' groupingSubStatement)); " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingTableInfoVisitorTest.cs,ResolveTableInfo_GroupReferenceTableInfo,The length of the statement  "      var expectedKeyViaElement = Expression.MakeMemberAccess (new SqlTableReferenceExpression (sqlTable)' typeof (Cook).GetProperty ("Name")); " is 137.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingTableInfoVisitorTest.cs,ResolveTableInfo_GroupReferenceTableInfo,The length of the statement  "      var expectedKeyViaGroupSource = Expression.MakeMemberAccess (new SqlTableReferenceExpression (groupSource)' groupSource.ItemType.GetProperty ("Key")); " is 150.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingTableInfoVisitorTest.cs,ResolveTableInfo_GroupReferenceTableInfo,The length of the statement  "              Expression.AndAlso (new SqlIsNullExpression (expectedKeyViaElement)' new SqlIsNullExpression (expectedKeyViaGroupSource))' " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingTableInfoVisitorTest.cs,ResolveTableInfo_GroupReferenceTableInfo,The length of the statement  "                  Expression.AndAlso (new SqlIsNotNullExpression (expectedKeyViaElement)' new SqlIsNotNullExpression (expectedKeyViaGroupSource))' " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingTableInfoVisitorTest.cs,ResolveTableInfo_GroupReferenceTableInfo,The length of the statement  "          .WhenCalled (mi => SqlExpressionTreeComparer.CheckAreEqualTrees (expectedResultWhereCondition' (Expression) mi.Arguments[0])) " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingTableInfoVisitorTest.cs,ResolveTableInfo_GroupReferenceTableInfo,The length of the statement  "      var result = ResolvingTableInfoVisitor.ResolveTableInfo (tableInfo' _resolverMock' _generator' _stageMock' _mappingResolutionContext); " is 134.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingTableInfoVisitorTest.cs,ResolveTableInfo_GroupReferenceTableInfo,The length of the statement  "          Expression.MakeMemberAccess (new SqlTableReferenceExpression (resultSqlStatement.SqlTables[0])' typeof (Cook).GetProperty ("ID")); " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingTableInfoVisitorTest.cs,ResolveTableInfo_GroupReferenceTableInfo,The length of the statement  "      SqlExpressionTreeComparer.CheckAreEqualTrees (expectedItemExpression' ((StreamedSequenceInfo) resultSqlStatement.DataInfo).ItemExpression); " is 139.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingTableInfoVisitorTest.cs,ResolveTableInfo_GroupReferenceTableInfo_NoSubStatement,The length of the statement  "      ResolvingTableInfoVisitor.ResolveTableInfo (tableInfo' _resolverMock' _generator' _stageMock' _mappingResolutionContext); " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingTableInfoVisitorTest.cs,ResolveTableInfo_GroupReferenceTableInfo_NoGorupingSubStatement,The length of the statement  "      var groupSource = SqlStatementModelObjectMother.CreateSqlTable (new ResolvedSubStatementTableInfo ("q0"' subStatement)); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingTableInfoVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingTableInfoVisitorTest.cs,ResolveTableInfo_GroupReferenceTableInfo_NoGorupingSubStatement,The length of the statement  "      ResolvingTableInfoVisitor.ResolveTableInfo (tableInfo' _resolverMock' _generator' _stageMock' _mappingResolutionContext); " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,CompoundMemberSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\CompoundMemberSqlBackendIntegrationTest.cs,SelectingCompoundMember,The length of the statement  "              row => (object) new MetaID (row.GetValue<int> (new ColumnID ("Value"' 0))' row.GetValue<string> (new ColumnID ("ClassID"' 1)))) " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,CompoundMemberSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\CompoundMemberSqlBackendIntegrationTest.cs,SelectingCompoundMember_FromSubquery,The length of the statement  "              row => (object) new MetaID (row.GetValue<int> (new ColumnID ("Value"' 0))' row.GetValue<string> (new ColumnID ("ClassID"' 1))))); " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,CompoundMemberSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\CompoundMemberSqlBackendIntegrationTest.cs,SelectingMultipleCompoundMembers,The length of the statement  "          "SELECT [t0].[KnifeID] AS [ID1_Value]'[t0].[KnifeClassID] AS [ID1_ClassID]'[t1].[KnifeID] AS [ID2_Value]'[t1].[KnifeClassID] AS [ID2_ClassID] " " is 143.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,CompoundMemberSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\CompoundMemberSqlBackendIntegrationTest.cs,SelectingMultipleCompoundMembers,The length of the statement  "                         ID1 = new MetaID (row.GetValue<int> (new ColumnID ("ID1_Value"' 0))' row.GetValue<string> (new ColumnID ("ID1_ClassID"' 1)))' " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,CompoundMemberSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\CompoundMemberSqlBackendIntegrationTest.cs,SelectingMultipleCompoundMembers,The length of the statement  "                         ID2 = new MetaID (row.GetValue<int> (new ColumnID ("ID2_Value"' 2))' row.GetValue<string> (new ColumnID ("ID2_ClassID"' 3))) " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,CompoundMemberSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\CompoundMemberSqlBackendIntegrationTest.cs,SelectingEntityWithCompoundID,The length of the statement  "          row => (object) row.GetEntity<Knife> (new ColumnID ("ID"' 0)' new ColumnID ("ClassID"' 1)' new ColumnID ("Sharpness"' 2))); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,CompoundMemberSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\CompoundMemberSqlBackendIntegrationTest.cs,SelectingID_OfEntityWithCompoundID,The length of the statement  "            row => (object) new MetaID (row.GetValue<int> (new ColumnID ("Value"' 0))' row.GetValue<string> (new ColumnID ("ClassID"' 1))))); " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NullableBoolExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NullableBoolExpressionSqlBackendIntegrationTest.cs,NullableBool_CastToBool,The length of the statement  "          "SELECT [t0].[ID] AS [value] FROM [KitchenTable] AS [t0] WHERE (([t0].[PassedLastInspection] IS NOT NULL) AND ([t0].[PassedLastInspection] = @1))"' " is 147.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NullableBoolExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NullableBoolExpressionSqlBackendIntegrationTest.cs,Bool_CastToNullableBool,The length of the statement  "          "SELECT [t0].[ID] AS [value] FROM [KitchenTable] AS [t0] WHERE (CASE WHEN ([t0].[Name] IS NOT NULL) THEN 1 ELSE 0 END = @1)"' " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NullableBoolExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NullableBoolExpressionSqlBackendIntegrationTest.cs,NullableBool_HasValue_Value,The length of the statement  "          "SELECT [t0].[ID] AS [value] FROM [KitchenTable] AS [t0] WHERE (([t0].[PassedLastInspection] IS NOT NULL) AND ([t0].[PassedLastInspection] = 1))"); " is 147.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NullableBoolExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NullableBoolExpressionSqlBackendIntegrationTest.cs,NullableBool_HasValue_Value,The length of the statement  "          "SELECT [t0].[ID] AS [value] FROM [KitchenTable] AS [t0] WHERE (([t0].[PassedLastInspection] IS NOT NULL) AND ([t0].[PassedLastInspection] = @1))"' " is 147.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NullableBoolExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NullableBoolExpressionSqlBackendIntegrationTest.cs,NullableBool_InSelectClause,The length of the statement  "              Expression.Equal (Expression.Property (kitchenParameter' "LastInspectionScore")' Expression.Constant (0' typeof (int?))' true' null)' " is 133.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NullableBoolExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NullableBoolExpressionSqlBackendIntegrationTest.cs,NullableBool_InOrderByClause,The length of the statement  "              Expression.Equal (Expression.Property (kitchenParameter' "LastInspectionScore")' Expression.Constant (0' typeof (int?))' true' null)' " is 133.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NullableBoolExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NullableBoolExpressionSqlBackendIntegrationTest.cs,NullableBool_InOrderByClause,The length of the statement  "          + "ORDER BY CASE WHEN ([t0].[LastInspectionScore] = @1) THEN 1 WHEN NOT ([t0].[LastInspectionScore] = @1) THEN 0 ELSE NULL END ASC"' " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NullableBoolExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NullableBoolExpressionSqlBackendIntegrationTest.cs,NullableBool_InWhereClause,The length of the statement  "              Expression.Equal (Expression.Property (kitchenParameter' "LastInspectionScore")' Expression.Constant (0' typeof (int?))' true' null)' " is 133.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NullableBoolExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NullableBoolExpressionSqlBackendIntegrationTest.cs,NullableBool_AndAlso_Lifted,The length of the statement  "          Expression.Property (kitchenParameter' "PassedLastInspection")' Expression.Property (kitchenParameter' "PassedLastInspection")); " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NullableBoolExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NullableBoolExpressionSqlBackendIntegrationTest.cs,NullableBool_AndAlso_Lifted,The length of the statement  "      var predicate = Expression.Lambda<Func<Kitchen' bool>> (Expression.Convert (conjunction' typeof (bool))' kitchenParameter); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NullableBoolExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NullableBoolExpressionSqlBackendIntegrationTest.cs,NullableBool_AndAlso_Lifted,The length of the statement  "         "SELECT [t0].[ID] AS [value] FROM [KitchenTable] AS [t0] WHERE (([t0].[PassedLastInspection] = 1) AND ([t0].[PassedLastInspection] = 1))"); " is 139.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NullableBoolExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NullableBoolExpressionSqlBackendIntegrationTest.cs,NullableBool_And_Lifted,The length of the statement  "          Expression.Property (kitchenParameter' "PassedLastInspection")' Expression.Property (kitchenParameter' "PassedLastInspection")); " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NullableBoolExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NullableBoolExpressionSqlBackendIntegrationTest.cs,NullableBool_And_Lifted,The length of the statement  "      var predicate = Expression.Lambda<Func<Kitchen' bool>> (Expression.Convert (conjunction' typeof (bool))' kitchenParameter); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NullableBoolExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NullableBoolExpressionSqlBackendIntegrationTest.cs,NullableBool_And_Lifted,The length of the statement  "         "SELECT [t0].[ID] AS [value] FROM [KitchenTable] AS [t0] WHERE (([t0].[PassedLastInspection] = 1) AND ([t0].[PassedLastInspection] = 1))"); " is 139.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NullableBoolExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NullableBoolExpressionSqlBackendIntegrationTest.cs,NullableBool_OrElse_Lifted,The length of the statement  "          Expression.Property (kitchenParameter' "PassedLastInspection")' Expression.Property (kitchenParameter' "PassedLastInspection")); " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NullableBoolExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NullableBoolExpressionSqlBackendIntegrationTest.cs,NullableBool_OrElse_Lifted,The length of the statement  "      var predicate = Expression.Lambda<Func<Kitchen' bool>> (Expression.Convert (conjunction' typeof (bool))' kitchenParameter); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NullableBoolExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NullableBoolExpressionSqlBackendIntegrationTest.cs,NullableBool_OrElse_Lifted,The length of the statement  "         "SELECT [t0].[ID] AS [value] FROM [KitchenTable] AS [t0] WHERE (([t0].[PassedLastInspection] = 1) OR ([t0].[PassedLastInspection] = 1))"); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NullableBoolExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NullableBoolExpressionSqlBackendIntegrationTest.cs,NullableBool_Or_Lifted,The length of the statement  "          Expression.Property (kitchenParameter' "PassedLastInspection")' Expression.Property (kitchenParameter' "PassedLastInspection")); " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NullableBoolExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NullableBoolExpressionSqlBackendIntegrationTest.cs,NullableBool_Or_Lifted,The length of the statement  "      var predicate = Expression.Lambda<Func<Kitchen' bool>> (Expression.Convert (conjunction' typeof (bool))' kitchenParameter); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NullableBoolExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NullableBoolExpressionSqlBackendIntegrationTest.cs,NullableBool_Or_Lifted,The length of the statement  "         "SELECT [t0].[ID] AS [value] FROM [KitchenTable] AS [t0] WHERE (([t0].[PassedLastInspection] = 1) OR ([t0].[PassedLastInspection] = 1))"); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NullableBoolExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NullableBoolExpressionSqlBackendIntegrationTest.cs,NullableBool_Not_Lifted,The length of the statement  "      var predicate = Expression.Lambda<Func<Kitchen' bool>> (Expression.Convert (conjunction' typeof (bool))' kitchenParameter); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NullableBoolExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NullableBoolExpressionSqlBackendIntegrationTest.cs,NullableBool_Coalesce_ToFalse_InSelectClause,The length of the statement  "              Expression.Equal (Expression.Property (kitchenParameter' "LastInspectionScore")' Expression.Constant (0' typeof (int?))' true' null)' " is 133.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NullableBoolExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NullableBoolExpressionSqlBackendIntegrationTest.cs,NullableBool_Coalesce_ToTrue_InSelectClause,The length of the statement  "              Expression.Equal (Expression.Property (kitchenParameter' "LastInspectionScore")' Expression.Constant (0' typeof (int?))' true' null)' " is 133.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NullableBoolExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NullableBoolExpressionSqlBackendIntegrationTest.cs,NullableBool_Coalesce_ToFalse_InWhereClause,The length of the statement  "              Expression.Equal (Expression.Property (kitchenParameter' "LastInspectionScore")' Expression.Constant (0' typeof (int?))' true' null)' " is 133.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NullableBoolExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NullableBoolExpressionSqlBackendIntegrationTest.cs,NullableBool_Coalesce_ToTrue_InWhereClause,The length of the statement  "              Expression.Equal (Expression.Property (kitchenParameter' "LastInspectionScore")' Expression.Constant (0' typeof (int?))' true' null)' " is 133.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NullableBoolExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NullableBoolExpressionSqlBackendIntegrationTest.cs,NullableBool_Coalesce_ToTrue_InWhereClause,The length of the statement  "         + "WHERE ((COALESCE (CASE WHEN ([t0].[LastInspectionScore] = @1) THEN 1 WHEN NOT ([t0].[LastInspectionScore] = @1) THEN 0 ELSE NULL END' @2)) " " is 143.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,ExplicitJoinsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ExplicitJoinsSqlBackendIntegrationTest.cs,ExplicitJoin,The length of the statement  "          "SELECT [t0].[Name] AS [value] FROM [KitchenTable] AS [t0] CROSS JOIN [CookTable] AS [t1] WHERE ([t0].[Name] = [t1].[FirstName])" " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,ExplicitJoinsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ExplicitJoinsSqlBackendIntegrationTest.cs,ExplicitJoin_DependentExpressions,The length of the statement  "          "SELECT [t0].[Name] AS [value] FROM [KitchenTable] AS [t0] LEFT OUTER JOIN [CookTable] AS [t2] ON ([t0].[ID] = [t2].[KitchenID]) " " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,ExplicitJoinsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ExplicitJoinsSqlBackendIntegrationTest.cs,ExplicitJoin_IncludingOptimizableImplicitJoins,The length of the statement  "          "SELECT [t1].[Name] AS [value] FROM [CookTable] AS [t0] CROSS JOIN [KitchenTable] AS [t1] WHERE ([t0].[KitchenID] = [t1].[ID])" " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,ExplicitJoinsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ExplicitJoinsSqlBackendIntegrationTest.cs,ExplicitJoin_IncludingOptimizableImplicitJoins,The length of the statement  "          "SELECT [t1].[Name] AS [value] FROM [KitchenTable] AS [t0] CROSS JOIN [CookTable] AS [t1] WHERE ([t0].[ID] = [t1].[KitchenID])" " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,ExplicitJoinsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ExplicitJoinsSqlBackendIntegrationTest.cs,ExplicitJoinWithInto_Once,The length of the statement  "          "SELECT [t1].[Name] AS [value] FROM [KitchenTable] AS [t0] LEFT OUTER JOIN [CookTable] AS [t2] ON ([t0].[ID] = [t2].[KitchenID]) "+ " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,ExplicitJoinsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ExplicitJoinsSqlBackendIntegrationTest.cs,ExplicitJoinWithInto_Twice,The length of the statement  "          "SELECT [t2].[ID] AS [value] FROM [KitchenTable] AS [t0] LEFT OUTER JOIN [CookTable] AS [t3] ON ([t0].[ID] = [t3].[KitchenID]) "+ " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,ExplicitJoinsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ExplicitJoinsSqlBackendIntegrationTest.cs,ExplicitJoinWithInto_UseIntoVariableTwiceInSameStatement,The length of the statement  "          "SELECT [t1].[FirstName] AS [value] FROM [KitchenTable] AS [t0] LEFT OUTER JOIN [CookTable] AS [t2] ON ([t0].[ID] = [t2].[KitchenID]) "+ " is 136.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,ExplicitJoinsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ExplicitJoinsSqlBackendIntegrationTest.cs,ExplicitJoinWithInto_UseIntoVariableTwiceInSameStatementAndInSubStatement,The length of the statement  "          "SELECT [t1].[Name] AS [value] FROM [KitchenTable] AS [t0] LEFT OUTER JOIN [CookTable] AS [t2] ON ([t0].[ID] = [t2].[KitchenID]) " " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,ExplicitJoinsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ExplicitJoinsSqlBackendIntegrationTest.cs,ExplicitJoinWithInto_UseIntoVariableTwiceInSameStatementAndInSubStatement,The length of the statement  "          + "CROSS JOIN [CookTable] AS [t1] WHERE (([t2].[ID] = [t1].[ID]) AND ([t0].[Name] = (SELECT TOP (1) [t4].[Name] AS [value] " " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,ExplicitJoinsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ExplicitJoinsSqlBackendIntegrationTest.cs,ExplicitJoinWithInto_UseIntoVariableTwiceInSameStatementAndTwoSubStatement,The length of the statement  "      "SELECT [t1].[Name] AS [value] FROM [KitchenTable] AS [t0] LEFT OUTER JOIN [CookTable] AS [t2] ON ([t0].[ID] = [t2].[KitchenID]) " " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,ExplicitJoinsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ExplicitJoinsSqlBackendIntegrationTest.cs,ExplicitJoinWithInto_UseIntoVariableTwiceInSameStatementAndTwoSubStatement,The length of the statement  "      + "CROSS JOIN [CookTable] AS [t1] WHERE (([t2].[ID] = [t1].[ID]) AND ([t0].[Name] = (SELECT TOP (1) [t4].[Name] AS [value] " " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,ExplicitJoinsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ExplicitJoinsSqlBackendIntegrationTest.cs,ExplicitJoinWithInto_UseIntoVariableTwiceInSameStatementAndTwoSubStatement,The length of the statement  "      + "(SELECT TOP (1) [t4].[Name] AS [value] FROM [KitchenTable] AS [t5] CROSS JOIN [CookTable] AS [t6] WHERE ([t2].[ID] = [t6].[ID])))))))"); " is 139.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,ExplicitJoinsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ExplicitJoinsSqlBackendIntegrationTest.cs,ExplicitJoinWithInto_InSubstatement_Once,The length of the statement  "          "SELECT [t0].[FirstName] AS [value] FROM [CookTable] AS [t0] WHERE ([t0].[Name] = (SELECT TOP (1) [t2].[FirstName] AS [value] "+ " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,ExplicitJoinsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ExplicitJoinsSqlBackendIntegrationTest.cs,ExplicitJoinWithInto_InSubstatement_Once,The length of the statement  "          "FROM [KitchenTable] AS [t1] LEFT OUTER JOIN [CookTable] AS [t3] ON ([t1].[ID] = [t3].[KitchenID]) CROSS JOIN [CookTable] AS [t2] "+ " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,ExplicitJoinsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ExplicitJoinsSqlBackendIntegrationTest.cs,ExplicitJoinWithInto_InSubstatement_Twice,The length of the statement  "          "SELECT [t0].[FirstName] AS [value] FROM [CookTable] AS [t0] WHERE ([t0].[Name] = (SELECT TOP (1) [t2].[FirstName] AS [value] "+ " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,ExplicitJoinsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ExplicitJoinsSqlBackendIntegrationTest.cs,ExplicitJoinWithInto_InTwoSubstatements,The length of the statement  "          "SELECT [t0].[FirstName] AS [value] FROM [CookTable] AS [t0] WHERE (([t0].[Name] = (SELECT TOP (1) [t2].[FirstName] AS [value] "+ " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,ExplicitJoinsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ExplicitJoinsSqlBackendIntegrationTest.cs,ExplicitJoinWithInto_InTwoSubstatements,The length of the statement  "          "FROM [KitchenTable] AS [t1] LEFT OUTER JOIN [CookTable] AS [t3] ON ([t1].[ID] = [t3].[KitchenID]) CROSS JOIN [CookTable] AS [t2] "+ " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,ExplicitJoinsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ExplicitJoinsSqlBackendIntegrationTest.cs,ExplicitJoinWithInto_InTwoSubstatements,The length of the statement  "          "WHERE ([t3].[ID] = [t2].[ID]))) AND ([t0].[FirstName] = (SELECT TOP (1) [t5].[Name] AS [value] FROM [KitchenTable] AS [t4] "+ " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,ExplicitJoinsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ExplicitJoinsSqlBackendIntegrationTest.cs,ExplicitJoinWithInto_InTwoSubstatements,The length of the statement  "          "LEFT OUTER JOIN [CookTable] AS [t6] ON ([t4].[ID] = [t6].[KitchenID]) CROSS JOIN [CookTable] AS [t5] WHERE ([t6].[ID] = [t5].[ID]))))"); " is 137.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,ExplicitJoinsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ExplicitJoinsSqlBackendIntegrationTest.cs,ExplicitJoinWithInto_DefaultIfEmptyOnGroupJoinVariable,The length of the statement  "          "SELECT [q1].[Name] AS [value] FROM [KitchenTable] AS [t2] LEFT OUTER JOIN [CookTable] AS [t4] ON ([t2].[ID] = [t4].[KitchenID]) " " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,ExplicitJoinsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ExplicitJoinsSqlBackendIntegrationTest.cs,ExplicitJoinWithInto_DefaultIfEmptyOnGroupJoinVariable,The length of the statement  "          + "CROSS APPLY (SELECT [q0].[ID]'[q0].[FirstName]'[q0].[Name]'[q0].[IsStarredCook]'[q0].[IsFullTimeCook]'[q0].[SubstitutedID]'" " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,ExplicitJoinsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ExplicitJoinsSqlBackendIntegrationTest.cs,ExplicitJoinWithInto_DefaultIfEmptyOnGroupJoinVariable,The length of the statement  "          + "(SELECT [t3].[ID]'[t3].[FirstName]'[t3].[Name]'[t3].[IsStarredCook]'[t3].[IsFullTimeCook]'[t3].[SubstitutedID]'[t3].[KitchenID]'" " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NamedEntitiesSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NamedEntitiesSqlBackendIntegrationTest.cs,NamedEntity,The length of the statement  "      var subSelectClause = new SelectClause (new NamedExpression ("inner"' new QuerySourceReferenceExpression (subMainFromClause))); " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NamedEntitiesSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NamedEntitiesSqlBackendIntegrationTest.cs,NamedEntity,The length of the statement  "      var outerWhereClause = new WhereClause(Expression.Equal(Expression.MakeMemberAccess (new QuerySourceReferenceExpression (outerMainFromClause)' typeof (Cook).GetProperty ("ID"))' Expression.Constant (1))); " is 204.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NamedEntitiesSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NamedEntitiesSqlBackendIntegrationTest.cs,NamedEntity,The length of the statement  "          + "[q0].[inner_KnifeID] AS [KnifeID]'[q0].[inner_KnifeClassID] AS [KnifeClassID]'[q0].[inner_CookRating] AS [CookRating] "  " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NamedEntitiesSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NamedEntitiesSqlBackendIntegrationTest.cs,NamedEntity,The length of the statement  "          + "[t1].[KitchenID] AS [inner_KitchenID]'[t1].[KnifeID] AS [inner_KnifeID]'[t1].[KnifeClassID] AS [inner_KnifeClassID]'" " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NullableExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NullableExpressionSqlBackendIntegrationTest.cs,HasValue,The length of the statement  "          "SELECT CONVERT(BIT' CASE WHEN ([t0].[LastCleaningDay] IS NOT NULL) THEN 1 ELSE 0 END) AS [value] FROM [KitchenTable] AS [t0]"); " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,NullableExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\NullableExpressionSqlBackendIntegrationTest.cs,HasValue,The length of the statement  "          "SELECT CONVERT(BIT' CASE WHEN NOT ([t0].[LastCleaningDay] IS NOT NULL) THEN 1 ELSE 0 END) AS [value] FROM [KitchenTable] AS [t0]"); " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,TypeIsExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\TypeIsExpressionSqlBackendIntegrationTest.cs,Is,The length of the statement  "          "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'" " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,TypeIsExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\TypeIsExpressionSqlBackendIntegrationTest.cs,Is,The length of the statement  "          "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'" " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,TypeIsExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\TypeIsExpressionSqlBackendIntegrationTest.cs,Is,The length of the statement  "          "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'" " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,TypeIsExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\TypeIsExpressionSqlBackendIntegrationTest.cs,Is,The length of the statement  "          "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'" " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,AdditionalFromClausesSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\AdditionalFromClausesSqlBackendIntegrationTest.cs,SimpleAdditionalFromClause_ThreeTables,The length of the statement  "          "SELECT [t1].[Name] AS [value] FROM [CookTable] AS [t0] CROSS JOIN [KitchenTable] AS [t1] CROSS JOIN [RestaurantTable] AS [t2]"); " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,AdditionalFromClausesSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\AdditionalFromClausesSqlBackendIntegrationTest.cs,SimpleAdditionalFromClause_WithJoins,The length of the statement  "          "CROSS JOIN [KitchenTable] AS [t1] LEFT OUTER JOIN [CookTable] AS [t2] ON ([t1].[ID] = [t2].[KitchenID]) WHERE ([t3].[Name] = @1)"' " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,OrderByClausesSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\OrderByClausesSqlBackendIntegrationTest.cs,SeveralOrderings,The length of the statement  "          "SELECT [t0].[Name] AS [value] FROM [CookTable] AS [t0] ORDER BY [t0].[Name] ASC' [t0].[FirstName] DESC' [t0].[Weight] ASC"); " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,OrderByClausesSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\OrderByClausesSqlBackendIntegrationTest.cs,AutomaticOrderByHandlingInSubStatements_InSelectClause_WithoutTopExpression,The length of the statement  "          "SELECT (SELECT COUNT(*) AS [value] FROM [KitchenTable] AS [t1] LEFT OUTER JOIN [CookTable] AS [t2] ON ([t1].[ID] = [t2].[KitchenID]) "+ " is 136.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,OrderByClausesSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\OrderByClausesSqlBackendIntegrationTest.cs,AutomaticOrderByHandlingInSubStatements_InSelectClause_WithTopExpression,The length of the statement  "         "SELECT [q3].[ID]'[q3].[Name]'[q3].[RestaurantID]'[q3].[LastCleaningDay]'[q3].[PassedLastInspection]'[q3].[LastInspectionScore] " " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,OrderByClausesSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\OrderByClausesSqlBackendIntegrationTest.cs,AutomaticOrderByHandlingInSubStatements_InSelectClause_WithTopExpression,The length of the statement  "          + "(SELECT TOP (1) [t1].[ID]'[t1].[Name]'[t1].[RestaurantID]'[t1].[LastCleaningDay]'[t1].[PassedLastInspection]'[t1].[LastInspectionScore] " " is 140.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,OrderByClausesSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\OrderByClausesSqlBackendIntegrationTest.cs,AutomaticOrderByHandlingInSubStatements_InSelectClause_WithTopExpression,The length of the statement  "          +"[CookTable] AS [t2] ON ([t1].[ID] = [t2].[KitchenID]) WHERE ([t2].[ID] = [t0].[ID]) ORDER BY [t1].[Name] ASC) AS [q3]"); " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,OrderByClausesSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\OrderByClausesSqlBackendIntegrationTest.cs,AutomaticOrderByHandlingInSubStatements_InWhereClause_WithTopExpression,The length of the statement  "          "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'" " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,OrderByClausesSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\OrderByClausesSqlBackendIntegrationTest.cs,AutomaticOrderByHandlingInSubStatements_InWhereClause_WithTopExpression,The length of the statement  "          + "FROM [CookTable] AS [t0] WHERE ((SELECT TOP (2) [t1].[Name] AS [value] FROM [CookTable] AS [t1] ORDER BY [t1].[Name] ASC) IS NOT NULL)"); " is 140.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,OrderByClausesSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\OrderByClausesSqlBackendIntegrationTest.cs,AutomaticOrderByHandlingInSubStatements_InWhereClause_WithoutTopExpression,The length of the statement  "          "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'" " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InWhereCondition_First,The length of the statement  "          "SELECT [t0].[Name] AS [value] FROM [CookTable] AS [t0] WHERE ([t0].[Name] = (SELECT TOP (1) [t1].[FirstName] AS [value] FROM [CookTable] AS [t1]))"); " is 150.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InWhereCondition_Single,The length of the statement  "          "SELECT [t0].[Name] AS [value] FROM [CookTable] AS [t0] WHERE ([t0].[Name] = (SELECT TOP (2) [t1].[Name] AS [value] FROM [KitchenTable] AS [t1]))"); " is 148.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InWhereCondition_Count,The length of the statement  "          "SELECT [t0].[Name] AS [value] FROM [CookTable] AS [t0] WHERE ([t0].[ID] = (SELECT COUNT(*) AS [value] FROM [KitchenTable] AS [t1]))"); " is 135.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,SubQueryInMainFromClause,The length of the statement  "          "SELECT [q0].[ID]'[q0].[FirstName]'[q0].[Name]'[q0].[IsStarredCook]'[q0].[IsFullTimeCook]'[q0].[SubstitutedID]'[q0].[KitchenID]'" " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,SubQueryInMainFromClause,The length of the statement  "          + "(SELECT TOP (1) [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'[t1].[IsFullTimeCook]'[t1].[SubstitutedID]'[t1].[KitchenID]'" " is 140.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,SubQueryInAdditionalFromClause,The length of the statement  "          + "(SELECT [t2].[ID]'[t2].[FirstName]'[t2].[Name]'[t2].[IsStarredCook]'[t2].[IsFullTimeCook]'[t2].[SubstitutedID]'[t2].[KitchenID]'" " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,SubQuery_SelectingEntityMember_InAdditionalFromClause,The length of the statement  "          + "SELECT [t3].[ID]'[t3].[FirstName]'[t3].[Name]'[t3].[IsStarredCook]'[t3].[IsFullTimeCook]'[t3].[SubstitutedID]'[t3].[KitchenID]'" " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,ComplexSubQueryInAdditionalFromClause,The length of the statement  "          + "(SELECT [t2].[ID]'[t2].[FirstName]'[t2].[Name]'[t2].[IsStarredCook]'[t2].[IsFullTimeCook]'[t2].[SubstitutedID]'[t2].[KitchenID]'" " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,ComplexSubQuery_WithEntityComparison_InAdditionalFromClause,The length of the statement  "          + "(SELECT [t2].[ID]'[t2].[FirstName]'[t2].[Name]'[t2].[IsStarredCook]'[t2].[IsFullTimeCook]'[t2].[SubstitutedID]'[t2].[KitchenID]'" " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,SubQueryInFromClause_SelectingSingleValue,The length of the statement  "          "SELECT [q0].[value] AS [value] FROM (SELECT TOP (1) ([t1].[ID] + [t1].[ID]) AS [value] FROM [CookTable] AS [t1]) AS [q0]"); " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InOrderByClause,The length of the statement  "          "SELECT [t0].[Name] AS [value] FROM [CookTable] AS [t0] ORDER BY (SELECT COUNT(*) AS [value] FROM [KitchenTable] AS [t1]) ASC"); " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,SubQueryInSubQuery,The length of the statement  "          from c in Cooks where c.ID == (from k in Kitchens where k.ID == (from r in Restaurants select r).Count () select k).Count () select c.Name' " is 139.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,DependentSubQueryInSubQuery,The length of the statement  "          from r in Restaurants where r.ID == (from c in r.Cooks where c.ID == (from a in c.Assistants select a).Count () select c).Count () select r.ID' " is 143.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,Contains,The length of the statement  "          + "WHERE [t0].[ID] IN (SELECT [t2].[ID] FROM [CookTable] AS [t1] LEFT OUTER JOIN [CookTable] AS [t2] ON ([t1].[ID] = [t2].[SubstitutedID]))"); " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,OrderingsInSubQuery_WithoutDistinct,The length of the statement  "        // => from s in Cooks from s2 in (from s2 in Cooks select new { Key = s2.ID' Value = new { Key = s2.Name' Value = null } }) orderby s.Value.Key select s.Key   " is 156.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,OrderingsInSubQuery_WithoutDistinct,The length of the statement  "          "SELECT [q0].[Key] AS [value] FROM [CookTable] AS [t1] CROSS APPLY (SELECT [t2].[ID] AS [Key]'[t2].[Name] AS [Value] " + " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,OrderingsInSubQuery_WithoutDistinct,The length of the statement  "        // => from s in Cooks from s2 in (from s2 in Cooks select new { Key = s2' Value = new { Key = s2.Name' Value = null } }) orderby s.Value.Key select s.Key   " is 153.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InSelectProjection_Entity,The length of the statement  "        "SELECT [q2].[ID]'[q2].[FirstName]'[q2].[Name]'[q2].[IsStarredCook]'[q2].[IsFullTimeCook]'[q2].[SubstitutedID]'[q2].[KitchenID]'" " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InSelectProjection_Entity,The length of the statement  "          + "FROM [CookTable] AS [t0] CROSS APPLY (SELECT TOP (1) [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'[t1].[IsFullTimeCook]'" " is 139.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InSelectProjection_Entity,The length of the statement  "        "SELECT [q2].[ID]'[q2].[FirstName]'[q2].[Name]'[q2].[IsStarredCook]'[q2].[IsFullTimeCook]'[q2].[SubstitutedID]'[q2].[KitchenID]'" " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InSelectProjection_Entity,The length of the statement  "          + "FROM [CookTable] AS [t0] CROSS APPLY (SELECT TOP (1) [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'[t1].[IsFullTimeCook]'" " is 139.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InSelectProjection_Entity,The length of the statement  "          + "[t1].[SubstitutedID]'[t1].[KitchenID]'[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] FROM [CookTable] AS [t1]) AS [q2]"' " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InSelectProjection_Column,The length of the statement  "          "SELECT [q2].[value] AS [value] FROM [CookTable] AS [t0] CROSS APPLY (SELECT TOP (1) [t1].[Name] AS [value] FROM [KitchenTable] AS [t1]) AS [q2]"' " is 146.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InSelectProjection_Column,The length of the statement  "          "SELECT [q2].[value] AS [value] FROM [CookTable] AS [t0] CROSS APPLY (SELECT TOP (1) [t1].[Name] AS [value] FROM [KitchenTable] AS [t1]) AS [q2]"' " is 146.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InSelectProjection_NewExpression,The length of the statement  "          row => (object) new { Name = row.GetValue<string> (new ColumnID ("Name"' 0))' N2 = row.GetValue<string> (new ColumnID ("N2"' 1)) }); " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InSelectProjection_NewExpression,The length of the statement  "        "SELECT [q2].[Name] AS [Name] FROM [CookTable] AS [t0] CROSS APPLY (SELECT TOP (1) [t1].[Name] AS [Name] FROM [KitchenTable] AS [t1]) AS [q2]"' " is 143.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InSelectProjection_Single_Top1IsUsedInsteadOfTop2,The length of the statement  "        "SELECT [q2].[ID]'[q2].[FirstName]'[q2].[Name]'[q2].[IsStarredCook]'[q2].[IsFullTimeCook]'[q2].[SubstitutedID]'[q2].[KitchenID]'" " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InSelectProjection_SingleOrDefault,The length of the statement  "          "SELECT [q2].[ID]'[q2].[FirstName]'[q2].[Name]'[q2].[IsStarredCook]'[q2].[IsFullTimeCook]'[q2].[SubstitutedID]'[q2].[KitchenID]'" " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InFromClause_WithBooleanItems,The length of the statement  "          + "CROSS APPLY (SELECT TOP (10) [t2].[IsFullTimeCook] AS [value] FROM [CookTable] AS [t2] WHERE ([t1].[ID] = [t2].[AssistedID])) AS [q0] " " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InFromClause_WithConversion,The length of the statement  "          + "SELECT TOP (10) [t2].[ID]'[t2].[FirstName]'[t2].[Name]'[t2].[IsStarredCook]'[t2].[IsFullTimeCook]'[t2].[SubstitutedID]'[t2].[KitchenID]'" " is 140.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InFromClause_WithConversion,The length of the statement  "          + "[t2].[KnifeID]'[t2].[KnifeClassID]'[t2].[CookRating] FROM [CookTable] AS [t2] WHERE ([t1].[ID] = [t2].[AssistedID])) AS [q0] " " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,ConstantReferenceToOtherQuery,The length of the statement  "      // Handle this as if someone had written: from k in Kitchens where (from c in Cooks select c).Contains (k.Cook) select k.ID; " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,Equals_WithBinaryRightSide,The length of the statement  "          "SELECT [t0].[FirstName] AS [value] FROM [CookTable] AS [t0] WHERE ([t0].[IsStarredCook] = CASE WHEN ([t0].[FirstName] = @1) THEN 1 ELSE 0 END)"' " is 145.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,AndAlso_OrElse,The length of the statement  "          from c in Cooks where (c.Name == "Huber" && c.FirstName == "Sepp") || (c.Name == "Scott" && c.FirstName == "John") select c.FirstName' " is 134.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,AndAlso_OrElse,The length of the statement  "          "SELECT [t0].[FirstName] AS [value] FROM [CookTable] AS [t0] WHERE ((([t0].[Name] = @1) AND ([t0].[FirstName] = @2)) OR (([t0].[Name] = @3) AND ([t0].[FirstName] = @4)))"' " is 171.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,AndAlso_OrElse_WithTrueFalse,The length of the statement  "          "SELECT [t0].[FirstName] AS [value] FROM [CookTable] AS [t0] WHERE ((([t0].[Name] = @1) AND (@2 = 1)) OR ((@3 = 1) AND ([t0].[Name] = @4)))"' " is 141.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,BitwiseOperators_OnBooleanOperands,The length of the statement  "          "SELECT [t0].[ID] AS [value] FROM [CookTable] AS [t0] WHERE (([t0].[IsFullTimeCook] = 1) AND ([t0].[IsStarredCook] = 1))"' " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,BitwiseOperators_OnBooleanOperands,The length of the statement  "          "SELECT [t0].[ID] AS [value] FROM [CookTable] AS [t0] WHERE (([t0].[IsFullTimeCook] = 1) OR ([t0].[IsStarredCook] = 1))"' " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,BitwiseOperators_OnBooleanOperands,The length of the statement  "          + "WHERE (((([t0].[IsFullTimeCook] = 1) AND NOT ([t0].[IsStarredCook] = 1)) OR (NOT ([t0].[IsFullTimeCook] = 1) AND ([t0].[IsStarredCook] = 1))))"' " is 147.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,Equals_EntityComparisonWithNull,The length of the statement  "          "SELECT [t0].[Name] AS [value] FROM [KitchenTable] AS [t0] LEFT OUTER JOIN [CookTable] AS [t1] ON ([t0].[ID] = [t1].[KitchenID]) " " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,Equals_EntityComparison_WithCast,The length of the statement  "      var convertCheckedExpression = Expression.ConvertChecked (Expression.Property (kitchenParameter' "Cook")' typeof (Chef)); " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,Equals_EntityComparison_WithSubQuery,The length of the statement  "          "SELECT [t0].[ID] AS [value] FROM [CookTable] AS [t0] WHERE ([t0].[ID] = (SELECT TOP (1) [t2].[ID] FROM [KitchenTable] AS [t1] " " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,CompoundValuesComparison_Equal_OnTopLevel,The length of the statement  "          from c in Cooks where new { X = c.Name' Y = c.IsFullTimeCook } == new { X = c.FirstName' Y = c.IsStarredCook } select c.Name' " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,CompoundValuesComparison_Equal_OnTopLevel,The length of the statement  "          "SELECT [t0].[Name] AS [value] FROM [CookTable] AS [t0] WHERE (([t0].[Name] = [t0].[FirstName]) AND ([t0].[IsFullTimeCook] = " " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,CompoundValuesComparison_NotEqual_OnTopLevel,The length of the statement  "          from c in Cooks where new { X = c.Name' Y = c.IsFullTimeCook } != new { X = c.FirstName' Y = c.IsStarredCook } select c.Name' " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,CompoundValuesComparison_NotEqual_OnTopLevel,The length of the statement  "          "SELECT [t0].[Name] AS [value] FROM [CookTable] AS [t0] WHERE (([t0].[Name] <> [t0].[FirstName]) OR ([t0].[IsFullTimeCook] <> " " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,UnaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\UnaryExpressionSqlBackendIntegrationTest.cs,UnaryConvert,The length of the statement  "          "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'" " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,MemberChainingSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MemberChainingSqlBackendIntegrationTest.cs,SimpleSqlQuery_EntityPropertySelect,The length of the statement  "          "SELECT [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'[t1].[IsFullTimeCook]'[t1].[SubstitutedID]'[t1].[KitchenID]'" " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,MemberChainingSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MemberChainingSqlBackendIntegrationTest.cs,SimpleSqlQuery_ChainedPropertySelect_EndingWithSimpleProperty,The length of the statement  "          "SELECT [t1].[FirstName] AS [value] FROM [KitchenTable] AS [t0] LEFT OUTER JOIN [CookTable] AS [t1] ON ([t0].[ID] = [t1].[KitchenID])"); " is 136.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,MemberChainingSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MemberChainingSqlBackendIntegrationTest.cs,SelectQuery_ChainedPropertySelect_WithSameType,The length of the statement  "          "SELECT [t1].[FirstName] AS [value] FROM [CookTable] AS [t0] LEFT OUTER JOIN [CookTable] AS [t1] ON ([t0].[ID] = [t1].[SubstitutedID])"); " is 137.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,MemberChainingSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MemberChainingSqlBackendIntegrationTest.cs,SimpleSqlQuery_ChainedPropertySelect_EndingWithEntityProperty,The length of the statement  "          "SELECT [t3].[ID]'[t3].[FirstName]'[t3].[Name]'[t3].[IsStarredCook]'[t3].[IsFullTimeCook]'[t3].[SubstitutedID]'[t3].[KitchenID]'" " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,MemberChainingSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MemberChainingSqlBackendIntegrationTest.cs,ChainedPropertySelectAndWhere_PartialPathTwice,The length of the statement  "          from k in Kitchens where k.Restaurant.SubKitchen.Restaurant.CompanyIfAny == null select k.Restaurant.SubKitchen.Cook.ID' " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,MemberChainingSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MemberChainingSqlBackendIntegrationTest.cs,ChainedPropertySelectAndWhere_PartialPathTwice,The length of the statement  "          + "FROM [KitchenTable] AS [t0] LEFT OUTER JOIN [RestaurantTable] AS [t1] ON ([t0].[RestaurantID] = [t1].[ID]) LEFT OUTER JOIN "  " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,MemberChainingSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MemberChainingSqlBackendIntegrationTest.cs,ChainedPropertySelectAndWhere_PartialPathTwice,The length of the statement  "          + "[KitchenTable] AS [t2] ON ([t1].[ID] = [t2].[RestaurantID]) LEFT OUTER JOIN [CookTable] AS [t3] ON ([t2].[ID] = [t3].[KitchenID]) "  " is 134.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,MemberChainingSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MemberChainingSqlBackendIntegrationTest.cs,MemberAccess_OnSubQuery_WithEntities,The length of the statement  "        "LEFT OUTER JOIN [CookTable] AS [t2] ON ([t1].[ID] = [t2].[SubstitutedID]) WHERE ([t0].[ID] = [t1].[AssistedID])) AS [q3]"); " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,MemberChainingSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MemberChainingSqlBackendIntegrationTest.cs,MemberAccess_OnCoalesce_WithEntities_InSubQuery,The length of the statement  "        "LEFT OUTER JOIN [CookTable] AS [t2] ON ([t1].[ID] = [t2].[SubstitutedID]) WHERE ([t0].[ID] = [t1].[AssistedID])) AS [q3]"); " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,MemberChainingSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MemberChainingSqlBackendIntegrationTest.cs,MemberAccess_OnCoealesce_WithEntities_InSubQuery_InWhereClause,The length of the statement  "      var query = Cooks.Where (c => (from a in c.Assistants select a.Substitution ?? a).First ().Name == "Hugo").Select (c => c.Name); " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,MemberChainingSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MemberChainingSqlBackendIntegrationTest.cs,MemberAccess_OnCoealesce_WithEntities_InSubQuery_InWhereClause,The length of the statement  "        + "LEFT OUTER JOIN [CookTable] AS [t2] ON ([t1].[ID] = [t2].[SubstitutedID]) WHERE ([t0].[ID] = [t1].[AssistedID])) = @1)"' " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,MemberChainingSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MemberChainingSqlBackendIntegrationTest.cs,MemberAccess_OnCoalesce_WithColumns,The length of the statement  "        "SELECT CASE WHEN ([t0].[FirstName] IS NOT NULL) THEN (LEN(([t0].[FirstName] + '#')) - 1) ELSE (LEN(([t0].[Name] + '#')) - 1) END AS [value] " " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,MemberChainingSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MemberChainingSqlBackendIntegrationTest.cs,MemberAccess_OnConditional_WithColumns,The length of the statement  "        "SELECT CASE WHEN ([t0].[IsStarredCook] = 1) THEN (LEN(([t0].[Name] + '#')) - 1) ELSE (LEN(([t0].[SpecificInformation] + '#')) - 1) END AS [value] "+ " is 149.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,MemberChainingSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MemberChainingSqlBackendIntegrationTest.cs,MemberAccess_OnNamedItem,The length of the statement  "      // Didn't find a way to get a NamedExpression to stand within a MemberExpression' so we'll use a transformer that injects a NamedExpression. " is 140.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,MemberChainingSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MemberChainingSqlBackendIntegrationTest.cs,EntityComparison_WithOptimizableImplicitJoin,The length of the statement  "          "SELECT [t1].[Name] AS [value] FROM [CookTable] AS [t0] CROSS JOIN [KitchenTable] AS [t1] WHERE ([t0].[KitchenID] = [t1].[ID])" " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,MemberChainingSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MemberChainingSqlBackendIntegrationTest.cs,EntityComparison_WithOptimizableImplicitJoin_BidirectionalRelationDetection,The length of the statement  "          "SELECT [t1].[Name] AS [value] FROM [CookTable] AS [t0] CROSS JOIN [KitchenTable] AS [t1] WHERE ([t1].[ID] = [t0].[KitchenID])" " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,Entity,The length of the statement  "          "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'" " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,NestedSelectProjection,The length of the statement  "            row => (object) new { A = row.GetValue<string> (new ColumnID ("A"' 0))' B = row.GetValue<int> (new ColumnID ("B"' 1)) }); " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,NestedSubSelectProjection_Member_Tuple,The length of the statement  "          from c in (from sc in Cooks select new Tuple<string' int> (sc.Name' sc.ID)).Distinct () where c.Item2 != 0 select c.Item1' " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,NestedSubSelectProjection_Member_Tuple,The length of the statement  "          from c in (from sc in Cooks select new KeyValuePair<string' int>(sc.Name' sc.ID)).Distinct () where c.Value != 0 select c.Key' " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,NestedSelectProjection_CompoundWithoutMemberAccess,The length of the statement  "          from x in (from y in (from c in Cooks select new { A = c.FirstName' B = c.ID }).Distinct() select y).Distinct() select x.A' " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,NestedSelectProjection_CompoundWithoutMemberAccess,The length of the statement  "          from x in (from y in (from c in Cooks select new { A = c.FirstName' B = c.ID }).Distinct () select y).Distinct () select x' " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,NestedSelectProjection_CompoundWithoutMemberAccess,The length of the statement  "          row => (object) new { A = row.GetValue<string> (new ColumnID ("A"' 0))' B = row.GetValue<int> (new ColumnID ("B"' 1)) }); " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,NestedSelectProjection_NoMembersNames,The length of the statement  "        row => (object) new TypeForNewExpression (row.GetValue<int> (new ColumnID ("m0"' 0))' row.GetValue<int> (new ColumnID ("m1"' 1)))); " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,NestedSelectProjection_MemberAccess_ToANewExpression_WithMemberNotInitialized,The length of the statement  "      var selectClause = new SelectClause (MemberExpression.MakeMemberAccess (newExpression' typeof (TypeForNewExpression).GetField ("C"))); " is 134.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,NestedSelectProjection_WithBooleanConditions,The length of the statement  "          + "CONVERT(BIT' CASE WHEN ([t0].[FirstName] IS NOT NULL) THEN 1 ELSE 0 END) AS [HasFirstName] FROM [CookTable] AS [t0]"' " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,NestedSelectProjection_WithCastInsideNamedExpression,The length of the statement  "          row => (object) new { Name = row.GetValue<string> (new ColumnID ("Name"' 0))' ConvertedID = (double) row.GetValue<int> (new ColumnID ("ConvertedID"' 1)) }); " is 156.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,NestedSelectProjection_WithCastInsideNamedExpression,The length of the statement  "          row => (object) new { Name = row.GetValue<string> (new ColumnID ("Name"' 0))' History = row.GetValue<string> (new ColumnID ("History"' 1)) }' " is 141.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,LocallyEvaluatedMethod,The length of the statement  "          "SELECT [t0].[ID] AS [Arg0_ID]'[t0].[FirstName] AS [Arg0_FirstName]'[t0].[Name] AS [Arg0_Name]'[t0].[IsStarredCook] AS [Arg0_IsStarredCook]'" " is 141.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,LocallyEvaluatedMethod,The length of the statement  "          + "[t0].[IsFullTimeCook] AS [Arg0_IsFullTimeCook]'[t0].[SubstitutedID] AS [Arg0_SubstitutedID]'[t0].[KitchenID] AS [Arg0_KitchenID]'" " is 133.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,LocallyEvaluatedMethod,The length of the statement  "          row => (object) CustomStaticMethodWithValues (row.GetValue<int> (new ColumnID ("Arg0"' 0))' o' row.GetValue<string> (new ColumnID ("Arg2"' 2)))); " is 145.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,LocallyEvaluatedMethod_InNestedProjection,The length of the statement  "          + "[t0].[KnifeID] AS [A_Arg0_KnifeID]'[t0].[KnifeClassID] AS [A_Arg0_KnifeClassID]'[t0].[CookRating] AS [A_Arg0_CookRating]'" " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SqlBackendIntegrationTestBase,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SqlBackendIntegrationTestBase.cs,GenerateSql,The length of the statement  "      var defaultSqlPreparationStage = new DefaultSqlPreparationStage (CompoundMethodCallTransformerProvider.CreateDefault()' resultOperatorHandlerRegistry' generator); " is 162.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SqlBackendIntegrationTestBase,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SqlBackendIntegrationTestBase.cs,CheckQuery,The length of the statement  "      CheckQuery (queryable.Expression' expectedStatement' expectedInMemoryProjection' simplifyInMemoryProjection' expectedParameters); " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SqlBackendIntegrationTestBase,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SqlBackendIntegrationTestBase.cs,ReplaceConvertExpressionMarker,The length of the statement  "          return Expression.Convert (conversionMethodCall.Arguments.Single()' conversionMethodCall.Type' conversionMethodCall.Method); " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,TransformedMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\TransformedMethodCallExpressionSqlBackendIntegrationTest.cs,AttributeBasedTransformer_WithSubQuery,The length of the statement  "          "SELECT (SELECT COUNT(*) AS [value] FROM [CookTable] AS [t1] WHERE ([t0].[ID] = [t1].[AssistedID])) AS [value] FROM [CookTable] AS [t0]"); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,TransformedMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\TransformedMethodCallExpressionSqlBackendIntegrationTest.cs,AttributeBasedTransformer_WithSubQuery_OnIndexedProperty,The length of the statement  "          + "FROM (SELECT TOP (3) [t2].[ID]'[t2].[FirstName]'[t2].[Name]'[t2].[IsStarredCook]'[t2].[IsFullTimeCook]'[t2].[SubstitutedID]'[t2].[KitchenID]'" " is 145.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,TransformedMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\TransformedMethodCallExpressionSqlBackendIntegrationTest.cs,AttributeBasedTransformer_OverridesName,The length of the statement  "          "SELECT [t0].[ID] AS [value] FROM [CookTable] AS [t0] LEFT OUTER JOIN [CookTable] AS [t1] ON ([t0].[ID] = [t1].[SubstitutedID]) " " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,EqualsMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\EqualsMethodCallExpressionSqlBackendIntegrationTest.cs,Equals,The length of the statement  "        "SELECT [t0].[Name] AS [value] FROM [KitchenTable] AS [t0] LEFT OUTER JOIN [RestaurantTable] AS [t1] ON ([t0].[RestaurantID] = [t1].[ID]) " " is 139.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,EqualsMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\EqualsMethodCallExpressionSqlBackendIntegrationTest.cs,Equals,The length of the statement  "        "SELECT [t0].[Name] AS [value] FROM [CookTable] AS [t0] LEFT OUTER JOIN [CookTable] AS [t1] ON ([t0].[ID] = [t1].[SubstitutedID]) "+ " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,EqualsMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\EqualsMethodCallExpressionSqlBackendIntegrationTest.cs,Equals_WithNonMatchingTypes,The length of the statement  "        "SELECT [t0].[Name] AS [value] FROM [CookTable] AS [t0] LEFT OUTER JOIN [CookTable] AS [t1] ON ([t0].[ID] = [t1].[SubstitutedID]) WHERE ([t1].[ID] = @1)"' " is 154.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,EqualsMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\EqualsMethodCallExpressionSqlBackendIntegrationTest.cs,Equals_WithNonMatchingTypes,The length of the statement  "        "SELECT [t0].[Name] AS [value] FROM [CookTable] AS [t0] LEFT OUTER JOIN [CookTable] AS [t1] ON ([t0].[ID] = [t1].[SubstitutedID]) WHERE ([t1].[ID] = @1)"' " is 154.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,String_Length_Property,The length of the statement  "          "SELECT [t0].[ID] AS [value] FROM [CookTable] AS [t0] WHERE (([t0].[FirstName] IS NOT NULL) AND ((LEN(([t0].[FirstName] + '#')) - 1) > @1))"' " is 141.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,String_IsNullOrEmpty,The length of the statement  "          "SELECT [t0].[ID] AS [value] FROM [CookTable] AS [t0] WHERE (([t0].[FirstName] IS NULL) OR ((LEN(([t0].[FirstName] + '#')) - 1) = 0))"); " is 136.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,String_Contains_WithNonConstantValue,The length of the statement  "          @"SELECT [t0].[ID] AS [value] FROM [CookTable] AS [t0] WHERE [t0].[FirstName] LIKE (('%' + REPLACE(REPLACE(REPLACE(REPLACE([t0].[Name]' '\'' '\\')' '%'' '\%')' '_'' '\_')' '['' '\[')) + '%') ESCAPE '\'" " is 202.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,String_Concat,The length of the statement  "          "SELECT ((CONVERT(NVARCHAR(MAX)' [t0].[ID]) + CONVERT(NVARCHAR(MAX)' [t0].[ID])) + [t0].[FirstName]) AS [value] FROM [CookTable] AS [t0]" " is 137.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,String_Concat,The length of the statement  "      // The overload with (object' object' object' object' __arglist) is not supported' but this call uses the params object[] overload anyway. " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,String_Concat,The length of the statement  "          "SELECT (((CONVERT(NVARCHAR(MAX)' [t0].[ID]) + CONVERT(NVARCHAR(MAX)' [t0].[ID])) + [t0].[FirstName]) + [t0].[Name]) AS [value] FROM [CookTable] AS [t0]" " is 153.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,String_Concat,The length of the statement  "      // IEnumerable<string> overload is not tested because it's not possible to call it using a constant or NewArray expression. " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,StartsWith_WithNonConstantValue,The length of the statement  "          @"SELECT [t0].[ID] AS [value] FROM [CookTable] AS [t0] WHERE [t0].[FirstName] LIKE (REPLACE(REPLACE(REPLACE(REPLACE([t0].[Name]' '\'' '\\')' '%'' '\%')' '_'' '\_')' '['' '\[') + '%') ESCAPE '\'" " is 194.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,EndsWith_WithNonConstantValue,The length of the statement  "          @"SELECT [t0].[ID] AS [value] FROM [CookTable] AS [t0] WHERE [t0].[FirstName] LIKE ('%' + REPLACE(REPLACE(REPLACE(REPLACE([t0].[Name]' '\'' '\\')' '%'' '\%')' '_'' '\_')' '['' '\[')) ESCAPE '\'" " is 194.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,Remove,The length of the statement  "          "SELECT STUFF([t0].[FirstName]' (@1 + 1)' (LEN(([t0].[FirstName] + '#')) - 1)' '') AS [value] FROM [CookTable] AS [t0]"' " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,Substring,The length of the statement  "          "SELECT SUBSTRING([t0].[FirstName]' (@1 + 1)' (LEN(([t0].[FirstName] + '#')) - 1)) AS [value] FROM [CookTable] AS [t0]"' " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,IndexOf,The length of the statement  "          "SELECT CASE WHEN ((LEN((@1 + '#')) - 1) = 0) THEN 0 ELSE (CHARINDEX(@1' [t0].[FirstName]) - 1) END AS [value] FROM [CookTable] AS [t0]"' " is 137.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,IndexOf,The length of the statement  "          "SELECT CASE WHEN ((LEN((@1 + '#')) - 1) = 0) THEN 0 ELSE (CHARINDEX(@1' [t0].[FirstName]) - 1) END AS [value] FROM [CookTable] AS [t0]"' " is 137.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,IndexOf,The length of the statement  "          "SELECT CASE WHEN (((LEN((@1 + '#')) - 1) = 0) AND ((@2 + 1) <= (LEN(([t0].[FirstName] + '#')) - 1))) THEN @2 ELSE (CHARINDEX(@1' [t0].[FirstName]' (@2 + 1)) - 1) END AS [value] " " is 179.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,IndexOf,The length of the statement  "          "SELECT CASE WHEN (((LEN((@1 + '#')) - 1) = 0) AND ((@2 + 1) <= (LEN(([t0].[FirstName] + '#')) - 1))) THEN @2 ELSE (CHARINDEX(@1' [t0].[FirstName]' (@2 + 1)) - 1) END AS [value] " " is 179.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,IndexOf,The length of the statement  "          + "ELSE (CHARINDEX(@1' SUBSTRING([t0].[FirstName]' 1' (@2 + @3))' (@2 + 1)) - 1) END AS [value] FROM [CookTable] AS [t0]"' " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,IndexOf,The length of the statement  "          + "ELSE (CHARINDEX(@1' SUBSTRING([t0].[FirstName]' 1' (@2 + @3))' (@2 + 1)) - 1) END AS [value] FROM [CookTable] AS [t0]"' " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SetResultOperatorsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SetResultOperatorsSqlBackendIntegrationTest.cs,Union_OnTopLevel,The length of the statement  "          () => Cooks.Where (c => c.FirstName == "Hugo").Select (c => c.ID).Union (Cooks.Where (c => c.Name == "Boss").Select (c => c.ID))' " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SetResultOperatorsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SetResultOperatorsSqlBackendIntegrationTest.cs,Concat_OnTopLevel,The length of the statement  "          () => Cooks.Where (c => c.FirstName == "Hugo").Select (c => c.ID).Concat (Cooks.Where (c => c.Name == "Boss").Select (c => c.ID))' " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SetResultOperatorsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SetResultOperatorsSqlBackendIntegrationTest.cs,SetOperation_WithDifferentTypes,The length of the statement  "          () => Cooks.Where(c => c.FirstName == "Hugo").Select(c => c.ID).Union (Chefs.Where (c => c.Name == "Boss").Select(c => c.ID))' " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SetResultOperatorsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SetResultOperatorsSqlBackendIntegrationTest.cs,SetOperation_WithDifferentTypes,The length of the statement  "          () => Cooks.Where(c => c.FirstName == "Hugo").Select(c => c.ID).Union (Kitchens.Where (c => c.Name == "Nino's Kitchen").Select(c => c.ID))' " is 139.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SetResultOperatorsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SetResultOperatorsSqlBackendIntegrationTest.cs,SetOperation_CausesOrderByWithTakeToWork,The length of the statement  "          + "UNION (SELECT TOP (2) [t2].[ID] AS [value] FROM [CookTable] AS [t2] WHERE ([t2].[Name] = @2) ORDER BY [t2].[ID] ASC)" " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SetResultOperatorsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SetResultOperatorsSqlBackendIntegrationTest.cs,SetOperation_WithDifferentColumnLists,The length of the statement  "          "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'" " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SetResultOperatorsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SetResultOperatorsSqlBackendIntegrationTest.cs,SetOperation_WithDifferentColumnLists,The length of the statement  "          + "UNION (SELECT [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'[t1].[IsFullTimeCook]'[t1].[SubstitutedID]'[t1].[KitchenID]'" " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SetResultOperatorsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SetResultOperatorsSqlBackendIntegrationTest.cs,SetOperation_WithDifferentInMemoryProjections,The length of the statement  "          "SELECT [t0].[Name] AS [Arg0] FROM [CookTable] AS [t0] UNION (SELECT [t1].[Name] AS [value] FROM [KitchenTable] AS [t1])"); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SetResultOperatorsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SetResultOperatorsSqlBackendIntegrationTest.cs,SetOperation_WithSubsequentInMemoryProjection,The length of the statement  "          + "SELECT [t1].[Name] AS [value] FROM [CookTable] AS [t1] UNION (SELECT [t2].[Name] AS [value] FROM [KitchenTable] AS [t2])" " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SetResultOperatorsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SetResultOperatorsSqlBackendIntegrationTest.cs,SetOperation_InSubQuery,The length of the statement  "                from x in (Cooks.Where(c => c.FirstName == "Hugo").Select(c => c.ID).Union (Cooks.Where (c => c.Name == "Boss").Select(c => c.ID))) " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SetResultOperatorsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SetResultOperatorsSqlBackendIntegrationTest.cs,SetOperation_InSubQuery,The length of the statement  "                from x in (Cooks.Where(c => c.FirstName == "Hugo").Select(c => c.ID).Concat (Cooks.Where (c => c.Name == "Boss").Select(c => c.ID))) " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ContainsResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ContainsResultOperatorSqlBackendIntegrationTest.cs,Contains_WithDerivedType,The length of the statement  "          + "FROM [CookTable] AS [t0] WHERE @1 IN (SELECT [t1].[ID] FROM [CookTable] AS [t1] WHERE ([t0].[ID] = [t1].[AssistedID]))"' " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ContainsResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ContainsResultOperatorSqlBackendIntegrationTest.cs,Contains_WithConstantAndDependentQuery,The length of the statement  "          +"FROM [CookTable] AS [t0] WHERE @1 IN (SELECT [t1].[ID] FROM [CookTable] AS [t1] WHERE ([t0].[ID] = [t1].[AssistedID]))"' " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,AnyResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\AnyResultOperatorSqlBackendIntegrationTest.cs,Any_InSubquery,The length of the statement  "          "SELECT [t0].[FirstName] AS [value] FROM [CookTable] AS [t0] WHERE EXISTS((SELECT [t1].[ID] FROM [CookTable] AS [t1]))"); " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,CastResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\CastResultOperatorSqlBackendIntegrationTest.cs,Cast_TopLevel_OnEntity,The length of the statement  "          "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'" " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SkipResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SkipResultOperatorSqlBackendIntegrationTest.cs,Skip_WithColumn,The length of the statement  "          "SELECT [q0].[Key] AS [value] FROM (SELECT [t1].[FirstName] AS [Key]'ROW_NUMBER() OVER (ORDER BY [t1].[Name] ASC) AS [Value] " + " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SkipResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SkipResultOperatorSqlBackendIntegrationTest.cs,Skip_WithColumn_WithoutExplicitOrdering,The length of the statement  "          "SELECT [q0].[Key] AS [value] FROM (SELECT [t1].[FirstName] AS [Key]'ROW_NUMBER() OVER (ORDER BY (SELECT @1) ASC) AS [Value] " + " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,AverageResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\AverageResultOperatorSqlBackendIntegrationTest.cs,Average_InSubquery,The length of the statement  "          "SELECT [t0].[Name] AS [value] FROM [CookTable] AS [t0] WHERE ((SELECT AVG([t1].[Weight]) AS [value] FROM [CookTable] AS [t1]) > @1)"' " is 134.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SumResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SumResultOperatorSqlBackendIntegrationTest.cs,Sum_InSubquery,The length of the statement  "          "SELECT [t0].[Name] AS [value] FROM [CookTable] AS [t0] WHERE ((SELECT SUM([t1].[ID]) AS [value] FROM [CookTable] AS [t1]) > @1)"' " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,MinResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\MinResultOperatorSqlBackendIntegrationTest.cs,Min_InSubquery,The length of the statement  "          "SELECT [t0].[Name] AS [value] FROM [CookTable] AS [t0] WHERE ((SELECT MIN([t1].[ID]) AS [value] FROM [CookTable] AS [t1]) > @1)"' " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,MaxResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\MaxResultOperatorSqlBackendIntegrationTest.cs,Max_InSubquery,The length of the statement  "          "SELECT [t0].[Name] AS [value] FROM [CookTable] AS [t0] WHERE ((SELECT MAX([t1].[ID]) AS [value] FROM [CookTable] AS [t1]) > @1)"' " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,OfTypeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\OfTypeResultOperatorSqlBackendIntegrationTest.cs,OfType,The length of the statement  "          "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'" " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,OfTypeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\OfTypeResultOperatorSqlBackendIntegrationTest.cs,OfType,The length of the statement  "          "[t0].[KitchenID]'[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating]'[t0].[LetterOfRecommendation] FROM [dbo].[ChefTable] AS [t0] WHERE (@1 = 1)"' " is 148.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,OfTypeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\OfTypeResultOperatorSqlBackendIntegrationTest.cs,OfType,The length of the statement  "          "[t0].[KitchenID]'[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating]'[t0].[LetterOfRecommendation] FROM [dbo].[ChefTable] AS [t0] WHERE (@1 = 1)"' " is 148.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,TakeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\TakeResultOperatorSqlBackendIntegrationTest.cs,TakeWithSubQuery,The length of the statement  "          "SELECT TOP ((SELECT COUNT(*) AS [value] FROM [KitchenTable] AS [t1])) [t0].[FirstName] AS [value] FROM [CookTable] AS [t0]"' " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SingleResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SingleResultOperatorSqlBackendIntegrationTest.cs,Single_WithEntityExpression_RMLNQSQL_133,The length of the statement  "          "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating] " " is 182.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SingleResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SingleResultOperatorSqlBackendIntegrationTest.cs,Single_WithEntityExpression_RMLNQSQL_133,The length of the statement  "          + "WHERE ((SELECT TOP (2) [t1].[CookRating] AS [value] FROM [CookTable] AS [t1] WHERE ([t0].[ID] = [t1].[AssistedID])) = @1)"' " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SingleResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SingleResultOperatorSqlBackendIntegrationTest.cs,Single_WithEntityExpression_RMLNQSQL_133,The length of the statement  "          "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating] " " is 182.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SingleResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SingleResultOperatorSqlBackendIntegrationTest.cs,Single_WithEntityExpression_RMLNQSQL_133,The length of the statement  "          + "WHERE ((SELECT TOP (2) [t1].[CookRating] AS [value] FROM [CookTable] AS [t1] WHERE ([t0].[ID] = [t1].[AssistedID])) = @1)"' " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,FirstResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\FirstResultOperatorSqlBackendIntegrationTest.cs,First_WithEntityExpression_RMLNQSQL_133,The length of the statement  "          "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating] " " is 182.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,FirstResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\FirstResultOperatorSqlBackendIntegrationTest.cs,First_WithEntityExpression_RMLNQSQL_133,The length of the statement  "          + "WHERE ((SELECT TOP (1) [t1].[CookRating] AS [value] FROM [CookTable] AS [t1] WHERE ([t0].[ID] = [t1].[AssistedID])) = @1)"' " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,FirstResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\FirstResultOperatorSqlBackendIntegrationTest.cs,First_WithEntityExpression_RMLNQSQL_133,The length of the statement  "          "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating] " " is 182.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,FirstResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\FirstResultOperatorSqlBackendIntegrationTest.cs,First_WithEntityExpression_RMLNQSQL_133,The length of the statement  "          + "WHERE ((SELECT TOP (1) [t1].[CookRating] AS [value] FROM [CookTable] AS [t1] WHERE ([t0].[ID] = [t1].[AssistedID])) = @1)"' " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_SelectAndCheckEntityKey,The length of the statement  "              + "GROUP BY [t2].[ID]'[t2].[FirstName]'[t2].[Name]'[t2].[IsStarredCook]'[t2].[IsFullTimeCook]'[t2].[SubstitutedID]'[t2].[KitchenID]'" " is 133.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_SelectKey_Nesting,The length of the statement  "            + "[q0].[key] AS [Cooks_key] FROM (SELECT [t3].[Name] AS [key] FROM [CookTable] AS [t3] WHERE ([t2].[ID] = [t3].[RestaurantID]) " " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_SelectKeyAndAggregate,The length of the statement  "          from c in Cooks group c.ID by c.Name into cooksByName select new { Name = cooksByName.Key' Count = cooksByName.Count() }'  " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_SubqueryUsedAsGroupByKey,The length of the statement  "            + "CROSS APPLY (SELECT TOP (1) [t3].[Name] AS [value] FROM [KitchenTable] AS [t3] WHERE ([t3].[ID] IS NOT NULL)) AS [t0] " " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_WithConstantKey_GetsReplacedBySubquery,The length of the statement  "          + "SELECT [t0].[value] AS [key] FROM [CookTable] AS [t2] CROSS APPLY (SELECT @1 AS [value]) AS [t0] GROUP BY [t0].[value]" " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_AfterTake,The length of the statement  "          + "FROM (SELECT TOP (10) [t2].[ID]'[t2].[FirstName]'[t2].[Name]'[t2].[IsStarredCook]'[t2].[IsFullTimeCook]'[t2].[SubstitutedID]'" " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_AfterDistinct,The length of the statement  "          + "FROM (SELECT DISTINCT [t2].[ID]'[t2].[FirstName]'[t2].[Name]'[t2].[IsStarredCook]'[t2].[IsFullTimeCook]'[t2].[SubstitutedID]'" " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_AfterGroupBy,The length of the statement  "          + "SELECT [t2].[ID] AS [key_ID]'[t2].[FirstName] AS [key_FirstName]'[t2].[Name] AS [key_Name]'[t2].[IsStarredCook] AS [key_IsStarredCook]'" " is 139.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_AfterGroupBy,The length of the statement  "          + "[t2].[IsFullTimeCook] AS [key_IsFullTimeCook]'[t2].[SubstitutedID] AS [key_SubstitutedID]'[t2].[KitchenID] AS [key_KitchenID]'" " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_AfterGroupBy,The length of the statement  "          + "GROUP BY [t2].[ID]'[t2].[FirstName]'[t2].[Name]'[t2].[IsStarredCook]'[t2].[IsFullTimeCook]'[t2].[SubstitutedID]'[t2].[KitchenID]'" " is 133.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,DistinctAndSkip,The length of the statement  "          "SELECT [q0].[Key] AS [value] FROM (SELECT [q0].[value] AS [Key]'ROW_NUMBER() OVER (ORDER BY (SELECT @1) ASC) AS [Value] FROM (SELECT DISTINCT [t1].[FirstName] AS [value] FROM [CookTable] AS [t1]) AS [q0]) AS [q0] WHERE ([q0].[Value] > @2) ORDER BY [q0].[Value] ASC"); " is 268.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,DistinctAndSkipAndTake,The length of the statement  "          "SELECT [q0].[Key] AS [value] FROM (SELECT [q0].[value] AS [Key]'ROW_NUMBER() OVER (ORDER BY (SELECT @1) ASC) AS [Value] FROM (SELECT DISTINCT [t1].[FirstName] AS [value] FROM [CookTable] AS [t1]) AS [q0]) AS [q0] WHERE (([q0].[Value] > @2) AND ([q0].[Value] <= (@2 + @3))) ORDER BY [q0].[Value] ASC"); " is 302.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAndDistinct,The length of the statement  "          "SELECT DISTINCT [q0].[value] AS [value] FROM (SELECT TOP (5) [t1].[FirstName] AS [value] FROM [CookTable] AS [t1]) AS [q0]"); " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAndTake,The length of the statement  "          "SELECT TOP (3) [q0].[value] AS [value] FROM (SELECT TOP (5) [t1].[FirstName] AS [value] FROM [CookTable] AS [t1]) AS [q0]"); " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAndTake,The length of the statement  "          "SELECT TOP (5) [q0].[value] AS [value] FROM (SELECT TOP (3) [t1].[FirstName] AS [value] FROM [CookTable] AS [t1]) AS [q0]"); " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAndFirst_TakeAndSingle,The length of the statement  "          "SELECT TOP (1) [q0].[value] AS [value] FROM (SELECT TOP (5) [t1].[FirstName] AS [value] FROM [CookTable] AS [t1]) AS [q0]"); " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAndFirst_TakeAndSingle,The length of the statement  "          "SELECT TOP (2) [q0].[value] AS [value] FROM (SELECT TOP (5) [t1].[FirstName] AS [value] FROM [CookTable] AS [t1]) AS [q0]"); " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAndFirst_TakeAndSingle_WithPredicate,The length of the statement  "          "SELECT TOP (1) [q0].[value] AS [value] FROM (SELECT TOP (5) [t1].[FirstName] AS [value] FROM [CookTable] AS [t1]) AS [q0] WHERE ([q0].[value] IS NOT NULL)"); " is 158.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAndFirst_TakeAndSingle_WithPredicate,The length of the statement  "          "SELECT TOP (2) [q0].[value] AS [value] FROM (SELECT TOP (5) [t1].[FirstName] AS [value] FROM [CookTable] AS [t1]) AS [q0] WHERE ([q0].[value] IS NOT NULL)"); " is 158.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAndTakeAndTake,The length of the statement  "          "SELECT TOP (7) [q1].[value] AS [value] FROM (SELECT TOP (3) [q0].[value] AS [value] FROM (SELECT TOP (5) [t2].[FirstName] AS [value] "+ " is 136.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAndContains,The length of the statement  "          "SELECT CONVERT(BIT' CASE WHEN @1 IN (SELECT TOP (1) [t0].[ID] FROM [CookTable] AS [t0]) THEN 1 ELSE 0 END) AS [value]"' " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAndCast,The length of the statement  "          "SELECT TOP (1) [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'" " is 137.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAndOfType,The length of the statement  "          "SELECT TOP (1) [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'" " is 137.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,All_AfterResultOperatorInducedSubquery,The length of the statement  "          "SELECT CONVERT(BIT' CASE WHEN NOT EXISTS((SELECT TOP (20) [q0].[value] FROM (SELECT TOP (10) [t1].[FirstName] AS [value] "+ " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAfterSkip,The length of the statement  "          "SELECT [q0].[Key] AS [value] FROM (SELECT [t1].[FirstName] AS [Key]'ROW_NUMBER() OVER (ORDER BY [t1].[Name] ASC) AS [Value] " + " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAfterSkip,The length of the statement  "          "FROM [CookTable] AS [t1]) AS [q0] WHERE (([q0].[Value] > @1) AND ([q0].[Value] <= (@1 + @2))) ORDER BY [q0].[Value] ASC"' " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,SingleAfterSkip,The length of the statement  "          "SELECT [q0].[Key] AS [value] FROM (SELECT [t1].[FirstName] AS [Key]'ROW_NUMBER() OVER (ORDER BY [t1].[Name] ASC) AS [Value] " + " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,SingleAfterSkip,The length of the statement  "          "FROM [CookTable] AS [t1]) AS [q0] WHERE (([q0].[Value] > @1) AND ([q0].[Value] <= (@1 + 2))) ORDER BY [q0].[Value] ASC"' " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,FirstAfterSkip,The length of the statement  "          "SELECT [q0].[Key] AS [value] FROM (SELECT [t1].[FirstName] AS [Key]'ROW_NUMBER() OVER (ORDER BY [t1].[Name] ASC) AS [Value] " + " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,FirstAfterSkip,The length of the statement  "          "FROM [CookTable] AS [t1]) AS [q0] WHERE (([q0].[Value] > @1) AND ([q0].[Value] <= (@1 + 1))) ORDER BY [q0].[Value] ASC"' " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,SkipTakeSkip,The length of the statement  "          "WHERE (([q0].[Value] > @1) AND ([q0].[Value] <= (@1 + @2)))) AS [q1] WHERE ([q1].[Value] > @3) ORDER BY [q1].[Value] ASC"' " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,SkipAfterSkip,The length of the statement  "          "ROW_NUMBER() OVER (ORDER BY [t2].[Name] ASC) AS [Value] FROM [CookTable] AS [t2]) AS [q0] WHERE ([q0].[Value] > @1)) AS [q1] "+ " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,AnyAfterGroupBy,The length of the statement  "            + "SELECT [q0].[key] AS [key] FROM (SELECT [t1].[FirstName] AS [key] FROM [CookTable] AS [t1] GROUP BY [t1].[FirstName]) AS [q0] " " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,AllAfterGroupBy,The length of the statement  "           + "SELECT [q0].[key] AS [key] FROM (SELECT [t1].[FirstName] AS [key] FROM [CookTable] AS [t1] GROUP BY [t1].[FirstName]) AS [q0] " " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,ResultOperatorAfterSetOperation_CausesSubQuery,The length of the statement  "          () => Cooks.Select (c => c.ID).Union (Kitchens.Select (k => k.ID)).GroupBy (i => i % 3).Select (g => new { g.Key' Count = g.Count() })' " is 135.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,ResultOperatorAfterSetOperation_CausesSubQuery,The length of the statement  "          + "SELECT [q0].[ID]'[q0].[FirstName]'[q0].[Name]'[q0].[IsStarredCook]'[q0].[IsFullTimeCook]'[q0].[SubstitutedID]'[q0].[KitchenID]'" " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,ResultOperatorAfterSetOperation_CausesSubQuery,The length of the statement  "          + "SELECT [t2].[ID]'[t2].[FirstName]'[t2].[Name]'[t2].[IsStarredCook]'[t2].[IsFullTimeCook]'[t2].[SubstitutedID]'[t2].[KitchenID]'" " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,ResultOperatorAfterSetOperation_CausesSubQuery,The length of the statement  "          + "UNION (SELECT [t3].[ID]'[t3].[FirstName]'[t3].[Name]'[t3].[IsStarredCook]'[t3].[IsFullTimeCook]'[t3].[SubstitutedID]'[t3].[KitchenID]'" " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,DefaultIfEmptyResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\DefaultIfEmptyResultOperatorSqlBackendIntegrationTest.cs,DefaultIfEmpty,The length of the statement  "          "SELECT [q0].[ID]'[q0].[FirstName]'[q0].[Name]'[q0].[IsStarredCook]'[q0].[IsFullTimeCook]'[q0].[SubstitutedID]'[q0].[KitchenID]'" " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,DefaultIfEmptyResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\DefaultIfEmptyResultOperatorSqlBackendIntegrationTest.cs,DefaultIfEmpty,The length of the statement  "          + "FROM (SELECT NULL AS [Empty]) AS [Empty] OUTER APPLY (SELECT [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'" " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,DefaultIfEmptyResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\DefaultIfEmptyResultOperatorSqlBackendIntegrationTest.cs,DefaultIfEmpty_InSubquery,The length of the statement  "          "(SELECT NULL AS [Empty]) AS [Empty] OUTER APPLY (SELECT [t2].[ID] AS [value] FROM [CookTable] AS [t2]) AS [q0]) > @1)"' " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlCommandDataTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlCommandDataTest.cs,GetInMemoryProjection_ConversionRequired,The length of the statement  "      var expectedExpression = Expression.Lambda<Func<IDatabaseResultRow' object>> (Expression.Convert (body' typeof (object))' _rowParameter); " is 137.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlCompositeCustomTextGeneratorExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlCompositeCustomTextGeneratorExpressionTest.cs,SetUp,The length of the statement  "      _sqlCompositeCustomTextGeneratorExpression = new SqlCompositeCustomTextGeneratorExpression (typeof (Cook)' _expression1' _expression2); " is 135.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlCompositeCustomTextGeneratorExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlCompositeCustomTextGeneratorExpressionTest.cs,Generate,The length of the statement  "      _sqlCompositeCustomTextGeneratorExpression.Generate (commandBuilder' visitor' MockRepository.GenerateStub<ISqlGenerationStage>()); " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlCompositeCustomTextGeneratorExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlCompositeCustomTextGeneratorExpressionTest.cs,VisitChildren_ChangeExpression,The length of the statement  "      var expressions = new ReadOnlyCollection<Expression> (new List<Expression> { Expression.Constant (1)' Expression.Constant (2) }); " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlCompositeCustomTextGeneratorExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlCompositeCustomTextGeneratorExpressionTest.cs,VisitChildren_ChangeExpression,The length of the statement  "      visitorMock.Expect (mock => mock.Visit (_sqlCompositeCustomTextGeneratorExpression.Expressions[0])).Return (expressions[0]); " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlCompositeCustomTextGeneratorExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlCompositeCustomTextGeneratorExpressionTest.cs,VisitChildren_ChangeExpression,The length of the statement  "      visitorMock.Expect (mock => mock.Visit (_sqlCompositeCustomTextGeneratorExpression.Expressions[1])).Return (expressions[1]); " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlCustomTextGeneratorExpressionBaseTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlCustomTextGeneratorExpressionBaseTest.cs,Accept,The length of the statement  "      var visitorMock = mockRepository.StrictMultiMock<ExpressionVisitor> (typeof (ISqlCustomTextGeneratorExpressionVisitor)); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlCustomTextGeneratorExpressionBaseTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlCustomTextGeneratorExpressionBaseTest.cs,Accept,The length of the statement  "          .Expect (mock => ((ISqlCustomTextGeneratorExpressionVisitor)mock).VisitSqlCustomTextGenerator (customTextGeneratorExpression)) " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,SetUp,The length of the statement  "      _someSetOperationsMode = Some.Item (SetOperationsMode.StatementIsSetCombined' SetOperationsMode.StatementIsNotSetCombined); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,GenerateSql_Collection,The length of the statement  "      SqlGeneratingOuterSelectExpressionVisitor.GenerateSql (expression' _commandBuilder' _stageMock' _someSetOperationsMode); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,GenerateSql_CreatesFullInMemoryProjectionLambda,The length of the statement  "       SqlGeneratingOuterSelectExpressionVisitor.GenerateSql (_namedIntExpression' _commandBuilder' _stageMock' _someSetOperationsMode); " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitNamedExpression,The length of the statement  "      var expectedProjection = GetExpectedProjectionForNamedExpression (_commandBuilder.InMemoryProjectionRowParameter' "test"' 0' typeof (int)); " is 139.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitNamedExpression_OverridesChildProjection,The length of the statement  "      var nestedNamedExpression = new NamedExpression ("outer"' Expression.Convert (Expression.Constant (0)' typeof (double))); " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitNamedExpression_OverridesChildProjection,The length of the statement  "      var expectedProjection = GetExpectedProjectionForNamedExpression (_commandBuilder.InMemoryProjectionRowParameter' "outer"' 0' typeof (double)); " is 143.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitSqlConvertedBooleanExpression_WithAnInnerNamedExpression_EmitsBitConversion_AndUsesBoolInProjection,The length of the statement  "      var expectedProjection = GetExpectedProjectionForNamedExpression (_commandBuilder.InMemoryProjectionRowParameter' "test"' 0' typeof (bool)); " is 140.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitSqlConvertedBooleanExpression_WithAnInnerNamedExpression_ReturnsAdaptedNamedExpressionOfCorrectType,The length of the statement  "      var expectedResult = new NamedExpression (_namedIntExpression.Name' new SqlConvertExpression (typeof (bool)' _namedIntExpression.Expression)); " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitSqlConvertedBooleanExpression_WithAnInnerNamedExpression_NullableBool_EmitsBitConversion_AndUsesNullableBoolInProjection,The length of the statement  "      var expectedProjection = GetExpectedProjectionForNamedExpression (_commandBuilder.InMemoryProjectionRowParameter' "test"' 0' typeof (bool?)); " is 141.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitSqlConvertedBooleanExpression_WithAnInnerNamedExpression_OmitsSqlConversion_ForColumns,The length of the statement  "      var namedIntColumnExpression = new NamedExpression ("col"' SqlStatementModelObjectMother.CreateSqlColumn (typeof (int))); " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitSqlConvertedBooleanExpression_WithAnInnerNamedExpression_OmitsSqlConversion_ForColumns,The length of the statement  "      var expectedProjection = GetExpectedProjectionForNamedExpression (_commandBuilder.InMemoryProjectionRowParameter' "col"' 0' typeof (bool)); " is 139.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitSqlEntityExpression,The length of the statement  "      Assert.That (_commandBuilder.GetCommandText ()' Is.EqualTo ("[c].[ID] AS [test_ID]'[c].[Name] AS [test_Name]'[c].[FirstName] AS [test_FirstName]")); " is 148.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitNewExpression_WithoutMembers,The length of the statement  "      var expectedProjectionForNamedExpression = GetExpectedProjectionForNamedExpression (expectedRowParameter' "SomeName"' 0' typeof (string)); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitNewExpression_WithoutMembers,The length of the statement  "          Is.EqualTo ("[c].[Name] AS [SomeName]'[c].[ID] AS [test_ID]'[c].[Name] AS [test_Name]'[c].[FirstName] AS [test_FirstName]")); " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitNewExpression_WithoutMembers,The length of the statement  "      SqlExpressionTreeComparer.CheckAreEqualTrees (expectedProjectionForNewExpression' _commandBuilder.GetInMemoryProjectionBody ()); " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitNewExpression_WithMembers,The length of the statement  "      var expectedProjectionForNamedExpression = GetExpectedProjectionForNamedExpression (expectedRowParameter' "SomeName"' 0' typeof (string)); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitNewExpression_WithMembers,The length of the statement  "      SqlExpressionTreeComparer.CheckAreEqualTrees (expectedProjectionForNewExpression' _commandBuilder.GetInMemoryProjectionBody ()); " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitNewExpression_NoSetOperations_ConstantsAreMovedToProjection,The length of the statement  "      SqlExpressionTreeComparer.CheckAreEqualTrees (expectedProjectionForNewExpression' _commandBuilder.GetInMemoryProjectionBody()); " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitNewExpression_WithSetOperations_ConstantsAreNotMovedToProjection,The length of the statement  "      var expectedProjectionForNamedExpression = GetExpectedProjectionForNamedExpression(expectedRowParameter' "test"' 0' typeof(int)); " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitNewExpression_WithSetOperations_ConstantsAreNotMovedToProjection,The length of the statement  "      SqlExpressionTreeComparer.CheckAreEqualTrees (expectedProjectionForNewExpression' _commandBuilder.GetInMemoryProjectionBody()); " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitMethodCallExpression_NoSetOperations,The length of the statement  "      var expectedProjectionForArgumentExpression = GetExpectedProjectionForNamedExpression (expectedRowParameter' "SomeName"' 1' typeof (string)); " is 141.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitMethodCallExpression_NoSetOperations_WithoutObject,The length of the statement  "      var expectedProjectionForArgumentExpression = GetExpectedProjectionForNamedExpression (expectedRowParameter' "SomeName"' 0' typeof (string)); " is 141.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitMethodCallExpression_NoSetOperations_NoObjectsOrArguments,The length of the statement  "      var methodCallExpression = Expression.Call (MemberInfoFromExpressionUtility.GetMethod (() => StaticMethodWithoutArguments())); " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitMethodCallExpression_WithSetOperations,The length of the statement  "      var methodCallExpression = Expression.Call (MemberInfoFromExpressionUtility.GetMethod (() => StaticMethodWithoutArguments())); " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingSelectExpressionVisitorTest.cs,GenerateSql_VisitSqlEntityExpression_NamedEntity,The length of the statement  "      Assert.That (_commandBuilder.GetCommandText ()' Is.EqualTo ("[t].[ID] AS [Test_ID]'[t].[Name] AS [Test_Name]'[t].[City] AS [Test_City]")); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingSelectExpressionVisitorTest.cs,GenerateSql_VisitSqlEntityExpression_NamedEntity_ReferencingNamed,The length of the statement  "      Assert.That (_commandBuilder.GetCommandText ()' Is.EqualTo ("[c].[Cook_Name] AS [ref_Name]'[c].[Cook_City] AS [ref_City]")); " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingSelectExpressionVisitorTest.cs,VisitSqlGroupingSelectExpression_WithoutAggregationExpressions,The length of the statement  "      var groupingExpression = new SqlGroupingSelectExpression (Expression.Constant ("keyExpression")' Expression.Constant ("elementExpression")); " is 140.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingSelectExpressionVisitorTest.cs,VisitSqlGroupingSelectExpression_WithAggregationExpressions_AndNames,The length of the statement  "      var groupingExpression = SqlGroupingSelectExpression.CreateWithNames (Expression.Constant ("keyExpression")' Expression.Constant ("elementExpression")); " is 152.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,DefaultSqlGenerationStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\DefaultSqlGenerationStageTest.cs,GenerateTextForOuterSelectExpression,The length of the statement  "      stage.GenerateTextForOuterSelectExpression (_commandBuilder' _sqlStatement.SelectProjection' SetOperationsMode.StatementIsSetCombined); " is 135.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,DefaultSqlGenerationStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\DefaultSqlGenerationStageTest.cs,GenerateTextForOuterSelectExpression_PassesOnSetOperationsMode,The length of the statement  "      var projectionWithMethodCall = Expression.Call (MemberInfoFromExpressionUtility.GetMethod (() => SomeMethod (null))' _sqlStatement.SelectProjection); " is 149.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,DefaultSqlGenerationStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\DefaultSqlGenerationStageTest.cs,GenerateTextForOuterSelectExpression_PassesOnSetOperationsMode,The length of the statement  "          () => stage.GenerateTextForOuterSelectExpression (_commandBuilder' projectionWithMethodCall' SetOperationsMode.StatementIsSetCombined)' " is 135.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,DefaultSqlGenerationStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\DefaultSqlGenerationStageTest.cs,GenerateTextForOuterSelectExpression_PassesOnSetOperationsMode,The length of the statement  "          () => stage.GenerateTextForOuterSelectExpression (_commandBuilder' projectionWithMethodCall' SetOperationsMode.StatementIsNotSetCombined)' " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,DefaultSqlGenerationStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\DefaultSqlGenerationStageTest.cs,GenerateTextForTopExpression,The length of the statement  "          { DataInfo = new TestStreamedValueInfo (typeof (int))' SelectProjection = _entityExpression' TopExpression = Expression.Constant (5) }. " is 135.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,DefaultSqlGenerationStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\DefaultSqlGenerationStageTest.cs,GenerateTextForSqlStatement,The length of the statement  "          _entityExpression' new[] { new SqlTable (new ResolvedSimpleTableInfo (typeof (int)' "Table"' "t")' JoinSemantics.Inner) }); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,DefaultSqlGenerationStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\DefaultSqlGenerationStageTest.cs,GenerateTextForSqlStatement,The length of the statement  "      Assert.That (_commandBuilder.GetCommandText()' Is.EqualTo ("SELECT [t].[ID]'[t].[Name]'[t].[City] FROM [Table] AS [t]")); " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,DefaultSqlGenerationStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\DefaultSqlGenerationStageTest.cs,GenerateTextForOuterSqlStatement,The length of the statement  "          _entityExpression' new[] { new SqlTable (new ResolvedSimpleTableInfo (typeof (int)' "Table"' "t")' JoinSemantics.Inner) }); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,DefaultSqlGenerationStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\DefaultSqlGenerationStageTest.cs,GenerateTextForOuterSqlStatement,The length of the statement  "      Assert.That (_commandBuilder.GetCommandText ()' Is.EqualTo ("SELECT [t].[ID]'[t].[Name]'[t].[City] FROM [Table] AS [t]")); " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,DefaultSqlGenerationStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\DefaultSqlGenerationStageTest.cs,GenerateTextForOuterSqlStatement,The length of the statement  "      Assert.That (methodCallExpression.Method' Is.EqualTo ((typeof (IDatabaseResultRow).GetMethod ("GetEntity").MakeGenericMethod (sqlStatement.SelectProjection.Type)))); " is 165.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,DefaultSqlGenerationStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\DefaultSqlGenerationStageTest.cs,GenerateTextForOuterSqlStatement,The length of the statement  "      Assert.That (((ColumnID[]) ((ConstantExpression) methodCallExpression.Arguments[0]).Value)[0].ColumnName' Is.EqualTo ("ID")); " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,DefaultSqlGenerationStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\DefaultSqlGenerationStageTest.cs,GenerateTextForOuterSqlStatement,The length of the statement  "      Assert.That (((ColumnID[]) ((ConstantExpression) methodCallExpression.Arguments[0]).Value)[1].ColumnName' Is.EqualTo ("Name")); " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,DefaultSqlGenerationStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\DefaultSqlGenerationStageTest.cs,GenerateTextForOuterSqlStatement,The length of the statement  "      Assert.That (((ColumnID[]) ((ConstantExpression) methodCallExpression.Arguments[0]).Value)[2].ColumnName' Is.EqualTo ("City")); " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlCommandBuilderTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlCommandBuilderTest.cs,GetCommand,The length of the statement  "      var expectedInMemoryProjection = Expression.Lambda<Func<IDatabaseResultRow' int>> (body' _sqlCommandBuilder.InMemoryProjectionRowParameter); " is 140.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingExpressionVisitorTest.cs,VisitUnaryExpression_UnaryNot,The length of the statement  "      var unaryNotExpression = Expression.Not (Expression.Equal (Expression.Constant ("hugo")' Expression.Constant ("hugo"))); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingExpressionVisitorTest.cs,VisitUnaryExpression_UnaryNot_NullableBool,The length of the statement  "      var unaryNotExpression = Expression.Not (Expression.Equal (Expression.Constant (4' typeof (int?))' Expression.Constant (5' typeof (int?))' true' null)); " is 152.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingExpressionVisitorTest.cs,VisitSqlLikeExpression,The length of the statement  "      var sqlInExpression = new SqlLikeExpression (new SqlLiteralExpression (1)' new SqlLiteralExpression (2)' new SqlLiteralExpression (@"\")); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingExpressionVisitorTest.cs,VisitSqlCaseExpression_NoElse,The length of the statement  "      var case1 = new SqlCaseExpression.CaseWhenPair (new SqlCustomTextExpression ("test1"' typeof (bool))' new SqlCustomTextExpression ("value1"' typeof (int))); " is 156.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingExpressionVisitorTest.cs,VisitSqlCaseExpression_NoElse,The length of the statement  "      var case2 = new SqlCaseExpression.CaseWhenPair (new SqlCustomTextExpression ("test2"' typeof (bool))' new SqlCustomTextExpression ("value2"' typeof (int))); " is 156.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingExpressionVisitorTest.cs,VisitSqlCaseExpression_WithElse,The length of the statement  "      var case1 = new SqlCaseExpression.CaseWhenPair (new SqlCustomTextExpression ("test1"' typeof (bool))' new SqlCustomTextExpression ("value1"' typeof (int))); " is 156.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingExpressionVisitorTest.cs,VisitSqlCaseExpression_WithElse,The length of the statement  "      var case2 = new SqlCaseExpression.CaseWhenPair (new SqlCustomTextExpression ("test2"' typeof (bool))' new SqlCustomTextExpression ("value2"' typeof (int))); " is 156.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingExpressionVisitorTest.cs,VisitSqlCaseExpression_WithElse,The length of the statement  "      Assert.That (_commandBuilder.GetCommandText ()' Is.EqualTo ("CASE WHEN test1 THEN value1 WHEN test2 THEN value2 ELSE elseValue END")); " is 134.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingExpressionVisitorTest.cs,VisitSqlFunctionExpression,The length of the statement  "      var sqlFunctionExpression = new SqlFunctionExpression (typeof (int)' "LENFUNC"' new SqlLiteralExpression ("test")' new SqlLiteralExpression (1)); " is 145.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingExpressionVisitorTest.cs,VisitAggregationExpression_Max,The length of the statement  "      var columnExpression = new NamedExpression (null' new SqlColumnDefinitionExpression (typeof (string)' "c"' "Name"' false)); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingExpressionVisitorTest.cs,VisitAggregationExpression_Min,The length of the statement  "      var columnExpression = new NamedExpression (null' new SqlColumnDefinitionExpression (typeof (string)' "c"' "Name"' false)); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingExpressionVisitorTest.cs,VisitAggregationExpression_Sum,The length of the statement  "      var columnExpression = new NamedExpression (null' new SqlColumnDefinitionExpression (typeof (string)' "c"' "Name"' false)); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingExpressionVisitorTest.cs,VisitAggregationExpression_Average,The length of the statement  "      var columnExpression = new NamedExpression (null' new SqlColumnDefinitionExpression (typeof (string)' "c"' "Name"' false)); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingExpressionVisitorTest.cs,VisitSqlCollectionExpression,The length of the statement  "      var items = new Expression[] { Expression.Constant (7)' new SqlLiteralExpression ("Hello")' new SqlLiteralExpression (12) }; " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlStatementTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlStatementTextGeneratorTest.cs,BuildFromPart_WithFrom,The length of the statement  "      var sqlStatement = SqlStatementModelObjectMother.CreateMinimalSqlStatement (new SqlStatementBuilder { SqlTables = { _sqlTable } }); " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlStatementTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlStatementTextGeneratorTest.cs,BuildSelectPart_WithAggregation,The length of the statement  "      var aggregationExpression = new AggregationExpression (typeof(int)' ExpressionHelper.CreateExpression()' AggregationModifier.Count); " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlStatementTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlStatementTextGeneratorTest.cs,BuildSelectPart_WithAggregation,The length of the statement  "      var sqlStatement = SqlStatementModelObjectMother.CreateMinimalSqlStatement (new SqlStatementBuilder { SelectProjection = aggregationExpression }); " is 146.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlStatementTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlStatementTextGeneratorTest.cs,BuildSelectPart_WithDistinctIsTrue,The length of the statement  "      var sqlStatement = SqlStatementModelObjectMother.CreateMinimalSqlStatement (new SqlStatementBuilder { IsDistinctQuery = true }); " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlStatementTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlStatementTextGeneratorTest.cs,BuildSelectPart_WithTopExpression,The length of the statement  "      var sqlStatement = SqlStatementModelObjectMother.CreateMinimalSqlStatement (new SqlStatementBuilder { TopExpression = Expression.Constant (1) }); " is 145.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlStatementTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlStatementTextGeneratorTest.cs,BuildSelectPart_WithDistinctAndTopExpression,The length of the statement  "      var sqlStatement = SqlStatementModelObjectMother.CreateMinimalSqlStatement (new SqlStatementBuilder { TopExpression = Expression.Constant (5)' IsDistinctQuery = true }); " is 169.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlStatementTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlStatementTextGeneratorTest.cs,BuildWhere_WithSingleWhereCondition,The length of the statement  "      var sqlStatement = SqlStatementModelObjectMother.CreateMinimalSqlStatement (new SqlStatementBuilder { WhereCondition = Expression.Constant (true) }); " is 149.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlStatementTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlStatementTextGeneratorTest.cs,BuildOrderBy_WithSingleOrderByClause,The length of the statement  "      var sqlStatement = SqlStatementModelObjectMother.CreateMinimalSqlStatement (new SqlStatementBuilder { Orderings = { orderByClause } }); " is 135.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlStatementTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlStatementTextGeneratorTest.cs,BuildOrderBy_WithMultipleOrderByClauses,The length of the statement  "      var sqlStatement = SqlStatementModelObjectMother.CreateMinimalSqlStatement (new SqlStatementBuilder { Orderings = { orderByClause1' orderByClause2' orderByClause3 } }); " is 168.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlStatementTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlStatementTextGeneratorTest.cs,BuildOrderBy_WithMultipleOrderByClauses,The length of the statement  "      Assert.That (_commandBuilder.GetCommandText()' Is.EqualTo (" ORDER BY [t].[ID] ASC' [t].[Name] DESC' [t].[City] DESC")); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlStatementTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlStatementTextGeneratorTest.cs,BuildDistinctPart,The length of the statement  "      var sqlStatement = SqlStatementModelObjectMother.CreateMinimalSqlStatement (new SqlStatementBuilder { IsDistinctQuery = true }); " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlStatementTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlStatementTextGeneratorTest.cs,BuildTopPart,The length of the statement  "      var sqlStatement = SqlStatementModelObjectMother.CreateMinimalSqlStatement (new SqlStatementBuilder { TopExpression = topExpression }); " is 135.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlStatementTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlStatementTextGeneratorTest.cs,BuildSetOperationCombinedStatementsPart_Union,The length of the statement  "      var setOperationCombinedStatement = new SetOperationCombinedStatement(SqlStatementModelObjectMother.CreateSqlStatement()' SetOperation.Union); " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlStatementTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlStatementTextGeneratorTest.cs,BuildSetOperationCombinedStatementsPart_Union,The length of the statement  "      _stageMock.Expect (mock => mock.GenerateTextForSqlStatement (_commandBuilder' setOperationCombinedStatement.SqlStatement)) " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlStatementTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlStatementTextGeneratorTest.cs,BuildSetOperationCombinedStatementsPart_UnionAll,The length of the statement  "      var setOperationCombinedStatement = new SetOperationCombinedStatement(SqlStatementModelObjectMother.CreateSqlStatement()' SetOperation.UnionAll); " is 145.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlStatementTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlStatementTextGeneratorTest.cs,BuildSetOperationCombinedStatementsPart_UnionAll,The length of the statement  "      _stageMock.Expect (mock => mock.GenerateTextForSqlStatement (_commandBuilder' setOperationCombinedStatement.SqlStatement)) " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlStatementTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlStatementTextGeneratorTest.cs,Build_WithSelectAndFrom,The length of the statement  "      var sqlStatement = SqlStatementModelObjectMother.CreateMinimalSqlStatement(new SqlStatementBuilder { SqlTables = { _sqlTable }}); " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlStatementTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlStatementTextGeneratorTest.cs,Build_WithGroupByExpression,The length of the statement  "      var sqlStatement = SqlStatementModelObjectMother.CreateMinimalSqlStatement (new SqlStatementBuilder { SqlTables = {_sqlTable }' GroupByExpression = sqlGroupExpression }); " is 170.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlStatementTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlStatementTextGeneratorTest.cs,Build_WithGroupByExpression,The length of the statement  "      Assert.That (_commandBuilder.GetCommandText ()' Is.EqualTo ("SELECT [t].[ID]'[t].[Name]'[t].[City] FROM [Table] AS [t] GROUP BY keyExpression")); " is 145.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlStatementTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlStatementTextGeneratorTest.cs,Build_WithWhereCondition,The length of the statement  "      var sqlStatement = SqlStatementModelObjectMother.CreateMinimalSqlStatement (new SqlStatementBuilder { SqlTables = {_sqlTable }' WhereCondition = Expression.Constant(true) }); " is 174.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlStatementTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlStatementTextGeneratorTest.cs,Build_WithWhereCondition,The length of the statement  "      Assert.That (result.CommandText' Is.EqualTo ("SELECT [t].[ID]'[t].[Name]'[t].[City] FROM [Table] AS [t] WHERE (@1 = 1)")); " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlStatementTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlStatementTextGeneratorTest.cs,Build_WithOrderByClause,The length of the statement  "      var sqlStatement = SqlStatementModelObjectMother.CreateMinimalSqlStatement (new SqlStatementBuilder { SqlTables = {_sqlTable }' Orderings = { ordering } }); " is 156.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlStatementTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlStatementTextGeneratorTest.cs,Build_WithOrderByClause,The length of the statement  "      Assert.That (result.CommandText' Is.EqualTo ("SELECT [t].[ID]'[t].[Name]'[t].[City] FROM [Table] AS [t] ORDER BY [t].[Name] ASC")); " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlStatementTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlStatementTextGeneratorTest.cs,Build_WithSetOperationCombinedStatement,The length of the statement  "      _stageMock.Expect (mock => mock.GenerateTextForSqlStatement (_commandBuilder' sqlStatement.SetOperationCombinedStatements[0].SqlStatement)) " is 139.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlStatementTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlStatementTextGeneratorTest.cs,Build_WithSetOperationCombinedStatement,The length of the statement  "      Assert.That (result.CommandText' Is.EqualTo ("SELECT [t].[ID]'[t].[Name]'[t].[City] FROM [Table] AS [t] UNION (SELECT FOO FROM BAR)")); " is 135.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlTableAndJoinTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlTableAndJoinTextGeneratorTest.cs,GenerateSql_ForSeveralTables,The length of the statement  "      Assert.That (_commandBuilder.GetCommandText()' Is.EqualTo ("[Table1] AS [t1] CROSS JOIN [Table2] AS [t2] CROSS JOIN [Table3] AS [t3]")); " is 136.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlTableAndJoinTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlTableAndJoinTextGeneratorTest.cs,GenerateSql_ForJoinedTable,The length of the statement  "      var originalTable = new SqlTable (new ResolvedSimpleTableInfo (typeof (Kitchen)' "KitchenTable"' "t1")' JoinSemantics.Inner); " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlTableAndJoinTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlTableAndJoinTextGeneratorTest.cs,GenerateSql_ForJoinedTable,The length of the statement  "      var joinedTable = originalTable.GetOrAddLeftJoin (CreateResolvedJoinInfo (typeof (Cook)' "t1"' "ID"' "CookTable"' "t2"' "FK")' kitchenCookMember); " is 146.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlTableAndJoinTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlTableAndJoinTextGeneratorTest.cs,GenerateSql_ForJoinedTable,The length of the statement  "          .Expect (mock => mock.GenerateTextForJoinCondition (_commandBuilder' ((ResolvedJoinInfo) joinedTable.JoinInfo).JoinCondition)) " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlTableAndJoinTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlTableAndJoinTextGeneratorTest.cs,GenerateSql_ForJoinedTable,The length of the statement  "          _commandBuilder.GetCommandText()' Is.EqualTo ("[KitchenTable] AS [t1] LEFT OUTER JOIN [CookTable] AS [t2] ON ([t1].[ID] = [t2].[FK])")); " is 136.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlTableAndJoinTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlTableAndJoinTextGeneratorTest.cs,GenerateSql_ForJoinedTable_Recursive,The length of the statement  "      var originalTable = new SqlTable (new ResolvedSimpleTableInfo (typeof (Kitchen)' "KitchenTable"' "t1")' JoinSemantics.Inner); " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlTableAndJoinTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlTableAndJoinTextGeneratorTest.cs,GenerateSql_ForJoinedTable_Recursive,The length of the statement  "      var joinedTable1 = originalTable.GetOrAddLeftJoin (CreateResolvedJoinInfo (typeof (Cook)' "t1"' "ID"' "CookTable"' "t2"' "FK")' memberInfo1); " is 141.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlTableAndJoinTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlTableAndJoinTextGeneratorTest.cs,GenerateSql_ForJoinedTable_Recursive,The length of the statement  "      var joinedTable2 = joinedTable1.GetOrAddLeftJoin (CreateResolvedJoinInfo (typeof (Cook)' "t2"' "ID2"' "CookTable2"' "t3"' "FK2")' memberInfo2); " is 143.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlTableAndJoinTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlTableAndJoinTextGeneratorTest.cs,GenerateSql_ForJoinedTable_Recursive,The length of the statement  "          .Expect (mock => mock.GenerateTextForJoinCondition (_commandBuilder' ((ResolvedJoinInfo) joinedTable1.JoinInfo).JoinCondition)) " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlTableAndJoinTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlTableAndJoinTextGeneratorTest.cs,GenerateSql_ForJoinedTable_Recursive,The length of the statement  "          .Expect (mock => mock.GenerateTextForJoinCondition (_commandBuilder' ((ResolvedJoinInfo) joinedTable2.JoinInfo).JoinCondition)) " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlTableAndJoinTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlTableAndJoinTextGeneratorTest.cs,GenerateSql_LeftJoinSemantics_FirstTable,The length of the statement  "      Assert.That (_commandBuilder.GetCommandText ()' Is.EqualTo ("(SELECT NULL AS [Empty]) AS [Empty] OUTER APPLY [Table] AS [t]")); " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlTableAndJoinTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlTableAndJoinTextGeneratorTest.cs,GenerateSql_JoinedTable_WithLeftJoinSemantics,The length of the statement  "      var sqlTable = SqlStatementModelObjectMother.CreateSqlTable_WithResolvedTableInfo("KitchenTable"' "k"' JoinSemantics.Inner); " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlTableAndJoinTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlTableAndJoinTextGeneratorTest.cs,GenerateSql_JoinedTable_WithLeftJoinSemantics,The length of the statement  "      Assert.That (_commandBuilder.GetCommandText ()' Is.EqualTo ("[KitchenTable] AS [k] LEFT OUTER JOIN [CookTable] AS [c] ON condition")); " is 134.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlTableAndJoinTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlTableAndJoinTextGeneratorTest.cs,VisitSubStatementTableInfo,The length of the statement  "      var sqlStatement = new SqlStatementBuilder (SqlStatementModelObjectMother.CreateSqlStatement_Resolved (typeof (Cook[]))) " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlTableAndJoinTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlTableAndJoinTextGeneratorTest.cs,VisitResolvedJoinedGroupingTableInfo,The length of the statement  "      var sqlStatement = new SqlStatementBuilder (SqlStatementModelObjectMother.CreateSqlStatement_Resolved (typeof (Cook[]))) " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlTableAndJoinTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlTableAndJoinTextGeneratorTest.cs,GenerateSql_JoinedTable_WithInnerJoinSemantics,The length of the statement  "          Throws.TypeOf<InvalidOperationException>().With.Message.EqualTo ("SqlJoinedTable as TableInfo is not valid at this point.")); " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlTableAndJoinTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlTableAndJoinTextGeneratorTest.cs,GenerateSql_WithUnresolvedCollectionJoinInfo,The length of the statement  "          Throws.TypeOf<InvalidOperationException>().With.Message.EqualTo ("UnresolvedCollectionJoinInfo is not valid at this point.")); " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlTableAndJoinTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlTableAndJoinTextGeneratorTest.cs,GenerateSql_WithUnresolvedGroupReferenceTableInfo,The length of the statement  "          () => SqlTableAndJoinTextGenerator.GenerateSql (new SqlTable (tableInfo' JoinSemantics.Inner)' _commandBuilder' _stageMock' false)' " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlTableAndJoinTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlTableAndJoinTextGeneratorTest.cs,GenerateSql_WithUnresolvedGroupReferenceTableInfo,The length of the statement  "          Throws.TypeOf<InvalidOperationException>().With.Message.EqualTo ("UnresolvedGroupReferenceTableInfo is not valid at this point.")); " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ContainsFreetextMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ContainsFreetextMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "          typeof (StringExtensions).GetMethod("SqlContainsFreetext"' new[] { typeof (string)' typeof (string)' typeof (string) }))' Is.True); " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ContainsFulltextMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ContainsFulltextMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "          typeof (StringExtensions).GetMethod("SqlContainsFulltext"' new[] { typeof (string)' typeof (string)' typeof (string)}))' Is.True); " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ContainsMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ContainsMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ContainsMethodCallTransformer.SupportedMethods.Contains (typeof (string).GetMethod("Contains"' new[]{ typeof (string)}))' Is.True); " is 144.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ContainsMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ContainsMethodCallTransformerTest.cs,Transform_ArgumentIsNotNullAndIsNoConstantValue,The length of the statement  "          new SqlLiteralExpression ("%")' rightExpression' typeof (string).GetMethod ("Concat"' new[] { typeof (string)' typeof (string) })); " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ContainsMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ContainsMethodCallTransformerTest.cs,Transform_ArgumentIsNotNullAndIsNoConstantValue,The length of the statement  "          rightExpression' new SqlLiteralExpression ("%")' typeof (string).GetMethod ("Concat"' new[] { typeof (string)' typeof (string) })); " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToString"' new[] { typeof (int)}))' Is.True); " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToString"' new[] { typeof (bool)}))' Is.True); " is 143.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToString"' new[] { typeof (object)}))' Is.True); " is 145.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToString"' new[] { typeof (decimal)}))' Is.True); " is 146.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToString"' new[] { typeof (double)}))' Is.True); " is 145.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToString"' new[] { typeof (float)}))' Is.True); " is 144.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToString"' new[] { typeof (long)}))' Is.True); " is 143.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToString"' new[] { typeof (short)}))' Is.True); " is 144.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToString"' new[] { typeof (char)}))' Is.True); " is 143.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToString"' new[] { typeof (byte)}))' Is.True); " is 143.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToString"' new[] { typeof (string)}))' Is.True); " is 145.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToInt64"' new[] { typeof (string)}))' Is.True); " is 144.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToInt64"' new[] { typeof (bool)}))' Is.True); " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToInt64"' new[] { typeof (byte)}))' Is.True); " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToInt64"' new[] { typeof (char)}))' Is.True); " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToInt64"' new[] { typeof (DateTime)}))' Is.True); " is 146.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToInt64"' new[] { typeof (decimal)}))' Is.True); " is 145.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToInt64"' new[] { typeof (float)}))' Is.True); " is 143.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToInt64"' new[] { typeof (long)}))' Is.True); " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToInt64"' new[] { typeof (object)}))' Is.True); " is 144.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToInt64"' new[] { typeof (short)}))' Is.True); " is 143.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToInt32"' new[] { typeof (string)}))' Is.True); " is 144.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToInt32"' new[] { typeof (bool)}))' Is.True); " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToInt32"' new[] { typeof (byte)}))' Is.True); " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToInt32"' new[] { typeof (char)}))' Is.True); " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToInt32"' new[] { typeof (DateTime)}))' Is.True); " is 146.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToInt32"' new[] { typeof (decimal)}))' Is.True); " is 145.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToInt32"' new[] { typeof (float) }))' Is.True); " is 144.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToInt32"' new[] { typeof (long)}))' Is.True); " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToInt32"' new[] { typeof (object)}))' Is.True); " is 144.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToInt32"' new[] { typeof (short)}))' Is.True); " is 143.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToInt16"' new[] { typeof (string)}))' Is.True); " is 144.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToInt16"' new[] { typeof (bool)}))' Is.True); " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToInt16"' new[] { typeof (byte) }))' Is.True); " is 143.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToInt16"' new[] { typeof (char)}))' Is.True); " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToInt16"' new[] { typeof (DateTime)}))' Is.True); " is 146.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToInt16"' new[] { typeof (decimal)}))' Is.True); " is 145.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToInt16"' new[] { typeof (float) }))' Is.True); " is 144.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToInt16"' new[] { typeof (long) }))' Is.True); " is 143.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToInt16"' new[] { typeof (object)}))' Is.True); " is 144.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToInt16"' new[] { typeof (short)}))' Is.True); " is 143.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToBoolean"' new[] { typeof (string) }))' Is.True); " is 147.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToBoolean"' new[] { typeof (int)}))' Is.True); " is 143.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToBoolean"' new[] { typeof (char) }))' Is.True); " is 145.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToBoolean"' new[] { typeof (byte) }))' Is.True); " is 145.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToBoolean"' new[] { typeof (DateTime)}))' Is.True); " is 148.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToBoolean"' new[] { typeof (decimal)}))' Is.True); " is 147.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToBoolean"' new[] { typeof (double)}))' Is.True); " is 146.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToBoolean"' new[] { typeof (float)}))' Is.True); " is 145.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToBoolean"' new[] { typeof (long)}))' Is.True); " is 144.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToBoolean"' new[] { typeof (object)}))' Is.True); " is 146.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConvertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConvertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ConvertMethodCallTransformer.SupportedMethods.Contains (typeof (Convert).GetMethod("ToBoolean"' new[] { typeof (short) }))' Is.True); " is 146.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (DateTimeAddMethodCallTransformer.SupportedMethods' Has.Member (MemberInfoFromExpressionUtility.GetMethod (() => DateTime.Now.Add (new TimeSpan ())))); " is 163.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (DateTimeAddMethodCallTransformer.SupportedMethods' Has.Member (MemberInfoFromExpressionUtility.GetMethod (() => DateTime.Now.AddDays (1.5)))); " is 155.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (DateTimeAddMethodCallTransformer.SupportedMethods' Has.Member (MemberInfoFromExpressionUtility.GetMethod (() => DateTime.Now.AddHours (1.5)))); " is 156.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (DateTimeAddMethodCallTransformer.SupportedMethods' Has.Member (MemberInfoFromExpressionUtility.GetMethod (() => DateTime.Now.AddMilliseconds (1.5)))); " is 163.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (DateTimeAddMethodCallTransformer.SupportedMethods' Has.Member (MemberInfoFromExpressionUtility.GetMethod (() => DateTime.Now.AddMinutes (1.5)))); " is 158.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (DateTimeAddMethodCallTransformer.SupportedMethods' Has.Member (MemberInfoFromExpressionUtility.GetMethod (() => DateTime.Now.AddMonths (15)))); " is 156.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (DateTimeAddMethodCallTransformer.SupportedMethods' Has.Member (MemberInfoFromExpressionUtility.GetMethod (() => DateTime.Now.AddSeconds (1.5)))); " is 158.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (DateTimeAddMethodCallTransformer.SupportedMethods' Has.Member (MemberInfoFromExpressionUtility.GetMethod (() => DateTime.Now.AddTicks (15)))); " is 155.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (DateTimeAddMethodCallTransformer.SupportedMethods' Has.Member (MemberInfoFromExpressionUtility.GetMethod (() => DateTime.Now.AddYears (15)))); " is 155.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_Add_TimeSpan,The length of the statement  "              Expression.Divide (Expression.Constant (123456789L)' new SqlLiteralExpression (10000L))' new SqlLiteralExpression (86400000L))' " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_Add_TimeSpan,The length of the statement  "                  Expression.Divide (Expression.Constant (123456789L)' new SqlLiteralExpression (10000L))' new SqlLiteralExpression (86400000L))' " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,EndsWithMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\EndsWithMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (EndsWithMethodCallTransformer.SupportedMethods.Contains (typeof (string).GetMethod("EndsWith"' new[] { typeof (string)}))' Is.True); " is 145.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,EndsWithMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\EndsWithMethodCallTransformerTest.cs,Transform_ArgumentIsNotNullAndIsNoConstantValue_,The length of the statement  "          new SqlLiteralExpression ("%")' rightExpression' typeof (string).GetMethod ("Concat"' new[] { typeof (string)' typeof (string) })); " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,EqualsMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\EqualsMethodCallTransformerTest.cs,Transform_InstanceMethod_IncompatibleTypes,The length of the statement  "      var expectedResult = Expression.Equal (Expression.Convert (instance' typeof (object))' Expression.Convert (argument' typeof (object))); " is 135.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,EqualsMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\EqualsMethodCallTransformerTest.cs,Transform_StaticMethod_NonMatchingTypes,The length of the statement  "      var expectedResult = Expression.Equal (Expression.Convert (parameter1' typeof (object))' Expression.Convert (parameter2' typeof (object))); " is 139.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,IndexOfMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\IndexOfMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (IndexOfMethodCallTransformer.SupportedMethods.Contains (typeof (string).GetMethod("IndexOf"' new[] { typeof (string) }))' Is.True); " is 144.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,IndexOfMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\IndexOfMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (IndexOfMethodCallTransformer.SupportedMethods.Contains (typeof (string).GetMethod( "IndexOf"' new[] { typeof (char)}))' Is.True); " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,IndexOfMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\IndexOfMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (IndexOfMethodCallTransformer.SupportedMethods.Contains (typeof (string).GetMethod("IndexOf"' new[] { typeof (string)' typeof (int)}))' Is.True); " is 157.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,IndexOfMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\IndexOfMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (IndexOfMethodCallTransformer.SupportedMethods.Contains (typeof (string).GetMethod( "IndexOf"' new[] { typeof (char)' typeof (int)}))' Is.True); " is 156.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,IndexOfMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\IndexOfMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (IndexOfMethodCallTransformer.SupportedMethods.Contains (typeof (string).GetMethod("IndexOf"' new[] { typeof (string)' typeof (int)' typeof (int)}))' Is.True); " is 171.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,IndexOfMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\IndexOfMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (IndexOfMethodCallTransformer.SupportedMethods.Contains (typeof (string).GetMethod("IndexOf"' new[] { typeof (char)' typeof (int)' typeof (int)}))' Is.True); " is 169.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,InsertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\InsertMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "          InsertMethodCallTransformer.SupportedMethods.Contains (typeof (string).GetMethod ("Insert"' new[] { typeof (int)' typeof (string) }))' " is 134.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,InsertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\InsertMethodCallTransformerTest.cs,Transform,The length of the statement  "      var expectedTestExpression = Expression.Equal (new SqlLengthExpression (objectExpression)' Expression.Add (argument1' new SqlLiteralExpression (1))); " is 149.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,InsertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\InsertMethodCallTransformerTest.cs,Transform,The length of the statement  "      var expectedElseExpression = new SqlFunctionExpression (typeof (string)' "STUFF"' objectExpression' Expression.Add (argument1' new SqlLiteralExpression (1))' new SqlLiteralExpression(0)' argument2); " is 198.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,IsNullOrEmptyMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\IsNullOrEmptyMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (IsNullOrEmptyMethodCallTransformer.SupportedMethods.Contains (typeof (string).GetMethod( "IsNullOrEmpty"' new[]{typeof(string)}))); " is 144.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,IsNullOrEmptyMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\IsNullOrEmptyMethodCallTransformerTest.cs,Transform,The length of the statement  "      var expectedResult = Expression.OrElse (expectedIsNullExpression' Expression.Equal (expectedLenExpression' new SqlLiteralExpression(0))); " is 137.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,LikeMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\LikeMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (LikeMethodCallTransformer.SupportedMethods.Contains (typeof (StringExtensions).GetMethod("SqlLike"' new[] { typeof (string)' typeof (string)}))' Is.True); " is 167.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,LikeMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\LikeMethodCallTransformerTest.cs,Transform,The length of the statement  "      MethodCallExpression expression = (MethodCallExpression) ExpressionHelper.MakeExpression<string' bool> (s => s.SqlLike ("%es%")); " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,LikeMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\LikeMethodCallTransformerTest.cs,Transform,The length of the statement  "      var expectedResult = new SqlLikeExpression (expression.Arguments[0]' expression.Arguments[1]' new SqlLiteralExpression (@"\")); " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,LowerMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\LowerMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (LowerMethodCallTransformer.SupportedMethods.Contains (typeof (string).GetMethod("ToLower"' new Type[0]))' Is.True); " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,RemoveMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\RemoveMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (RemoveMethodCallTransformer.SupportedMethods.Contains (typeof (string).GetMethod("Remove"' new[] { typeof (int)}))' Is.True); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,RemoveMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\RemoveMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (RemoveMethodCallTransformer.SupportedMethods.Contains (typeof (string).GetMethod("Remove"' new[] { typeof (int)' typeof (int)}))' Is.True); " is 152.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ReplaceMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ReplaceMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (ReplaceMethodCallTransformer.SupportedMethods.Contains (typeof (string).GetMethod("Replace"' new[]  { typeof (string)' typeof (string)}))' Is.True); " is 161.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,StartsWithMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\StartsWithMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (StartsWithMethodCallTransformer.SupportedMethods.Contains (typeof (string).GetMethod( "StartsWith"' new[] { typeof (string)}))' Is.True); " is 150.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,StartsWithMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\StartsWithMethodCallTransformerTest.cs,Transform_ArgumentIsNotNullAndIsNoConstantValue_,The length of the statement  "          rightExpression' new SqlLiteralExpression ("%")' typeof (string).GetMethod ("Concat"' new[] { typeof (string)' typeof (string) })); " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,SubstringMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\SubstringMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (SubstringMethodCallTransformer.SupportedMethods.Contains (typeof (string).GetMethod("Substring"' new[] { typeof (int) }))' Is.True); " is 145.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,SubstringMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\SubstringMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (SubstringMethodCallTransformer.SupportedMethods.Contains (typeof (string).GetMethod("Substring"' new[] { typeof (int)' typeof (int)}))' Is.True); " is 158.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,TrimMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\TrimMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (TrimMethodCallTransformer.SupportedMethods.Contains (typeof(string).GetMethod("Trim"' new Type[0]))' Is.True); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,TrimMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\TrimMethodCallTransformerTest.cs,Transform,The length of the statement  "      var expectedResult = new SqlFunctionExpression(typeof(string)' "LTRIM"' new SqlFunctionExpression (typeof (string)' "RTRIM"' objectExpression)); " is 144.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,UpperMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\UpperMethodCallTransformerTest.cs,SupportedMethods,The length of the statement  "      Assert.That (UpperMethodCallTransformer.SupportedMethods.Contains (typeof (string).GetMethod("ToUpper"' new Type[0]))' Is.True); " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,MethodInfoBasedMethodCallTransformerRegistryTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodInfoBasedMethodCallTransformerRegistryTest.cs,GetTransformer_ForGenericMethodInfo,The length of the statement  "      var methodCallExpression = Expression.Call (closedGenericMethod' Expression.Constant (null' typeof (IQueryable<>).MakeGenericType (typeof (Cook)))); " is 148.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,MethodInfoBasedMethodCallTransformerRegistryTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodInfoBasedMethodCallTransformerRegistryTest.cs,GetTransformer_ForBaseDefinition,The length of the statement  "      var methodCallExpression = Expression.Call (Expression.Constant (i)' MemberInfoFromExpressionUtility.GetMethod (() => i.ToString ())); " is 134.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationSubStatementTableFactoryTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationSubStatementTableFactoryTest.cs,SetUp,The length of the statement  "      var builderForStatementWithOrderings = new SqlStatementBuilder (SqlStatementModelObjectMother.CreateSqlStatementWithCook ()) " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationSubStatementTableFactoryTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationSubStatementTableFactoryTest.cs,CreateSqlTableForSubStatement_WithOrderings_AndExtractOrderingsPolicy_ExtractedOrderings,The length of the statement  "      var expectedOrdering2 = Expression.MakeMemberAccess (valueMemberAccess1' valueMemberAccess1.Type.GetProperty ("Value")); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationSubStatementTableFactoryTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationSubStatementTableFactoryTest.cs,CreateSqlTableForSubStatement_WithOrderings_AndExtractOrderingsPolicy_NewProjection_ContainsOrderings,The length of the statement  "      var outerTupleCtor = typeof (KeyValuePair<Cook' KeyValuePair<string' string>>).GetConstructor (new[] { typeof (Cook)' typeof (KeyValuePair<string' string>) }); " is 159.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationSubStatementTableFactoryTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationSubStatementTableFactoryTest.cs,CreateSqlTableForSubStatement_WithOrderings_AndExtractOrderingsPolicy_NewProjection_ContainsOrderings,The length of the statement  "      var middleTupleCtor = typeof (KeyValuePair<string' string>).GetConstructor (new[] { typeof (string)' typeof (string) }); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationSubStatementTableFactoryTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationSubStatementTableFactoryTest.cs,CreateSqlTableForSubStatement_WithOrderings_AndExtractOrderingsPolicy_NewProjection_ContainsOrderings,The length of the statement  "          .WhenCalled (mi => SqlExpressionTreeComparer.CheckAreEqualTrees (expectedSelectProjection' (Expression) mi.Arguments[0])) " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationSubStatementTableFactoryTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationSubStatementTableFactoryTest.cs,CreateSqlTableForSubStatement_WithOrderings_AndExtractOrderingsPolicy_WithTopExpression,The length of the statement  "          .Expect (mock => mock.PrepareSelectExpression (Arg<Expression>.Is.Anything' Arg<ISqlPreparationContext>.Matches (c => c == _context))) " is 134.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,DefaultSqlPreparationStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\DefaultSqlPreparationStageTest.cs,SetUp,The length of the statement  "      _context.AddExpressionMapping (new QuerySourceReferenceExpression(querySource)' new SqlTableReferenceExpression(_sqlTable)); " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,DefaultSqlPreparationStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\DefaultSqlPreparationStageTest.cs,SetUp,The length of the statement  "          CompoundMethodCallTransformerProvider.CreateDefault()' ResultOperatorHandlerRegistry.CreateDefault()' new UniqueIdentifierGenerator()); " is 135.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,GetTableForFromExpression_UnsupportedExpression_Throws,The length of the statement  "          customExpression' _stageMock' _generator' _methodCallTransformerProvider' _context' _tableGenerator' _someOrderingExtractionPolicy); " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitEntityRefMemberExpression_ThrowsNotSupportException,The length of the statement  "          expression' _stageMock' _generator' _methodCallTransformerProvider' _context' _tableGenerator' _someOrderingExtractionPolicy); " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitSqlSubStatementExpression_WithExtractOrderingsPolicy,The length of the statement  "      var stage = new DefaultSqlPreparationStage (_methodCallTransformerProvider' new ResultOperatorHandlerRegistry()' _generator); " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitSqlSubStatementExpression_WithDoNotExtractOrderingsPolicy,The length of the statement  "      var stage = new DefaultSqlPreparationStage (_methodCallTransformerProvider' new ResultOperatorHandlerRegistry()' _generator); " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitSqlSubStatementExpression_WithNonBooleanSqlGroupingSelectExpression,The length of the statement  "      var stage = new DefaultSqlPreparationStage (_methodCallTransformerProvider' new ResultOperatorHandlerRegistry()' _generator); " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitMemberExpression,The length of the statement  "      var memberExpression = Expression.MakeMemberAccess (Expression.Constant (new Cook())' typeof (Cook).GetProperty ("IllnessDays")); " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitSqlTableReferenceExpression_Grouping,The length of the statement  "      var sqlTable = new SqlTable (new ResolvedSimpleTableInfo (typeof (IGrouping<string' int>)' "test"' "t0")' JoinSemantics.Inner); " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitSqlEntityRefMemberExpression,The length of the statement  "          expression' _stageMock' _generator' _methodCallTransformerProvider' _context' _tableGenerator' _someOrderingExtractionPolicy); " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitSqlEntityConstantExpression,The length of the statement  "          expression' _stageMock' _generator' _methodCallTransformerProvider' _context' _tableGenerator' _someOrderingExtractionPolicy); " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitQuerySourceReferenceExpression_WithNonNullWhereCondition,The length of the statement  "      var sqlTableReferenceExpression = new SqlTableReferenceExpression (SqlStatementModelObjectMother.CreateSqlTable (typeof (Cook))); " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitQuerySourceReferenceExpression_WithNonNullWhereCondition,The length of the statement  "      Assert.That (((JoinConditionExpression) ((BinaryExpression) fromExpressionInfo.WhereCondition).Left).JoinedTable.JoinInfo' Is.TypeOf (typeof (UnresolvedCollectionJoinInfo))); " is 174.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitQuerySourceReferenceExpression_WithNonNullWhereCondition,The length of the statement  "          ((UnresolvedCollectionJoinInfo) ((JoinConditionExpression) ((BinaryExpression) fromExpressionInfo.WhereCondition).Left).JoinedTable.JoinInfo).SourceExpression' Is.SameAs(sqlTableReferenceExpression)); " is 200.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitQuerySourceReferenceExpression_WithNonNullWhereCondition,The length of the statement  "          ((UnresolvedCollectionJoinInfo) ((JoinConditionExpression) ((BinaryExpression) fromExpressionInfo.WhereCondition).Left).JoinedTable.JoinInfo).MemberInfo' Is.SameAs (memberInfo)); " is 178.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitQuerySourceReferenceExpression_WithNonNullWhereCondition,The length of the statement  "      Assert.That (((JoinConditionExpression) ((BinaryExpression) fromExpressionInfo.WhereCondition).Left).JoinedTable.JoinSemantics' Is.EqualTo(JoinSemantics.Inner)); " is 161.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitQuerySourceReferenceExpression_WithOrderings_AndExtractOrdingsPolicy,The length of the statement  "      var selectProjection = new NamedExpression("test"' Expression.MakeMemberAccess (sqlTableReferenceExpression' typeof (Cook).GetProperty ("Name"))); " is 146.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitQuerySourceReferenceExpression_WithOrderings_AndExtractOrdingsPolicy,The length of the statement  "      Assert.That (((MemberExpression) fromExpressionInfo.ExtractedOrderings[0].Expression).Expression' Is.TypeOf(typeof(SqlTableReferenceExpression))); " is 146.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitQuerySourceReferenceExpression_WithOrderings_AndExtractOrdingsPolicy,The length of the statement  "          ((SqlTableReferenceExpression) ((MemberExpression) fromExpressionInfo.ExtractedOrderings[0].Expression).Expression).SqlTable' Is.TypeOf (typeof (SqlTable))); " is 157.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitQuerySourceReferenceExpression_WithOrderings_AndExtractOrdingsPolicy,The length of the statement  "          ((SqlTable) ((SqlTableReferenceExpression) ((MemberExpression) fromExpressionInfo.ExtractedOrderings[0].Expression).Expression).SqlTable).TableInfo' Is.TypeOf (typeof (ResolvedSubStatementTableInfo))); " is 201.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitQuerySourceReferenceExpression_WithOrderings_AndExtractOrdingsPolicy,The length of the statement  "         (ResolvedSubStatementTableInfo) ((SqlTable) ((SqlTableReferenceExpression) ((MemberExpression) fromExpressionInfo.ExtractedOrderings[0].Expression).Expression).SqlTable).TableInfo; " is 180.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitQuerySourceReferenceExpression_WithOrderings_AndExtractOrdingsPolicy,The length of the statement  "      Assert.That (((MemberExpression) fromExpressionInfo.ExtractedOrderings[0].Expression).Member' Is.EqualTo(typeof(KeyValuePair<'>).MakeGenericType(typeof(string)' typeof(int)).GetProperty("Value"))); " is 197.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitQuerySourceReferenceExpression_WithOrderings_AndExtractOrdingsPolicy,The length of the statement  "      Assert.That (((MemberExpression) fromExpressionInfo.ItemSelector).Expression' Is.TypeOf(typeof(SqlTableReferenceExpression))); " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitQuerySourceReferenceExpression_WithOrderings_AndExtractOrdingsPolicy,The length of the statement  "      Assert.That (((SqlTableReferenceExpression) ((MemberExpression) fromExpressionInfo.ItemSelector).Expression).SqlTable' Is.TypeOf (typeof (SqlTable))); " is 150.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitQuerySourceReferenceExpression_WithOrderings_AndExtractOrdingsPolicy,The length of the statement  "          ((SqlTable) ((SqlTableReferenceExpression) ((MemberExpression) fromExpressionInfo.ItemSelector).Expression).SqlTable).TableInfo' Is.TypeOf (typeof (ResolvedSubStatementTableInfo))); " is 181.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitQuerySourceReferenceExpression_WithOrderings_AndExtractOrdingsPolicy,The length of the statement  "      Assert.That (((MemberExpression) fromExpressionInfo.ItemSelector).Member' Is.EqualTo (typeof (KeyValuePair<'>).MakeGenericType (typeof (string)' typeof (int)).GetProperty ("Key"))); " is 181.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitQuerySourceReferenceExpression_WithOrderings_AndDoNotExtractOrdingsPolicy,The length of the statement  "      var selectProjection = new NamedExpression("test"' Expression.MakeMemberAccess (sqlTableReferenceExpression' typeof (Cook).GetProperty ("Name"))); " is 146.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationContextTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationContextTest.cs,AddExpressionMapping,The length of the statement  "      _context.AddExpressionMapping (new QuerySourceReferenceExpression (_source)' new SqlTableReferenceExpression (_sqlTable)); " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationContextTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationContextTest.cs,GetExpressionMapping_GetFromParentContext,The length of the statement  "      Assert.That (_contextWithParent.GetExpressionMapping (querySourceReferenceExpression)' Is.SameAs (sqlTableReferenceExpression)); " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationQueryModelVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationQueryModelVisitorTest.cs,SetUp,The length of the statement  "      _visitorPartialMock = MockRepository.GeneratePartialMock<TestableSqlPreparationQueryModelVisitor> (_context' _stageMock); " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationQueryModelVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationQueryModelVisitorTest.cs,VisitQueryModel_VisitsClauses_AndNamesSelectClause,The length of the statement  "      Assert.That (((NamedExpression) _visitorPartialMock.SqlStatementBuilder.SelectProjection).Expression' Is.SameAs (fakeSelectProjection)); " is 136.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationQueryModelVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationQueryModelVisitorTest.cs,VisitQueryModel_ConstantExpression_Collection,The length of the statement  "      Assert.That (((NamedExpression) _visitor.SqlStatementBuilder.SelectProjection).Expression' Is.TypeOf (typeof (ConstantExpression))); " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationQueryModelVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationQueryModelVisitorTest.cs,VisitQueryModel_ConstantExpression_Collection,The length of the statement  "      var constantExpressionInSelectProjection = ((ConstantExpression) ((NamedExpression) _visitor.SqlStatementBuilder.SelectProjection).Expression); " is 143.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationQueryModelVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationQueryModelVisitorTest.cs,VisitQueryModel_ConstantExpression_Collection,The length of the statement  "      Assert.That (((StreamedSequenceInfo) _visitor.SqlStatementBuilder.DataInfo).ItemExpression' Is.SameAs (expectedDataInfo.ItemExpression)); " is 137.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationQueryModelVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationQueryModelVisitorTest.cs,VisitQueryModel_ConstantExpression_Collection_TypeIsEnumerable_ButValueIsCollection,The length of the statement  "      Assert.That (((NamedExpression) _visitor.SqlStatementBuilder.SelectProjection).Expression' Is.TypeOf (typeof (ConstantExpression))); " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationQueryModelVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationQueryModelVisitorTest.cs,VisitQueryModel_ConstantExpression_Collection_TypeIsEnumerable_ButValueIsCollection,The length of the statement  "      var constantExpressionInSelectProjection = ((ConstantExpression) ((NamedExpression) _visitor.SqlStatementBuilder.SelectProjection).Expression); " is 143.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationQueryModelVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationQueryModelVisitorTest.cs,VisitQueryModel_ConstantExpression_Collection_TypeIsEnumerable_ButValueIsCollection,The length of the statement  "      Assert.That (((StreamedSequenceInfo) _visitor.SqlStatementBuilder.DataInfo).ItemExpression' Is.SameAs (expectedDataInfo.ItemExpression)); " is 137.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationQueryModelVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationQueryModelVisitorTest.cs,VisitQueryModel_ConstantExpression_NoCollection,The length of the statement  "      Assert.That (((NamedExpression) _visitorPartialMock.SqlStatementBuilder.SelectProjection).Expression' Is.SameAs (fakeSelectProjection)); " is 136.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationQueryModelVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationQueryModelVisitorTest.cs,VisitMainFromClause_CreatesFromExpression,The length of the statement  "          ((SqlTableReferenceExpression) _visitor.Context.GetExpressionMapping (new QuerySourceReferenceExpression (_mainFromClause))).SqlTable' " is 134.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationQueryModelVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationQueryModelVisitorTest.cs,VisitAdditionalFromClause_AddsSqlTable_AndContextMapping,The length of the statement  "      Assert.That (_visitor.SqlStatementBuilder.SqlTables' Is.EqualTo (new[] { fakeSqlTableForMainFromClause' preparedSqlTable })); " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationQueryModelVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationQueryModelVisitorTest.cs,VisitAdditionalFromClause_WithWhereCondition_AddsWhereCondition,The length of the statement  "      // TODO RMLNQSQL-2: Add existing where condition and assert that the new where condition is added' does not replace the original one. " is 133.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationQueryModelVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationQueryModelVisitorTest.cs,VisitAdditionalFromClause_WithOrderings_AddsOrderings,The length of the statement  "    // TODO RMLNQSQL-2: Add existing orderings and assert that the new orderings are added' do not replace the original one. " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationQueryModelVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationQueryModelVisitorTest.cs,VisitSelectClause_CreatesSelectProjection,The length of the statement  "      var preparedExpression = new SqlTableReferenceExpression (SqlStatementModelObjectMother.CreateSqlTable (typeof (Cook))); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationQueryModelVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationQueryModelVisitorTest.cs,VisitSelectClause_CreatesSelectProjection,The length of the statement  "      Assert.That (((StreamedSequenceInfo) _visitor.SqlStatementBuilder.DataInfo).DataType' Is.EqualTo (_selectClause.GetOutputDataInfo().DataType)); " is 143.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationQueryModelVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationQueryModelVisitorTest.cs,AddQuerySource,The length of the statement  "      Assert.That (_visitor.Context.GetExpressionMapping (new QuerySourceReferenceExpression (_mainFromClause))' Is.Not.Null); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationQueryModelVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationQueryModelVisitorTest.cs,AddPreparedFromExpression_WhereConditionIsAdded,The length of the statement  "      SqlExpressionTreeComparer.CheckAreEqualTrees (expectedCombinedWhereCondition' _visitor.SqlStatementBuilder.WhereCondition); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationQueryModelVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationQueryModelVisitorTest.cs,AddJoinClause,The length of the statement  "                      e => ((BinaryExpression) e).Left == joinClause.OuterKeySelector && ((BinaryExpression) e).Right == joinClause.InnerKeySelector)' " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,SetUp,The length of the statement  "      _context.AddExpressionMapping (new QuerySourceReferenceExpression (_cookMainFromClause)' new SqlTableReferenceExpression (_sqlTable)); " is 134.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitQuerySourceReferenceExpression_CreatesSqlTableReferenceExpression,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (_cookQuerySourceReferenceExpression' _context' _stageMock' _methodCallTransformerProvider); " is 157.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitNotSupportedExpression_ThrowsNotImplentedException,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (expression' _context' _stageMock' _methodCallTransformerProvider); " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitSubqueryExpressionTest_WithNoSqlTables,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (expression' _context' _stageMock' _methodCallTransformerProvider); " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitSubqueryExpressionTest_WithSqlTables,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (expression' _context' _stageMock' _methodCallTransformerProvider); " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitSubqueryExpressionTest_IsCountQuery,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (expression' _context' _stageMock' _methodCallTransformerProvider); " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitSubqueryExpressionTest_IsDistinctQuery,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (expression' _context' _stageMock' _methodCallTransformerProvider); " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitSubqueryExpressionTest_RevisitsResult,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (expression' _context' _stageMock' _methodCallTransformerProvider); " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitSqlSubStatmentExpression_NoTopExpression_ReturnsSame,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (subStatementExpression' _context' _stageMock' _methodCallTransformerProvider); " is 144.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitSqlSubStatmentExpression_HasTopExpression_ReturnsNew,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (subStatementExpression' _context' _stageMock' _methodCallTransformerProvider); " is 144.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitMemberExpression_WithNoPoperty,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (memberExpression' _context' _stageMock' _methodCallTransformerProvider); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitMemberExpression_WithProperty_NotRegistered,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (memberExpression' _context' _stageMock' _methodCallTransformerProvider); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitMemberExpression_WithProperty_Registered,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (memberExpression' _context' _stageMock' _methodCallTransformerProvider); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitMemberExpression_WithInnerSqlCaseExpression,The length of the statement  "          new[] { new SqlCaseExpression.CaseWhenPair (testPredicate1' value1)' new SqlCaseExpression.CaseWhenPair (testPredicate2' value2) }' " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitMemberExpression_WithInnerSqlCaseExpression,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (memberExpression' _context' _stageMock' _methodCallTransformerProvider); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitMemberExpression_WithInnerSqlCaseExpression_NoElse,The length of the statement  "      var valueTypeMemberExpression = CreateMemberExpressionWithInnerSqlCaseExpression<int> (predicate' valueTypeValue' null); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitMemberExpression_WithInnerSqlCaseExpression_NoElse,The length of the statement  "      var nullableValueTypeMemberExpression = CreateMemberExpressionWithInnerSqlCaseExpression<int?> (predicate' nullableValueTypeValue' null); " is 137.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitMemberExpression_WithInnerSqlCaseExpression_NoElse,The length of the statement  "      var referenceTypeMemberExpression = CreateMemberExpressionWithInnerSqlCaseExpression<string> (predicate' referenceTypeValue' null); " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitMemberExpression_WithInnerSqlCaseExpression_NoElse,The length of the statement  "      var expectedNullableValueTypeResult = CreateSqlCaseExpressionWithInnerMemberExpressionNoElse<int?> (predicate' nullableValueTypeValue); " is 135.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitMemberExpression_WithInnerSqlCaseExpression_NoElse,The length of the statement  "      var expectedReferenceTypeResult = CreateSqlCaseExpressionWithInnerMemberExpressionNoElse<string> (predicate' referenceTypeValue); " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitMemberExpression_WithInnerSqlCaseExpression_RevisitsResult,The length of the statement  "      var caseExpression = new SqlCaseExpression (typeof (string)' new[] { new SqlCaseExpression.CaseWhenPair (predicate' value) }' elseValue); " is 137.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitMemberExpression_WithInnerSqlCaseExpression_RevisitsResult,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (memberExpression' _context' _stageMock' _methodCallTransformerProvider); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitMemberExpression_WithInnerCoalesceExpression,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (memberExpression' _context' _stageMock' _methodCallTransformerProvider); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitMemberExpression_WithInnerCoalesceExpression_RevisitsResult,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (memberExpression' _context' _stageMock' _methodCallTransformerProvider); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitMemberExpression_WithInnerSqlSubStatementExpression,The length of the statement  "          new NamedExpression("test"' selectProjection)' new SqlTable (new ResolvedSimpleTableInfo (typeof (Cook)' "CookTable"' "c")'JoinSemantics.Left)); " is 144.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitMemberExpression_WithInnerSqlSubStatementExpression,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (memberExpression' _context' _stageMock' _methodCallTransformerProvider); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitMemberExpression_WithInnerSqlSubStatementExpression,The length of the statement  "      SqlExpressionTreeComparer.CheckAreEqualTrees (expectedSelectProjection' ((SqlSubStatementExpression) result).SqlStatement.SelectProjection); " is 140.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitMemberExpression_WithInnerSqlSubStatementExpression,The length of the statement  "      Assert.That (((SqlSubStatementExpression) result).SqlStatement.DataInfo.DataType' Is.EqualTo(typeof (IQueryable<>).MakeGenericType(typeof(string)))); " is 149.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitBinaryExpression,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (binaryExpression' _context' _stageMock' _methodCallTransformerProvider); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitBinaryExpression_QuerySourceReferenceExpressionsOnBothSide,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (binaryExpression' _context' _stageMock' _methodCallTransformerProvider); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitBinaryExpression_ReturnsSqlIsNullExpression_NullLeft,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (binaryExpression' _context' _stageMock' _methodCallTransformerProvider); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitBinaryExpression_ReturnsSqlIsNullExpression_NullRight,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (binaryExpression' _context' _stageMock' _methodCallTransformerProvider); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitBinaryExpression_ReturnsSqlIsNotNullExpression_NullLeft,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (binaryExpression' _context' _stageMock' _methodCallTransformerProvider); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitBinaryExpression_ReturnsSqlIsNotNullExpression_NullRight,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (binaryExpression' _context' _stageMock' _methodCallTransformerProvider); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitBinaryExpression_NotEqual_WithNullOnRightSide,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (binaryExpression' _context' _stageMock' _methodCallTransformerProvider); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitBinaryExpression_NotEqual_WithNullOnLeftSide,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (binaryExpression' _context' _stageMock' _methodCallTransformerProvider); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitConditionalExpression,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (conditionalExpression' _context' _stageMock' _methodCallTransformerProvider); " is 143.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitConditionalExpression_VisitsSubExpressions,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (conditionalExpression' _context' _stageMock' _methodCallTransformerProvider); " is 143.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitBinaryExpression_WithConditionalExpressionInBinaryExpression,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (binaryExpression' _context' _stageMock' _methodCallTransformerProvider); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitBinaryExpression_WithConditionalExpressionInBinaryExpression,The length of the statement  "          leftExpression' SqlCaseExpression.CreateIfThenElse (typeof (string)' testPredicate' ifTrueExpression' ifFalseExpression)); " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitMethodCallExpression,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (methodCallExpression' _context' _stageMock' _methodCallTransformerProvider); " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitMethodCallExpression_TransformerNotRegistered_WrapsArgumentsIntoNamedExpressions,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (methodCallExpression' _context' _stageMock' _methodCallTransformerProvider); " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitMethodCallExpression_TransformerNotRegistered_WrapsArgumentsIntoNamedExpressions,The length of the statement  "          new[] { new NamedExpression ("Arg0"' Expression.Constant (""))' new NamedExpression ("Arg1"' Expression.Constant (null' typeof (IFormatProvider))) }); " is 150.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitMethodCallExpression_TransformerNotRegistered_NoObject_WrapsArgumentsIntoNamedExpressions,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (methodCallExpression' _context' _stageMock' _methodCallTransformerProvider); " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitMethodCallExpression_ExpressionPropertiesVisitedAfterTransformation,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (methodCallExpression' _context' _stageMock' registry); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitNewExpression,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (expression' _context' _stageMock' _methodCallTransformerProvider); " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitNewExpression_NoMembers,The length of the statement  "      var expression = Expression.New (TypeForNewExpression.GetConstructor (typeof (int))' new[] { Expression.Constant (0) }); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitNewExpression_NoMembers,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (expression' _context' _stageMock' _methodCallTransformerProvider); " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitPartialEvaluationExceptionExpression_StripsExceptionAndVisitsInnerExpression,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (expression' _context' _stageMock' _methodCallTransformerProvider); " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitConstantExpression_WithNoCollection_LeavesExpressionUnchanged,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (constantExpression' _context' _stageMock' _methodCallTransformerProvider); " is 140.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitConstantExpression_WithCollection_ReturnsSqlCollectionExpression,The length of the statement  "      var result = SqlPreparationExpressionVisitor.TranslateExpression (constantExpression' _context' _stageMock' _methodCallTransformerProvider); " is 140.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,AggregationResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\AggregationResultOperatorHandlerTest.cs,HandleResultOperator,The length of the statement  "      _handler.HandleResultOperator (averageResultOperator' _sqlStatementBuilder' UniqueIdentifierGenerator' _stage' _context); " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,AggregationResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\AggregationResultOperatorHandlerTest.cs,HandleResultOperator,The length of the statement  "      Assert.That (((AggregationExpression) _sqlStatementBuilder.SelectProjection).AggregationModifier' Is.EqualTo (AggregationModifier.Max)); " is 136.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,AggregationResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\AggregationResultOperatorHandlerTest.cs,HandleResultOperator_WithOrderingsWithoutTopExpression,The length of the statement  "      _handler.HandleResultOperator (averageResultOperator' _sqlStatementBuilder' UniqueIdentifierGenerator' _stage' _context); " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,AggregationResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\AggregationResultOperatorHandlerTest.cs,HandleResultOperator_WithOrderingsAndTopExpression,The length of the statement  "      _handler.HandleResultOperator (averageResultOperator' _sqlStatementBuilder' UniqueIdentifierGenerator' _stage' _context); " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,AggregationResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\AggregationResultOperatorHandlerTest.cs,HandleResultOperator_WithOrderingsAndTopExpression,The length of the statement  "          ((ResolvedSubStatementTableInfo) _sqlStatementBuilder.SqlTables[0].TableInfo).SqlStatement.Orderings.Count' Is.EqualTo (1)); " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,AggregationResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\AggregationResultOperatorHandlerTest.cs,HandleResultOperator_WithOrderingsAndTopExpression,The length of the statement  "          ((ResolvedSubStatementTableInfo) _sqlStatementBuilder.SqlTables[0].TableInfo).SqlStatement.Orderings[0]' Is.SameAs(ordering)); " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,AggregationResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\AggregationResultOperatorHandlerTest.cs,HandleResultOperator_AfterSetOperation_CreatesSubStatement,The length of the statement  "      _sqlStatementBuilder.SetOperationCombinedStatements.Add (SqlStatementModelObjectMother.CreateSetOperationCombinedStatement()); " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,SetOperationResultOperatorHandlerBaseTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\SetOperationResultOperatorHandlerBaseTest.cs,HandleResultOperator,The length of the statement  "      Assert.That (_sqlStatementBuilder.SetOperationCombinedStatements[0].SqlStatement' Is.SameAs (preparedSource2Statement)); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,SetOperationResultOperatorHandlerBaseTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\SetOperationResultOperatorHandlerBaseTest.cs,HandleResultOperator,The length of the statement  "      Assert.That (((StreamedSequenceInfo) _sqlStatementBuilder.DataInfo).DataType' Is.EqualTo (typeof(IQueryable<>).MakeGenericType(typeof(int)))); " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,SetOperationResultOperatorHandlerBaseTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\SetOperationResultOperatorHandlerBaseTest.cs,HandleResultOperator_NonStatementAsSource2,The length of the statement  "      Assert.That(() =>_handler.HandleResultOperator (resultOperator' _sqlStatementBuilder' UniqueIdentifierGenerator' _stageMock' _context)' " is 135.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,SetOperationResultOperatorHandlerBaseTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\SetOperationResultOperatorHandlerBaseTest.cs,HandleResultOperator_NonStatementAsSource2,The length of the statement  "                  "The 'Union' operation is only supported for combining two query results' but a 'ConstantExpression' was supplied as the " " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,SetOperationResultOperatorHandlerBaseTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\SetOperationResultOperatorHandlerBaseTest.cs,HandleResultOperator_OrderingsWithoutTopInMainSqlStatement_ShouldBeRemoved,The length of the statement  "      Assert.That (_sqlStatementBuilder.SqlTables' Is.EqualTo (new[] { originalSqlTable })' "Query was not moved to a substatement."); " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,AllResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\AllResultOperatorHandlerTest.cs,HandleResultOperator,The length of the statement  "          .Expect (mock => mock.PrepareSelectExpression (Arg<Expression>.Matches (e => e.NodeType == ExpressionType.Not)' Arg.Is (_context))) " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,AllResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\AllResultOperatorHandlerTest.cs,HandleResultOperator,The length of the statement  "                var expectedSubStatement = new SqlStatementBuilder (sqlStatement) { WhereCondition = preparedPredicate }.GetSqlStatement(); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,AllResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\AllResultOperatorHandlerTest.cs,HandleResultOperator_AllAfterSetOperation,The length of the statement  "      _sqlStatementBuilder.SetOperationCombinedStatements.Add(SqlStatementModelObjectMother.CreateSetOperationCombinedStatement()); " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,AnyResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\AnyResultOperatorHandlerTest.cs,HandleResultOperator,The length of the statement  "         .Expect (mock => mock.PrepareSelectExpression (Arg<Expression>.Matches (e => e is SqlExistsExpression)' Arg.Is (_context))) " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,AverageResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\AverageResultOperatorHandlerTest.cs,HandleResultOperator_WithMatchingTypes,The length of the statement  "      Assert.That (averageResultOperator.GetOutputDataInfo (sqlStatementBuilder.DataInfo).DataType' Is.SameAs (typeof (decimal))); " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,AverageResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\AverageResultOperatorHandlerTest.cs,HandleResultOperator_WithMatchingTypes,The length of the statement  "      Assert.That (((AggregationExpression) sqlStatementBuilder.SelectProjection).AggregationModifier' Is.EqualTo (AggregationModifier.Average)); " is 139.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,AverageResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\AverageResultOperatorHandlerTest.cs,HandleResultOperator_WithMatchingTypes,The length of the statement  "      Assert.That (((AggregationExpression) sqlStatementBuilder.SelectProjection).Expression' Is.SameAs (previousSelectExpression)); " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,AverageResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\AverageResultOperatorHandlerTest.cs,HandleResultOperator_WithNonMatchingTypes,The length of the statement  "      Assert.That (averageResultOperator.GetOutputDataInfo (sqlStatementBuilder.DataInfo).DataType' Is.SameAs (typeof (double))); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,AverageResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\AverageResultOperatorHandlerTest.cs,HandleResultOperator_WithNonMatchingTypes,The length of the statement  "      Assert.That (((AggregationExpression) sqlStatementBuilder.SelectProjection).AggregationModifier' Is.EqualTo (AggregationModifier.Average)); " is 139.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,AverageResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\AverageResultOperatorHandlerTest.cs,HandleResultOperator_WithNonMatchingTypes,The length of the statement  "      Assert.That (((AggregationExpression) sqlStatementBuilder.SelectProjection).Expression' Is.TypeOf<SqlConvertExpression> ()); " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,AverageResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\AverageResultOperatorHandlerTest.cs,HandleResultOperator_WithNonMatchingTypes,The length of the statement  "      var sqlConvertExpression = (SqlConvertExpression) ((AggregationExpression) sqlStatementBuilder.SelectProjection).Expression; " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,CastResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\CastResultOperatorHandlerTest.cs,VisitResultOperator_WithCast,The length of the statement  "      Assert.That (((StreamedSequenceInfo) _sqlStatementBuilder.DataInfo).DataType' Is.EqualTo (typeof (IQueryable<>).MakeGenericType (typeof (Chef)))); " is 146.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,ContainsResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\ContainsResultOperatorHandlerTest.cs,HandleResultOperator,The length of the statement  "      _stageMock.Expect (mock => mock.PrepareResultOperatorItemExpression (itemExpression' _context)).Return (preparedExpression); " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,CountResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\CountResultOperatorHandlerTest.cs,HandleResultOperator,The length of the statement  "      Assert.That (((AggregationExpression) _sqlStatementBuilder.SelectProjection).AggregationModifier' Is.EqualTo (AggregationModifier.Count)); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,DefaultIfEmptyResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\DefaultIfEmptyResultOperatorHandlerTest.cs,HandleResultOperator,The length of the statement  "      Assert.That (_context.GetExpressionMapping (((StreamedSequenceInfo) _sqlStatementBuilder.DataInfo).ItemExpression)' Is.Not.Null); " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,DistinctResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\DistinctResultOperatorHandlerTest.cs,HandleResultOperator,The length of the statement  "      Assert.That (((StreamedSequenceInfo) _sqlStatementBuilder.DataInfo).DataType' Is.EqualTo (typeof(IQueryable<>).MakeGenericType(typeof(Cook)))); " is 143.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,DistinctResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\DistinctResultOperatorHandlerTest.cs,HandleResultOperator_DistinctAfterSetOperation,The length of the statement  "      _sqlStatementBuilder.SetOperationCombinedStatements.Add (SqlStatementModelObjectMother.CreateSetOperationCombinedStatement()); " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,FirstResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\FirstResultOperatorHandlerTest.cs,HandleResultOperator_FirstAfterTopExpression,The length of the statement  "      Assert.That (((SqlTable) _sqlStatementBuilder.SqlTables[0]).TableInfo' Is.TypeOf (typeof (ResolvedSubStatementTableInfo))); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,FirstResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\FirstResultOperatorHandlerTest.cs,HandleResultOperator_FirstAfterGroupExpression,The length of the statement  "      Assert.That (((SqlTable) _sqlStatementBuilder.SqlTables[0]).TableInfo' Is.TypeOf (typeof (ResolvedSubStatementTableInfo))); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,FirstResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\FirstResultOperatorHandlerTest.cs,HandleResultOperator_FirstAfterSkipExpression,The length of the statement  "                _sqlStatementBuilder.RowNumberSelector' Expression.Add (_sqlStatementBuilder.CurrentRowNumberOffset' new SqlLiteralExpression(1))); " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,GroupResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\GroupResultOperatorHandlerTest.cs,HandleResultOperator,The length of the statement  "          Is.EqualTo (typeof (IQueryable<>).MakeGenericType (typeof (IGrouping<'>).MakeGenericType (typeof (string)' typeof (string))))); " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,GroupResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\GroupResultOperatorHandlerTest.cs,HandleResultOperator_GroupByAfterSetOperations,The length of the statement  "      _sqlStatementBuilder.SetOperationCombinedStatements.Add(SqlStatementModelObjectMother.CreateSetOperationCombinedStatement()); " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,GroupResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\GroupResultOperatorHandlerTest.cs,HandleResultOperator_DetectConstantKeysAndReplaceWithSubStatement,The length of the statement  "      SqlExpressionTreeComparer.CheckAreEqualTrees (expectedSelectExpression' groupKeyTableTableInfo.SqlStatement.SelectProjection); " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,GroupResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\GroupResultOperatorHandlerTest.cs,HandleResultOperator_DetectConstantKeysAndReplaceWithSubStatement,The length of the statement  "          DataInfo = new StreamedSequenceInfo (typeof (IEnumerable<string>)' groupKeyTableTableInfo.SqlStatement.SelectProjection)' " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,MaxResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\MaxResultOperatorHandlerTest.cs,HandleResultOperator,The length of the statement  "      Assert.That (((AggregationExpression) _sqlStatementBuilder.SelectProjection).AggregationModifier' Is.EqualTo (AggregationModifier.Max)); " is 136.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,MinResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\MinResultOperatorHandlerTest.cs,HandleResultOperator,The length of the statement  "      Assert.That (((AggregationExpression) _sqlStatementBuilder.SelectProjection).AggregationModifier' Is.EqualTo (AggregationModifier.Min)); " is 136.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,OfTypeResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\OfTypeResultOperatorHandlerTest.cs,HandleResultOperator,The length of the statement  "      Assert.That (((StreamedSequenceInfo) _sqlStatementBuilder.DataInfo).DataType' Is.EqualTo (typeof (IQueryable<>).MakeGenericType (typeof (Chef)))); " is 146.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,OfTypeResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\OfTypeResultOperatorHandlerTest.cs,HandleResultOperator_AfterSetOperations_CreatesSubStatement,The length of the statement  "      _sqlStatementBuilder.SetOperationCombinedStatements.Add(SqlStatementModelObjectMother.CreateSetOperationCombinedStatement()); " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,ResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\ResultOperatorHandlerTest.cs,MoveCurrentStatementToSqlTable,The length of the statement  "            SqlExpressionTreeComparer.CheckAreEqualTrees (new NamedExpression (null' originalStatement.SelectProjection)' sqlStatement.SelectProjection); " is 141.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,ResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\ResultOperatorHandlerTest.cs,MoveCurrentStatementToSqlTable,The length of the statement  "      _handler.MoveCurrentStatementToSqlTable (_statementBuilder' _context' tableGenerator' _stageMock' someOrderingExtractionPolicy); " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,ResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\ResultOperatorHandlerTest.cs,MoveCurrentStatementToSqlTable,The length of the statement  "      var mappedItemExpression = _context.GetExpressionMapping (((StreamedSequenceInfo) originalStatement.DataInfo).ItemExpression); " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,ResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\ResultOperatorHandlerTest.cs,EnsureNoSetOperations_WithSetOperations,The length of the statement  "      _statementBuilder.SetOperationCombinedStatements.Add(SqlStatementModelObjectMother.CreateSetOperationCombinedStatement()); " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,SingleResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\SingleResultOperatorHandlerTest.cs,HandleResultOperator_SingleAfterTopExpression,The length of the statement  "      Assert.That (((SqlTable) _sqlStatementBuilder.SqlTables[0]).TableInfo' Is.TypeOf (typeof (ResolvedSubStatementTableInfo))); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,SingleResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\SingleResultOperatorHandlerTest.cs,HandleResultOperator_SingleAfterGroupExpression,The length of the statement  "      Assert.That (((SqlTable) _sqlStatementBuilder.SqlTables[0]).TableInfo' Is.TypeOf (typeof (ResolvedSubStatementTableInfo))); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,SingleResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\SingleResultOperatorHandlerTest.cs,HandleResultOperator_SingleAfterSkipExpression,The length of the statement  "                _sqlStatementBuilder.RowNumberSelector' Expression.Add (_sqlStatementBuilder.CurrentRowNumberOffset' new SqlLiteralExpression(2))); " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,SkipResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\SkipResultOperatorHandlerTest.cs,HandleResultOperator_SkipAfterSetOperations_MovesStatementToSubStatement,The length of the statement  "      _sqlStatementBuilder.SetOperationCombinedStatements.Add (SqlStatementModelObjectMother.CreateSetOperationCombinedStatement()); " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,SkipResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\SkipResultOperatorHandlerTest.cs,HandleResultOperator_AddsMappingForItemExpression,The length of the statement  "      Assert.That (_context.GetExpressionMapping (originalItemExpression)' Is.EqualTo (_sqlStatementBuilder.SelectProjection)); " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,SumResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\SumResultOperatorHandlerTest.cs,SetUp,The length of the statement  "      _stage = new DefaultSqlPreparationStage (new CompoundMethodCallTransformerProvider ()' new ResultOperatorHandlerRegistry ()' _generator); " is 137.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,SumResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\SumResultOperatorHandlerTest.cs,HandleResultOperator,The length of the statement  "      Assert.That (((AggregationExpression) _sqlStatementBuilder.SelectProjection).AggregationModifier' Is.EqualTo (AggregationModifier.Sum)); " is 136.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,TakeResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\TakeResultOperatorHandlerTest.cs,HandleResultOperator_ConstantExpression,The length of the statement  "      Assert.That (((StreamedSequenceInfo) _sqlStatementBuilder.DataInfo).DataType' Is.EqualTo (typeof (IQueryable<>).MakeGenericType (typeof (Cook)))); " is 146.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,TakeResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\TakeResultOperatorHandlerTest.cs,HandleResultOperator_NoConstantExpression,The length of the statement  "      Assert.That (((StreamedSequenceInfo) _sqlStatementBuilder.DataInfo).DataType' Is.EqualTo (typeof (IQueryable<>).MakeGenericType (typeof (Cook)))); " is 146.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,TakeResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\TakeResultOperatorHandlerTest.cs,HandleResultOperator_TakeAfterSetOperation,The length of the statement  "      _sqlStatementBuilder.SetOperationCombinedStatements.Add(SqlStatementModelObjectMother.CreateSetOperationCombinedStatement()); " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,TakeResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\TakeResultOperatorHandlerTest.cs,HandleResultOperator_TakeAfterSkipExpression,The length of the statement  "          _sqlStatementBuilder.RowNumberSelector' Expression.Add (_sqlStatementBuilder.CurrentRowNumberOffset' resultOperator.Count)); " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,TestChoiceResultOperator,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\TestChoiceResultOperator.cs,ExecuteInMemory,The length of the statement  "      return new StreamedValue (sequence.GetTypedSequence<T> ().First ()' (StreamedValueInfo) GetOutputDataInfo (sequence.DataInfo)); " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,AggregationExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\AggregationExpressionTest.cs,Accept_VisitorSupportingExpressionType,The length of the statement  "      ExtensionExpressionTestHelper.CheckAcceptForVisitorSupportingType<AggregationExpression' IAggregationExpressionVisitor> ( " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,NamedExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\NamedExpressionTest.cs,CreateNewExpressionWithNamedArguments_WithPropertyCalledGet,The length of the statement  "          TypeForNewExpression.GetConstructor (typeof (int))' new[] { new NamedExpression ("get_"' innerExpression) }' memberInfo); " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,NamedExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\NamedExpressionTest.cs,CreateNewExpressionWithNamedArguments_ArgumentsAlreadyNamedCorrectly_WithMembers,The length of the statement  "      var expression = Expression.New (TypeForNewExpression.GetConstructor (typeof (int))' new[] { innerExpression }' memberInfo); " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,NamedExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\NamedExpressionTest.cs,CreateNewExpressionWithNamedArguments_ArgumentsAlreadyNamedCorrectly_WithGetters,The length of the statement  "      var expression = Expression.New (TypeForNewExpression.GetConstructor (typeof (int))' new[] { innerExpression }' memberInfo); " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,NamedExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\NamedExpressionTest.cs,CreateNewExpressionWithNamedArguments_DedicatedArguments,The length of the statement  "      var expression = Expression.New (TypeForNewExpression.GetConstructor (typeof (int))' new[] { originalArgument }' memberInfo); " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,NamedExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\NamedExpressionTest.cs,CreateNewExpressionWithNamedArguments_DedicatedArguments,The length of the statement  "          TypeForNewExpression.GetConstructor (typeof (int))' new[] { new NamedExpression ("A"' processedArgument) }' memberInfo); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlGroupingSelectExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlGroupingSelectExpressionTest.cs,AddAggregationExpressionWithName,The length of the statement  "      SqlExpressionTreeComparer.CheckAreEqualTrees (expectedNamedExpression' _sqlGroupingSelectExpression.AggregationExpressions[1]); " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlGroupingSelectExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlGroupingSelectExpressionTest.cs,VisitChildren_ChangeAggregationExpression,The length of the statement  "      visitorMock.Expect (mock => mock.Visit (_sqlGroupingSelectExpression.AggregationExpressions[0])).Return (newAggregationExpression); " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlGroupingSelectExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlGroupingSelectExpressionTest.cs,VisitChildren_ChangeAggregationExpression,The length of the statement  "      Assert.That (((SqlGroupingSelectExpression) expression).AggregationExpressions' Is.EqualTo (new Expression[] { newAggregationExpression })); " is 140.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlGroupingSelectExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlGroupingSelectExpressionTest.cs,Accept_VisitorSupportingExpressionType,The length of the statement  "      ExtensionExpressionTestHelper.CheckAcceptForVisitorSupportingType<SqlGroupingSelectExpression' ISqlGroupingSelectExpressionVisitor> ( " is 133.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlGroupingSelectExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlGroupingSelectExpressionTest.cs,To_String,The length of the statement  "      Assert.That (result' Is.EqualTo ("GROUPING (KEY: \"key\"' ELEMENT: \"element\"' AGGREGATIONS: (\"agg1\"' \"agg2\" AS a1))")); " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlStatementBuilderTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlStatementBuilderTest.cs,GetSqlStatement_NoDataInfoSet,The length of the statement  "          Throws.InvalidOperationException.With.Message.EqualTo ("A DataInfo must be set before the SqlStatement can be retrieved.")); " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlStatementBuilderTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlStatementBuilderTest.cs,GetSqlStatement_NoSelectProjection,The length of the statement  "          Throws.InvalidOperationException.With.Message.EqualTo ("A SelectProjection must be set before the SqlStatement can be retrieved.")); " is 132.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlStatementBuilderTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlStatementBuilderTest.cs,RecalculateDataInfo_StreamedSequenceInfo,The length of the statement  "      statementBuilder.DataInfo = new StreamedSequenceInfo (typeof (IQueryable<>).MakeGenericType (typeof (Restaurant))' Expression.Constant (new Restaurant())); " is 155.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlStatementBuilderTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlStatementBuilderTest.cs,RecalculateDataInfo_StreamedSequenceInfo,The length of the statement  "      Assert.That (((StreamedSequenceInfo) statementBuilder.DataInfo).DataType' Is.EqualTo(typeof (IQueryable<>).MakeGenericType(typeof(string)))); " is 141.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlStatementBuilderTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlStatementBuilderTest.cs,ToString_AllProperties,The length of the statement  "              "SELECT DISTINCT TOP (10) 1 FROM [CookTable] [c]' [KitchenTable] [k] WHERE True GROUP BY \"group\" ORDER BY \"ordering\" ASC " " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlSubStatementExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSubStatementExpressionTest.cs,ConvertToSqlTable,The length of the statement  "          new SqlStatementBuilder { DataInfo = new StreamedSingleValueInfo (typeof (Cook)' false)' SelectProjection = selectProjection }. " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlSubStatementExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSubStatementExpressionTest.cs,ConvertToSqlTable_StreamedSequenceInfo,The length of the statement  "          new SqlStatementBuilder { DataInfo = new StreamedSequenceInfo(typeof (Cook[])' Expression.Constant(new Cook()))' SelectProjection = selectProjection }. " is 151.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlJoinedTableTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlJoinedTableTest.cs,ToString,The length of the statement  "      var joinedTable = new SqlJoinedTable (SqlStatementModelObjectMother.CreateUnresolvedJoinInfo_KitchenCook()' JoinSemantics.Left); " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlJoinedTableTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlJoinedTableTest.cs,ToString_WithJoins,The length of the statement  "      var joinedTable = new SqlJoinedTable (SqlStatementModelObjectMother.CreateUnresolvedJoinInfo_KitchenCook()' JoinSemantics.Left); " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlStatementTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlStatementTest.cs,Equals_DifferentSqlTables,The length of the statement  "      var sqlTable2 = new SqlTable (new ResolvedSimpleTableInfo (typeof (Kitchen)' "KitchenTable"' "k")' JoinSemantics.Inner); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlStatementTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlStatementTest.cs,DifferentAggregationModifier,The length of the statement  "      var selectProjectionWithCountAggregation = new AggregationExpression (typeof (int)' selectProjection' AggregationModifier.Count); " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlStatementTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlStatementTest.cs,Equals_AssertPropertyCount,The length of the statement  "      Assert.That (typeof (SqlStatement).GetProperties().Count()' Is.EqualTo (11)' "The implementation of Equals and GetHashCode has to be adapted."); " is 144.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlStatementTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlStatementTest.cs,CreateExpression_HasAggregationModifier,The length of the statement  "      var selectProjection = new AggregationExpression (typeof (double)' sqlStatementBuilder.SelectProjection' AggregationModifier.Max); " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlStatementTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlStatementTest.cs,ToString_AllProperties,The length of the statement  "              "SELECT DISTINCT TOP (10) 1 FROM [CookTable] [c]' [KitchenTable] [k] WHERE True GROUP BY \"group\" ORDER BY \"ordering\" ASC UNION (" " is 133.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlStatementModelObjectMother,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlStatementModelObjectMother.cs,CreateUnresolvedCollectionJoinInfo_RestaurantCooks,The length of the statement  "      return new UnresolvedCollectionJoinInfo (Expression.Constant (new Restaurant())' typeof (Restaurant).GetProperty ("Cooks")); " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlStatementModelObjectMother,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlStatementModelObjectMother.cs,CreateSqlColumn,The length of the statement  "      return new SqlColumnDefinitionExpression (type ?? typeof (int)' owningTableAlias ?? "t0"' column ?? "column"' isPrimaryKey); " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,SqlConvertedBooleanExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\SqlConvertedBooleanExpressionTest.cs,Initialization_InnerTypeMustBeInt32,The length of the statement  "              .With.Message.EqualTo ("The inner expression must be an expression of type Int32 or Nullable<Int32>.\r\nParameter name: expression")); " is 134.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,SqlConvertedBooleanExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\SqlConvertedBooleanExpressionTest.cs,Accept_VisitorSupportingExpressionType,The length of the statement  "      ExtensionExpressionTestHelper.CheckAcceptForVisitorSupportingType<SqlConvertedBooleanExpression' ISqlConvertedBooleanExpressionVisitor> ( " is 137.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,SqlConvertedBooleanExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\SqlConvertedBooleanExpressionTest.cs,Reduce_NonNullable,The length of the statement  "      var expectedResult = Expression.Convert (innerExpression' typeof (bool)' typeof (Convert).GetMethod ("ToBoolean"' new[] { typeof (int) })); " is 139.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,SqlConvertedBooleanExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\SqlConvertedBooleanExpressionTest.cs,Reduce_Nullable,The length of the statement  "          innerExpression' typeof (bool?)' typeof (BooleanUtility).GetMethod ("ConvertNullableIntToNullableBool"' new[] { typeof (int?) })); " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,SqlColumnReferenceExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\SqlColumnReferenceExpressionTest.cs,Accept_VisitorSupportingExpressionType,The length of the statement  "      ExtensionExpressionTestHelper.CheckAcceptForVisitorSupportingType<SqlColumnReferenceExpression' ISqlColumnExpressionVisitor> ( " is 126.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,SqlColumnReferenceExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\SqlColumnReferenceExpressionTest.cs,Accept_VisitorSupportingExpressionType_IResolvedSqlExpressionVisitor,The length of the statement  "      ExtensionExpressionTestHelper.CheckAcceptForVisitorSupportingType<SqlColumnReferenceExpression' IResolvedSqlExpressionVisitor> ( " is 128.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,SqlEntityReferenceExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\SqlEntityReferenceExpressionTest.cs,Initialize,The length of the statement  "      var entityReferenceExpression = new SqlEntityReferenceExpression (typeof (Cook)' "t"' null' _entityDefinitionExpression); " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,SqlEntityReferenceExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\SqlEntityReferenceExpressionTest.cs,Initialize,The length of the statement  "      var expectedColumn = new SqlColumnReferenceExpression (typeof (string)' "t"' "Name"' false' _entityDefinitionExpression); " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,SqlEntityReferenceExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\SqlEntityReferenceExpressionTest.cs,Initialize,The length of the statement  "      Assert.That (entityReferenceExpression.IdentityExpressionGenerator' Is.SameAs (_entityDefinitionExpression.IdentityExpressionGenerator)); " is 137.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,SqlEntityReferenceExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\SqlEntityReferenceExpressionTest.cs,GetColumn,The length of the statement  "      var entityReferenceExpression = new SqlEntityReferenceExpression (typeof (Cook)' "t"' null' _entityDefinitionExpression); " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,SqlEntityReferenceExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\SqlEntityReferenceExpressionTest.cs,GetColumn,The length of the statement  "      var exprectedresult = new SqlColumnReferenceExpression (typeof (string)' "t"' "Test"' false' _entityDefinitionExpression); " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,SqlEntityReferenceExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\SqlEntityReferenceExpressionTest.cs,CreateReference,The length of the statement  "      var entityReferenceExpression = new SqlEntityReferenceExpression (typeof (Cook)' "t"' null' _entityDefinitionExpression); " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,SqlEntityReferenceExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\SqlEntityReferenceExpressionTest.cs,Update,The length of the statement  "      var entityReferenceExpression = new SqlEntityReferenceExpression (typeof (Cook)' "t"' null' _entityDefinitionExpression); " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,SqlEntityReferenceExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\SqlEntityReferenceExpressionTest.cs,Update,The length of the statement  "      var exptectedResult = new SqlEntityReferenceExpression (typeof (Kitchen)' "f"' "testName"' _entityDefinitionExpression); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,SqlEntityConstantExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\SqlEntityConstantExpressionTest.cs,Accept_VisitorSupportingExpressionType,The length of the statement  "      ExtensionExpressionTestHelper.CheckAcceptForVisitorSupportingType<SqlEntityConstantExpression' IResolvedSqlExpressionVisitor> ( " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,ResolvedJoinInfoTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\ResolvedJoinInfoTest.cs,ToString,The length of the statement  "      var joinInfo = new ResolvedJoinInfo (foreignTableInfo' Expression.Equal (Expression.Constant (0)' Expression.Constant (1))); " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,SqlEntityDefinitionExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\SqlEntityDefinitionExpressionTest.cs,SetUp,The length of the statement  "      _entityExpression = new SqlEntityDefinitionExpression (typeof (Cook)' "t"' null' e => e.GetColumn (typeof (int)' "ID"' true)' _orginalColumns); " is 143.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,SqlEntityDefinitionExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\SqlEntityDefinitionExpressionTest.cs,VisitChildren_ChangeColumn,The length of the statement  "      var expression = (SqlEntityExpression) ExtensionExpressionTestHelper.CallVisitChildren (_entityExpression' visitorMock); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,SqlEntityDefinitionExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\SqlEntityDefinitionExpressionTest.cs,CreateReference,The length of the statement  "      var entityExpression = new SqlEntityDefinitionExpression (typeof (Cook)' "c"' null' e => e.GetColumn (typeof (int)' "ID"' true)' columns); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,SqlEntityDefinitionExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\SqlEntityDefinitionExpressionTest.cs,Update,The length of the statement  "      var entityExpression = new SqlEntityDefinitionExpression (typeof (Cook)' "c"' null' e => e.GetColumn (typeof (int)' "ID"' true)' columns); " is 138.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,SqlEntityDefinitionExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\SqlEntityDefinitionExpressionTest.cs,Update,The length of the statement  "      var expectedResult = new SqlEntityDefinitionExpression (typeof (Kitchen)' "f"' null' entityExpression.IdentityExpressionGenerator' columns); " is 140.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,SqlColumnDefinitionExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\SqlColumnDefinitionExpressionTest.cs,Accept_VisitorSupportingExpressionType,The length of the statement  "      ExtensionExpressionTestHelper.CheckAcceptForVisitorSupportingType<SqlColumnDefinitionExpression' ISqlColumnExpressionVisitor> ( " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,ResolvedSimpleTableInfoTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\ResolvedSimpleTableInfoTest.cs,ResolveReference,The length of the statement  "      Assert.That (mappingResolutionContext.GetSqlTableForEntityExpression ((SqlEntityExpression) result)' Is.SameAs (sqlTable)); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlCollectionExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlCollectionExpressionTest.cs,Accept_VisitorSupportingExpressionType,The length of the statement  "      ExtensionExpressionTestHelper.CheckAcceptForVisitorSupportingType<SqlCollectionExpression' ISqlCollectionExpressionVisitor> ( " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlConvertExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlConvertExpressionTest.cs,Accept_VisitorSupportingExpressionType,The length of the statement  "      ExtensionExpressionTestHelper.CheckAcceptForVisitorSupportingType<SqlConvertExpression' ISqlSpecificExpressionVisitor> ( " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlFunctionExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlFunctionExpressionTest.cs,Accept_VisitorSupportingExpressionType,The length of the statement  "      ExtensionExpressionTestHelper.CheckAcceptForVisitorSupportingType<SqlFunctionExpression' ISqlSpecificExpressionVisitor> ( " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlIsNotNullExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlIsNotNullExpressionTest.cs,Accept_VisitorSupportingExpressionType,The length of the statement  "      ExtensionExpressionTestHelper.CheckAcceptForVisitorSupportingType<SqlIsNotNullExpression' ISqlNullCheckExpressionVisitor> ( " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlIsNullExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlIsNullExpressionTest.cs,Accept_VisitorSupportingExpressionType,The length of the statement  "      ExtensionExpressionTestHelper.CheckAcceptForVisitorSupportingType<SqlIsNullExpression' ISqlNullCheckExpressionVisitor> ( " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlLikeExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlLikeExpressionTest.cs,Create_ArgumentIsNotNullAndNoConstantExpression,The length of the statement  "          new SqlLiteralExpression ("%")' rightExpression' typeof (string).GetMethod ("Concat"' new[] { typeof (string)' typeof (string) })); " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlLikeExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlLikeExpressionTest.cs,Create_ArgumentIsNotNullAndNoConstantExpression,The length of the statement  "          rightExpression' new SqlLiteralExpression ("%")' typeof (string).GetMethod ("Concat"' new[] { typeof (string)' typeof (string) })); " is 131.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlCaseExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlCaseExpressionTest.cs,SetUp,The length of the statement  "          new[] { new SqlCaseExpression.CaseWhenPair (_predicate1' _value1)' new SqlCaseExpression.CaseWhenPair (_predicate2' _value2) }' " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlCaseExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlCaseExpressionTest.cs,SetUp,The length of the statement  "          new[] { new SqlCaseExpression.CaseWhenPair (_predicate1' _nullableValue1)' new SqlCaseExpression.CaseWhenPair (_predicate2' _value2) }' " is 135.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlCaseExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlCaseExpressionTest.cs,Initialization_NoElseWithNonNullableType,The length of the statement  "          () => new SqlCaseExpression (typeof (string)' new[] { new SqlCaseExpression.CaseWhenPair (_predicate1' Expression.Constant ("x")) }' null)' " is 139.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlCaseExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlCaseExpressionTest.cs,Initialization_NonMatchingTypes,The length of the statement  "          () => new SqlCaseExpression (typeof (int)' new[] { new SqlCaseExpression.CaseWhenPair (_predicate1' Expression.Constant ("x")) }' _elseValue)' " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlCaseExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlCaseExpressionTest.cs,Initialization_NonMatchingTypes,The length of the statement  "          () => new SqlCaseExpression (typeof (int)' new[] { new SqlCaseExpression.CaseWhenPair (_predicate1' _value1) }' Expression.Constant ("a"))' " is 139.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlCaseExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlCaseExpressionTest.cs,Initialization_NonMatchingTypes,The length of the statement  "          () => new SqlCaseExpression (typeof (int?)' new[] { new SqlCaseExpression.CaseWhenPair (_predicate1' _value1) }' _elseValue)' Throws.Nothing); " is 142.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlCaseExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlCaseExpressionTest.cs,Initialization_NonMatchingTypes,The length of the statement  "          () => new SqlCaseExpression (typeof (int?)' new[] { new SqlCaseExpression.CaseWhenPair (_predicate1' _value1) }' null)' Throws.Nothing); " is 136.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlCaseExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlCaseExpressionTest.cs,VisitChildren_ChangedWhen,The length of the statement  "      var result = (SqlCaseExpression) ExtensionExpressionTestHelper.CallVisitChildren (_caseExpressionWithElse' visitorMock); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlCaseExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlCaseExpressionTest.cs,VisitChildren_ChangedThen,The length of the statement  "      var result = (SqlCaseExpression) ExtensionExpressionTestHelper.CallVisitChildren (_caseExpressionWithElse' visitorMock); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlCaseExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlCaseExpressionTest.cs,VisitChildren_ChangedElse,The length of the statement  "      var result = (SqlCaseExpression) ExtensionExpressionTestHelper.CallVisitChildren (_caseExpressionWithElse' visitorMock); " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlCaseExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlCaseExpressionTest.cs,Update_NoChanges,The length of the statement  "      var resultWithoutElse = _caseExpressionWithoutElse.Update (_caseExpressionWithoutElse.Cases' _caseExpressionWithoutElse.ElseCase); " is 130.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlCaseExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlCaseExpressionTest.cs,Update_ChangedCases,The length of the statement  "      var newCases = Array.AsReadOnly (new[] { new SqlCaseExpression.CaseWhenPair (Expression.Constant (true)' Expression.Constant (1)) }); " is 133.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlRowNumberExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlRowNumberExpressionTest.cs,Accept_VisitorSupportingExpressionType,The length of the statement  "      ExtensionExpressionTestHelper.CheckAcceptForVisitorSupportingType<SqlRowNumberExpression' ISqlSpecificExpressionVisitor> ( " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlLiteralExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlLiteralExpressionTest.cs,Accept_VisitorSupportingExpressionType,The length of the statement  "      ExtensionExpressionTestHelper.CheckAcceptForVisitorSupportingType<SqlLiteralExpression' ISqlSpecificExpressionVisitor> ( " is 120.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Unresolved,JoinConditionExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Unresolved\JoinConditionExpressionTest.cs,Accept_VisitorSupportingExpressionType,The length of the statement  "      ExtensionExpressionTestHelper.CheckAcceptForVisitorSupportingType<JoinConditionExpression' IJoinConditionExpressionVisitor> ( " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Unresolved,JoinConditionExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Unresolved\JoinConditionExpressionTest.cs,ToString_Resolved,The length of the statement  "      var resolvedJoinInfo = new ResolvedJoinInfo (new ResolvedSimpleTableInfo (typeof (Cook)' "CookTable"' "c")' Expression.Constant (true)); " is 136.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Unresolved,UnresolvedJoinInfoTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Unresolved\UnresolvedJoinInfoTest.cs,ItemType_CardinalityOne,The length of the statement  "      var joinInfo = new UnresolvedJoinInfo (_entityExpression' typeof (Cook).GetProperty ("Substitution")' JoinCardinality.One); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Unresolved,UnresolvedJoinInfoTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Unresolved\UnresolvedJoinInfoTest.cs,ItemType_CardinalityMany,The length of the statement  "      var joinInfo = new UnresolvedJoinInfo (entityExpression' typeof (Restaurant).GetProperty ("Cooks")' JoinCardinality.Many); " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Unresolved,SqlEntityRefMemberExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Unresolved\SqlEntityRefMemberExpressionTest.cs,Accept_VisitorSupportingExpressionType,The length of the statement  "      ExtensionExpressionTestHelper.CheckAcceptForVisitorSupportingType<SqlEntityRefMemberExpression' ISqlEntityRefMemberExpressionVisitor> ( " is 135.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Unresolved,SqlTableReferenceExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Unresolved\SqlTableReferenceExpressionTest.cs,SetUp,The length of the statement  "      _tableReferenceExpression = new SqlTableReferenceExpression (SqlStatementModelObjectMother.CreateSqlTable(typeof(Cook))); " is 121.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Unresolved,SqlTableReferenceExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Unresolved\SqlTableReferenceExpressionTest.cs,Accept_VisitorSupportingExpressionType,The length of the statement  "      ExtensionExpressionTestHelper.CheckAcceptForVisitorSupportingType<SqlTableReferenceExpression' ISqlTableReferenceExpressionVisitor> ( " is 133.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Unresolved,SqlTableReferenceExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Unresolved\SqlTableReferenceExpressionTest.cs,ToString_SqlJoinedTableWithUnresolvedJoinInfo,The length of the statement  "      var sqlTable = new SqlJoinedTable (SqlStatementModelObjectMother.CreateUnresolvedJoinInfo_KitchenCook()' JoinSemantics.Left); " is 125.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.TestDomain,AssistantCountTransformer,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\TestDomain\Cook.cs,Transform,The length of the statement  "        var assistantsMember = Expression.MakeMemberAccess (methodCallExpression.Object' typeof (Cook).GetProperty ("Assistants")); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.TestDomain,IndexerTransformer,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\TestDomain\Cook.cs,Transform,The length of the statement  "        var assistantsMember = Expression.MakeMemberAccess (methodCallExpression.Object' typeof (Cook).GetProperty ("Assistants")); " is 123.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.TestDomain,IndexerTransformer,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\TestDomain\Cook.cs,Transform,The length of the statement  "        var takenAssistants = Expression.Call (typeof (Enumerable)' "Take"' new[] { typeof (Cook) }' assistantsMember' methodCallExpression.Arguments.Single()); " is 152.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.Utilities,RegistryBaseTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\Utilities\RegistryBaseTest.cs,CreateDefault_GetItemExact,The length of the statement  "      Assert.That (_registry.GetItemExact (typeof (TestRegistryImplementation))' Is.TypeOf (typeof (TestRegistryImplementation))); " is 124.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.Utilities,ReflectionUtilityTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\Utilities\ReflectionUtilityTest.cs,GetItemTypeOfClosedGenericIEnumerable_ArgumentImplementsIEnumerable,The length of the statement  "      Assert.That (ReflectionUtility.GetItemTypeOfClosedGenericIEnumerable (typeof (List<int>)' "x")' Is.SameAs (typeof (int))); " is 122.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.Utilities,ReflectionUtilityTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\Utilities\ReflectionUtilityTest.cs,GetItemTypeOfClosedGenericIEnumerable_ArgumentIsIEnumerable,The length of the statement  "      Assert.That (ReflectionUtility.GetItemTypeOfClosedGenericIEnumerable (typeof (IEnumerable<int>)' "x")' Is.SameAs (typeof (int))); " is 129.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.Utilities,ReflectionUtilityTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\Utilities\ReflectionUtilityTest.cs,GetItemTypeOfClosedGenericIEnumerable_ArgumentIsIEnumerable,The length of the statement  "      Assert.That (ReflectionUtility.GetItemTypeOfClosedGenericIEnumerable (typeof (IEnumerable<IEnumerable<string>>)' "x")' Is.SameAs (typeof (IEnumerable<string>))); " is 161.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.Utilities,ReflectionUtilityTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\Utilities\ReflectionUtilityTest.cs,GetItemTypeOfClosedGenericIEnumerable_NonGenericIEnumerable_ThrowsArgumentException,The length of the statement  "              "Expected a closed generic type implementing IEnumerable<T>' but found 'System.Collections.ArrayList'.\r\nParameter name: x")); " is 127.
Long Statement,Remotion.Linq.SqlBackend.UnitTests.Utilities,ReflectionUtilityTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\Utilities\ReflectionUtilityTest.cs,GetMemberReturnType_Other_Throws,The length of the statement  "          Throws.ArgumentException.With.Message.EqualTo ("Argument must be FieldInfo' PropertyInfo' or MethodInfo.\r\nParameter name: member")); " is 134.
Complex Conditional,Remotion.Development.UnitTesting,PrivateInvoke,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\App_Packages\Remotion.Development.UnitTesting.PrivateInvoke.Sources.1.15.23.0\PrivateInvoke.cs,GetMethodBaseInternal,The conditional expression  "! (    (argument == null && ! parameterType.IsValueType)        // null is a valid argument for any reference type                        || (argument != null && parameterType.IsAssignableFrom (argument.GetType())))"  is complex.
Magic Number,Remotion.Development.UnitTesting.ObjectMothers,BooleanObjectMother,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\App_Packages\Remotion.Development.BooleanObjectMother.Sources.1.25.23\BooleanObjectMother.cs,GetRandomBoolean,The following statement contains a magic number: return s_random.Next (2) == 1;
Magic Number,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub_CreateDatabaseUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub_CreateDatabaseUtility.cs,GetSampleDataEntities,The following statement contains a magic number: var company1 = new Company { ID = 1' MainRestaurant = null' MainKitchen = null' DateOfIncorporation = new DateTime (2001' 01' 13)};
Magic Number,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub_CreateDatabaseUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub_CreateDatabaseUtility.cs,GetSampleDataEntities,The following statement contains a magic number: var company1 = new Company { ID = 1' MainRestaurant = null' MainKitchen = null' DateOfIncorporation = new DateTime (2001' 01' 13)};
Magic Number,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub_CreateDatabaseUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub_CreateDatabaseUtility.cs,GetSampleDataEntities,The following statement contains a magic number: var company2 = new Company { ID = 2' MainRestaurant = null' MainKitchen = null' DateOfIncorporation = new DateTime (1886' 02' 20) };
Magic Number,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub_CreateDatabaseUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub_CreateDatabaseUtility.cs,GetSampleDataEntities,The following statement contains a magic number: var company2 = new Company { ID = 2' MainRestaurant = null' MainKitchen = null' DateOfIncorporation = new DateTime (1886' 02' 20) };
Magic Number,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub_CreateDatabaseUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub_CreateDatabaseUtility.cs,GetSampleDataEntities,The following statement contains a magic number: var company2 = new Company { ID = 2' MainRestaurant = null' MainKitchen = null' DateOfIncorporation = new DateTime (1886' 02' 20) };
Magic Number,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub_CreateDatabaseUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub_CreateDatabaseUtility.cs,GetSampleDataEntities,The following statement contains a magic number: var company2 = new Company { ID = 2' MainRestaurant = null' MainKitchen = null' DateOfIncorporation = new DateTime (1886' 02' 20) };
Magic Number,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub_CreateDatabaseUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub_CreateDatabaseUtility.cs,GetSampleDataEntities,The following statement contains a magic number: var restaurant2 = new Restaurant { ID = 2 };
Magic Number,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub_CreateDatabaseUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub_CreateDatabaseUtility.cs,GetSampleDataEntities,The following statement contains a magic number: var kitchen1 = new Kitchen                       {                           ID = 1'                           Name = "Jamie's Kitchen"'                           Cook = null'                           LastCleaningDay = new DateTime (2012' 5' 13)'                           LastInspectionScore = 80'                           PassedLastInspection = true'                           Restaurant = restaurant1'                           RoomNumber = 17                       };
Magic Number,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub_CreateDatabaseUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub_CreateDatabaseUtility.cs,GetSampleDataEntities,The following statement contains a magic number: var kitchen1 = new Kitchen                       {                           ID = 1'                           Name = "Jamie's Kitchen"'                           Cook = null'                           LastCleaningDay = new DateTime (2012' 5' 13)'                           LastInspectionScore = 80'                           PassedLastInspection = true'                           Restaurant = restaurant1'                           RoomNumber = 17                       };
Magic Number,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub_CreateDatabaseUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub_CreateDatabaseUtility.cs,GetSampleDataEntities,The following statement contains a magic number: var kitchen1 = new Kitchen                       {                           ID = 1'                           Name = "Jamie's Kitchen"'                           Cook = null'                           LastCleaningDay = new DateTime (2012' 5' 13)'                           LastInspectionScore = 80'                           PassedLastInspection = true'                           Restaurant = restaurant1'                           RoomNumber = 17                       };
Magic Number,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub_CreateDatabaseUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub_CreateDatabaseUtility.cs,GetSampleDataEntities,The following statement contains a magic number: var kitchen1 = new Kitchen                       {                           ID = 1'                           Name = "Jamie's Kitchen"'                           Cook = null'                           LastCleaningDay = new DateTime (2012' 5' 13)'                           LastInspectionScore = 80'                           PassedLastInspection = true'                           Restaurant = restaurant1'                           RoomNumber = 17                       };
Magic Number,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub_CreateDatabaseUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub_CreateDatabaseUtility.cs,GetSampleDataEntities,The following statement contains a magic number: var kitchen1 = new Kitchen                       {                           ID = 1'                           Name = "Jamie's Kitchen"'                           Cook = null'                           LastCleaningDay = new DateTime (2012' 5' 13)'                           LastInspectionScore = 80'                           PassedLastInspection = true'                           Restaurant = restaurant1'                           RoomNumber = 17                       };
Magic Number,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub_CreateDatabaseUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub_CreateDatabaseUtility.cs,GetSampleDataEntities,The following statement contains a magic number: var kitchen2 = new Kitchen                       {                           ID = 2'                           Name = "Perfumerie"'                           Cook = null'                           LastCleaningDay = null'                           LastInspectionScore = null'                           PassedLastInspection = null'                           Restaurant = restaurant1'                           RoomNumber = 1                       };
Magic Number,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub_CreateDatabaseUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub_CreateDatabaseUtility.cs,GetSampleDataEntities,The following statement contains a magic number: var kitchen3 = new Kitchen                       {                           ID = 3'                           Name = "Bocuse's Kitchen"'                           Cook = null'                           LastCleaningDay = DateTime.Today'                           LastInspectionScore = 100'                           PassedLastInspection = true'                           Restaurant = restaurant2'                           RoomNumber = 2                       };
Magic Number,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub_CreateDatabaseUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub_CreateDatabaseUtility.cs,GetSampleDataEntities,The following statement contains a magic number: var kitchen3 = new Kitchen                       {                           ID = 3'                           Name = "Bocuse's Kitchen"'                           Cook = null'                           LastCleaningDay = DateTime.Today'                           LastInspectionScore = 100'                           PassedLastInspection = true'                           Restaurant = restaurant2'                           RoomNumber = 2                       };
Magic Number,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub_CreateDatabaseUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub_CreateDatabaseUtility.cs,GetSampleDataEntities,The following statement contains a magic number: var kitchen3 = new Kitchen                       {                           ID = 3'                           Name = "Bocuse's Kitchen"'                           Cook = null'                           LastCleaningDay = DateTime.Today'                           LastInspectionScore = 100'                           PassedLastInspection = true'                           Restaurant = restaurant2'                           RoomNumber = 2                       };
Magic Number,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub_CreateDatabaseUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub_CreateDatabaseUtility.cs,GetSampleDataEntities,The following statement contains a magic number: var knife1 = new Knife { ID = new MetaID (1' "KnifeClass")' Sharpness = 10.0 };
Magic Number,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub_CreateDatabaseUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub_CreateDatabaseUtility.cs,GetSampleDataEntities,The following statement contains a magic number: var knife2 = new Knife { ID = new MetaID (2' "DerivedKnifeClass")' Sharpness = 5.0 };
Magic Number,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub_CreateDatabaseUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub_CreateDatabaseUtility.cs,GetSampleDataEntities,The following statement contains a magic number: var knife2 = new Knife { ID = new MetaID (2' "DerivedKnifeClass")' Sharpness = 5.0 };
Magic Number,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub_CreateDatabaseUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub_CreateDatabaseUtility.cs,GetSampleDataEntities,The following statement contains a magic number: var cook2 = new Cook                    {                        ID = 2'                        FirstName = "Jamie"'                        Name = "Oliver"'                        IsStarredCook = true'                        IsFullTimeCook = false'                        Substitution = null'                        Kitchen = kitchen1'                        KnifeID = knife2.ID'                        Knife = knife2                    };
Magic Number,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub_CreateDatabaseUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub_CreateDatabaseUtility.cs,GetSampleDataEntities,The following statement contains a magic number: var cook3 = new Cook                    {                        ID = 3'                        FirstName = "Hugo"'                        Name = "Boss"'                        IsStarredCook = false'                        IsFullTimeCook = true'                        Substitution = cook1'                        Kitchen = kitchen2                    };
Magic Number,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub_CreateDatabaseUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub_CreateDatabaseUtility.cs,GetSampleDataEntities,The following statement contains a magic number: var chef1 = new Chef                    {                        ID = 4'                        FirstName = "Paul"'                        Name = "Bocuse"'                        IsStarredCook = true'                        IsFullTimeCook = false'                        Substitution = cook1'                        Kitchen = kitchen3'                        LetterOfRecommendation = "A really great chef!"                    };
Magic Number,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub_CreateDatabaseUtility,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub_CreateDatabaseUtility.cs,GetSampleDataEntities,The following statement contains a magic number: var chef2 = new Chef                    {                        ID = 5'                        FirstName = "Caul"'                        Name = "Bopuse"'                        IsStarredCook = false'                        IsFullTimeCook = true'                        Substitution = cook2'                        Kitchen = null'                        LetterOfRecommendation = null                    };
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,CompoundExpressionComparisonSplitterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\CompoundExpressionComparisonSplitterTest.cs,SplitPotentialCompoundComparison_BinaryExpression_NewExpressionsWithDifferentCtors_ThrowsException,The following statement contains a magic number: var rightArgumentExpression2 = Expression.Constant (2);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,CompoundExpressionComparisonSplitterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\CompoundExpressionComparisonSplitterTest.cs,SplitPotentialCompoundComparison_BinaryExpression_NewExpressionWithTwoArguments_Equal_ReturnsBinaryExpressionSequence,The following statement contains a magic number: var leftArgumentExpression2 = Expression.Constant (2);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,CompoundExpressionComparisonSplitterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\CompoundExpressionComparisonSplitterTest.cs,SplitPotentialCompoundComparison_BinaryExpression_NewExpressionWithTwoArguments_Equal_ReturnsBinaryExpressionSequence,The following statement contains a magic number: var rightArgumentExpression2 = Expression.Constant (2);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,CompoundExpressionComparisonSplitterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\CompoundExpressionComparisonSplitterTest.cs,SplitPotentialCompoundComparison_BinaryExpression_NewExpressionWithTwoArguments_NotEqual_ReturnsBinaryExpressionSequence,The following statement contains a magic number: var leftArgumentExpression2 = Expression.Constant (2);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,CompoundExpressionComparisonSplitterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\CompoundExpressionComparisonSplitterTest.cs,SplitPotentialCompoundComparison_BinaryExpression_NewExpressionWithTwoArguments_NotEqual_ReturnsBinaryExpressionSequence,The following statement contains a magic number: var rightArgumentExpression2 = Expression.Constant (2);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,CompoundExpressionComparisonSplitterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\CompoundExpressionComparisonSplitterTest.cs,SplitPotentialCompoundComparison_BinaryExpression_NewExpressionOnLeftSideWithTwoPropertyInfoMembers_Equal,The following statement contains a magic number: var leftArgumentExpression2 = Expression.Constant (2);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,CompoundExpressionComparisonSplitterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\CompoundExpressionComparisonSplitterTest.cs,SplitPotentialCompoundComparison_BinaryExpression_NewExpressionOnLeftSideWithTwoPropertyInfoMembers_NotEqual,The following statement contains a magic number: var leftArgumentExpression2 = Expression.Constant (2);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,CompoundExpressionComparisonSplitterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\CompoundExpressionComparisonSplitterTest.cs,SplitPotentialCompoundComparison_BinaryExpression_NewExpressionOnLeftSideWithTwoMethodInfoMembers,The following statement contains a magic number: var leftArgumentExpression2 = Expression.Constant (2);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,CompoundExpressionComparisonSplitterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\CompoundExpressionComparisonSplitterTest.cs,SplitPotentialCompoundComparison_SqlIsNullExpression_ExpandsNewExpression_ByCheckingAllArguments,The following statement contains a magic number: var arg2 = Expression.Constant (2);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,CompoundExpressionComparisonSplitterTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\CompoundExpressionComparisonSplitterTest.cs,SplitPotentialCompoundComparison_SqlIsNotNullExpression_ExpandsNewExpression_ByCheckingAllArguments,The following statement contains a magic number: var arg2 = Expression.Constant (2);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,MemberAccessResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\MemberAccessResolverTest.cs,ResolveMemberAccess_OnNewExpression_PropertyInfo,The following statement contains a magic number: var newExpression = Expression.New (            constructorInfo'            new[] { new NamedExpression ("value"' new SqlLiteralExpression (1))' new NamedExpression ("value"' new SqlLiteralExpression (2)) }'            typeof (TypeForNewExpression).GetMethod ("get_A")' typeof (TypeForNewExpression).GetMethod ("get_B"));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,MemberAccessResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\MemberAccessResolverTest.cs,ResolveMemberAccess_OnNewExpression_FieldInfo,The following statement contains a magic number: var newExpression = Expression.New (            constructorInfo'            new[] { new NamedExpression ("value"' new SqlLiteralExpression (1))' new NamedExpression ("value"' new SqlLiteralExpression (2)) }'            typeof (TypeForNewExpression).GetField("C")' typeof (TypeForNewExpression).GetMethod ("get_B"));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,MemberAccessResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\MemberAccessResolverTest.cs,ResolveMemberAccess_OnNewExpression_NoMembers,The following statement contains a magic number: var newExpression = Expression.New (            constructorInfo'            new[] { new NamedExpression ("value"' new SqlLiteralExpression (1))' new NamedExpression ("value"' new SqlLiteralExpression (2)) });
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,MemberAccessResolverTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\MemberAccessResolverTest.cs,ResolveMemberAccess_OnSqlEntityConstantExpression,The following statement contains a magic number: var expression = new SqlEntityConstantExpression (typeof (Cook)' new Cook()' Expression.Constant (14));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,NamedExpressionCombinerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\NamedExpressionCombinerTest.cs,ProcessNames_MethodCallExpression,The following statement contains a magic number: var expression = Expression.Call (instance' MemberInfoFromExpressionUtility.GetMethod (() => 5.ToString ("arg"))' argument);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,NamedExpressionCombinerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\NamedExpressionCombinerTest.cs,ProcessNames_MethodCallExpression_NamedExpressionsInsideArgumentsCombined,The following statement contains a magic number: var expression = Expression.Call (            new NamedExpression ("inner"' instance)'            MemberInfoFromExpressionUtility.GetMethod (() => 5.ToString ("arg"))'            new NamedExpression ("inner"' argument));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_NonBoolBinaryExpression_Unchanged,The following statement contains a magic number: var binary = BinaryExpression.And (Expression.Constant (5)' Expression.Constant (5));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_NonBoolBinaryExpression_Unchanged,The following statement contains a magic number: var binary = BinaryExpression.And (Expression.Constant (5)' Expression.Constant (5));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_NonBoolBinaryExpression_OperandsGetSingleValueSemantics_SingleValueAllowed,The following statement contains a magic number: var binary = BinaryExpression.And (Expression.Convert (Expression.Not (Expression.Constant (true))' typeof (int))' Expression.Constant (5));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitBinaryExpression_NonBoolBinaryExpression_OperandsGetSingleValueSemantics_SingleValueAllowed,The following statement contains a magic number: var expectedExpression =            BinaryExpression.And (                Expression.Convert (                    new SqlConvertedBooleanExpression (                        GetNonNullablePredicateAsValueExpression (Expression.Not (Expression.Equal (Expression.Constant (1)' new SqlLiteralExpression (1)))))'                    typeof (int))'                Expression.Constant (5));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitUnaryExpression_OtherUnaryExpression_Unchanged,The following statement contains a magic number: var unaryExpression = Expression.Not (Expression.Constant (5));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,VisitSqlEntityConstantExpression_ValueRequired,The following statement contains a magic number: var expression = new SqlEntityConstantExpression (typeof (int)' 5' Expression.Constant (1));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,SqlInExpression_WithInvalidChildren,The following statement contains a magic number: var expression = new SqlInExpression (newExpression' Expression.Constant (new[] { 1' 2' 3 }));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,SqlContextExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\SqlContextExpressionVisitorTest.cs,SqlInExpression_WithInvalidChildren,The following statement contains a magic number: var expression = new SqlInExpression (newExpression' Expression.Constant (new[] { 1' 2' 3 }));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitMemberExpression_RevisitsResult,The following statement contains a magic number: var fakeResult2 = new SqlLiteralExpression (7);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitBinaryExpression,The following statement contains a magic number: var fakeResolvedLeft = new SqlLiteralExpression (2);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitBinaryExpression,The following statement contains a magic number: var fakeResolvedRight = new SqlLiteralExpression (3);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitBinaryExpression,The following statement contains a magic number: var fakeResolvedEntityComparison = Expression.Equal (Expression.Constant (2)' Expression.Constant (3));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitBinaryExpression,The following statement contains a magic number: var fakeResolvedEntityComparison = Expression.Equal (Expression.Constant (2)' Expression.Constant (3));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitBinaryExpression,The following statement contains a magic number: var fakeSplitComparison = Expression.Equal (Expression.Constant (4)' Expression.Constant (5));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitBinaryExpression,The following statement contains a magic number: var fakeSplitComparison = Expression.Equal (Expression.Constant (4)' Expression.Constant (5));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitBinaryExpression_RevisitingTerminatesAfterInnerChanges_WithoutOuterChanges,The following statement contains a magic number: var fakeResolvedLeft = new SqlLiteralExpression (2);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitBinaryExpression_RevisitingTerminatesAfterInnerChanges_WithoutOuterChanges,The following statement contains a magic number: var fakeResolvedRight = new SqlLiteralExpression (3);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitNamedExpression,The following statement contains a magic number: var fakeCombinedExpression = new NamedExpression ("Name2"' Expression.Constant (2));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitNamedExpression,The following statement contains a magic number: var fakeResolvedInnerExpression2 = new SqlLiteralExpression (3);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitSqlInExpression,The following statement contains a magic number: var fakeResolvedLeft = new SqlLiteralExpression (2);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitSqlInExpression,The following statement contains a magic number: var fakeResolvedRight = new SqlLiteralExpression (3);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitSqlInExpression,The following statement contains a magic number: var fakeResolvedInExpression = new SqlInExpression (Expression.Constant (4)' Expression.Constant (5));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitSqlInExpression,The following statement contains a magic number: var fakeResolvedInExpression = new SqlInExpression (Expression.Constant (4)' Expression.Constant (5));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitSqlInExpression_RevisitingTerminatesAfterInnerChanges_WithoutOuterChanges,The following statement contains a magic number: var fakeResolvedLeft = new SqlLiteralExpression (2);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitSqlInExpression_RevisitingTerminatesAfterInnerChanges_WithoutOuterChanges,The following statement contains a magic number: var fakeResolvedRight = new SqlLiteralExpression (3);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitSqlIsNullExpression,The following statement contains a magic number: var fakeResolvedEntityComparison = new SqlIsNullExpression (Expression.Constant (2));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitSqlIsNullExpression,The following statement contains a magic number: var fakeSplitCompoundComparison = new SqlIsNullExpression (Expression.Constant (3));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitSqlIsNotNullExpression,The following statement contains a magic number: var fakeResolvedEntityComparison = new SqlIsNotNullExpression (Expression.Constant (2));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.MappingResolution,ResolvingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolution\ResolvingExpressionVisitorTest.cs,VisitSqlIsNotNullExpression,The following statement contains a magic number: var fakeSplitCompoundComparison = new SqlIsNotNullExpression (Expression.Constant (3));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,CompoundMemberSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\CompoundMemberSqlBackendIntegrationTest.cs,SelectingMultipleCompoundMembers,The following statement contains a magic number: CheckQuery (            from c in Cooks            from c2 in Cooks            select new { ID1 = c.KnifeID' ID2 = c2.KnifeID }'            "SELECT [t0].[KnifeID] AS [ID1_Value]'[t0].[KnifeClassID] AS [ID1_ClassID]'[t1].[KnifeID] AS [ID2_Value]'[t1].[KnifeClassID] AS [ID2_ClassID] "            + "FROM [CookTable] AS [t0] CROSS JOIN [CookTable] AS [t1]"'            AddNewMetaIDMemberDecoration (                row => (object)                       new                       {                           ID1 = new MetaID (row.GetValue<int> (new ColumnID ("ID1_Value"' 0))' row.GetValue<string> (new ColumnID ("ID1_ClassID"' 1)))'                           ID2 = new MetaID (row.GetValue<int> (new ColumnID ("ID2_Value"' 2))' row.GetValue<string> (new ColumnID ("ID2_ClassID"' 3)))                       }));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,CompoundMemberSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\CompoundMemberSqlBackendIntegrationTest.cs,SelectingMultipleCompoundMembers,The following statement contains a magic number: CheckQuery (            from c in Cooks            from c2 in Cooks            select new { ID1 = c.KnifeID' ID2 = c2.KnifeID }'            "SELECT [t0].[KnifeID] AS [ID1_Value]'[t0].[KnifeClassID] AS [ID1_ClassID]'[t1].[KnifeID] AS [ID2_Value]'[t1].[KnifeClassID] AS [ID2_ClassID] "            + "FROM [CookTable] AS [t0] CROSS JOIN [CookTable] AS [t1]"'            AddNewMetaIDMemberDecoration (                row => (object)                       new                       {                           ID1 = new MetaID (row.GetValue<int> (new ColumnID ("ID1_Value"' 0))' row.GetValue<string> (new ColumnID ("ID1_ClassID"' 1)))'                           ID2 = new MetaID (row.GetValue<int> (new ColumnID ("ID2_Value"' 2))' row.GetValue<string> (new ColumnID ("ID2_ClassID"' 3)))                       }));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,CompoundMemberSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\CompoundMemberSqlBackendIntegrationTest.cs,SelectingEntityWithCompoundID,The following statement contains a magic number: CheckQuery (            from k in Knives select k'            "SELECT [t0].[ID]'[t0].[ClassID]'[t0].[Sharpness] FROM [KnifeTable] AS [t0]"'            row => (object) row.GetEntity<Knife> (new ColumnID ("ID"' 0)' new ColumnID ("ClassID"' 1)' new ColumnID ("Sharpness"' 2)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,DelegateInvocationSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\DelegateInvocationSqlBackendIntegrationTest.cs,InvocationExpression_WithCustomExpressions,The following statement contains a magic number: Expression<Func<Cook' bool>> predicate1 = c => c.ID > 100;
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,DelegateInvocationSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\DelegateInvocationSqlBackendIntegrationTest.cs,InvocationExpression_WithCustomExpressions,The following statement contains a magic number: CheckQuery (            Cooks.Where (combinedPredicate).Select (c => c.FirstName)'            "SELECT [t0].[FirstName] AS [value] FROM [CookTable] AS [t0] WHERE (([t0].[ID] > @1) AND ([t0].[Name] IS NOT NULL))"'            new CommandParameter ("@1"' 100)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,DelegateInvocationSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\DelegateInvocationSqlBackendIntegrationTest.cs,CompileInvokeCombination,The following statement contains a magic number: Expression<Func<Cook' bool>> predicate1 = c => c.ID > 100;
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,DelegateInvocationSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\DelegateInvocationSqlBackendIntegrationTest.cs,CompileInvokeCombination,The following statement contains a magic number: CheckQuery (            Cooks.Where (c => predicate1.Compile () (c) && predicate2.Compile () (c)).Select (c => c.FirstName)'            "SELECT [t0].[FirstName] AS [value] FROM [CookTable] AS [t0] WHERE (([t0].[ID] > @1) AND ([t0].[Name] IS NOT NULL))"'            new CommandParameter ("@1"' 100)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,ExplicitJoinsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ExplicitJoinsSqlBackendIntegrationTest.cs,ExplicitJoinWithInto_PropagatedFromSubStatement,The following statement contains a magic number: CheckQuery (            from cooks in (from k in Kitchens join c in Cooks on k.Name equals c.FirstName into cooks select cooks).Take(2)            from c in cooks            select c.Name'            "SELECT [t2].[Name] AS [value] "            + "FROM (SELECT [k].[Name] AS [key] FROM [KitchenTable] AS [t0]) AS [q1] "            + "CROSS JOIN [CookTable] AS [t2] WHERE ([t0].[Name] = [q1].[FirstName])"            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,ComplexSubQueryInAdditionalFromClause,The following statement contains a magic number: CheckQuery (            from s in Cooks from s2 in (from s3 in Cooks where s3.ID == s.ID && s3.ID > 3 select s3) select s2.FirstName'            "SELECT [q0].[FirstName] AS [value] FROM [CookTable] AS [t1] CROSS APPLY "            + "(SELECT [t2].[ID]'[t2].[FirstName]'[t2].[Name]'[t2].[IsStarredCook]'[t2].[IsFullTimeCook]'[t2].[SubstitutedID]'[t2].[KitchenID]'"            + "[t2].[KnifeID]'[t2].[KnifeClassID]'[t2].[CookRating] "            + "FROM [CookTable] AS [t2] "            + "WHERE (([t2].[ID] = [t1].[ID]) AND ([t2].[ID] > @1))) AS [q0]"'            new CommandParameter ("@1"' 3));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,ComplexSubQueryInAdditionalFromClause,The following statement contains a magic number: CheckQuery (            from s in Cooks from s2 in (from s3 in Cooks where s3.ID == s.ID && s3.ID > 3 select s3) select s2.FirstName'            "SELECT [q0].[FirstName] AS [value] FROM [CookTable] AS [t1] CROSS APPLY "            + "(SELECT [t2].[ID]'[t2].[FirstName]'[t2].[Name]'[t2].[IsStarredCook]'[t2].[IsFullTimeCook]'[t2].[SubstitutedID]'[t2].[KitchenID]'"            + "[t2].[KnifeID]'[t2].[KnifeClassID]'[t2].[CookRating] "            + "FROM [CookTable] AS [t2] "            + "WHERE (([t2].[ID] = [t1].[ID]) AND ([t2].[ID] > @1))) AS [q0]"'            new CommandParameter ("@1"' 3));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,OrderingsInSubQuery_WithTopExpression,The following statement contains a magic number: CheckQuery (          from s in Cooks from s2 in (from s2 in Cooks orderby s2.Name select s2.ID).Take (10) select s2'            "SELECT [q0].[Key] AS [value] FROM [CookTable] AS [t1] CROSS APPLY ("            + "SELECT TOP (10) [t2].[ID] AS [Key]'[t2].[Name] AS [Value] FROM [CookTable] AS [t2] "            + "ORDER BY [t2].[Name] ASC) AS [q0] "            + "ORDER BY [q0].[Value] ASC");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InSelectProjection_Entity,The following statement contains a magic number: CheckQuery (from c in Cooks select (from c2 in Cooks select c2).First ()'          "SELECT [q2].[ID]'[q2].[FirstName]'[q2].[Name]'[q2].[IsStarredCook]'[q2].[IsFullTimeCook]'[q2].[SubstitutedID]'[q2].[KitchenID]'"            + "[q2].[KnifeID]'[q2].[KnifeClassID]'[q2].[CookRating] "             + "FROM [CookTable] AS [t0] CROSS APPLY (SELECT TOP (1) [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'[t1].[IsFullTimeCook]'"            + "[t1].[SubstitutedID]'[t1].[KitchenID]'[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] "            + "FROM [CookTable] AS [t1]) AS [q2]"'          row => (object) row.GetEntity<Cook> (              new ColumnID ("ID"' 0)'              new ColumnID ("FirstName"' 1)'              new ColumnID ("Name"' 2)'              new ColumnID ("IsStarredCook"' 3)'              new ColumnID ("IsFullTimeCook"' 4)'              new ColumnID ("SubstitutedID"' 5)'              new ColumnID ("KitchenID"' 6)'              new ColumnID ("KnifeID"' 7)'              new ColumnID ("KnifeClassID"' 8)'              new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InSelectProjection_Entity,The following statement contains a magic number: CheckQuery (from c in Cooks select (from c2 in Cooks select c2).First ()'          "SELECT [q2].[ID]'[q2].[FirstName]'[q2].[Name]'[q2].[IsStarredCook]'[q2].[IsFullTimeCook]'[q2].[SubstitutedID]'[q2].[KitchenID]'"            + "[q2].[KnifeID]'[q2].[KnifeClassID]'[q2].[CookRating] "             + "FROM [CookTable] AS [t0] CROSS APPLY (SELECT TOP (1) [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'[t1].[IsFullTimeCook]'"            + "[t1].[SubstitutedID]'[t1].[KitchenID]'[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] "            + "FROM [CookTable] AS [t1]) AS [q2]"'          row => (object) row.GetEntity<Cook> (              new ColumnID ("ID"' 0)'              new ColumnID ("FirstName"' 1)'              new ColumnID ("Name"' 2)'              new ColumnID ("IsStarredCook"' 3)'              new ColumnID ("IsFullTimeCook"' 4)'              new ColumnID ("SubstitutedID"' 5)'              new ColumnID ("KitchenID"' 6)'              new ColumnID ("KnifeID"' 7)'              new ColumnID ("KnifeClassID"' 8)'              new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InSelectProjection_Entity,The following statement contains a magic number: CheckQuery (from c in Cooks select (from c2 in Cooks select c2).First ()'          "SELECT [q2].[ID]'[q2].[FirstName]'[q2].[Name]'[q2].[IsStarredCook]'[q2].[IsFullTimeCook]'[q2].[SubstitutedID]'[q2].[KitchenID]'"            + "[q2].[KnifeID]'[q2].[KnifeClassID]'[q2].[CookRating] "             + "FROM [CookTable] AS [t0] CROSS APPLY (SELECT TOP (1) [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'[t1].[IsFullTimeCook]'"            + "[t1].[SubstitutedID]'[t1].[KitchenID]'[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] "            + "FROM [CookTable] AS [t1]) AS [q2]"'          row => (object) row.GetEntity<Cook> (              new ColumnID ("ID"' 0)'              new ColumnID ("FirstName"' 1)'              new ColumnID ("Name"' 2)'              new ColumnID ("IsStarredCook"' 3)'              new ColumnID ("IsFullTimeCook"' 4)'              new ColumnID ("SubstitutedID"' 5)'              new ColumnID ("KitchenID"' 6)'              new ColumnID ("KnifeID"' 7)'              new ColumnID ("KnifeClassID"' 8)'              new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InSelectProjection_Entity,The following statement contains a magic number: CheckQuery (from c in Cooks select (from c2 in Cooks select c2).First ()'          "SELECT [q2].[ID]'[q2].[FirstName]'[q2].[Name]'[q2].[IsStarredCook]'[q2].[IsFullTimeCook]'[q2].[SubstitutedID]'[q2].[KitchenID]'"            + "[q2].[KnifeID]'[q2].[KnifeClassID]'[q2].[CookRating] "             + "FROM [CookTable] AS [t0] CROSS APPLY (SELECT TOP (1) [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'[t1].[IsFullTimeCook]'"            + "[t1].[SubstitutedID]'[t1].[KitchenID]'[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] "            + "FROM [CookTable] AS [t1]) AS [q2]"'          row => (object) row.GetEntity<Cook> (              new ColumnID ("ID"' 0)'              new ColumnID ("FirstName"' 1)'              new ColumnID ("Name"' 2)'              new ColumnID ("IsStarredCook"' 3)'              new ColumnID ("IsFullTimeCook"' 4)'              new ColumnID ("SubstitutedID"' 5)'              new ColumnID ("KitchenID"' 6)'              new ColumnID ("KnifeID"' 7)'              new ColumnID ("KnifeClassID"' 8)'              new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InSelectProjection_Entity,The following statement contains a magic number: CheckQuery (from c in Cooks select (from c2 in Cooks select c2).First ()'          "SELECT [q2].[ID]'[q2].[FirstName]'[q2].[Name]'[q2].[IsStarredCook]'[q2].[IsFullTimeCook]'[q2].[SubstitutedID]'[q2].[KitchenID]'"            + "[q2].[KnifeID]'[q2].[KnifeClassID]'[q2].[CookRating] "             + "FROM [CookTable] AS [t0] CROSS APPLY (SELECT TOP (1) [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'[t1].[IsFullTimeCook]'"            + "[t1].[SubstitutedID]'[t1].[KitchenID]'[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] "            + "FROM [CookTable] AS [t1]) AS [q2]"'          row => (object) row.GetEntity<Cook> (              new ColumnID ("ID"' 0)'              new ColumnID ("FirstName"' 1)'              new ColumnID ("Name"' 2)'              new ColumnID ("IsStarredCook"' 3)'              new ColumnID ("IsFullTimeCook"' 4)'              new ColumnID ("SubstitutedID"' 5)'              new ColumnID ("KitchenID"' 6)'              new ColumnID ("KnifeID"' 7)'              new ColumnID ("KnifeClassID"' 8)'              new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InSelectProjection_Entity,The following statement contains a magic number: CheckQuery (from c in Cooks select (from c2 in Cooks select c2).First ()'          "SELECT [q2].[ID]'[q2].[FirstName]'[q2].[Name]'[q2].[IsStarredCook]'[q2].[IsFullTimeCook]'[q2].[SubstitutedID]'[q2].[KitchenID]'"            + "[q2].[KnifeID]'[q2].[KnifeClassID]'[q2].[CookRating] "             + "FROM [CookTable] AS [t0] CROSS APPLY (SELECT TOP (1) [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'[t1].[IsFullTimeCook]'"            + "[t1].[SubstitutedID]'[t1].[KitchenID]'[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] "            + "FROM [CookTable] AS [t1]) AS [q2]"'          row => (object) row.GetEntity<Cook> (              new ColumnID ("ID"' 0)'              new ColumnID ("FirstName"' 1)'              new ColumnID ("Name"' 2)'              new ColumnID ("IsStarredCook"' 3)'              new ColumnID ("IsFullTimeCook"' 4)'              new ColumnID ("SubstitutedID"' 5)'              new ColumnID ("KitchenID"' 6)'              new ColumnID ("KnifeID"' 7)'              new ColumnID ("KnifeClassID"' 8)'              new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InSelectProjection_Entity,The following statement contains a magic number: CheckQuery (from c in Cooks select (from c2 in Cooks select c2).First ()'          "SELECT [q2].[ID]'[q2].[FirstName]'[q2].[Name]'[q2].[IsStarredCook]'[q2].[IsFullTimeCook]'[q2].[SubstitutedID]'[q2].[KitchenID]'"            + "[q2].[KnifeID]'[q2].[KnifeClassID]'[q2].[CookRating] "             + "FROM [CookTable] AS [t0] CROSS APPLY (SELECT TOP (1) [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'[t1].[IsFullTimeCook]'"            + "[t1].[SubstitutedID]'[t1].[KitchenID]'[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] "            + "FROM [CookTable] AS [t1]) AS [q2]"'          row => (object) row.GetEntity<Cook> (              new ColumnID ("ID"' 0)'              new ColumnID ("FirstName"' 1)'              new ColumnID ("Name"' 2)'              new ColumnID ("IsStarredCook"' 3)'              new ColumnID ("IsFullTimeCook"' 4)'              new ColumnID ("SubstitutedID"' 5)'              new ColumnID ("KitchenID"' 6)'              new ColumnID ("KnifeID"' 7)'              new ColumnID ("KnifeClassID"' 8)'              new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InSelectProjection_Entity,The following statement contains a magic number: CheckQuery (from c in Cooks select (from c2 in Cooks select c2).First ()'          "SELECT [q2].[ID]'[q2].[FirstName]'[q2].[Name]'[q2].[IsStarredCook]'[q2].[IsFullTimeCook]'[q2].[SubstitutedID]'[q2].[KitchenID]'"            + "[q2].[KnifeID]'[q2].[KnifeClassID]'[q2].[CookRating] "             + "FROM [CookTable] AS [t0] CROSS APPLY (SELECT TOP (1) [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'[t1].[IsFullTimeCook]'"            + "[t1].[SubstitutedID]'[t1].[KitchenID]'[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] "            + "FROM [CookTable] AS [t1]) AS [q2]"'          row => (object) row.GetEntity<Cook> (              new ColumnID ("ID"' 0)'              new ColumnID ("FirstName"' 1)'              new ColumnID ("Name"' 2)'              new ColumnID ("IsStarredCook"' 3)'              new ColumnID ("IsFullTimeCook"' 4)'              new ColumnID ("SubstitutedID"' 5)'              new ColumnID ("KitchenID"' 6)'              new ColumnID ("KnifeID"' 7)'              new ColumnID ("KnifeClassID"' 8)'              new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InSelectProjection_Entity,The following statement contains a magic number: CheckQuery (from c in Cooks select (from c2 in Cooks select c2).Single ()'          "SELECT [q2].[ID]'[q2].[FirstName]'[q2].[Name]'[q2].[IsStarredCook]'[q2].[IsFullTimeCook]'[q2].[SubstitutedID]'[q2].[KitchenID]'"            + "[q2].[KnifeID]'[q2].[KnifeClassID]'[q2].[CookRating] "             + "FROM [CookTable] AS [t0] CROSS APPLY (SELECT TOP (1) [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'[t1].[IsFullTimeCook]'"            + "[t1].[SubstitutedID]'[t1].[KitchenID]'[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] FROM [CookTable] AS [t1]) AS [q2]"'          row => (object) row.GetEntity<Cook> (              new ColumnID ("ID"' 0)'              new ColumnID ("FirstName"' 1)'              new ColumnID ("Name"' 2)'              new ColumnID ("IsStarredCook"' 3)'              new ColumnID ("IsFullTimeCook"' 4)'              new ColumnID ("SubstitutedID"' 5)'              new ColumnID ("KitchenID"' 6)'              new ColumnID ("KnifeID"' 7)'              new ColumnID ("KnifeClassID"' 8)'              new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InSelectProjection_Entity,The following statement contains a magic number: CheckQuery (from c in Cooks select (from c2 in Cooks select c2).Single ()'          "SELECT [q2].[ID]'[q2].[FirstName]'[q2].[Name]'[q2].[IsStarredCook]'[q2].[IsFullTimeCook]'[q2].[SubstitutedID]'[q2].[KitchenID]'"            + "[q2].[KnifeID]'[q2].[KnifeClassID]'[q2].[CookRating] "             + "FROM [CookTable] AS [t0] CROSS APPLY (SELECT TOP (1) [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'[t1].[IsFullTimeCook]'"            + "[t1].[SubstitutedID]'[t1].[KitchenID]'[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] FROM [CookTable] AS [t1]) AS [q2]"'          row => (object) row.GetEntity<Cook> (              new ColumnID ("ID"' 0)'              new ColumnID ("FirstName"' 1)'              new ColumnID ("Name"' 2)'              new ColumnID ("IsStarredCook"' 3)'              new ColumnID ("IsFullTimeCook"' 4)'              new ColumnID ("SubstitutedID"' 5)'              new ColumnID ("KitchenID"' 6)'              new ColumnID ("KnifeID"' 7)'              new ColumnID ("KnifeClassID"' 8)'              new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InSelectProjection_Entity,The following statement contains a magic number: CheckQuery (from c in Cooks select (from c2 in Cooks select c2).Single ()'          "SELECT [q2].[ID]'[q2].[FirstName]'[q2].[Name]'[q2].[IsStarredCook]'[q2].[IsFullTimeCook]'[q2].[SubstitutedID]'[q2].[KitchenID]'"            + "[q2].[KnifeID]'[q2].[KnifeClassID]'[q2].[CookRating] "             + "FROM [CookTable] AS [t0] CROSS APPLY (SELECT TOP (1) [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'[t1].[IsFullTimeCook]'"            + "[t1].[SubstitutedID]'[t1].[KitchenID]'[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] FROM [CookTable] AS [t1]) AS [q2]"'          row => (object) row.GetEntity<Cook> (              new ColumnID ("ID"' 0)'              new ColumnID ("FirstName"' 1)'              new ColumnID ("Name"' 2)'              new ColumnID ("IsStarredCook"' 3)'              new ColumnID ("IsFullTimeCook"' 4)'              new ColumnID ("SubstitutedID"' 5)'              new ColumnID ("KitchenID"' 6)'              new ColumnID ("KnifeID"' 7)'              new ColumnID ("KnifeClassID"' 8)'              new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InSelectProjection_Entity,The following statement contains a magic number: CheckQuery (from c in Cooks select (from c2 in Cooks select c2).Single ()'          "SELECT [q2].[ID]'[q2].[FirstName]'[q2].[Name]'[q2].[IsStarredCook]'[q2].[IsFullTimeCook]'[q2].[SubstitutedID]'[q2].[KitchenID]'"            + "[q2].[KnifeID]'[q2].[KnifeClassID]'[q2].[CookRating] "             + "FROM [CookTable] AS [t0] CROSS APPLY (SELECT TOP (1) [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'[t1].[IsFullTimeCook]'"            + "[t1].[SubstitutedID]'[t1].[KitchenID]'[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] FROM [CookTable] AS [t1]) AS [q2]"'          row => (object) row.GetEntity<Cook> (              new ColumnID ("ID"' 0)'              new ColumnID ("FirstName"' 1)'              new ColumnID ("Name"' 2)'              new ColumnID ("IsStarredCook"' 3)'              new ColumnID ("IsFullTimeCook"' 4)'              new ColumnID ("SubstitutedID"' 5)'              new ColumnID ("KitchenID"' 6)'              new ColumnID ("KnifeID"' 7)'              new ColumnID ("KnifeClassID"' 8)'              new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InSelectProjection_Entity,The following statement contains a magic number: CheckQuery (from c in Cooks select (from c2 in Cooks select c2).Single ()'          "SELECT [q2].[ID]'[q2].[FirstName]'[q2].[Name]'[q2].[IsStarredCook]'[q2].[IsFullTimeCook]'[q2].[SubstitutedID]'[q2].[KitchenID]'"            + "[q2].[KnifeID]'[q2].[KnifeClassID]'[q2].[CookRating] "             + "FROM [CookTable] AS [t0] CROSS APPLY (SELECT TOP (1) [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'[t1].[IsFullTimeCook]'"            + "[t1].[SubstitutedID]'[t1].[KitchenID]'[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] FROM [CookTable] AS [t1]) AS [q2]"'          row => (object) row.GetEntity<Cook> (              new ColumnID ("ID"' 0)'              new ColumnID ("FirstName"' 1)'              new ColumnID ("Name"' 2)'              new ColumnID ("IsStarredCook"' 3)'              new ColumnID ("IsFullTimeCook"' 4)'              new ColumnID ("SubstitutedID"' 5)'              new ColumnID ("KitchenID"' 6)'              new ColumnID ("KnifeID"' 7)'              new ColumnID ("KnifeClassID"' 8)'              new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InSelectProjection_Entity,The following statement contains a magic number: CheckQuery (from c in Cooks select (from c2 in Cooks select c2).Single ()'          "SELECT [q2].[ID]'[q2].[FirstName]'[q2].[Name]'[q2].[IsStarredCook]'[q2].[IsFullTimeCook]'[q2].[SubstitutedID]'[q2].[KitchenID]'"            + "[q2].[KnifeID]'[q2].[KnifeClassID]'[q2].[CookRating] "             + "FROM [CookTable] AS [t0] CROSS APPLY (SELECT TOP (1) [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'[t1].[IsFullTimeCook]'"            + "[t1].[SubstitutedID]'[t1].[KitchenID]'[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] FROM [CookTable] AS [t1]) AS [q2]"'          row => (object) row.GetEntity<Cook> (              new ColumnID ("ID"' 0)'              new ColumnID ("FirstName"' 1)'              new ColumnID ("Name"' 2)'              new ColumnID ("IsStarredCook"' 3)'              new ColumnID ("IsFullTimeCook"' 4)'              new ColumnID ("SubstitutedID"' 5)'              new ColumnID ("KitchenID"' 6)'              new ColumnID ("KnifeID"' 7)'              new ColumnID ("KnifeClassID"' 8)'              new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InSelectProjection_Entity,The following statement contains a magic number: CheckQuery (from c in Cooks select (from c2 in Cooks select c2).Single ()'          "SELECT [q2].[ID]'[q2].[FirstName]'[q2].[Name]'[q2].[IsStarredCook]'[q2].[IsFullTimeCook]'[q2].[SubstitutedID]'[q2].[KitchenID]'"            + "[q2].[KnifeID]'[q2].[KnifeClassID]'[q2].[CookRating] "             + "FROM [CookTable] AS [t0] CROSS APPLY (SELECT TOP (1) [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'[t1].[IsFullTimeCook]'"            + "[t1].[SubstitutedID]'[t1].[KitchenID]'[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] FROM [CookTable] AS [t1]) AS [q2]"'          row => (object) row.GetEntity<Cook> (              new ColumnID ("ID"' 0)'              new ColumnID ("FirstName"' 1)'              new ColumnID ("Name"' 2)'              new ColumnID ("IsStarredCook"' 3)'              new ColumnID ("IsFullTimeCook"' 4)'              new ColumnID ("SubstitutedID"' 5)'              new ColumnID ("KitchenID"' 6)'              new ColumnID ("KnifeID"' 7)'              new ColumnID ("KnifeClassID"' 8)'              new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InSelectProjection_Entity,The following statement contains a magic number: CheckQuery (from c in Cooks select (from c2 in Cooks select c2).Single ()'          "SELECT [q2].[ID]'[q2].[FirstName]'[q2].[Name]'[q2].[IsStarredCook]'[q2].[IsFullTimeCook]'[q2].[SubstitutedID]'[q2].[KitchenID]'"            + "[q2].[KnifeID]'[q2].[KnifeClassID]'[q2].[CookRating] "             + "FROM [CookTable] AS [t0] CROSS APPLY (SELECT TOP (1) [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'[t1].[IsFullTimeCook]'"            + "[t1].[SubstitutedID]'[t1].[KitchenID]'[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] FROM [CookTable] AS [t1]) AS [q2]"'          row => (object) row.GetEntity<Cook> (              new ColumnID ("ID"' 0)'              new ColumnID ("FirstName"' 1)'              new ColumnID ("Name"' 2)'              new ColumnID ("IsStarredCook"' 3)'              new ColumnID ("IsFullTimeCook"' 4)'              new ColumnID ("SubstitutedID"' 5)'              new ColumnID ("KitchenID"' 6)'              new ColumnID ("KnifeID"' 7)'              new ColumnID ("KnifeClassID"' 8)'              new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InFromClause_WithBooleanItems,The following statement contains a magic number: CheckQuery (            from c in Cooks            from isFTC in              (from a in c.Assistants select a.IsFullTimeCook).Take (10)            where isFTC            select isFTC'            "SELECT [q0].[value] AS [value] "            + "FROM [CookTable] AS [t1] "            + "CROSS APPLY (SELECT TOP (10) [t2].[IsFullTimeCook] AS [value] FROM [CookTable] AS [t2] WHERE ([t1].[ID] = [t2].[AssistedID])) AS [q0] "            + "WHERE ([q0].[value] = 1)");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SubQuerySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SubQuerySqlBackendIntegrationTest.cs,InFromClause_WithConversion,The following statement contains a magic number: CheckQuery (            from c in Cooks            from chefsAssistant in              (from a in c.Assistants select (Chef) a).Take (10)            where chefsAssistant.LetterOfRecommendation != null            select chefsAssistant.ID'            "SELECT [q0].[ID] AS [value] "            + "FROM [CookTable] AS [t1] "            + "CROSS APPLY ("            + "SELECT TOP (10) [t2].[ID]'[t2].[FirstName]'[t2].[Name]'[t2].[IsStarredCook]'[t2].[IsFullTimeCook]'[t2].[SubstitutedID]'[t2].[KitchenID]'"            + "[t2].[KnifeID]'[t2].[KnifeClassID]'[t2].[CookRating] FROM [CookTable] AS [t2] WHERE ([t1].[ID] = [t2].[AssistedID])) AS [q0] "            + "WHERE ([q0].[LetterOfRecommendation] IS NOT NULL)");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,StringConcatenation,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.FirstName + 10'            "SELECT ([t0].[FirstName] + @1) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<string> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,StringConcatenation,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.FirstName + 10'            "SELECT ([t0].[FirstName] + @1) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<string> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,ArithmeticOperators,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.ID + 10'            "SELECT ([t0].[ID] + @1) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,ArithmeticOperators,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.ID + 10'            "SELECT ([t0].[ID] + @1) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,ArithmeticOperators,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.ID - 10'            "SELECT ([t0].[ID] - @1) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,ArithmeticOperators,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.ID - 10'            "SELECT ([t0].[ID] - @1) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,ArithmeticOperators,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.ID * 10'            "SELECT ([t0].[ID] * @1) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,ArithmeticOperators,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.ID * 10'            "SELECT ([t0].[ID] * @1) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,ArithmeticOperators,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.ID / 10'            "SELECT ([t0].[ID] / @1) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,ArithmeticOperators,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.ID / 10'            "SELECT ([t0].[ID] / @1) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,ArithmeticOperators,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.ID % 10'            "SELECT ([t0].[ID] % @1) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,ArithmeticOperators,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.ID % 10'            "SELECT ([t0].[ID] % @1) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,ArithmeticOperators_Checked,The following statement contains a magic number: CheckQuery (            from c in Cooks select checked (c.ID + 10)'            "SELECT ([t0].[ID] + @1) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,ArithmeticOperators_Checked,The following statement contains a magic number: CheckQuery (            from c in Cooks select checked (c.ID + 10)'            "SELECT ([t0].[ID] + @1) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,ArithmeticOperators_Checked,The following statement contains a magic number: CheckQuery (            from c in Cooks select checked (c.ID - 10)'            "SELECT ([t0].[ID] - @1) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,ArithmeticOperators_Checked,The following statement contains a magic number: CheckQuery (            from c in Cooks select checked (c.ID - 10)'            "SELECT ([t0].[ID] - @1) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,ArithmeticOperators_Checked,The following statement contains a magic number: CheckQuery (            from c in Cooks select checked (c.ID * 10)'            "SELECT ([t0].[ID] * @1) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,ArithmeticOperators_Checked,The following statement contains a magic number: CheckQuery (            from c in Cooks select checked (c.ID * 10)'            "SELECT ([t0].[ID] * @1) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,ArithmeticOperators_Unchecked,The following statement contains a magic number: CheckQuery (            from c in Cooks select unchecked (c.ID + 10)'            "SELECT ([t0].[ID] + @1) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,ArithmeticOperators_Unchecked,The following statement contains a magic number: CheckQuery (            from c in Cooks select unchecked (c.ID + 10)'            "SELECT ([t0].[ID] + @1) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,ArithmeticOperators_Unchecked,The following statement contains a magic number: CheckQuery (            from c in Cooks select unchecked (c.ID - 10)'            "SELECT ([t0].[ID] - @1) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,ArithmeticOperators_Unchecked,The following statement contains a magic number: CheckQuery (            from c in Cooks select unchecked (c.ID - 10)'            "SELECT ([t0].[ID] - @1) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,ArithmeticOperators_Unchecked,The following statement contains a magic number: CheckQuery (            from c in Cooks select unchecked (c.ID * 10)'            "SELECT ([t0].[ID] * @1) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,ArithmeticOperators_Unchecked,The following statement contains a magic number: CheckQuery (            from c in Cooks select unchecked (c.ID * 10)'            "SELECT ([t0].[ID] * @1) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,Power,The following statement contains a magic number: var selector = Expression.Lambda<Func<Cook' double>> (Expression.Power (weight' Expression.Constant (3.0))' parameter);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,Power,The following statement contains a magic number: CheckQuery (            query'            "SELECT (POWER ([t0].[Weight]' @1)) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<double> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 3.0)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,BitwiseOperators,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.ID & 10'            "SELECT ([t0].[ID] & @1) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,BitwiseOperators,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.ID & 10'            "SELECT ([t0].[ID] & @1) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,BitwiseOperators,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.ID | 10'            "SELECT ([t0].[ID] | @1) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,BitwiseOperators,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.ID | 10'            "SELECT ([t0].[ID] | @1) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,BitwiseOperators,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.ID ^ 10'            "SELECT ([t0].[ID] ^ @1) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,BitwiseOperators,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.ID ^ 10'            "SELECT ([t0].[ID] ^ @1) AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,EntityConstantExpression_WithIDMember,The following statement contains a magic number: var cook = new Cook { ID = 5' Name = "Maier"' FirstName = "Hugo" };
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,EntityConstantExpression_WithIDMember,The following statement contains a magic number: CheckQuery (            from c in Cooks where c.ID == cook.ID select c.FirstName'            "SELECT [t0].[FirstName] AS [value] FROM [CookTable] AS [t0] WHERE ([t0].[ID] = @1)"'            new CommandParameter ("@1"' 5)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,EntityConstantExpression_WithReference,The following statement contains a magic number: var cook = new Cook { ID = 5' Name = "Maier"' FirstName = "Hugo" };
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,EntityConstantExpression_WithConstantID,The following statement contains a magic number: const int id = 5;
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,BinaryExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\BinaryExpressionSqlBackendIntegrationTest.cs,EntityConstantExpression_WithConstantID,The following statement contains a magic number: CheckQuery (            from c in Cooks where c.ID == id select c.FirstName'            "SELECT [t0].[FirstName] AS [value] FROM [CookTable] AS [t0] WHERE ([t0].[ID] = @1)"'            new CommandParameter ("@1"' 5)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,MemberChainingSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MemberChainingSqlBackendIntegrationTest.cs,SimpleSqlQuery_EntityPropertySelect,The following statement contains a magic number: CheckQuery (            from k in Kitchens select k.Cook'            "SELECT [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'[t1].[IsFullTimeCook]'[t1].[SubstitutedID]'[t1].[KitchenID]'"            + "[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] "            + "FROM [KitchenTable] AS [t0] LEFT OUTER JOIN [CookTable] AS [t1] ON ([t0].[ID] = [t1].[KitchenID])"'             row => (object) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                 new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,MemberChainingSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MemberChainingSqlBackendIntegrationTest.cs,SimpleSqlQuery_EntityPropertySelect,The following statement contains a magic number: CheckQuery (            from k in Kitchens select k.Cook'            "SELECT [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'[t1].[IsFullTimeCook]'[t1].[SubstitutedID]'[t1].[KitchenID]'"            + "[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] "            + "FROM [KitchenTable] AS [t0] LEFT OUTER JOIN [CookTable] AS [t1] ON ([t0].[ID] = [t1].[KitchenID])"'             row => (object) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                 new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,MemberChainingSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MemberChainingSqlBackendIntegrationTest.cs,SimpleSqlQuery_EntityPropertySelect,The following statement contains a magic number: CheckQuery (            from k in Kitchens select k.Cook'            "SELECT [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'[t1].[IsFullTimeCook]'[t1].[SubstitutedID]'[t1].[KitchenID]'"            + "[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] "            + "FROM [KitchenTable] AS [t0] LEFT OUTER JOIN [CookTable] AS [t1] ON ([t0].[ID] = [t1].[KitchenID])"'             row => (object) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                 new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,MemberChainingSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MemberChainingSqlBackendIntegrationTest.cs,SimpleSqlQuery_EntityPropertySelect,The following statement contains a magic number: CheckQuery (            from k in Kitchens select k.Cook'            "SELECT [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'[t1].[IsFullTimeCook]'[t1].[SubstitutedID]'[t1].[KitchenID]'"            + "[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] "            + "FROM [KitchenTable] AS [t0] LEFT OUTER JOIN [CookTable] AS [t1] ON ([t0].[ID] = [t1].[KitchenID])"'             row => (object) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                 new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,MemberChainingSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MemberChainingSqlBackendIntegrationTest.cs,SimpleSqlQuery_EntityPropertySelect,The following statement contains a magic number: CheckQuery (            from k in Kitchens select k.Cook'            "SELECT [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'[t1].[IsFullTimeCook]'[t1].[SubstitutedID]'[t1].[KitchenID]'"            + "[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] "            + "FROM [KitchenTable] AS [t0] LEFT OUTER JOIN [CookTable] AS [t1] ON ([t0].[ID] = [t1].[KitchenID])"'             row => (object) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                 new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,MemberChainingSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MemberChainingSqlBackendIntegrationTest.cs,SimpleSqlQuery_EntityPropertySelect,The following statement contains a magic number: CheckQuery (            from k in Kitchens select k.Cook'            "SELECT [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'[t1].[IsFullTimeCook]'[t1].[SubstitutedID]'[t1].[KitchenID]'"            + "[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] "            + "FROM [KitchenTable] AS [t0] LEFT OUTER JOIN [CookTable] AS [t1] ON ([t0].[ID] = [t1].[KitchenID])"'             row => (object) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                 new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,MemberChainingSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MemberChainingSqlBackendIntegrationTest.cs,SimpleSqlQuery_EntityPropertySelect,The following statement contains a magic number: CheckQuery (            from k in Kitchens select k.Cook'            "SELECT [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'[t1].[IsFullTimeCook]'[t1].[SubstitutedID]'[t1].[KitchenID]'"            + "[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] "            + "FROM [KitchenTable] AS [t0] LEFT OUTER JOIN [CookTable] AS [t1] ON ([t0].[ID] = [t1].[KitchenID])"'             row => (object) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                 new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,MemberChainingSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MemberChainingSqlBackendIntegrationTest.cs,SimpleSqlQuery_EntityPropertySelect,The following statement contains a magic number: CheckQuery (            from k in Kitchens select k.Cook'            "SELECT [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'[t1].[IsFullTimeCook]'[t1].[SubstitutedID]'[t1].[KitchenID]'"            + "[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] "            + "FROM [KitchenTable] AS [t0] LEFT OUTER JOIN [CookTable] AS [t1] ON ([t0].[ID] = [t1].[KitchenID])"'             row => (object) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                 new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,MemberChainingSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MemberChainingSqlBackendIntegrationTest.cs,EntityAccess_WithNullableForeignKey,The following statement contains a magic number: var myCompany = new Company { ID = 10 };
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,MemberChainingSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MemberChainingSqlBackendIntegrationTest.cs,EntityAccess_WithNullableForeignKey,The following statement contains a magic number: CheckQuery (            from r in Restaurants where r.CompanyIfAny == myCompany select r.ID'            "SELECT [t0].[ID] AS [value] "            + "FROM [RestaurantTable] AS [t0] "            + "WHERE ([t0].[CompanyID] = @1)"'            new CommandParameter ("@1"' 10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,MemberChainingSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MemberChainingSqlBackendIntegrationTest.cs,EntityAccess_NoLeftJoin_OnIDAccess,The following statement contains a magic number: CheckQuery (            from k in Kitchens where k.Restaurant.ID == 10 select k.Restaurant.ID'            "SELECT [t0].[RestaurantID] AS [value] "            + "FROM [KitchenTable] AS [t0] "            + "WHERE ([t0].[RestaurantID] = @1)"'            new CommandParameter ("@1"' 10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,MemberChainingSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MemberChainingSqlBackendIntegrationTest.cs,EntityAccess_NoLeftJoin_OnIDAccess,The following statement contains a magic number: CheckQuery (            from k in Kitchens where k.Restaurant.ID == 10 select k.Restaurant.ID'            "SELECT [t0].[RestaurantID] AS [value] "            + "FROM [KitchenTable] AS [t0] "            + "WHERE ([t0].[RestaurantID] = @1)"'            new CommandParameter ("@1"' 10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,Entity,The following statement contains a magic number: CheckQuery (            from s in Cooks select s'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'"            + "[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating] "            + "FROM [CookTable] AS [t0]"'            row => (object) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,Entity,The following statement contains a magic number: CheckQuery (            from s in Cooks select s'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'"            + "[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating] "            + "FROM [CookTable] AS [t0]"'            row => (object) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,Entity,The following statement contains a magic number: CheckQuery (            from s in Cooks select s'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'"            + "[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating] "            + "FROM [CookTable] AS [t0]"'            row => (object) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,Entity,The following statement contains a magic number: CheckQuery (            from s in Cooks select s'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'"            + "[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating] "            + "FROM [CookTable] AS [t0]"'            row => (object) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,Entity,The following statement contains a magic number: CheckQuery (            from s in Cooks select s'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'"            + "[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating] "            + "FROM [CookTable] AS [t0]"'            row => (object) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,Entity,The following statement contains a magic number: CheckQuery (            from s in Cooks select s'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'"            + "[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating] "            + "FROM [CookTable] AS [t0]"'            row => (object) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,Entity,The following statement contains a magic number: CheckQuery (            from s in Cooks select s'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'"            + "[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating] "            + "FROM [CookTable] AS [t0]"'            row => (object) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,Entity,The following statement contains a magic number: CheckQuery (            from s in Cooks select s'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'"            + "[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating] "            + "FROM [CookTable] AS [t0]"'            row => (object) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,NestedNestedSelectProjection,The following statement contains a magic number: CheckQuery (            from x in Kitchens            from c in              ( // SubStatementTableInfo (SqlStatement (                from sc in Cooks                select // SelectProjection = NamedExpression (null'                   new                  { // NewExpression (                    A = 10' // NamedExpression ("get_A"' ...)'  => SqlValueReference ("get_A")                    B = sc.Name' // NamedExpression ("get_B"' ...)'  => SqlValueReference ("get_B")                    C = new                    { // NewExpression ( => SqlCompoundReference                      D = sc.Name                    }                  }) // NamedExpression ("get_C_get_D"' ...))))) => SqlValueReference ("get_C_get_D")            where c.C.D != null // MemberExpression (MemberExpression (SqlTableReferenceExpression))            select c.B'            "SELECT [q0].[B] AS [value] FROM [KitchenTable] AS [t1] CROSS APPLY "+            "(SELECT @1 AS [A]'[t2].[Name] AS [B]'[t2].[Name] AS [C_D] FROM [CookTable] AS [t2]) AS [q0] "+            "WHERE ([q0].[C_D] IS NOT NULL)"'            row => (object) row.GetValue<string> (new ColumnID ("value"' 0))'            new CommandParameter("@1"' 10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,NestedNestedSelectProjection,The following statement contains a magic number: CheckQuery (            from x in Kitchens            from c in              ( // SubStatementTableInfo (SqlStatement (                from sc in Cooks                select // SelectProjection = NamedExpression (null'                   new                  { // NewExpression (                    A = 10' // NamedExpression ("get_A"' ...)'  => SqlValueReference ("get_A")                    B = sc.Name' // NamedExpression ("get_B"' ...)'  => SqlValueReference ("get_B")                    C = new                    { // NewExpression ( => SqlCompoundReference                      D = sc.Name                    }                  }) // NamedExpression ("get_C_get_D"' ...))))) => SqlValueReference ("get_C_get_D")            where c.C.D != null // MemberExpression (MemberExpression (SqlTableReferenceExpression))            select c.B'            "SELECT [q0].[B] AS [value] FROM [KitchenTable] AS [t1] CROSS APPLY "+            "(SELECT @1 AS [A]'[t2].[Name] AS [B]'[t2].[Name] AS [C_D] FROM [CookTable] AS [t2]) AS [q0] "+            "WHERE ([q0].[C_D] IS NOT NULL)"'            row => (object) row.GetValue<string> (new ColumnID ("value"' 0))'            new CommandParameter("@1"' 10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,NestedSelectProjection_CompoundWithoutMemberAccess,The following statement contains a magic number: CheckQuery (            from x in (from y in (from c in Cooks select new { A = c }).Distinct () select y).Distinct () select x'            "SELECT [q1].[A_ID] AS [A_ID]'[q1].[A_FirstName] AS [A_FirstName]'[q1].[A_Name] AS [A_Name]'"            + "[q1].[A_IsStarredCook] AS [A_IsStarredCook]'[q1].[A_IsFullTimeCook] AS [A_IsFullTimeCook]'"            + "[q1].[A_SubstitutedID] AS [A_SubstitutedID]'[q1].[A_KitchenID] AS [A_KitchenID]'"            + "[q1].[A_KnifeID] AS [A_KnifeID]'[q1].[A_KnifeClassID] AS [A_KnifeClassID]'[q1].[A_CookRating] AS [A_CookRating] "             + "FROM (SELECT DISTINCT [q0].[A_ID] AS [A_ID]'[q0].[A_FirstName] AS [A_FirstName]'[q0].[A_Name] AS [A_Name]'"            + "[q0].[A_IsStarredCook] AS [A_IsStarredCook]'[q0].[A_IsFullTimeCook] AS [A_IsFullTimeCook]'"            + "[q0].[A_SubstitutedID] AS [A_SubstitutedID]'[q0].[A_KitchenID] AS [A_KitchenID]'"            + "[q0].[A_KnifeID] AS [A_KnifeID]'[q0].[A_KnifeClassID] AS [A_KnifeClassID]'[q0].[A_CookRating] AS [A_CookRating] "            + "FROM (SELECT DISTINCT [t2].[ID] AS [A_ID]'[t2].[FirstName] AS [A_FirstName]'[t2].[Name] AS [A_Name]'"            + "[t2].[IsStarredCook] AS [A_IsStarredCook]'[t2].[IsFullTimeCook] AS [A_IsFullTimeCook]'"            + "[t2].[SubstitutedID] AS [A_SubstitutedID]'[t2].[KitchenID] AS [A_KitchenID]'"            + "[t2].[KnifeID] AS [A_KnifeID]'[t2].[KnifeClassID] AS [A_KnifeClassID]'[t2].[CookRating] AS [A_CookRating] "            + "FROM [CookTable] AS [t2]) AS [q0]) AS [q1]"'            row => (object) new                            {                                A = row.GetEntity<Cook> (                                    new ColumnID ("A_ID"' 0)'                                    new ColumnID ("A_FirstName"' 1)'                                    new ColumnID ("A_Name"' 2)'                                    new ColumnID ("A_IsStarredCook"' 3)'                                    new ColumnID ("A_IsFullTimeCook"' 4)'                                    new ColumnID ("A_SubstitutedID"' 5)'                                    new ColumnID ("A_KitchenID"' 6)'                                    new ColumnID ("A_KnifeID"' 7)'                                    new ColumnID ("A_KnifeClassID"' 8)'                                    new ColumnID ("A_CookRating"' 9))                            });
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,NestedSelectProjection_CompoundWithoutMemberAccess,The following statement contains a magic number: CheckQuery (            from x in (from y in (from c in Cooks select new { A = c }).Distinct () select y).Distinct () select x'            "SELECT [q1].[A_ID] AS [A_ID]'[q1].[A_FirstName] AS [A_FirstName]'[q1].[A_Name] AS [A_Name]'"            + "[q1].[A_IsStarredCook] AS [A_IsStarredCook]'[q1].[A_IsFullTimeCook] AS [A_IsFullTimeCook]'"            + "[q1].[A_SubstitutedID] AS [A_SubstitutedID]'[q1].[A_KitchenID] AS [A_KitchenID]'"            + "[q1].[A_KnifeID] AS [A_KnifeID]'[q1].[A_KnifeClassID] AS [A_KnifeClassID]'[q1].[A_CookRating] AS [A_CookRating] "             + "FROM (SELECT DISTINCT [q0].[A_ID] AS [A_ID]'[q0].[A_FirstName] AS [A_FirstName]'[q0].[A_Name] AS [A_Name]'"            + "[q0].[A_IsStarredCook] AS [A_IsStarredCook]'[q0].[A_IsFullTimeCook] AS [A_IsFullTimeCook]'"            + "[q0].[A_SubstitutedID] AS [A_SubstitutedID]'[q0].[A_KitchenID] AS [A_KitchenID]'"            + "[q0].[A_KnifeID] AS [A_KnifeID]'[q0].[A_KnifeClassID] AS [A_KnifeClassID]'[q0].[A_CookRating] AS [A_CookRating] "            + "FROM (SELECT DISTINCT [t2].[ID] AS [A_ID]'[t2].[FirstName] AS [A_FirstName]'[t2].[Name] AS [A_Name]'"            + "[t2].[IsStarredCook] AS [A_IsStarredCook]'[t2].[IsFullTimeCook] AS [A_IsFullTimeCook]'"            + "[t2].[SubstitutedID] AS [A_SubstitutedID]'[t2].[KitchenID] AS [A_KitchenID]'"            + "[t2].[KnifeID] AS [A_KnifeID]'[t2].[KnifeClassID] AS [A_KnifeClassID]'[t2].[CookRating] AS [A_CookRating] "            + "FROM [CookTable] AS [t2]) AS [q0]) AS [q1]"'            row => (object) new                            {                                A = row.GetEntity<Cook> (                                    new ColumnID ("A_ID"' 0)'                                    new ColumnID ("A_FirstName"' 1)'                                    new ColumnID ("A_Name"' 2)'                                    new ColumnID ("A_IsStarredCook"' 3)'                                    new ColumnID ("A_IsFullTimeCook"' 4)'                                    new ColumnID ("A_SubstitutedID"' 5)'                                    new ColumnID ("A_KitchenID"' 6)'                                    new ColumnID ("A_KnifeID"' 7)'                                    new ColumnID ("A_KnifeClassID"' 8)'                                    new ColumnID ("A_CookRating"' 9))                            });
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,NestedSelectProjection_CompoundWithoutMemberAccess,The following statement contains a magic number: CheckQuery (            from x in (from y in (from c in Cooks select new { A = c }).Distinct () select y).Distinct () select x'            "SELECT [q1].[A_ID] AS [A_ID]'[q1].[A_FirstName] AS [A_FirstName]'[q1].[A_Name] AS [A_Name]'"            + "[q1].[A_IsStarredCook] AS [A_IsStarredCook]'[q1].[A_IsFullTimeCook] AS [A_IsFullTimeCook]'"            + "[q1].[A_SubstitutedID] AS [A_SubstitutedID]'[q1].[A_KitchenID] AS [A_KitchenID]'"            + "[q1].[A_KnifeID] AS [A_KnifeID]'[q1].[A_KnifeClassID] AS [A_KnifeClassID]'[q1].[A_CookRating] AS [A_CookRating] "             + "FROM (SELECT DISTINCT [q0].[A_ID] AS [A_ID]'[q0].[A_FirstName] AS [A_FirstName]'[q0].[A_Name] AS [A_Name]'"            + "[q0].[A_IsStarredCook] AS [A_IsStarredCook]'[q0].[A_IsFullTimeCook] AS [A_IsFullTimeCook]'"            + "[q0].[A_SubstitutedID] AS [A_SubstitutedID]'[q0].[A_KitchenID] AS [A_KitchenID]'"            + "[q0].[A_KnifeID] AS [A_KnifeID]'[q0].[A_KnifeClassID] AS [A_KnifeClassID]'[q0].[A_CookRating] AS [A_CookRating] "            + "FROM (SELECT DISTINCT [t2].[ID] AS [A_ID]'[t2].[FirstName] AS [A_FirstName]'[t2].[Name] AS [A_Name]'"            + "[t2].[IsStarredCook] AS [A_IsStarredCook]'[t2].[IsFullTimeCook] AS [A_IsFullTimeCook]'"            + "[t2].[SubstitutedID] AS [A_SubstitutedID]'[t2].[KitchenID] AS [A_KitchenID]'"            + "[t2].[KnifeID] AS [A_KnifeID]'[t2].[KnifeClassID] AS [A_KnifeClassID]'[t2].[CookRating] AS [A_CookRating] "            + "FROM [CookTable] AS [t2]) AS [q0]) AS [q1]"'            row => (object) new                            {                                A = row.GetEntity<Cook> (                                    new ColumnID ("A_ID"' 0)'                                    new ColumnID ("A_FirstName"' 1)'                                    new ColumnID ("A_Name"' 2)'                                    new ColumnID ("A_IsStarredCook"' 3)'                                    new ColumnID ("A_IsFullTimeCook"' 4)'                                    new ColumnID ("A_SubstitutedID"' 5)'                                    new ColumnID ("A_KitchenID"' 6)'                                    new ColumnID ("A_KnifeID"' 7)'                                    new ColumnID ("A_KnifeClassID"' 8)'                                    new ColumnID ("A_CookRating"' 9))                            });
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,NestedSelectProjection_CompoundWithoutMemberAccess,The following statement contains a magic number: CheckQuery (            from x in (from y in (from c in Cooks select new { A = c }).Distinct () select y).Distinct () select x'            "SELECT [q1].[A_ID] AS [A_ID]'[q1].[A_FirstName] AS [A_FirstName]'[q1].[A_Name] AS [A_Name]'"            + "[q1].[A_IsStarredCook] AS [A_IsStarredCook]'[q1].[A_IsFullTimeCook] AS [A_IsFullTimeCook]'"            + "[q1].[A_SubstitutedID] AS [A_SubstitutedID]'[q1].[A_KitchenID] AS [A_KitchenID]'"            + "[q1].[A_KnifeID] AS [A_KnifeID]'[q1].[A_KnifeClassID] AS [A_KnifeClassID]'[q1].[A_CookRating] AS [A_CookRating] "             + "FROM (SELECT DISTINCT [q0].[A_ID] AS [A_ID]'[q0].[A_FirstName] AS [A_FirstName]'[q0].[A_Name] AS [A_Name]'"            + "[q0].[A_IsStarredCook] AS [A_IsStarredCook]'[q0].[A_IsFullTimeCook] AS [A_IsFullTimeCook]'"            + "[q0].[A_SubstitutedID] AS [A_SubstitutedID]'[q0].[A_KitchenID] AS [A_KitchenID]'"            + "[q0].[A_KnifeID] AS [A_KnifeID]'[q0].[A_KnifeClassID] AS [A_KnifeClassID]'[q0].[A_CookRating] AS [A_CookRating] "            + "FROM (SELECT DISTINCT [t2].[ID] AS [A_ID]'[t2].[FirstName] AS [A_FirstName]'[t2].[Name] AS [A_Name]'"            + "[t2].[IsStarredCook] AS [A_IsStarredCook]'[t2].[IsFullTimeCook] AS [A_IsFullTimeCook]'"            + "[t2].[SubstitutedID] AS [A_SubstitutedID]'[t2].[KitchenID] AS [A_KitchenID]'"            + "[t2].[KnifeID] AS [A_KnifeID]'[t2].[KnifeClassID] AS [A_KnifeClassID]'[t2].[CookRating] AS [A_CookRating] "            + "FROM [CookTable] AS [t2]) AS [q0]) AS [q1]"'            row => (object) new                            {                                A = row.GetEntity<Cook> (                                    new ColumnID ("A_ID"' 0)'                                    new ColumnID ("A_FirstName"' 1)'                                    new ColumnID ("A_Name"' 2)'                                    new ColumnID ("A_IsStarredCook"' 3)'                                    new ColumnID ("A_IsFullTimeCook"' 4)'                                    new ColumnID ("A_SubstitutedID"' 5)'                                    new ColumnID ("A_KitchenID"' 6)'                                    new ColumnID ("A_KnifeID"' 7)'                                    new ColumnID ("A_KnifeClassID"' 8)'                                    new ColumnID ("A_CookRating"' 9))                            });
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,NestedSelectProjection_CompoundWithoutMemberAccess,The following statement contains a magic number: CheckQuery (            from x in (from y in (from c in Cooks select new { A = c }).Distinct () select y).Distinct () select x'            "SELECT [q1].[A_ID] AS [A_ID]'[q1].[A_FirstName] AS [A_FirstName]'[q1].[A_Name] AS [A_Name]'"            + "[q1].[A_IsStarredCook] AS [A_IsStarredCook]'[q1].[A_IsFullTimeCook] AS [A_IsFullTimeCook]'"            + "[q1].[A_SubstitutedID] AS [A_SubstitutedID]'[q1].[A_KitchenID] AS [A_KitchenID]'"            + "[q1].[A_KnifeID] AS [A_KnifeID]'[q1].[A_KnifeClassID] AS [A_KnifeClassID]'[q1].[A_CookRating] AS [A_CookRating] "             + "FROM (SELECT DISTINCT [q0].[A_ID] AS [A_ID]'[q0].[A_FirstName] AS [A_FirstName]'[q0].[A_Name] AS [A_Name]'"            + "[q0].[A_IsStarredCook] AS [A_IsStarredCook]'[q0].[A_IsFullTimeCook] AS [A_IsFullTimeCook]'"            + "[q0].[A_SubstitutedID] AS [A_SubstitutedID]'[q0].[A_KitchenID] AS [A_KitchenID]'"            + "[q0].[A_KnifeID] AS [A_KnifeID]'[q0].[A_KnifeClassID] AS [A_KnifeClassID]'[q0].[A_CookRating] AS [A_CookRating] "            + "FROM (SELECT DISTINCT [t2].[ID] AS [A_ID]'[t2].[FirstName] AS [A_FirstName]'[t2].[Name] AS [A_Name]'"            + "[t2].[IsStarredCook] AS [A_IsStarredCook]'[t2].[IsFullTimeCook] AS [A_IsFullTimeCook]'"            + "[t2].[SubstitutedID] AS [A_SubstitutedID]'[t2].[KitchenID] AS [A_KitchenID]'"            + "[t2].[KnifeID] AS [A_KnifeID]'[t2].[KnifeClassID] AS [A_KnifeClassID]'[t2].[CookRating] AS [A_CookRating] "            + "FROM [CookTable] AS [t2]) AS [q0]) AS [q1]"'            row => (object) new                            {                                A = row.GetEntity<Cook> (                                    new ColumnID ("A_ID"' 0)'                                    new ColumnID ("A_FirstName"' 1)'                                    new ColumnID ("A_Name"' 2)'                                    new ColumnID ("A_IsStarredCook"' 3)'                                    new ColumnID ("A_IsFullTimeCook"' 4)'                                    new ColumnID ("A_SubstitutedID"' 5)'                                    new ColumnID ("A_KitchenID"' 6)'                                    new ColumnID ("A_KnifeID"' 7)'                                    new ColumnID ("A_KnifeClassID"' 8)'                                    new ColumnID ("A_CookRating"' 9))                            });
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,NestedSelectProjection_CompoundWithoutMemberAccess,The following statement contains a magic number: CheckQuery (            from x in (from y in (from c in Cooks select new { A = c }).Distinct () select y).Distinct () select x'            "SELECT [q1].[A_ID] AS [A_ID]'[q1].[A_FirstName] AS [A_FirstName]'[q1].[A_Name] AS [A_Name]'"            + "[q1].[A_IsStarredCook] AS [A_IsStarredCook]'[q1].[A_IsFullTimeCook] AS [A_IsFullTimeCook]'"            + "[q1].[A_SubstitutedID] AS [A_SubstitutedID]'[q1].[A_KitchenID] AS [A_KitchenID]'"            + "[q1].[A_KnifeID] AS [A_KnifeID]'[q1].[A_KnifeClassID] AS [A_KnifeClassID]'[q1].[A_CookRating] AS [A_CookRating] "             + "FROM (SELECT DISTINCT [q0].[A_ID] AS [A_ID]'[q0].[A_FirstName] AS [A_FirstName]'[q0].[A_Name] AS [A_Name]'"            + "[q0].[A_IsStarredCook] AS [A_IsStarredCook]'[q0].[A_IsFullTimeCook] AS [A_IsFullTimeCook]'"            + "[q0].[A_SubstitutedID] AS [A_SubstitutedID]'[q0].[A_KitchenID] AS [A_KitchenID]'"            + "[q0].[A_KnifeID] AS [A_KnifeID]'[q0].[A_KnifeClassID] AS [A_KnifeClassID]'[q0].[A_CookRating] AS [A_CookRating] "            + "FROM (SELECT DISTINCT [t2].[ID] AS [A_ID]'[t2].[FirstName] AS [A_FirstName]'[t2].[Name] AS [A_Name]'"            + "[t2].[IsStarredCook] AS [A_IsStarredCook]'[t2].[IsFullTimeCook] AS [A_IsFullTimeCook]'"            + "[t2].[SubstitutedID] AS [A_SubstitutedID]'[t2].[KitchenID] AS [A_KitchenID]'"            + "[t2].[KnifeID] AS [A_KnifeID]'[t2].[KnifeClassID] AS [A_KnifeClassID]'[t2].[CookRating] AS [A_CookRating] "            + "FROM [CookTable] AS [t2]) AS [q0]) AS [q1]"'            row => (object) new                            {                                A = row.GetEntity<Cook> (                                    new ColumnID ("A_ID"' 0)'                                    new ColumnID ("A_FirstName"' 1)'                                    new ColumnID ("A_Name"' 2)'                                    new ColumnID ("A_IsStarredCook"' 3)'                                    new ColumnID ("A_IsFullTimeCook"' 4)'                                    new ColumnID ("A_SubstitutedID"' 5)'                                    new ColumnID ("A_KitchenID"' 6)'                                    new ColumnID ("A_KnifeID"' 7)'                                    new ColumnID ("A_KnifeClassID"' 8)'                                    new ColumnID ("A_CookRating"' 9))                            });
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,NestedSelectProjection_CompoundWithoutMemberAccess,The following statement contains a magic number: CheckQuery (            from x in (from y in (from c in Cooks select new { A = c }).Distinct () select y).Distinct () select x'            "SELECT [q1].[A_ID] AS [A_ID]'[q1].[A_FirstName] AS [A_FirstName]'[q1].[A_Name] AS [A_Name]'"            + "[q1].[A_IsStarredCook] AS [A_IsStarredCook]'[q1].[A_IsFullTimeCook] AS [A_IsFullTimeCook]'"            + "[q1].[A_SubstitutedID] AS [A_SubstitutedID]'[q1].[A_KitchenID] AS [A_KitchenID]'"            + "[q1].[A_KnifeID] AS [A_KnifeID]'[q1].[A_KnifeClassID] AS [A_KnifeClassID]'[q1].[A_CookRating] AS [A_CookRating] "             + "FROM (SELECT DISTINCT [q0].[A_ID] AS [A_ID]'[q0].[A_FirstName] AS [A_FirstName]'[q0].[A_Name] AS [A_Name]'"            + "[q0].[A_IsStarredCook] AS [A_IsStarredCook]'[q0].[A_IsFullTimeCook] AS [A_IsFullTimeCook]'"            + "[q0].[A_SubstitutedID] AS [A_SubstitutedID]'[q0].[A_KitchenID] AS [A_KitchenID]'"            + "[q0].[A_KnifeID] AS [A_KnifeID]'[q0].[A_KnifeClassID] AS [A_KnifeClassID]'[q0].[A_CookRating] AS [A_CookRating] "            + "FROM (SELECT DISTINCT [t2].[ID] AS [A_ID]'[t2].[FirstName] AS [A_FirstName]'[t2].[Name] AS [A_Name]'"            + "[t2].[IsStarredCook] AS [A_IsStarredCook]'[t2].[IsFullTimeCook] AS [A_IsFullTimeCook]'"            + "[t2].[SubstitutedID] AS [A_SubstitutedID]'[t2].[KitchenID] AS [A_KitchenID]'"            + "[t2].[KnifeID] AS [A_KnifeID]'[t2].[KnifeClassID] AS [A_KnifeClassID]'[t2].[CookRating] AS [A_CookRating] "            + "FROM [CookTable] AS [t2]) AS [q0]) AS [q1]"'            row => (object) new                            {                                A = row.GetEntity<Cook> (                                    new ColumnID ("A_ID"' 0)'                                    new ColumnID ("A_FirstName"' 1)'                                    new ColumnID ("A_Name"' 2)'                                    new ColumnID ("A_IsStarredCook"' 3)'                                    new ColumnID ("A_IsFullTimeCook"' 4)'                                    new ColumnID ("A_SubstitutedID"' 5)'                                    new ColumnID ("A_KitchenID"' 6)'                                    new ColumnID ("A_KnifeID"' 7)'                                    new ColumnID ("A_KnifeClassID"' 8)'                                    new ColumnID ("A_CookRating"' 9))                            });
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,NestedSelectProjection_CompoundWithoutMemberAccess,The following statement contains a magic number: CheckQuery (            from x in (from y in (from c in Cooks select new { A = c }).Distinct () select y).Distinct () select x'            "SELECT [q1].[A_ID] AS [A_ID]'[q1].[A_FirstName] AS [A_FirstName]'[q1].[A_Name] AS [A_Name]'"            + "[q1].[A_IsStarredCook] AS [A_IsStarredCook]'[q1].[A_IsFullTimeCook] AS [A_IsFullTimeCook]'"            + "[q1].[A_SubstitutedID] AS [A_SubstitutedID]'[q1].[A_KitchenID] AS [A_KitchenID]'"            + "[q1].[A_KnifeID] AS [A_KnifeID]'[q1].[A_KnifeClassID] AS [A_KnifeClassID]'[q1].[A_CookRating] AS [A_CookRating] "             + "FROM (SELECT DISTINCT [q0].[A_ID] AS [A_ID]'[q0].[A_FirstName] AS [A_FirstName]'[q0].[A_Name] AS [A_Name]'"            + "[q0].[A_IsStarredCook] AS [A_IsStarredCook]'[q0].[A_IsFullTimeCook] AS [A_IsFullTimeCook]'"            + "[q0].[A_SubstitutedID] AS [A_SubstitutedID]'[q0].[A_KitchenID] AS [A_KitchenID]'"            + "[q0].[A_KnifeID] AS [A_KnifeID]'[q0].[A_KnifeClassID] AS [A_KnifeClassID]'[q0].[A_CookRating] AS [A_CookRating] "            + "FROM (SELECT DISTINCT [t2].[ID] AS [A_ID]'[t2].[FirstName] AS [A_FirstName]'[t2].[Name] AS [A_Name]'"            + "[t2].[IsStarredCook] AS [A_IsStarredCook]'[t2].[IsFullTimeCook] AS [A_IsFullTimeCook]'"            + "[t2].[SubstitutedID] AS [A_SubstitutedID]'[t2].[KitchenID] AS [A_KitchenID]'"            + "[t2].[KnifeID] AS [A_KnifeID]'[t2].[KnifeClassID] AS [A_KnifeClassID]'[t2].[CookRating] AS [A_CookRating] "            + "FROM [CookTable] AS [t2]) AS [q0]) AS [q1]"'            row => (object) new                            {                                A = row.GetEntity<Cook> (                                    new ColumnID ("A_ID"' 0)'                                    new ColumnID ("A_FirstName"' 1)'                                    new ColumnID ("A_Name"' 2)'                                    new ColumnID ("A_IsStarredCook"' 3)'                                    new ColumnID ("A_IsFullTimeCook"' 4)'                                    new ColumnID ("A_SubstitutedID"' 5)'                                    new ColumnID ("A_KitchenID"' 6)'                                    new ColumnID ("A_KnifeID"' 7)'                                    new ColumnID ("A_KnifeClassID"' 8)'                                    new ColumnID ("A_CookRating"' 9))                            });
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,NestedSelectProjection_WithBooleanConditions,The following statement contains a magic number: CheckQuery (            from c in Cooks select new { c.IsStarredCook' True = true' HasFirstName = c.FirstName != null }'            "SELECT [t0].[IsStarredCook] AS [IsStarredCook]'"             + "CONVERT(BIT' @1) AS [True]'"            + "CONVERT(BIT' CASE WHEN ([t0].[FirstName] IS NOT NULL) THEN 1 ELSE 0 END) AS [HasFirstName] FROM [CookTable] AS [t0]"'            row => (object) new            {                IsStarredCook = row.GetValue<bool> (new ColumnID ("IsStarredCook"' 0))'                True = row.GetValue<bool> (new ColumnID ("True"' 1))'                HasFirstName = row.GetValue<bool> (new ColumnID ("HasFirstName"' 2))            }'            new CommandParameter ("@1"' 1));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,NestedSelectProjection_WithCastInsideNamedExpression,The following statement contains a magic number: CheckQuery (          from c in Cooks select new { Name = c.Name' History = (double) c.ID < 100 ? "Long-time cook" : "New cook" }'            "SELECT [t0].[Name] AS [Name]'CASE WHEN ([t0].[ID] < @1) THEN @2 ELSE @3 END AS [History] FROM [CookTable] AS [t0]"'            row => (object) new { Name = row.GetValue<string> (new ColumnID ("Name"' 0))' History = row.GetValue<string> (new ColumnID ("History"' 1)) }'          new CommandParameter ("@1"' 100.0)'          new CommandParameter ("@2"' "Long-time cook")'          new CommandParameter ("@3"' "New cook"));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,NestedSelectProjection_WithCastInsideNamedExpression,The following statement contains a magic number: CheckQuery (          from c in Cooks select new { Name = c.Name' History = (double) c.ID < 100 ? "Long-time cook" : "New cook" }'            "SELECT [t0].[Name] AS [Name]'CASE WHEN ([t0].[ID] < @1) THEN @2 ELSE @3 END AS [History] FROM [CookTable] AS [t0]"'            row => (object) new { Name = row.GetValue<string> (new ColumnID ("Name"' 0))' History = row.GetValue<string> (new ColumnID ("History"' 1)) }'          new CommandParameter ("@1"' 100.0)'          new CommandParameter ("@2"' "Long-time cook")'          new CommandParameter ("@3"' "New cook"));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,LocallyEvaluatedMethod,The following statement contains a magic number: CheckQuery (            from c in Cooks select CustomStaticMethodWithValues (c.ID' o' c.FirstName)'            "SELECT [t0].[ID] AS [Arg0]'NULL AS [Arg1]'[t0].[FirstName] AS [Arg2] FROM [CookTable] AS [t0]"'            row => (object) CustomStaticMethodWithValues (row.GetValue<int> (new ColumnID ("Arg0"' 0))' o' row.GetValue<string> (new ColumnID ("Arg2"' 2))));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,LocallyEvaluatedMethod_WithConstantArguments,The following statement contains a magic number: CheckQuery (            from c in Cooks select CustomStaticMethodWithValues (42' null' "test")'            "SELECT @1 AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<string> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' "precalculated value!"));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,LocallyEvaluatedMethod_WithConstantArguments,The following statement contains a magic number: CheckQuery (            from c in Cooks select CustomStaticMethodWithValues (42' null' c.FirstName)'            "SELECT NULL AS [Arg0]'NULL AS [Arg1]'[t0].[FirstName] AS [Arg2] FROM [CookTable] AS [t0]"'            row => (object) CustomStaticMethodWithValues (42' null' row.GetValue<string> (new ColumnID ("Arg2"' 2))));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,LocallyEvaluatedMethod_WithConstantArguments,The following statement contains a magic number: CheckQuery (            from c in Cooks select CustomStaticMethodWithValues (42' null' c.FirstName)'            "SELECT NULL AS [Arg0]'NULL AS [Arg1]'[t0].[FirstName] AS [Arg2] FROM [CookTable] AS [t0]"'            row => (object) CustomStaticMethodWithValues (42' null' row.GetValue<string> (new ColumnID ("Arg2"' 2))));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,LocallyEvaluatedMethod_WithConstantArguments,The following statement contains a magic number: CheckQuery (            from c in Cooks select CustomStaticMethodWithValues (42' null' c.FirstName)'            "SELECT NULL AS [Arg0]'NULL AS [Arg1]'[t0].[FirstName] AS [Arg2] FROM [CookTable] AS [t0]"'            row => (object) CustomStaticMethodWithValues (42' null' row.GetValue<string> (new ColumnID ("Arg2"' 2))));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,LocallyEvaluatedMethod_WithConstantArguments,The following statement contains a magic number: CheckQuery (            from c in Cooks select CustomStaticThrowingMethodWithValue (42)'            "SELECT NULL AS [Arg0] FROM [CookTable] AS [t0]"'            row => (object) CustomStaticThrowingMethodWithValue (42)'            false);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,LocallyEvaluatedMethod_WithConstantArguments,The following statement contains a magic number: CheckQuery (            from c in Cooks select CustomStaticThrowingMethodWithValue (42)'            "SELECT NULL AS [Arg0] FROM [CookTable] AS [t0]"'            row => (object) CustomStaticThrowingMethodWithValue (42)'            false);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,GetColumnIDsForCook,The following statement contains a magic number: return new[] {new ColumnID (prefix + "ID"' 0)'                       new ColumnID (prefix + "FirstName"' 1)'                      new ColumnID (prefix + "Name"' 2)'                      new ColumnID (prefix + "IsStarredCook"' 3)'                      new ColumnID (prefix + "IsFullTimeCook"' 4)'                      new ColumnID (prefix + "SubstitutedID"' 5)'                      new ColumnID (prefix + "KitchenID"' 6)'                      new ColumnID (prefix + "KnifeID"' 7)'                      new ColumnID (prefix + "KnifeClassID"' 8)'                      new ColumnID (prefix + "CookRating"' 9)                     };
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,GetColumnIDsForCook,The following statement contains a magic number: return new[] {new ColumnID (prefix + "ID"' 0)'                       new ColumnID (prefix + "FirstName"' 1)'                      new ColumnID (prefix + "Name"' 2)'                      new ColumnID (prefix + "IsStarredCook"' 3)'                      new ColumnID (prefix + "IsFullTimeCook"' 4)'                      new ColumnID (prefix + "SubstitutedID"' 5)'                      new ColumnID (prefix + "KitchenID"' 6)'                      new ColumnID (prefix + "KnifeID"' 7)'                      new ColumnID (prefix + "KnifeClassID"' 8)'                      new ColumnID (prefix + "CookRating"' 9)                     };
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,GetColumnIDsForCook,The following statement contains a magic number: return new[] {new ColumnID (prefix + "ID"' 0)'                       new ColumnID (prefix + "FirstName"' 1)'                      new ColumnID (prefix + "Name"' 2)'                      new ColumnID (prefix + "IsStarredCook"' 3)'                      new ColumnID (prefix + "IsFullTimeCook"' 4)'                      new ColumnID (prefix + "SubstitutedID"' 5)'                      new ColumnID (prefix + "KitchenID"' 6)'                      new ColumnID (prefix + "KnifeID"' 7)'                      new ColumnID (prefix + "KnifeClassID"' 8)'                      new ColumnID (prefix + "CookRating"' 9)                     };
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,GetColumnIDsForCook,The following statement contains a magic number: return new[] {new ColumnID (prefix + "ID"' 0)'                       new ColumnID (prefix + "FirstName"' 1)'                      new ColumnID (prefix + "Name"' 2)'                      new ColumnID (prefix + "IsStarredCook"' 3)'                      new ColumnID (prefix + "IsFullTimeCook"' 4)'                      new ColumnID (prefix + "SubstitutedID"' 5)'                      new ColumnID (prefix + "KitchenID"' 6)'                      new ColumnID (prefix + "KnifeID"' 7)'                      new ColumnID (prefix + "KnifeClassID"' 8)'                      new ColumnID (prefix + "CookRating"' 9)                     };
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,GetColumnIDsForCook,The following statement contains a magic number: return new[] {new ColumnID (prefix + "ID"' 0)'                       new ColumnID (prefix + "FirstName"' 1)'                      new ColumnID (prefix + "Name"' 2)'                      new ColumnID (prefix + "IsStarredCook"' 3)'                      new ColumnID (prefix + "IsFullTimeCook"' 4)'                      new ColumnID (prefix + "SubstitutedID"' 5)'                      new ColumnID (prefix + "KitchenID"' 6)'                      new ColumnID (prefix + "KnifeID"' 7)'                      new ColumnID (prefix + "KnifeClassID"' 8)'                      new ColumnID (prefix + "CookRating"' 9)                     };
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,GetColumnIDsForCook,The following statement contains a magic number: return new[] {new ColumnID (prefix + "ID"' 0)'                       new ColumnID (prefix + "FirstName"' 1)'                      new ColumnID (prefix + "Name"' 2)'                      new ColumnID (prefix + "IsStarredCook"' 3)'                      new ColumnID (prefix + "IsFullTimeCook"' 4)'                      new ColumnID (prefix + "SubstitutedID"' 5)'                      new ColumnID (prefix + "KitchenID"' 6)'                      new ColumnID (prefix + "KnifeID"' 7)'                      new ColumnID (prefix + "KnifeClassID"' 8)'                      new ColumnID (prefix + "CookRating"' 9)                     };
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,GetColumnIDsForCook,The following statement contains a magic number: return new[] {new ColumnID (prefix + "ID"' 0)'                       new ColumnID (prefix + "FirstName"' 1)'                      new ColumnID (prefix + "Name"' 2)'                      new ColumnID (prefix + "IsStarredCook"' 3)'                      new ColumnID (prefix + "IsFullTimeCook"' 4)'                      new ColumnID (prefix + "SubstitutedID"' 5)'                      new ColumnID (prefix + "KitchenID"' 6)'                      new ColumnID (prefix + "KnifeID"' 7)'                      new ColumnID (prefix + "KnifeClassID"' 8)'                      new ColumnID (prefix + "CookRating"' 9)                     };
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests,SelectProjectionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\SelectProjectionSqlBackendIntegrationTest.cs,GetColumnIDsForCook,The following statement contains a magic number: return new[] {new ColumnID (prefix + "ID"' 0)'                       new ColumnID (prefix + "FirstName"' 1)'                      new ColumnID (prefix + "Name"' 2)'                      new ColumnID (prefix + "IsStarredCook"' 3)'                      new ColumnID (prefix + "IsFullTimeCook"' 4)'                      new ColumnID (prefix + "SubstitutedID"' 5)'                      new ColumnID (prefix + "KitchenID"' 6)'                      new ColumnID (prefix + "KnifeID"' 7)'                      new ColumnID (prefix + "KnifeClassID"' 8)'                      new ColumnID (prefix + "CookRating"' 9)                     };
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,DateTimeMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\DateTimeMethodCallExpressionSqlBackendIntegrationTest.cs,SetUp,The following statement contains a magic number: _referenceDate = new DateTime (2012' 12' 07);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,DateTimeMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\DateTimeMethodCallExpressionSqlBackendIntegrationTest.cs,SetUp,The following statement contains a magic number: _referenceDate = new DateTime (2012' 12' 07);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,DateTimeMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\DateTimeMethodCallExpressionSqlBackendIntegrationTest.cs,SetUp,The following statement contains a magic number: _referenceDate = new DateTime (2012' 12' 07);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,DateTimeMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\DateTimeMethodCallExpressionSqlBackendIntegrationTest.cs,AddYears,The following statement contains a magic number: CheckQuery (            from c in Companies where c.DateOfIncorporation.AddYears (17) <= _referenceDate select c.ID'            "SELECT [t0].[ID] AS [value] "            + "FROM [CompanyTable] AS [t0] "            + "WHERE (DATEADD(year' @1' [t0].[DateOfIncorporation]) <= @2)"'            new CommandParameter ("@1"' 17)'            new CommandParameter ("@2"' _referenceDate));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,DateTimeMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\DateTimeMethodCallExpressionSqlBackendIntegrationTest.cs,AddYears,The following statement contains a magic number: CheckQuery (            from c in Companies where c.DateOfIncorporation.AddYears (17) <= _referenceDate select c.ID'            "SELECT [t0].[ID] AS [value] "            + "FROM [CompanyTable] AS [t0] "            + "WHERE (DATEADD(year' @1' [t0].[DateOfIncorporation]) <= @2)"'            new CommandParameter ("@1"' 17)'            new CommandParameter ("@2"' _referenceDate));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,DateTimeMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\DateTimeMethodCallExpressionSqlBackendIntegrationTest.cs,AddMonths,The following statement contains a magic number: CheckQuery (            from c in Companies where c.DateOfIncorporation.AddMonths (17) <= _referenceDate select c.ID'            "SELECT [t0].[ID] AS [value] "            + "FROM [CompanyTable] AS [t0] "            + "WHERE (DATEADD(month' @1' [t0].[DateOfIncorporation]) <= @2)"'            new CommandParameter ("@1"' 17)'            new CommandParameter ("@2"' _referenceDate));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,DateTimeMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\DateTimeMethodCallExpressionSqlBackendIntegrationTest.cs,AddMonths,The following statement contains a magic number: CheckQuery (            from c in Companies where c.DateOfIncorporation.AddMonths (17) <= _referenceDate select c.ID'            "SELECT [t0].[ID] AS [value] "            + "FROM [CompanyTable] AS [t0] "            + "WHERE (DATEADD(month' @1' [t0].[DateOfIncorporation]) <= @2)"'            new CommandParameter ("@1"' 17)'            new CommandParameter ("@2"' _referenceDate));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,DateTimeMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\DateTimeMethodCallExpressionSqlBackendIntegrationTest.cs,AddDays,The following statement contains a magic number: CheckQuery (            from c in Companies where c.DateOfIncorporation.AddDays (12.13) <= _referenceDate select c.ID'            "SELECT [t0].[ID] AS [value] "            + "FROM [CompanyTable] AS [t0] "            + "WHERE (DATEADD(millisecond' (CONVERT(BIGINT' (@1 * 86400000)) % 86400000)' "            + "DATEADD(day' (CONVERT(BIGINT' (@1 * 86400000)) / 86400000)' [t0].[DateOfIncorporation])) <= @2)"'            new CommandParameter ("@1"' 12.13)'            new CommandParameter ("@2"' _referenceDate));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,DateTimeMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\DateTimeMethodCallExpressionSqlBackendIntegrationTest.cs,AddDays,The following statement contains a magic number: CheckQuery (            from c in Companies where c.DateOfIncorporation.AddDays (12.13) <= _referenceDate select c.ID'            "SELECT [t0].[ID] AS [value] "            + "FROM [CompanyTable] AS [t0] "            + "WHERE (DATEADD(millisecond' (CONVERT(BIGINT' (@1 * 86400000)) % 86400000)' "            + "DATEADD(day' (CONVERT(BIGINT' (@1 * 86400000)) / 86400000)' [t0].[DateOfIncorporation])) <= @2)"'            new CommandParameter ("@1"' 12.13)'            new CommandParameter ("@2"' _referenceDate));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,DateTimeMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\DateTimeMethodCallExpressionSqlBackendIntegrationTest.cs,AddHours,The following statement contains a magic number: CheckQuery (            from c in Companies where c.DateOfIncorporation.AddHours (12.13) <= _referenceDate select c.ID'            "SELECT [t0].[ID] AS [value] "            + "FROM [CompanyTable] AS [t0] "            + "WHERE (DATEADD(millisecond' (CONVERT(BIGINT' (@1 * 3600000)) % 86400000)' "            + "DATEADD(day' (CONVERT(BIGINT' (@1 * 3600000)) / 86400000)' [t0].[DateOfIncorporation])) <= @2)"'            new CommandParameter ("@1"' 12.13)'            new CommandParameter ("@2"' _referenceDate));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,DateTimeMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\DateTimeMethodCallExpressionSqlBackendIntegrationTest.cs,AddHours,The following statement contains a magic number: CheckQuery (            from c in Companies where c.DateOfIncorporation.AddHours (12.13) <= _referenceDate select c.ID'            "SELECT [t0].[ID] AS [value] "            + "FROM [CompanyTable] AS [t0] "            + "WHERE (DATEADD(millisecond' (CONVERT(BIGINT' (@1 * 3600000)) % 86400000)' "            + "DATEADD(day' (CONVERT(BIGINT' (@1 * 3600000)) / 86400000)' [t0].[DateOfIncorporation])) <= @2)"'            new CommandParameter ("@1"' 12.13)'            new CommandParameter ("@2"' _referenceDate));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,DateTimeMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\DateTimeMethodCallExpressionSqlBackendIntegrationTest.cs,AddMinutes,The following statement contains a magic number: CheckQuery (            from c in Companies where c.DateOfIncorporation.AddMinutes (12.13) <= _referenceDate select c.ID'            "SELECT [t0].[ID] AS [value] "            + "FROM [CompanyTable] AS [t0] "            + "WHERE (DATEADD(millisecond' (CONVERT(BIGINT' (@1 * 60000)) % 86400000)' "            + "DATEADD(day' (CONVERT(BIGINT' (@1 * 60000)) / 86400000)' [t0].[DateOfIncorporation])) <= @2)"'            new CommandParameter ("@1"' 12.13)'            new CommandParameter ("@2"' _referenceDate));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,DateTimeMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\DateTimeMethodCallExpressionSqlBackendIntegrationTest.cs,AddMinutes,The following statement contains a magic number: CheckQuery (            from c in Companies where c.DateOfIncorporation.AddMinutes (12.13) <= _referenceDate select c.ID'            "SELECT [t0].[ID] AS [value] "            + "FROM [CompanyTable] AS [t0] "            + "WHERE (DATEADD(millisecond' (CONVERT(BIGINT' (@1 * 60000)) % 86400000)' "            + "DATEADD(day' (CONVERT(BIGINT' (@1 * 60000)) / 86400000)' [t0].[DateOfIncorporation])) <= @2)"'            new CommandParameter ("@1"' 12.13)'            new CommandParameter ("@2"' _referenceDate));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,DateTimeMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\DateTimeMethodCallExpressionSqlBackendIntegrationTest.cs,AddSeconds,The following statement contains a magic number: CheckQuery (            from c in Companies where c.DateOfIncorporation.AddSeconds (12.13) <= _referenceDate select c.ID'            "SELECT [t0].[ID] AS [value] "            + "FROM [CompanyTable] AS [t0] "            + "WHERE (DATEADD(millisecond' (CONVERT(BIGINT' (@1 * 1000)) % 86400000)' "            + "DATEADD(day' (CONVERT(BIGINT' (@1 * 1000)) / 86400000)' [t0].[DateOfIncorporation])) <= @2)"'            new CommandParameter ("@1"' 12.13)'            new CommandParameter ("@2"' _referenceDate));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,DateTimeMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\DateTimeMethodCallExpressionSqlBackendIntegrationTest.cs,AddSeconds,The following statement contains a magic number: CheckQuery (            from c in Companies where c.DateOfIncorporation.AddSeconds (12.13) <= _referenceDate select c.ID'            "SELECT [t0].[ID] AS [value] "            + "FROM [CompanyTable] AS [t0] "            + "WHERE (DATEADD(millisecond' (CONVERT(BIGINT' (@1 * 1000)) % 86400000)' "            + "DATEADD(day' (CONVERT(BIGINT' (@1 * 1000)) / 86400000)' [t0].[DateOfIncorporation])) <= @2)"'            new CommandParameter ("@1"' 12.13)'            new CommandParameter ("@2"' _referenceDate));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,DateTimeMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\DateTimeMethodCallExpressionSqlBackendIntegrationTest.cs,AddMilliseconds,The following statement contains a magic number: CheckQuery (            from c in Companies where c.DateOfIncorporation.AddMilliseconds (12.13) <= _referenceDate select c.ID'            "SELECT [t0].[ID] AS [value] "            + "FROM [CompanyTable] AS [t0] "            + "WHERE (DATEADD(millisecond' (CONVERT(BIGINT' @1) % 86400000)' "            + "DATEADD(day' (CONVERT(BIGINT' @1) / 86400000)' [t0].[DateOfIncorporation])) <= @2)"'            new CommandParameter ("@1"' 12.13)'            new CommandParameter ("@2"' _referenceDate));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,DateTimeMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\DateTimeMethodCallExpressionSqlBackendIntegrationTest.cs,AddMilliseconds,The following statement contains a magic number: CheckQuery (            from c in Companies where c.DateOfIncorporation.AddMilliseconds (12.13) <= _referenceDate select c.ID'            "SELECT [t0].[ID] AS [value] "            + "FROM [CompanyTable] AS [t0] "            + "WHERE (DATEADD(millisecond' (CONVERT(BIGINT' @1) % 86400000)' "            + "DATEADD(day' (CONVERT(BIGINT' @1) / 86400000)' [t0].[DateOfIncorporation])) <= @2)"'            new CommandParameter ("@1"' 12.13)'            new CommandParameter ("@2"' _referenceDate));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,DateTimeMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\DateTimeMethodCallExpressionSqlBackendIntegrationTest.cs,AddTicks,The following statement contains a magic number: CheckQuery (            from c in Companies where c.DateOfIncorporation.AddTicks (12) <= _referenceDate select c.ID'            "SELECT [t0].[ID] AS [value] "            + "FROM [CompanyTable] AS [t0] "            + "WHERE (DATEADD(millisecond' ((@1 / 10000) % 86400000)' "            + "DATEADD(day' ((@1 / 10000) / 86400000)' [t0].[DateOfIncorporation])) <= @2)"'            new CommandParameter ("@1"' 12L)'            new CommandParameter ("@2"' _referenceDate));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,DateTimeMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\DateTimeMethodCallExpressionSqlBackendIntegrationTest.cs,AddTicks,The following statement contains a magic number: CheckQuery (            from c in Companies where c.DateOfIncorporation.AddTicks (12) <= _referenceDate select c.ID'            "SELECT [t0].[ID] AS [value] "            + "FROM [CompanyTable] AS [t0] "            + "WHERE (DATEADD(millisecond' ((@1 / 10000) % 86400000)' "            + "DATEADD(day' ((@1 / 10000) / 86400000)' [t0].[DateOfIncorporation])) <= @2)"'            new CommandParameter ("@1"' 12L)'            new CommandParameter ("@2"' _referenceDate));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,DateTimeMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\DateTimeMethodCallExpressionSqlBackendIntegrationTest.cs,Add_TimesSpan,The following statement contains a magic number: var timespan = TimeSpan.FromTicks (24);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,DateTimeMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\DateTimeMethodCallExpressionSqlBackendIntegrationTest.cs,Add_TimesSpan,The following statement contains a magic number: CheckQuery (            from c in Companies where c.DateOfIncorporation.Add (timespan) <= _referenceDate select c.ID'            "SELECT [t0].[ID] AS [value] "            + "FROM [CompanyTable] AS [t0] "            + "WHERE (DATEADD(millisecond' ((@1 / 10000) % 86400000)' "            + "DATEADD(day' ((@1 / 10000) / 86400000)' [t0].[DateOfIncorporation])) <= @2)"'            new CommandParameter ("@1"' 24L)'            new CommandParameter ("@2"' _referenceDate));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,TransformedMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\TransformedMethodCallExpressionSqlBackendIntegrationTest.cs,AttributeBasedTransformer_OnProperty,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.WeightInLbs'            "SELECT ([t0].[Weight] * @1) AS [value] FROM [CookTable] AS [t0]"'            new CommandParameter ("@1"' 2.20462262));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,TransformedMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\TransformedMethodCallExpressionSqlBackendIntegrationTest.cs,AttributeBasedTransformer_WithSubQuery_OnIndexedProperty,The following statement contains a magic number: CheckQuery (            from c in Cooks select c[3].ID'            "SELECT [q3].[value] AS [value] FROM [CookTable] AS [t1] "            + "CROSS APPLY (SELECT TOP (1) [q0].[ID] AS [value] "            + "FROM (SELECT TOP (3) [t2].[ID]'[t2].[FirstName]'[t2].[Name]'[t2].[IsStarredCook]'[t2].[IsFullTimeCook]'[t2].[SubstitutedID]'[t2].[KitchenID]'"            + "[t2].[KnifeID]'[t2].[KnifeClassID]'[t2].[CookRating] "            + "FROM [CookTable] AS [t2] WHERE ([t1].[ID] = [t2].[AssistedID])) AS [q0]) AS [q3]");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,EqualsMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\EqualsMethodCallExpressionSqlBackendIntegrationTest.cs,Equals,The following statement contains a magic number: CheckQuery (from c in Cooks where c.ID.Equals (10) select c.Name'          "SELECT [t0].[Name] AS [value] FROM [CookTable] AS [t0] WHERE ([t0].[ID] = @1)"'          new CommandParameter ("@1"' 10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,EqualsMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\EqualsMethodCallExpressionSqlBackendIntegrationTest.cs,Equals,The following statement contains a magic number: CheckQuery (from c in Cooks where c.ID.Equals (10) select c.Name'          "SELECT [t0].[Name] AS [value] FROM [CookTable] AS [t0] WHERE ([t0].[ID] = @1)"'          new CommandParameter ("@1"' 10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,EqualsMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\EqualsMethodCallExpressionSqlBackendIntegrationTest.cs,Equals_WithNonMatchingTypes,The following statement contains a magic number: CheckQuery (from c in Cooks where c.ID.Equals ((int?) 10) select c.Name'          "SELECT [t0].[Name] AS [value] FROM [CookTable] AS [t0] WHERE ([t0].[ID] = @1)"'          new CommandParameter ("@1"' (int?) 10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,EqualsMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\EqualsMethodCallExpressionSqlBackendIntegrationTest.cs,Equals_WithNonMatchingTypes,The following statement contains a magic number: CheckQuery (from c in Cooks where c.ID.Equals ((int?) 10) select c.Name'          "SELECT [t0].[Name] AS [value] FROM [CookTable] AS [t0] WHERE ([t0].[ID] = @1)"'          new CommandParameter ("@1"' (int?) 10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,EqualsMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\EqualsMethodCallExpressionSqlBackendIntegrationTest.cs,Equals_WithNonMatchingTypes,The following statement contains a magic number: CheckQuery (from c in Cooks where Equals (c.ID' (int?)10) select c.Name'          "SELECT [t0].[Name] AS [value] FROM [CookTable] AS [t0] WHERE ([t0].[ID] = @1)"'          new CommandParameter ("@1"' (int?) 10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,EqualsMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\EqualsMethodCallExpressionSqlBackendIntegrationTest.cs,Equals_WithNonMatchingTypes,The following statement contains a magic number: CheckQuery (from c in Cooks where Equals (c.ID' (int?)10) select c.Name'          "SELECT [t0].[Name] AS [value] FROM [CookTable] AS [t0] WHERE ([t0].[ID] = @1)"'          new CommandParameter ("@1"' (int?) 10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,Remove,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.FirstName.Remove (3)'            "SELECT STUFF([t0].[FirstName]' (@1 + 1)' (LEN(([t0].[FirstName] + '#')) - 1)' '') AS [value] FROM [CookTable] AS [t0]"'            new CommandParameter ("@1"' 3)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,Remove,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.FirstName.Remove (3)'            "SELECT STUFF([t0].[FirstName]' (@1 + 1)' (LEN(([t0].[FirstName] + '#')) - 1)' '') AS [value] FROM [CookTable] AS [t0]"'            new CommandParameter ("@1"' 3)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,Remove,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.FirstName.Remove (3' 5)'            "SELECT STUFF([t0].[FirstName]' (@1 + 1)' @2' '') AS [value] FROM [CookTable] AS [t0]"'            new CommandParameter ("@1"' 3)'            new CommandParameter ("@2"' 5)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,Remove,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.FirstName.Remove (3' 5)'            "SELECT STUFF([t0].[FirstName]' (@1 + 1)' @2' '') AS [value] FROM [CookTable] AS [t0]"'            new CommandParameter ("@1"' 3)'            new CommandParameter ("@2"' 5)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,Remove,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.FirstName.Remove (3' 5)'            "SELECT STUFF([t0].[FirstName]' (@1 + 1)' @2' '') AS [value] FROM [CookTable] AS [t0]"'            new CommandParameter ("@1"' 3)'            new CommandParameter ("@2"' 5)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,Remove,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.FirstName.Remove (3' 5)'            "SELECT STUFF([t0].[FirstName]' (@1 + 1)' @2' '') AS [value] FROM [CookTable] AS [t0]"'            new CommandParameter ("@1"' 3)'            new CommandParameter ("@2"' 5)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,Substring,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.FirstName.Substring (3)'            "SELECT SUBSTRING([t0].[FirstName]' (@1 + 1)' (LEN(([t0].[FirstName] + '#')) - 1)) AS [value] FROM [CookTable] AS [t0]"'            new CommandParameter ("@1"' 3)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,Substring,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.FirstName.Substring (3)'            "SELECT SUBSTRING([t0].[FirstName]' (@1 + 1)' (LEN(([t0].[FirstName] + '#')) - 1)) AS [value] FROM [CookTable] AS [t0]"'            new CommandParameter ("@1"' 3)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,Substring,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.FirstName.Substring (3' 5)'            "SELECT SUBSTRING([t0].[FirstName]' (@1 + 1)' @2) AS [value] FROM [CookTable] AS [t0]"'            new CommandParameter ("@1"' 3)'            new CommandParameter ("@2"' 5)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,Substring,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.FirstName.Substring (3' 5)'            "SELECT SUBSTRING([t0].[FirstName]' (@1 + 1)' @2) AS [value] FROM [CookTable] AS [t0]"'            new CommandParameter ("@1"' 3)'            new CommandParameter ("@2"' 5)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,Substring,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.FirstName.Substring (3' 5)'            "SELECT SUBSTRING([t0].[FirstName]' (@1 + 1)' @2) AS [value] FROM [CookTable] AS [t0]"'            new CommandParameter ("@1"' 3)'            new CommandParameter ("@2"' 5)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,Substring,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.FirstName.Substring (3' 5)'            "SELECT SUBSTRING([t0].[FirstName]' (@1 + 1)' @2) AS [value] FROM [CookTable] AS [t0]"'            new CommandParameter ("@1"' 3)'            new CommandParameter ("@2"' 5)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,IndexOf,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.FirstName.IndexOf ("test"' 2)'            "SELECT CASE WHEN (((LEN((@1 + '#')) - 1) = 0) AND ((@2 + 1) <= (LEN(([t0].[FirstName] + '#')) - 1))) THEN @2 ELSE (CHARINDEX(@1' [t0].[FirstName]' (@2 + 1)) - 1) END AS [value] "            + "FROM [CookTable] AS [t0]"'            new CommandParameter ("@1"' "test")'            new CommandParameter ("@2"' 2)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,IndexOf,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.FirstName.IndexOf ("test"' 2)'            "SELECT CASE WHEN (((LEN((@1 + '#')) - 1) = 0) AND ((@2 + 1) <= (LEN(([t0].[FirstName] + '#')) - 1))) THEN @2 ELSE (CHARINDEX(@1' [t0].[FirstName]' (@2 + 1)) - 1) END AS [value] "            + "FROM [CookTable] AS [t0]"'            new CommandParameter ("@1"' "test")'            new CommandParameter ("@2"' 2)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,IndexOf,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.FirstName.IndexOf ('t'' 2)'            "SELECT CASE WHEN (((LEN((@1 + '#')) - 1) = 0) AND ((@2 + 1) <= (LEN(([t0].[FirstName] + '#')) - 1))) THEN @2 ELSE (CHARINDEX(@1' [t0].[FirstName]' (@2 + 1)) - 1) END AS [value] "            + "FROM [CookTable] AS [t0]"'            new CommandParameter ("@1"' 't')'            new CommandParameter ("@2"' 2)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,IndexOf,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.FirstName.IndexOf ('t'' 2)'            "SELECT CASE WHEN (((LEN((@1 + '#')) - 1) = 0) AND ((@2 + 1) <= (LEN(([t0].[FirstName] + '#')) - 1))) THEN @2 ELSE (CHARINDEX(@1' [t0].[FirstName]' (@2 + 1)) - 1) END AS [value] "            + "FROM [CookTable] AS [t0]"'            new CommandParameter ("@1"' 't')'            new CommandParameter ("@2"' 2)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,IndexOf,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.FirstName.IndexOf ("test"' 2' 5)'            "SELECT CASE WHEN (((LEN((@1 + '#')) - 1) = 0) AND ((@2 + 1) <= (LEN(([t0].[FirstName] + '#')) - 1))) THEN @2 "            + "ELSE (CHARINDEX(@1' SUBSTRING([t0].[FirstName]' 1' (@2 + @3))' (@2 + 1)) - 1) END AS [value] FROM [CookTable] AS [t0]"'            new CommandParameter ("@1"' "test")'            new CommandParameter ("@2"' 2)'            new CommandParameter ("@3"' 5)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,IndexOf,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.FirstName.IndexOf ("test"' 2' 5)'            "SELECT CASE WHEN (((LEN((@1 + '#')) - 1) = 0) AND ((@2 + 1) <= (LEN(([t0].[FirstName] + '#')) - 1))) THEN @2 "            + "ELSE (CHARINDEX(@1' SUBSTRING([t0].[FirstName]' 1' (@2 + @3))' (@2 + 1)) - 1) END AS [value] FROM [CookTable] AS [t0]"'            new CommandParameter ("@1"' "test")'            new CommandParameter ("@2"' 2)'            new CommandParameter ("@3"' 5)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,IndexOf,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.FirstName.IndexOf ("test"' 2' 5)'            "SELECT CASE WHEN (((LEN((@1 + '#')) - 1) = 0) AND ((@2 + 1) <= (LEN(([t0].[FirstName] + '#')) - 1))) THEN @2 "            + "ELSE (CHARINDEX(@1' SUBSTRING([t0].[FirstName]' 1' (@2 + @3))' (@2 + 1)) - 1) END AS [value] FROM [CookTable] AS [t0]"'            new CommandParameter ("@1"' "test")'            new CommandParameter ("@2"' 2)'            new CommandParameter ("@3"' 5)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,IndexOf,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.FirstName.IndexOf ("test"' 2' 5)'            "SELECT CASE WHEN (((LEN((@1 + '#')) - 1) = 0) AND ((@2 + 1) <= (LEN(([t0].[FirstName] + '#')) - 1))) THEN @2 "            + "ELSE (CHARINDEX(@1' SUBSTRING([t0].[FirstName]' 1' (@2 + @3))' (@2 + 1)) - 1) END AS [value] FROM [CookTable] AS [t0]"'            new CommandParameter ("@1"' "test")'            new CommandParameter ("@2"' 2)'            new CommandParameter ("@3"' 5)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,IndexOf,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.FirstName.IndexOf ('t'' 2' 5)'            "SELECT CASE WHEN (((LEN((@1 + '#')) - 1) = 0) AND ((@2 + 1) <= (LEN(([t0].[FirstName] + '#')) - 1))) THEN @2 "            + "ELSE (CHARINDEX(@1' SUBSTRING([t0].[FirstName]' 1' (@2 + @3))' (@2 + 1)) - 1) END AS [value] FROM [CookTable] AS [t0]"'            new CommandParameter ("@1"' 't')'            new CommandParameter ("@2"' 2)'            new CommandParameter ("@3"' 5)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,IndexOf,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.FirstName.IndexOf ('t'' 2' 5)'            "SELECT CASE WHEN (((LEN((@1 + '#')) - 1) = 0) AND ((@2 + 1) <= (LEN(([t0].[FirstName] + '#')) - 1))) THEN @2 "            + "ELSE (CHARINDEX(@1' SUBSTRING([t0].[FirstName]' 1' (@2 + @3))' (@2 + 1)) - 1) END AS [value] FROM [CookTable] AS [t0]"'            new CommandParameter ("@1"' 't')'            new CommandParameter ("@2"' 2)'            new CommandParameter ("@3"' 5)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,IndexOf,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.FirstName.IndexOf ('t'' 2' 5)'            "SELECT CASE WHEN (((LEN((@1 + '#')) - 1) = 0) AND ((@2 + 1) <= (LEN(([t0].[FirstName] + '#')) - 1))) THEN @2 "            + "ELSE (CHARINDEX(@1' SUBSTRING([t0].[FirstName]' 1' (@2 + @3))' (@2 + 1)) - 1) END AS [value] FROM [CookTable] AS [t0]"'            new CommandParameter ("@1"' 't')'            new CommandParameter ("@2"' 2)'            new CommandParameter ("@3"' 5)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,IndexOf,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.FirstName.IndexOf ('t'' 2' 5)'            "SELECT CASE WHEN (((LEN((@1 + '#')) - 1) = 0) AND ((@2 + 1) <= (LEN(([t0].[FirstName] + '#')) - 1))) THEN @2 "            + "ELSE (CHARINDEX(@1' SUBSTRING([t0].[FirstName]' 1' (@2 + @3))' (@2 + 1)) - 1) END AS [value] FROM [CookTable] AS [t0]"'            new CommandParameter ("@1"' 't')'            new CommandParameter ("@2"' 2)'            new CommandParameter ("@3"' 5)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,Insert,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.FirstName.Insert (3' "Test")'            "SELECT CASE WHEN ((LEN(([t0].[FirstName] + '#')) - 1) = (@1 + 1)) "            + "THEN ([t0].[FirstName] + @2) "            + "ELSE STUFF([t0].[FirstName]' (@1 + 1)' 0' @2) END AS [value] FROM [CookTable] AS [t0]"'            new CommandParameter("@1"' 3)'            new CommandParameter ("@2"' "Test"));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.MethodCalls,StringMethodCallExpressionSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\MethodCalls\StringMethodCallExpressionSqlBackendIntegrationTest.cs,Insert,The following statement contains a magic number: CheckQuery (            from c in Cooks select c.FirstName.Insert (3' "Test")'            "SELECT CASE WHEN ((LEN(([t0].[FirstName] + '#')) - 1) = (@1 + 1)) "            + "THEN ([t0].[FirstName] + @2) "            + "ELSE STUFF([t0].[FirstName]' (@1 + 1)' 0' @2) END AS [value] FROM [CookTable] AS [t0]"'            new CommandParameter("@1"' 3)'            new CommandParameter ("@2"' "Test"));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SetResultOperatorsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SetResultOperatorsSqlBackendIntegrationTest.cs,Union_OnTopLevel,The following statement contains a magic number: CheckQuery (            () => Cooks.Where (c => c.FirstName == "Hugo").Select (c => c.ID)                .Union (Cooks.Where (c => c.Name == "Boss").Select (c => c.ID))                .Union (Cooks.Where (c => c.ID == 100).Select (c => c.ID))'            "SELECT [t0].[ID] AS [value] FROM [CookTable] AS [t0] WHERE ([t0].[FirstName] = @1) "            + "UNION (SELECT [t1].[ID] AS [value] FROM [CookTable] AS [t1] WHERE ([t1].[Name] = @2)) "            + "UNION (SELECT [t2].[ID] AS [value] FROM [CookTable] AS [t2] WHERE ([t2].[ID] = @3))"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' "Hugo")'            new CommandParameter ("@2"' "Boss")'            new CommandParameter ("@3"' 100));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SetResultOperatorsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SetResultOperatorsSqlBackendIntegrationTest.cs,Union_OnTopLevel,The following statement contains a magic number: CheckQuery (            () => Cooks.Where (c => c.FirstName == "Hugo").Select (c => c.ID)                .Union (Cooks.Where (c => c.Name == "Boss").Select (c => c.ID))                .Union (Cooks.Where (c => c.ID == 100).Select (c => c.ID))'            "SELECT [t0].[ID] AS [value] FROM [CookTable] AS [t0] WHERE ([t0].[FirstName] = @1) "            + "UNION (SELECT [t1].[ID] AS [value] FROM [CookTable] AS [t1] WHERE ([t1].[Name] = @2)) "            + "UNION (SELECT [t2].[ID] AS [value] FROM [CookTable] AS [t2] WHERE ([t2].[ID] = @3))"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' "Hugo")'            new CommandParameter ("@2"' "Boss")'            new CommandParameter ("@3"' 100));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SetResultOperatorsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SetResultOperatorsSqlBackendIntegrationTest.cs,Union_OnTopLevel,The following statement contains a magic number: CheckQuery (            () => Cooks.Where (c => c.FirstName == "Hugo").Select (c => c.ID)                .Union (                    Cooks.Where (c => c.Name == "Boss").Select (c => c.ID)                        .Union (Cooks.Where (c => c.ID == 100).Select (c => c.ID)))'            // The difference is in the parentheses.            "SELECT [t0].[ID] AS [value] FROM [CookTable] AS [t0] WHERE ([t0].[FirstName] = @1) "            + "UNION (SELECT [t1].[ID] AS [value] FROM [CookTable] AS [t1] WHERE ([t1].[Name] = @2) "            + "UNION (SELECT [t2].[ID] AS [value] FROM [CookTable] AS [t2] WHERE ([t2].[ID] = @3)))"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' "Hugo")'            new CommandParameter ("@2"' "Boss")'            new CommandParameter ("@3"' 100));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SetResultOperatorsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SetResultOperatorsSqlBackendIntegrationTest.cs,Union_OnTopLevel,The following statement contains a magic number: CheckQuery (            () => Cooks.Where (c => c.FirstName == "Hugo").Select (c => c.ID)                .Union (                    Cooks.Where (c => c.Name == "Boss").Select (c => c.ID)                        .Union (Cooks.Where (c => c.ID == 100).Select (c => c.ID)))'            // The difference is in the parentheses.            "SELECT [t0].[ID] AS [value] FROM [CookTable] AS [t0] WHERE ([t0].[FirstName] = @1) "            + "UNION (SELECT [t1].[ID] AS [value] FROM [CookTable] AS [t1] WHERE ([t1].[Name] = @2) "            + "UNION (SELECT [t2].[ID] AS [value] FROM [CookTable] AS [t2] WHERE ([t2].[ID] = @3)))"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' "Hugo")'            new CommandParameter ("@2"' "Boss")'            new CommandParameter ("@3"' 100));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SetResultOperatorsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SetResultOperatorsSqlBackendIntegrationTest.cs,Concat_OnTopLevel,The following statement contains a magic number: CheckQuery (            () => Cooks.Where (c => c.FirstName == "Hugo").Select (c => c.ID)                .Concat (Cooks.Where (c => c.Name == "Boss").Select (c => c.ID))                .Concat (Cooks.Where (c => c.ID == 100).Select (c => c.ID))'            "SELECT [t0].[ID] AS [value] FROM [CookTable] AS [t0] WHERE ([t0].[FirstName] = @1) "            + "UNION ALL (SELECT [t1].[ID] AS [value] FROM [CookTable] AS [t1] WHERE ([t1].[Name] = @2)) "            + "UNION ALL (SELECT [t2].[ID] AS [value] FROM [CookTable] AS [t2] WHERE ([t2].[ID] = @3))"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' "Hugo")'            new CommandParameter ("@2"' "Boss")'            new CommandParameter ("@3"' 100));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SetResultOperatorsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SetResultOperatorsSqlBackendIntegrationTest.cs,Concat_OnTopLevel,The following statement contains a magic number: CheckQuery (            () => Cooks.Where (c => c.FirstName == "Hugo").Select (c => c.ID)                .Concat (Cooks.Where (c => c.Name == "Boss").Select (c => c.ID))                .Concat (Cooks.Where (c => c.ID == 100).Select (c => c.ID))'            "SELECT [t0].[ID] AS [value] FROM [CookTable] AS [t0] WHERE ([t0].[FirstName] = @1) "            + "UNION ALL (SELECT [t1].[ID] AS [value] FROM [CookTable] AS [t1] WHERE ([t1].[Name] = @2)) "            + "UNION ALL (SELECT [t2].[ID] AS [value] FROM [CookTable] AS [t2] WHERE ([t2].[ID] = @3))"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' "Hugo")'            new CommandParameter ("@2"' "Boss")'            new CommandParameter ("@3"' 100));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SetResultOperatorsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SetResultOperatorsSqlBackendIntegrationTest.cs,Concat_OnTopLevel,The following statement contains a magic number: CheckQuery (            () => Cooks.Where (c => c.FirstName == "Hugo").Select (c => c.ID)                .Concat (                    Cooks.Where (c => c.Name == "Boss").Select (c => c.ID)                        .Concat (Cooks.Where (c => c.ID == 100).Select (c => c.ID)))'            // The difference is in the parentheses.            "SELECT [t0].[ID] AS [value] FROM [CookTable] AS [t0] WHERE ([t0].[FirstName] = @1) "            + "UNION ALL (SELECT [t1].[ID] AS [value] FROM [CookTable] AS [t1] WHERE ([t1].[Name] = @2) "            + "UNION ALL (SELECT [t2].[ID] AS [value] FROM [CookTable] AS [t2] WHERE ([t2].[ID] = @3)))"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' "Hugo")'            new CommandParameter ("@2"' "Boss")'            new CommandParameter ("@3"' 100));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SetResultOperatorsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SetResultOperatorsSqlBackendIntegrationTest.cs,Concat_OnTopLevel,The following statement contains a magic number: CheckQuery (            () => Cooks.Where (c => c.FirstName == "Hugo").Select (c => c.ID)                .Concat (                    Cooks.Where (c => c.Name == "Boss").Select (c => c.ID)                        .Concat (Cooks.Where (c => c.ID == 100).Select (c => c.ID)))'            // The difference is in the parentheses.            "SELECT [t0].[ID] AS [value] FROM [CookTable] AS [t0] WHERE ([t0].[FirstName] = @1) "            + "UNION ALL (SELECT [t1].[ID] AS [value] FROM [CookTable] AS [t1] WHERE ([t1].[Name] = @2) "            + "UNION ALL (SELECT [t2].[ID] AS [value] FROM [CookTable] AS [t2] WHERE ([t2].[ID] = @3)))"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' "Hugo")'            new CommandParameter ("@2"' "Boss")'            new CommandParameter ("@3"' 100));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SetResultOperatorsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SetResultOperatorsSqlBackendIntegrationTest.cs,SetOperation_CausesOrderByWithTakeToWork,The following statement contains a magic number: CheckQuery (            () => Cooks.Where (c => c.FirstName == "Hugo").OrderBy (c => c.ID).Select (c => c.ID).Take(3)                .Union (Cooks.Where (c => c.Name == "Boss").OrderBy (c => c.ID).Select (c => c.ID).Take(2))'            "SELECT [q0].[value] AS [value] "            + "FROM ("            + "SELECT TOP (3) [t1].[ID] AS [value] FROM [CookTable] AS [t1] WHERE ([t1].[FirstName] = @1) ORDER BY [t1].[ID] ASC "            + "UNION (SELECT TOP (2) [t2].[ID] AS [value] FROM [CookTable] AS [t2] WHERE ([t2].[Name] = @2) ORDER BY [t2].[ID] ASC)"            + ") AS [q0]"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' "Hugo")'            new CommandParameter ("@2"' "Boss"));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SetResultOperatorsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SetResultOperatorsSqlBackendIntegrationTest.cs,SetOperation_CausesOrderByWithTakeToWork,The following statement contains a magic number: CheckQuery (            () => Cooks.Where (c => c.FirstName == "Hugo").OrderBy (c => c.ID).Select (c => c.ID).Take(3)                .Union (Cooks.Where (c => c.Name == "Boss").OrderBy (c => c.ID).Select (c => c.ID).Take(2))'            "SELECT [q0].[value] AS [value] "            + "FROM ("            + "SELECT TOP (3) [t1].[ID] AS [value] FROM [CookTable] AS [t1] WHERE ([t1].[FirstName] = @1) ORDER BY [t1].[ID] ASC "            + "UNION (SELECT TOP (2) [t2].[ID] AS [value] FROM [CookTable] AS [t2] WHERE ([t2].[Name] = @2) ORDER BY [t2].[ID] ASC)"            + ") AS [q0]"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' "Hugo")'            new CommandParameter ("@2"' "Boss"));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SetResultOperatorsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SetResultOperatorsSqlBackendIntegrationTest.cs,SetOperation_WithInMemoryProjectionWithConstantValue,The following statement contains a magic number: CheckQuery (            () => Cooks.Select(c => new { X = 1' Y = c.ID }).Union (Kitchens.Select (k => new { X = 2' Y = k.ID }))'            "SELECT @1 AS [X]'[t0].[ID] AS [Y] FROM [CookTable] AS [t0] "            + "UNION (SELECT @2 AS [X]'[t1].[ID] AS [Y] FROM [KitchenTable] AS [t1])"'            new CommandParameter("@1"' 1)'            new CommandParameter("@2"' 2));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SetResultOperatorsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SetResultOperatorsSqlBackendIntegrationTest.cs,SetOperation_WithInMemoryProjectionWithConstantValue,The following statement contains a magic number: CheckQuery (            () => Cooks.Select(c => new { X = 1' Y = c.ID }).Union (Kitchens.Select (k => new { X = 2' Y = k.ID }))'            "SELECT @1 AS [X]'[t0].[ID] AS [Y] FROM [CookTable] AS [t0] "            + "UNION (SELECT @2 AS [X]'[t1].[ID] AS [Y] FROM [KitchenTable] AS [t1])"'            new CommandParameter("@1"' 1)'            new CommandParameter("@2"' 2));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SetResultOperatorsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SetResultOperatorsSqlBackendIntegrationTest.cs,SetOperation_WithCollection,The following statement contains a magic number: CheckQuery (            () => Cooks.Select(c => c.ID).Union (new[] { 1' 2' 3})'            "not supported");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SetResultOperatorsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SetResultOperatorsSqlBackendIntegrationTest.cs,SetOperation_WithCollection,The following statement contains a magic number: CheckQuery (            () => Cooks.Select(c => c.ID).Union (new[] { 1' 2' 3})'            "not supported");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ContainsResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ContainsResultOperatorSqlBackendIntegrationTest.cs,Contains_WithConstant,The following statement contains a magic number: var cook = new Cook { ID = 23' FirstName = "Hugo"' Name = "Heinrich" };
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ContainsResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ContainsResultOperatorSqlBackendIntegrationTest.cs,Contains_WithConstant,The following statement contains a magic number: CheckQuery (            from s in Cooks where (from s2 in Cooks select s2).Contains (cook) select s.ID'            "SELECT [t0].[ID] AS [value] "            + "FROM [CookTable] AS [t0] WHERE @1 IN (SELECT [t1].[ID] FROM [CookTable] AS [t1])"'            new CommandParameter("@1"' 23));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ContainsResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ContainsResultOperatorSqlBackendIntegrationTest.cs,Contains_WithDerivedType,The following statement contains a magic number: var chef = new Chef { ID = 23' FirstName = "Hugo"' Name = "Heinrich" };
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ContainsResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ContainsResultOperatorSqlBackendIntegrationTest.cs,Contains_WithDerivedType,The following statement contains a magic number: CheckQuery (            from s in Cooks where s.Assistants.Contains (chef) select s.ID'            "SELECT [t0].[ID] AS [value] "            + "FROM [CookTable] AS [t0] WHERE @1 IN (SELECT [t1].[ID] FROM [CookTable] AS [t1] WHERE ([t0].[ID] = [t1].[AssistedID]))"'            new CommandParameter ("@1"' 23));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ContainsResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ContainsResultOperatorSqlBackendIntegrationTest.cs,Contains_WithConstantAndDependentQuery,The following statement contains a magic number: var cook = new Cook { ID = 23' FirstName = "Hugo"' Name = "Heinrich" };
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ContainsResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ContainsResultOperatorSqlBackendIntegrationTest.cs,Contains_WithConstantAndDependentQuery,The following statement contains a magic number: CheckQuery (            from s in Cooks where s.Assistants.Contains (cook) select s.ID'            "SELECT [t0].[ID] AS [value] "            +"FROM [CookTable] AS [t0] WHERE @1 IN (SELECT [t1].[ID] FROM [CookTable] AS [t1] WHERE ([t0].[ID] = [t1].[AssistedID]))"'            new CommandParameter("@1"' 23));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ContainsResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ContainsResultOperatorSqlBackendIntegrationTest.cs,Contains_OnTopLevel,The following statement contains a magic number: var cook = new Cook { ID = 23' FirstName = "Hugo"' Name = "Heinrich" };
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ContainsResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ContainsResultOperatorSqlBackendIntegrationTest.cs,Contains_OnTopLevel,The following statement contains a magic number: CheckQuery (            ( () => (from s in Cooks select s).Contains(cook))'            "SELECT CONVERT(BIT' CASE WHEN @1 IN (SELECT [t0].[ID] FROM [CookTable] AS [t0]) THEN 1 ELSE 0 END) AS [value]"'            row => (object) row.GetValue<bool> (new ColumnID ("value"' 0))'            new CommandParameter("@1"' 23) );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,CastResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\CastResultOperatorSqlBackendIntegrationTest.cs,Cast_TopLevel_OnEntity,The following statement contains a magic number: CheckQuery (            (from s in Cooks select s).Cast<Chef> ()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'"            + "[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating] "            + "FROM [CookTable] AS [t0]"'             row => (object) (Chef) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,CastResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\CastResultOperatorSqlBackendIntegrationTest.cs,Cast_TopLevel_OnEntity,The following statement contains a magic number: CheckQuery (            (from s in Cooks select s).Cast<Chef> ()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'"            + "[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating] "            + "FROM [CookTable] AS [t0]"'             row => (object) (Chef) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,CastResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\CastResultOperatorSqlBackendIntegrationTest.cs,Cast_TopLevel_OnEntity,The following statement contains a magic number: CheckQuery (            (from s in Cooks select s).Cast<Chef> ()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'"            + "[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating] "            + "FROM [CookTable] AS [t0]"'             row => (object) (Chef) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,CastResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\CastResultOperatorSqlBackendIntegrationTest.cs,Cast_TopLevel_OnEntity,The following statement contains a magic number: CheckQuery (            (from s in Cooks select s).Cast<Chef> ()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'"            + "[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating] "            + "FROM [CookTable] AS [t0]"'             row => (object) (Chef) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,CastResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\CastResultOperatorSqlBackendIntegrationTest.cs,Cast_TopLevel_OnEntity,The following statement contains a magic number: CheckQuery (            (from s in Cooks select s).Cast<Chef> ()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'"            + "[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating] "            + "FROM [CookTable] AS [t0]"'             row => (object) (Chef) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,CastResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\CastResultOperatorSqlBackendIntegrationTest.cs,Cast_TopLevel_OnEntity,The following statement contains a magic number: CheckQuery (            (from s in Cooks select s).Cast<Chef> ()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'"            + "[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating] "            + "FROM [CookTable] AS [t0]"'             row => (object) (Chef) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,CastResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\CastResultOperatorSqlBackendIntegrationTest.cs,Cast_TopLevel_OnEntity,The following statement contains a magic number: CheckQuery (            (from s in Cooks select s).Cast<Chef> ()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'"            + "[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating] "            + "FROM [CookTable] AS [t0]"'             row => (object) (Chef) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,CastResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\CastResultOperatorSqlBackendIntegrationTest.cs,Cast_TopLevel_OnEntity,The following statement contains a magic number: CheckQuery (            (from s in Cooks select s).Cast<Chef> ()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'"            + "[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating] "            + "FROM [CookTable] AS [t0]"'             row => (object) (Chef) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SkipResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SkipResultOperatorSqlBackendIntegrationTest.cs,Skip_WithEntity,The following statement contains a magic number: CheckQuery (            () => (from r in Restaurants orderby r.ID select r).Skip (5)'            "SELECT [q0].[Key_ID] AS [ID]'[q0].[Key_CompanyID] AS [CompanyID] "+            "FROM (SELECT [t1].[ID] AS [Key_ID]'[t1].[CompanyID] AS [Key_CompanyID]'"+            "ROW_NUMBER() OVER (ORDER BY [t1].[ID] ASC) AS [Value] FROM [RestaurantTable] AS [t1]) AS [q0] "+            "WHERE ([q0].[Value] > @1) ORDER BY [q0].[Value] ASC"'             row => (object) row.GetEntity<Restaurant> (                new ColumnID ("ID"' 0)'                new ColumnID ("CompanyID"' 1))'            new CommandParameter ("@1"' 5));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SkipResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SkipResultOperatorSqlBackendIntegrationTest.cs,Skip_WithEntity,The following statement contains a magic number: CheckQuery (            () => (from r in Restaurants orderby r.ID select r).Skip (5)'            "SELECT [q0].[Key_ID] AS [ID]'[q0].[Key_CompanyID] AS [CompanyID] "+            "FROM (SELECT [t1].[ID] AS [Key_ID]'[t1].[CompanyID] AS [Key_CompanyID]'"+            "ROW_NUMBER() OVER (ORDER BY [t1].[ID] ASC) AS [Value] FROM [RestaurantTable] AS [t1]) AS [q0] "+            "WHERE ([q0].[Value] > @1) ORDER BY [q0].[Value] ASC"'             row => (object) row.GetEntity<Restaurant> (                new ColumnID ("ID"' 0)'                new ColumnID ("CompanyID"' 1))'            new CommandParameter ("@1"' 5));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SkipResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SkipResultOperatorSqlBackendIntegrationTest.cs,Skip_WithEntity_WithoutExplicitOrdering,The following statement contains a magic number: CheckQuery (            () => (from r in Restaurants select r).Skip (5)'            "SELECT [q0].[Key_ID] AS [ID]'[q0].[Key_CompanyID] AS [CompanyID] "+            "FROM (SELECT [t1].[ID] AS [Key_ID]'[t1].[CompanyID] AS [Key_CompanyID]'"+            "ROW_NUMBER() OVER (ORDER BY (SELECT @1) ASC) AS [Value] FROM [RestaurantTable] AS [t1]) AS [q0] "+            "WHERE ([q0].[Value] > @2) ORDER BY [q0].[Value] ASC"'            new CommandParameter("@1"' 1)'            new CommandParameter("@2"' 5));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SkipResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SkipResultOperatorSqlBackendIntegrationTest.cs,Skip_WithEntity_WithoutExplicitOrdering,The following statement contains a magic number: CheckQuery (            () => (from r in Restaurants select r).Skip (5)'            "SELECT [q0].[Key_ID] AS [ID]'[q0].[Key_CompanyID] AS [CompanyID] "+            "FROM (SELECT [t1].[ID] AS [Key_ID]'[t1].[CompanyID] AS [Key_CompanyID]'"+            "ROW_NUMBER() OVER (ORDER BY (SELECT @1) ASC) AS [Value] FROM [RestaurantTable] AS [t1]) AS [q0] "+            "WHERE ([q0].[Value] > @2) ORDER BY [q0].[Value] ASC"'            new CommandParameter("@1"' 1)'            new CommandParameter("@2"' 5));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SkipResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SkipResultOperatorSqlBackendIntegrationTest.cs,Skip_WithColumn,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks orderby c.Name select c.FirstName).Skip (100)'            "SELECT [q0].[Key] AS [value] FROM (SELECT [t1].[FirstName] AS [Key]'ROW_NUMBER() OVER (ORDER BY [t1].[Name] ASC) AS [Value] " +            "FROM [CookTable] AS [t1]) AS [q0] WHERE ([q0].[Value] > @1) ORDER BY [q0].[Value] ASC"'            row => (object) row.GetValue<string> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 100));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SkipResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SkipResultOperatorSqlBackendIntegrationTest.cs,Skip_WithColumn,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks orderby c.Name select c.FirstName).Skip (100)'            "SELECT [q0].[Key] AS [value] FROM (SELECT [t1].[FirstName] AS [Key]'ROW_NUMBER() OVER (ORDER BY [t1].[Name] ASC) AS [Value] " +            "FROM [CookTable] AS [t1]) AS [q0] WHERE ([q0].[Value] > @1) ORDER BY [q0].[Value] ASC"'            row => (object) row.GetValue<string> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 100));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SkipResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SkipResultOperatorSqlBackendIntegrationTest.cs,Skip_WithColumn_WithoutExplicitOrdering,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks select c.FirstName).Skip (100)'            "SELECT [q0].[Key] AS [value] FROM (SELECT [t1].[FirstName] AS [Key]'ROW_NUMBER() OVER (ORDER BY (SELECT @1) ASC) AS [Value] " +            "FROM [CookTable] AS [t1]) AS [q0] WHERE ([q0].[Value] > @2) ORDER BY [q0].[Value] ASC"'            new CommandParameter ("@1"' 1)'            new CommandParameter("@2"' 100));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SkipResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SkipResultOperatorSqlBackendIntegrationTest.cs,Skip_WithColumn_WithoutExplicitOrdering,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks select c.FirstName).Skip (100)'            "SELECT [q0].[Key] AS [value] FROM (SELECT [t1].[FirstName] AS [Key]'ROW_NUMBER() OVER (ORDER BY (SELECT @1) ASC) AS [Value] " +            "FROM [CookTable] AS [t1]) AS [q0] WHERE ([q0].[Value] > @2) ORDER BY [q0].[Value] ASC"'            new CommandParameter ("@1"' 1)'            new CommandParameter("@2"' 100));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SkipResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SkipResultOperatorSqlBackendIntegrationTest.cs,Skip_WithConstant,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks orderby 20 select 10).Skip (100)'            "SELECT [q0].[Key] AS [value] FROM (SELECT @1 AS [Key]'ROW_NUMBER() OVER (ORDER BY (SELECT @2) ASC) AS [Value] " +            "FROM [CookTable] AS [t1]) AS [q0] WHERE ([q0].[Value] > @3) ORDER BY [q0].[Value] ASC"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)'            new CommandParameter ("@2"' 20)'            new CommandParameter ("@3"' 100));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SkipResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SkipResultOperatorSqlBackendIntegrationTest.cs,Skip_WithConstant,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks orderby 20 select 10).Skip (100)'            "SELECT [q0].[Key] AS [value] FROM (SELECT @1 AS [Key]'ROW_NUMBER() OVER (ORDER BY (SELECT @2) ASC) AS [Value] " +            "FROM [CookTable] AS [t1]) AS [q0] WHERE ([q0].[Value] > @3) ORDER BY [q0].[Value] ASC"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)'            new CommandParameter ("@2"' 20)'            new CommandParameter ("@3"' 100));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SkipResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SkipResultOperatorSqlBackendIntegrationTest.cs,Skip_WithConstant,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks orderby 20 select 10).Skip (100)'            "SELECT [q0].[Key] AS [value] FROM (SELECT @1 AS [Key]'ROW_NUMBER() OVER (ORDER BY (SELECT @2) ASC) AS [Value] " +            "FROM [CookTable] AS [t1]) AS [q0] WHERE ([q0].[Value] > @3) ORDER BY [q0].[Value] ASC"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)'            new CommandParameter ("@2"' 20)'            new CommandParameter ("@3"' 100));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SkipResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SkipResultOperatorSqlBackendIntegrationTest.cs,Skip_WithConstant,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks orderby 20 select 10).Skip (100)'            "SELECT [q0].[Key] AS [value] FROM (SELECT @1 AS [Key]'ROW_NUMBER() OVER (ORDER BY (SELECT @2) ASC) AS [Value] " +            "FROM [CookTable] AS [t1]) AS [q0] WHERE ([q0].[Value] > @3) ORDER BY [q0].[Value] ASC"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)'            new CommandParameter ("@2"' 20)'            new CommandParameter ("@3"' 100));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SkipResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SkipResultOperatorSqlBackendIntegrationTest.cs,Skip_WithConstant,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks orderby 20 select 10).Skip (100)'            "SELECT [q0].[Key] AS [value] FROM (SELECT @1 AS [Key]'ROW_NUMBER() OVER (ORDER BY (SELECT @2) ASC) AS [Value] " +            "FROM [CookTable] AS [t1]) AS [q0] WHERE ([q0].[Value] > @3) ORDER BY [q0].[Value] ASC"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)'            new CommandParameter ("@2"' 20)'            new CommandParameter ("@3"' 100));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SkipResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SkipResultOperatorSqlBackendIntegrationTest.cs,Skip_WithConstant,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks orderby 20 select 10).Skip (100)'            "SELECT [q0].[Key] AS [value] FROM (SELECT @1 AS [Key]'ROW_NUMBER() OVER (ORDER BY (SELECT @2) ASC) AS [Value] " +            "FROM [CookTable] AS [t1]) AS [q0] WHERE ([q0].[Value] > @3) ORDER BY [q0].[Value] ASC"'            row => (object) row.GetValue<int> (new ColumnID ("value"' 0))'            new CommandParameter ("@1"' 10)'            new CommandParameter ("@2"' 20)'            new CommandParameter ("@3"' 100));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,AverageResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\AverageResultOperatorSqlBackendIntegrationTest.cs,Average_InSubquery,The following statement contains a magic number: CheckQuery (             from s in Cooks where (from s2 in Cooks select s2).Average (c => c.Weight) > 5 select s.Name'            "SELECT [t0].[Name] AS [value] FROM [CookTable] AS [t0] WHERE ((SELECT AVG([t1].[Weight]) AS [value] FROM [CookTable] AS [t1]) > @1)"'            new CommandParameter("@1"' 5.0));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,AverageResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\AverageResultOperatorSqlBackendIntegrationTest.cs,Average_InSubquery,The following statement contains a magic number: CheckQuery (             from s in Cooks where (from s2 in Cooks select s2).Average (c => c.Weight) > 5 select s.Name'            "SELECT [t0].[Name] AS [value] FROM [CookTable] AS [t0] WHERE ((SELECT AVG([t1].[Weight]) AS [value] FROM [CookTable] AS [t1]) > @1)"'            new CommandParameter("@1"' 5.0));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SumResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SumResultOperatorSqlBackendIntegrationTest.cs,Sum_WithOrderings2,The following statement contains a magic number: CheckQuery (            () => Kitchens.OrderBy (k => k.Name).Take (5).Sum (k => k.RoomNumber)'            "SELECT SUM([q0].[Key_RoomNumber]) AS [value] FROM (SELECT TOP (5) [t1].[ID] AS [Key_ID]'"             + "[t1].[Name] AS [Key_Name]'[t1].[RestaurantID] AS [Key_RestaurantID]'"            + "[t1].[LastCleaningDay] AS [Key_LastCleaningDay]'[t1].[PassedLastInspection] AS [Key_PassedLastInspection]'"            + "[t1].[LastInspectionScore] AS [Key_LastInspectionScore]'[t1].[Name] AS [Value] "            + "FROM [KitchenTable] AS [t1] ORDER BY [t1].[Name] ASC) AS [q0]");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SumResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SumResultOperatorSqlBackendIntegrationTest.cs,Sum_InSubquery,The following statement contains a magic number: CheckQuery (             from s in Cooks where (from s2 in Cooks select s2).Sum (c => c.ID) > 5 select s.Name'            "SELECT [t0].[Name] AS [value] FROM [CookTable] AS [t0] WHERE ((SELECT SUM([t1].[ID]) AS [value] FROM [CookTable] AS [t1]) > @1)"'            new CommandParameter ("@1"' 5));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,SumResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\SumResultOperatorSqlBackendIntegrationTest.cs,Sum_InSubquery,The following statement contains a magic number: CheckQuery (             from s in Cooks where (from s2 in Cooks select s2).Sum (c => c.ID) > 5 select s.Name'            "SELECT [t0].[Name] AS [value] FROM [CookTable] AS [t0] WHERE ((SELECT SUM([t1].[ID]) AS [value] FROM [CookTable] AS [t1]) > @1)"'            new CommandParameter ("@1"' 5));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,MinResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\MinResultOperatorSqlBackendIntegrationTest.cs,Min_InSubquery,The following statement contains a magic number: CheckQuery (             from s in Cooks where (from s2 in Cooks select s2.ID).Min () > 5 select s.Name'            "SELECT [t0].[Name] AS [value] FROM [CookTable] AS [t0] WHERE ((SELECT MIN([t1].[ID]) AS [value] FROM [CookTable] AS [t1]) > @1)"'            new CommandParameter ("@1"' 5));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,MinResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\MinResultOperatorSqlBackendIntegrationTest.cs,Min_InSubquery,The following statement contains a magic number: CheckQuery (             from s in Cooks where (from s2 in Cooks select s2.ID).Min () > 5 select s.Name'            "SELECT [t0].[Name] AS [value] FROM [CookTable] AS [t0] WHERE ((SELECT MIN([t1].[ID]) AS [value] FROM [CookTable] AS [t1]) > @1)"'            new CommandParameter ("@1"' 5));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,MaxResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\MaxResultOperatorSqlBackendIntegrationTest.cs,Max_InSubquery,The following statement contains a magic number: CheckQuery (             from s in Cooks where (from s2 in Cooks select s2.ID).Max() > 5 select s.Name'            "SELECT [t0].[Name] AS [value] FROM [CookTable] AS [t0] WHERE ((SELECT MAX([t1].[ID]) AS [value] FROM [CookTable] AS [t1]) > @1)"'            new CommandParameter("@1"' 5));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,MaxResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\MaxResultOperatorSqlBackendIntegrationTest.cs,Max_InSubquery,The following statement contains a magic number: CheckQuery (             from s in Cooks where (from s2 in Cooks select s2.ID).Max() > 5 select s.Name'            "SELECT [t0].[Name] AS [value] FROM [CookTable] AS [t0] WHERE ((SELECT MAX([t1].[ID]) AS [value] FROM [CookTable] AS [t1]) > @1)"'            new CommandParameter("@1"' 5));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,OfTypeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\OfTypeResultOperatorSqlBackendIntegrationTest.cs,OfType,The following statement contains a magic number: CheckQuery (            Cooks.OfType<Chef> ()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'"            + "[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating] "             + "FROM [CookTable] AS [t0] WHERE ([t0].[IsStarredCook] = 1)"'             row => (object) (Chef) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9))            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,OfTypeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\OfTypeResultOperatorSqlBackendIntegrationTest.cs,OfType,The following statement contains a magic number: CheckQuery (            Cooks.OfType<Chef> ()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'"            + "[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating] "             + "FROM [CookTable] AS [t0] WHERE ([t0].[IsStarredCook] = 1)"'             row => (object) (Chef) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9))            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,OfTypeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\OfTypeResultOperatorSqlBackendIntegrationTest.cs,OfType,The following statement contains a magic number: CheckQuery (            Cooks.OfType<Chef> ()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'"            + "[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating] "             + "FROM [CookTable] AS [t0] WHERE ([t0].[IsStarredCook] = 1)"'             row => (object) (Chef) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9))            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,OfTypeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\OfTypeResultOperatorSqlBackendIntegrationTest.cs,OfType,The following statement contains a magic number: CheckQuery (            Cooks.OfType<Chef> ()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'"            + "[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating] "             + "FROM [CookTable] AS [t0] WHERE ([t0].[IsStarredCook] = 1)"'             row => (object) (Chef) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9))            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,OfTypeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\OfTypeResultOperatorSqlBackendIntegrationTest.cs,OfType,The following statement contains a magic number: CheckQuery (            Cooks.OfType<Chef> ()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'"            + "[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating] "             + "FROM [CookTable] AS [t0] WHERE ([t0].[IsStarredCook] = 1)"'             row => (object) (Chef) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9))            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,OfTypeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\OfTypeResultOperatorSqlBackendIntegrationTest.cs,OfType,The following statement contains a magic number: CheckQuery (            Cooks.OfType<Chef> ()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'"            + "[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating] "             + "FROM [CookTable] AS [t0] WHERE ([t0].[IsStarredCook] = 1)"'             row => (object) (Chef) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9))            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,OfTypeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\OfTypeResultOperatorSqlBackendIntegrationTest.cs,OfType,The following statement contains a magic number: CheckQuery (            Cooks.OfType<Chef> ()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'"            + "[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating] "             + "FROM [CookTable] AS [t0] WHERE ([t0].[IsStarredCook] = 1)"'             row => (object) (Chef) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9))            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,OfTypeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\OfTypeResultOperatorSqlBackendIntegrationTest.cs,OfType,The following statement contains a magic number: CheckQuery (            Cooks.OfType<Chef> ()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'[t0].[KitchenID]'"            + "[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating] "             + "FROM [CookTable] AS [t0] WHERE ([t0].[IsStarredCook] = 1)"'             row => (object) (Chef) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9))            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,OfTypeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\OfTypeResultOperatorSqlBackendIntegrationTest.cs,OfType,The following statement contains a magic number: CheckQuery (            Chefs.OfType<Chef>()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'"+            "[t0].[KitchenID]'[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating]'[t0].[LetterOfRecommendation] FROM [dbo].[ChefTable] AS [t0] WHERE (@1 = 1)"'  // ReSharper disable RedundantCast             row => (object) (Chef) row.GetEntity<Chef> (  // ReSharper restore RedundantCast                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)'                new ColumnID ("LetterOfRecommendation"' 10))'            new CommandParameter("@1"' 1));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,OfTypeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\OfTypeResultOperatorSqlBackendIntegrationTest.cs,OfType,The following statement contains a magic number: CheckQuery (            Chefs.OfType<Chef>()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'"+            "[t0].[KitchenID]'[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating]'[t0].[LetterOfRecommendation] FROM [dbo].[ChefTable] AS [t0] WHERE (@1 = 1)"'  // ReSharper disable RedundantCast             row => (object) (Chef) row.GetEntity<Chef> (  // ReSharper restore RedundantCast                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)'                new ColumnID ("LetterOfRecommendation"' 10))'            new CommandParameter("@1"' 1));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,OfTypeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\OfTypeResultOperatorSqlBackendIntegrationTest.cs,OfType,The following statement contains a magic number: CheckQuery (            Chefs.OfType<Chef>()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'"+            "[t0].[KitchenID]'[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating]'[t0].[LetterOfRecommendation] FROM [dbo].[ChefTable] AS [t0] WHERE (@1 = 1)"'  // ReSharper disable RedundantCast             row => (object) (Chef) row.GetEntity<Chef> (  // ReSharper restore RedundantCast                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)'                new ColumnID ("LetterOfRecommendation"' 10))'            new CommandParameter("@1"' 1));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,OfTypeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\OfTypeResultOperatorSqlBackendIntegrationTest.cs,OfType,The following statement contains a magic number: CheckQuery (            Chefs.OfType<Chef>()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'"+            "[t0].[KitchenID]'[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating]'[t0].[LetterOfRecommendation] FROM [dbo].[ChefTable] AS [t0] WHERE (@1 = 1)"'  // ReSharper disable RedundantCast             row => (object) (Chef) row.GetEntity<Chef> (  // ReSharper restore RedundantCast                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)'                new ColumnID ("LetterOfRecommendation"' 10))'            new CommandParameter("@1"' 1));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,OfTypeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\OfTypeResultOperatorSqlBackendIntegrationTest.cs,OfType,The following statement contains a magic number: CheckQuery (            Chefs.OfType<Chef>()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'"+            "[t0].[KitchenID]'[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating]'[t0].[LetterOfRecommendation] FROM [dbo].[ChefTable] AS [t0] WHERE (@1 = 1)"'  // ReSharper disable RedundantCast             row => (object) (Chef) row.GetEntity<Chef> (  // ReSharper restore RedundantCast                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)'                new ColumnID ("LetterOfRecommendation"' 10))'            new CommandParameter("@1"' 1));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,OfTypeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\OfTypeResultOperatorSqlBackendIntegrationTest.cs,OfType,The following statement contains a magic number: CheckQuery (            Chefs.OfType<Chef>()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'"+            "[t0].[KitchenID]'[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating]'[t0].[LetterOfRecommendation] FROM [dbo].[ChefTable] AS [t0] WHERE (@1 = 1)"'  // ReSharper disable RedundantCast             row => (object) (Chef) row.GetEntity<Chef> (  // ReSharper restore RedundantCast                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)'                new ColumnID ("LetterOfRecommendation"' 10))'            new CommandParameter("@1"' 1));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,OfTypeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\OfTypeResultOperatorSqlBackendIntegrationTest.cs,OfType,The following statement contains a magic number: CheckQuery (            Chefs.OfType<Chef>()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'"+            "[t0].[KitchenID]'[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating]'[t0].[LetterOfRecommendation] FROM [dbo].[ChefTable] AS [t0] WHERE (@1 = 1)"'  // ReSharper disable RedundantCast             row => (object) (Chef) row.GetEntity<Chef> (  // ReSharper restore RedundantCast                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)'                new ColumnID ("LetterOfRecommendation"' 10))'            new CommandParameter("@1"' 1));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,OfTypeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\OfTypeResultOperatorSqlBackendIntegrationTest.cs,OfType,The following statement contains a magic number: CheckQuery (            Chefs.OfType<Chef>()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'"+            "[t0].[KitchenID]'[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating]'[t0].[LetterOfRecommendation] FROM [dbo].[ChefTable] AS [t0] WHERE (@1 = 1)"'  // ReSharper disable RedundantCast             row => (object) (Chef) row.GetEntity<Chef> (  // ReSharper restore RedundantCast                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)'                new ColumnID ("LetterOfRecommendation"' 10))'            new CommandParameter("@1"' 1));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,OfTypeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\OfTypeResultOperatorSqlBackendIntegrationTest.cs,OfType,The following statement contains a magic number: CheckQuery (            Chefs.OfType<Chef>()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'"+            "[t0].[KitchenID]'[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating]'[t0].[LetterOfRecommendation] FROM [dbo].[ChefTable] AS [t0] WHERE (@1 = 1)"'  // ReSharper disable RedundantCast             row => (object) (Chef) row.GetEntity<Chef> (  // ReSharper restore RedundantCast                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)'                new ColumnID ("LetterOfRecommendation"' 10))'            new CommandParameter("@1"' 1));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,OfTypeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\OfTypeResultOperatorSqlBackendIntegrationTest.cs,OfType,The following statement contains a magic number: CheckQuery (            Chefs.OfType<Cook> ()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'"+            "[t0].[KitchenID]'[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating]'[t0].[LetterOfRecommendation] FROM [dbo].[ChefTable] AS [t0] WHERE (@1 = 1)"'             row => (object) (Cook) row.GetEntity<Chef> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)'                new ColumnID ("LetterOfRecommendation"' 10))'            new CommandParameter("@1"' 1));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,OfTypeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\OfTypeResultOperatorSqlBackendIntegrationTest.cs,OfType,The following statement contains a magic number: CheckQuery (            Chefs.OfType<Cook> ()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'"+            "[t0].[KitchenID]'[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating]'[t0].[LetterOfRecommendation] FROM [dbo].[ChefTable] AS [t0] WHERE (@1 = 1)"'             row => (object) (Cook) row.GetEntity<Chef> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)'                new ColumnID ("LetterOfRecommendation"' 10))'            new CommandParameter("@1"' 1));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,OfTypeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\OfTypeResultOperatorSqlBackendIntegrationTest.cs,OfType,The following statement contains a magic number: CheckQuery (            Chefs.OfType<Cook> ()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'"+            "[t0].[KitchenID]'[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating]'[t0].[LetterOfRecommendation] FROM [dbo].[ChefTable] AS [t0] WHERE (@1 = 1)"'             row => (object) (Cook) row.GetEntity<Chef> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)'                new ColumnID ("LetterOfRecommendation"' 10))'            new CommandParameter("@1"' 1));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,OfTypeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\OfTypeResultOperatorSqlBackendIntegrationTest.cs,OfType,The following statement contains a magic number: CheckQuery (            Chefs.OfType<Cook> ()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'"+            "[t0].[KitchenID]'[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating]'[t0].[LetterOfRecommendation] FROM [dbo].[ChefTable] AS [t0] WHERE (@1 = 1)"'             row => (object) (Cook) row.GetEntity<Chef> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)'                new ColumnID ("LetterOfRecommendation"' 10))'            new CommandParameter("@1"' 1));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,OfTypeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\OfTypeResultOperatorSqlBackendIntegrationTest.cs,OfType,The following statement contains a magic number: CheckQuery (            Chefs.OfType<Cook> ()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'"+            "[t0].[KitchenID]'[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating]'[t0].[LetterOfRecommendation] FROM [dbo].[ChefTable] AS [t0] WHERE (@1 = 1)"'             row => (object) (Cook) row.GetEntity<Chef> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)'                new ColumnID ("LetterOfRecommendation"' 10))'            new CommandParameter("@1"' 1));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,OfTypeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\OfTypeResultOperatorSqlBackendIntegrationTest.cs,OfType,The following statement contains a magic number: CheckQuery (            Chefs.OfType<Cook> ()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'"+            "[t0].[KitchenID]'[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating]'[t0].[LetterOfRecommendation] FROM [dbo].[ChefTable] AS [t0] WHERE (@1 = 1)"'             row => (object) (Cook) row.GetEntity<Chef> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)'                new ColumnID ("LetterOfRecommendation"' 10))'            new CommandParameter("@1"' 1));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,OfTypeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\OfTypeResultOperatorSqlBackendIntegrationTest.cs,OfType,The following statement contains a magic number: CheckQuery (            Chefs.OfType<Cook> ()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'"+            "[t0].[KitchenID]'[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating]'[t0].[LetterOfRecommendation] FROM [dbo].[ChefTable] AS [t0] WHERE (@1 = 1)"'             row => (object) (Cook) row.GetEntity<Chef> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)'                new ColumnID ("LetterOfRecommendation"' 10))'            new CommandParameter("@1"' 1));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,OfTypeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\OfTypeResultOperatorSqlBackendIntegrationTest.cs,OfType,The following statement contains a magic number: CheckQuery (            Chefs.OfType<Cook> ()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'"+            "[t0].[KitchenID]'[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating]'[t0].[LetterOfRecommendation] FROM [dbo].[ChefTable] AS [t0] WHERE (@1 = 1)"'             row => (object) (Cook) row.GetEntity<Chef> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)'                new ColumnID ("LetterOfRecommendation"' 10))'            new CommandParameter("@1"' 1));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,OfTypeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\OfTypeResultOperatorSqlBackendIntegrationTest.cs,OfType,The following statement contains a magic number: CheckQuery (            Chefs.OfType<Cook> ()'            "SELECT [t0].[ID]'[t0].[FirstName]'[t0].[Name]'[t0].[IsStarredCook]'[t0].[IsFullTimeCook]'[t0].[SubstitutedID]'"+            "[t0].[KitchenID]'[t0].[KnifeID]'[t0].[KnifeClassID]'[t0].[CookRating]'[t0].[LetterOfRecommendation] FROM [dbo].[ChefTable] AS [t0] WHERE (@1 = 1)"'             row => (object) (Cook) row.GetEntity<Chef> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)'                new ColumnID ("LetterOfRecommendation"' 10))'            new CommandParameter("@1"' 1));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,TakeResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\TakeResultOperatorSqlBackendIntegrationTest.cs,SimpleTake,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks select c.FirstName).Take (5)'            "SELECT TOP (5) [t0].[FirstName] AS [value] FROM [CookTable] AS [t0]"'            row => (object) row.GetValue<string> (new ColumnID ("value"' 0)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_Min_WithNonTrivialElementExpression,The following statement contains a magic number: CheckQuery (            from c in Cooks group c.Weight by c.Name into cooksByName where cooksByName.Min () > 18 select cooksByName.Key'             "SELECT [q0].[key] AS [value] FROM (" +              "SELECT [t1].[Name] AS [key]' MIN([t1].[Weight]) AS [a0] FROM [CookTable] AS [t1] "+              "GROUP BY [t1].[Name]) AS [q0] "+              "WHERE ([q0].[a0] > @1)"'              new CommandParameter ("@1"' 18.0));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_Min_WithNonTrivialElementExpression,The following statement contains a magic number: CheckQuery (            from c in Cooks group c.Weight by c.Name into cooksByName where cooksByName.Min () > 18 select cooksByName.Key'             "SELECT [q0].[key] AS [value] FROM (" +              "SELECT [t1].[Name] AS [key]' MIN([t1].[Weight]) AS [a0] FROM [CookTable] AS [t1] "+              "GROUP BY [t1].[Name]) AS [q0] "+              "WHERE ([q0].[a0] > @1)"'              new CommandParameter ("@1"' 18.0));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_Min_WithProjection,The following statement contains a magic number: CheckQuery (            from c in Cooks group c by c.Name into cooksByName where cooksByName.Min (c => c.Weight) > 18 select cooksByName.Key'            "SELECT [q0].[key] AS [value] FROM (" +              "SELECT [t1].[Name] AS [key]' MIN([t1].[Weight]) AS [a0] FROM [CookTable] AS [t1] " +              "GROUP BY [t1].[Name]) AS [q0] " +              "WHERE ([q0].[a0] > @1)"'              new CommandParameter("@1"' 18.0));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_Min_WithProjection,The following statement contains a magic number: CheckQuery (            from c in Cooks group c by c.Name into cooksByName where cooksByName.Min (c => c.Weight) > 18 select cooksByName.Key'            "SELECT [q0].[key] AS [value] FROM (" +              "SELECT [t1].[Name] AS [key]' MIN([t1].[Weight]) AS [a0] FROM [CookTable] AS [t1] " +              "GROUP BY [t1].[Name]) AS [q0] " +              "WHERE ([q0].[a0] > @1)"'              new CommandParameter("@1"' 18.0));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_Min_WithProjection_AndNestedElements,The following statement contains a magic number: CheckQuery (            from c in Cooks group new { c.ID' c.FirstName } by c.Name into cooksByName             where cooksByName.Min (c => c.ID) > 18 select cooksByName.Key'            "SELECT [q0].[key] AS [value] FROM (" +              "SELECT [t1].[Name] AS [key]' MIN([t1].[ID]) AS [a0] FROM [CookTable] AS [t1] " +              "GROUP BY [t1].[Name]) AS [q0] " +              "WHERE ([q0].[a0] > @1)"'              new CommandParameter ("@1"' 18));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_Min_WithProjection_AndNestedElements,The following statement contains a magic number: CheckQuery (            from c in Cooks group new { c.ID' c.FirstName } by c.Name into cooksByName             where cooksByName.Min (c => c.ID) > 18 select cooksByName.Key'            "SELECT [q0].[key] AS [value] FROM (" +              "SELECT [t1].[Name] AS [key]' MIN([t1].[ID]) AS [a0] FROM [CookTable] AS [t1] " +              "GROUP BY [t1].[Name]) AS [q0] " +              "WHERE ([q0].[a0] > @1)"'              new CommandParameter ("@1"' 18));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_Aggregation_FromNestedSubQuery,The following statement contains a magic number: CheckQuery (          from x in            (              from c in Cooks              group c.ID by c.Name into cooksByName              select cooksByName            ).Take (3)          where x.Min (c => c) > 18          select x.Key'          "SELECT [q1].[key] AS [value] "              + "FROM (SELECT TOP (@1) [q0].[key] AS [key]'[q0].[a0] AS [a0] FROM ("                  + "SELECT [t2].[Name] AS [key]' MIN([t2].[ID]) AS [a0] FROM [CookTable] AS [t2] GROUP BY [t2].[Name]) AS [q0]"              + ") AS [q1] "              + "WHERE ([q1].[a0] > @3)"'          new CommandParameter ("@1"' 18));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_Aggregation_FromNestedSubQuery,The following statement contains a magic number: CheckQuery (          from x in            (              from c in Cooks              group c.ID by c.Name into cooksByName              select cooksByName            ).Take (3)          where x.Min (c => c) > 18          select x.Key'          "SELECT [q1].[key] AS [value] "              + "FROM (SELECT TOP (@1) [q0].[key] AS [key]'[q0].[a0] AS [a0] FROM ("                  + "SELECT [t2].[Name] AS [key]' MIN([t2].[ID]) AS [a0] FROM [CookTable] AS [t2] GROUP BY [t2].[Name]) AS [q0]"              + ") AS [q1] "              + "WHERE ([q1].[a0] > @3)"'          new CommandParameter ("@1"' 18));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_Aggregation_FromNestedSubQuery,The following statement contains a magic number: CheckQuery (          from x in            (              from c in Cooks              group c.ID by c.Name into cooksByName              select cooksByName            ).Take (3)          where x.Min (c => c) > 18          select x.Key'          "SELECT [q1].[key] AS [value] "              + "FROM (SELECT TOP (@1) [q0].[key] AS [key]'[q0].[a0] AS [a0] FROM ("                  + "SELECT [t2].[Name] AS [key]' MIN([t2].[ID]) AS [a0] FROM [CookTable] AS [t2] GROUP BY [t2].[Name]) AS [q0]"              + ") AS [q1] "              + "WHERE ([q1].[a0] > @3)"'          new CommandParameter ("@1"' 18));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_MinWithProjection_SelectingAnotherTable_InWhereCondition,The following statement contains a magic number: CheckQuery (            from c in Cooks group c.Weight by c.Name into cooksByName             from k in Kitchens            where cooksByName.Min (c => k.ID) > 18 select cooksByName.Key'            "SELECT [q0].[key] AS [value] "            + "FROM (SELECT [t1].[Name] AS [key] FROM [CookTable] AS [t1] GROUP BY [t1].[Name]) AS [q0] "            + "CROSS JOIN [KitchenTable] AS [t2] "            + "WHERE (("                + "SELECT MIN([t2].[ID]) AS [value]"                + "FROM ("                    + "SELECT [t1].[Weight] AS [element] FROM [CookTable] AS [t1] "                    + "WHERE ((([t1].[Name] IS NULL) AND ([q0].[key] IS NULL)) "                    + "OR ((([t1].[Name] IS NOT NULL) AND ([q0].[key] IS NOT NULL)) AND ([t1].[Name] = [q0].[key])))) AS [q3]"                + ") > @1)"'            new CommandParameter ("@1"' 18));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_MinWithProjection_SelectingAnotherTable_InWhereCondition,The following statement contains a magic number: CheckQuery (            from c in Cooks group c.Weight by c.Name into cooksByName             from k in Kitchens            where cooksByName.Min (c => k.ID) > 18 select cooksByName.Key'            "SELECT [q0].[key] AS [value] "            + "FROM (SELECT [t1].[Name] AS [key] FROM [CookTable] AS [t1] GROUP BY [t1].[Name]) AS [q0] "            + "CROSS JOIN [KitchenTable] AS [t2] "            + "WHERE (("                + "SELECT MIN([t2].[ID]) AS [value]"                + "FROM ("                    + "SELECT [t1].[Weight] AS [element] FROM [CookTable] AS [t1] "                    + "WHERE ((([t1].[Name] IS NULL) AND ([q0].[key] IS NULL)) "                    + "OR ((([t1].[Name] IS NOT NULL) AND ([q0].[key] IS NOT NULL)) AND ([t1].[Name] = [q0].[key])))) AS [q3]"                + ") > @1)"'            new CommandParameter ("@1"' 18));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_UseGroupInFromExpression_EntityElement,The following statement contains a magic number: CheckQuery (            from c in Cooks            group c by c.Name            into cooksByName            from cook in cooksByName            where cook != null            select new { cooksByName.Key' CookID = cook }'            "SELECT [q0].[key] AS [Key]'[q2].[element_ID] AS [CookID_ID]'"            + "[q2].[element_FirstName] AS [CookID_FirstName]'[q2].[element_Name] AS [CookID_Name]'"            + "[q2].[element_IsStarredCook] AS [CookID_IsStarredCook]'[q2].[element_IsFullTimeCook] AS [CookID_IsFullTimeCook]'"            + "[q2].[element_SubstitutedID] AS [CookID_SubstitutedID]'[q2].[element_KitchenID] AS [CookID_KitchenID]'"            + "[q2].[element_KnifeID] AS [CookID_KnifeID]'[q2].[element_KnifeClassID] AS [CookID_KnifeClassID]'"            + "[q2].[element_CookRating] AS [CookID_CookRating] "            + "FROM ("            + "SELECT [t1].[Name] AS [key] "            + "FROM [CookTable] AS [t1] "            + "GROUP BY [t1].[Name]) AS [q0] "            + "CROSS APPLY ("            + "SELECT [t1].[ID] AS [element_ID]'[t1].[FirstName] AS [element_FirstName]'[t1].[Name] AS [element_Name]'"            + "[t1].[IsStarredCook] AS [element_IsStarredCook]'[t1].[IsFullTimeCook] AS [element_IsFullTimeCook]'"            + "[t1].[SubstitutedID] AS [element_SubstitutedID]'[t1].[KitchenID] AS [element_KitchenID]'"            + "[t1].[KnifeID] AS [element_KnifeID]'[t1].[KnifeClassID] AS [element_KnifeClassID]'"            + "[t1].[CookRating] AS [element_CookRating] "            + "FROM [CookTable] AS [t1] "            + "WHERE ((([t1].[Name] IS NULL) AND ([q0].[key] IS NULL)) "            + "OR ((([t1].[Name] IS NOT NULL) AND ([q0].[key] IS NOT NULL)) AND ([t1].[Name] = [q0].[key])))) AS [q2] "            + "WHERE ([q2].[element_ID] IS NOT NULL)"'            row => (object) new             {              Key = row.GetValue<string> (new ColumnID ("Key"' 0))'              CookID = row.GetEntity<Cook> (                new ColumnID ("CookID_ID"' 1)'                new ColumnID ("CookID_FirstName"' 2)'                new ColumnID ("CookID_Name"' 3)'                new ColumnID ("CookID_IsStarredCook"' 4)'                new ColumnID ("CookID_IsFullTimeCook"' 5)'                new ColumnID ("CookID_SubstitutedID"' 6)'                new ColumnID ("CookID_KitchenID"' 7)'                new ColumnID ("CookID_KnifeID"' 8)'                new ColumnID ("CookID_KnifeClassID"' 9)'                new ColumnID ("CookID_CookRating"' 10))            });
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_UseGroupInFromExpression_EntityElement,The following statement contains a magic number: CheckQuery (            from c in Cooks            group c by c.Name            into cooksByName            from cook in cooksByName            where cook != null            select new { cooksByName.Key' CookID = cook }'            "SELECT [q0].[key] AS [Key]'[q2].[element_ID] AS [CookID_ID]'"            + "[q2].[element_FirstName] AS [CookID_FirstName]'[q2].[element_Name] AS [CookID_Name]'"            + "[q2].[element_IsStarredCook] AS [CookID_IsStarredCook]'[q2].[element_IsFullTimeCook] AS [CookID_IsFullTimeCook]'"            + "[q2].[element_SubstitutedID] AS [CookID_SubstitutedID]'[q2].[element_KitchenID] AS [CookID_KitchenID]'"            + "[q2].[element_KnifeID] AS [CookID_KnifeID]'[q2].[element_KnifeClassID] AS [CookID_KnifeClassID]'"            + "[q2].[element_CookRating] AS [CookID_CookRating] "            + "FROM ("            + "SELECT [t1].[Name] AS [key] "            + "FROM [CookTable] AS [t1] "            + "GROUP BY [t1].[Name]) AS [q0] "            + "CROSS APPLY ("            + "SELECT [t1].[ID] AS [element_ID]'[t1].[FirstName] AS [element_FirstName]'[t1].[Name] AS [element_Name]'"            + "[t1].[IsStarredCook] AS [element_IsStarredCook]'[t1].[IsFullTimeCook] AS [element_IsFullTimeCook]'"            + "[t1].[SubstitutedID] AS [element_SubstitutedID]'[t1].[KitchenID] AS [element_KitchenID]'"            + "[t1].[KnifeID] AS [element_KnifeID]'[t1].[KnifeClassID] AS [element_KnifeClassID]'"            + "[t1].[CookRating] AS [element_CookRating] "            + "FROM [CookTable] AS [t1] "            + "WHERE ((([t1].[Name] IS NULL) AND ([q0].[key] IS NULL)) "            + "OR ((([t1].[Name] IS NOT NULL) AND ([q0].[key] IS NOT NULL)) AND ([t1].[Name] = [q0].[key])))) AS [q2] "            + "WHERE ([q2].[element_ID] IS NOT NULL)"'            row => (object) new             {              Key = row.GetValue<string> (new ColumnID ("Key"' 0))'              CookID = row.GetEntity<Cook> (                new ColumnID ("CookID_ID"' 1)'                new ColumnID ("CookID_FirstName"' 2)'                new ColumnID ("CookID_Name"' 3)'                new ColumnID ("CookID_IsStarredCook"' 4)'                new ColumnID ("CookID_IsFullTimeCook"' 5)'                new ColumnID ("CookID_SubstitutedID"' 6)'                new ColumnID ("CookID_KitchenID"' 7)'                new ColumnID ("CookID_KnifeID"' 8)'                new ColumnID ("CookID_KnifeClassID"' 9)'                new ColumnID ("CookID_CookRating"' 10))            });
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_UseGroupInFromExpression_EntityElement,The following statement contains a magic number: CheckQuery (            from c in Cooks            group c by c.Name            into cooksByName            from cook in cooksByName            where cook != null            select new { cooksByName.Key' CookID = cook }'            "SELECT [q0].[key] AS [Key]'[q2].[element_ID] AS [CookID_ID]'"            + "[q2].[element_FirstName] AS [CookID_FirstName]'[q2].[element_Name] AS [CookID_Name]'"            + "[q2].[element_IsStarredCook] AS [CookID_IsStarredCook]'[q2].[element_IsFullTimeCook] AS [CookID_IsFullTimeCook]'"            + "[q2].[element_SubstitutedID] AS [CookID_SubstitutedID]'[q2].[element_KitchenID] AS [CookID_KitchenID]'"            + "[q2].[element_KnifeID] AS [CookID_KnifeID]'[q2].[element_KnifeClassID] AS [CookID_KnifeClassID]'"            + "[q2].[element_CookRating] AS [CookID_CookRating] "            + "FROM ("            + "SELECT [t1].[Name] AS [key] "            + "FROM [CookTable] AS [t1] "            + "GROUP BY [t1].[Name]) AS [q0] "            + "CROSS APPLY ("            + "SELECT [t1].[ID] AS [element_ID]'[t1].[FirstName] AS [element_FirstName]'[t1].[Name] AS [element_Name]'"            + "[t1].[IsStarredCook] AS [element_IsStarredCook]'[t1].[IsFullTimeCook] AS [element_IsFullTimeCook]'"            + "[t1].[SubstitutedID] AS [element_SubstitutedID]'[t1].[KitchenID] AS [element_KitchenID]'"            + "[t1].[KnifeID] AS [element_KnifeID]'[t1].[KnifeClassID] AS [element_KnifeClassID]'"            + "[t1].[CookRating] AS [element_CookRating] "            + "FROM [CookTable] AS [t1] "            + "WHERE ((([t1].[Name] IS NULL) AND ([q0].[key] IS NULL)) "            + "OR ((([t1].[Name] IS NOT NULL) AND ([q0].[key] IS NOT NULL)) AND ([t1].[Name] = [q0].[key])))) AS [q2] "            + "WHERE ([q2].[element_ID] IS NOT NULL)"'            row => (object) new             {              Key = row.GetValue<string> (new ColumnID ("Key"' 0))'              CookID = row.GetEntity<Cook> (                new ColumnID ("CookID_ID"' 1)'                new ColumnID ("CookID_FirstName"' 2)'                new ColumnID ("CookID_Name"' 3)'                new ColumnID ("CookID_IsStarredCook"' 4)'                new ColumnID ("CookID_IsFullTimeCook"' 5)'                new ColumnID ("CookID_SubstitutedID"' 6)'                new ColumnID ("CookID_KitchenID"' 7)'                new ColumnID ("CookID_KnifeID"' 8)'                new ColumnID ("CookID_KnifeClassID"' 9)'                new ColumnID ("CookID_CookRating"' 10))            });
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_UseGroupInFromExpression_EntityElement,The following statement contains a magic number: CheckQuery (            from c in Cooks            group c by c.Name            into cooksByName            from cook in cooksByName            where cook != null            select new { cooksByName.Key' CookID = cook }'            "SELECT [q0].[key] AS [Key]'[q2].[element_ID] AS [CookID_ID]'"            + "[q2].[element_FirstName] AS [CookID_FirstName]'[q2].[element_Name] AS [CookID_Name]'"            + "[q2].[element_IsStarredCook] AS [CookID_IsStarredCook]'[q2].[element_IsFullTimeCook] AS [CookID_IsFullTimeCook]'"            + "[q2].[element_SubstitutedID] AS [CookID_SubstitutedID]'[q2].[element_KitchenID] AS [CookID_KitchenID]'"            + "[q2].[element_KnifeID] AS [CookID_KnifeID]'[q2].[element_KnifeClassID] AS [CookID_KnifeClassID]'"            + "[q2].[element_CookRating] AS [CookID_CookRating] "            + "FROM ("            + "SELECT [t1].[Name] AS [key] "            + "FROM [CookTable] AS [t1] "            + "GROUP BY [t1].[Name]) AS [q0] "            + "CROSS APPLY ("            + "SELECT [t1].[ID] AS [element_ID]'[t1].[FirstName] AS [element_FirstName]'[t1].[Name] AS [element_Name]'"            + "[t1].[IsStarredCook] AS [element_IsStarredCook]'[t1].[IsFullTimeCook] AS [element_IsFullTimeCook]'"            + "[t1].[SubstitutedID] AS [element_SubstitutedID]'[t1].[KitchenID] AS [element_KitchenID]'"            + "[t1].[KnifeID] AS [element_KnifeID]'[t1].[KnifeClassID] AS [element_KnifeClassID]'"            + "[t1].[CookRating] AS [element_CookRating] "            + "FROM [CookTable] AS [t1] "            + "WHERE ((([t1].[Name] IS NULL) AND ([q0].[key] IS NULL)) "            + "OR ((([t1].[Name] IS NOT NULL) AND ([q0].[key] IS NOT NULL)) AND ([t1].[Name] = [q0].[key])))) AS [q2] "            + "WHERE ([q2].[element_ID] IS NOT NULL)"'            row => (object) new             {              Key = row.GetValue<string> (new ColumnID ("Key"' 0))'              CookID = row.GetEntity<Cook> (                new ColumnID ("CookID_ID"' 1)'                new ColumnID ("CookID_FirstName"' 2)'                new ColumnID ("CookID_Name"' 3)'                new ColumnID ("CookID_IsStarredCook"' 4)'                new ColumnID ("CookID_IsFullTimeCook"' 5)'                new ColumnID ("CookID_SubstitutedID"' 6)'                new ColumnID ("CookID_KitchenID"' 7)'                new ColumnID ("CookID_KnifeID"' 8)'                new ColumnID ("CookID_KnifeClassID"' 9)'                new ColumnID ("CookID_CookRating"' 10))            });
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_UseGroupInFromExpression_EntityElement,The following statement contains a magic number: CheckQuery (            from c in Cooks            group c by c.Name            into cooksByName            from cook in cooksByName            where cook != null            select new { cooksByName.Key' CookID = cook }'            "SELECT [q0].[key] AS [Key]'[q2].[element_ID] AS [CookID_ID]'"            + "[q2].[element_FirstName] AS [CookID_FirstName]'[q2].[element_Name] AS [CookID_Name]'"            + "[q2].[element_IsStarredCook] AS [CookID_IsStarredCook]'[q2].[element_IsFullTimeCook] AS [CookID_IsFullTimeCook]'"            + "[q2].[element_SubstitutedID] AS [CookID_SubstitutedID]'[q2].[element_KitchenID] AS [CookID_KitchenID]'"            + "[q2].[element_KnifeID] AS [CookID_KnifeID]'[q2].[element_KnifeClassID] AS [CookID_KnifeClassID]'"            + "[q2].[element_CookRating] AS [CookID_CookRating] "            + "FROM ("            + "SELECT [t1].[Name] AS [key] "            + "FROM [CookTable] AS [t1] "            + "GROUP BY [t1].[Name]) AS [q0] "            + "CROSS APPLY ("            + "SELECT [t1].[ID] AS [element_ID]'[t1].[FirstName] AS [element_FirstName]'[t1].[Name] AS [element_Name]'"            + "[t1].[IsStarredCook] AS [element_IsStarredCook]'[t1].[IsFullTimeCook] AS [element_IsFullTimeCook]'"            + "[t1].[SubstitutedID] AS [element_SubstitutedID]'[t1].[KitchenID] AS [element_KitchenID]'"            + "[t1].[KnifeID] AS [element_KnifeID]'[t1].[KnifeClassID] AS [element_KnifeClassID]'"            + "[t1].[CookRating] AS [element_CookRating] "            + "FROM [CookTable] AS [t1] "            + "WHERE ((([t1].[Name] IS NULL) AND ([q0].[key] IS NULL)) "            + "OR ((([t1].[Name] IS NOT NULL) AND ([q0].[key] IS NOT NULL)) AND ([t1].[Name] = [q0].[key])))) AS [q2] "            + "WHERE ([q2].[element_ID] IS NOT NULL)"'            row => (object) new             {              Key = row.GetValue<string> (new ColumnID ("Key"' 0))'              CookID = row.GetEntity<Cook> (                new ColumnID ("CookID_ID"' 1)'                new ColumnID ("CookID_FirstName"' 2)'                new ColumnID ("CookID_Name"' 3)'                new ColumnID ("CookID_IsStarredCook"' 4)'                new ColumnID ("CookID_IsFullTimeCook"' 5)'                new ColumnID ("CookID_SubstitutedID"' 6)'                new ColumnID ("CookID_KitchenID"' 7)'                new ColumnID ("CookID_KnifeID"' 8)'                new ColumnID ("CookID_KnifeClassID"' 9)'                new ColumnID ("CookID_CookRating"' 10))            });
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_UseGroupInFromExpression_EntityElement,The following statement contains a magic number: CheckQuery (            from c in Cooks            group c by c.Name            into cooksByName            from cook in cooksByName            where cook != null            select new { cooksByName.Key' CookID = cook }'            "SELECT [q0].[key] AS [Key]'[q2].[element_ID] AS [CookID_ID]'"            + "[q2].[element_FirstName] AS [CookID_FirstName]'[q2].[element_Name] AS [CookID_Name]'"            + "[q2].[element_IsStarredCook] AS [CookID_IsStarredCook]'[q2].[element_IsFullTimeCook] AS [CookID_IsFullTimeCook]'"            + "[q2].[element_SubstitutedID] AS [CookID_SubstitutedID]'[q2].[element_KitchenID] AS [CookID_KitchenID]'"            + "[q2].[element_KnifeID] AS [CookID_KnifeID]'[q2].[element_KnifeClassID] AS [CookID_KnifeClassID]'"            + "[q2].[element_CookRating] AS [CookID_CookRating] "            + "FROM ("            + "SELECT [t1].[Name] AS [key] "            + "FROM [CookTable] AS [t1] "            + "GROUP BY [t1].[Name]) AS [q0] "            + "CROSS APPLY ("            + "SELECT [t1].[ID] AS [element_ID]'[t1].[FirstName] AS [element_FirstName]'[t1].[Name] AS [element_Name]'"            + "[t1].[IsStarredCook] AS [element_IsStarredCook]'[t1].[IsFullTimeCook] AS [element_IsFullTimeCook]'"            + "[t1].[SubstitutedID] AS [element_SubstitutedID]'[t1].[KitchenID] AS [element_KitchenID]'"            + "[t1].[KnifeID] AS [element_KnifeID]'[t1].[KnifeClassID] AS [element_KnifeClassID]'"            + "[t1].[CookRating] AS [element_CookRating] "            + "FROM [CookTable] AS [t1] "            + "WHERE ((([t1].[Name] IS NULL) AND ([q0].[key] IS NULL)) "            + "OR ((([t1].[Name] IS NOT NULL) AND ([q0].[key] IS NOT NULL)) AND ([t1].[Name] = [q0].[key])))) AS [q2] "            + "WHERE ([q2].[element_ID] IS NOT NULL)"'            row => (object) new             {              Key = row.GetValue<string> (new ColumnID ("Key"' 0))'              CookID = row.GetEntity<Cook> (                new ColumnID ("CookID_ID"' 1)'                new ColumnID ("CookID_FirstName"' 2)'                new ColumnID ("CookID_Name"' 3)'                new ColumnID ("CookID_IsStarredCook"' 4)'                new ColumnID ("CookID_IsFullTimeCook"' 5)'                new ColumnID ("CookID_SubstitutedID"' 6)'                new ColumnID ("CookID_KitchenID"' 7)'                new ColumnID ("CookID_KnifeID"' 8)'                new ColumnID ("CookID_KnifeClassID"' 9)'                new ColumnID ("CookID_CookRating"' 10))            });
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_UseGroupInFromExpression_EntityElement,The following statement contains a magic number: CheckQuery (            from c in Cooks            group c by c.Name            into cooksByName            from cook in cooksByName            where cook != null            select new { cooksByName.Key' CookID = cook }'            "SELECT [q0].[key] AS [Key]'[q2].[element_ID] AS [CookID_ID]'"            + "[q2].[element_FirstName] AS [CookID_FirstName]'[q2].[element_Name] AS [CookID_Name]'"            + "[q2].[element_IsStarredCook] AS [CookID_IsStarredCook]'[q2].[element_IsFullTimeCook] AS [CookID_IsFullTimeCook]'"            + "[q2].[element_SubstitutedID] AS [CookID_SubstitutedID]'[q2].[element_KitchenID] AS [CookID_KitchenID]'"            + "[q2].[element_KnifeID] AS [CookID_KnifeID]'[q2].[element_KnifeClassID] AS [CookID_KnifeClassID]'"            + "[q2].[element_CookRating] AS [CookID_CookRating] "            + "FROM ("            + "SELECT [t1].[Name] AS [key] "            + "FROM [CookTable] AS [t1] "            + "GROUP BY [t1].[Name]) AS [q0] "            + "CROSS APPLY ("            + "SELECT [t1].[ID] AS [element_ID]'[t1].[FirstName] AS [element_FirstName]'[t1].[Name] AS [element_Name]'"            + "[t1].[IsStarredCook] AS [element_IsStarredCook]'[t1].[IsFullTimeCook] AS [element_IsFullTimeCook]'"            + "[t1].[SubstitutedID] AS [element_SubstitutedID]'[t1].[KitchenID] AS [element_KitchenID]'"            + "[t1].[KnifeID] AS [element_KnifeID]'[t1].[KnifeClassID] AS [element_KnifeClassID]'"            + "[t1].[CookRating] AS [element_CookRating] "            + "FROM [CookTable] AS [t1] "            + "WHERE ((([t1].[Name] IS NULL) AND ([q0].[key] IS NULL)) "            + "OR ((([t1].[Name] IS NOT NULL) AND ([q0].[key] IS NOT NULL)) AND ([t1].[Name] = [q0].[key])))) AS [q2] "            + "WHERE ([q2].[element_ID] IS NOT NULL)"'            row => (object) new             {              Key = row.GetValue<string> (new ColumnID ("Key"' 0))'              CookID = row.GetEntity<Cook> (                new ColumnID ("CookID_ID"' 1)'                new ColumnID ("CookID_FirstName"' 2)'                new ColumnID ("CookID_Name"' 3)'                new ColumnID ("CookID_IsStarredCook"' 4)'                new ColumnID ("CookID_IsFullTimeCook"' 5)'                new ColumnID ("CookID_SubstitutedID"' 6)'                new ColumnID ("CookID_KitchenID"' 7)'                new ColumnID ("CookID_KnifeID"' 8)'                new ColumnID ("CookID_KnifeClassID"' 9)'                new ColumnID ("CookID_CookRating"' 10))            });
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_UseGroupInFromExpression_EntityElement,The following statement contains a magic number: CheckQuery (            from c in Cooks            group c by c.Name            into cooksByName            from cook in cooksByName            where cook != null            select new { cooksByName.Key' CookID = cook }'            "SELECT [q0].[key] AS [Key]'[q2].[element_ID] AS [CookID_ID]'"            + "[q2].[element_FirstName] AS [CookID_FirstName]'[q2].[element_Name] AS [CookID_Name]'"            + "[q2].[element_IsStarredCook] AS [CookID_IsStarredCook]'[q2].[element_IsFullTimeCook] AS [CookID_IsFullTimeCook]'"            + "[q2].[element_SubstitutedID] AS [CookID_SubstitutedID]'[q2].[element_KitchenID] AS [CookID_KitchenID]'"            + "[q2].[element_KnifeID] AS [CookID_KnifeID]'[q2].[element_KnifeClassID] AS [CookID_KnifeClassID]'"            + "[q2].[element_CookRating] AS [CookID_CookRating] "            + "FROM ("            + "SELECT [t1].[Name] AS [key] "            + "FROM [CookTable] AS [t1] "            + "GROUP BY [t1].[Name]) AS [q0] "            + "CROSS APPLY ("            + "SELECT [t1].[ID] AS [element_ID]'[t1].[FirstName] AS [element_FirstName]'[t1].[Name] AS [element_Name]'"            + "[t1].[IsStarredCook] AS [element_IsStarredCook]'[t1].[IsFullTimeCook] AS [element_IsFullTimeCook]'"            + "[t1].[SubstitutedID] AS [element_SubstitutedID]'[t1].[KitchenID] AS [element_KitchenID]'"            + "[t1].[KnifeID] AS [element_KnifeID]'[t1].[KnifeClassID] AS [element_KnifeClassID]'"            + "[t1].[CookRating] AS [element_CookRating] "            + "FROM [CookTable] AS [t1] "            + "WHERE ((([t1].[Name] IS NULL) AND ([q0].[key] IS NULL)) "            + "OR ((([t1].[Name] IS NOT NULL) AND ([q0].[key] IS NOT NULL)) AND ([t1].[Name] = [q0].[key])))) AS [q2] "            + "WHERE ([q2].[element_ID] IS NOT NULL)"'            row => (object) new             {              Key = row.GetValue<string> (new ColumnID ("Key"' 0))'              CookID = row.GetEntity<Cook> (                new ColumnID ("CookID_ID"' 1)'                new ColumnID ("CookID_FirstName"' 2)'                new ColumnID ("CookID_Name"' 3)'                new ColumnID ("CookID_IsStarredCook"' 4)'                new ColumnID ("CookID_IsFullTimeCook"' 5)'                new ColumnID ("CookID_SubstitutedID"' 6)'                new ColumnID ("CookID_KitchenID"' 7)'                new ColumnID ("CookID_KnifeID"' 8)'                new ColumnID ("CookID_KnifeClassID"' 9)'                new ColumnID ("CookID_CookRating"' 10))            });
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_UseGroupInFromExpression_EntityElement,The following statement contains a magic number: CheckQuery (            from c in Cooks            group c by c.Name            into cooksByName            from cook in cooksByName            where cook != null            select new { cooksByName.Key' CookID = cook }'            "SELECT [q0].[key] AS [Key]'[q2].[element_ID] AS [CookID_ID]'"            + "[q2].[element_FirstName] AS [CookID_FirstName]'[q2].[element_Name] AS [CookID_Name]'"            + "[q2].[element_IsStarredCook] AS [CookID_IsStarredCook]'[q2].[element_IsFullTimeCook] AS [CookID_IsFullTimeCook]'"            + "[q2].[element_SubstitutedID] AS [CookID_SubstitutedID]'[q2].[element_KitchenID] AS [CookID_KitchenID]'"            + "[q2].[element_KnifeID] AS [CookID_KnifeID]'[q2].[element_KnifeClassID] AS [CookID_KnifeClassID]'"            + "[q2].[element_CookRating] AS [CookID_CookRating] "            + "FROM ("            + "SELECT [t1].[Name] AS [key] "            + "FROM [CookTable] AS [t1] "            + "GROUP BY [t1].[Name]) AS [q0] "            + "CROSS APPLY ("            + "SELECT [t1].[ID] AS [element_ID]'[t1].[FirstName] AS [element_FirstName]'[t1].[Name] AS [element_Name]'"            + "[t1].[IsStarredCook] AS [element_IsStarredCook]'[t1].[IsFullTimeCook] AS [element_IsFullTimeCook]'"            + "[t1].[SubstitutedID] AS [element_SubstitutedID]'[t1].[KitchenID] AS [element_KitchenID]'"            + "[t1].[KnifeID] AS [element_KnifeID]'[t1].[KnifeClassID] AS [element_KnifeClassID]'"            + "[t1].[CookRating] AS [element_CookRating] "            + "FROM [CookTable] AS [t1] "            + "WHERE ((([t1].[Name] IS NULL) AND ([q0].[key] IS NULL)) "            + "OR ((([t1].[Name] IS NOT NULL) AND ([q0].[key] IS NOT NULL)) AND ([t1].[Name] = [q0].[key])))) AS [q2] "            + "WHERE ([q2].[element_ID] IS NOT NULL)"'            row => (object) new             {              Key = row.GetValue<string> (new ColumnID ("Key"' 0))'              CookID = row.GetEntity<Cook> (                new ColumnID ("CookID_ID"' 1)'                new ColumnID ("CookID_FirstName"' 2)'                new ColumnID ("CookID_Name"' 3)'                new ColumnID ("CookID_IsStarredCook"' 4)'                new ColumnID ("CookID_IsFullTimeCook"' 5)'                new ColumnID ("CookID_SubstitutedID"' 6)'                new ColumnID ("CookID_KitchenID"' 7)'                new ColumnID ("CookID_KnifeID"' 8)'                new ColumnID ("CookID_KnifeClassID"' 9)'                new ColumnID ("CookID_CookRating"' 10))            });
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_GroupInFromExpression_FromNestedSubQuery,The following statement contains a magic number: CheckQuery (          from x in            (              from c in Cooks              group c.ID by c.Name into cooksByName              select cooksByName            ).Take (3)          from y in x          select new { x.Key' y }'          "SELECT [q1].[key] AS [Key]'[q3].[element] AS [y] "              + "FROM ("                  + "SELECT TOP (@1) [q0].[key] AS [key] "                  + "FROM (SELECT [t2].[Name] AS [key] FROM [CookTable] AS [t2] GROUP BY [t2].[Name]) AS [q0]) AS [q1] "                  + "CROSS APPLY ("                      + "SELECT [t2].[ID] AS [element] FROM [CookTable] AS [t2] "                      + "WHERE ((([t2].[Name] IS NULL) AND ([q1].[key] IS NULL)) "                          + "OR ((([t2].[Name] IS NOT NULL) AND ([q1].[key] IS NOT NULL)) AND ([t2].[Name] = [q1].[key])))) AS [q3]"'          new CommandParameter ("@1"' 3));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_GroupInFromExpression_FromNestedSubQuery,The following statement contains a magic number: CheckQuery (          from x in            (              from c in Cooks              group c.ID by c.Name into cooksByName              select cooksByName            ).Take (3)          from y in x          select new { x.Key' y }'          "SELECT [q1].[key] AS [Key]'[q3].[element] AS [y] "              + "FROM ("                  + "SELECT TOP (@1) [q0].[key] AS [key] "                  + "FROM (SELECT [t2].[Name] AS [key] FROM [CookTable] AS [t2] GROUP BY [t2].[Name]) AS [q0]) AS [q1] "                  + "CROSS APPLY ("                      + "SELECT [t2].[ID] AS [element] FROM [CookTable] AS [t2] "                      + "WHERE ((([t2].[Name] IS NULL) AND ([q1].[key] IS NULL)) "                          + "OR ((([t2].[Name] IS NOT NULL) AND ([q1].[key] IS NOT NULL)) AND ([t2].[Name] = [q1].[key])))) AS [q3]"'          new CommandParameter ("@1"' 3));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_WithMemberInFromClause_AndGroupingComingFromSubQuery,The following statement contains a magic number: CheckQuery (            from x in              (                from c in Cooks                group c.ID by c.Name into cooksByName                select new { X = cooksByName' Y = 12 }              ).Take (3)            from y in x.X            select new { x.X.Key' y }'            "SELECT [q1].[X_key] AS [Key]'[q3].[element] AS [y] "                + "FROM ("                    + "SELECT TOP (@1) [q0].[key] AS [X_key]' @1 AS [Y] "                    + "FROM (SELECT [t2].[Name] AS [key] FROM [CookTable] AS [t2] GROUP BY [t2].[Name]) AS [q0]) AS [q1] "                + "CROSS APPLY ("                    + "SELECT [t2].[ID] AS [element] FROM [CookTable] AS [t2] "                    + "WHERE ((([t2].[Name] IS NULL) AND ([q1].[X_key] IS NULL)) "                        + "OR ((([t2].[Name] IS NOT NULL) AND ([q1].[X_key] IS NOT NULL)) AND ([t2].[Name] = [q1].[X_key])))) AS [q3]"'            new CommandParameter ("@1"' 3)'            new CommandParameter ("@2"' 12));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_WithMemberInFromClause_AndGroupingComingFromSubQuery,The following statement contains a magic number: CheckQuery (            from x in              (                from c in Cooks                group c.ID by c.Name into cooksByName                select new { X = cooksByName' Y = 12 }              ).Take (3)            from y in x.X            select new { x.X.Key' y }'            "SELECT [q1].[X_key] AS [Key]'[q3].[element] AS [y] "                + "FROM ("                    + "SELECT TOP (@1) [q0].[key] AS [X_key]' @1 AS [Y] "                    + "FROM (SELECT [t2].[Name] AS [key] FROM [CookTable] AS [t2] GROUP BY [t2].[Name]) AS [q0]) AS [q1] "                + "CROSS APPLY ("                    + "SELECT [t2].[ID] AS [element] FROM [CookTable] AS [t2] "                    + "WHERE ((([t2].[Name] IS NULL) AND ([q1].[X_key] IS NULL)) "                        + "OR ((([t2].[Name] IS NOT NULL) AND ([q1].[X_key] IS NOT NULL)) AND ([t2].[Name] = [q1].[X_key])))) AS [q3]"'            new CommandParameter ("@1"' 3)'            new CommandParameter ("@2"' 12));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_WithMemberInFromClause_AndGroupingComingFromSubQuery,The following statement contains a magic number: CheckQuery (            from x in              (                from c in Cooks                group c.ID by c.Name into cooksByName                select new { X = cooksByName' Y = 12 }              ).Take (3)            from y in x.X            select new { x.X.Key' y }'            "SELECT [q1].[X_key] AS [Key]'[q3].[element] AS [y] "                + "FROM ("                    + "SELECT TOP (@1) [q0].[key] AS [X_key]' @1 AS [Y] "                    + "FROM (SELECT [t2].[Name] AS [key] FROM [CookTable] AS [t2] GROUP BY [t2].[Name]) AS [q0]) AS [q1] "                + "CROSS APPLY ("                    + "SELECT [t2].[ID] AS [element] FROM [CookTable] AS [t2] "                    + "WHERE ((([t2].[Name] IS NULL) AND ([q1].[X_key] IS NULL)) "                        + "OR ((([t2].[Name] IS NOT NULL) AND ([q1].[X_key] IS NOT NULL)) AND ([t2].[Name] = [q1].[X_key])))) AS [q3]"'            new CommandParameter ("@1"' 3)'            new CommandParameter ("@2"' 12));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_WithMemberInFromClause_AndGroupingComingFromSubQuery,The following statement contains a magic number: CheckQuery (            from x in              (                from c in Cooks                group c.ID by c.Name into cooksByName                select new { X = cooksByName' Y = 12 }              ).Take (3)            from y in x.X            select new { x.X.Key' y }'            "SELECT [q1].[X_key] AS [Key]'[q3].[element] AS [y] "                + "FROM ("                    + "SELECT TOP (@1) [q0].[key] AS [X_key]' @1 AS [Y] "                    + "FROM (SELECT [t2].[Name] AS [key] FROM [CookTable] AS [t2] GROUP BY [t2].[Name]) AS [q0]) AS [q1] "                + "CROSS APPLY ("                    + "SELECT [t2].[ID] AS [element] FROM [CookTable] AS [t2] "                    + "WHERE ((([t2].[Name] IS NULL) AND ([q1].[X_key] IS NULL)) "                        + "OR ((([t2].[Name] IS NOT NULL) AND ([q1].[X_key] IS NOT NULL)) AND ([t2].[Name] = [q1].[X_key])))) AS [q3]"'            new CommandParameter ("@1"' 3)'            new CommandParameter ("@2"' 12));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,GroupBySqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\GroupBySqlBackendIntegrationTest.cs,GroupBy_AfterTake,The following statement contains a magic number: CheckQuery (            Cooks.Take (10).GroupBy (c => c.Kitchen.ID).Select (g => g.Key)'            "SELECT [q1].[key] AS [value] "            + "FROM (SELECT [q0].[KitchenID] AS [key] "            + "FROM (SELECT TOP (10) [t2].[ID]'[t2].[FirstName]'[t2].[Name]'[t2].[IsStarredCook]'[t2].[IsFullTimeCook]'[t2].[SubstitutedID]'"            + "[t2].[KitchenID]'[t2].[KnifeID]'[t2].[KnifeClassID]'[t2].[CookRating] "            + "FROM [CookTable] AS [t2]) AS [q0] "            + "GROUP BY [q0].[KitchenID]) AS [q1]");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,DistinctAndTake,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks select c.FirstName).Distinct().Take (5)'            "SELECT DISTINCT TOP (5) [t0].[FirstName] AS [value] FROM [CookTable] AS [t0]");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,DistinctAndSkip,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks select c.FirstName).Distinct().Skip (5)'            "SELECT [q0].[Key] AS [value] FROM (SELECT [q0].[value] AS [Key]'ROW_NUMBER() OVER (ORDER BY (SELECT @1) ASC) AS [Value] FROM (SELECT DISTINCT [t1].[FirstName] AS [value] FROM [CookTable] AS [t1]) AS [q0]) AS [q0] WHERE ([q0].[Value] > @2) ORDER BY [q0].[Value] ASC");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,DistinctAndSkipAndTake,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks select c.FirstName).Distinct().Skip (5).Take (10)'            "SELECT [q0].[Key] AS [value] FROM (SELECT [q0].[value] AS [Key]'ROW_NUMBER() OVER (ORDER BY (SELECT @1) ASC) AS [Value] FROM (SELECT DISTINCT [t1].[FirstName] AS [value] FROM [CookTable] AS [t1]) AS [q0]) AS [q0] WHERE (([q0].[Value] > @2) AND ([q0].[Value] <= (@2 + @3))) ORDER BY [q0].[Value] ASC");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,DistinctAndSkipAndTake,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks select c.FirstName).Distinct().Skip (5).Take (10)'            "SELECT [q0].[Key] AS [value] FROM (SELECT [q0].[value] AS [Key]'ROW_NUMBER() OVER (ORDER BY (SELECT @1) ASC) AS [Value] FROM (SELECT DISTINCT [t1].[FirstName] AS [value] FROM [CookTable] AS [t1]) AS [q0]) AS [q0] WHERE (([q0].[Value] > @2) AND ([q0].[Value] <= (@2 + @3))) ORDER BY [q0].[Value] ASC");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAndDistinct,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks select c.FirstName).Take (5).Distinct()'            "SELECT DISTINCT [q0].[value] AS [value] FROM (SELECT TOP (5) [t1].[FirstName] AS [value] FROM [CookTable] AS [t1]) AS [q0]");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAndCount,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks select c.FirstName).Take (5).Count()'            "SELECT COUNT(*) AS [value] FROM (SELECT TOP (5) [t1].[FirstName] AS [value] FROM [CookTable] AS [t1]) AS [q0]");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAndTake,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks select c.FirstName).Take (5).Take (3)'            "SELECT TOP (3) [q0].[value] AS [value] FROM (SELECT TOP (5) [t1].[FirstName] AS [value] FROM [CookTable] AS [t1]) AS [q0]");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAndTake,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks select c.FirstName).Take (5).Take (3)'            "SELECT TOP (3) [q0].[value] AS [value] FROM (SELECT TOP (5) [t1].[FirstName] AS [value] FROM [CookTable] AS [t1]) AS [q0]");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAndTake,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks select c.FirstName).Take (3).Take (5)'            "SELECT TOP (5) [q0].[value] AS [value] FROM (SELECT TOP (3) [t1].[FirstName] AS [value] FROM [CookTable] AS [t1]) AS [q0]");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAndTake,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks select c.FirstName).Take (3).Take (5)'            "SELECT TOP (5) [q0].[value] AS [value] FROM (SELECT TOP (3) [t1].[FirstName] AS [value] FROM [CookTable] AS [t1]) AS [q0]");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAndFirst_TakeAndSingle,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks select c.FirstName).Take (5).First()'            "SELECT TOP (1) [q0].[value] AS [value] FROM (SELECT TOP (5) [t1].[FirstName] AS [value] FROM [CookTable] AS [t1]) AS [q0]");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAndFirst_TakeAndSingle,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks select c.FirstName).Take (5).Single()'            "SELECT TOP (2) [q0].[value] AS [value] FROM (SELECT TOP (5) [t1].[FirstName] AS [value] FROM [CookTable] AS [t1]) AS [q0]");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAndFirst_TakeAndSingle_WithPredicate,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks select c.FirstName).Take (5).First (fn => fn != null)'            "SELECT TOP (1) [q0].[value] AS [value] FROM (SELECT TOP (5) [t1].[FirstName] AS [value] FROM [CookTable] AS [t1]) AS [q0] WHERE ([q0].[value] IS NOT NULL)");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAndFirst_TakeAndSingle_WithPredicate,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks select c.FirstName).Take (5).Single (fn => fn != null)'            "SELECT TOP (2) [q0].[value] AS [value] FROM (SELECT TOP (5) [t1].[FirstName] AS [value] FROM [CookTable] AS [t1]) AS [q0] WHERE ([q0].[value] IS NOT NULL)");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAndTakeAndTake,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks select c.FirstName).Take (5).Take(3).Take(7)'            "SELECT TOP (7) [q1].[value] AS [value] FROM (SELECT TOP (3) [q0].[value] AS [value] FROM (SELECT TOP (5) [t2].[FirstName] AS [value] "+            "FROM [CookTable] AS [t2]) AS [q0]) AS [q1]");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAndTakeAndTake,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks select c.FirstName).Take (5).Take(3).Take(7)'            "SELECT TOP (7) [q1].[value] AS [value] FROM (SELECT TOP (3) [q0].[value] AS [value] FROM (SELECT TOP (5) [t2].[FirstName] AS [value] "+            "FROM [CookTable] AS [t2]) AS [q0]) AS [q1]");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAndTakeAndTake,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks select c.FirstName).Take (5).Take(3).Take(7)'            "SELECT TOP (7) [q1].[value] AS [value] FROM (SELECT TOP (3) [q0].[value] AS [value] FROM (SELECT TOP (5) [t2].[FirstName] AS [value] "+            "FROM [CookTable] AS [t2]) AS [q0]) AS [q1]");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAndContains,The following statement contains a magic number: Cook cook = new Cook { ID = 5' FirstName = "Hugo"' Name = "Hanser" };
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,All_AfterResultOperatorInducedSubquery,The following statement contains a magic number: CheckQuery (            () => (from s in Cooks select s).Take (10).Take (20).All (s => s.IsStarredCook)'            "SELECT CONVERT(BIT' CASE WHEN NOT EXISTS((SELECT TOP (20) [q0].[ID] "            + "FROM (SELECT TOP (10) [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'"            + "[t1].[IsFullTimeCook]'[t1].[SubstitutedID]'[t1].[KitchenID]'[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating]"            + " FROM [CookTable] AS [t1]) AS [q0] "            + "WHERE NOT ([q0].[IsStarredCook] = 1))) THEN 1 ELSE 0 END) AS [value]");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,All_AfterResultOperatorInducedSubquery,The following statement contains a magic number: CheckQuery (            () => (from s in Cooks select s).Take (10).Take (20).All (s => s.IsStarredCook)'            "SELECT CONVERT(BIT' CASE WHEN NOT EXISTS((SELECT TOP (20) [q0].[ID] "            + "FROM (SELECT TOP (10) [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'"            + "[t1].[IsFullTimeCook]'[t1].[SubstitutedID]'[t1].[KitchenID]'[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating]"            + " FROM [CookTable] AS [t1]) AS [q0] "            + "WHERE NOT ([q0].[IsStarredCook] = 1))) THEN 1 ELSE 0 END) AS [value]");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,All_AfterResultOperatorInducedSubquery,The following statement contains a magic number: CheckQuery (            () => (from s in Cooks select s.FirstName).Take (10).Take (20).All (s => s != null)'            "SELECT CONVERT(BIT' CASE WHEN NOT EXISTS((SELECT TOP (20) [q0].[value] FROM (SELECT TOP (10) [t1].[FirstName] AS [value] "+            "FROM [CookTable] AS [t1]) AS [q0] WHERE NOT ([q0].[value] IS NOT NULL))) THEN 1 ELSE 0 END) AS [value]");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,All_AfterResultOperatorInducedSubquery,The following statement contains a magic number: CheckQuery (            () => (from s in Cooks select s.FirstName).Take (10).Take (20).All (s => s != null)'            "SELECT CONVERT(BIT' CASE WHEN NOT EXISTS((SELECT TOP (20) [q0].[value] FROM (SELECT TOP (10) [t1].[FirstName] AS [value] "+            "FROM [CookTable] AS [t1]) AS [q0] WHERE NOT ([q0].[value] IS NOT NULL))) THEN 1 ELSE 0 END) AS [value]");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAfterSkip,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks orderby c.Name select c.FirstName).Skip (100).Take(5)'            "SELECT [q0].[Key] AS [value] FROM (SELECT [t1].[FirstName] AS [Key]'ROW_NUMBER() OVER (ORDER BY [t1].[Name] ASC) AS [Value] " +            "FROM [CookTable] AS [t1]) AS [q0] WHERE (([q0].[Value] > @1) AND ([q0].[Value] <= (@1 + @2))) ORDER BY [q0].[Value] ASC"'            new CommandParameter("@1"' 100)'            new CommandParameter("@2"' 5));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAfterSkip,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks orderby c.Name select c.FirstName).Skip (100).Take(5)'            "SELECT [q0].[Key] AS [value] FROM (SELECT [t1].[FirstName] AS [Key]'ROW_NUMBER() OVER (ORDER BY [t1].[Name] ASC) AS [Value] " +            "FROM [CookTable] AS [t1]) AS [q0] WHERE (([q0].[Value] > @1) AND ([q0].[Value] <= (@1 + @2))) ORDER BY [q0].[Value] ASC"'            new CommandParameter("@1"' 100)'            new CommandParameter("@2"' 5));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAfterSkip,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks orderby c.Name select c.FirstName).Skip (100).Take(5)'            "SELECT [q0].[Key] AS [value] FROM (SELECT [t1].[FirstName] AS [Key]'ROW_NUMBER() OVER (ORDER BY [t1].[Name] ASC) AS [Value] " +            "FROM [CookTable] AS [t1]) AS [q0] WHERE (([q0].[Value] > @1) AND ([q0].[Value] <= (@1 + @2))) ORDER BY [q0].[Value] ASC"'            new CommandParameter("@1"' 100)'            new CommandParameter("@2"' 5));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,TakeAfterSkip,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks orderby c.Name select c.FirstName).Skip (100).Take(5)'            "SELECT [q0].[Key] AS [value] FROM (SELECT [t1].[FirstName] AS [Key]'ROW_NUMBER() OVER (ORDER BY [t1].[Name] ASC) AS [Value] " +            "FROM [CookTable] AS [t1]) AS [q0] WHERE (([q0].[Value] > @1) AND ([q0].[Value] <= (@1 + @2))) ORDER BY [q0].[Value] ASC"'            new CommandParameter("@1"' 100)'            new CommandParameter("@2"' 5));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,SingleAfterSkip,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks orderby c.Name select c.FirstName).Skip (100).Single()'            "SELECT [q0].[Key] AS [value] FROM (SELECT [t1].[FirstName] AS [Key]'ROW_NUMBER() OVER (ORDER BY [t1].[Name] ASC) AS [Value] " +            "FROM [CookTable] AS [t1]) AS [q0] WHERE (([q0].[Value] > @1) AND ([q0].[Value] <= (@1 + 2))) ORDER BY [q0].[Value] ASC"'            new CommandParameter ("@1"' 100));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,SingleAfterSkip,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks orderby c.Name select c.FirstName).Skip (100).Single()'            "SELECT [q0].[Key] AS [value] FROM (SELECT [t1].[FirstName] AS [Key]'ROW_NUMBER() OVER (ORDER BY [t1].[Name] ASC) AS [Value] " +            "FROM [CookTable] AS [t1]) AS [q0] WHERE (([q0].[Value] > @1) AND ([q0].[Value] <= (@1 + 2))) ORDER BY [q0].[Value] ASC"'            new CommandParameter ("@1"' 100));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,FirstAfterSkip,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks orderby c.Name select c.FirstName).Skip (100).First()'            "SELECT [q0].[Key] AS [value] FROM (SELECT [t1].[FirstName] AS [Key]'ROW_NUMBER() OVER (ORDER BY [t1].[Name] ASC) AS [Value] " +            "FROM [CookTable] AS [t1]) AS [q0] WHERE (([q0].[Value] > @1) AND ([q0].[Value] <= (@1 + 1))) ORDER BY [q0].[Value] ASC"'            new CommandParameter ("@1"' 100));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,FirstAfterSkip,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks orderby c.Name select c.FirstName).Skip (100).First()'            "SELECT [q0].[Key] AS [value] FROM (SELECT [t1].[FirstName] AS [Key]'ROW_NUMBER() OVER (ORDER BY [t1].[Name] ASC) AS [Value] " +            "FROM [CookTable] AS [t1]) AS [q0] WHERE (([q0].[Value] > @1) AND ([q0].[Value] <= (@1 + 1))) ORDER BY [q0].[Value] ASC"'            new CommandParameter ("@1"' 100));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,AllAfterSkip,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks orderby c.Name select c.FirstName).Skip (100).All (name => name != null)'            "SELECT CONVERT(BIT' CASE WHEN NOT EXISTS(("            + "SELECT [q0].[Key] FROM ("            + "SELECT [t1].[FirstName] AS [Key]'ROW_NUMBER() OVER (ORDER BY [t1].[Name] ASC) AS [Value] FROM [CookTable] AS [t1]"            + ") AS [q0] WHERE (([q0].[Value] > @1) AND NOT ([q0].[Key] IS NOT NULL)))) THEN 1 ELSE 0 END) AS [value]"'            new CommandParameter ("@1"' 100));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,AllAfterSkip,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks orderby c.Name select c.FirstName).Skip (100).All (name => name != null)'            "SELECT CONVERT(BIT' CASE WHEN NOT EXISTS(("            + "SELECT [q0].[Key] FROM ("            + "SELECT [t1].[FirstName] AS [Key]'ROW_NUMBER() OVER (ORDER BY [t1].[Name] ASC) AS [Value] FROM [CookTable] AS [t1]"            + ") AS [q0] WHERE (([q0].[Value] > @1) AND NOT ([q0].[Key] IS NOT NULL)))) THEN 1 ELSE 0 END) AS [value]"'            new CommandParameter ("@1"' 100));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,SkipTakeSkip,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks orderby c.Name select c.FirstName).Skip (100).Take (10).Skip(100)'            "SELECT [q1].[Key] AS [value] FROM (SELECT [q0].[Key] AS [Key]'"+            "ROW_NUMBER() OVER (ORDER BY [q0].[Value] ASC) AS [Value] FROM (SELECT [t2].[FirstName] AS [Key]'"+            "ROW_NUMBER() OVER (ORDER BY [t2].[Name] ASC) AS [Value] FROM [CookTable] AS [t2]) AS [q0] "+            "WHERE (([q0].[Value] > @1) AND ([q0].[Value] <= (@1 + @2)))) AS [q1] WHERE ([q1].[Value] > @3) ORDER BY [q1].[Value] ASC"'            new CommandParameter ("@1"' 100)'            new CommandParameter ("@2"' 10)'            new CommandParameter ("@3"' 100));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,SkipTakeSkip,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks orderby c.Name select c.FirstName).Skip (100).Take (10).Skip(100)'            "SELECT [q1].[Key] AS [value] FROM (SELECT [q0].[Key] AS [Key]'"+            "ROW_NUMBER() OVER (ORDER BY [q0].[Value] ASC) AS [Value] FROM (SELECT [t2].[FirstName] AS [Key]'"+            "ROW_NUMBER() OVER (ORDER BY [t2].[Name] ASC) AS [Value] FROM [CookTable] AS [t2]) AS [q0] "+            "WHERE (([q0].[Value] > @1) AND ([q0].[Value] <= (@1 + @2)))) AS [q1] WHERE ([q1].[Value] > @3) ORDER BY [q1].[Value] ASC"'            new CommandParameter ("@1"' 100)'            new CommandParameter ("@2"' 10)'            new CommandParameter ("@3"' 100));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,SkipTakeSkip,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks orderby c.Name select c.FirstName).Skip (100).Take (10).Skip(100)'            "SELECT [q1].[Key] AS [value] FROM (SELECT [q0].[Key] AS [Key]'"+            "ROW_NUMBER() OVER (ORDER BY [q0].[Value] ASC) AS [Value] FROM (SELECT [t2].[FirstName] AS [Key]'"+            "ROW_NUMBER() OVER (ORDER BY [t2].[Name] ASC) AS [Value] FROM [CookTable] AS [t2]) AS [q0] "+            "WHERE (([q0].[Value] > @1) AND ([q0].[Value] <= (@1 + @2)))) AS [q1] WHERE ([q1].[Value] > @3) ORDER BY [q1].[Value] ASC"'            new CommandParameter ("@1"' 100)'            new CommandParameter ("@2"' 10)'            new CommandParameter ("@3"' 100));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,SkipTakeSkip,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks orderby c.Name select c.FirstName).Skip (100).Take (10).Skip(100)'            "SELECT [q1].[Key] AS [value] FROM (SELECT [q0].[Key] AS [Key]'"+            "ROW_NUMBER() OVER (ORDER BY [q0].[Value] ASC) AS [Value] FROM (SELECT [t2].[FirstName] AS [Key]'"+            "ROW_NUMBER() OVER (ORDER BY [t2].[Name] ASC) AS [Value] FROM [CookTable] AS [t2]) AS [q0] "+            "WHERE (([q0].[Value] > @1) AND ([q0].[Value] <= (@1 + @2)))) AS [q1] WHERE ([q1].[Value] > @3) ORDER BY [q1].[Value] ASC"'            new CommandParameter ("@1"' 100)'            new CommandParameter ("@2"' 10)'            new CommandParameter ("@3"' 100));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,SkipTakeSkip,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks orderby c.Name select c.FirstName).Skip (100).Take (10).Skip(100)'            "SELECT [q1].[Key] AS [value] FROM (SELECT [q0].[Key] AS [Key]'"+            "ROW_NUMBER() OVER (ORDER BY [q0].[Value] ASC) AS [Value] FROM (SELECT [t2].[FirstName] AS [Key]'"+            "ROW_NUMBER() OVER (ORDER BY [t2].[Name] ASC) AS [Value] FROM [CookTable] AS [t2]) AS [q0] "+            "WHERE (([q0].[Value] > @1) AND ([q0].[Value] <= (@1 + @2)))) AS [q1] WHERE ([q1].[Value] > @3) ORDER BY [q1].[Value] ASC"'            new CommandParameter ("@1"' 100)'            new CommandParameter ("@2"' 10)'            new CommandParameter ("@3"' 100));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,SkipTakeSkip,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks orderby c.Name select c.FirstName).Skip (100).Take (10).Skip(100)'            "SELECT [q1].[Key] AS [value] FROM (SELECT [q0].[Key] AS [Key]'"+            "ROW_NUMBER() OVER (ORDER BY [q0].[Value] ASC) AS [Value] FROM (SELECT [t2].[FirstName] AS [Key]'"+            "ROW_NUMBER() OVER (ORDER BY [t2].[Name] ASC) AS [Value] FROM [CookTable] AS [t2]) AS [q0] "+            "WHERE (([q0].[Value] > @1) AND ([q0].[Value] <= (@1 + @2)))) AS [q1] WHERE ([q1].[Value] > @3) ORDER BY [q1].[Value] ASC"'            new CommandParameter ("@1"' 100)'            new CommandParameter ("@2"' 10)'            new CommandParameter ("@3"' 100));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,SkipAfterSkip,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks orderby c.Name select c.FirstName).Skip (100).Skip (10)'            "SELECT [q1].[Key] AS [value] FROM (SELECT [q0].[Key] AS [Key]'"+            "ROW_NUMBER() OVER (ORDER BY [q0].[Value] ASC) AS [Value] FROM (SELECT [t2].[FirstName] AS [Key]'"+            "ROW_NUMBER() OVER (ORDER BY [t2].[Name] ASC) AS [Value] FROM [CookTable] AS [t2]) AS [q0] WHERE ([q0].[Value] > @1)) AS [q1] "+            "WHERE ([q1].[Value] > @2) ORDER BY [q1].[Value] ASC"'            new CommandParameter ("@1"' 100)'            new CommandParameter ("@2"' 10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,SkipAfterSkip,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks orderby c.Name select c.FirstName).Skip (100).Skip (10)'            "SELECT [q1].[Key] AS [value] FROM (SELECT [q0].[Key] AS [Key]'"+            "ROW_NUMBER() OVER (ORDER BY [q0].[Value] ASC) AS [Value] FROM (SELECT [t2].[FirstName] AS [Key]'"+            "ROW_NUMBER() OVER (ORDER BY [t2].[Name] ASC) AS [Value] FROM [CookTable] AS [t2]) AS [q0] WHERE ([q0].[Value] > @1)) AS [q1] "+            "WHERE ([q1].[Value] > @2) ORDER BY [q1].[Value] ASC"'            new CommandParameter ("@1"' 100)'            new CommandParameter ("@2"' 10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,SkipAfterSkip,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks orderby c.Name select c.FirstName).Skip (100).Skip (10)'            "SELECT [q1].[Key] AS [value] FROM (SELECT [q0].[Key] AS [Key]'"+            "ROW_NUMBER() OVER (ORDER BY [q0].[Value] ASC) AS [Value] FROM (SELECT [t2].[FirstName] AS [Key]'"+            "ROW_NUMBER() OVER (ORDER BY [t2].[Name] ASC) AS [Value] FROM [CookTable] AS [t2]) AS [q0] WHERE ([q0].[Value] > @1)) AS [q1] "+            "WHERE ([q1].[Value] > @2) ORDER BY [q1].[Value] ASC"'            new CommandParameter ("@1"' 100)'            new CommandParameter ("@2"' 10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,SkipAfterSkip,The following statement contains a magic number: CheckQuery (            () => (from c in Cooks orderby c.Name select c.FirstName).Skip (100).Skip (10)'            "SELECT [q1].[Key] AS [value] FROM (SELECT [q0].[Key] AS [Key]'"+            "ROW_NUMBER() OVER (ORDER BY [q0].[Value] ASC) AS [Value] FROM (SELECT [t2].[FirstName] AS [Key]'"+            "ROW_NUMBER() OVER (ORDER BY [t2].[Name] ASC) AS [Value] FROM [CookTable] AS [t2]) AS [q0] WHERE ([q0].[Value] > @1)) AS [q1] "+            "WHERE ([q1].[Value] > @2) ORDER BY [q1].[Value] ASC"'            new CommandParameter ("@1"' 100)'            new CommandParameter ("@2"' 10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,ResultOperatorAfterSetOperation_CausesSubQuery,The following statement contains a magic number: CheckQuery (            () => Cooks.Select (c => c.ID).Union (Kitchens.Select (k => k.ID)).All(i => i > 10)'            "SELECT CONVERT(BIT' CASE WHEN NOT EXISTS(("            + "SELECT [q0].[value] FROM ("            + "SELECT [t1].[ID] AS [value] FROM [CookTable] AS [t1] "            + "UNION (SELECT [t2].[ID] AS [value] FROM [KitchenTable] AS [t2])"            + ") AS [q0] "             + "WHERE NOT ([q0].[value] > @1))) THEN 1 ELSE 0 END) AS [value]"'            new CommandParameter("@1"' 10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,ResultOperatorAfterSetOperation_CausesSubQuery,The following statement contains a magic number: CheckQuery (            () => Cooks.Select (c => c.ID).Union (Kitchens.Select (k => k.ID)).All(i => i > 10)'            "SELECT CONVERT(BIT' CASE WHEN NOT EXISTS(("            + "SELECT [q0].[value] FROM ("            + "SELECT [t1].[ID] AS [value] FROM [CookTable] AS [t1] "            + "UNION (SELECT [t2].[ID] AS [value] FROM [KitchenTable] AS [t2])"            + ") AS [q0] "             + "WHERE NOT ([q0].[value] > @1))) THEN 1 ELSE 0 END) AS [value]"'            new CommandParameter("@1"' 10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,ResultOperatorAfterSetOperation_CausesSubQuery,The following statement contains a magic number: CheckQuery (            () => Cooks.Select (c => c.ID).Union (Kitchens.Select (k => k.ID)).Any(i => i > 10)'            "SELECT CONVERT(BIT' CASE WHEN EXISTS(("            + "SELECT [q0].[value] FROM ("            + "SELECT [t1].[ID] AS [value] "            + "FROM [CookTable] AS [t1] "            + "UNION (SELECT [t2].[ID] AS [value] FROM [KitchenTable] AS [t2])"            + ") AS [q0] "            + "WHERE ([q0].[value] > @1)"            + ")) THEN 1 ELSE 0 END) AS [value]"'            new CommandParameter("@1"' 10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,ResultOperatorAfterSetOperation_CausesSubQuery,The following statement contains a magic number: CheckQuery (            () => Cooks.Select (c => c.ID).Union (Kitchens.Select (k => k.ID)).Any(i => i > 10)'            "SELECT CONVERT(BIT' CASE WHEN EXISTS(("            + "SELECT [q0].[value] FROM ("            + "SELECT [t1].[ID] AS [value] "            + "FROM [CookTable] AS [t1] "            + "UNION (SELECT [t2].[ID] AS [value] FROM [KitchenTable] AS [t2])"            + ") AS [q0] "            + "WHERE ([q0].[value] > @1)"            + ")) THEN 1 ELSE 0 END) AS [value]"'            new CommandParameter("@1"' 10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,ResultOperatorAfterSetOperation_CausesSubQuery,The following statement contains a magic number: CheckQuery (            () => Cooks.Select (c => c.ID).Union (Kitchens.Select (k => k.ID)).Contains(10)'            "SELECT CONVERT(BIT' CASE WHEN @1 IN ("            + "SELECT [t0].[ID] FROM [CookTable] AS [t0] "            + "UNION (SELECT [t1].[ID] AS [value] FROM [KitchenTable] AS [t1])"            + ") THEN 1 ELSE 0 END) AS [value]"'            new CommandParameter("@1"' 10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,ResultOperatorAfterSetOperation_CausesSubQuery,The following statement contains a magic number: CheckQuery (            () => Cooks.Select (c => c.ID).Union (Kitchens.Select (k => k.ID)).Contains(10)'            "SELECT CONVERT(BIT' CASE WHEN @1 IN ("            + "SELECT [t0].[ID] FROM [CookTable] AS [t0] "            + "UNION (SELECT [t1].[ID] AS [value] FROM [KitchenTable] AS [t1])"            + ") THEN 1 ELSE 0 END) AS [value]"'            new CommandParameter("@1"' 10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,ResultOperatorAfterSetOperation_CausesSubQuery,The following statement contains a magic number: CheckQuery (            () => Cooks.Select (c => c.ID).Union (Kitchens.Select (k => k.ID)).GroupBy (i => i % 3).Select (g => new { g.Key' Count = g.Count() })'            "SELECT [q1].[key] AS [Key]'[q1].[a0] AS [Count] FROM (SELECT ([q0].[value] % @1) AS [key]' COUNT(*) AS [a0] "            + "FROM ("            + "SELECT [t2].[ID] AS [value] FROM [CookTable] AS [t2] "            + "UNION (SELECT [t3].[ID] AS [value] FROM [KitchenTable] AS [t3])"            + ") AS [q0] GROUP BY ([q0].[value] % @1)) AS [q1]"'            new CommandParameter("@1"' 3));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,ResultOperatorAfterSetOperation_CausesSubQuery,The following statement contains a magic number: CheckQuery (            () => Cooks.Select (c => c.ID).Union (Kitchens.Select (k => k.ID)).GroupBy (i => i % 3).Select (g => new { g.Key' Count = g.Count() })'            "SELECT [q1].[key] AS [Key]'[q1].[a0] AS [Count] FROM (SELECT ([q0].[value] % @1) AS [key]' COUNT(*) AS [a0] "            + "FROM ("            + "SELECT [t2].[ID] AS [value] FROM [CookTable] AS [t2] "            + "UNION (SELECT [t3].[ID] AS [value] FROM [KitchenTable] AS [t3])"            + ") AS [q0] GROUP BY ([q0].[value] % @1)) AS [q1]"'            new CommandParameter("@1"' 3));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,ResultOperatorAfterSetOperation_CausesSubQuery,The following statement contains a magic number: CheckQuery (            () => Cooks.Select (c => c.ID).Union (Kitchens.Select (k => k.ID)).Skip(10)'            "SELECT [q1].[Key] AS [value] "            + "FROM ("            + "SELECT [q0].[value] AS [Key]'ROW_NUMBER() OVER (ORDER BY (SELECT @1) ASC) AS [Value] "            + "FROM ("            + "SELECT [t2].[ID] AS [value] FROM [CookTable] AS [t2] "            + "UNION (SELECT [t3].[ID] AS [value] FROM [KitchenTable] AS [t3])"            + ") AS [q0]) AS [q1] WHERE ([q1].[Value] > @2) ORDER BY [q1].[Value] ASC"'            new CommandParameter("@1"' 1)'            new CommandParameter("@2"' 10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,ResultOperatorAfterSetOperation_CausesSubQuery,The following statement contains a magic number: CheckQuery (            () => Cooks.Select (c => c.ID).Union (Kitchens.Select (k => k.ID)).Skip(10)'            "SELECT [q1].[Key] AS [value] "            + "FROM ("            + "SELECT [q0].[value] AS [Key]'ROW_NUMBER() OVER (ORDER BY (SELECT @1) ASC) AS [Value] "            + "FROM ("            + "SELECT [t2].[ID] AS [value] FROM [CookTable] AS [t2] "            + "UNION (SELECT [t3].[ID] AS [value] FROM [KitchenTable] AS [t3])"            + ") AS [q0]) AS [q1] WHERE ([q1].[Value] > @2) ORDER BY [q1].[Value] ASC"'            new CommandParameter("@1"' 1)'            new CommandParameter("@2"' 10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,ResultOperatorCombinationsSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\ResultOperatorCombinationsSqlBackendIntegrationTest.cs,ResultOperatorAfterSetOperation_CausesSubQuery,The following statement contains a magic number: CheckQuery (            () => Cooks.Select (c => c.ID).Union (Kitchens.Select (k => k.ID)).Take(3)'            "SELECT TOP (3) [q0].[value] AS [value] FROM ("            + "SELECT [t1].[ID] AS [value] FROM [CookTable] AS [t1] "            + "UNION (SELECT [t2].[ID] AS [value] FROM [KitchenTable] AS [t2])"            + ") AS [q0]");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,DefaultIfEmptyResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\DefaultIfEmptyResultOperatorSqlBackendIntegrationTest.cs,DefaultIfEmpty,The following statement contains a magic number: CheckQuery (            Cooks.DefaultIfEmpty ()'            "SELECT [q0].[ID]'[q0].[FirstName]'[q0].[Name]'[q0].[IsStarredCook]'[q0].[IsFullTimeCook]'[q0].[SubstitutedID]'[q0].[KitchenID]'"            + "[q0].[KnifeID]'[q0].[KnifeClassID]'[q0].[CookRating] "             + "FROM (SELECT NULL AS [Empty]) AS [Empty] OUTER APPLY (SELECT [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'"            + "[t1].[IsFullTimeCook]'[t1].[SubstitutedID]'[t1].[KitchenID]'"            + "[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] FROM [CookTable] AS [t1]) AS [q0]"'             row => (object) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,DefaultIfEmptyResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\DefaultIfEmptyResultOperatorSqlBackendIntegrationTest.cs,DefaultIfEmpty,The following statement contains a magic number: CheckQuery (            Cooks.DefaultIfEmpty ()'            "SELECT [q0].[ID]'[q0].[FirstName]'[q0].[Name]'[q0].[IsStarredCook]'[q0].[IsFullTimeCook]'[q0].[SubstitutedID]'[q0].[KitchenID]'"            + "[q0].[KnifeID]'[q0].[KnifeClassID]'[q0].[CookRating] "             + "FROM (SELECT NULL AS [Empty]) AS [Empty] OUTER APPLY (SELECT [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'"            + "[t1].[IsFullTimeCook]'[t1].[SubstitutedID]'[t1].[KitchenID]'"            + "[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] FROM [CookTable] AS [t1]) AS [q0]"'             row => (object) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,DefaultIfEmptyResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\DefaultIfEmptyResultOperatorSqlBackendIntegrationTest.cs,DefaultIfEmpty,The following statement contains a magic number: CheckQuery (            Cooks.DefaultIfEmpty ()'            "SELECT [q0].[ID]'[q0].[FirstName]'[q0].[Name]'[q0].[IsStarredCook]'[q0].[IsFullTimeCook]'[q0].[SubstitutedID]'[q0].[KitchenID]'"            + "[q0].[KnifeID]'[q0].[KnifeClassID]'[q0].[CookRating] "             + "FROM (SELECT NULL AS [Empty]) AS [Empty] OUTER APPLY (SELECT [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'"            + "[t1].[IsFullTimeCook]'[t1].[SubstitutedID]'[t1].[KitchenID]'"            + "[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] FROM [CookTable] AS [t1]) AS [q0]"'             row => (object) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,DefaultIfEmptyResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\DefaultIfEmptyResultOperatorSqlBackendIntegrationTest.cs,DefaultIfEmpty,The following statement contains a magic number: CheckQuery (            Cooks.DefaultIfEmpty ()'            "SELECT [q0].[ID]'[q0].[FirstName]'[q0].[Name]'[q0].[IsStarredCook]'[q0].[IsFullTimeCook]'[q0].[SubstitutedID]'[q0].[KitchenID]'"            + "[q0].[KnifeID]'[q0].[KnifeClassID]'[q0].[CookRating] "             + "FROM (SELECT NULL AS [Empty]) AS [Empty] OUTER APPLY (SELECT [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'"            + "[t1].[IsFullTimeCook]'[t1].[SubstitutedID]'[t1].[KitchenID]'"            + "[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] FROM [CookTable] AS [t1]) AS [q0]"'             row => (object) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,DefaultIfEmptyResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\DefaultIfEmptyResultOperatorSqlBackendIntegrationTest.cs,DefaultIfEmpty,The following statement contains a magic number: CheckQuery (            Cooks.DefaultIfEmpty ()'            "SELECT [q0].[ID]'[q0].[FirstName]'[q0].[Name]'[q0].[IsStarredCook]'[q0].[IsFullTimeCook]'[q0].[SubstitutedID]'[q0].[KitchenID]'"            + "[q0].[KnifeID]'[q0].[KnifeClassID]'[q0].[CookRating] "             + "FROM (SELECT NULL AS [Empty]) AS [Empty] OUTER APPLY (SELECT [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'"            + "[t1].[IsFullTimeCook]'[t1].[SubstitutedID]'[t1].[KitchenID]'"            + "[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] FROM [CookTable] AS [t1]) AS [q0]"'             row => (object) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,DefaultIfEmptyResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\DefaultIfEmptyResultOperatorSqlBackendIntegrationTest.cs,DefaultIfEmpty,The following statement contains a magic number: CheckQuery (            Cooks.DefaultIfEmpty ()'            "SELECT [q0].[ID]'[q0].[FirstName]'[q0].[Name]'[q0].[IsStarredCook]'[q0].[IsFullTimeCook]'[q0].[SubstitutedID]'[q0].[KitchenID]'"            + "[q0].[KnifeID]'[q0].[KnifeClassID]'[q0].[CookRating] "             + "FROM (SELECT NULL AS [Empty]) AS [Empty] OUTER APPLY (SELECT [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'"            + "[t1].[IsFullTimeCook]'[t1].[SubstitutedID]'[t1].[KitchenID]'"            + "[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] FROM [CookTable] AS [t1]) AS [q0]"'             row => (object) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,DefaultIfEmptyResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\DefaultIfEmptyResultOperatorSqlBackendIntegrationTest.cs,DefaultIfEmpty,The following statement contains a magic number: CheckQuery (            Cooks.DefaultIfEmpty ()'            "SELECT [q0].[ID]'[q0].[FirstName]'[q0].[Name]'[q0].[IsStarredCook]'[q0].[IsFullTimeCook]'[q0].[SubstitutedID]'[q0].[KitchenID]'"            + "[q0].[KnifeID]'[q0].[KnifeClassID]'[q0].[CookRating] "             + "FROM (SELECT NULL AS [Empty]) AS [Empty] OUTER APPLY (SELECT [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'"            + "[t1].[IsFullTimeCook]'[t1].[SubstitutedID]'[t1].[KitchenID]'"            + "[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] FROM [CookTable] AS [t1]) AS [q0]"'             row => (object) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,DefaultIfEmptyResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\DefaultIfEmptyResultOperatorSqlBackendIntegrationTest.cs,DefaultIfEmpty,The following statement contains a magic number: CheckQuery (            Cooks.DefaultIfEmpty ()'            "SELECT [q0].[ID]'[q0].[FirstName]'[q0].[Name]'[q0].[IsStarredCook]'[q0].[IsFullTimeCook]'[q0].[SubstitutedID]'[q0].[KitchenID]'"            + "[q0].[KnifeID]'[q0].[KnifeClassID]'[q0].[CookRating] "             + "FROM (SELECT NULL AS [Empty]) AS [Empty] OUTER APPLY (SELECT [t1].[ID]'[t1].[FirstName]'[t1].[Name]'[t1].[IsStarredCook]'"            + "[t1].[IsFullTimeCook]'[t1].[SubstitutedID]'[t1].[KitchenID]'"            + "[t1].[KnifeID]'[t1].[KnifeClassID]'[t1].[CookRating] FROM [CookTable] AS [t1]) AS [q0]"'             row => (object) row.GetEntity<Cook> (                new ColumnID ("ID"' 0)'                new ColumnID ("FirstName"' 1)'                new ColumnID ("Name"' 2)'                new ColumnID ("IsStarredCook"' 3)'                new ColumnID ("IsFullTimeCook"' 4)'                new ColumnID ("SubstitutedID"' 5)'                new ColumnID ("KitchenID"' 6)'                new ColumnID ("KnifeID"' 7)'                new ColumnID ("KnifeClassID"' 8)'                new ColumnID ("CookRating"' 9)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,DefaultIfEmptyResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\DefaultIfEmptyResultOperatorSqlBackendIntegrationTest.cs,DefaultIfEmpty_InSubquery,The following statement contains a magic number: CheckQuery (             from s in Cooks where (from s2 in Cooks select s2.ID).DefaultIfEmpty().Max() > 5 select s.Name'            "SELECT [t1].[Name] AS [value] FROM [CookTable] AS [t1] WHERE ((SELECT MAX([q0].[value]) AS [value] FROM " +            "(SELECT NULL AS [Empty]) AS [Empty] OUTER APPLY (SELECT [t2].[ID] AS [value] FROM [CookTable] AS [t2]) AS [q0]) > @1)"'            new CommandParameter ("@1"' 5));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration.IntegrationTests.ResultOperators,DefaultIfEmptyResultOperatorSqlBackendIntegrationTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\IntegrationTests\ResultOperators\DefaultIfEmptyResultOperatorSqlBackendIntegrationTest.cs,DefaultIfEmpty_InSubquery,The following statement contains a magic number: CheckQuery (             from s in Cooks where (from s2 in Cooks select s2.ID).DefaultIfEmpty().Max() > 5 select s.Name'            "SELECT [t1].[Name] AS [value] FROM [CookTable] AS [t1] WHERE ((SELECT MAX([q0].[value]) AS [value] FROM " +            "(SELECT NULL AS [Empty]) AS [Empty] OUTER APPLY (SELECT [t2].[ID] AS [value] FROM [CookTable] AS [t2]) AS [q0]) > @1)"'            new CommandParameter ("@1"' 5));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlCompositeCustomTextGeneratorExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlCompositeCustomTextGeneratorExpressionTest.cs,VisitChildren_ChangeExpression,The following statement contains a magic number: var expressions = new ReadOnlyCollection<Expression> (new List<Expression> { Expression.Constant (1)' Expression.Constant (2) });
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitSqlEntityExpression,The following statement contains a magic number: Assert.That (_visitor.ColumnPosition' Is.EqualTo (3));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitNewExpression_WithoutMembers,The following statement contains a magic number: Assert.That (_visitor.ColumnPosition' Is.EqualTo (4));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitNewExpression_NoSetOperations_ConstantsAreMovedToProjection,The following statement contains a magic number: Assert.That (visitor.ColumnPosition' Is.EqualTo (4));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitNewExpression_WithSetOperations_ConstantsAreNotMovedToProjection,The following statement contains a magic number: Assert.That (visitor.ColumnPosition' Is.EqualTo (4));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,VisitMethodCallExpression_NoSetOperations,The following statement contains a magic number: Assert.That (visitor.ColumnPosition' Is.EqualTo (2));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingOuterSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingOuterSelectExpressionVisitorTest.cs,GetExpectedProjectionForEntityExpression,The following statement contains a magic number: return Expression.Call (            expectedRowParameter'            typeof (IDatabaseResultRow).GetMethod ("GetEntity").MakeGenericMethod (typeof (Cook))'            Expression.Constant (new[] {                 new ColumnID ("test_ID"' columnPositionStart)'                 new ColumnID ("test_Name"' columnPositionStart + 1)'                 new ColumnID ("test_FirstName"' columnPositionStart + 2) }));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingSelectExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingSelectExpressionVisitorTest.cs,VisitSqlGroupingSelectExpression_WithAggregationExpressions_AndNames,The following statement contains a magic number: Assert.That (_commandBuilder.GetCommandParameters ()[2].Value' Is.EqualTo ("aggregation2"));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,BinaryExpressionTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\BinaryExpressionTextGeneratorTest.cs,SetUp,The following statement contains a magic number: _rightIntegerExpression = Expression.Constant (2);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,BinaryExpressionTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\BinaryExpressionTextGeneratorTest.cs,SetUp,The following statement contains a magic number: _rightDoubleExpression = Expression.Constant (2D);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,BinaryExpressionTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\BinaryExpressionTextGeneratorTest.cs,NotSupportedNodeType,The following statement contains a magic number: var binaryExpression = Expression.ArrayIndex (Expression.Constant (new[] { 1' 2' 3 })' Expression.Constant (10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,BinaryExpressionTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\BinaryExpressionTextGeneratorTest.cs,NotSupportedNodeType,The following statement contains a magic number: var binaryExpression = Expression.ArrayIndex (Expression.Constant (new[] { 1' 2' 3 })' Expression.Constant (10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,BinaryExpressionTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\BinaryExpressionTextGeneratorTest.cs,NotSupportedNodeType,The following statement contains a magic number: var binaryExpression = Expression.ArrayIndex (Expression.Constant (new[] { 1' 2' 3 })' Expression.Constant (10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,DefaultSqlGenerationStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\DefaultSqlGenerationStageTest.cs,GenerateTextForTopExpression,The following statement contains a magic number: var sqlStatement =            new SqlStatementBuilder            { DataInfo = new TestStreamedValueInfo (typeof (int))' SelectProjection = _entityExpression' TopExpression = Expression.Constant (5) }.                GetSqlStatement();
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,DefaultSqlGenerationStageTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\DefaultSqlGenerationStageTest.cs,GenerateTextForOuterSqlStatement,The following statement contains a magic number: Assert.That (((ColumnID[]) ((ConstantExpression) methodCallExpression.Arguments[0]).Value)[2].ColumnName' Is.EqualTo ("City"));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingExpressionVisitorTest.cs,SetUp,The following statement contains a magic number: _rightIntegerExpression = Expression.Constant (2);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingExpressionVisitorTest.cs,VisitLiteralExpression,The following statement contains a magic number: var expression = new SqlLiteralExpression (5);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingExpressionVisitorTest.cs,VisitUnaryExpression_UnaryNot_NullableBool,The following statement contains a magic number: var unaryNotExpression = Expression.Not (Expression.Equal (Expression.Constant (4' typeof (int?))' Expression.Constant (5' typeof (int?))' true' null));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingExpressionVisitorTest.cs,VisitUnaryExpression_UnaryNot_NullableBool,The following statement contains a magic number: var unaryNotExpression = Expression.Not (Expression.Equal (Expression.Constant (4' typeof (int?))' Expression.Constant (5' typeof (int?))' true' null));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingExpressionVisitorTest.cs,VisitSqlLikeExpression,The following statement contains a magic number: var sqlInExpression = new SqlLikeExpression (new SqlLiteralExpression (1)' new SqlLiteralExpression (2)' new SqlLiteralExpression (@"\"));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingExpressionVisitorTest.cs,VisitSqlLiteralExpression_Int,The following statement contains a magic number: var expression = new SqlLiteralExpression (1000000000);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingExpressionVisitorTest.cs,VisitSqlLiteralExpression_Double,The following statement contains a magic number: var expression = new SqlLiteralExpression (1.1);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingExpressionVisitorTest.cs,VisitSqlLiteralExpression_Double_CultureAgnostic,The following statement contains a magic number: var expression = new SqlLiteralExpression (1.1);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingExpressionVisitorTest.cs,VisitSqlCollectionExpression,The following statement contains a magic number: var items = new Expression[] { Expression.Constant (7)' new SqlLiteralExpression ("Hello")' new SqlLiteralExpression (12) };
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingExpressionVisitorTest.cs,VisitSqlCollectionExpression,The following statement contains a magic number: var items = new Expression[] { Expression.Constant (7)' new SqlLiteralExpression ("Hello")' new SqlLiteralExpression (12) };
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlGeneratingExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlGeneratingExpressionVisitorTest.cs,VisitSqlCollectionExpression,The following statement contains a magic number: Assert.That (_commandBuilder.GetCommandParameters()' Is.EqualTo (new[] { new CommandParameter ("@1"' 7) }));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlStatementTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlStatementTextGeneratorTest.cs,BuildSelectPart_WithDistinctAndTopExpression,The following statement contains a magic number: var sqlStatement = SqlStatementModelObjectMother.CreateMinimalSqlStatement (new SqlStatementBuilder { TopExpression = Expression.Constant (5)' IsDistinctQuery = true });
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlGeneration,SqlStatementTextGeneratorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlGeneration\SqlStatementTextGeneratorTest.cs,BuildOrderBy_WithMultipleOrderByClauses,The following statement contains a magic number: _stageMock.Expect (mock => mock.GenerateTextForOrdering (_commandBuilder' sqlStatement.Orderings[2]))            .WhenCalled (mi => ((SqlCommandBuilder) mi.Arguments[0]).Append ("[t].[City] DESC"));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ConcatMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ConcatMethodCallTransformerTest.cs,Transform_ConstantArray,The following statement contains a magic number: var expectedExpression =            Expression.Add (                Expression.Add (                    Expression.Constant (elements[0])'                    Expression.Constant (elements[1])'                    _twoStringConcatMethod)'                Expression.Constant (elements[2])'                _twoStringConcatMethod);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,SetUp,The following statement contains a magic number: _dateTimeInstance = Expression.Constant (new DateTime (2012' 12' 17));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,SetUp,The following statement contains a magic number: _dateTimeInstance = Expression.Constant (new DateTime (2012' 12' 17));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,SetUp,The following statement contains a magic number: _dateTimeInstance = Expression.Constant (new DateTime (2012' 12' 17));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,SupportedMethods,The following statement contains a magic number: Assert.That (DateTimeAddMethodCallTransformer.SupportedMethods' Has.Member (MemberInfoFromExpressionUtility.GetMethod (() => DateTime.Now.AddDays (1.5))));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,SupportedMethods,The following statement contains a magic number: Assert.That (DateTimeAddMethodCallTransformer.SupportedMethods' Has.Member (MemberInfoFromExpressionUtility.GetMethod (() => DateTime.Now.AddHours (1.5))));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,SupportedMethods,The following statement contains a magic number: Assert.That (DateTimeAddMethodCallTransformer.SupportedMethods' Has.Member (MemberInfoFromExpressionUtility.GetMethod (() => DateTime.Now.AddMilliseconds (1.5))));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,SupportedMethods,The following statement contains a magic number: Assert.That (DateTimeAddMethodCallTransformer.SupportedMethods' Has.Member (MemberInfoFromExpressionUtility.GetMethod (() => DateTime.Now.AddMinutes (1.5))));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,SupportedMethods,The following statement contains a magic number: Assert.That (DateTimeAddMethodCallTransformer.SupportedMethods' Has.Member (MemberInfoFromExpressionUtility.GetMethod (() => DateTime.Now.AddMonths (15))));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,SupportedMethods,The following statement contains a magic number: Assert.That (DateTimeAddMethodCallTransformer.SupportedMethods' Has.Member (MemberInfoFromExpressionUtility.GetMethod (() => DateTime.Now.AddSeconds (1.5))));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,SupportedMethods,The following statement contains a magic number: Assert.That (DateTimeAddMethodCallTransformer.SupportedMethods' Has.Member (MemberInfoFromExpressionUtility.GetMethod (() => DateTime.Now.AddTicks (15))));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,SupportedMethods,The following statement contains a magic number: Assert.That (DateTimeAddMethodCallTransformer.SupportedMethods' Has.Member (MemberInfoFromExpressionUtility.GetMethod (() => DateTime.Now.AddYears (15))));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_Add_TimeSpan,The following statement contains a magic number: var value = Expression.Constant (new TimeSpan (123456789L));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_Add_TimeSpan,The following statement contains a magic number: var expectedResult = new SqlFunctionExpression (            typeof (DateTime)'            "DATEADD"'            new SqlCustomTextExpression ("millisecond"' typeof (string))'            Expression.Modulo (                Expression.Divide (Expression.Constant (123456789L)' new SqlLiteralExpression (10000L))' new SqlLiteralExpression (86400000L))'            new SqlFunctionExpression (                typeof (DateTime)'                "DATEADD"'                new SqlCustomTextExpression ("day"' typeof (string))'                Expression.Divide (                    Expression.Divide (Expression.Constant (123456789L)' new SqlLiteralExpression (10000L))' new SqlLiteralExpression (86400000L))'                _dateTimeInstance));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_Add_TimeSpan,The following statement contains a magic number: var expectedResult = new SqlFunctionExpression (            typeof (DateTime)'            "DATEADD"'            new SqlCustomTextExpression ("millisecond"' typeof (string))'            Expression.Modulo (                Expression.Divide (Expression.Constant (123456789L)' new SqlLiteralExpression (10000L))' new SqlLiteralExpression (86400000L))'            new SqlFunctionExpression (                typeof (DateTime)'                "DATEADD"'                new SqlCustomTextExpression ("day"' typeof (string))'                Expression.Divide (                    Expression.Divide (Expression.Constant (123456789L)' new SqlLiteralExpression (10000L))' new SqlLiteralExpression (86400000L))'                _dateTimeInstance));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_Add_TimeSpan,The following statement contains a magic number: var expectedResult = new SqlFunctionExpression (            typeof (DateTime)'            "DATEADD"'            new SqlCustomTextExpression ("millisecond"' typeof (string))'            Expression.Modulo (                Expression.Divide (Expression.Constant (123456789L)' new SqlLiteralExpression (10000L))' new SqlLiteralExpression (86400000L))'            new SqlFunctionExpression (                typeof (DateTime)'                "DATEADD"'                new SqlCustomTextExpression ("day"' typeof (string))'                Expression.Divide (                    Expression.Divide (Expression.Constant (123456789L)' new SqlLiteralExpression (10000L))' new SqlLiteralExpression (86400000L))'                _dateTimeInstance));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_Add_TimeSpan,The following statement contains a magic number: var expectedResult = new SqlFunctionExpression (            typeof (DateTime)'            "DATEADD"'            new SqlCustomTextExpression ("millisecond"' typeof (string))'            Expression.Modulo (                Expression.Divide (Expression.Constant (123456789L)' new SqlLiteralExpression (10000L))' new SqlLiteralExpression (86400000L))'            new SqlFunctionExpression (                typeof (DateTime)'                "DATEADD"'                new SqlCustomTextExpression ("day"' typeof (string))'                Expression.Divide (                    Expression.Divide (Expression.Constant (123456789L)' new SqlLiteralExpression (10000L))' new SqlLiteralExpression (86400000L))'                _dateTimeInstance));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_Add_TimeSpan,The following statement contains a magic number: var expectedResult = new SqlFunctionExpression (            typeof (DateTime)'            "DATEADD"'            new SqlCustomTextExpression ("millisecond"' typeof (string))'            Expression.Modulo (                Expression.Divide (Expression.Constant (123456789L)' new SqlLiteralExpression (10000L))' new SqlLiteralExpression (86400000L))'            new SqlFunctionExpression (                typeof (DateTime)'                "DATEADD"'                new SqlCustomTextExpression ("day"' typeof (string))'                Expression.Divide (                    Expression.Divide (Expression.Constant (123456789L)' new SqlLiteralExpression (10000L))' new SqlLiteralExpression (86400000L))'                _dateTimeInstance));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_Add_TimeSpan,The following statement contains a magic number: var expectedResult = new SqlFunctionExpression (            typeof (DateTime)'            "DATEADD"'            new SqlCustomTextExpression ("millisecond"' typeof (string))'            Expression.Modulo (                Expression.Divide (Expression.Constant (123456789L)' new SqlLiteralExpression (10000L))' new SqlLiteralExpression (86400000L))'            new SqlFunctionExpression (                typeof (DateTime)'                "DATEADD"'                new SqlCustomTextExpression ("day"' typeof (string))'                Expression.Divide (                    Expression.Divide (Expression.Constant (123456789L)' new SqlLiteralExpression (10000L))' new SqlLiteralExpression (86400000L))'                _dateTimeInstance));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_AddDays,The following statement contains a magic number: var expectedResult = new SqlFunctionExpression (            typeof (DateTime)'            "DATEADD"'            new SqlCustomTextExpression ("millisecond"' typeof (string))'            Expression.Modulo (                new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (86400000.0)))'                new SqlLiteralExpression (86400000L))'            new SqlFunctionExpression                (                typeof (DateTime)'                "DATEADD"'                new SqlCustomTextExpression ("day"' typeof (string))'                Expression.Divide (                    new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (86400000.0)))'                    new SqlLiteralExpression (86400000L))'                _dateTimeInstance));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_AddDays,The following statement contains a magic number: var expectedResult = new SqlFunctionExpression (            typeof (DateTime)'            "DATEADD"'            new SqlCustomTextExpression ("millisecond"' typeof (string))'            Expression.Modulo (                new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (86400000.0)))'                new SqlLiteralExpression (86400000L))'            new SqlFunctionExpression                (                typeof (DateTime)'                "DATEADD"'                new SqlCustomTextExpression ("day"' typeof (string))'                Expression.Divide (                    new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (86400000.0)))'                    new SqlLiteralExpression (86400000L))'                _dateTimeInstance));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_AddDays,The following statement contains a magic number: var expectedResult = new SqlFunctionExpression (            typeof (DateTime)'            "DATEADD"'            new SqlCustomTextExpression ("millisecond"' typeof (string))'            Expression.Modulo (                new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (86400000.0)))'                new SqlLiteralExpression (86400000L))'            new SqlFunctionExpression                (                typeof (DateTime)'                "DATEADD"'                new SqlCustomTextExpression ("day"' typeof (string))'                Expression.Divide (                    new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (86400000.0)))'                    new SqlLiteralExpression (86400000L))'                _dateTimeInstance));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_AddDays,The following statement contains a magic number: var expectedResult = new SqlFunctionExpression (            typeof (DateTime)'            "DATEADD"'            new SqlCustomTextExpression ("millisecond"' typeof (string))'            Expression.Modulo (                new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (86400000.0)))'                new SqlLiteralExpression (86400000L))'            new SqlFunctionExpression                (                typeof (DateTime)'                "DATEADD"'                new SqlCustomTextExpression ("day"' typeof (string))'                Expression.Divide (                    new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (86400000.0)))'                    new SqlLiteralExpression (86400000L))'                _dateTimeInstance));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_AddHours,The following statement contains a magic number: var expectedResult = new SqlFunctionExpression (            typeof (DateTime)'            "DATEADD"'            new SqlCustomTextExpression ("millisecond"' typeof (string))'            Expression.Modulo (                new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (3600000.0)))'                new SqlLiteralExpression (86400000L))'            new SqlFunctionExpression                (                typeof (DateTime)'                "DATEADD"'                new SqlCustomTextExpression ("day"' typeof (string))'                Expression.Divide (                    new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (3600000.0)))'                    new SqlLiteralExpression (86400000L))'                _dateTimeInstance));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_AddHours,The following statement contains a magic number: var expectedResult = new SqlFunctionExpression (            typeof (DateTime)'            "DATEADD"'            new SqlCustomTextExpression ("millisecond"' typeof (string))'            Expression.Modulo (                new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (3600000.0)))'                new SqlLiteralExpression (86400000L))'            new SqlFunctionExpression                (                typeof (DateTime)'                "DATEADD"'                new SqlCustomTextExpression ("day"' typeof (string))'                Expression.Divide (                    new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (3600000.0)))'                    new SqlLiteralExpression (86400000L))'                _dateTimeInstance));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_AddHours,The following statement contains a magic number: var expectedResult = new SqlFunctionExpression (            typeof (DateTime)'            "DATEADD"'            new SqlCustomTextExpression ("millisecond"' typeof (string))'            Expression.Modulo (                new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (3600000.0)))'                new SqlLiteralExpression (86400000L))'            new SqlFunctionExpression                (                typeof (DateTime)'                "DATEADD"'                new SqlCustomTextExpression ("day"' typeof (string))'                Expression.Divide (                    new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (3600000.0)))'                    new SqlLiteralExpression (86400000L))'                _dateTimeInstance));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_AddHours,The following statement contains a magic number: var expectedResult = new SqlFunctionExpression (            typeof (DateTime)'            "DATEADD"'            new SqlCustomTextExpression ("millisecond"' typeof (string))'            Expression.Modulo (                new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (3600000.0)))'                new SqlLiteralExpression (86400000L))'            new SqlFunctionExpression                (                typeof (DateTime)'                "DATEADD"'                new SqlCustomTextExpression ("day"' typeof (string))'                Expression.Divide (                    new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (3600000.0)))'                    new SqlLiteralExpression (86400000L))'                _dateTimeInstance));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_AddMilliseconds,The following statement contains a magic number: var expectedResult = new SqlFunctionExpression (            typeof (DateTime)'            "DATEADD"'            new SqlCustomTextExpression ("millisecond"' typeof (string))'            Expression.Modulo (                new SqlConvertExpression (typeof (long)' value)'                new SqlLiteralExpression (86400000L))'            new SqlFunctionExpression (                typeof (DateTime)'                "DATEADD"'                new SqlCustomTextExpression ("day"' typeof (string))'                Expression.Divide (                    new SqlConvertExpression (typeof (long)' value)'                    new SqlLiteralExpression (86400000L))'                _dateTimeInstance));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_AddMilliseconds,The following statement contains a magic number: var expectedResult = new SqlFunctionExpression (            typeof (DateTime)'            "DATEADD"'            new SqlCustomTextExpression ("millisecond"' typeof (string))'            Expression.Modulo (                new SqlConvertExpression (typeof (long)' value)'                new SqlLiteralExpression (86400000L))'            new SqlFunctionExpression (                typeof (DateTime)'                "DATEADD"'                new SqlCustomTextExpression ("day"' typeof (string))'                Expression.Divide (                    new SqlConvertExpression (typeof (long)' value)'                    new SqlLiteralExpression (86400000L))'                _dateTimeInstance));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_AddMinutes,The following statement contains a magic number: var expectedResult = new SqlFunctionExpression (            typeof (DateTime)'            "DATEADD"'            new SqlCustomTextExpression ("millisecond"' typeof (string))'            Expression.Modulo (                new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (60000.0)))'                new SqlLiteralExpression (86400000L))'            new SqlFunctionExpression                (                typeof (DateTime)'                "DATEADD"'                new SqlCustomTextExpression ("day"' typeof (string))'                Expression.Divide (                    new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (60000.0)))'                    new SqlLiteralExpression (86400000L))'                _dateTimeInstance));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_AddMinutes,The following statement contains a magic number: var expectedResult = new SqlFunctionExpression (            typeof (DateTime)'            "DATEADD"'            new SqlCustomTextExpression ("millisecond"' typeof (string))'            Expression.Modulo (                new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (60000.0)))'                new SqlLiteralExpression (86400000L))'            new SqlFunctionExpression                (                typeof (DateTime)'                "DATEADD"'                new SqlCustomTextExpression ("day"' typeof (string))'                Expression.Divide (                    new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (60000.0)))'                    new SqlLiteralExpression (86400000L))'                _dateTimeInstance));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_AddMinutes,The following statement contains a magic number: var expectedResult = new SqlFunctionExpression (            typeof (DateTime)'            "DATEADD"'            new SqlCustomTextExpression ("millisecond"' typeof (string))'            Expression.Modulo (                new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (60000.0)))'                new SqlLiteralExpression (86400000L))'            new SqlFunctionExpression                (                typeof (DateTime)'                "DATEADD"'                new SqlCustomTextExpression ("day"' typeof (string))'                Expression.Divide (                    new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (60000.0)))'                    new SqlLiteralExpression (86400000L))'                _dateTimeInstance));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_AddMinutes,The following statement contains a magic number: var expectedResult = new SqlFunctionExpression (            typeof (DateTime)'            "DATEADD"'            new SqlCustomTextExpression ("millisecond"' typeof (string))'            Expression.Modulo (                new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (60000.0)))'                new SqlLiteralExpression (86400000L))'            new SqlFunctionExpression                (                typeof (DateTime)'                "DATEADD"'                new SqlCustomTextExpression ("day"' typeof (string))'                Expression.Divide (                    new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (60000.0)))'                    new SqlLiteralExpression (86400000L))'                _dateTimeInstance));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_AddSeconds,The following statement contains a magic number: var expectedResult = new SqlFunctionExpression (            typeof (DateTime)'            "DATEADD"'            new SqlCustomTextExpression ("millisecond"' typeof (string))'            Expression.Modulo (                new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (1000.0)))'                new SqlLiteralExpression (86400000L))'            new SqlFunctionExpression                (                typeof (DateTime)'                "DATEADD"'                new SqlCustomTextExpression ("day"' typeof (string))'                Expression.Divide (                    new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (1000.0)))'                    new SqlLiteralExpression (86400000L))'                _dateTimeInstance));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_AddSeconds,The following statement contains a magic number: var expectedResult = new SqlFunctionExpression (            typeof (DateTime)'            "DATEADD"'            new SqlCustomTextExpression ("millisecond"' typeof (string))'            Expression.Modulo (                new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (1000.0)))'                new SqlLiteralExpression (86400000L))'            new SqlFunctionExpression                (                typeof (DateTime)'                "DATEADD"'                new SqlCustomTextExpression ("day"' typeof (string))'                Expression.Divide (                    new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (1000.0)))'                    new SqlLiteralExpression (86400000L))'                _dateTimeInstance));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_AddSeconds,The following statement contains a magic number: var expectedResult = new SqlFunctionExpression (            typeof (DateTime)'            "DATEADD"'            new SqlCustomTextExpression ("millisecond"' typeof (string))'            Expression.Modulo (                new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (1000.0)))'                new SqlLiteralExpression (86400000L))'            new SqlFunctionExpression                (                typeof (DateTime)'                "DATEADD"'                new SqlCustomTextExpression ("day"' typeof (string))'                Expression.Divide (                    new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (1000.0)))'                    new SqlLiteralExpression (86400000L))'                _dateTimeInstance));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_AddSeconds,The following statement contains a magic number: var expectedResult = new SqlFunctionExpression (            typeof (DateTime)'            "DATEADD"'            new SqlCustomTextExpression ("millisecond"' typeof (string))'            Expression.Modulo (                new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (1000.0)))'                new SqlLiteralExpression (86400000L))'            new SqlFunctionExpression                (                typeof (DateTime)'                "DATEADD"'                new SqlCustomTextExpression ("day"' typeof (string))'                Expression.Divide (                    new SqlConvertExpression (typeof (long)' Expression.Multiply (value' new SqlLiteralExpression (1000.0)))'                    new SqlLiteralExpression (86400000L))'                _dateTimeInstance));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_AddTicks,The following statement contains a magic number: var methodInfo = MemberInfoFromExpressionUtility.GetMethod (() => DateTime.Now.AddTicks (123456));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_AddTicks,The following statement contains a magic number: var expectedResult = new SqlFunctionExpression (            typeof (DateTime)'            "DATEADD"'            new SqlCustomTextExpression ("millisecond"' typeof (string))'            Expression.Modulo (                Expression.Divide (value' new SqlLiteralExpression (10000L))' new SqlLiteralExpression (86400000L))'            new SqlFunctionExpression (                typeof (DateTime)'                "DATEADD"'                new SqlCustomTextExpression ("day"' typeof (string))'                Expression.Divide (                    Expression.Divide (value' new SqlLiteralExpression (10000L))' new SqlLiteralExpression (86400000L))'                _dateTimeInstance));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_AddTicks,The following statement contains a magic number: var expectedResult = new SqlFunctionExpression (            typeof (DateTime)'            "DATEADD"'            new SqlCustomTextExpression ("millisecond"' typeof (string))'            Expression.Modulo (                Expression.Divide (value' new SqlLiteralExpression (10000L))' new SqlLiteralExpression (86400000L))'            new SqlFunctionExpression (                typeof (DateTime)'                "DATEADD"'                new SqlCustomTextExpression ("day"' typeof (string))'                Expression.Divide (                    Expression.Divide (value' new SqlLiteralExpression (10000L))' new SqlLiteralExpression (86400000L))'                _dateTimeInstance));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_AddTicks,The following statement contains a magic number: var expectedResult = new SqlFunctionExpression (            typeof (DateTime)'            "DATEADD"'            new SqlCustomTextExpression ("millisecond"' typeof (string))'            Expression.Modulo (                Expression.Divide (value' new SqlLiteralExpression (10000L))' new SqlLiteralExpression (86400000L))'            new SqlFunctionExpression (                typeof (DateTime)'                "DATEADD"'                new SqlCustomTextExpression ("day"' typeof (string))'                Expression.Divide (                    Expression.Divide (value' new SqlLiteralExpression (10000L))' new SqlLiteralExpression (86400000L))'                _dateTimeInstance));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,DateTimeAddMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\DateTimeAddMethodCallTransformerTest.cs,Transform_AddTicks,The following statement contains a magic number: var expectedResult = new SqlFunctionExpression (            typeof (DateTime)'            "DATEADD"'            new SqlCustomTextExpression ("millisecond"' typeof (string))'            Expression.Modulo (                Expression.Divide (value' new SqlLiteralExpression (10000L))' new SqlLiteralExpression (86400000L))'            new SqlFunctionExpression (                typeof (DateTime)'                "DATEADD"'                new SqlCustomTextExpression ("day"' typeof (string))'                Expression.Divide (                    Expression.Divide (value' new SqlLiteralExpression (10000L))' new SqlLiteralExpression (86400000L))'                _dateTimeInstance));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,IndexOfMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\IndexOfMethodCallTransformerTest.cs,Transform_WithTwoArgument_TypeString,The following statement contains a magic number: var argument2 = Expression.Constant (2);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,IndexOfMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\IndexOfMethodCallTransformerTest.cs,Transform_WithTwoArgument_TypeChar,The following statement contains a magic number: var argument2 = Expression.Constant (2);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,IndexOfMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\IndexOfMethodCallTransformerTest.cs,Transform_WithThreeArgument_TypeString,The following statement contains a magic number: var argument2 = Expression.Constant (2);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,IndexOfMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\IndexOfMethodCallTransformerTest.cs,Transform_WithThreeArgument_TypeChar,The following statement contains a magic number: var argument2 = Expression.Constant (2);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,InsertMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\InsertMethodCallTransformerTest.cs,Transform,The following statement contains a magic number: var argument1 = Expression.Constant(3);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,RemoveMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\RemoveMethodCallTransformerTest.cs,Transform_WithTwoArgument,The following statement contains a magic number: var expression = Expression.Call (objectExpression' method' Expression.Constant (1)' Expression.Constant (3));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,RemoveMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\RemoveMethodCallTransformerTest.cs,Transform_WithTwoArgument,The following statement contains a magic number: var expectedResult = new SqlFunctionExpression (            expression.Type'            "STUFF"'            objectExpression'            Expression.Add (Expression.Constant (1)' new SqlLiteralExpression (1))'            Expression.Constant (3)'            new SqlLiteralExpression (""));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,ReplaceMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\ReplaceMethodCallTransformerTest.cs,Transform,The following statement contains a magic number: Assert.That (((SqlFunctionExpression) result).Args.Count' Is.EqualTo (3));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,SubstringMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\SubstringMethodCallTransformerTest.cs,Transform_WithTwoArgument,The following statement contains a magic number: var expression = Expression.Call (objectExpression' method' Expression.Constant (1)' Expression.Constant (3));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.MethodCallTransformers,SubstringMethodCallTransformerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodCallTransformers\SubstringMethodCallTransformerTest.cs,Transform_WithTwoArgument,The following statement contains a magic number: var expectedResult = new SqlFunctionExpression (            expression.Type'            "SUBSTRING"'            objectExpression'            Expression.Add (Expression.Constant (1)' new SqlLiteralExpression (1))'            Expression.Constant (3)            );
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,MethodInfoBasedMethodCallTransformerRegistryTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodInfoBasedMethodCallTransformerRegistryTest.cs,GetTransformer_ForBaseDefinition,The following statement contains a magic number: int i = 5;
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,MethodInfoBasedMethodCallTransformerRegistryTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\MethodInfoBasedMethodCallTransformerRegistryTest.cs,GetItem_ForBaseDefintion,The following statement contains a magic number: int i = 5;
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationSubStatementTableFactoryTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationSubStatementTableFactoryTest.cs,CreateSqlTableForSubStatement_WithOrderings_AndExtractOrderingsPolicy_ExtractedOrderings,The following statement contains a magic number: Assert.That (result.ExtractedOrderings.Count' Is.EqualTo (2));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,CompoundMethodCallTransformerProviderTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\CompoundMethodCallTransformerProviderTest.cs,CreateDefault,The following statement contains a magic number: Assert.That (registry.Providers.Length' Is.EqualTo (2));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitSqlEntityConstantExpression,The following statement contains a magic number: var expression = new SqlEntityConstantExpression (typeof (Cook)' "test"' new SqlLiteralExpression (12));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitQuerySourceReferenceExpression_WithOrderings_AndExtractOrdingsPolicy,The following statement contains a magic number: var sqlStatement = new SqlStatementBuilder                           {                               DataInfo = new StreamedSequenceInfo(typeof (DateTime[])' Expression.Constant (new DateTime (2000' 1' 1)))'                               SelectProjection = selectProjection'                               SqlTables = { sqlTable }'                               Orderings =                                   { new Ordering (orderingExpression' OrderingDirection.Asc) }                           }.GetSqlStatement();
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitQuerySourceReferenceExpression_WithOrderings_AndExtractOrdingsPolicy,The following statement contains a magic number: var fakeSelectExpression = Expression.Constant (new KeyValuePair<string' int>("test"' 5));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationFromExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationFromExpressionVisitorTest.cs,VisitQuerySourceReferenceExpression_WithOrderings_AndDoNotExtractOrdingsPolicy,The following statement contains a magic number: var sqlStatement = new SqlStatementBuilder                           {                               DataInfo = new StreamedSequenceInfo(typeof (DateTime[])' Expression.Constant (new DateTime (2000' 1' 1)))'                               SelectProjection = selectProjection'                               SqlTables = { sqlTable }'                               Orderings =                                   { new Ordering (orderingExpression' OrderingDirection.Asc) }                           }.GetSqlStatement();
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationQueryModelVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationQueryModelVisitorTest.cs,TransformQueryModel_QueryModel_WithAdditionalClauses,The following statement contains a magic number: Assert.That (result.SqlTables.Count' Is.EqualTo (2));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationQueryModelVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationQueryModelVisitorTest.cs,VisitJoinClause_CreatesSqlTable,The following statement contains a magic number: _visitor.VisitJoinClause (joinClause' _queryModel' 5);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationQueryModelVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationQueryModelVisitorTest.cs,VisitJoinClause_CreatesWhereCondition,The following statement contains a magic number: _visitor.VisitJoinClause (joinClause' _queryModel' 5);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationQueryModelVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationQueryModelVisitorTest.cs,VisitOrderByClause_Multiple,The following statement contains a magic number: Assert.That (_visitor.SqlStatementBuilder.Orderings.Count' Is.EqualTo (3));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationQueryModelVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationQueryModelVisitorTest.cs,VisitOrderByClause_Multiple,The following statement contains a magic number: Assert.That (_visitor.SqlStatementBuilder.Orderings[2].Expression' Is.SameAs (preparedOrderingExpression1));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationQueryModelVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationQueryModelVisitorTest.cs,AddQuerySource,The following statement contains a magic number: _stageMock            .Expect (                mock =>                mock.PrepareFromExpression (                    Arg.Is (_mainFromClause.FromExpression)'                    Arg<ISqlPreparationContext>.Matches (c => c != _context)'                    Arg<Func<ITableInfo' SqlTable>>.Is.Anything'                    Arg.Is(OrderingExtractionPolicy.ExtractOrderingsIntoProjection)))            .Return (preparedFromExpressionInfo)            .WhenCalled (mi =>             {              var tableCreator = (Func<ITableInfo' SqlTable>) mi.Arguments[2];              var sampleTableInfo = new UnresolvedTableInfo (typeof (Cook));                            var table = tableCreator (sampleTableInfo);                Assert.That (table' Is.TypeOf (typeof (SqlTable)));              Assert.That (table.TableInfo' Is.SameAs (sampleTableInfo));              Assert.That (table.JoinSemantics' Is.EqualTo (JoinSemantics.Inner));            });
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitMemberExpression_WithNoPoperty,The following statement contains a magic number: var memberExpression = Expression.Field (Expression.Constant (new TypeWithMember<int> (5))' "Field");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitMemberExpression_WithProperty_NotRegistered,The following statement contains a magic number: var memberExpression = Expression.Property (Expression.Constant (new TypeWithMember<int> (5))' "Property");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitMemberExpression_WithInnerSqlCaseExpression,The following statement contains a magic number: var value2 = Expression.Constant (new TypeWithMember<int> (2));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitMemberExpression_WithInnerSqlCaseExpression,The following statement contains a magic number: var elseValue = Expression.Constant (new TypeWithMember<int> (3));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitMemberExpression_WithInnerCoalesceExpression,The following statement contains a magic number: var right = Expression.Constant (new TypeWithMember<int> (2));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitConstantExpression_WithCollection_ReturnsSqlCollectionExpression,The following statement contains a magic number: var constantExpression = Expression.Constant (new[] { 1' 2' 3 });
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitConstantExpression_WithCollection_ReturnsSqlCollectionExpression,The following statement contains a magic number: var constantExpression = Expression.Constant (new[] { 1' 2' 3 });
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitConstantExpression_WithCollection_ReturnsSqlCollectionExpression,The following statement contains a magic number: var expectedExpression = new SqlCollectionExpression (            typeof (int[])' new[] { Expression.Constant (1)' Expression.Constant (2)' Expression.Constant (3) });
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation,SqlPreparationExpressionVisitorTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\SqlPreparationExpressionVisitorTest.cs,VisitConstantExpression_WithCollection_ReturnsSqlCollectionExpression,The following statement contains a magic number: var expectedExpression = new SqlCollectionExpression (            typeof (int[])' new[] { Expression.Constant (1)' Expression.Constant (2)' Expression.Constant (3) });
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,AggregationResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\AggregationResultOperatorHandlerTest.cs,SetUp,The following statement contains a magic number: _sqlStatementBuilder = new SqlStatementBuilder (SqlStatementModelObjectMother.CreateSqlStatement ())        {          DataInfo = new StreamedSequenceInfo (typeof (int[])' Expression.Constant (5))'          SelectProjection = new NamedExpression (null' Expression.Constant (0))        };
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,SetOperationResultOperatorHandlerBaseTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\SetOperationResultOperatorHandlerBaseTest.cs,HandleResultOperator_NonStatementAsSource2,The following statement contains a magic number: var resultOperator = new UnionResultOperator ("x"' typeof (int)' Expression.Constant (new[] { 1' 2' 3 }));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,SetOperationResultOperatorHandlerBaseTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\SetOperationResultOperatorHandlerBaseTest.cs,HandleResultOperator_NonStatementAsSource2,The following statement contains a magic number: var resultOperator = new UnionResultOperator ("x"' typeof (int)' Expression.Constant (new[] { 1' 2' 3 }));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,SetOperationResultOperatorHandlerBaseTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\SetOperationResultOperatorHandlerBaseTest.cs,HandleResultOperator_OrderingsWithTopInSource2_CausesMainStatementToBeMovedToSubStatement,The following statement contains a magic number: var sqlStatement = SqlStatementModelObjectMother.CreateMinimalSqlStatement (new SqlStatementBuilder          {           Orderings = { SqlStatementModelObjectMother.CreateOrdering() }'           TopExpression = Expression.Constant(10)         });
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,FirstResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\FirstResultOperatorHandlerTest.cs,HandleResultOperator_FirstAfterSkipExpression,The following statement contains a magic number: _sqlStatementBuilder.RowNumberSelector = Expression.Constant (5);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,FirstResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\FirstResultOperatorHandlerTest.cs,HandleResultOperator_FirstAfterSkipExpression,The following statement contains a magic number: _sqlStatementBuilder.CurrentRowNumberOffset = Expression.Constant (3);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,GroupResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\GroupResultOperatorHandlerTest.cs,HandleResultOperator_TransformSubqueriesUsedAsGroupByKeys,The following statement contains a magic number: Assert.That (_sqlStatementBuilder.SqlTables.Count' Is.EqualTo (2));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,GroupResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\GroupResultOperatorHandlerTest.cs,HandleResultOperator_DetectConstantKeysAndReplaceWithSubStatement,The following statement contains a magic number: Assert.That (_sqlStatementBuilder.SqlTables.Count' Is.EqualTo (2));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,MaxResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\MaxResultOperatorHandlerTest.cs,SetUp,The following statement contains a magic number: _sqlStatementBuilder = new SqlStatementBuilder (SqlStatementModelObjectMother.CreateSqlStatement ())        {          DataInfo = new StreamedSequenceInfo (typeof (int[])' Expression.Constant (5))        };
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,MinResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\MinResultOperatorHandlerTest.cs,SetUp,The following statement contains a magic number: _sqlStatementBuilder = new SqlStatementBuilder (SqlStatementModelObjectMother.CreateSqlStatement())                               {                                   DataInfo = new StreamedSequenceInfo (typeof (int[])' Expression.Constant (5))                               };
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,SingleResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\SingleResultOperatorHandlerTest.cs,HandleResultOperator,The following statement contains a magic number: Assert.That (((SqlLiteralExpression) _sqlStatementBuilder.TopExpression).Value' Is.EqualTo(2));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,SingleResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\SingleResultOperatorHandlerTest.cs,HandleResultOperator_SingleAfterTopExpression,The following statement contains a magic number: Assert.That (((SqlLiteralExpression) _sqlStatementBuilder.TopExpression).Value' Is.EqualTo (2));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,SingleResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\SingleResultOperatorHandlerTest.cs,HandleResultOperator_SingleAfterGroupExpression,The following statement contains a magic number: Assert.That (((SqlLiteralExpression) _sqlStatementBuilder.TopExpression).Value' Is.EqualTo (2));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,SingleResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\SingleResultOperatorHandlerTest.cs,HandleResultOperator_SingleAfterSkipExpression,The following statement contains a magic number: _sqlStatementBuilder.RowNumberSelector = Expression.Constant (5);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,SingleResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\SingleResultOperatorHandlerTest.cs,HandleResultOperator_SingleAfterSkipExpression,The following statement contains a magic number: _sqlStatementBuilder.CurrentRowNumberOffset = Expression.Constant (3);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,SingleResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\SingleResultOperatorHandlerTest.cs,HandleResultOperator_SingleAfterSkipExpression,The following statement contains a magic number: var expectedWhereCondition = Expression.LessThanOrEqual (                  _sqlStatementBuilder.RowNumberSelector' Expression.Add (_sqlStatementBuilder.CurrentRowNumberOffset' new SqlLiteralExpression(2)));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,SkipResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\SkipResultOperatorHandlerTest.cs,SetUp,The following statement contains a magic number: _ordering = new Ordering (Expression.Constant (7)' OrderingDirection.Asc);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,SkipResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\SkipResultOperatorHandlerTest.cs,HandleResultOperator_LeavesOrderingsInSubStatement_IfTopExpression,The following statement contains a magic number: _sqlStatementBuilder.TopExpression = Expression.Constant (20);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,SkipResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\SkipResultOperatorHandlerTest.cs,HandleResultOperator_SetsOuterWhereCondition,The following statement contains a magic number: var resultOperator = new SkipResultOperator (Expression.Constant (10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,SkipResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\SkipResultOperatorHandlerTest.cs,HandleResultOperator_SetsOuterOrdering,The following statement contains a magic number: var resultOperator = new SkipResultOperator (Expression.Constant (10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,SkipResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\SkipResultOperatorHandlerTest.cs,HandleResultOperator_SetsOuterDataInfo,The following statement contains a magic number: var resultOperator = new SkipResultOperator (Expression.Constant (10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,SkipResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\SkipResultOperatorHandlerTest.cs,HandleResultOperator_SetsRowNumberSelector,The following statement contains a magic number: var resultOperator = new SkipResultOperator (Expression.Constant (10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,SkipResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\SkipResultOperatorHandlerTest.cs,HandleResultOperator_SetsCurrentRowNumberOffset,The following statement contains a magic number: var resultOperator = new SkipResultOperator (Expression.Constant (10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,SkipResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\SkipResultOperatorHandlerTest.cs,HandleResultOperator_AddsMappingForItemExpression,The following statement contains a magic number: var resultOperator = new SkipResultOperator (Expression.Constant (10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,SumResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\SumResultOperatorHandlerTest.cs,SetUp,The following statement contains a magic number: _sqlStatementBuilder = new SqlStatementBuilder (SqlStatementModelObjectMother.CreateSqlStatement ())        {          DataInfo = new StreamedSequenceInfo (typeof (int[])' Expression.Constant (5))        };
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,TakeResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\TakeResultOperatorHandlerTest.cs,HandleResultOperator_ConstantExpression,The following statement contains a magic number: var takeExpression = Expression.Constant (2);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,TakeResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\TakeResultOperatorHandlerTest.cs,HandleResultOperator_ConstantExpression,The following statement contains a magic number: Assert.That (((SqlLiteralExpression) _sqlStatementBuilder.TopExpression).Value' Is.EqualTo (2));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,TakeResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\TakeResultOperatorHandlerTest.cs,HandleResultOperator_TakeAfterTopExpression,The following statement contains a magic number: var takeExpression = Expression.Constant (2);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,TakeResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\TakeResultOperatorHandlerTest.cs,HandleResultOperator_TakeAfterGroupExpression,The following statement contains a magic number: var takeExpression = Expression.Constant (2);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,TakeResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\TakeResultOperatorHandlerTest.cs,HandleResultOperator_TakeAfterSetOperation,The following statement contains a magic number: var takeExpression = Expression.Constant (2);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,TakeResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\TakeResultOperatorHandlerTest.cs,HandleResultOperator_TakeAfterSkipExpression,The following statement contains a magic number: _sqlStatementBuilder.RowNumberSelector = Expression.Constant (5);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,TakeResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\TakeResultOperatorHandlerTest.cs,HandleResultOperator_TakeAfterSkipExpression,The following statement contains a magic number: _sqlStatementBuilder.CurrentRowNumberOffset = Expression.Constant (3);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlPreparation.ResultOperatorHandlers,TakeResultOperatorHandlerTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlPreparation\ResultOperatorHandlers\TakeResultOperatorHandlerTest.cs,HandleResultOperator_TakeAfterSkipExpression,The following statement contains a magic number: var takeExpression = Expression.Constant (2);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,AggregationExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\AggregationExpressionTest.cs,VisitChildren_ReturnsNewExpression,The following statement contains a magic number: var newExpression = Expression.Constant (5);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,NamedExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\NamedExpressionTest.cs,VisitChildren_ReturnsNewSqlInExpression,The following statement contains a magic number: var newExpression = Expression.Constant (5);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlGroupingSelectExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlGroupingSelectExpressionTest.cs,AddAggregationExpressionWithName,The following statement contains a magic number: Assert.That (_sqlGroupingSelectExpression.AggregationExpressions.Count' Is.EqualTo (2));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlStatementBuilderTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlStatementBuilderTest.cs,ToString_AllProperties,The following statement contains a magic number: var topExpression = Expression.Constant (10);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlSubStatementExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSubStatementExpressionTest.cs,ConvertToSqlTable_StreamedSingleValueInfo,The following statement contains a magic number: var sqlStatement =            new SqlStatementBuilder            {                DataInfo = new StreamedSingleValueInfo (typeof (Cook)' false)'                SelectProjection = selectProjection'                TopExpression = new SqlLiteralExpression (2)'                SqlTables = { new SqlTable(new ResolvedSimpleTableInfo(typeof(Cook)' "CookTable"' "c")'JoinSemantics.Inner) }            }.GetSqlStatement();
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlSubStatementExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSubStatementExpressionTest.cs,ConvertToSqlTable_StreamedSingleValueInfo_NoSqlTables,The following statement contains a magic number: var topExpression = new SqlLiteralExpression (2);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlSubStatementExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSubStatementExpressionTest.cs,ConvertToSqlTable_StreamedSingleValueInfoWithReturnsTrueIfEmpty_JoinSemanticIsChanged,The following statement contains a magic number: var sqlStatement =            new SqlStatementBuilder            {              DataInfo = new StreamedSingleValueInfo (typeof (Cook)' true)'              SelectProjection = selectProjection'              TopExpression = new SqlLiteralExpression (2)'              SqlTables = { new SqlTable (new ResolvedSimpleTableInfo (typeof (Cook)' "CookTable"' "c")' JoinSemantics.Inner) }            }.GetSqlStatement ();
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlStatementTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlStatementTest.cs,Equals_DifferentSelectProjection,The following statement contains a magic number: var selectProjection2 = Expression.Constant (2);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlStatementTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlStatementTest.cs,Equals_DifferentCurrentRowNumberOffset,The following statement contains a magic number: var currentRowNumberOffset2 = Expression.Constant (2);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlStatementTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlStatementTest.cs,Equals_AssertPropertyCount,The following statement contains a magic number: Assert.That (typeof (SqlStatement).GetProperties().Count()' Is.EqualTo (11)' "The implementation of Equals and GetHashCode has to be adapted.");
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel,SqlStatementTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlStatementTest.cs,ToString_AllProperties,The following statement contains a magic number: var topExpression = Expression.Constant (10);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,SqlConvertedBooleanExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\SqlConvertedBooleanExpressionTest.cs,VisitChildren_ReturnsNewExpression,The following statement contains a magic number: var newExpression = Expression.Constant (5);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,ResolvedJoinedGroupingTableInfoTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\ResolvedJoinedGroupingTableInfoTest.cs,SetUp,The following statement contains a magic number: _sqlStatement = new SqlStatementBuilder (SqlStatementModelObjectMother.CreateSqlStatement_Resolved (typeof (Cook)))        {          SelectProjection = new NamedExpression ("test"' Expression.Constant (5))'          DataInfo = new StreamedSequenceInfo (typeof (int[])' Expression.Constant (0))        }.GetSqlStatement ();
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,ResolvedSubStatementTableInfoTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\ResolvedSubStatementTableInfoTest.cs,SetUp,The following statement contains a magic number: _sqlStatement = new SqlStatementBuilder (SqlStatementModelObjectMother.CreateSqlStatement_Resolved (typeof (Cook)))                           {                               SelectProjection = new NamedExpression ("test"' Expression.Constant (5))'                               DataInfo = new StreamedSequenceInfo (typeof (int[])' Expression.Constant (0))                           }.GetSqlStatement();
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,ResolvedSubStatementTableInfoTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\ResolvedSubStatementTableInfoTest.cs,Initialization_ItemTypeWithCovariantSubstatement,The following statement contains a magic number: var sqlStatement = new SqlStatementBuilder (SqlStatementModelObjectMother.CreateSqlStatement_Resolved (typeof (Cook)))        {          SelectProjection = new NamedExpression ("test"' Expression.Constant (5))'          DataInfo = new StreamedSequenceInfo (typeof (object[])' Expression.Constant (0))        }.GetSqlStatement ();
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,SqlEntityConstantExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\SqlEntityConstantExpressionTest.cs,SetUp,The following statement contains a magic number: _identityExpression = Expression.Constant (5);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,SqlEntityConstantExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\SqlEntityConstantExpressionTest.cs,VisitChildren_VisitsIdentityExpression_Changed,The following statement contains a magic number: var newPrimaryKeyExpression = Expression.Constant (6);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,SqlEntityDefinitionExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\SqlEntityDefinitionExpressionTest.cs,VisitChildren_NoColumnChanged,The following statement contains a magic number: visitorMock.Expect (mock => mock.Visit (_originalColumnsReadonly[2])).Return (_originalColumnsReadonly[2]);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,SqlEntityDefinitionExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\SqlEntityDefinitionExpressionTest.cs,VisitChildren_NoColumnChanged,The following statement contains a magic number: visitorMock.Expect (mock => mock.Visit (_originalColumnsReadonly[2])).Return (_originalColumnsReadonly[2]);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,SqlEntityDefinitionExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\SqlEntityDefinitionExpressionTest.cs,VisitChildren_ChangeColumn,The following statement contains a magic number: visitorMock.Expect (mock => mock.Visit (_originalColumnsReadonly[2])).Return (expectedColumns[2]);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.Resolved,SqlEntityDefinitionExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\Resolved\SqlEntityDefinitionExpressionTest.cs,VisitChildren_ChangeColumn,The following statement contains a magic number: visitorMock.Expect (mock => mock.Visit (_originalColumnsReadonly[2])).Return (expectedColumns[2]);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlCollectionExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlCollectionExpressionTest.cs,SetUp,The following statement contains a magic number: var item1 = new SqlLiteralExpression (13);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlCollectionExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlCollectionExpressionTest.cs,SetUp,The following statement contains a magic number: var item2 = Expression.Constant (12);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlCollectionExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlCollectionExpressionTest.cs,VisitChildren_NewItems,The following statement contains a magic number: var newItem = Expression.Constant (14);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlConvertExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlConvertExpressionTest.cs,VisitChildren_NewSource,The following statement contains a magic number: var newPrefix = Expression.Constant (3);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlExistsExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlExistsExpressionTest.cs,VisitChildren_NewSource,The following statement contains a magic number: var newPrefix = Expression.Constant (3);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlFunctionExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlFunctionExpressionTest.cs,SetUp,The following statement contains a magic number: Expression[] args = { Expression.Constant ("test")' Expression.Constant (1)' Expression.Constant (2) };
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlFunctionExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlFunctionExpressionTest.cs,VisitChildren_NewArgs,The following statement contains a magic number: var newArgs = new[] { Expression.Constant (1)' Expression.Constant (8)' Expression.Constant (9) };
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlFunctionExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlFunctionExpressionTest.cs,VisitChildren_NewArgs,The following statement contains a magic number: var newArgs = new[] { Expression.Constant (1)' Expression.Constant (8)' Expression.Constant (9) };
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlFunctionExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlFunctionExpressionTest.cs,VisitChildren_NewArgs,The following statement contains a magic number: visitorMock.Expect (mock => mock.Visit (_sqlFunctionExpression.Args[2])).Return (newArgs[2]);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlFunctionExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlFunctionExpressionTest.cs,VisitChildren_NewArgs,The following statement contains a magic number: visitorMock.Expect (mock => mock.Visit (_sqlFunctionExpression.Args[2])).Return (newArgs[2]);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlFunctionExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlFunctionExpressionTest.cs,VisitChildren_SameSqlFunctionExpression,The following statement contains a magic number: visitorMock.Expect (mock => mock.Visit (_sqlFunctionExpression.Args[2])).Return (_sqlFunctionExpression.Args[2]);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlFunctionExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlFunctionExpressionTest.cs,VisitChildren_SameSqlFunctionExpression,The following statement contains a magic number: visitorMock.Expect (mock => mock.Visit (_sqlFunctionExpression.Args[2])).Return (_sqlFunctionExpression.Args[2]);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlIsNotNullExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlIsNotNullExpressionTest.cs,SetUp,The following statement contains a magic number: _sqlIsNotNullExpression = new SqlIsNotNullExpression(Expression.Constant(2));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlIsNotNullExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlIsNotNullExpressionTest.cs,VisitChildren,The following statement contains a magic number: var expression = Expression.Constant (3);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlIsNotNullExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlIsNotNullExpressionTest.cs,VisitChildren_ReturnsSame,The following statement contains a magic number: var expression = Expression.Constant (3);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlIsNullExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlIsNullExpressionTest.cs,SetUp,The following statement contains a magic number: _sqlIsNullExpression = new SqlIsNullExpression (Expression.Constant(2));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlIsNullExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlIsNullExpressionTest.cs,VisitChildren,The following statement contains a magic number: var expression = Expression.Constant (3);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlLikeExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlLikeExpressionTest.cs,VisitChildren_ReturnsDifferentRightExpression,The following statement contains a magic number: var newRightExpression = Expression.Constant (3);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlLikeExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlLikeExpressionTest.cs,VisitChildren_ReturnsDifferentLeftExpression,The following statement contains a magic number: var newLeftExpression = Expression.Constant (3);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlLikeExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlLikeExpressionTest.cs,VisitChildren_ReturnsDifferentEscapeExpression,The following statement contains a magic number: var newEscapeExpression = Expression.Constant (3);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlCaseExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlCaseExpressionTest.cs,SetUp,The following statement contains a magic number: _value1 = Expression.Constant (17);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlCaseExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlCaseExpressionTest.cs,SetUp,The following statement contains a magic number: _value2 = Expression.Constant (4);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlCaseExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlCaseExpressionTest.cs,SetUp,The following statement contains a magic number: _nullableValue1 = Expression.Constant (47' typeof (int?));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlCaseExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlCaseExpressionTest.cs,SetUp,The following statement contains a magic number: _elseValue = Expression.Constant (42);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlCaseExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlCaseExpressionTest.cs,CreateIfThenElseNull,The following statement contains a magic number: Assert.That (result.Cases' Has.Count.EqualTo (2));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlCaseExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlCaseExpressionTest.cs,VisitChildren_ChangedThen,The following statement contains a magic number: var newValue = Expression.Constant (17);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlCaseExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlCaseExpressionTest.cs,VisitChildren_ChangedElse,The following statement contains a magic number: var newElseValue = Expression.Constant (17);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlRowNumberExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlRowNumberExpressionTest.cs,VisitChildren_NewOrderingExpressions,The following statement contains a magic number: var fakeResult = Expression.Constant (3);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlInExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlInExpressionTest.cs,SetUp,The following statement contains a magic number: _rightExpression = Expression.Constant (2);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlInExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlInExpressionTest.cs,VisitChildren_ReturnsNewSqlInExpression,The following statement contains a magic number: var newLeftExpression = Expression.Constant (3);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlInExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlInExpressionTest.cs,VisitChildren_ReturnsNewSqlInExpression,The following statement contains a magic number: var newRightExpression = Expression.Constant (4);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlLiteralExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlLiteralExpressionTest.cs,SetUp,The following statement contains a magic number: _literalExpression = new SqlLiteralExpression (10);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlLiteralExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlLiteralExpressionTest.cs,Initialization_Typed,The following statement contains a magic number: var intExpression = new SqlLiteralExpression (10);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlLiteralExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlLiteralExpressionTest.cs,Initialization_Typed,The following statement contains a magic number: Assert.That (intExpression.Value' Is.EqualTo (10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlLiteralExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlLiteralExpressionTest.cs,Initialization_Typed,The following statement contains a magic number: var nullableIntExpression = new SqlLiteralExpression (10' true);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlLiteralExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlLiteralExpressionTest.cs,Initialization_Typed,The following statement contains a magic number: Assert.That (nullableIntExpression.Value' Is.EqualTo (10));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlLiteralExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlLiteralExpressionTest.cs,Initialization_Typed,The following statement contains a magic number: var longExpression = new SqlLiteralExpression (10L);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlLiteralExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlLiteralExpressionTest.cs,Initialization_Typed,The following statement contains a magic number: Assert.That (longExpression.Value' Is.EqualTo (10L));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlLiteralExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlLiteralExpressionTest.cs,Initialization_Typed,The following statement contains a magic number: var nullableLongExpression = new SqlLiteralExpression (10L' true);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlLiteralExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlLiteralExpressionTest.cs,Initialization_Typed,The following statement contains a magic number: Assert.That (nullableLongExpression.Value' Is.EqualTo (10L));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlLiteralExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlLiteralExpressionTest.cs,Initialization_Typed,The following statement contains a magic number: var doubleExpression = new SqlLiteralExpression (10.12);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlLiteralExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlLiteralExpressionTest.cs,Initialization_Typed,The following statement contains a magic number: Assert.That (doubleExpression.Value' Is.EqualTo (10.12));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlLiteralExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlLiteralExpressionTest.cs,Initialization_Typed,The following statement contains a magic number: var nullableDoubleExpression = new SqlLiteralExpression (10.12' true);
Magic Number,Remotion.Linq.SqlBackend.UnitTests.SqlStatementModel.SqlSpecificExpressions,SqlLiteralExpressionTest,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\SqlStatementModel\SqlSpecificExpressions\SqlLiteralExpressionTest.cs,Initialization_Typed,The following statement contains a magic number: Assert.That (nullableDoubleExpression.Value' Is.EqualTo (10.12));
Magic Number,Remotion.Linq.SqlBackend.UnitTests.TestDomain,ToLbsTransformer,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\TestDomain\Cook.cs,Transform,The following statement contains a magic number: return Expression.Multiply (              Expression.MakeMemberAccess (methodCallExpression.Object' typeof (Cook).GetProperty ("Weight"))'              Expression.Constant (2.20462262));
Missing Default,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub.cs,ResolveTableInfo,The following switch statement is missing a default case: switch (tableInfo.ItemType.Name)        {          case "Cook":          case "Knife":          case "Kitchen":          case "Restaurant":          case "Company":            return CreateResolvedTableInfo (tableInfo.ItemType' generator);          case "Chef":            return new ResolvedSimpleTableInfo (tableInfo.ItemType' "dbo."+tableInfo.ItemType.Name + "Table"' generator.GetUniqueIdentifier ("t"));        }
Missing Default,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub.cs,ResolveJoinInfo,The following switch statement is missing a default case: switch (joinInfo.MemberInfo.Name)          {            case "Substitution":              return CreateResolvedJoinInfo (                  joinInfo.OriginatingEntity'                  "ID"'                  typeof (int)'                  true'                  CreateResolvedTableInfo (joinInfo.ItemType' generator)'                  "SubstitutedID"'                  typeof (int)'                  false);            case "Substituted":              return CreateResolvedJoinInfo (                  joinInfo.OriginatingEntity'                  "SubstitutedID"'                  typeof (int)'                  false'                  CreateResolvedTableInfo (joinInfo.ItemType' generator)'                  "ID"'                  typeof (int)'                  true);            case "Assistants":              return CreateResolvedJoinInfo (                  joinInfo.OriginatingEntity'                  "ID"'                  typeof (int)'                  true'                  CreateResolvedTableInfo (joinInfo.ItemType' generator)'                  "AssistedID"'                  typeof (int)'                  false);            case "Kitchen":              return CreateResolvedJoinInfo (                  joinInfo.OriginatingEntity'                  "KitchenID"'                  typeof (int)'                  false'                  CreateResolvedTableInfo (joinInfo.ItemType' generator)'                  "ID"'                  typeof (int)'                  true);            case "Knife":              var joinedTableInfo = CreateResolvedTableInfo (joinInfo.ItemType' generator);              var leftKey = ResolveMemberExpression (joinInfo.OriginatingEntity' typeof (Cook).GetProperty ("KnifeID"));              var rightKey = ResolveSimpleTableInfo (joinedTableInfo' generator).GetIdentityExpression();              return new ResolvedJoinInfo (joinedTableInfo' Expression.Equal (leftKey' rightKey));          }
Missing Default,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub.cs,ResolveJoinInfo,The following switch statement is missing a default case: switch (joinInfo.MemberInfo.Name)          {            case "Cook":              return CreateResolvedJoinInfo (                  joinInfo.OriginatingEntity'                  "ID"' typeof (int)' true' CreateResolvedTableInfo (joinInfo.ItemType' generator)' "KitchenID"' typeof (int)' false);            case "Restaurant":              return CreateResolvedJoinInfo (                  joinInfo.OriginatingEntity'                  "RestaurantID"' typeof (int)' false' CreateResolvedTableInfo (joinInfo.ItemType' generator)' "ID"' typeof (int)' true);          }
Missing Default,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub.cs,ResolveJoinInfo,The following switch statement is missing a default case: switch (joinInfo.MemberInfo.Name)          {            case "SubKitchen":              return CreateResolvedJoinInfo (                  joinInfo.OriginatingEntity'                  "ID"' typeof (int)' true' CreateResolvedTableInfo (joinInfo.ItemType' generator)' "RestaurantID"' typeof (int)' false);            case "Cooks":              return CreateResolvedJoinInfo (                  joinInfo.OriginatingEntity'                  "ID"' typeof (int)' true' CreateResolvedTableInfo (joinInfo.ItemType' generator)' "RestaurantID"' typeof (int)' false);            case "CompanyIfAny":              return CreateResolvedJoinInfo (                  joinInfo.OriginatingEntity'                  "CompanyID"'                  typeof (int?)'                   false'                   CreateResolvedTableInfo (joinInfo.ItemType' generator)'                   "ID"'                   typeof (int)'                   true);            }
Missing Default,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub.cs,ResolveJoinInfo,The following switch statement is missing a default case: switch (joinInfo.MemberInfo.Name)          {            case "AllRestaurants":              return CreateResolvedJoinInfo (                  joinInfo.OriginatingEntity'                  "ID"'                  typeof (int)' true' CreateResolvedTableInfo (joinInfo.ItemType' generator)' "CompanyID"' typeof (int?)' false);          }
Missing Default,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub.cs,ResolveMemberExpression,The following switch statement is missing a default case: switch (memberInfo.Name)          {            case "ID":              return originatingEntity.GetColumn (memberType' memberInfo.Name' true);            case "FirstName":            case "Name":            case "IsFullTimeCook":            case "IsStarredCook":            case "Weight":            case "SpecificInformation":              return originatingEntity.GetColumn (memberType' memberInfo.Name' false);            case "KnifeID":              return CreateMetaIDExpression (                  originatingEntity.GetColumn (typeof (int)' "KnifeID"' false)'                   originatingEntity.GetColumn (typeof (string)' "KnifeClassID"' false));            case "Substitution":            case "Substituted":            case "Kitchen":            case "Knife":              return new SqlEntityRefMemberExpression (originatingEntity' memberInfo);            case "CookRating":              return originatingEntity.GetColumn (typeof (CookRating)' "CookRating"' false);          }
Missing Default,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub.cs,ResolveMemberExpression,The following switch statement is missing a default case: switch (memberInfo.Name)          {            case "SpecificInformation":              return originatingEntity.GetColumn (memberType' memberInfo.Name' false);          }
Missing Default,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub.cs,ResolveMemberExpression,The following switch statement is missing a default case: switch (memberInfo.Name)          {            case "LetterOfRecommendation":              return originatingEntity.GetColumn (memberType' memberInfo.Name' false);          }
Missing Default,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub.cs,ResolveMemberExpression,The following switch statement is missing a default case: switch (memberInfo.Name)          {            case "ID":              return originatingEntity.GetColumn (memberType' memberInfo.Name' true);            case "Name":            case "RoomNumber":            case "LastCleaningDay":            case "PassedLastInspection":            case "LastInspectionScore":              return originatingEntity.GetColumn (memberType' memberInfo.Name' false);            case "Cook":            case "Restaurant":              return new SqlEntityRefMemberExpression (originatingEntity' memberInfo);          }
Missing Default,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub.cs,ResolveMemberExpression,The following switch statement is missing a default case: switch (memberInfo.Name)          {            case "ID":              return originatingEntity.GetColumn (memberType' memberInfo.Name' true);            case "SubKitchen":            case "CompanyIfAny":              return new SqlEntityRefMemberExpression (originatingEntity' memberInfo);          }
Missing Default,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub.cs,ResolveMemberExpression,The following switch statement is missing a default case: switch (memberInfo.Name)          {            case "ID":              return originatingEntity.GetColumn (memberType' memberInfo.Name' true);            case "DateOfIncorporation":              return originatingEntity.GetColumn (memberType' memberInfo.Name' false);          }
Missing Default,Remotion.Linq.SqlBackend.UnitTests,MappingResolverStub,C:\research\architectureSmells\repos\re-motion_Relinq-SqlBackend\UnitTests\MappingResolverStub.cs,ResolveMemberExpression,The following switch statement is missing a default case: switch (memberInfo.Name)          {            case "ID":              return CreateMetaIDExpression (                  originatingEntity.GetColumn (typeof (int)' "ID"' true)'                   originatingEntity.GetColumn (typeof (string)' "ClassID"' true));            case "Sharpness":              return originatingEntity.GetColumn (memberType' memberInfo.Name' false);          }
