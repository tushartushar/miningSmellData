Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Remotion.Linq.LinqToSqlAdapter,QueryExecutor,C:\repos\re-motion_Relinq-SqlBackend\LinqToSqlAdapter\QueryExecutor.cs,QueryExecutor,The method has 5 parameters. Parameters: mappingResolver' resultRetriever' resultOperatorHandlerRegistry' methodCallTransformerProvider' showQuery
Long Identifier,Remotion.Linq.LinqToSqlAdapter,QueryExecutor,C:\repos\re-motion_Relinq-SqlBackend\LinqToSqlAdapter\QueryExecutor.cs,,The length of the parameter _methodCallTransformerProvider is 30.
Long Identifier,Remotion.Linq.LinqToSqlAdapter,QueryExecutor,C:\repos\re-motion_Relinq-SqlBackend\LinqToSqlAdapter\QueryExecutor.cs,,The length of the parameter _resultOperatorHandlerRegistry is 30.
Long Statement,Remotion.Utilities,ArgumentUtility,C:\repos\re-motion_Relinq-SqlBackend\LinqToSqlAdapter\App_Packages\Remotion.Utilities.ArgumentUtility.Sources.1.15.23.0\ArgumentUtility.cs,CreateArgumentTypeException,The length of the statement  "        return new ArgumentException (string.Format ("Parameter '{0}' has unexpected type '{1}'."' argumentName' actualTypeName)' argumentName); " is 136.
Long Statement,Remotion.Utilities,ArgumentUtility,C:\repos\re-motion_Relinq-SqlBackend\LinqToSqlAdapter\App_Packages\Remotion.Utilities.ArgumentUtility.Sources.1.15.23.0\ArgumentUtility.cs,CreateArgumentTypeException,The length of the statement  "            string.Format ("Parameter '{0}' has type '{2}' when type '{1}' was expected."' argumentName' expectedType' actualTypeName)' " is 123.
Long Statement,Remotion.Utilities,ArgumentUtility,C:\repos\re-motion_Relinq-SqlBackend\LinqToSqlAdapter\App_Packages\Remotion.Utilities.ArgumentUtility.Sources.1.15.23.0\ArgumentUtility.cs,CreateArgumentItemNullException,The length of the statement  "      return new ArgumentNullException (argumentName' string.Format ("Item {0} of parameter '{1}' is null."' index' argumentName)); " is 125.
Long Statement,Remotion.Linq.LinqToSqlAdapter,MappingResolver,C:\repos\re-motion_Relinq-SqlBackend\LinqToSqlAdapter\MappingResolver.cs,ResolveConstantExpression,The length of the statement  "        var primaryKeyValues = primaryKeyMembers.Select (member => Expression.Constant (member.MemberAccessor.GetBoxedValue (constantExpression.Value)' member.Type)).ToArray(); " is 168.
Long Statement,Remotion.Linq.LinqToSqlAdapter,MappingResolver,C:\repos\re-motion_Relinq-SqlBackend\LinqToSqlAdapter\MappingResolver.cs,ResolveTypeCheck,The length of the statement  "        throw new UnmappedItemException ("Cannot perform a type check for type " + desiredType + " - there is no inheritance code for this type."); " is 139.
Long Statement,Remotion.Linq.LinqToSqlAdapter,MappingResolver,C:\repos\re-motion_Relinq-SqlBackend\LinqToSqlAdapter\MappingResolver.cs,GetDataMember,The length of the statement  "        throw new UnmappedItemException ("Cannot resolve member: " + member.DeclaringType.FullName + "." + member.Name + " is not a mapped member"); " is 140.
Long Statement,Remotion.Linq.LinqToSqlAdapter,MappingResolver,C:\repos\re-motion_Relinq-SqlBackend\LinqToSqlAdapter\MappingResolver.cs,GetDataMember,The length of the statement  "         throw new UnmappedItemException ("Cannot resolve member: " + member.DeclaringType.FullName + "." + member.Name + " is not a mapped member"); " is 140.
Long Statement,Remotion.Linq.LinqToSqlAdapter,MappingResolver,C:\repos\re-motion_Relinq-SqlBackend\LinqToSqlAdapter\MappingResolver.cs,CreateResolvedJoinInfo,The length of the statement  "      // If needed' implement by using compounds (NewExpressions with named arguments' see NamedExpression.CreateNewExpressionWithNamedArguments.) " is 140.
Long Statement,Remotion.Linq.LinqToSqlAdapter,MappingResolver,C:\repos\re-motion_Relinq-SqlBackend\LinqToSqlAdapter\MappingResolver.cs,CreateResolvedJoinInfo,The length of the statement  "      var joinCondition = ConversionUtility.MakeBinaryWithOperandConversion (ExpressionType.Equal' leftColumn' rightColumn' false' null); " is 131.
Long Statement,Remotion.Linq.LinqToSqlAdapter,MappingResolver,C:\repos\re-motion_Relinq-SqlBackend\LinqToSqlAdapter\MappingResolver.cs,ResolveMember,The length of the statement  "      // If needed' implement by using compounds (NewExpressions with named arguments' see NamedExpression.CreateNewExpressionWithNamedArguments.) " is 140.
Long Statement,Remotion.Linq.LinqToSqlAdapter,MappingResolver,C:\repos\re-motion_Relinq-SqlBackend\LinqToSqlAdapter\MappingResolver.cs,CreateIdentityExpression,The length of the statement  "          throw new NotSupportedException (string.Format ("Entities without identity members are not supported by re-linq. ({0})"' entityType)); " is 134.
Long Statement,Remotion.Linq.LinqToSqlAdapter,MappingResolver,C:\repos\re-motion_Relinq-SqlBackend\LinqToSqlAdapter\MappingResolver.cs,CreateIdentityExpression,The length of the statement  "          throw new NotSupportedException (string.Format ("Primary keys with more than 2 members are not supported. ({0})"' entityType)); " is 127.
Long Statement,Remotion.Linq.LinqToSqlAdapter,MappingResolver,C:\repos\re-motion_Relinq-SqlBackend\LinqToSqlAdapter\MappingResolver.cs,CreateIdentityExpression,The length of the statement  "      var ctor = genericTupleType.MakeGenericType (primaryKeyValues.Select (e => e.Type).ToArray ()).GetConstructors ().Single (); " is 124.
Long Statement,Remotion.Linq.LinqToSqlAdapter,QueryExecutor,C:\repos\re-motion_Relinq-SqlBackend\LinqToSqlAdapter\QueryExecutor.cs,GenerateSqlCommand,The length of the statement  "      var preparationStage = new DefaultSqlPreparationStage (_methodCallTransformerProvider' _resultOperatorHandlerRegistry' generator); " is 130.
Long Statement,Remotion.Linq.LinqToSqlAdapter,RowWrapper,C:\repos\re-motion_Relinq-SqlBackend\LinqToSqlAdapter\RowWrapper.cs,GetEntity,The length of the statement  "      var entityMembersWithColumnIDs = entityMembers.Select ((member' index) => new { Member = member' ColumnID = columnIDs[index] }); " is 128.
Long Statement,Remotion.Linq.LinqToSqlAdapter,RowWrapper,C:\repos\re-motion_Relinq-SqlBackend\LinqToSqlAdapter\RowWrapper.cs,GetEntity,The length of the statement  "      var relevantMembers = entityMembersWithColumnIDs.Where (tuple => tuple.Member.Member.DeclaringType.IsAssignableFrom (instanceType)); " is 132.
Magic Number,Remotion.Linq.LinqToSqlAdapter,MappingResolver,C:\repos\re-motion_Relinq-SqlBackend\LinqToSqlAdapter\MappingResolver.cs,ResolveTableInfo,The following statement contains a magic number: var tableName = table.TableName.StartsWith ("dbo.") ? table.TableName.Substring (4) : table.TableName;
Magic Number,Remotion.Linq.LinqToSqlAdapter,MappingResolver,C:\repos\re-motion_Relinq-SqlBackend\LinqToSqlAdapter\MappingResolver.cs,CreateIdentityExpression,The following statement contains a magic number: switch (primaryKeyValues.Length)        {          case 0:            throw new NotSupportedException (string.Format ("Entities without identity members are not supported by re-linq. ({0})"' entityType));          case 1:            return primaryKeyValues.Single ();          case 2:            genericTupleType = typeof (CompoundIdentityTuple<'>);            break;          default:            throw new NotSupportedException (string.Format ("Primary keys with more than 2 members are not supported. ({0})"' entityType));        }
Magic Number,Remotion.Linq.LinqToSqlAdapter,QueryResultRetriever,C:\repos\re-motion_Relinq-SqlBackend\LinqToSqlAdapter\QueryResultRetriever.cs,AddParametersToCommand,The following statement contains a magic number: foreach (var commandParameter in parameters)        {          var dataParameter = command.CreateParameter();          dataParameter.ParameterName = commandParameter.Name;          dataParameter.Value = commandParameter.Value;            if (commandParameter.Value is decimal || commandParameter.Value is decimal?)          {            dataParameter.Precision = 33;            dataParameter.Scale = 4;          }            command.Parameters.Add (dataParameter);        }
Magic Number,Remotion.Linq.LinqToSqlAdapter,QueryResultRetriever,C:\repos\re-motion_Relinq-SqlBackend\LinqToSqlAdapter\QueryResultRetriever.cs,AddParametersToCommand,The following statement contains a magic number: foreach (var commandParameter in parameters)        {          var dataParameter = command.CreateParameter();          dataParameter.ParameterName = commandParameter.Name;          dataParameter.Value = commandParameter.Value;            if (commandParameter.Value is decimal || commandParameter.Value is decimal?)          {            dataParameter.Precision = 33;            dataParameter.Scale = 4;          }            command.Parameters.Add (dataParameter);        }
