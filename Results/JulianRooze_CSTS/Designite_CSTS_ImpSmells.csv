Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CSTS,Generator,C:\repos\JulianRooze_CSTS\src\CSTS\Generator.cs,GetTypeScriptType,Cyclomatic complexity of the method is 14
Long Parameter List,CSTS,GeneratorOptions,C:\repos\JulianRooze_CSTS\src\CSTS\GeneratorOptions.cs,GeneratorOptions,The method has 5 parameters.
Long Parameter List,CSTS,TypeNameGenerator,C:\repos\JulianRooze_CSTS\src\CSTS\TypeNameGenerator.cs,TypeNameGenerator,The method has 7 parameters.
Long Statement,CSTS,ClassDefinitionsGenerator,C:\repos\JulianRooze_CSTS\src\CSTS\ClassDefinitionsGenerator.cs,RenderModule,The length of the statement  "	var moduleBuffer = new IndentedStringBuilder (module.ModuleMembers.Count * 256' _options.CodeGenerationOptions.IndentationCharacter' _options.CodeGenerationOptions.IndentationIncrementAmount); " is 192.
Long Statement,CSTS,ClassDefinitionsGenerator,C:\repos\JulianRooze_CSTS\src\CSTS\ClassDefinitionsGenerator.cs,RenderModule,The length of the statement  "	moduleBuffer.AppendLine ("{1}module {0} {{"' module.Module' _options.CodeGenerationOptions.GenerateExternalModules ? "export " : ""); " is 133.
Long Statement,CSTS,ClassDefinitionsGenerator,C:\repos\JulianRooze_CSTS\src\CSTS\ClassDefinitionsGenerator.cs,Render,The length of the statement  "	sb.AppendLine ("export {2} {0}{1} {3}{{"' _typeNameGenerator.GetTypeName (type)' RenderBaseType (type)' interfaceType == null ? "class" : "interface"' RenderInterfaces (type)); " is 176.
Long Statement,CSTS,ClassDefinitionsGenerator,C:\repos\JulianRooze_CSTS\src\CSTS\ClassDefinitionsGenerator.cs,Render,The length of the statement  "	sb.AppendLine ("{0} : {1}{2}; {3}"' p.Property.Name' _moduleNameGenerator.GetModuleName ((dynamic)p.Type)' _typeNameGenerator.GetTypeName ((dynamic)p.Type)' _propertyCommenter.GetPropertyCommentPostfixed (p)); " is 209.
Long Statement,CSTS,ClassDefinitionsGenerator,C:\repos\JulianRooze_CSTS\src\CSTS\ClassDefinitionsGenerator.cs,RenderInterfaces,The length of the statement  "	return string.Format ("implements {0} "' string.Join ("' "' type.ImplementedInterfaces.Select (i => string.Format ("{0}{1}"' _moduleNameGenerator.GetModuleName ((dynamic)i)' _typeNameGenerator.GetTypeName ((dynamic)i))))); " is 222.
Long Statement,CSTS,ClassDefinitionsGenerator,C:\repos\JulianRooze_CSTS\src\CSTS\ClassDefinitionsGenerator.cs,RenderBaseType,The length of the statement  "	var baseType = string.Format (" extends {0}{1}"' _moduleNameGenerator.GetModuleName ((dynamic)type.BaseType)' _typeNameGenerator.GetTypeName ((dynamic)type.BaseType)); " is 167.
Long Statement,CSTS,InterfaceDefinitionsGenerator,C:\repos\JulianRooze_CSTS\src\CSTS\InterfaceDefinitionsGenerator.cs,Render,The length of the statement  "	_sb.AppendLine ("{0}{3} : {1}{2}; {4}"' p.Property.Name' _moduleNameGenerator.GetModuleName ((dynamic)p.Type)' _typeNameGenerator.GetTypeName ((dynamic)p.Type)' HandleOptional (p.Type)' _propertyCommenter.GetPropertyCommentPostfixed (p)); " is 238.
Long Statement,CSTS,InterfaceDefinitionsGenerator,C:\repos\JulianRooze_CSTS\src\CSTS\InterfaceDefinitionsGenerator.cs,RenderBaseType,The length of the statement  "	var baseType = string.Format (" extends {0}"' string.Join ("' "' baseTypes.Select (b => string.Format ("{0}{1}"' _moduleNameGenerator.GetModuleName ((dynamic)b)' _typeNameGenerator.GetTypeName ((dynamic)b))))); " is 210.
Long Statement,CSTS,PropertyCommenter,C:\repos\JulianRooze_CSTS\src\CSTS\PropertyCommenter.cs,GetPropertyCommentPostfixed,The length of the statement  "	var obsolete = p.Property.GetCustomAttributes (typeof(ObsoleteAttribute)' false).FirstOrDefault () as ObsoleteAttribute; " is 120.
Long Statement,CSTS,Generator,C:\repos\JulianRooze_CSTS\src\CSTS\Generator.cs,ProcessProperties,The length of the statement  "		var type = property.MemberType == MemberTypes.Property ? ((PropertyInfo)property).PropertyType : ((FieldInfo)property).FieldType; " is 129.
Long Statement,CSTS,Generator,C:\repos\JulianRooze_CSTS\src\CSTS\Generator.cs,ProcessInterfaces,The length of the statement  "	var implementedInterfaces = t.BaseType != null ? t.GetInterfaces ().Except (t.BaseType.GetInterfaces ()) : t.GetInterfaces (); " is 126.
Long Statement,CSTS,Generator,C:\repos\JulianRooze_CSTS\src\CSTS\Generator.cs,ProcessInterfaces,The length of the statement  "		TypeScriptType processedInterfaceType = ProcessTypeScriptType (implementedInterface' (dynamic)GetTypeScriptType (implementedInterface)); " is 136.
Long Statement,CSTS,Generator,C:\repos\JulianRooze_CSTS\src\CSTS\Generator.cs,GetTypeScriptType,The length of the statement  "	else if (TypeHelper.Is (type' typeof(int)' typeof(decimal)' typeof(double)' typeof(long)' typeof(float)' typeof(short)' typeof(byte)' typeof(uint)' typeof(ushort)' typeof(ulong)' typeof(sbyte))) { " is 196.
Long Statement,CSTS,Generator,C:\repos\JulianRooze_CSTS\src\CSTS\Generator.cs,GenerateMapping,The length of the statement  "	var groupedByModule = _processedTypes.Values.OfType<IModuleMember> ().GroupBy (m => m.Module).Select (m => new TypeScriptModule { " is 129.
Long Statement,CSTS,TypeNameGenerator,C:\repos\JulianRooze_CSTS\src\CSTS\TypeNameGenerator.cs,GetTypeName,The length of the statement  "	return string.Format ("{{ [ key : {2}{0} ] : {3}{1} }}"' GetTypeName ((dynamic)tst.ElementKeyType)' GetTypeName ((dynamic)tst.ElementValueType)' _moduleNameGenerator.GetModuleName ((dynamic)tst.ElementKeyType)' _moduleNameGenerator.GetModuleName ((dynamic)tst.ElementValueType)); " is 279.
Long Statement,CSTS,TypeNameGenerator,C:\repos\JulianRooze_CSTS\src\CSTS\TypeNameGenerator.cs,GetTypeName,The length of the statement  "		typeName = string.Format ("{0}<{1}>"' nameOverride ?? _genericTypeReplacer.Replace (type.Name' "")' string.Join ("' "' tst.GenericParameters.Select (p => GetGenericParameterName (p)))); " is 185.
Long Statement,CSTS,TypeNameGenerator,C:\repos\JulianRooze_CSTS\src\CSTS\TypeNameGenerator.cs,GetTypeName,The length of the statement  "		typeName = string.Format ("{0}<{1}>"' nameOverride ?? _genericTypeReplacer.Replace (type.Name' "")' string.Join ("' "' genericParams.Select (p => _moduleNameGenerator.GetModuleName ((dynamic)p) + GetTypeName ((dynamic)p)))); " is 224.
Long Statement,CSTS,TypeNameGenerator,C:\repos\JulianRooze_CSTS\src\CSTS\TypeNameGenerator.cs,GetGenericParameterName,The length of the statement  "		// https://typescript.codeplex.com/wikipage?title=Known%20breaking%20changes%20between%200.8%20and%200.9&referringTitle=Documentation " is 133.
Long Statement,CSTS,TypeNameGenerator,C:\repos\JulianRooze_CSTS\src\CSTS\TypeNameGenerator.cs,GetGenericParameterName,The length of the statement  "		string value = string.Format ("{0} extends {1}{2}"' p.ClrGenericArgument.Name' _moduleNameGenerator.GetModuleName ((dynamic)arg)' GetTypeName ((dynamic)arg)); " is 158.
Long Statement,CSTS,TypeNameGenerator,C:\repos\JulianRooze_CSTS\src\CSTS\TypeNameGenerator.cs,GetGenericParameterName,The length of the statement  "			value = value.Replace (string.Format ("<{0}>"' p.ClrGenericArgument.Name)' "<any>").Replace (string.Format ("{0}[]"' p.ClrGenericArgument.Name)' "any[]"); " is 154.
Magic Number,CSTS,ClassDefinitionsGenerator,C:\repos\JulianRooze_CSTS\src\CSTS\ClassDefinitionsGenerator.cs,ClassDefinitionsGenerator,The following statement contains a magic number: _sb = new StringBuilder (modules.Sum (m => m.ModuleMembers.Count) * 256);  
Magic Number,CSTS,InterfaceDefinitionsGenerator,C:\repos\JulianRooze_CSTS\src\CSTS\InterfaceDefinitionsGenerator.cs,InterfaceDefinitionsGenerator,The following statement contains a magic number: _sb = new IndentedStringBuilder (modules.Sum (m => m.ModuleMembers.Count) * 256' options.CodeGenerationOptions.IndentationCharacter' options.CodeGenerationOptions.IndentationIncrementAmount);  
Magic Number,CSTS,TypeHelper,C:\repos\JulianRooze_CSTS\src\CSTS\TypeHelper.cs,GetTypeInsideEnumerable,The following statement contains a magic number: if (getEnumeratorMethod.ReturnType.IsGenericType) {  	var args = getEnumeratorMethod.ReturnType.GetGenericArguments ();  	if (typeof(IDictionary).IsAssignableFrom (type) && args.Length == 2) {  		return typeof(KeyValuePair<' >).MakeGenericType (args [0]' args [1]);  	}  	return args.First ();  }  else if (type.IsArray) {  	return type.GetElementType ();  }  
Magic Number,CSTS,TypeHelper,C:\repos\JulianRooze_CSTS\src\CSTS\TypeHelper.cs,GetTypeInsideEnumerable,The following statement contains a magic number: if (typeof(IDictionary).IsAssignableFrom (type) && args.Length == 2) {  	return typeof(KeyValuePair<' >).MakeGenericType (args [0]' args [1]);  }  
Magic Number,CSTS,Generator,C:\repos\JulianRooze_CSTS\src\CSTS\Generator.cs,ProcessTypeScriptType,The following statement contains a magic number: if (tst.ClrType.IsGenericType) {  	var args = tst.ClrType.GetGenericArguments ();  	if (typeof(IDictionary).IsAssignableFrom (tst.ClrType) && args.Length == 2) {  		var keyTst = GetTypeScriptType (args [0]);  		tst.ElementKeyType = ProcessTypeScriptType (args [0]' (dynamic)keyTst);  		var valueTst = GetTypeScriptType (args [1]);  		tst.ElementValueType = ProcessTypeScriptType (args [1]' (dynamic)valueTst);  	}  }  
Magic Number,CSTS,Generator,C:\repos\JulianRooze_CSTS\src\CSTS\Generator.cs,ProcessTypeScriptType,The following statement contains a magic number: if (typeof(IDictionary).IsAssignableFrom (tst.ClrType) && args.Length == 2) {  	var keyTst = GetTypeScriptType (args [0]);  	tst.ElementKeyType = ProcessTypeScriptType (args [0]' (dynamic)keyTst);  	var valueTst = GetTypeScriptType (args [1]);  	tst.ElementValueType = ProcessTypeScriptType (args [1]' (dynamic)valueTst);  }  
