Implementation smell,Namespace,Class,File,Method,Description
Long Statement,IronSharp.Core,IronDotConfigManager,C:\repos\iron-io_iron_dotnet\src\IronSharp.Core\Config\IronDotConfigManager.cs,ApplyOverrides,The length of the statement  "            targetConfig.ProjectId = string.IsNullOrEmpty(overrideConfig.ProjectId) ? targetConfig.ProjectId : overrideConfig.ProjectId; " is 124.
Long Statement,IronSharp.Core,IronDotConfigManager,C:\repos\iron-io_iron_dotnet\src\IronSharp.Core\Config\IronDotConfigManager.cs,ApplyOverrides,The length of the statement  "            targetConfig.ApiVersion = overrideConfig.ApiVersion == default(int) ? targetConfig.ApiVersion : overrideConfig.ApiVersion; " is 122.
Empty Catch Block,IronSharp.Core,ExtensionsForString,C:\repos\iron-io_iron_dotnet\src\IronSharp.Core\Extensions\ExtensionsForString.cs,As,The method has an empty catch block.
Magic Number,IronSharp.Core,ExtensionsForString,C:\repos\iron-io_iron_dotnet\src\IronSharp.Core\Extensions\ExtensionsForString.cs,FormatWithNamedArgs,The following statement contains a magic number: for (int i = 0; i < matches.Count; i++)              {                  string name = matches[i].Value;                    string formatString = "{0}";                  string key = name.Trim(new[] {'{'' '}'});                    if (key.Contains(":"))                  {                      string[] parts = key.Split(new[] {':'}' StringSplitOptions.RemoveEmptyEntries);                      if (parts.Length == 2)                      {                          key = parts[0];                          formatString = string.Concat("{0:"' parts[1]' "}");                      }                  }                    if (args.ContainsKey(key))                  {                      string value = string.Format(formatString' args[key]);                      if (valueEncoder != null)                      {                          value = valueEncoder.Invoke(value);                      }                      format = format.Replace(name' value);                  }              }
Magic Number,IronSharp.Core,IronClientConfig,C:\repos\iron-io_iron_dotnet\src\IronSharp.Core\Config\IronClientConfig.cs,CreateDefaultIronSharpConfig,The following statement contains a magic number: return new IronSharpConfig              {                  BackoffFactor = 25              };
Magic Number,IronSharp.Core,HttpClientOptions,C:\repos\iron-io_iron_dotnet\src\IronSharp.Core\Config\HttpClientOptions.cs,HttpClientOptions,The following statement contains a magic number: RetryLimit = 4;
Missing Default,IronSharp.Core,IronDotConfigManager,C:\repos\iron-io_iron_dotnet\src\IronSharp.Core\Config\IronDotConfigManager.cs,GetProductOverride,The following switch statement is missing a default case: switch (product)              {                  case IronProduct.IronCache:                      productOverride = config.IronCache;                      break;                  case IronProduct.IronMQ:                      productOverride = config.IronMQ;                      break;                  case IronProduct.IronWorker:                      productOverride = config.IronWoker;                      break;              }
