Implementation smell,Namespace,Class,File,Method,Description
Long Method,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The method has 151 lines of code.
Complex Method,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,Init,Cyclomatic complexity of the method is 8
Complex Method,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,Cyclomatic complexity of the method is 23
Complex Method,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,Poll,Cyclomatic complexity of the method is 10
Complex Method,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ReceiveData,Cyclomatic complexity of the method is 16
Long Parameter List,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,NV10Controller,The method has 8 parameters.
Long Statement,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ExchangeNewKeys,The length of the statement  "			logFile ("Set generator error' deviceID: " + res._deviceID + "' response type: " + res._type + "' response data " + res.getDataString ()); " is 138.
Long Statement,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ExchangeNewKeys,The length of the statement  "			logFile ("Set Modulus error' deviceID: " + res._deviceID + "' response type: " + res._type + "' response data " + res.getDataString ()); " is 136.
Long Statement,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ExchangeNewKeys,The length of the statement  "			logFile ("Set exchange key error' deviceID: " + res._deviceID + "' response type: " + res._type + "' response data " + res.getDataString ()); " is 141.
Long Statement,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,Init,The length of the statement  "			logFile ("Sync error' deviceID: " + res._deviceID + "' response type: " + res._type + "' response data " + res.getDataString ()); " is 129.
Long Statement,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,Init,The length of the statement  "		//logFile("Get Serial error' deviceID: " + res._deviceID + "' response type: " + res._type + "' response data " + res.getDataString()); " is 135.
Long Statement,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,Init,The length of the statement  "				logFile ("Sync error' deviceID: " + channelValueReply._deviceID + "' response type: " + channelValueReply._type + "' response data " + channelValueReply.getDataString ()); " is 171.
Long Statement,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,Init,The length of the statement  "			logFile ("Set channel inhibits error' deviceID: " + res._deviceID + "' response type: " + res._type + "' response data " + res.getDataString ()); " is 145.
Long Statement,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,Init,The length of the statement  "			logFile ("Enable error' deviceID: " + res._deviceID + "' response type: " + res._type + "' response data " + res.getDataString ()); " is 131.
Long Statement,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The length of the statement  "			d.Currency = "" + (char)channelCurrencyTemp [0 + (i * 3)] + (char)channelCurrencyTemp [1 + (i * 3)] + (char)channelCurrencyTemp [2 + (i * 3)]; " is 142.
Long Statement,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,Reset,The length of the statement  "			logFile ("Reset error' deviceID: " + res._deviceID + "' response type: " + res._type + "' response data " + res.getDataString ()); " is 130.
Long Statement,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,Enable,The length of the statement  "			logFile ("Enable error' deviceID: " + res._deviceID + "' response type: " + res._type + "' response data " + res.getDataString ()); " is 131.
Long Statement,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,Poll,The length of the statement  "						logFile ("Event: " + evt.EventType.ToString () + "' throwing deviceID: " + replyData._deviceID + "' response type: " + replyData._type + "' response data " + replyData.getDataString ()); " is 186.
Long Statement,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,Poll,The length of the statement  "						logFile ("Poll error' deviceID: " + replyData._deviceID + "' response type: " + replyData._type + "' response data " + replyData.getDataString ()); " is 147.
Complex Conditional,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ReceiveData,The conditional expression  "(i > 0) && (inData [i] == SYNC_BYTE) && (inData [i - 1] == SYNC_BYTE) && (!added)"  is complex.
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,initPort,The following statement contains a magic number: try {  	_port = new SerialPort (_portName' 9600' Parity.None' 8' StopBits.Two);  	_port.ReadTimeout = NV10_TIMEOUT_READ;  	_port.WriteTimeout = NV10_TIMEOUT_WRITE;  	_port.RtsEnable = false;  	_port.Handshake = Handshake.None;  	_port.DiscardNull = false;  	_port.DtrEnable = false;  	_port.Open ();  }  catch (Exception ex) {  	logFile ("Exception " + ex.GetType ().Name + "' " + ex.Message);  	logFile (ex.StackTrace);  	ThrowException (ex);  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,initPort,The following statement contains a magic number: try {  	_port = new SerialPort (_portName' 9600' Parity.None' 8' StopBits.Two);  	_port.ReadTimeout = NV10_TIMEOUT_READ;  	_port.WriteTimeout = NV10_TIMEOUT_WRITE;  	_port.RtsEnable = false;  	_port.Handshake = Handshake.None;  	_port.DiscardNull = false;  	_port.DtrEnable = false;  	_port.Open ();  }  catch (Exception ex) {  	logFile ("Exception " + ex.GetType ().Name + "' " + ex.Message);  	logFile (ex.StackTrace);  	ThrowException (ex);  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,initPort,The following statement contains a magic number: _port = new SerialPort (_portName' 9600' Parity.None' 8' StopBits.Two);  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,initPort,The following statement contains a magic number: _port = new SerialPort (_portName' 9600' Parity.None' 8' StopBits.Two);  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,closePort,The following statement contains a magic number: try {  	if (_port == null) {  		_port = new SerialPort (_portName' 9600' Parity.None' 8' StopBits.Two);  	}  	if (_port.IsOpen) {  		_port.Close ();  	}  	_port.Dispose ();  }  catch (Exception ex) {  	logFile ("Exception " + ex.GetType ().Name + "' " + ex.Message);  	logFile (ex.StackTrace);  	ThrowException (ex);  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,closePort,The following statement contains a magic number: try {  	if (_port == null) {  		_port = new SerialPort (_portName' 9600' Parity.None' 8' StopBits.Two);  	}  	if (_port.IsOpen) {  		_port.Close ();  	}  	_port.Dispose ();  }  catch (Exception ex) {  	logFile ("Exception " + ex.GetType ().Name + "' " + ex.Message);  	logFile (ex.StackTrace);  	ThrowException (ex);  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,closePort,The following statement contains a magic number: if (_port == null) {  	_port = new SerialPort (_portName' 9600' Parity.None' 8' StopBits.Two);  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,closePort,The following statement contains a magic number: if (_port == null) {  	_port = new SerialPort (_portName' 9600' Parity.None' 8' StopBits.Two);  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,closePort,The following statement contains a magic number: _port = new SerialPort (_portName' 9600' Parity.None' 8' StopBits.Two);  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,closePort,The following statement contains a magic number: _port = new SerialPort (_portName' 9600' Parity.None' 8' StopBits.Two);  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ExchangeNewKeys,The following statement contains a magic number: try {  	//2. Generator  	logFile ("Set generator start");  	_crypter = new NV10CryptManager ();  	_crypter.Inited = false;  	NV10Request setgeneratorReq = NV10Request.NV10RequestTemplates.NV10SetGenerator;  	setgeneratorReq.AddSecurityBytes (_crypter.Generator.ToByteArray ());  	NV10Response res = SendData (setgeneratorReq);  	if (!res.IsOK) {  		logFile ("Set generator error' deviceID: " + res._deviceID + "' response type: " + res._type + "' response data " + res.getDataString ());  		throw new Exception ("SSP slave answer invalid: generator");  	}  	logFile ("Set generator done");  	//3. Modulus  	logFile ("Set modulus start");  	NV10Request setModulusReq = NV10Request.NV10RequestTemplates.NV10SetModulus;  	setModulusReq.AddSecurityBytes (_crypter.Modulus.ToByteArray ());  	res = SendData (setModulusReq);  	if (!res.IsOK) {  		logFile ("Set Modulus error' deviceID: " + res._deviceID + "' response type: " + res._type + "' response data " + res.getDataString ());  		throw new Exception ("SSP slave answer invalid: modulus");  	}  	logFile ("Set modulus done");  	//4. Exchange key  	logFile ("Set exchange key start");  	NV10Request setKeyReq = NV10Request.NV10RequestTemplates.NV10SetExchangeKey;  	setKeyReq.AddSecurityBytes (_crypter.HostExchangeKey.ToByteArray ());  	res = SendData (setKeyReq);  	if (!res.IsOK) {  		logFile ("Set exchange key error' deviceID: " + res._deviceID + "' response type: " + res._type + "' response data " + res.getDataString ());  		throw new Exception ("SSP slave answer invalid: exchange key");  	}  	logFile ("Res data: " + res._data);  	logFile ("Res dataLen: " + res._dataLength);  	logFile ("Res deviceID: " + res._deviceID);  	logFile ("Res _type: " + res._type.ToString ());  	_crypter.SolveSynchKey (res.getSecurityData ());  	System.Threading.Thread.Sleep (2000);  	_crypter.Inited = true;  	logFile ("Set exchange key done");  }  catch (Exception ex) {  	ThrowException (ex);  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ExchangeNewKeys,The following statement contains a magic number: System.Threading.Thread.Sleep (2000);  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,Init,The following statement contains a magic number: try {  	logFile ("Init start");  	closePort ();  	initPort ();  	_seq = true;  	//1. Sync  	logFile ("Send sync");  	NV10Response res = SendData (NV10Request.NV10RequestTemplates.NV10SyncRequest);  	if (!res.IsOK) {  		logFile ("Sync error' deviceID: " + res._deviceID + "' response type: " + res._type + "' response data " + res.getDataString ());  		throw new Exception ("SSP slave answer invalid: not synched");  	}  	logFile ("Sync done");  	if (!_encryptSSP) {  		ExchangeNewKeys ();  	}  	//5. GetSerial  	logFile ("Get serial start");  	NV10Response reply = SendData (NV10Request.NV10RequestTemplates.NV10GetSerial);  	//logFile("Get Serial error' deviceID: " + res._deviceID + "' response type: " + res._type + "' response data " + res.getDataString());  	_deviceSerial = reply.Serial;  	logFile ("Get serial done");  	//6. getSetup  	logFile ("Get setup start");  	NV10Response setupReply = SendData (NV10Request.NV10RequestTemplates.NV10GetSetup);  	List<Byte> bl = new List<Byte> ();  	bl.Add (0x7f);  	bl.AddRange (setupReply._data);  	ParseSetupResponse (bl.ToArray ());  	logFile ("Get setup done");  	//7. ChannelValues  	if (_protocol < 6) {  		logFile ("Channel values start");  		NV10Response channelValueReply = SendData (NV10Request.NV10RequestTemplates.NV10ChannelValues);  		if (!channelValueReply.IsOK) {  			logFile ("Sync error' deviceID: " + channelValueReply._deviceID + "' response type: " + channelValueReply._type + "' response data " + channelValueReply.getDataString ());  			throw new Exception ("SSP slave answer invalid: not synched");  		}  		ParseChannelValues (channelValueReply._data);  		logFile ("Channel values done");  	}  	//8. Inhibits  	logFile ("Inhibits start");  	NV10Request inhibitsReq = NV10Request.NV10RequestTemplates.NV10SetChannelInhibits;  	inhibitsReq.AddDataBytes (new Byte[] {  		0xff'  		0xff  	});  	res = SendData (inhibitsReq);  	if (!res.IsOK) {  		logFile ("Set channel inhibits error' deviceID: " + res._deviceID + "' response type: " + res._type + "' response data " + res.getDataString ());  		throw new Exception ("SSP slave answer invalid: set channel inhibits");  	}  	logFile ("Inhibits done");  	//9. Enable  	logFile ("Enable start");  	res = SendData (NV10Request.NV10RequestTemplates.NV10Enable);  	if (!res.IsOK) {  		logFile ("Enable error' deviceID: " + res._deviceID + "' response type: " + res._type + "' response data " + res.getDataString ());  		throw new Exception ("SSP slave answer invalid: not enabled");  	}  	logFile ("Enable done");  }  catch (Exception ex) {  	ThrowException (ex);  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,Init,The following statement contains a magic number: if (_protocol < 6) {  	logFile ("Channel values start");  	NV10Response channelValueReply = SendData (NV10Request.NV10RequestTemplates.NV10ChannelValues);  	if (!channelValueReply.IsOK) {  		logFile ("Sync error' deviceID: " + channelValueReply._deviceID + "' response type: " + channelValueReply._type + "' response data " + channelValueReply.getDataString ());  		throw new Exception ("SSP slave answer invalid: not synched");  	}  	ParseChannelValues (channelValueReply._data);  	logFile ("Channel values done");  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseChannelValues,The following statement contains a magic number: for (int index = 1; index <= noChannels; index++) {  	int channelValue = channelData [index];  	ChannelData d = new ChannelData ();  	d.Channel = (byte)(index);  	d.Currency = _country;  	d.Level = 0;  	d.Recycling = false;  	if (!_ignoreRealValueMultiplyer) {  		d.Value = channelValue * m_ValueMultiplier * m_RealValueMultiplier;  	}  	else {  		d.Value = channelValue * m_ValueMultiplier * 100;  	}  	m_UnitDataList.Add (d);  	logFile ("Channel ID: " + d.Channel + "' value: " + d.Value + " " + _country);  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseChannelValues,The following statement contains a magic number: if (!_ignoreRealValueMultiplyer) {  	d.Value = channelValue * m_ValueMultiplier * m_RealValueMultiplier;  }  else {  	d.Value = channelValue * m_ValueMultiplier * 100;  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseChannelValues,The following statement contains a magic number: d.Value = channelValue * m_ValueMultiplier * 100;  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: while (index <= 5) {  	logMsg += (char)setupData [index++];  	if (index == 4)  		logMsg += ".";  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: while (index <= 5) {  	logMsg += (char)setupData [index++];  	if (index == 4)  		logMsg += ".";  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: if (index == 4)  	logMsg += ".";  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: value = value << 8;  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: value = value << 8;  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: index = 13 + m_NumberOfChannels;  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: index = 13 + (m_NumberOfChannels * 2);  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: index = 13 + (m_NumberOfChannels * 2);  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: m_RealValueMultiplier = setupData [index + 2];  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: m_RealValueMultiplier += setupData [index + 1] << 8;  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: m_RealValueMultiplier += setupData [index] << 16;  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: if (m_RealValueMultiplier == 0) {  	_ignoreRealValueMultiplyer = true;  	m_RealValueMultiplier = 100;  	logFile ("Real value multiplyer ZERO' forcing " + m_RealValueMultiplier + "!");  }  else {  	_ignoreRealValueMultiplyer = false;  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: m_RealValueMultiplier = 100;  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: index += 3;  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: index = 16 + (m_NumberOfChannels * 2);  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: index = 16 + (m_NumberOfChannels * 2);  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: if (_protocol >= 6) {  	// channel currency country code (table 17+(n*2) to 17+(n*5))  	index = 17 + (m_NumberOfChannels * 2);  	int sectionEnd = 17 + (m_NumberOfChannels * 5);  	int count = 0;  	byte[] channelCurrencyTemp = new byte[3 * m_NumberOfChannels];  	while (index < sectionEnd) {  		displayString += "Channel " + ((count / 3) + 1) + "' currency: ";  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		displayString += "\r\n";  	}  	// expanded channel values (table 17+(n*5) to 17+(n*9))  	index = sectionEnd;  	displayString += "Expanded channel values:\r\n";  	sectionEnd = 17 + (m_NumberOfChannels * 9);  	int n = 0;  	count = 0;  	int[] channelValuesTemp = new int[m_NumberOfChannels];  	while (index < sectionEnd) {  		n = BitConverter.ToInt32 (setupData' index);  		channelValuesTemp [count] = n;  		index += 4;  		displayString += "Channel " + ++count + "' value = " + n + "\r\n";  	}  	logFile ("Protocol 6+ Channel values");  	// Create list entry for each channel  	m_UnitDataList.Clear ();  	// clear old table  	for (byte i = 0; i < m_NumberOfChannels; i++) {  		ChannelData d = new ChannelData ();  		d.Channel = i;  		d.Channel++;  		// Offset from array index by 1  		d.Value = channelValuesTemp [i] * m_ValueMultiplier * m_RealValueMultiplier;  		d.Currency = "" + (char)channelCurrencyTemp [0 + (i * 3)] + (char)channelCurrencyTemp [1 + (i * 3)] + (char)channelCurrencyTemp [2 + (i * 3)];  		d.Level = 0;  		// Can't store notes   		d.Recycling = false;  		// Can't recycle notes  		logFile ("Channel ID: " + d.Channel + "' value: " + (d.Value) + " " + d.Currency);  		m_UnitDataList.Add (d);  	}  	// Sort the list of data by the value.  	m_UnitDataList.Sort (delegate (ChannelData d1' ChannelData d2) {  		return d1.Value.CompareTo (d2.Value);  	});  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: if (_protocol >= 6) {  	// channel currency country code (table 17+(n*2) to 17+(n*5))  	index = 17 + (m_NumberOfChannels * 2);  	int sectionEnd = 17 + (m_NumberOfChannels * 5);  	int count = 0;  	byte[] channelCurrencyTemp = new byte[3 * m_NumberOfChannels];  	while (index < sectionEnd) {  		displayString += "Channel " + ((count / 3) + 1) + "' currency: ";  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		displayString += "\r\n";  	}  	// expanded channel values (table 17+(n*5) to 17+(n*9))  	index = sectionEnd;  	displayString += "Expanded channel values:\r\n";  	sectionEnd = 17 + (m_NumberOfChannels * 9);  	int n = 0;  	count = 0;  	int[] channelValuesTemp = new int[m_NumberOfChannels];  	while (index < sectionEnd) {  		n = BitConverter.ToInt32 (setupData' index);  		channelValuesTemp [count] = n;  		index += 4;  		displayString += "Channel " + ++count + "' value = " + n + "\r\n";  	}  	logFile ("Protocol 6+ Channel values");  	// Create list entry for each channel  	m_UnitDataList.Clear ();  	// clear old table  	for (byte i = 0; i < m_NumberOfChannels; i++) {  		ChannelData d = new ChannelData ();  		d.Channel = i;  		d.Channel++;  		// Offset from array index by 1  		d.Value = channelValuesTemp [i] * m_ValueMultiplier * m_RealValueMultiplier;  		d.Currency = "" + (char)channelCurrencyTemp [0 + (i * 3)] + (char)channelCurrencyTemp [1 + (i * 3)] + (char)channelCurrencyTemp [2 + (i * 3)];  		d.Level = 0;  		// Can't store notes   		d.Recycling = false;  		// Can't recycle notes  		logFile ("Channel ID: " + d.Channel + "' value: " + (d.Value) + " " + d.Currency);  		m_UnitDataList.Add (d);  	}  	// Sort the list of data by the value.  	m_UnitDataList.Sort (delegate (ChannelData d1' ChannelData d2) {  		return d1.Value.CompareTo (d2.Value);  	});  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: if (_protocol >= 6) {  	// channel currency country code (table 17+(n*2) to 17+(n*5))  	index = 17 + (m_NumberOfChannels * 2);  	int sectionEnd = 17 + (m_NumberOfChannels * 5);  	int count = 0;  	byte[] channelCurrencyTemp = new byte[3 * m_NumberOfChannels];  	while (index < sectionEnd) {  		displayString += "Channel " + ((count / 3) + 1) + "' currency: ";  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		displayString += "\r\n";  	}  	// expanded channel values (table 17+(n*5) to 17+(n*9))  	index = sectionEnd;  	displayString += "Expanded channel values:\r\n";  	sectionEnd = 17 + (m_NumberOfChannels * 9);  	int n = 0;  	count = 0;  	int[] channelValuesTemp = new int[m_NumberOfChannels];  	while (index < sectionEnd) {  		n = BitConverter.ToInt32 (setupData' index);  		channelValuesTemp [count] = n;  		index += 4;  		displayString += "Channel " + ++count + "' value = " + n + "\r\n";  	}  	logFile ("Protocol 6+ Channel values");  	// Create list entry for each channel  	m_UnitDataList.Clear ();  	// clear old table  	for (byte i = 0; i < m_NumberOfChannels; i++) {  		ChannelData d = new ChannelData ();  		d.Channel = i;  		d.Channel++;  		// Offset from array index by 1  		d.Value = channelValuesTemp [i] * m_ValueMultiplier * m_RealValueMultiplier;  		d.Currency = "" + (char)channelCurrencyTemp [0 + (i * 3)] + (char)channelCurrencyTemp [1 + (i * 3)] + (char)channelCurrencyTemp [2 + (i * 3)];  		d.Level = 0;  		// Can't store notes   		d.Recycling = false;  		// Can't recycle notes  		logFile ("Channel ID: " + d.Channel + "' value: " + (d.Value) + " " + d.Currency);  		m_UnitDataList.Add (d);  	}  	// Sort the list of data by the value.  	m_UnitDataList.Sort (delegate (ChannelData d1' ChannelData d2) {  		return d1.Value.CompareTo (d2.Value);  	});  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: if (_protocol >= 6) {  	// channel currency country code (table 17+(n*2) to 17+(n*5))  	index = 17 + (m_NumberOfChannels * 2);  	int sectionEnd = 17 + (m_NumberOfChannels * 5);  	int count = 0;  	byte[] channelCurrencyTemp = new byte[3 * m_NumberOfChannels];  	while (index < sectionEnd) {  		displayString += "Channel " + ((count / 3) + 1) + "' currency: ";  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		displayString += "\r\n";  	}  	// expanded channel values (table 17+(n*5) to 17+(n*9))  	index = sectionEnd;  	displayString += "Expanded channel values:\r\n";  	sectionEnd = 17 + (m_NumberOfChannels * 9);  	int n = 0;  	count = 0;  	int[] channelValuesTemp = new int[m_NumberOfChannels];  	while (index < sectionEnd) {  		n = BitConverter.ToInt32 (setupData' index);  		channelValuesTemp [count] = n;  		index += 4;  		displayString += "Channel " + ++count + "' value = " + n + "\r\n";  	}  	logFile ("Protocol 6+ Channel values");  	// Create list entry for each channel  	m_UnitDataList.Clear ();  	// clear old table  	for (byte i = 0; i < m_NumberOfChannels; i++) {  		ChannelData d = new ChannelData ();  		d.Channel = i;  		d.Channel++;  		// Offset from array index by 1  		d.Value = channelValuesTemp [i] * m_ValueMultiplier * m_RealValueMultiplier;  		d.Currency = "" + (char)channelCurrencyTemp [0 + (i * 3)] + (char)channelCurrencyTemp [1 + (i * 3)] + (char)channelCurrencyTemp [2 + (i * 3)];  		d.Level = 0;  		// Can't store notes   		d.Recycling = false;  		// Can't recycle notes  		logFile ("Channel ID: " + d.Channel + "' value: " + (d.Value) + " " + d.Currency);  		m_UnitDataList.Add (d);  	}  	// Sort the list of data by the value.  	m_UnitDataList.Sort (delegate (ChannelData d1' ChannelData d2) {  		return d1.Value.CompareTo (d2.Value);  	});  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: if (_protocol >= 6) {  	// channel currency country code (table 17+(n*2) to 17+(n*5))  	index = 17 + (m_NumberOfChannels * 2);  	int sectionEnd = 17 + (m_NumberOfChannels * 5);  	int count = 0;  	byte[] channelCurrencyTemp = new byte[3 * m_NumberOfChannels];  	while (index < sectionEnd) {  		displayString += "Channel " + ((count / 3) + 1) + "' currency: ";  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		displayString += "\r\n";  	}  	// expanded channel values (table 17+(n*5) to 17+(n*9))  	index = sectionEnd;  	displayString += "Expanded channel values:\r\n";  	sectionEnd = 17 + (m_NumberOfChannels * 9);  	int n = 0;  	count = 0;  	int[] channelValuesTemp = new int[m_NumberOfChannels];  	while (index < sectionEnd) {  		n = BitConverter.ToInt32 (setupData' index);  		channelValuesTemp [count] = n;  		index += 4;  		displayString += "Channel " + ++count + "' value = " + n + "\r\n";  	}  	logFile ("Protocol 6+ Channel values");  	// Create list entry for each channel  	m_UnitDataList.Clear ();  	// clear old table  	for (byte i = 0; i < m_NumberOfChannels; i++) {  		ChannelData d = new ChannelData ();  		d.Channel = i;  		d.Channel++;  		// Offset from array index by 1  		d.Value = channelValuesTemp [i] * m_ValueMultiplier * m_RealValueMultiplier;  		d.Currency = "" + (char)channelCurrencyTemp [0 + (i * 3)] + (char)channelCurrencyTemp [1 + (i * 3)] + (char)channelCurrencyTemp [2 + (i * 3)];  		d.Level = 0;  		// Can't store notes   		d.Recycling = false;  		// Can't recycle notes  		logFile ("Channel ID: " + d.Channel + "' value: " + (d.Value) + " " + d.Currency);  		m_UnitDataList.Add (d);  	}  	// Sort the list of data by the value.  	m_UnitDataList.Sort (delegate (ChannelData d1' ChannelData d2) {  		return d1.Value.CompareTo (d2.Value);  	});  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: if (_protocol >= 6) {  	// channel currency country code (table 17+(n*2) to 17+(n*5))  	index = 17 + (m_NumberOfChannels * 2);  	int sectionEnd = 17 + (m_NumberOfChannels * 5);  	int count = 0;  	byte[] channelCurrencyTemp = new byte[3 * m_NumberOfChannels];  	while (index < sectionEnd) {  		displayString += "Channel " + ((count / 3) + 1) + "' currency: ";  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		displayString += "\r\n";  	}  	// expanded channel values (table 17+(n*5) to 17+(n*9))  	index = sectionEnd;  	displayString += "Expanded channel values:\r\n";  	sectionEnd = 17 + (m_NumberOfChannels * 9);  	int n = 0;  	count = 0;  	int[] channelValuesTemp = new int[m_NumberOfChannels];  	while (index < sectionEnd) {  		n = BitConverter.ToInt32 (setupData' index);  		channelValuesTemp [count] = n;  		index += 4;  		displayString += "Channel " + ++count + "' value = " + n + "\r\n";  	}  	logFile ("Protocol 6+ Channel values");  	// Create list entry for each channel  	m_UnitDataList.Clear ();  	// clear old table  	for (byte i = 0; i < m_NumberOfChannels; i++) {  		ChannelData d = new ChannelData ();  		d.Channel = i;  		d.Channel++;  		// Offset from array index by 1  		d.Value = channelValuesTemp [i] * m_ValueMultiplier * m_RealValueMultiplier;  		d.Currency = "" + (char)channelCurrencyTemp [0 + (i * 3)] + (char)channelCurrencyTemp [1 + (i * 3)] + (char)channelCurrencyTemp [2 + (i * 3)];  		d.Level = 0;  		// Can't store notes   		d.Recycling = false;  		// Can't recycle notes  		logFile ("Channel ID: " + d.Channel + "' value: " + (d.Value) + " " + d.Currency);  		m_UnitDataList.Add (d);  	}  	// Sort the list of data by the value.  	m_UnitDataList.Sort (delegate (ChannelData d1' ChannelData d2) {  		return d1.Value.CompareTo (d2.Value);  	});  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: if (_protocol >= 6) {  	// channel currency country code (table 17+(n*2) to 17+(n*5))  	index = 17 + (m_NumberOfChannels * 2);  	int sectionEnd = 17 + (m_NumberOfChannels * 5);  	int count = 0;  	byte[] channelCurrencyTemp = new byte[3 * m_NumberOfChannels];  	while (index < sectionEnd) {  		displayString += "Channel " + ((count / 3) + 1) + "' currency: ";  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		displayString += "\r\n";  	}  	// expanded channel values (table 17+(n*5) to 17+(n*9))  	index = sectionEnd;  	displayString += "Expanded channel values:\r\n";  	sectionEnd = 17 + (m_NumberOfChannels * 9);  	int n = 0;  	count = 0;  	int[] channelValuesTemp = new int[m_NumberOfChannels];  	while (index < sectionEnd) {  		n = BitConverter.ToInt32 (setupData' index);  		channelValuesTemp [count] = n;  		index += 4;  		displayString += "Channel " + ++count + "' value = " + n + "\r\n";  	}  	logFile ("Protocol 6+ Channel values");  	// Create list entry for each channel  	m_UnitDataList.Clear ();  	// clear old table  	for (byte i = 0; i < m_NumberOfChannels; i++) {  		ChannelData d = new ChannelData ();  		d.Channel = i;  		d.Channel++;  		// Offset from array index by 1  		d.Value = channelValuesTemp [i] * m_ValueMultiplier * m_RealValueMultiplier;  		d.Currency = "" + (char)channelCurrencyTemp [0 + (i * 3)] + (char)channelCurrencyTemp [1 + (i * 3)] + (char)channelCurrencyTemp [2 + (i * 3)];  		d.Level = 0;  		// Can't store notes   		d.Recycling = false;  		// Can't recycle notes  		logFile ("Channel ID: " + d.Channel + "' value: " + (d.Value) + " " + d.Currency);  		m_UnitDataList.Add (d);  	}  	// Sort the list of data by the value.  	m_UnitDataList.Sort (delegate (ChannelData d1' ChannelData d2) {  		return d1.Value.CompareTo (d2.Value);  	});  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: if (_protocol >= 6) {  	// channel currency country code (table 17+(n*2) to 17+(n*5))  	index = 17 + (m_NumberOfChannels * 2);  	int sectionEnd = 17 + (m_NumberOfChannels * 5);  	int count = 0;  	byte[] channelCurrencyTemp = new byte[3 * m_NumberOfChannels];  	while (index < sectionEnd) {  		displayString += "Channel " + ((count / 3) + 1) + "' currency: ";  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		displayString += "\r\n";  	}  	// expanded channel values (table 17+(n*5) to 17+(n*9))  	index = sectionEnd;  	displayString += "Expanded channel values:\r\n";  	sectionEnd = 17 + (m_NumberOfChannels * 9);  	int n = 0;  	count = 0;  	int[] channelValuesTemp = new int[m_NumberOfChannels];  	while (index < sectionEnd) {  		n = BitConverter.ToInt32 (setupData' index);  		channelValuesTemp [count] = n;  		index += 4;  		displayString += "Channel " + ++count + "' value = " + n + "\r\n";  	}  	logFile ("Protocol 6+ Channel values");  	// Create list entry for each channel  	m_UnitDataList.Clear ();  	// clear old table  	for (byte i = 0; i < m_NumberOfChannels; i++) {  		ChannelData d = new ChannelData ();  		d.Channel = i;  		d.Channel++;  		// Offset from array index by 1  		d.Value = channelValuesTemp [i] * m_ValueMultiplier * m_RealValueMultiplier;  		d.Currency = "" + (char)channelCurrencyTemp [0 + (i * 3)] + (char)channelCurrencyTemp [1 + (i * 3)] + (char)channelCurrencyTemp [2 + (i * 3)];  		d.Level = 0;  		// Can't store notes   		d.Recycling = false;  		// Can't recycle notes  		logFile ("Channel ID: " + d.Channel + "' value: " + (d.Value) + " " + d.Currency);  		m_UnitDataList.Add (d);  	}  	// Sort the list of data by the value.  	m_UnitDataList.Sort (delegate (ChannelData d1' ChannelData d2) {  		return d1.Value.CompareTo (d2.Value);  	});  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: if (_protocol >= 6) {  	// channel currency country code (table 17+(n*2) to 17+(n*5))  	index = 17 + (m_NumberOfChannels * 2);  	int sectionEnd = 17 + (m_NumberOfChannels * 5);  	int count = 0;  	byte[] channelCurrencyTemp = new byte[3 * m_NumberOfChannels];  	while (index < sectionEnd) {  		displayString += "Channel " + ((count / 3) + 1) + "' currency: ";  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		displayString += "\r\n";  	}  	// expanded channel values (table 17+(n*5) to 17+(n*9))  	index = sectionEnd;  	displayString += "Expanded channel values:\r\n";  	sectionEnd = 17 + (m_NumberOfChannels * 9);  	int n = 0;  	count = 0;  	int[] channelValuesTemp = new int[m_NumberOfChannels];  	while (index < sectionEnd) {  		n = BitConverter.ToInt32 (setupData' index);  		channelValuesTemp [count] = n;  		index += 4;  		displayString += "Channel " + ++count + "' value = " + n + "\r\n";  	}  	logFile ("Protocol 6+ Channel values");  	// Create list entry for each channel  	m_UnitDataList.Clear ();  	// clear old table  	for (byte i = 0; i < m_NumberOfChannels; i++) {  		ChannelData d = new ChannelData ();  		d.Channel = i;  		d.Channel++;  		// Offset from array index by 1  		d.Value = channelValuesTemp [i] * m_ValueMultiplier * m_RealValueMultiplier;  		d.Currency = "" + (char)channelCurrencyTemp [0 + (i * 3)] + (char)channelCurrencyTemp [1 + (i * 3)] + (char)channelCurrencyTemp [2 + (i * 3)];  		d.Level = 0;  		// Can't store notes   		d.Recycling = false;  		// Can't recycle notes  		logFile ("Channel ID: " + d.Channel + "' value: " + (d.Value) + " " + d.Currency);  		m_UnitDataList.Add (d);  	}  	// Sort the list of data by the value.  	m_UnitDataList.Sort (delegate (ChannelData d1' ChannelData d2) {  		return d1.Value.CompareTo (d2.Value);  	});  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: if (_protocol >= 6) {  	// channel currency country code (table 17+(n*2) to 17+(n*5))  	index = 17 + (m_NumberOfChannels * 2);  	int sectionEnd = 17 + (m_NumberOfChannels * 5);  	int count = 0;  	byte[] channelCurrencyTemp = new byte[3 * m_NumberOfChannels];  	while (index < sectionEnd) {  		displayString += "Channel " + ((count / 3) + 1) + "' currency: ";  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		displayString += "\r\n";  	}  	// expanded channel values (table 17+(n*5) to 17+(n*9))  	index = sectionEnd;  	displayString += "Expanded channel values:\r\n";  	sectionEnd = 17 + (m_NumberOfChannels * 9);  	int n = 0;  	count = 0;  	int[] channelValuesTemp = new int[m_NumberOfChannels];  	while (index < sectionEnd) {  		n = BitConverter.ToInt32 (setupData' index);  		channelValuesTemp [count] = n;  		index += 4;  		displayString += "Channel " + ++count + "' value = " + n + "\r\n";  	}  	logFile ("Protocol 6+ Channel values");  	// Create list entry for each channel  	m_UnitDataList.Clear ();  	// clear old table  	for (byte i = 0; i < m_NumberOfChannels; i++) {  		ChannelData d = new ChannelData ();  		d.Channel = i;  		d.Channel++;  		// Offset from array index by 1  		d.Value = channelValuesTemp [i] * m_ValueMultiplier * m_RealValueMultiplier;  		d.Currency = "" + (char)channelCurrencyTemp [0 + (i * 3)] + (char)channelCurrencyTemp [1 + (i * 3)] + (char)channelCurrencyTemp [2 + (i * 3)];  		d.Level = 0;  		// Can't store notes   		d.Recycling = false;  		// Can't recycle notes  		logFile ("Channel ID: " + d.Channel + "' value: " + (d.Value) + " " + d.Currency);  		m_UnitDataList.Add (d);  	}  	// Sort the list of data by the value.  	m_UnitDataList.Sort (delegate (ChannelData d1' ChannelData d2) {  		return d1.Value.CompareTo (d2.Value);  	});  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: if (_protocol >= 6) {  	// channel currency country code (table 17+(n*2) to 17+(n*5))  	index = 17 + (m_NumberOfChannels * 2);  	int sectionEnd = 17 + (m_NumberOfChannels * 5);  	int count = 0;  	byte[] channelCurrencyTemp = new byte[3 * m_NumberOfChannels];  	while (index < sectionEnd) {  		displayString += "Channel " + ((count / 3) + 1) + "' currency: ";  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		displayString += "\r\n";  	}  	// expanded channel values (table 17+(n*5) to 17+(n*9))  	index = sectionEnd;  	displayString += "Expanded channel values:\r\n";  	sectionEnd = 17 + (m_NumberOfChannels * 9);  	int n = 0;  	count = 0;  	int[] channelValuesTemp = new int[m_NumberOfChannels];  	while (index < sectionEnd) {  		n = BitConverter.ToInt32 (setupData' index);  		channelValuesTemp [count] = n;  		index += 4;  		displayString += "Channel " + ++count + "' value = " + n + "\r\n";  	}  	logFile ("Protocol 6+ Channel values");  	// Create list entry for each channel  	m_UnitDataList.Clear ();  	// clear old table  	for (byte i = 0; i < m_NumberOfChannels; i++) {  		ChannelData d = new ChannelData ();  		d.Channel = i;  		d.Channel++;  		// Offset from array index by 1  		d.Value = channelValuesTemp [i] * m_ValueMultiplier * m_RealValueMultiplier;  		d.Currency = "" + (char)channelCurrencyTemp [0 + (i * 3)] + (char)channelCurrencyTemp [1 + (i * 3)] + (char)channelCurrencyTemp [2 + (i * 3)];  		d.Level = 0;  		// Can't store notes   		d.Recycling = false;  		// Can't recycle notes  		logFile ("Channel ID: " + d.Channel + "' value: " + (d.Value) + " " + d.Currency);  		m_UnitDataList.Add (d);  	}  	// Sort the list of data by the value.  	m_UnitDataList.Sort (delegate (ChannelData d1' ChannelData d2) {  		return d1.Value.CompareTo (d2.Value);  	});  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: if (_protocol >= 6) {  	// channel currency country code (table 17+(n*2) to 17+(n*5))  	index = 17 + (m_NumberOfChannels * 2);  	int sectionEnd = 17 + (m_NumberOfChannels * 5);  	int count = 0;  	byte[] channelCurrencyTemp = new byte[3 * m_NumberOfChannels];  	while (index < sectionEnd) {  		displayString += "Channel " + ((count / 3) + 1) + "' currency: ";  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		displayString += "\r\n";  	}  	// expanded channel values (table 17+(n*5) to 17+(n*9))  	index = sectionEnd;  	displayString += "Expanded channel values:\r\n";  	sectionEnd = 17 + (m_NumberOfChannels * 9);  	int n = 0;  	count = 0;  	int[] channelValuesTemp = new int[m_NumberOfChannels];  	while (index < sectionEnd) {  		n = BitConverter.ToInt32 (setupData' index);  		channelValuesTemp [count] = n;  		index += 4;  		displayString += "Channel " + ++count + "' value = " + n + "\r\n";  	}  	logFile ("Protocol 6+ Channel values");  	// Create list entry for each channel  	m_UnitDataList.Clear ();  	// clear old table  	for (byte i = 0; i < m_NumberOfChannels; i++) {  		ChannelData d = new ChannelData ();  		d.Channel = i;  		d.Channel++;  		// Offset from array index by 1  		d.Value = channelValuesTemp [i] * m_ValueMultiplier * m_RealValueMultiplier;  		d.Currency = "" + (char)channelCurrencyTemp [0 + (i * 3)] + (char)channelCurrencyTemp [1 + (i * 3)] + (char)channelCurrencyTemp [2 + (i * 3)];  		d.Level = 0;  		// Can't store notes   		d.Recycling = false;  		// Can't recycle notes  		logFile ("Channel ID: " + d.Channel + "' value: " + (d.Value) + " " + d.Currency);  		m_UnitDataList.Add (d);  	}  	// Sort the list of data by the value.  	m_UnitDataList.Sort (delegate (ChannelData d1' ChannelData d2) {  		return d1.Value.CompareTo (d2.Value);  	});  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: if (_protocol >= 6) {  	// channel currency country code (table 17+(n*2) to 17+(n*5))  	index = 17 + (m_NumberOfChannels * 2);  	int sectionEnd = 17 + (m_NumberOfChannels * 5);  	int count = 0;  	byte[] channelCurrencyTemp = new byte[3 * m_NumberOfChannels];  	while (index < sectionEnd) {  		displayString += "Channel " + ((count / 3) + 1) + "' currency: ";  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		displayString += "\r\n";  	}  	// expanded channel values (table 17+(n*5) to 17+(n*9))  	index = sectionEnd;  	displayString += "Expanded channel values:\r\n";  	sectionEnd = 17 + (m_NumberOfChannels * 9);  	int n = 0;  	count = 0;  	int[] channelValuesTemp = new int[m_NumberOfChannels];  	while (index < sectionEnd) {  		n = BitConverter.ToInt32 (setupData' index);  		channelValuesTemp [count] = n;  		index += 4;  		displayString += "Channel " + ++count + "' value = " + n + "\r\n";  	}  	logFile ("Protocol 6+ Channel values");  	// Create list entry for each channel  	m_UnitDataList.Clear ();  	// clear old table  	for (byte i = 0; i < m_NumberOfChannels; i++) {  		ChannelData d = new ChannelData ();  		d.Channel = i;  		d.Channel++;  		// Offset from array index by 1  		d.Value = channelValuesTemp [i] * m_ValueMultiplier * m_RealValueMultiplier;  		d.Currency = "" + (char)channelCurrencyTemp [0 + (i * 3)] + (char)channelCurrencyTemp [1 + (i * 3)] + (char)channelCurrencyTemp [2 + (i * 3)];  		d.Level = 0;  		// Can't store notes   		d.Recycling = false;  		// Can't recycle notes  		logFile ("Channel ID: " + d.Channel + "' value: " + (d.Value) + " " + d.Currency);  		m_UnitDataList.Add (d);  	}  	// Sort the list of data by the value.  	m_UnitDataList.Sort (delegate (ChannelData d1' ChannelData d2) {  		return d1.Value.CompareTo (d2.Value);  	});  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: if (_protocol >= 6) {  	// channel currency country code (table 17+(n*2) to 17+(n*5))  	index = 17 + (m_NumberOfChannels * 2);  	int sectionEnd = 17 + (m_NumberOfChannels * 5);  	int count = 0;  	byte[] channelCurrencyTemp = new byte[3 * m_NumberOfChannels];  	while (index < sectionEnd) {  		displayString += "Channel " + ((count / 3) + 1) + "' currency: ";  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		channelCurrencyTemp [count] = setupData [index++];  		displayString += (char)channelCurrencyTemp [count++];  		displayString += "\r\n";  	}  	// expanded channel values (table 17+(n*5) to 17+(n*9))  	index = sectionEnd;  	displayString += "Expanded channel values:\r\n";  	sectionEnd = 17 + (m_NumberOfChannels * 9);  	int n = 0;  	count = 0;  	int[] channelValuesTemp = new int[m_NumberOfChannels];  	while (index < sectionEnd) {  		n = BitConverter.ToInt32 (setupData' index);  		channelValuesTemp [count] = n;  		index += 4;  		displayString += "Channel " + ++count + "' value = " + n + "\r\n";  	}  	logFile ("Protocol 6+ Channel values");  	// Create list entry for each channel  	m_UnitDataList.Clear ();  	// clear old table  	for (byte i = 0; i < m_NumberOfChannels; i++) {  		ChannelData d = new ChannelData ();  		d.Channel = i;  		d.Channel++;  		// Offset from array index by 1  		d.Value = channelValuesTemp [i] * m_ValueMultiplier * m_RealValueMultiplier;  		d.Currency = "" + (char)channelCurrencyTemp [0 + (i * 3)] + (char)channelCurrencyTemp [1 + (i * 3)] + (char)channelCurrencyTemp [2 + (i * 3)];  		d.Level = 0;  		// Can't store notes   		d.Recycling = false;  		// Can't recycle notes  		logFile ("Channel ID: " + d.Channel + "' value: " + (d.Value) + " " + d.Currency);  		m_UnitDataList.Add (d);  	}  	// Sort the list of data by the value.  	m_UnitDataList.Sort (delegate (ChannelData d1' ChannelData d2) {  		return d1.Value.CompareTo (d2.Value);  	});  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: index = 17 + (m_NumberOfChannels * 2);  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: index = 17 + (m_NumberOfChannels * 2);  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: while (index < sectionEnd) {  	displayString += "Channel " + ((count / 3) + 1) + "' currency: ";  	channelCurrencyTemp [count] = setupData [index++];  	displayString += (char)channelCurrencyTemp [count++];  	channelCurrencyTemp [count] = setupData [index++];  	displayString += (char)channelCurrencyTemp [count++];  	channelCurrencyTemp [count] = setupData [index++];  	displayString += (char)channelCurrencyTemp [count++];  	displayString += "\r\n";  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: displayString += "Channel " + ((count / 3) + 1) + "' currency: ";  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: sectionEnd = 17 + (m_NumberOfChannels * 9);  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: sectionEnd = 17 + (m_NumberOfChannels * 9);  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: while (index < sectionEnd) {  	n = BitConverter.ToInt32 (setupData' index);  	channelValuesTemp [count] = n;  	index += 4;  	displayString += "Channel " + ++count + "' value = " + n + "\r\n";  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: index += 4;  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: for (byte i = 0; i < m_NumberOfChannels; i++) {  	ChannelData d = new ChannelData ();  	d.Channel = i;  	d.Channel++;  	// Offset from array index by 1  	d.Value = channelValuesTemp [i] * m_ValueMultiplier * m_RealValueMultiplier;  	d.Currency = "" + (char)channelCurrencyTemp [0 + (i * 3)] + (char)channelCurrencyTemp [1 + (i * 3)] + (char)channelCurrencyTemp [2 + (i * 3)];  	d.Level = 0;  	// Can't store notes   	d.Recycling = false;  	// Can't recycle notes  	logFile ("Channel ID: " + d.Channel + "' value: " + (d.Value) + " " + d.Currency);  	m_UnitDataList.Add (d);  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: for (byte i = 0; i < m_NumberOfChannels; i++) {  	ChannelData d = new ChannelData ();  	d.Channel = i;  	d.Channel++;  	// Offset from array index by 1  	d.Value = channelValuesTemp [i] * m_ValueMultiplier * m_RealValueMultiplier;  	d.Currency = "" + (char)channelCurrencyTemp [0 + (i * 3)] + (char)channelCurrencyTemp [1 + (i * 3)] + (char)channelCurrencyTemp [2 + (i * 3)];  	d.Level = 0;  	// Can't store notes   	d.Recycling = false;  	// Can't recycle notes  	logFile ("Channel ID: " + d.Channel + "' value: " + (d.Value) + " " + d.Currency);  	m_UnitDataList.Add (d);  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: for (byte i = 0; i < m_NumberOfChannels; i++) {  	ChannelData d = new ChannelData ();  	d.Channel = i;  	d.Channel++;  	// Offset from array index by 1  	d.Value = channelValuesTemp [i] * m_ValueMultiplier * m_RealValueMultiplier;  	d.Currency = "" + (char)channelCurrencyTemp [0 + (i * 3)] + (char)channelCurrencyTemp [1 + (i * 3)] + (char)channelCurrencyTemp [2 + (i * 3)];  	d.Level = 0;  	// Can't store notes   	d.Recycling = false;  	// Can't recycle notes  	logFile ("Channel ID: " + d.Channel + "' value: " + (d.Value) + " " + d.Currency);  	m_UnitDataList.Add (d);  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: for (byte i = 0; i < m_NumberOfChannels; i++) {  	ChannelData d = new ChannelData ();  	d.Channel = i;  	d.Channel++;  	// Offset from array index by 1  	d.Value = channelValuesTemp [i] * m_ValueMultiplier * m_RealValueMultiplier;  	d.Currency = "" + (char)channelCurrencyTemp [0 + (i * 3)] + (char)channelCurrencyTemp [1 + (i * 3)] + (char)channelCurrencyTemp [2 + (i * 3)];  	d.Level = 0;  	// Can't store notes   	d.Recycling = false;  	// Can't recycle notes  	logFile ("Channel ID: " + d.Channel + "' value: " + (d.Value) + " " + d.Currency);  	m_UnitDataList.Add (d);  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: d.Currency = "" + (char)channelCurrencyTemp [0 + (i * 3)] + (char)channelCurrencyTemp [1 + (i * 3)] + (char)channelCurrencyTemp [2 + (i * 3)];  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: d.Currency = "" + (char)channelCurrencyTemp [0 + (i * 3)] + (char)channelCurrencyTemp [1 + (i * 3)] + (char)channelCurrencyTemp [2 + (i * 3)];  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: d.Currency = "" + (char)channelCurrencyTemp [0 + (i * 3)] + (char)channelCurrencyTemp [1 + (i * 3)] + (char)channelCurrencyTemp [2 + (i * 3)];  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ParseSetupResponse,The following statement contains a magic number: d.Currency = "" + (char)channelCurrencyTemp [0 + (i * 3)] + (char)channelCurrencyTemp [1 + (i * 3)] + (char)channelCurrencyTemp [2 + (i * 3)];  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,Reset,The following statement contains a magic number: try {  	logFile ("Reset call");  	NV10Response res = SendData (NV10Request.NV10RequestTemplates.NV10Reset);  	if (!res.IsOK) {  		logFile ("Reset error' deviceID: " + res._deviceID + "' response type: " + res._type + "' response data " + res.getDataString ());  		ThrowException (new Exception ("SSP slave answer invalid: " + res._type.ToString () + " - not enabled"));  	}  	System.Threading.Thread.Sleep (5000);  	logFile ("Reset done");  }  catch (Exception ex) {  	ThrowException (ex);  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,Reset,The following statement contains a magic number: System.Threading.Thread.Sleep (5000);  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,SendData,The following statement contains a magic number: lock (_sendMonitor) {  	NV10Response res = null;  	if (_debug) {  		logFile ("Message data plain to send: " + byteArrToHexString (inData.getSendBytes (_seq)));  	}  	if (_crypter.Inited) {  		inData.setNewDataBytes (_crypter.Crypt (inData.getBytesForCrypting ()));  		if (_debug) {  			logFile ("Message data encrypted to send: " + byteArrToHexString (inData.getSendBytes (_seq)));  		}  		Byte[] response = SendData (inData.getSendBytes (_seq));  		if (_debug) {  			logFile ("Response data received encrypted: " + byteArrToHexString (response));  		}  		Byte[] forDec = new Byte[response [1]];  		Array.Copy (response' 2' forDec' 0' forDec.Length);  		Byte[] decRes = _crypter.Decrypt (forDec);  		//Byte[] decryptedResp = new Byte[2+decRes.Length];  		//Array.Copy(response' 0' decryptedResp' 0' 2);  		//Array.Copy(decRes' 0' decryptedResp' 2' decRes.Length);  		Byte[] decryptedResp = new Byte[2 + decRes [0]];  		Array.Copy (response' 0' decryptedResp' 0' 1);  		Array.Copy (decRes' 0' decryptedResp' 1' 1);  		Array.Copy (decRes' 5' decryptedResp' 2' decRes [0]);  		res = new NV10Response (decryptedResp);  		if (_debug) {  			logFile ("Response data received decrypted: " + byteArrToHexString (res._data));  		}  	}  	else {  		Byte[] response = SendData (inData.getSendBytes (_seq));  		res = new NV10Response (response);  		if (_debug) {  			logFile ("Response data received decrypted: " + byteArrToHexString (res._data));  		}  	}  	return res;  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,SendData,The following statement contains a magic number: lock (_sendMonitor) {  	NV10Response res = null;  	if (_debug) {  		logFile ("Message data plain to send: " + byteArrToHexString (inData.getSendBytes (_seq)));  	}  	if (_crypter.Inited) {  		inData.setNewDataBytes (_crypter.Crypt (inData.getBytesForCrypting ()));  		if (_debug) {  			logFile ("Message data encrypted to send: " + byteArrToHexString (inData.getSendBytes (_seq)));  		}  		Byte[] response = SendData (inData.getSendBytes (_seq));  		if (_debug) {  			logFile ("Response data received encrypted: " + byteArrToHexString (response));  		}  		Byte[] forDec = new Byte[response [1]];  		Array.Copy (response' 2' forDec' 0' forDec.Length);  		Byte[] decRes = _crypter.Decrypt (forDec);  		//Byte[] decryptedResp = new Byte[2+decRes.Length];  		//Array.Copy(response' 0' decryptedResp' 0' 2);  		//Array.Copy(decRes' 0' decryptedResp' 2' decRes.Length);  		Byte[] decryptedResp = new Byte[2 + decRes [0]];  		Array.Copy (response' 0' decryptedResp' 0' 1);  		Array.Copy (decRes' 0' decryptedResp' 1' 1);  		Array.Copy (decRes' 5' decryptedResp' 2' decRes [0]);  		res = new NV10Response (decryptedResp);  		if (_debug) {  			logFile ("Response data received decrypted: " + byteArrToHexString (res._data));  		}  	}  	else {  		Byte[] response = SendData (inData.getSendBytes (_seq));  		res = new NV10Response (response);  		if (_debug) {  			logFile ("Response data received decrypted: " + byteArrToHexString (res._data));  		}  	}  	return res;  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,SendData,The following statement contains a magic number: lock (_sendMonitor) {  	NV10Response res = null;  	if (_debug) {  		logFile ("Message data plain to send: " + byteArrToHexString (inData.getSendBytes (_seq)));  	}  	if (_crypter.Inited) {  		inData.setNewDataBytes (_crypter.Crypt (inData.getBytesForCrypting ()));  		if (_debug) {  			logFile ("Message data encrypted to send: " + byteArrToHexString (inData.getSendBytes (_seq)));  		}  		Byte[] response = SendData (inData.getSendBytes (_seq));  		if (_debug) {  			logFile ("Response data received encrypted: " + byteArrToHexString (response));  		}  		Byte[] forDec = new Byte[response [1]];  		Array.Copy (response' 2' forDec' 0' forDec.Length);  		Byte[] decRes = _crypter.Decrypt (forDec);  		//Byte[] decryptedResp = new Byte[2+decRes.Length];  		//Array.Copy(response' 0' decryptedResp' 0' 2);  		//Array.Copy(decRes' 0' decryptedResp' 2' decRes.Length);  		Byte[] decryptedResp = new Byte[2 + decRes [0]];  		Array.Copy (response' 0' decryptedResp' 0' 1);  		Array.Copy (decRes' 0' decryptedResp' 1' 1);  		Array.Copy (decRes' 5' decryptedResp' 2' decRes [0]);  		res = new NV10Response (decryptedResp);  		if (_debug) {  			logFile ("Response data received decrypted: " + byteArrToHexString (res._data));  		}  	}  	else {  		Byte[] response = SendData (inData.getSendBytes (_seq));  		res = new NV10Response (response);  		if (_debug) {  			logFile ("Response data received decrypted: " + byteArrToHexString (res._data));  		}  	}  	return res;  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,SendData,The following statement contains a magic number: lock (_sendMonitor) {  	NV10Response res = null;  	if (_debug) {  		logFile ("Message data plain to send: " + byteArrToHexString (inData.getSendBytes (_seq)));  	}  	if (_crypter.Inited) {  		inData.setNewDataBytes (_crypter.Crypt (inData.getBytesForCrypting ()));  		if (_debug) {  			logFile ("Message data encrypted to send: " + byteArrToHexString (inData.getSendBytes (_seq)));  		}  		Byte[] response = SendData (inData.getSendBytes (_seq));  		if (_debug) {  			logFile ("Response data received encrypted: " + byteArrToHexString (response));  		}  		Byte[] forDec = new Byte[response [1]];  		Array.Copy (response' 2' forDec' 0' forDec.Length);  		Byte[] decRes = _crypter.Decrypt (forDec);  		//Byte[] decryptedResp = new Byte[2+decRes.Length];  		//Array.Copy(response' 0' decryptedResp' 0' 2);  		//Array.Copy(decRes' 0' decryptedResp' 2' decRes.Length);  		Byte[] decryptedResp = new Byte[2 + decRes [0]];  		Array.Copy (response' 0' decryptedResp' 0' 1);  		Array.Copy (decRes' 0' decryptedResp' 1' 1);  		Array.Copy (decRes' 5' decryptedResp' 2' decRes [0]);  		res = new NV10Response (decryptedResp);  		if (_debug) {  			logFile ("Response data received decrypted: " + byteArrToHexString (res._data));  		}  	}  	else {  		Byte[] response = SendData (inData.getSendBytes (_seq));  		res = new NV10Response (response);  		if (_debug) {  			logFile ("Response data received decrypted: " + byteArrToHexString (res._data));  		}  	}  	return res;  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,SendData,The following statement contains a magic number: if (_crypter.Inited) {  	inData.setNewDataBytes (_crypter.Crypt (inData.getBytesForCrypting ()));  	if (_debug) {  		logFile ("Message data encrypted to send: " + byteArrToHexString (inData.getSendBytes (_seq)));  	}  	Byte[] response = SendData (inData.getSendBytes (_seq));  	if (_debug) {  		logFile ("Response data received encrypted: " + byteArrToHexString (response));  	}  	Byte[] forDec = new Byte[response [1]];  	Array.Copy (response' 2' forDec' 0' forDec.Length);  	Byte[] decRes = _crypter.Decrypt (forDec);  	//Byte[] decryptedResp = new Byte[2+decRes.Length];  	//Array.Copy(response' 0' decryptedResp' 0' 2);  	//Array.Copy(decRes' 0' decryptedResp' 2' decRes.Length);  	Byte[] decryptedResp = new Byte[2 + decRes [0]];  	Array.Copy (response' 0' decryptedResp' 0' 1);  	Array.Copy (decRes' 0' decryptedResp' 1' 1);  	Array.Copy (decRes' 5' decryptedResp' 2' decRes [0]);  	res = new NV10Response (decryptedResp);  	if (_debug) {  		logFile ("Response data received decrypted: " + byteArrToHexString (res._data));  	}  }  else {  	Byte[] response = SendData (inData.getSendBytes (_seq));  	res = new NV10Response (response);  	if (_debug) {  		logFile ("Response data received decrypted: " + byteArrToHexString (res._data));  	}  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,SendData,The following statement contains a magic number: if (_crypter.Inited) {  	inData.setNewDataBytes (_crypter.Crypt (inData.getBytesForCrypting ()));  	if (_debug) {  		logFile ("Message data encrypted to send: " + byteArrToHexString (inData.getSendBytes (_seq)));  	}  	Byte[] response = SendData (inData.getSendBytes (_seq));  	if (_debug) {  		logFile ("Response data received encrypted: " + byteArrToHexString (response));  	}  	Byte[] forDec = new Byte[response [1]];  	Array.Copy (response' 2' forDec' 0' forDec.Length);  	Byte[] decRes = _crypter.Decrypt (forDec);  	//Byte[] decryptedResp = new Byte[2+decRes.Length];  	//Array.Copy(response' 0' decryptedResp' 0' 2);  	//Array.Copy(decRes' 0' decryptedResp' 2' decRes.Length);  	Byte[] decryptedResp = new Byte[2 + decRes [0]];  	Array.Copy (response' 0' decryptedResp' 0' 1);  	Array.Copy (decRes' 0' decryptedResp' 1' 1);  	Array.Copy (decRes' 5' decryptedResp' 2' decRes [0]);  	res = new NV10Response (decryptedResp);  	if (_debug) {  		logFile ("Response data received decrypted: " + byteArrToHexString (res._data));  	}  }  else {  	Byte[] response = SendData (inData.getSendBytes (_seq));  	res = new NV10Response (response);  	if (_debug) {  		logFile ("Response data received decrypted: " + byteArrToHexString (res._data));  	}  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,SendData,The following statement contains a magic number: if (_crypter.Inited) {  	inData.setNewDataBytes (_crypter.Crypt (inData.getBytesForCrypting ()));  	if (_debug) {  		logFile ("Message data encrypted to send: " + byteArrToHexString (inData.getSendBytes (_seq)));  	}  	Byte[] response = SendData (inData.getSendBytes (_seq));  	if (_debug) {  		logFile ("Response data received encrypted: " + byteArrToHexString (response));  	}  	Byte[] forDec = new Byte[response [1]];  	Array.Copy (response' 2' forDec' 0' forDec.Length);  	Byte[] decRes = _crypter.Decrypt (forDec);  	//Byte[] decryptedResp = new Byte[2+decRes.Length];  	//Array.Copy(response' 0' decryptedResp' 0' 2);  	//Array.Copy(decRes' 0' decryptedResp' 2' decRes.Length);  	Byte[] decryptedResp = new Byte[2 + decRes [0]];  	Array.Copy (response' 0' decryptedResp' 0' 1);  	Array.Copy (decRes' 0' decryptedResp' 1' 1);  	Array.Copy (decRes' 5' decryptedResp' 2' decRes [0]);  	res = new NV10Response (decryptedResp);  	if (_debug) {  		logFile ("Response data received decrypted: " + byteArrToHexString (res._data));  	}  }  else {  	Byte[] response = SendData (inData.getSendBytes (_seq));  	res = new NV10Response (response);  	if (_debug) {  		logFile ("Response data received decrypted: " + byteArrToHexString (res._data));  	}  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,SendData,The following statement contains a magic number: if (_crypter.Inited) {  	inData.setNewDataBytes (_crypter.Crypt (inData.getBytesForCrypting ()));  	if (_debug) {  		logFile ("Message data encrypted to send: " + byteArrToHexString (inData.getSendBytes (_seq)));  	}  	Byte[] response = SendData (inData.getSendBytes (_seq));  	if (_debug) {  		logFile ("Response data received encrypted: " + byteArrToHexString (response));  	}  	Byte[] forDec = new Byte[response [1]];  	Array.Copy (response' 2' forDec' 0' forDec.Length);  	Byte[] decRes = _crypter.Decrypt (forDec);  	//Byte[] decryptedResp = new Byte[2+decRes.Length];  	//Array.Copy(response' 0' decryptedResp' 0' 2);  	//Array.Copy(decRes' 0' decryptedResp' 2' decRes.Length);  	Byte[] decryptedResp = new Byte[2 + decRes [0]];  	Array.Copy (response' 0' decryptedResp' 0' 1);  	Array.Copy (decRes' 0' decryptedResp' 1' 1);  	Array.Copy (decRes' 5' decryptedResp' 2' decRes [0]);  	res = new NV10Response (decryptedResp);  	if (_debug) {  		logFile ("Response data received decrypted: " + byteArrToHexString (res._data));  	}  }  else {  	Byte[] response = SendData (inData.getSendBytes (_seq));  	res = new NV10Response (response);  	if (_debug) {  		logFile ("Response data received decrypted: " + byteArrToHexString (res._data));  	}  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,SendData,The following statement contains a magic number: Array.Copy (response' 2' forDec' 0' forDec.Length);  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,SendData,The following statement contains a magic number: Array.Copy (decRes' 5' decryptedResp' 2' decRes [0]);  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,SendData,The following statement contains a magic number: Array.Copy (decRes' 5' decryptedResp' 2' decRes [0]);  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,SendData,The following statement contains a magic number: lock (_sendMonitor) {  	//stuff bytes for message send  	//if data contains SYNC_BYTE' repeat it twice  	List<Byte> result = new List<Byte> (10);  	for (int i = 0; i < inData.Length; i++) {  		if (i > 0 && inData [i] == SYNC_BYTE) {  			result.Add (inData [i]);  			result.Add (inData [i]);  		}  		else {  			if (i > 0) {  				result.Add (inData [i]);  			}  		}  	}  	Byte[] cmdStuffed = result.ToArray ();  	//Byte[] cmdStuffed = SSPTransportStuff.InsertByteStuff(inCmd.RawData);  	Byte[] data2send = new Byte[cmdStuffed.Length + 1];  	data2send [0] = SYNC_BYTE;  	cmdStuffed.CopyTo (data2send' 1);  	if (_debug) {  		logFile ("Bytes on wire: " + byteArrToHexString (data2send));  	}  	_port.Write (data2send' 0' data2send.Length);  	Byte[] res = ReceiveData ();  	if (!checkAddress (res)) {  		logFile (String.Format ("deviceID wrong data: {0:X}' expected {1:X}"' (res [0] & 0x7f)' _deviceID));  		throw new Exception ("SSP slave answer invalid: address");  	}  	_seq = !_seq;  	return res;  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ReceiveData,The following statement contains a magic number: while (!packetReceived) {  	readedByte = _port.ReadByte ();  	if (readedByte == -1) {  		break;  	}  	if (readedByte == SYNC_BYTE) {  		sync = true;  	}  	else if (sync) {  		result.Add ((Byte)readedByte);  		readedByte = _port.ReadByte ();  		if (readedByte == -1) {  			break;  		}  		result.Add ((Byte)readedByte);  		//CRC LEN  		Int32 waitCounter = result [1] + 2;  		if (readedByte == SYNC_BYTE) {  			waitCounter++;  		}  		Boolean syncPacket = false;  		packetReceived = true;  		while (waitCounter > 0) {  			readedByte = _port.ReadByte ();  			if (readedByte == -1) {  				break;  			}  			result.Add ((Byte)readedByte);  			if (readedByte == SYNC_BYTE) {  				if (!syncPacket) {  					syncPacket = true;  					waitCounter++;  				}  				else {  					syncPacket = false;  				}  			}  			waitCounter--;  		}  	}  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ReceiveData,The following statement contains a magic number: if (readedByte == SYNC_BYTE) {  	sync = true;  }  else if (sync) {  	result.Add ((Byte)readedByte);  	readedByte = _port.ReadByte ();  	if (readedByte == -1) {  		break;  	}  	result.Add ((Byte)readedByte);  	//CRC LEN  	Int32 waitCounter = result [1] + 2;  	if (readedByte == SYNC_BYTE) {  		waitCounter++;  	}  	Boolean syncPacket = false;  	packetReceived = true;  	while (waitCounter > 0) {  		readedByte = _port.ReadByte ();  		if (readedByte == -1) {  			break;  		}  		result.Add ((Byte)readedByte);  		if (readedByte == SYNC_BYTE) {  			if (!syncPacket) {  				syncPacket = true;  				waitCounter++;  			}  			else {  				syncPacket = false;  			}  		}  		waitCounter--;  	}  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,ReceiveData,The following statement contains a magic number: if (sync) {  	result.Add ((Byte)readedByte);  	readedByte = _port.ReadByte ();  	if (readedByte == -1) {  		break;  	}  	result.Add ((Byte)readedByte);  	//CRC LEN  	Int32 waitCounter = result [1] + 2;  	if (readedByte == SYNC_BYTE) {  		waitCounter++;  	}  	Boolean syncPacket = false;  	packetReceived = true;  	while (waitCounter > 0) {  		readedByte = _port.ReadByte ();  		if (readedByte == -1) {  			break;  		}  		result.Add ((Byte)readedByte);  		if (readedByte == SYNC_BYTE) {  			if (!syncPacket) {  				syncPacket = true;  				waitCounter++;  			}  			else {  				syncPacket = false;  			}  		}  		waitCounter--;  	}  }  
Magic Number,eSSPNV10.SC,NV10Controller,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Contoller.cs,checkAddress,The following statement contains a magic number: if (response.Length >= 2) {  	return (response [0] & 0x7f) == _deviceID;  }  else {  	return false;  }  
Magic Number,eSSPNV10.SC,NV10CRCTools,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10CRCTools.cs,GetCRC,The following statement contains a magic number: for (int i = 0; i < inData.Length; i++) {  	tableAddr = (inData [i] ^ crcH);  	crcH = (Byte)((CRC_Table [tableAddr] >> 8) ^ crcL);  	crcL = (Byte)((CRC_Table [tableAddr] & 0x00FF));  }  
Magic Number,eSSPNV10.SC,NV10CRCTools,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10CRCTools.cs,GetCRC,The following statement contains a magic number: crcH = (Byte)((CRC_Table [tableAddr] >> 8) ^ crcL);  
Magic Number,eSSPNV10.SC,NV10CRCTools,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10CRCTools.cs,IsCRCValid,The following statement contains a magic number: if (inData.Length < 3) {  	throw new Exception ("No data to check crc");  }  
Magic Number,eSSPNV10.SC,NV10CRCTools,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10CRCTools.cs,IsCRCValid,The following statement contains a magic number: Array.Copy (inData' 0' datawoCRC' 0' inData.Length - 2);  
Magic Number,eSSPNV10.SC,NV10CRCTools,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10CRCTools.cs,IsCRCValid,The following statement contains a magic number: return ((res [0] == inData [inData.Length - 2]) && (res [1] == inData [inData.Length - 1]));  
Magic Number,eSSPNV10.SC,NV10CryptManager,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10CryptManager.cs,SolveSynchKey,The following statement contains a magic number: _aesManaged.BlockSize = 128;  
Magic Number,eSSPNV10.SC,NV10CryptManager,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10CryptManager.cs,SolveSynchKey,The following statement contains a magic number: _aesManaged.IV = new Byte[16];  
Magic Number,eSSPNV10.SC,NV10CryptManager,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10CryptManager.cs,SolveSynchKey,The following statement contains a magic number: _aesManaged.KeySize = 128;  
Magic Number,eSSPNV10.SC,NV10CryptManager,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10CryptManager.cs,SolveSynchKey,The following statement contains a magic number: if (keyGen.Length <= 8) {  	Array.Copy (keyGen' 0' tempH' 0' keyGen.Length);  }  else {  	Array.Copy (keyGen' keyGen.Length - 8' tempH' 0' 8);  }  
Magic Number,eSSPNV10.SC,NV10CryptManager,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10CryptManager.cs,SolveSynchKey,The following statement contains a magic number: if (keyGen.Length <= 8) {  	Array.Copy (keyGen' 0' tempH' 0' keyGen.Length);  }  else {  	Array.Copy (keyGen' keyGen.Length - 8' tempH' 0' 8);  }  
Magic Number,eSSPNV10.SC,NV10CryptManager,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10CryptManager.cs,SolveSynchKey,The following statement contains a magic number: if (keyGen.Length <= 8) {  	Array.Copy (keyGen' 0' tempH' 0' keyGen.Length);  }  else {  	Array.Copy (keyGen' keyGen.Length - 8' tempH' 0' 8);  }  
Magic Number,eSSPNV10.SC,NV10CryptManager,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10CryptManager.cs,SolveSynchKey,The following statement contains a magic number: Array.Copy (keyGen' keyGen.Length - 8' tempH' 0' 8);  
Magic Number,eSSPNV10.SC,NV10CryptManager,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10CryptManager.cs,SolveSynchKey,The following statement contains a magic number: Array.Copy (keyGen' keyGen.Length - 8' tempH' 0' 8);  
Magic Number,eSSPNV10.SC,NV10CryptManager,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10CryptManager.cs,SolveSynchKey,The following statement contains a magic number: Array.Copy (tempH' 0' synchKey' 8' 8);  
Magic Number,eSSPNV10.SC,NV10CryptManager,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10CryptManager.cs,SolveSynchKey,The following statement contains a magic number: Array.Copy (tempH' 0' synchKey' 8' 8);  
Magic Number,eSSPNV10.SC,NV10CryptManager,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10CryptManager.cs,SolveSynchKey,The following statement contains a magic number: Array.Copy (tempL' 0' synchKey' 0' 8);  
Magic Number,eSSPNV10.SC,NV10CryptManager,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10CryptManager.cs,prepareBytesForCrypting,The following statement contains a magic number: while ((_data.Count + CRC_LEN) % 16 != 0) {  	_data.Add ((Byte)_rnd.Next (0x00' 0xFF));  }  
Magic Number,eSSPNV10.SC,NV10Request,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Request.cs,AddSecurityBytes,The following statement contains a magic number: if (dataToAdd.Length <= 8) {  	Array.Copy (dataToAdd' 0' value' 0' dataToAdd.Length);  }  else {  	Array.Copy (dataToAdd' dataToAdd.Length - 8' value' 0' 8);  }  
Magic Number,eSSPNV10.SC,NV10Request,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Request.cs,AddSecurityBytes,The following statement contains a magic number: if (dataToAdd.Length <= 8) {  	Array.Copy (dataToAdd' 0' value' 0' dataToAdd.Length);  }  else {  	Array.Copy (dataToAdd' dataToAdd.Length - 8' value' 0' 8);  }  
Magic Number,eSSPNV10.SC,NV10Request,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Request.cs,AddSecurityBytes,The following statement contains a magic number: if (dataToAdd.Length <= 8) {  	Array.Copy (dataToAdd' 0' value' 0' dataToAdd.Length);  }  else {  	Array.Copy (dataToAdd' dataToAdd.Length - 8' value' 0' 8);  }  
Magic Number,eSSPNV10.SC,NV10Request,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Request.cs,AddSecurityBytes,The following statement contains a magic number: Array.Copy (dataToAdd' dataToAdd.Length - 8' value' 0' 8);  
Magic Number,eSSPNV10.SC,NV10Request,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Request.cs,AddSecurityBytes,The following statement contains a magic number: Array.Copy (dataToAdd' dataToAdd.Length - 8' value' 0' 8);  
Magic Number,eSSPNV10.SC,NV10Response,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Response.cs,getSecurityData,The following statement contains a magic number: if (_data.Length != 8) {  	throw new Exception ("Invalid secure data");  }  
Magic Number,eSSPNV10.SC,NV10Response,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Response.cs,NV10Response,The following statement contains a magic number: _type = (NV10ResponseType)responseBytes [2];  
Magic Number,eSSPNV10.SC,NV10Response,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Response.cs,NV10Response,The following statement contains a magic number: for (int i = 0; i < _dataLength; i++) {  	_data [i] = responseBytes [3 + i];  }  
Magic Number,eSSPNV10.SC,NV10Response,C:\repos\SourcecodeDOO_Betshop\NV10BetShop\eSPPNV10\SC\NV10Response.cs,NV10Response,The following statement contains a magic number: _data [i] = responseBytes [3 + i];  
