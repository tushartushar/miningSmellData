Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ExampleGallery.Effects,DynamicBlurVideoEffect,C:\repos\Microsoft_Win2D\samples\ExampleGallery\Effects\DynamicBlurVideoEffect.cs,ProcessFrame,The length of the statement  "            using (CanvasBitmap inputBitmap = CanvasBitmap.CreateFromDirect3D11Surface(canvasDevice' context.InputFrame.Direct3DSurface)) " is 125.
Long Statement,ExampleGallery.Effects,DynamicBlurVideoEffect,C:\repos\Microsoft_Win2D\samples\ExampleGallery\Effects\DynamicBlurVideoEffect.cs,ProcessFrame,The length of the statement  "            using (CanvasRenderTarget renderTarget = CanvasRenderTarget.CreateFromDirect3D11Surface(canvasDevice' context.OutputFrame.Direct3DSurface)) " is 139.
Long Statement,ExampleGallery.Effects,DisplacementEffect,C:\repos\Microsoft_Win2D\samples\ExampleGallery\Effects\DisplacementEffect.cs,ProcessFrame,The length of the statement  "            using (CanvasRenderTarget output = CanvasRenderTarget.CreateFromDirect3D11Surface(canvasDevice' context.OutputFrame.Direct3DSurface)) " is 133.
Long Statement,ExampleGallery.Effects,RotatedTilesEffect,C:\repos\Microsoft_Win2D\samples\ExampleGallery\Effects\RotatedTilesEffect.cs,ProcessFrame,The length of the statement  "            using (CanvasRenderTarget output = CanvasRenderTarget.CreateFromDirect3D11Surface(canvasDevice' context.OutputFrame.Direct3DSurface)) " is 133.
Magic Number,ExampleGallery.Effects,ExampleVideoEffect,C:\repos\Microsoft_Win2D\samples\ExampleGallery\Effects\ExampleVideoEffect.cs,ProcessFrame,The following statement contains a magic number: using (var inputBitmap = CanvasBitmap.CreateFromDirect3D11Surface(canvasDevice' inputSurface))              using (var renderTarget = CanvasRenderTarget.CreateFromDirect3D11Surface(canvasDevice' outputSurface))              using (var ds = renderTarget.CreateDrawingSession())              using (var brush = new CanvasImageBrush(canvasDevice' inputBitmap))              using (var textCommandList = new CanvasCommandList(canvasDevice))              {                  using (var clds = textCommandList.CreateDrawingSession())                  {                      clds.DrawText(                          "Win2D\nMediaClip"'                          (float)inputBitmap.Size.Width / 2'                          (float)inputBitmap.Size.Height / 2'                          brush'                          new CanvasTextFormat()                          {                              FontSize = (float)inputBitmap.Size.Width / 5'                              FontWeight = new FontWeight() { Weight = 999 }'                              HorizontalAlignment = CanvasHorizontalAlignment.Center'                              VerticalAlignment = CanvasVerticalAlignment.Center                          });                  }                    var background = new GaussianBlurEffect()                  {                      BlurAmount = 10'                      BorderMode = EffectBorderMode.Hard'                      Source = new BrightnessEffect()                      {                          BlackPoint = new Vector2(0.5f' 0.7f)'                          Source = new SaturationEffect()                          {                              Saturation = 0'                              Source = inputBitmap                          }                      }                  };                    var shadow = new ShadowEffect()                  {                      Source = textCommandList'                      BlurAmount = 10                  };                    var composite = new CompositeEffect()                  {                      Sources = { background' shadow' textCommandList }                  };                    ds.DrawImage(composite);              }
Magic Number,ExampleGallery.Effects,ExampleVideoEffect,C:\repos\Microsoft_Win2D\samples\ExampleGallery\Effects\ExampleVideoEffect.cs,ProcessFrame,The following statement contains a magic number: using (var inputBitmap = CanvasBitmap.CreateFromDirect3D11Surface(canvasDevice' inputSurface))              using (var renderTarget = CanvasRenderTarget.CreateFromDirect3D11Surface(canvasDevice' outputSurface))              using (var ds = renderTarget.CreateDrawingSession())              using (var brush = new CanvasImageBrush(canvasDevice' inputBitmap))              using (var textCommandList = new CanvasCommandList(canvasDevice))              {                  using (var clds = textCommandList.CreateDrawingSession())                  {                      clds.DrawText(                          "Win2D\nMediaClip"'                          (float)inputBitmap.Size.Width / 2'                          (float)inputBitmap.Size.Height / 2'                          brush'                          new CanvasTextFormat()                          {                              FontSize = (float)inputBitmap.Size.Width / 5'                              FontWeight = new FontWeight() { Weight = 999 }'                              HorizontalAlignment = CanvasHorizontalAlignment.Center'                              VerticalAlignment = CanvasVerticalAlignment.Center                          });                  }                    var background = new GaussianBlurEffect()                  {                      BlurAmount = 10'                      BorderMode = EffectBorderMode.Hard'                      Source = new BrightnessEffect()                      {                          BlackPoint = new Vector2(0.5f' 0.7f)'                          Source = new SaturationEffect()                          {                              Saturation = 0'                              Source = inputBitmap                          }                      }                  };                    var shadow = new ShadowEffect()                  {                      Source = textCommandList'                      BlurAmount = 10                  };                    var composite = new CompositeEffect()                  {                      Sources = { background' shadow' textCommandList }                  };                    ds.DrawImage(composite);              }
Magic Number,ExampleGallery.Effects,ExampleVideoEffect,C:\repos\Microsoft_Win2D\samples\ExampleGallery\Effects\ExampleVideoEffect.cs,ProcessFrame,The following statement contains a magic number: using (var inputBitmap = CanvasBitmap.CreateFromDirect3D11Surface(canvasDevice' inputSurface))              using (var renderTarget = CanvasRenderTarget.CreateFromDirect3D11Surface(canvasDevice' outputSurface))              using (var ds = renderTarget.CreateDrawingSession())              using (var brush = new CanvasImageBrush(canvasDevice' inputBitmap))              using (var textCommandList = new CanvasCommandList(canvasDevice))              {                  using (var clds = textCommandList.CreateDrawingSession())                  {                      clds.DrawText(                          "Win2D\nMediaClip"'                          (float)inputBitmap.Size.Width / 2'                          (float)inputBitmap.Size.Height / 2'                          brush'                          new CanvasTextFormat()                          {                              FontSize = (float)inputBitmap.Size.Width / 5'                              FontWeight = new FontWeight() { Weight = 999 }'                              HorizontalAlignment = CanvasHorizontalAlignment.Center'                              VerticalAlignment = CanvasVerticalAlignment.Center                          });                  }                    var background = new GaussianBlurEffect()                  {                      BlurAmount = 10'                      BorderMode = EffectBorderMode.Hard'                      Source = new BrightnessEffect()                      {                          BlackPoint = new Vector2(0.5f' 0.7f)'                          Source = new SaturationEffect()                          {                              Saturation = 0'                              Source = inputBitmap                          }                      }                  };                    var shadow = new ShadowEffect()                  {                      Source = textCommandList'                      BlurAmount = 10                  };                    var composite = new CompositeEffect()                  {                      Sources = { background' shadow' textCommandList }                  };                    ds.DrawImage(composite);              }
Magic Number,ExampleGallery.Effects,ExampleVideoEffect,C:\repos\Microsoft_Win2D\samples\ExampleGallery\Effects\ExampleVideoEffect.cs,ProcessFrame,The following statement contains a magic number: using (var inputBitmap = CanvasBitmap.CreateFromDirect3D11Surface(canvasDevice' inputSurface))              using (var renderTarget = CanvasRenderTarget.CreateFromDirect3D11Surface(canvasDevice' outputSurface))              using (var ds = renderTarget.CreateDrawingSession())              using (var brush = new CanvasImageBrush(canvasDevice' inputBitmap))              using (var textCommandList = new CanvasCommandList(canvasDevice))              {                  using (var clds = textCommandList.CreateDrawingSession())                  {                      clds.DrawText(                          "Win2D\nMediaClip"'                          (float)inputBitmap.Size.Width / 2'                          (float)inputBitmap.Size.Height / 2'                          brush'                          new CanvasTextFormat()                          {                              FontSize = (float)inputBitmap.Size.Width / 5'                              FontWeight = new FontWeight() { Weight = 999 }'                              HorizontalAlignment = CanvasHorizontalAlignment.Center'                              VerticalAlignment = CanvasVerticalAlignment.Center                          });                  }                    var background = new GaussianBlurEffect()                  {                      BlurAmount = 10'                      BorderMode = EffectBorderMode.Hard'                      Source = new BrightnessEffect()                      {                          BlackPoint = new Vector2(0.5f' 0.7f)'                          Source = new SaturationEffect()                          {                              Saturation = 0'                              Source = inputBitmap                          }                      }                  };                    var shadow = new ShadowEffect()                  {                      Source = textCommandList'                      BlurAmount = 10                  };                    var composite = new CompositeEffect()                  {                      Sources = { background' shadow' textCommandList }                  };                    ds.DrawImage(composite);              }
Magic Number,ExampleGallery.Effects,ExampleVideoEffect,C:\repos\Microsoft_Win2D\samples\ExampleGallery\Effects\ExampleVideoEffect.cs,ProcessFrame,The following statement contains a magic number: using (var inputBitmap = CanvasBitmap.CreateFromDirect3D11Surface(canvasDevice' inputSurface))              using (var renderTarget = CanvasRenderTarget.CreateFromDirect3D11Surface(canvasDevice' outputSurface))              using (var ds = renderTarget.CreateDrawingSession())              using (var brush = new CanvasImageBrush(canvasDevice' inputBitmap))              using (var textCommandList = new CanvasCommandList(canvasDevice))              {                  using (var clds = textCommandList.CreateDrawingSession())                  {                      clds.DrawText(                          "Win2D\nMediaClip"'                          (float)inputBitmap.Size.Width / 2'                          (float)inputBitmap.Size.Height / 2'                          brush'                          new CanvasTextFormat()                          {                              FontSize = (float)inputBitmap.Size.Width / 5'                              FontWeight = new FontWeight() { Weight = 999 }'                              HorizontalAlignment = CanvasHorizontalAlignment.Center'                              VerticalAlignment = CanvasVerticalAlignment.Center                          });                  }                    var background = new GaussianBlurEffect()                  {                      BlurAmount = 10'                      BorderMode = EffectBorderMode.Hard'                      Source = new BrightnessEffect()                      {                          BlackPoint = new Vector2(0.5f' 0.7f)'                          Source = new SaturationEffect()                          {                              Saturation = 0'                              Source = inputBitmap                          }                      }                  };                    var shadow = new ShadowEffect()                  {                      Source = textCommandList'                      BlurAmount = 10                  };                    var composite = new CompositeEffect()                  {                      Sources = { background' shadow' textCommandList }                  };                    ds.DrawImage(composite);              }
Magic Number,ExampleGallery.Effects,ExampleVideoEffect,C:\repos\Microsoft_Win2D\samples\ExampleGallery\Effects\ExampleVideoEffect.cs,ProcessFrame,The following statement contains a magic number: using (var inputBitmap = CanvasBitmap.CreateFromDirect3D11Surface(canvasDevice' inputSurface))              using (var renderTarget = CanvasRenderTarget.CreateFromDirect3D11Surface(canvasDevice' outputSurface))              using (var ds = renderTarget.CreateDrawingSession())              using (var brush = new CanvasImageBrush(canvasDevice' inputBitmap))              using (var textCommandList = new CanvasCommandList(canvasDevice))              {                  using (var clds = textCommandList.CreateDrawingSession())                  {                      clds.DrawText(                          "Win2D\nMediaClip"'                          (float)inputBitmap.Size.Width / 2'                          (float)inputBitmap.Size.Height / 2'                          brush'                          new CanvasTextFormat()                          {                              FontSize = (float)inputBitmap.Size.Width / 5'                              FontWeight = new FontWeight() { Weight = 999 }'                              HorizontalAlignment = CanvasHorizontalAlignment.Center'                              VerticalAlignment = CanvasVerticalAlignment.Center                          });                  }                    var background = new GaussianBlurEffect()                  {                      BlurAmount = 10'                      BorderMode = EffectBorderMode.Hard'                      Source = new BrightnessEffect()                      {                          BlackPoint = new Vector2(0.5f' 0.7f)'                          Source = new SaturationEffect()                          {                              Saturation = 0'                              Source = inputBitmap                          }                      }                  };                    var shadow = new ShadowEffect()                  {                      Source = textCommandList'                      BlurAmount = 10                  };                    var composite = new CompositeEffect()                  {                      Sources = { background' shadow' textCommandList }                  };                    ds.DrawImage(composite);              }
Magic Number,ExampleGallery.Effects,DisplacementEffect,C:\repos\Microsoft_Win2D\samples\ExampleGallery\Effects\DisplacementEffect.cs,ProcessFrame,The following statement contains a magic number: using (CanvasBitmap input = CanvasBitmap.CreateFromDirect3D11Surface(canvasDevice' context.InputFrame.Direct3DSurface))              using (CanvasRenderTarget output = CanvasRenderTarget.CreateFromDirect3D11Surface(canvasDevice' context.OutputFrame.Direct3DSurface))              using (CanvasDrawingSession ds = output.CreateDrawingSession())              {                  TimeSpan time = context.InputFrame.RelativeTime.HasValue ? context.InputFrame.RelativeTime.Value : new TimeSpan();                    float dispX = (float)Math.Cos(time.TotalSeconds) * 75f;                  float dispY = (float)Math.Sin(time.TotalSeconds) * 75f;                    ds.Clear(Colors.Black);                    var dispMap = new DisplacementMapEffect()                  {                      Source = input'                      XChannelSelect = EffectChannelSelect.Red'                      YChannelSelect = EffectChannelSelect.Green'                      Amount = 100f'                      Displacement = new Transform2DEffect()                      {                          TransformMatrix = Matrix3x2.CreateTranslation(dispX' dispY)'                          Source = new BorderEffect()                          {                              ExtendX = CanvasEdgeBehavior.Mirror'                              ExtendY = CanvasEdgeBehavior.Mirror'                              Source = new TurbulenceEffect()                              {                                  Octaves = 3                              }                          }                      }                  };                    ds.DrawImage(dispMap' -25f' -25f);              }
Magic Number,ExampleGallery.Effects,RotatedTilesEffect,C:\repos\Microsoft_Win2D\samples\ExampleGallery\Effects\RotatedTilesEffect.cs,Rescale,The following statement contains a magic number: return outputMin + (input + 1) / 2 * (outputMax - outputMin);
