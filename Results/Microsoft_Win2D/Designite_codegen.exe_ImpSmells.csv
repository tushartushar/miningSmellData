Implementation smell,Namespace,Class,File,Method,Description
Long Method,CodeGen,OutputEffectType,C:\repos\Microsoft_Win2D\tools\codegen\exe\OutputEffectType.cs,OutputEffectIdl,The method has 108 lines of code.
Long Method,CodeGen,OutputEffectType,C:\repos\Microsoft_Win2D\tools\codegen\exe\OutputEffectType.cs,OutputEffectCpp,The method has 108 lines of code.
Complex Method,Effects,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,OverrideEnums,Cyclomatic complexity of the method is 9
Complex Method,Effects,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,ApplyEffectOverrides,Cyclomatic complexity of the method is 9
Complex Method,Effects,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,ParseD2DEffectsEnums,Cyclomatic complexity of the method is 9
Complex Method,Effects,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,AssignD2DEnums,Cyclomatic complexity of the method is 8
Complex Method,CodeGen,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,OverrideEnums,Cyclomatic complexity of the method is 9
Complex Method,CodeGen,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,ApplyEffectOverrides,Cyclomatic complexity of the method is 9
Complex Method,CodeGen,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,ParseD2DEffectsEnums,Cyclomatic complexity of the method is 9
Complex Method,CodeGen,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,AssignD2DEnums,Cyclomatic complexity of the method is 8
Complex Method,CodeGen,Enum,C:\repos\Microsoft_Win2D\tools\codegen\exe\Enum.cs,Enum,Cyclomatic complexity of the method is 9
Complex Method,CodeGen,Namespace,C:\repos\Microsoft_Win2D\tools\codegen\exe\Namespace.cs,Namespace,Cyclomatic complexity of the method is 9
Complex Method,CodeGen,OutputEffectType,C:\repos\Microsoft_Win2D\tools\codegen\exe\OutputEffectType.cs,OutputEffectIdl,Cyclomatic complexity of the method is 11
Complex Method,CodeGen,OutputEffectType,C:\repos\Microsoft_Win2D\tools\codegen\exe\OutputEffectType.cs,OutputEffectHeader,Cyclomatic complexity of the method is 10
Complex Method,CodeGen,OutputEffectType,C:\repos\Microsoft_Win2D\tools\codegen\exe\OutputEffectType.cs,WritePropertyImplementation,Cyclomatic complexity of the method is 10
Complex Method,CodeGen,Struct,C:\repos\Microsoft_Win2D\tools\codegen\exe\Settings.cs,Struct,Cyclomatic complexity of the method is 10
Complex Method,XmlBindings,Enum,C:\repos\Microsoft_Win2D\tools\codegen\exe\Enum.cs,Enum,Cyclomatic complexity of the method is 9
Complex Method,XmlBindings,Enum,C:\repos\Microsoft_Win2D\tools\codegen\exe\Enum.cs,Enum,Cyclomatic complexity of the method is 9
Complex Method,XmlBindings,Namespace,C:\repos\Microsoft_Win2D\tools\codegen\exe\Namespace.cs,Namespace,Cyclomatic complexity of the method is 9
Complex Method,XmlBindings,Struct,C:\repos\Microsoft_Win2D\tools\codegen\exe\Settings.cs,Struct,Cyclomatic complexity of the method is 10
Complex Method,XmlBindings,Struct,C:\repos\Microsoft_Win2D\tools\codegen\exe\Settings.cs,Struct,Cyclomatic complexity of the method is 10
Long Parameter List,CodeGen,Enum,C:\repos\Microsoft_Win2D\tools\codegen\exe\Enum.cs,Enum,The method has 6 parameters. Parameters: parentNamespace' rootProjectedNamespace' xmlData' overrides' typeDictionary' outputDataTypes
Long Parameter List,CodeGen,Namespace,C:\repos\Microsoft_Win2D\tools\codegen\exe\Namespace.cs,Namespace,The method has 5 parameters. Parameters: xmlData' overrides' rootProjectedNamespace' typeDictionary' outputDataTypes
Long Parameter List,CodeGen,Struct,C:\repos\Microsoft_Win2D\tools\codegen\exe\Settings.cs,Struct,The method has 5 parameters. Parameters: parentNamespace' xmlData' overrideData' typeDictionary' outputDataTypes
Long Parameter List,XmlBindings,Enum,C:\repos\Microsoft_Win2D\tools\codegen\exe\Enum.cs,Enum,The method has 6 parameters. Parameters: parentNamespace' rootProjectedNamespace' xmlData' overrides' typeDictionary' outputDataTypes
Long Parameter List,XmlBindings,Enum,C:\repos\Microsoft_Win2D\tools\codegen\exe\Enum.cs,Enum,The method has 6 parameters. Parameters: parentNamespace' rootProjectedNamespace' xmlData' overrides' typeDictionary' outputDataTypes
Long Parameter List,XmlBindings,Namespace,C:\repos\Microsoft_Win2D\tools\codegen\exe\Namespace.cs,Namespace,The method has 5 parameters. Parameters: xmlData' overrides' rootProjectedNamespace' typeDictionary' outputDataTypes
Long Parameter List,XmlBindings,Struct,C:\repos\Microsoft_Win2D\tools\codegen\exe\Settings.cs,Struct,The method has 5 parameters. Parameters: parentNamespace' xmlData' overrideData' typeDictionary' outputDataTypes
Long Parameter List,XmlBindings,Struct,C:\repos\Microsoft_Win2D\tools\codegen\exe\Settings.cs,Struct,The method has 5 parameters. Parameters: parentNamespace' xmlData' overrideData' typeDictionary' outputDataTypes
Long Identifier,CodeGen,Interface,C:\repos\Microsoft_Win2D\tools\codegen\exe\Interface.cs,,The length of the parameter m_nativeNameOfInheritanceParent is 31.
Long Identifier,XmlBindings,Interface,C:\repos\Microsoft_Win2D\tools\codegen\exe\Interface.cs,,The length of the parameter m_nativeNameOfInheritanceParent is 31.
Long Statement,Effects,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,OutputEffects,The length of the statement  "            var overridesXmlData = XmlBindings.Utilities.LoadXmlData<Overrides.XmlBindings.Settings>(inputEffectsDir' "../../Settings.xml"); " is 128.
Long Statement,Effects,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,DetectCommonEnums,The length of the statement  "                        allProperties[propertyIndex2].ExcludedEnumIndexes.AddRange(delta1.Select(field => fields.FieldsList.IndexOf(field).ToString())); " is 128.
Long Statement,Effects,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,DetectCommonEnums,The length of the statement  "                        allProperties[propertyIndex].ExcludedEnumIndexes.AddRange(delta2.Select(field => fields2.FieldsList.IndexOf(field).ToString())); " is 128.
Long Statement,Effects,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,IsEnumEqualD2DEnum,The length of the statement  "            if (FormatEnumValueString(d2dEnum.NativeName).Contains(FormatEnumValueString(enumProperty.EffectName)) || !shouldMatchName) " is 123.
Long Statement,Effects,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,IsEnumEqualD2DEnum,The length of the statement  "                        if (!FormatEnumValueString(d2dEnumValues[i].NativeName).Contains(FormatEnumValueString(enumProperty.EnumFields.FieldsList[i].Displayname))) " is 139.
Long Statement,CodeGen,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,OutputEffects,The length of the statement  "            var overridesXmlData = XmlBindings.Utilities.LoadXmlData<Overrides.XmlBindings.Settings>(inputEffectsDir' "../../Settings.xml"); " is 128.
Long Statement,CodeGen,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,DetectCommonEnums,The length of the statement  "                        allProperties[propertyIndex2].ExcludedEnumIndexes.AddRange(delta1.Select(field => fields.FieldsList.IndexOf(field).ToString())); " is 128.
Long Statement,CodeGen,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,DetectCommonEnums,The length of the statement  "                        allProperties[propertyIndex].ExcludedEnumIndexes.AddRange(delta2.Select(field => fields2.FieldsList.IndexOf(field).ToString())); " is 128.
Long Statement,CodeGen,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,IsEnumEqualD2DEnum,The length of the statement  "            if (FormatEnumValueString(d2dEnum.NativeName).Contains(FormatEnumValueString(enumProperty.EffectName)) || !shouldMatchName) " is 123.
Long Statement,CodeGen,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,IsEnumEqualD2DEnum,The length of the statement  "                        if (!FormatEnumValueString(d2dEnumValues[i].NativeName).Contains(FormatEnumValueString(enumProperty.EnumFields.FieldsList[i].Displayname))) " is 139.
Long Statement,CodeGen,OutputEffectType,C:\repos\Microsoft_Win2D\tools\codegen\exe\OutputEffectType.cs,OutputEffectMakers,The length of the statement  "                    output.WriteLine("{ " + effect.ClassName + "::EffectId()' " + padding + "MakeEffect<" + effect.ClassName + "> " + padding + "}'"); " is 130.
Long Statement,CodeGen,OutputEffectType,C:\repos\Microsoft_Win2D\tools\codegen\exe\OutputEffectType.cs,OutputEffectIdl,The length of the statement  "                    output.WriteLine("HRESULT " + property.Name + "([out] UINT32* valueCount' [out' size_is(' *valueCount)' retval] " + property.TypeNameIdl + "** valueElements);"); " is 161.
Long Statement,CodeGen,OutputEffectType,C:\repos\Microsoft_Win2D\tools\codegen\exe\OutputEffectType.cs,OutputEffectIdl,The length of the statement  "                    output.WriteLine("HRESULT " + property.Name + "([in] UINT32 valueCount' [in' size_is(valueCount)] " + property.TypeNameIdl + "* valueElements);"); " is 146.
Long Statement,CodeGen,OutputEffectType,C:\repos\Microsoft_Win2D\tools\codegen\exe\OutputEffectType.cs,OutputEffectIdl,The length of the statement  "                output.WriteLine("HRESULT Sources([out' retval] Windows.Foundation.Collections.IVector<IGRAPHICSEFFECTSOURCE*>** value);"); " is 123.
Long Statement,CodeGen,OutputEffectType,C:\repos\Microsoft_Win2D\tools\codegen\exe\OutputEffectType.cs,OutputEffectHeader,The length of the statement  "            output.WriteLine("InspectableClass(RuntimeClass_Microsoft_Graphics_Canvas_Effects_" + effect.ClassName + "' BaseTrust);"); " is 122.
Long Statement,CodeGen,OutputEffectType,C:\repos\Microsoft_Win2D\tools\codegen\exe\OutputEffectType.cs,OutputEffectHeader,The length of the statement  "                output.WriteLine("InspectableClassStatic(RuntimeClass_Microsoft_Graphics_Canvas_Effects_" + effect.ClassName + "' BaseTrust);"); " is 128.
Long Statement,CodeGen,OutputEffectType,C:\repos\Microsoft_Win2D\tools\codegen\exe\OutputEffectType.cs,OutputEffectCpp,The length of the statement  "                    output.WriteLine("*result = SharedDeviceState::GetInstance()->Is" + effect.Overrides.IsSupportedCheck + "Supported();"); " is 120.
Long Statement,CodeGen,OutputEffectType,C:\repos\Microsoft_Win2D\tools\codegen\exe\OutputEffectType.cs,OutputEffectCpp,The length of the statement  "                output.WriteLine("ActivatableClassWithFactory(" + effect.ClassName + "' SimpleAgileActivationFactory<" + effect.ClassName + ">);"); " is 131.
Long Statement,CodeGen,OutputEffectType,C:\repos\Microsoft_Win2D\tools\codegen\exe\OutputEffectType.cs,WritePropertyInitialization,The length of the statement  "            output.WriteLine(setFunction + "<" + (customConversion?? property.TypeNameBoxed) + ">(" + property.NativePropertyName + "' " + FormatPropertyValue(property' defaultValue) + ");"); " is 179.
Long Statement,CodeGen,OutputEffectType,C:\repos\Microsoft_Win2D\tools\codegen\exe\OutputEffectType.cs,FormatPropertyValue,The length of the statement  "                    value = property.NativePropertyName.Replace("PROP_"' "") + "_" + property.EnumFields.FieldsList[Int32.Parse(value)].Name.ToUpper(); " is 131.
Long Statement,CodeGen,Program,C:\repos\Microsoft_Win2D\tools\codegen\exe\Program.cs,ProcessInputFiles,The length of the statement  "            Overrides.XmlBindings.Settings overridesXmlData = XmlBindings.Utilities.LoadXmlData<Overrides.XmlBindings.Settings>(inputDir' "Settings.xml"); " is 142.
Complex Conditional,Effects,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,ParseD2DEffectsEnums,The conditional expression  "words.Length == 3 &&                                  words[1] == "=" &&                                  !words[0].StartsWith("//") &&                                  !words[0].Contains("FORCE_DWORD")"  is complex.
Complex Conditional,CodeGen,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,ParseD2DEffectsEnums,The conditional expression  "words.Length == 3 &&                                  words[1] == "=" &&                                  !words[0].StartsWith("//") &&                                  !words[0].Contains("FORCE_DWORD")"  is complex.
Complex Conditional,CodeGen,Struct,C:\repos\Microsoft_Win2D\tools\codegen\exe\Settings.cs,Struct,The conditional expression  "parentNamespace != null && !usesUnions  && (overrideData != null && overrideData.ShouldProject)"  is complex.
Complex Conditional,XmlBindings,Struct,C:\repos\Microsoft_Win2D\tools\codegen\exe\Settings.cs,Struct,The conditional expression  "parentNamespace != null && !usesUnions  && (overrideData != null && overrideData.ShouldProject)"  is complex.
Complex Conditional,XmlBindings,Struct,C:\repos\Microsoft_Win2D\tools\codegen\exe\Settings.cs,Struct,The conditional expression  "parentNamespace != null && !usesUnions  && (overrideData != null && overrideData.ShouldProject)"  is complex.
Magic Number,Effects,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,AssignEffectsClassNames,The following statement contains a magic number: foreach (var effect in effects)              {                  string className = FormatClassName(effect.Properties[0].Value);                    string prefix = className.Substring(0' 2);                  if (prefix == "2D" || prefix == "3D")                  {                      effect.ClassName = className.Remove(0' 2) + prefix + "Effect";                  }                  else                  {                      effect.ClassName = className + "Effect";                  }                    // Apply effect and property name overrides based on XML settings                  var effectOverride = overrides.Find(o => o.Name == effect.ClassName);                  if (effectOverride != null)                  {                      ApplyEffectOverrides(effect' effectOverride' typeDictionary);                  }                    effect.InterfaceName = "I" + effect.ClassName;              }
Magic Number,Effects,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,AssignEffectsClassNames,The following statement contains a magic number: foreach (var effect in effects)              {                  string className = FormatClassName(effect.Properties[0].Value);                    string prefix = className.Substring(0' 2);                  if (prefix == "2D" || prefix == "3D")                  {                      effect.ClassName = className.Remove(0' 2) + prefix + "Effect";                  }                  else                  {                      effect.ClassName = className + "Effect";                  }                    // Apply effect and property name overrides based on XML settings                  var effectOverride = overrides.Find(o => o.Name == effect.ClassName);                  if (effectOverride != null)                  {                      ApplyEffectOverrides(effect' effectOverride' typeDictionary);                  }                    effect.InterfaceName = "I" + effect.ClassName;              }
Magic Number,Effects,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,ParseD2DEffectsEnums,The following statement contains a magic number: foreach (var path in pathsToHeaders)              {                  StreamReader reader = File.OpenText(path);                  string line;                  while ((line = reader.ReadLine()) != null)                  {                      if (line.Contains("typedef enum") && line.Substring(line.Length - 4) != "PROP")                      {                          char[] separator = { ' ' };                          string[] words = line.Split(separator' StringSplitOptions.RemoveEmptyEntries);                          string enumName = words[words.Length - 1];                            // Skip brace                          reader.ReadLine();                            List<EnumValue> enumValues = new List<EnumValue>();                            while ((line = reader.ReadLine()) != "")                          {                              words = line.TrimEnd(''').Split(separator' StringSplitOptions.RemoveEmptyEntries);                                // Looking for definitions of the form "EnumEntry = value"                              if (words.Length == 3 &&                                  words[1] == "=" &&                                  !words[0].StartsWith("//") &&                                  !words[0].Contains("FORCE_DWORD"))                              {                                  NumberStyles numberStyle = 0;                                    if (words[2].StartsWith("0x"))                                  {                                      words[2] = words[2].Substring(2);                                      numberStyle = NumberStyles.HexNumber;                                  }                                    int value;                                  if (!int.TryParse(words[2]' numberStyle' null' out value))                                  {                                      value = enumValues.Count;                                  }                                    string nativeValueName = words[0];                                  Debug.Assert(nativeValueName.StartsWith("D2D1_"));                                  string rawValueNameComponent = nativeValueName.Substring(5);                                  enumValues.Add(new EnumValue(nativeValueName' rawValueNameComponent' value));                              }                          }                            Debug.Assert(enumName.StartsWith("D2D1_"));                          enumName = enumName.Substring(5);                          Enum effectEnum;                          string key = "D2D1::" + enumName;                          if (typeDictionary.ContainsKey(key))                          {                              effectEnum = typeDictionary[key] as Enum;                          }                          else                          {                              effectEnum = new Enum(enumName' enumValues' typeDictionary);                          }                          d2dEnums.Add(effectEnum);                      }                  }              }
Magic Number,Effects,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,ParseD2DEffectsEnums,The following statement contains a magic number: foreach (var path in pathsToHeaders)              {                  StreamReader reader = File.OpenText(path);                  string line;                  while ((line = reader.ReadLine()) != null)                  {                      if (line.Contains("typedef enum") && line.Substring(line.Length - 4) != "PROP")                      {                          char[] separator = { ' ' };                          string[] words = line.Split(separator' StringSplitOptions.RemoveEmptyEntries);                          string enumName = words[words.Length - 1];                            // Skip brace                          reader.ReadLine();                            List<EnumValue> enumValues = new List<EnumValue>();                            while ((line = reader.ReadLine()) != "")                          {                              words = line.TrimEnd(''').Split(separator' StringSplitOptions.RemoveEmptyEntries);                                // Looking for definitions of the form "EnumEntry = value"                              if (words.Length == 3 &&                                  words[1] == "=" &&                                  !words[0].StartsWith("//") &&                                  !words[0].Contains("FORCE_DWORD"))                              {                                  NumberStyles numberStyle = 0;                                    if (words[2].StartsWith("0x"))                                  {                                      words[2] = words[2].Substring(2);                                      numberStyle = NumberStyles.HexNumber;                                  }                                    int value;                                  if (!int.TryParse(words[2]' numberStyle' null' out value))                                  {                                      value = enumValues.Count;                                  }                                    string nativeValueName = words[0];                                  Debug.Assert(nativeValueName.StartsWith("D2D1_"));                                  string rawValueNameComponent = nativeValueName.Substring(5);                                  enumValues.Add(new EnumValue(nativeValueName' rawValueNameComponent' value));                              }                          }                            Debug.Assert(enumName.StartsWith("D2D1_"));                          enumName = enumName.Substring(5);                          Enum effectEnum;                          string key = "D2D1::" + enumName;                          if (typeDictionary.ContainsKey(key))                          {                              effectEnum = typeDictionary[key] as Enum;                          }                          else                          {                              effectEnum = new Enum(enumName' enumValues' typeDictionary);                          }                          d2dEnums.Add(effectEnum);                      }                  }              }
Magic Number,Effects,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,ParseD2DEffectsEnums,The following statement contains a magic number: foreach (var path in pathsToHeaders)              {                  StreamReader reader = File.OpenText(path);                  string line;                  while ((line = reader.ReadLine()) != null)                  {                      if (line.Contains("typedef enum") && line.Substring(line.Length - 4) != "PROP")                      {                          char[] separator = { ' ' };                          string[] words = line.Split(separator' StringSplitOptions.RemoveEmptyEntries);                          string enumName = words[words.Length - 1];                            // Skip brace                          reader.ReadLine();                            List<EnumValue> enumValues = new List<EnumValue>();                            while ((line = reader.ReadLine()) != "")                          {                              words = line.TrimEnd(''').Split(separator' StringSplitOptions.RemoveEmptyEntries);                                // Looking for definitions of the form "EnumEntry = value"                              if (words.Length == 3 &&                                  words[1] == "=" &&                                  !words[0].StartsWith("//") &&                                  !words[0].Contains("FORCE_DWORD"))                              {                                  NumberStyles numberStyle = 0;                                    if (words[2].StartsWith("0x"))                                  {                                      words[2] = words[2].Substring(2);                                      numberStyle = NumberStyles.HexNumber;                                  }                                    int value;                                  if (!int.TryParse(words[2]' numberStyle' null' out value))                                  {                                      value = enumValues.Count;                                  }                                    string nativeValueName = words[0];                                  Debug.Assert(nativeValueName.StartsWith("D2D1_"));                                  string rawValueNameComponent = nativeValueName.Substring(5);                                  enumValues.Add(new EnumValue(nativeValueName' rawValueNameComponent' value));                              }                          }                            Debug.Assert(enumName.StartsWith("D2D1_"));                          enumName = enumName.Substring(5);                          Enum effectEnum;                          string key = "D2D1::" + enumName;                          if (typeDictionary.ContainsKey(key))                          {                              effectEnum = typeDictionary[key] as Enum;                          }                          else                          {                              effectEnum = new Enum(enumName' enumValues' typeDictionary);                          }                          d2dEnums.Add(effectEnum);                      }                  }              }
Magic Number,Effects,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,ParseD2DEffectsEnums,The following statement contains a magic number: foreach (var path in pathsToHeaders)              {                  StreamReader reader = File.OpenText(path);                  string line;                  while ((line = reader.ReadLine()) != null)                  {                      if (line.Contains("typedef enum") && line.Substring(line.Length - 4) != "PROP")                      {                          char[] separator = { ' ' };                          string[] words = line.Split(separator' StringSplitOptions.RemoveEmptyEntries);                          string enumName = words[words.Length - 1];                            // Skip brace                          reader.ReadLine();                            List<EnumValue> enumValues = new List<EnumValue>();                            while ((line = reader.ReadLine()) != "")                          {                              words = line.TrimEnd(''').Split(separator' StringSplitOptions.RemoveEmptyEntries);                                // Looking for definitions of the form "EnumEntry = value"                              if (words.Length == 3 &&                                  words[1] == "=" &&                                  !words[0].StartsWith("//") &&                                  !words[0].Contains("FORCE_DWORD"))                              {                                  NumberStyles numberStyle = 0;                                    if (words[2].StartsWith("0x"))                                  {                                      words[2] = words[2].Substring(2);                                      numberStyle = NumberStyles.HexNumber;                                  }                                    int value;                                  if (!int.TryParse(words[2]' numberStyle' null' out value))                                  {                                      value = enumValues.Count;                                  }                                    string nativeValueName = words[0];                                  Debug.Assert(nativeValueName.StartsWith("D2D1_"));                                  string rawValueNameComponent = nativeValueName.Substring(5);                                  enumValues.Add(new EnumValue(nativeValueName' rawValueNameComponent' value));                              }                          }                            Debug.Assert(enumName.StartsWith("D2D1_"));                          enumName = enumName.Substring(5);                          Enum effectEnum;                          string key = "D2D1::" + enumName;                          if (typeDictionary.ContainsKey(key))                          {                              effectEnum = typeDictionary[key] as Enum;                          }                          else                          {                              effectEnum = new Enum(enumName' enumValues' typeDictionary);                          }                          d2dEnums.Add(effectEnum);                      }                  }              }
Magic Number,Effects,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,ParseD2DEffectsEnums,The following statement contains a magic number: foreach (var path in pathsToHeaders)              {                  StreamReader reader = File.OpenText(path);                  string line;                  while ((line = reader.ReadLine()) != null)                  {                      if (line.Contains("typedef enum") && line.Substring(line.Length - 4) != "PROP")                      {                          char[] separator = { ' ' };                          string[] words = line.Split(separator' StringSplitOptions.RemoveEmptyEntries);                          string enumName = words[words.Length - 1];                            // Skip brace                          reader.ReadLine();                            List<EnumValue> enumValues = new List<EnumValue>();                            while ((line = reader.ReadLine()) != "")                          {                              words = line.TrimEnd(''').Split(separator' StringSplitOptions.RemoveEmptyEntries);                                // Looking for definitions of the form "EnumEntry = value"                              if (words.Length == 3 &&                                  words[1] == "=" &&                                  !words[0].StartsWith("//") &&                                  !words[0].Contains("FORCE_DWORD"))                              {                                  NumberStyles numberStyle = 0;                                    if (words[2].StartsWith("0x"))                                  {                                      words[2] = words[2].Substring(2);                                      numberStyle = NumberStyles.HexNumber;                                  }                                    int value;                                  if (!int.TryParse(words[2]' numberStyle' null' out value))                                  {                                      value = enumValues.Count;                                  }                                    string nativeValueName = words[0];                                  Debug.Assert(nativeValueName.StartsWith("D2D1_"));                                  string rawValueNameComponent = nativeValueName.Substring(5);                                  enumValues.Add(new EnumValue(nativeValueName' rawValueNameComponent' value));                              }                          }                            Debug.Assert(enumName.StartsWith("D2D1_"));                          enumName = enumName.Substring(5);                          Enum effectEnum;                          string key = "D2D1::" + enumName;                          if (typeDictionary.ContainsKey(key))                          {                              effectEnum = typeDictionary[key] as Enum;                          }                          else                          {                              effectEnum = new Enum(enumName' enumValues' typeDictionary);                          }                          d2dEnums.Add(effectEnum);                      }                  }              }
Magic Number,Effects,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,ParseD2DEffectsEnums,The following statement contains a magic number: foreach (var path in pathsToHeaders)              {                  StreamReader reader = File.OpenText(path);                  string line;                  while ((line = reader.ReadLine()) != null)                  {                      if (line.Contains("typedef enum") && line.Substring(line.Length - 4) != "PROP")                      {                          char[] separator = { ' ' };                          string[] words = line.Split(separator' StringSplitOptions.RemoveEmptyEntries);                          string enumName = words[words.Length - 1];                            // Skip brace                          reader.ReadLine();                            List<EnumValue> enumValues = new List<EnumValue>();                            while ((line = reader.ReadLine()) != "")                          {                              words = line.TrimEnd(''').Split(separator' StringSplitOptions.RemoveEmptyEntries);                                // Looking for definitions of the form "EnumEntry = value"                              if (words.Length == 3 &&                                  words[1] == "=" &&                                  !words[0].StartsWith("//") &&                                  !words[0].Contains("FORCE_DWORD"))                              {                                  NumberStyles numberStyle = 0;                                    if (words[2].StartsWith("0x"))                                  {                                      words[2] = words[2].Substring(2);                                      numberStyle = NumberStyles.HexNumber;                                  }                                    int value;                                  if (!int.TryParse(words[2]' numberStyle' null' out value))                                  {                                      value = enumValues.Count;                                  }                                    string nativeValueName = words[0];                                  Debug.Assert(nativeValueName.StartsWith("D2D1_"));                                  string rawValueNameComponent = nativeValueName.Substring(5);                                  enumValues.Add(new EnumValue(nativeValueName' rawValueNameComponent' value));                              }                          }                            Debug.Assert(enumName.StartsWith("D2D1_"));                          enumName = enumName.Substring(5);                          Enum effectEnum;                          string key = "D2D1::" + enumName;                          if (typeDictionary.ContainsKey(key))                          {                              effectEnum = typeDictionary[key] as Enum;                          }                          else                          {                              effectEnum = new Enum(enumName' enumValues' typeDictionary);                          }                          d2dEnums.Add(effectEnum);                      }                  }              }
Magic Number,Effects,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,ParseD2DEffectsEnums,The following statement contains a magic number: foreach (var path in pathsToHeaders)              {                  StreamReader reader = File.OpenText(path);                  string line;                  while ((line = reader.ReadLine()) != null)                  {                      if (line.Contains("typedef enum") && line.Substring(line.Length - 4) != "PROP")                      {                          char[] separator = { ' ' };                          string[] words = line.Split(separator' StringSplitOptions.RemoveEmptyEntries);                          string enumName = words[words.Length - 1];                            // Skip brace                          reader.ReadLine();                            List<EnumValue> enumValues = new List<EnumValue>();                            while ((line = reader.ReadLine()) != "")                          {                              words = line.TrimEnd(''').Split(separator' StringSplitOptions.RemoveEmptyEntries);                                // Looking for definitions of the form "EnumEntry = value"                              if (words.Length == 3 &&                                  words[1] == "=" &&                                  !words[0].StartsWith("//") &&                                  !words[0].Contains("FORCE_DWORD"))                              {                                  NumberStyles numberStyle = 0;                                    if (words[2].StartsWith("0x"))                                  {                                      words[2] = words[2].Substring(2);                                      numberStyle = NumberStyles.HexNumber;                                  }                                    int value;                                  if (!int.TryParse(words[2]' numberStyle' null' out value))                                  {                                      value = enumValues.Count;                                  }                                    string nativeValueName = words[0];                                  Debug.Assert(nativeValueName.StartsWith("D2D1_"));                                  string rawValueNameComponent = nativeValueName.Substring(5);                                  enumValues.Add(new EnumValue(nativeValueName' rawValueNameComponent' value));                              }                          }                            Debug.Assert(enumName.StartsWith("D2D1_"));                          enumName = enumName.Substring(5);                          Enum effectEnum;                          string key = "D2D1::" + enumName;                          if (typeDictionary.ContainsKey(key))                          {                              effectEnum = typeDictionary[key] as Enum;                          }                          else                          {                              effectEnum = new Enum(enumName' enumValues' typeDictionary);                          }                          d2dEnums.Add(effectEnum);                      }                  }              }
Magic Number,Effects,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,ParseD2DEffectsEnums,The following statement contains a magic number: foreach (var path in pathsToHeaders)              {                  StreamReader reader = File.OpenText(path);                  string line;                  while ((line = reader.ReadLine()) != null)                  {                      if (line.Contains("typedef enum") && line.Substring(line.Length - 4) != "PROP")                      {                          char[] separator = { ' ' };                          string[] words = line.Split(separator' StringSplitOptions.RemoveEmptyEntries);                          string enumName = words[words.Length - 1];                            // Skip brace                          reader.ReadLine();                            List<EnumValue> enumValues = new List<EnumValue>();                            while ((line = reader.ReadLine()) != "")                          {                              words = line.TrimEnd(''').Split(separator' StringSplitOptions.RemoveEmptyEntries);                                // Looking for definitions of the form "EnumEntry = value"                              if (words.Length == 3 &&                                  words[1] == "=" &&                                  !words[0].StartsWith("//") &&                                  !words[0].Contains("FORCE_DWORD"))                              {                                  NumberStyles numberStyle = 0;                                    if (words[2].StartsWith("0x"))                                  {                                      words[2] = words[2].Substring(2);                                      numberStyle = NumberStyles.HexNumber;                                  }                                    int value;                                  if (!int.TryParse(words[2]' numberStyle' null' out value))                                  {                                      value = enumValues.Count;                                  }                                    string nativeValueName = words[0];                                  Debug.Assert(nativeValueName.StartsWith("D2D1_"));                                  string rawValueNameComponent = nativeValueName.Substring(5);                                  enumValues.Add(new EnumValue(nativeValueName' rawValueNameComponent' value));                              }                          }                            Debug.Assert(enumName.StartsWith("D2D1_"));                          enumName = enumName.Substring(5);                          Enum effectEnum;                          string key = "D2D1::" + enumName;                          if (typeDictionary.ContainsKey(key))                          {                              effectEnum = typeDictionary[key] as Enum;                          }                          else                          {                              effectEnum = new Enum(enumName' enumValues' typeDictionary);                          }                          d2dEnums.Add(effectEnum);                      }                  }              }
Magic Number,Effects,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,ParseD2DEffectsEnums,The following statement contains a magic number: foreach (var path in pathsToHeaders)              {                  StreamReader reader = File.OpenText(path);                  string line;                  while ((line = reader.ReadLine()) != null)                  {                      if (line.Contains("typedef enum") && line.Substring(line.Length - 4) != "PROP")                      {                          char[] separator = { ' ' };                          string[] words = line.Split(separator' StringSplitOptions.RemoveEmptyEntries);                          string enumName = words[words.Length - 1];                            // Skip brace                          reader.ReadLine();                            List<EnumValue> enumValues = new List<EnumValue>();                            while ((line = reader.ReadLine()) != "")                          {                              words = line.TrimEnd(''').Split(separator' StringSplitOptions.RemoveEmptyEntries);                                // Looking for definitions of the form "EnumEntry = value"                              if (words.Length == 3 &&                                  words[1] == "=" &&                                  !words[0].StartsWith("//") &&                                  !words[0].Contains("FORCE_DWORD"))                              {                                  NumberStyles numberStyle = 0;                                    if (words[2].StartsWith("0x"))                                  {                                      words[2] = words[2].Substring(2);                                      numberStyle = NumberStyles.HexNumber;                                  }                                    int value;                                  if (!int.TryParse(words[2]' numberStyle' null' out value))                                  {                                      value = enumValues.Count;                                  }                                    string nativeValueName = words[0];                                  Debug.Assert(nativeValueName.StartsWith("D2D1_"));                                  string rawValueNameComponent = nativeValueName.Substring(5);                                  enumValues.Add(new EnumValue(nativeValueName' rawValueNameComponent' value));                              }                          }                            Debug.Assert(enumName.StartsWith("D2D1_"));                          enumName = enumName.Substring(5);                          Enum effectEnum;                          string key = "D2D1::" + enumName;                          if (typeDictionary.ContainsKey(key))                          {                              effectEnum = typeDictionary[key] as Enum;                          }                          else                          {                              effectEnum = new Enum(enumName' enumValues' typeDictionary);                          }                          d2dEnums.Add(effectEnum);                      }                  }              }
Magic Number,CodeGen,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,AssignEffectsClassNames,The following statement contains a magic number: foreach (var effect in effects)              {                  string className = FormatClassName(effect.Properties[0].Value);                    string prefix = className.Substring(0' 2);                  if (prefix == "2D" || prefix == "3D")                  {                      effect.ClassName = className.Remove(0' 2) + prefix + "Effect";                  }                  else                  {                      effect.ClassName = className + "Effect";                  }                    // Apply effect and property name overrides based on XML settings                  var effectOverride = overrides.Find(o => o.Name == effect.ClassName);                  if (effectOverride != null)                  {                      ApplyEffectOverrides(effect' effectOverride' typeDictionary);                  }                    effect.InterfaceName = "I" + effect.ClassName;              }
Magic Number,CodeGen,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,AssignEffectsClassNames,The following statement contains a magic number: foreach (var effect in effects)              {                  string className = FormatClassName(effect.Properties[0].Value);                    string prefix = className.Substring(0' 2);                  if (prefix == "2D" || prefix == "3D")                  {                      effect.ClassName = className.Remove(0' 2) + prefix + "Effect";                  }                  else                  {                      effect.ClassName = className + "Effect";                  }                    // Apply effect and property name overrides based on XML settings                  var effectOverride = overrides.Find(o => o.Name == effect.ClassName);                  if (effectOverride != null)                  {                      ApplyEffectOverrides(effect' effectOverride' typeDictionary);                  }                    effect.InterfaceName = "I" + effect.ClassName;              }
Magic Number,CodeGen,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,ParseD2DEffectsEnums,The following statement contains a magic number: foreach (var path in pathsToHeaders)              {                  StreamReader reader = File.OpenText(path);                  string line;                  while ((line = reader.ReadLine()) != null)                  {                      if (line.Contains("typedef enum") && line.Substring(line.Length - 4) != "PROP")                      {                          char[] separator = { ' ' };                          string[] words = line.Split(separator' StringSplitOptions.RemoveEmptyEntries);                          string enumName = words[words.Length - 1];                            // Skip brace                          reader.ReadLine();                            List<EnumValue> enumValues = new List<EnumValue>();                            while ((line = reader.ReadLine()) != "")                          {                              words = line.TrimEnd(''').Split(separator' StringSplitOptions.RemoveEmptyEntries);                                // Looking for definitions of the form "EnumEntry = value"                              if (words.Length == 3 &&                                  words[1] == "=" &&                                  !words[0].StartsWith("//") &&                                  !words[0].Contains("FORCE_DWORD"))                              {                                  NumberStyles numberStyle = 0;                                    if (words[2].StartsWith("0x"))                                  {                                      words[2] = words[2].Substring(2);                                      numberStyle = NumberStyles.HexNumber;                                  }                                    int value;                                  if (!int.TryParse(words[2]' numberStyle' null' out value))                                  {                                      value = enumValues.Count;                                  }                                    string nativeValueName = words[0];                                  Debug.Assert(nativeValueName.StartsWith("D2D1_"));                                  string rawValueNameComponent = nativeValueName.Substring(5);                                  enumValues.Add(new EnumValue(nativeValueName' rawValueNameComponent' value));                              }                          }                            Debug.Assert(enumName.StartsWith("D2D1_"));                          enumName = enumName.Substring(5);                          Enum effectEnum;                          string key = "D2D1::" + enumName;                          if (typeDictionary.ContainsKey(key))                          {                              effectEnum = typeDictionary[key] as Enum;                          }                          else                          {                              effectEnum = new Enum(enumName' enumValues' typeDictionary);                          }                          d2dEnums.Add(effectEnum);                      }                  }              }
Magic Number,CodeGen,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,ParseD2DEffectsEnums,The following statement contains a magic number: foreach (var path in pathsToHeaders)              {                  StreamReader reader = File.OpenText(path);                  string line;                  while ((line = reader.ReadLine()) != null)                  {                      if (line.Contains("typedef enum") && line.Substring(line.Length - 4) != "PROP")                      {                          char[] separator = { ' ' };                          string[] words = line.Split(separator' StringSplitOptions.RemoveEmptyEntries);                          string enumName = words[words.Length - 1];                            // Skip brace                          reader.ReadLine();                            List<EnumValue> enumValues = new List<EnumValue>();                            while ((line = reader.ReadLine()) != "")                          {                              words = line.TrimEnd(''').Split(separator' StringSplitOptions.RemoveEmptyEntries);                                // Looking for definitions of the form "EnumEntry = value"                              if (words.Length == 3 &&                                  words[1] == "=" &&                                  !words[0].StartsWith("//") &&                                  !words[0].Contains("FORCE_DWORD"))                              {                                  NumberStyles numberStyle = 0;                                    if (words[2].StartsWith("0x"))                                  {                                      words[2] = words[2].Substring(2);                                      numberStyle = NumberStyles.HexNumber;                                  }                                    int value;                                  if (!int.TryParse(words[2]' numberStyle' null' out value))                                  {                                      value = enumValues.Count;                                  }                                    string nativeValueName = words[0];                                  Debug.Assert(nativeValueName.StartsWith("D2D1_"));                                  string rawValueNameComponent = nativeValueName.Substring(5);                                  enumValues.Add(new EnumValue(nativeValueName' rawValueNameComponent' value));                              }                          }                            Debug.Assert(enumName.StartsWith("D2D1_"));                          enumName = enumName.Substring(5);                          Enum effectEnum;                          string key = "D2D1::" + enumName;                          if (typeDictionary.ContainsKey(key))                          {                              effectEnum = typeDictionary[key] as Enum;                          }                          else                          {                              effectEnum = new Enum(enumName' enumValues' typeDictionary);                          }                          d2dEnums.Add(effectEnum);                      }                  }              }
Magic Number,CodeGen,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,ParseD2DEffectsEnums,The following statement contains a magic number: foreach (var path in pathsToHeaders)              {                  StreamReader reader = File.OpenText(path);                  string line;                  while ((line = reader.ReadLine()) != null)                  {                      if (line.Contains("typedef enum") && line.Substring(line.Length - 4) != "PROP")                      {                          char[] separator = { ' ' };                          string[] words = line.Split(separator' StringSplitOptions.RemoveEmptyEntries);                          string enumName = words[words.Length - 1];                            // Skip brace                          reader.ReadLine();                            List<EnumValue> enumValues = new List<EnumValue>();                            while ((line = reader.ReadLine()) != "")                          {                              words = line.TrimEnd(''').Split(separator' StringSplitOptions.RemoveEmptyEntries);                                // Looking for definitions of the form "EnumEntry = value"                              if (words.Length == 3 &&                                  words[1] == "=" &&                                  !words[0].StartsWith("//") &&                                  !words[0].Contains("FORCE_DWORD"))                              {                                  NumberStyles numberStyle = 0;                                    if (words[2].StartsWith("0x"))                                  {                                      words[2] = words[2].Substring(2);                                      numberStyle = NumberStyles.HexNumber;                                  }                                    int value;                                  if (!int.TryParse(words[2]' numberStyle' null' out value))                                  {                                      value = enumValues.Count;                                  }                                    string nativeValueName = words[0];                                  Debug.Assert(nativeValueName.StartsWith("D2D1_"));                                  string rawValueNameComponent = nativeValueName.Substring(5);                                  enumValues.Add(new EnumValue(nativeValueName' rawValueNameComponent' value));                              }                          }                            Debug.Assert(enumName.StartsWith("D2D1_"));                          enumName = enumName.Substring(5);                          Enum effectEnum;                          string key = "D2D1::" + enumName;                          if (typeDictionary.ContainsKey(key))                          {                              effectEnum = typeDictionary[key] as Enum;                          }                          else                          {                              effectEnum = new Enum(enumName' enumValues' typeDictionary);                          }                          d2dEnums.Add(effectEnum);                      }                  }              }
Magic Number,CodeGen,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,ParseD2DEffectsEnums,The following statement contains a magic number: foreach (var path in pathsToHeaders)              {                  StreamReader reader = File.OpenText(path);                  string line;                  while ((line = reader.ReadLine()) != null)                  {                      if (line.Contains("typedef enum") && line.Substring(line.Length - 4) != "PROP")                      {                          char[] separator = { ' ' };                          string[] words = line.Split(separator' StringSplitOptions.RemoveEmptyEntries);                          string enumName = words[words.Length - 1];                            // Skip brace                          reader.ReadLine();                            List<EnumValue> enumValues = new List<EnumValue>();                            while ((line = reader.ReadLine()) != "")                          {                              words = line.TrimEnd(''').Split(separator' StringSplitOptions.RemoveEmptyEntries);                                // Looking for definitions of the form "EnumEntry = value"                              if (words.Length == 3 &&                                  words[1] == "=" &&                                  !words[0].StartsWith("//") &&                                  !words[0].Contains("FORCE_DWORD"))                              {                                  NumberStyles numberStyle = 0;                                    if (words[2].StartsWith("0x"))                                  {                                      words[2] = words[2].Substring(2);                                      numberStyle = NumberStyles.HexNumber;                                  }                                    int value;                                  if (!int.TryParse(words[2]' numberStyle' null' out value))                                  {                                      value = enumValues.Count;                                  }                                    string nativeValueName = words[0];                                  Debug.Assert(nativeValueName.StartsWith("D2D1_"));                                  string rawValueNameComponent = nativeValueName.Substring(5);                                  enumValues.Add(new EnumValue(nativeValueName' rawValueNameComponent' value));                              }                          }                            Debug.Assert(enumName.StartsWith("D2D1_"));                          enumName = enumName.Substring(5);                          Enum effectEnum;                          string key = "D2D1::" + enumName;                          if (typeDictionary.ContainsKey(key))                          {                              effectEnum = typeDictionary[key] as Enum;                          }                          else                          {                              effectEnum = new Enum(enumName' enumValues' typeDictionary);                          }                          d2dEnums.Add(effectEnum);                      }                  }              }
Magic Number,CodeGen,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,ParseD2DEffectsEnums,The following statement contains a magic number: foreach (var path in pathsToHeaders)              {                  StreamReader reader = File.OpenText(path);                  string line;                  while ((line = reader.ReadLine()) != null)                  {                      if (line.Contains("typedef enum") && line.Substring(line.Length - 4) != "PROP")                      {                          char[] separator = { ' ' };                          string[] words = line.Split(separator' StringSplitOptions.RemoveEmptyEntries);                          string enumName = words[words.Length - 1];                            // Skip brace                          reader.ReadLine();                            List<EnumValue> enumValues = new List<EnumValue>();                            while ((line = reader.ReadLine()) != "")                          {                              words = line.TrimEnd(''').Split(separator' StringSplitOptions.RemoveEmptyEntries);                                // Looking for definitions of the form "EnumEntry = value"                              if (words.Length == 3 &&                                  words[1] == "=" &&                                  !words[0].StartsWith("//") &&                                  !words[0].Contains("FORCE_DWORD"))                              {                                  NumberStyles numberStyle = 0;                                    if (words[2].StartsWith("0x"))                                  {                                      words[2] = words[2].Substring(2);                                      numberStyle = NumberStyles.HexNumber;                                  }                                    int value;                                  if (!int.TryParse(words[2]' numberStyle' null' out value))                                  {                                      value = enumValues.Count;                                  }                                    string nativeValueName = words[0];                                  Debug.Assert(nativeValueName.StartsWith("D2D1_"));                                  string rawValueNameComponent = nativeValueName.Substring(5);                                  enumValues.Add(new EnumValue(nativeValueName' rawValueNameComponent' value));                              }                          }                            Debug.Assert(enumName.StartsWith("D2D1_"));                          enumName = enumName.Substring(5);                          Enum effectEnum;                          string key = "D2D1::" + enumName;                          if (typeDictionary.ContainsKey(key))                          {                              effectEnum = typeDictionary[key] as Enum;                          }                          else                          {                              effectEnum = new Enum(enumName' enumValues' typeDictionary);                          }                          d2dEnums.Add(effectEnum);                      }                  }              }
Magic Number,CodeGen,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,ParseD2DEffectsEnums,The following statement contains a magic number: foreach (var path in pathsToHeaders)              {                  StreamReader reader = File.OpenText(path);                  string line;                  while ((line = reader.ReadLine()) != null)                  {                      if (line.Contains("typedef enum") && line.Substring(line.Length - 4) != "PROP")                      {                          char[] separator = { ' ' };                          string[] words = line.Split(separator' StringSplitOptions.RemoveEmptyEntries);                          string enumName = words[words.Length - 1];                            // Skip brace                          reader.ReadLine();                            List<EnumValue> enumValues = new List<EnumValue>();                            while ((line = reader.ReadLine()) != "")                          {                              words = line.TrimEnd(''').Split(separator' StringSplitOptions.RemoveEmptyEntries);                                // Looking for definitions of the form "EnumEntry = value"                              if (words.Length == 3 &&                                  words[1] == "=" &&                                  !words[0].StartsWith("//") &&                                  !words[0].Contains("FORCE_DWORD"))                              {                                  NumberStyles numberStyle = 0;                                    if (words[2].StartsWith("0x"))                                  {                                      words[2] = words[2].Substring(2);                                      numberStyle = NumberStyles.HexNumber;                                  }                                    int value;                                  if (!int.TryParse(words[2]' numberStyle' null' out value))                                  {                                      value = enumValues.Count;                                  }                                    string nativeValueName = words[0];                                  Debug.Assert(nativeValueName.StartsWith("D2D1_"));                                  string rawValueNameComponent = nativeValueName.Substring(5);                                  enumValues.Add(new EnumValue(nativeValueName' rawValueNameComponent' value));                              }                          }                            Debug.Assert(enumName.StartsWith("D2D1_"));                          enumName = enumName.Substring(5);                          Enum effectEnum;                          string key = "D2D1::" + enumName;                          if (typeDictionary.ContainsKey(key))                          {                              effectEnum = typeDictionary[key] as Enum;                          }                          else                          {                              effectEnum = new Enum(enumName' enumValues' typeDictionary);                          }                          d2dEnums.Add(effectEnum);                      }                  }              }
Magic Number,CodeGen,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,ParseD2DEffectsEnums,The following statement contains a magic number: foreach (var path in pathsToHeaders)              {                  StreamReader reader = File.OpenText(path);                  string line;                  while ((line = reader.ReadLine()) != null)                  {                      if (line.Contains("typedef enum") && line.Substring(line.Length - 4) != "PROP")                      {                          char[] separator = { ' ' };                          string[] words = line.Split(separator' StringSplitOptions.RemoveEmptyEntries);                          string enumName = words[words.Length - 1];                            // Skip brace                          reader.ReadLine();                            List<EnumValue> enumValues = new List<EnumValue>();                            while ((line = reader.ReadLine()) != "")                          {                              words = line.TrimEnd(''').Split(separator' StringSplitOptions.RemoveEmptyEntries);                                // Looking for definitions of the form "EnumEntry = value"                              if (words.Length == 3 &&                                  words[1] == "=" &&                                  !words[0].StartsWith("//") &&                                  !words[0].Contains("FORCE_DWORD"))                              {                                  NumberStyles numberStyle = 0;                                    if (words[2].StartsWith("0x"))                                  {                                      words[2] = words[2].Substring(2);                                      numberStyle = NumberStyles.HexNumber;                                  }                                    int value;                                  if (!int.TryParse(words[2]' numberStyle' null' out value))                                  {                                      value = enumValues.Count;                                  }                                    string nativeValueName = words[0];                                  Debug.Assert(nativeValueName.StartsWith("D2D1_"));                                  string rawValueNameComponent = nativeValueName.Substring(5);                                  enumValues.Add(new EnumValue(nativeValueName' rawValueNameComponent' value));                              }                          }                            Debug.Assert(enumName.StartsWith("D2D1_"));                          enumName = enumName.Substring(5);                          Enum effectEnum;                          string key = "D2D1::" + enumName;                          if (typeDictionary.ContainsKey(key))                          {                              effectEnum = typeDictionary[key] as Enum;                          }                          else                          {                              effectEnum = new Enum(enumName' enumValues' typeDictionary);                          }                          d2dEnums.Add(effectEnum);                      }                  }              }
Magic Number,CodeGen,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,ParseD2DEffectsEnums,The following statement contains a magic number: foreach (var path in pathsToHeaders)              {                  StreamReader reader = File.OpenText(path);                  string line;                  while ((line = reader.ReadLine()) != null)                  {                      if (line.Contains("typedef enum") && line.Substring(line.Length - 4) != "PROP")                      {                          char[] separator = { ' ' };                          string[] words = line.Split(separator' StringSplitOptions.RemoveEmptyEntries);                          string enumName = words[words.Length - 1];                            // Skip brace                          reader.ReadLine();                            List<EnumValue> enumValues = new List<EnumValue>();                            while ((line = reader.ReadLine()) != "")                          {                              words = line.TrimEnd(''').Split(separator' StringSplitOptions.RemoveEmptyEntries);                                // Looking for definitions of the form "EnumEntry = value"                              if (words.Length == 3 &&                                  words[1] == "=" &&                                  !words[0].StartsWith("//") &&                                  !words[0].Contains("FORCE_DWORD"))                              {                                  NumberStyles numberStyle = 0;                                    if (words[2].StartsWith("0x"))                                  {                                      words[2] = words[2].Substring(2);                                      numberStyle = NumberStyles.HexNumber;                                  }                                    int value;                                  if (!int.TryParse(words[2]' numberStyle' null' out value))                                  {                                      value = enumValues.Count;                                  }                                    string nativeValueName = words[0];                                  Debug.Assert(nativeValueName.StartsWith("D2D1_"));                                  string rawValueNameComponent = nativeValueName.Substring(5);                                  enumValues.Add(new EnumValue(nativeValueName' rawValueNameComponent' value));                              }                          }                            Debug.Assert(enumName.StartsWith("D2D1_"));                          enumName = enumName.Substring(5);                          Enum effectEnum;                          string key = "D2D1::" + enumName;                          if (typeDictionary.ContainsKey(key))                          {                              effectEnum = typeDictionary[key] as Enum;                          }                          else                          {                              effectEnum = new Enum(enumName' enumValues' typeDictionary);                          }                          d2dEnums.Add(effectEnum);                      }                  }              }
Magic Number,CodeGen,EffectGenerator,C:\repos\Microsoft_Win2D\tools\codegen\exe\Effect.cs,ParseD2DEffectsEnums,The following statement contains a magic number: foreach (var path in pathsToHeaders)              {                  StreamReader reader = File.OpenText(path);                  string line;                  while ((line = reader.ReadLine()) != null)                  {                      if (line.Contains("typedef enum") && line.Substring(line.Length - 4) != "PROP")                      {                          char[] separator = { ' ' };                          string[] words = line.Split(separator' StringSplitOptions.RemoveEmptyEntries);                          string enumName = words[words.Length - 1];                            // Skip brace                          reader.ReadLine();                            List<EnumValue> enumValues = new List<EnumValue>();                            while ((line = reader.ReadLine()) != "")                          {                              words = line.TrimEnd(''').Split(separator' StringSplitOptions.RemoveEmptyEntries);                                // Looking for definitions of the form "EnumEntry = value"                              if (words.Length == 3 &&                                  words[1] == "=" &&                                  !words[0].StartsWith("//") &&                                  !words[0].Contains("FORCE_DWORD"))                              {                                  NumberStyles numberStyle = 0;                                    if (words[2].StartsWith("0x"))                                  {                                      words[2] = words[2].Substring(2);                                      numberStyle = NumberStyles.HexNumber;                                  }                                    int value;                                  if (!int.TryParse(words[2]' numberStyle' null' out value))                                  {                                      value = enumValues.Count;                                  }                                    string nativeValueName = words[0];                                  Debug.Assert(nativeValueName.StartsWith("D2D1_"));                                  string rawValueNameComponent = nativeValueName.Substring(5);                                  enumValues.Add(new EnumValue(nativeValueName' rawValueNameComponent' value));                              }                          }                            Debug.Assert(enumName.StartsWith("D2D1_"));                          enumName = enumName.Substring(5);                          Enum effectEnum;                          string key = "D2D1::" + enumName;                          if (typeDictionary.ContainsKey(key))                          {                              effectEnum = typeDictionary[key] as Enum;                          }                          else                          {                              effectEnum = new Enum(enumName' enumValues' typeDictionary);                          }                          d2dEnums.Add(effectEnum);                      }                  }              }
Magic Number,CodeGen,EnumValueComparer,C:\repos\Microsoft_Win2D\tools\codegen\exe\Enum.cs,ParseValueExpression,The following statement contains a magic number: if (valueExpression.StartsWith("0x"))                  {                      valueExpression = valueExpression.Remove(0' 2);                      numberStyle = NumberStyles.HexNumber;                  }
Magic Number,CodeGen,UuidHelper,C:\repos\Microsoft_Win2D\tools\codegen\exe\UuidHelper.cs,GetVersion5Uuid,The following statement contains a magic number: using (var sha1 = SHA1.Create())              {                  result = sha1.ComputeHash(inputBytes).Take(16).ToArray();              }
Magic Number,CodeGen,UuidHelper,C:\repos\Microsoft_Win2D\tools\codegen\exe\UuidHelper.cs,GetVersion5Uuid,The following statement contains a magic number: result[8] &= 0x3F;
Magic Number,CodeGen,UuidHelper,C:\repos\Microsoft_Win2D\tools\codegen\exe\UuidHelper.cs,GetVersion5Uuid,The following statement contains a magic number: result[8] |= 2 << 6;
Magic Number,CodeGen,UuidHelper,C:\repos\Microsoft_Win2D\tools\codegen\exe\UuidHelper.cs,GetVersion5Uuid,The following statement contains a magic number: result[8] |= 2 << 6;
Magic Number,CodeGen,UuidHelper,C:\repos\Microsoft_Win2D\tools\codegen\exe\UuidHelper.cs,GetVersion5Uuid,The following statement contains a magic number: result[8] |= 2 << 6;
Magic Number,CodeGen,UuidHelper,C:\repos\Microsoft_Win2D\tools\codegen\exe\UuidHelper.cs,GetVersion5Uuid,The following statement contains a magic number: result[6] &= 0x0F;
Magic Number,CodeGen,UuidHelper,C:\repos\Microsoft_Win2D\tools\codegen\exe\UuidHelper.cs,GetVersion5Uuid,The following statement contains a magic number: result[6] |= 5 << 4;
Magic Number,CodeGen,UuidHelper,C:\repos\Microsoft_Win2D\tools\codegen\exe\UuidHelper.cs,GetVersion5Uuid,The following statement contains a magic number: result[6] |= 5 << 4;
Magic Number,CodeGen,UuidHelper,C:\repos\Microsoft_Win2D\tools\codegen\exe\UuidHelper.cs,GetVersion5Uuid,The following statement contains a magic number: result[6] |= 5 << 4;
Magic Number,CodeGen,UuidHelper,C:\repos\Microsoft_Win2D\tools\codegen\exe\UuidHelper.cs,SwapByteOrder,The following statement contains a magic number: Debug.Assert(uuid.Length == 16);
Magic Number,CodeGen,UuidHelper,C:\repos\Microsoft_Win2D\tools\codegen\exe\UuidHelper.cs,SwapByteOrder,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  // htonl(time_low)                  Swap(ref uuid[0]' ref uuid[3]);                  Swap(ref uuid[1]' ref uuid[2]);                    // htons(time_mid)                  Swap(ref uuid[4]' ref uuid[5]);                    // htons(time_hi_and_version)                  Swap(ref uuid[6]' ref uuid[7]);              }
Magic Number,CodeGen,UuidHelper,C:\repos\Microsoft_Win2D\tools\codegen\exe\UuidHelper.cs,SwapByteOrder,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  // htonl(time_low)                  Swap(ref uuid[0]' ref uuid[3]);                  Swap(ref uuid[1]' ref uuid[2]);                    // htons(time_mid)                  Swap(ref uuid[4]' ref uuid[5]);                    // htons(time_hi_and_version)                  Swap(ref uuid[6]' ref uuid[7]);              }
Magic Number,CodeGen,UuidHelper,C:\repos\Microsoft_Win2D\tools\codegen\exe\UuidHelper.cs,SwapByteOrder,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  // htonl(time_low)                  Swap(ref uuid[0]' ref uuid[3]);                  Swap(ref uuid[1]' ref uuid[2]);                    // htons(time_mid)                  Swap(ref uuid[4]' ref uuid[5]);                    // htons(time_hi_and_version)                  Swap(ref uuid[6]' ref uuid[7]);              }
Magic Number,CodeGen,UuidHelper,C:\repos\Microsoft_Win2D\tools\codegen\exe\UuidHelper.cs,SwapByteOrder,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  // htonl(time_low)                  Swap(ref uuid[0]' ref uuid[3]);                  Swap(ref uuid[1]' ref uuid[2]);                    // htons(time_mid)                  Swap(ref uuid[4]' ref uuid[5]);                    // htons(time_hi_and_version)                  Swap(ref uuid[6]' ref uuid[7]);              }
Magic Number,CodeGen,UuidHelper,C:\repos\Microsoft_Win2D\tools\codegen\exe\UuidHelper.cs,SwapByteOrder,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  // htonl(time_low)                  Swap(ref uuid[0]' ref uuid[3]);                  Swap(ref uuid[1]' ref uuid[2]);                    // htons(time_mid)                  Swap(ref uuid[4]' ref uuid[5]);                    // htons(time_hi_and_version)                  Swap(ref uuid[6]' ref uuid[7]);              }
Magic Number,CodeGen,UuidHelper,C:\repos\Microsoft_Win2D\tools\codegen\exe\UuidHelper.cs,SwapByteOrder,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  // htonl(time_low)                  Swap(ref uuid[0]' ref uuid[3]);                  Swap(ref uuid[1]' ref uuid[2]);                    // htons(time_mid)                  Swap(ref uuid[4]' ref uuid[5]);                    // htons(time_hi_and_version)                  Swap(ref uuid[6]' ref uuid[7]);              }
Magic Number,CodeGen,OutputEffectType,C:\repos\Microsoft_Win2D\tools\codegen\exe\OutputEffectType.cs,OutputEffectCpp,The following statement contains a magic number: output.WriteLine(": CanvasEffect(EffectId()' "                               + (effect.Properties.Count(p => (!p.IsHandCoded && !p.IsHdrAlias)) - 4) + "' "                               + inputsCount + "' "                               + isInputSizeFixed.ToString().ToLower() + "' "                               + "device' effect' static_cast<" + effect.InterfaceName + "*>(this))");
Magic Number,CodeGen,OutputEffectType,C:\repos\Microsoft_Win2D\tools\codegen\exe\OutputEffectType.cs,ConvertVectorToColor,The following statement contains a magic number: var colorValues = from value in values                                select StringToFloat(value) * 255;
Magic Number,CodeGen,OutputEffectType,C:\repos\Microsoft_Win2D\tools\codegen\exe\OutputEffectType.cs,ConvertVectorToColor,The following statement contains a magic number: if (colorValues.Count() < 4)              {                  colorValues = colorValues.Concat(new float[] { 255 });              }
Magic Number,CodeGen,OutputEffectType,C:\repos\Microsoft_Win2D\tools\codegen\exe\OutputEffectType.cs,ConvertVectorToColor,The following statement contains a magic number: if (colorValues.Count() < 4)              {                  colorValues = colorValues.Concat(new float[] { 255 });              }
Magic Number,CodeGen,OutputEffectType,C:\repos\Microsoft_Win2D\tools\codegen\exe\OutputEffectType.cs,ConvertVectorToColor,The following statement contains a magic number: var rgb = colorValues.Take(3);
Magic Number,CodeGen,OutputEffectType,C:\repos\Microsoft_Win2D\tools\codegen\exe\OutputEffectType.cs,ConvertVectorToColor,The following statement contains a magic number: var a = colorValues.Skip(3);
Magic Number,CodeGen,OutputEffectType,C:\repos\Microsoft_Win2D\tools\codegen\exe\OutputEffectType.cs,ConvertVectorToRect,The following statement contains a magic number: rectValues[2] -= rectValues[0];
Magic Number,CodeGen,OutputEffectType,C:\repos\Microsoft_Win2D\tools\codegen\exe\OutputEffectType.cs,ConvertVectorToRect,The following statement contains a magic number: rectValues[3] -= rectValues[1];
Magic Number,XmlBindings,EnumValueComparer,C:\repos\Microsoft_Win2D\tools\codegen\exe\Enum.cs,ParseValueExpression,The following statement contains a magic number: if (valueExpression.StartsWith("0x"))                  {                      valueExpression = valueExpression.Remove(0' 2);                      numberStyle = NumberStyles.HexNumber;                  }
Magic Number,XmlBindings,EnumValueComparer,C:\repos\Microsoft_Win2D\tools\codegen\exe\Enum.cs,ParseValueExpression,The following statement contains a magic number: if (valueExpression.StartsWith("0x"))                  {                      valueExpression = valueExpression.Remove(0' 2);                      numberStyle = NumberStyles.HexNumber;                  }
