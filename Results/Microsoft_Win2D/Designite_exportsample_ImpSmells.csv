Implementation smell,Namespace,Class,File,Method,Description
Complex Method,exportsample,ProjectProcessor,C:\repos\Microsoft_Win2D\tools\exportsample\ProjectProcessor.cs,ProcessFileReference,Cyclomatic complexity of the method is 8
Long Parameter List,exportsample,ProjectProcessor,C:\repos\Microsoft_Win2D\tools\exportsample\ProjectProcessor.cs,Export,The method has 5 parameters. Parameters: projectFileName' isSingletonProject' config' sample' destination
Long Statement,exportsample,ProjectProcessor,C:\repos\Microsoft_Win2D\tools\exportsample\ProjectProcessor.cs,GetEnsureNuGetPackageBuildImportsTarget,The length of the statement  "            errorText.Value = "This project references NuGet package(s) that are missing on this computer. Enable NuGet Package Restore to download them.  For more information' see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}."; " is 242.
Long Statement,exportsample,ProjectProcessor,C:\repos\Microsoft_Win2D\tools\exportsample\ProjectProcessor.cs,FlattenConditions,The length of the statement  "            const string clauseRegex = propertyRegex + " " + operatorRegex + " " + valueRegex;  // matches: '$(property)' == 'value' " is 120.
Long Statement,exportsample,ProjectProcessor,C:\repos\Microsoft_Win2D\tools\exportsample\ProjectProcessor.cs,FlattenConditions,The length of the statement  "            const string conditionRegex = "^(?:" + clauseRegex + "(?: And |$))+";               // matches: one or more clauses' separated by And " is 133.
Magic Number,Shared,CommandLineParser,C:\repos\Microsoft_Win2D\tools\shared\CommandLineParser.cs,ParseArgument,The following statement contains a magic number: if (arg.StartsWith("@"))              {                  // Parse a response file.                  return ParseResponseFile(arg.Substring(1));              }              else if (arg.StartsWith("/"))              {                  // Parse an optional argument.                  char[] separators = { ':' };                    string[] split = arg.Substring(1).Split(separators' 2' StringSplitOptions.None);                    string name = split[0];                  string value = (split.Length > 1) ? split[1] : "true";                    FieldInfo field;                    if (!optionalOptions.TryGetValue(name.ToLowerInvariant()' out field))                  {                      ShowError("Unknown option '{0}'"' name);                      return false;                  }                    return SetOption(field' value);              }              else              {                  // Parse a required argument.                  if (requiredOptions.Count == 0)                  {                      ShowError("Too many arguments");                      return false;                  }                    FieldInfo field = requiredOptions.Peek();                    if (!IsList(field))                  {                      requiredOptions.Dequeue();                  }                    return SetOption(field' arg);              }
Magic Number,exportsample,Program,C:\repos\Microsoft_Win2D\tools\exportsample\Program.cs,FindEnlistmentRoot,The following statement contains a magic number: do              {                  if (File.Exists(Path.Combine(dir' "Win2D.proj")))                  {                      root = dir;                      return true;                  }                    dir = Path.GetDirectoryName(dir);              } while (dir.Length > 3);
Magic Number,exportsample,ProjectProcessor,C:\repos\Microsoft_Win2D\tools\exportsample\ProjectProcessor.cs,FlattenConditions,The following statement contains a magic number: foreach (var element in elementsWithConditions.ToList())              {                  var match = regex.Match(element.Attribute("Condition").Value);                    if (match.Success)                  {                      var clauses = from i in Enumerable.Range(0' match.Groups[1].Captures.Count)                                    select new                                    {                                        Property = match.Groups[1].Captures[i].Value'                                        Operator = match.Groups[2].Captures[i].Value'                                        Value    = match.Groups[3].Captures[i].Value'                                    };                        // Only flatten expressions whose properties are specified in the config.                      if (!clauses.All(clause => config.PropertiesToFlatten.Contains(clause.Property)))                          continue;                        // Evaluate the expression.                      bool result = clauses.All(clause => EvaluateConditionClause(clause.Property' clause.Operator' clause.Value));                        if (result)                      {                          // If the expression is true' remove the Condition attribute' so the element is now unconditionally included.                          element.SetAttributeValue("Condition"' null);                      }                      else                      {                          // Otherwise remove the element itself.                          element.Remove();                      }                  }              }
Magic Number,exportsample,ProjectProcessor,C:\repos\Microsoft_Win2D\tools\exportsample\ProjectProcessor.cs,FlattenConditions,The following statement contains a magic number: foreach (var element in elementsWithConditions.ToList())              {                  var match = regex.Match(element.Attribute("Condition").Value);                    if (match.Success)                  {                      var clauses = from i in Enumerable.Range(0' match.Groups[1].Captures.Count)                                    select new                                    {                                        Property = match.Groups[1].Captures[i].Value'                                        Operator = match.Groups[2].Captures[i].Value'                                        Value    = match.Groups[3].Captures[i].Value'                                    };                        // Only flatten expressions whose properties are specified in the config.                      if (!clauses.All(clause => config.PropertiesToFlatten.Contains(clause.Property)))                          continue;                        // Evaluate the expression.                      bool result = clauses.All(clause => EvaluateConditionClause(clause.Property' clause.Operator' clause.Value));                        if (result)                      {                          // If the expression is true' remove the Condition attribute' so the element is now unconditionally included.                          element.SetAttributeValue("Condition"' null);                      }                      else                      {                          // Otherwise remove the element itself.                          element.Remove();                      }                  }              }
Missing Default,exportsample,Configuration,C:\repos\Microsoft_Win2D\tools\exportsample\ConfigFile.cs,Configuration,The following switch statement is missing a default case: switch (element.Name.ToString())                  {                      case "Property":                          Properties.Add(                              element.Attribute("Name").Value'                              Path.GetFullPath(Path.Combine(options.Root' element.Attribute("Value").Value)));                          break;                        case "Sample":                          Samples.Add(new SampleDirectory(element' options.Root' options.Dest));                          break;                        case "InlineImport":                          InlineImports.Add(new InlineImport(element));                          break;                        case "DuplicateIntoSample":                          DuplicateFiles.Add(                              Path.GetFullPath(Path.Combine(options.Root' element.Attribute("Source").Value))'                              element.Attribute("Destination").Value);                          break;                        case "MSBuildPropertyIsFileReference":                          FileReferenceProperties.Add(element.Attribute("Name").Value);                          break;                        case "Win2DProject":                          Win2DProjects.Add(element.Attribute("Name").Value);                          break;                        case "File":                          FilesToCopy.Add(element.Attribute("Source").Value);                          break;                        case "FlattenCondition":                          PropertiesToFlatten.Add(element.Attribute("Property").Value);                          break;                  }
Missing Default,exportsample,ProjectProcessor,C:\repos\Microsoft_Win2D\tools\exportsample\ProjectProcessor.cs,GetTargetPlatformIdentifier,The following switch statement is missing a default case: switch (targetPlatformIdentifier.Value)              {                  case "Windows":                      return TargetPlatformIdentifier.Windows;                    case "WindowsPhoneApp":                      return TargetPlatformIdentifier.WindowsPhone;                    case "UAP":                      return TargetPlatformIdentifier.UAP;              }
