Implementation smell,Namespace,Class,File,Method,Description
Magic Number,CoreWindowExample,ConvexHull,C:\repos\Microsoft_Win2D\samples\CoreWindowExample\Shared\ConvexHull.cs,CalculateAngle,The following statement contains a magic number: if (angle < 0)                  angle += (Math.PI * 2);
Magic Number,CoreWindowExample,Renderer,C:\repos\Microsoft_Win2D\samples\CoreWindowExample\Shared\Renderer.cs,Renderer,The following statement contains a magic number: var effect = new GaussianBlurEffect()              {                  BlurAmount = 5'                  Source = inputEffect              };
Magic Number,CoreWindowExample,Renderer,C:\repos\Microsoft_Win2D\samples\CoreWindowExample\Shared\Renderer.cs,SwapAccumulationBuffers,The following statement contains a magic number: currentBuffer = (currentBuffer + 1) % 2;
Magic Number,CoreWindowExample,Renderer,C:\repos\Microsoft_Win2D\samples\CoreWindowExample\Shared\Renderer.cs,MakeGeometryForContactPoints,The following statement contains a magic number: if (currentPointsInContact.Count == 0)              {                  return null;              }              else if (currentPointsInContact.Count <= 2)              {                  return MakeCircleGeometry();              }              else              {                  return MakeConvexGeometry();              }
Magic Number,CoreWindowExample,Renderer,C:\repos\Microsoft_Win2D\samples\CoreWindowExample\Shared\Renderer.cs,MakeCircleGeometry,The following statement contains a magic number: var radius = Math.Max(bounds.Width' bounds.Height) * 0.5;
Magic Number,CoreWindowExample,Renderer,C:\repos\Microsoft_Win2D\samples\CoreWindowExample\Shared\Renderer.cs,MakeCircleGeometry,The following statement contains a magic number: if (radius == 0)                  radius = 50;
Magic Number,CoreWindowExample,Renderer,C:\repos\Microsoft_Win2D\samples\CoreWindowExample\Shared\Renderer.cs,MakeCircleGeometry,The following statement contains a magic number: var center = new Vector2((float)(bounds.Left + bounds.Width * 0.5)' (float)(bounds.Top + bounds.Height * 0.5));
Magic Number,CoreWindowExample,Renderer,C:\repos\Microsoft_Win2D\samples\CoreWindowExample\Shared\Renderer.cs,MakeCircleGeometry,The following statement contains a magic number: var center = new Vector2((float)(bounds.Left + bounds.Width * 0.5)' (float)(bounds.Top + bounds.Height * 0.5));
Magic Number,CoreWindowExample,Renderer,C:\repos\Microsoft_Win2D\samples\CoreWindowExample\Shared\Renderer.cs,MakeConvexGeometry,The following statement contains a magic number: using (var builder = new CanvasPathBuilder(device))              {                  builder.BeginFigure(hull[0]);                    for (int i = 1; i <= hull.Count; ++i)                  {                      //                      // i-2 --- i-1 ---  i  --- i+1                      //  a  ---  b  ---  c  ---  d                      //                        // The bezier is between i-1 and i.  We need to figure out the control points                      // that make this smooth.                        var a = hull[(i + hull.Count - 2) % hull.Count];                      var b = hull[(i + hull.Count - 1) % hull.Count];                      var c = hull[i % hull.Count];                      var d = hull[(i + 1) % hull.Count];                        var ab = Vector2.Normalize(b - a);                      var bc = Vector2.Normalize(c - b);                      var cp1 = b + Vector2.Normalize(ab + bc) * (c - b).Length() * 0.5f;                        var cd = Vector2.Normalize(d - c);                      var cp2 = c - Vector2.Normalize(bc + cd) * (c - b).Length() * 0.5f;                        builder.AddCubicBezier(cp1' cp2' c);                  }                    builder.EndFigure(CanvasFigureLoop.Closed);                    return CanvasGeometry.CreatePath(builder);              }
Magic Number,CoreWindowExample,Renderer,C:\repos\Microsoft_Win2D\samples\CoreWindowExample\Shared\Renderer.cs,AccumulateBackBufferOntoFrontBuffer,The following statement contains a magic number: transform *= Matrix3x2.CreateScale(1.01f' 1.01f' FrontBuffer.Size.ToVector2() / 2);
Magic Number,CoreWindowExample,Renderer,C:\repos\Microsoft_Win2D\samples\CoreWindowExample\Shared\Renderer.cs,DrawContactGeometry,The following statement contains a magic number: ds.DrawGeometry(geom' Colors.Blue' 5);
Magic Number,CoreWindowExample,Renderer,C:\repos\Microsoft_Win2D\samples\CoreWindowExample\Shared\Renderer.cs,DrawFaceInCenterOfGeometry,The following statement contains a magic number: var centerX = bounds.X + bounds.Width / 2;
Magic Number,CoreWindowExample,Renderer,C:\repos\Microsoft_Win2D\samples\CoreWindowExample\Shared\Renderer.cs,DrawFaceInCenterOfGeometry,The following statement contains a magic number: var centerY = bounds.Y + bounds.Height / 2;
Magic Number,CoreWindowExample,Renderer,C:\repos\Microsoft_Win2D\samples\CoreWindowExample\Shared\Renderer.cs,DrawFaceInCenterOfGeometry,The following statement contains a magic number: ds.DrawText("ಠ⌣ಠ"' center' Colors.White'                  new CanvasTextFormat()                  {                      FontSize = 36'                      HorizontalAlignment = CanvasHorizontalAlignment.Center'                      VerticalAlignment = CanvasVerticalAlignment.Center                  });
Magic Number,CoreWindowExample,Renderer,C:\repos\Microsoft_Win2D\samples\CoreWindowExample\Shared\Renderer.cs,DrawContactPoints,The following statement contains a magic number: foreach (var entry in currentPointsInContact)              {                  ds.DrawCircle(entry.Value.ToVector2()' 20' Colors.Red);              }
Magic Number,CoreWindowExample,Renderer,C:\repos\Microsoft_Win2D\samples\CoreWindowExample\Shared\Renderer.cs,DrawInfo,The following statement contains a magic number: ds.DrawText(message' size.ToVector2()' Colors.White'                  new CanvasTextFormat()                  {                      FontSize = 12'                      HorizontalAlignment = CanvasHorizontalAlignment.Right'                      VerticalAlignment = CanvasVerticalAlignment.Bottom                  });
Magic Number,CoreWindowExample,Renderer,C:\repos\Microsoft_Win2D\samples\CoreWindowExample\Shared\Renderer.cs,DrawInfo,The following statement contains a magic number: if (currentPointsInContact.Count == 0)              {                  ticksSinceLastTouch++;                  if (ticksSinceLastTouch > 100)                  {                      ds.DrawText("Touch the screen!"' size.ToVector2() * 0.5f' Colors.White'                          new CanvasTextFormat()                          {                              FontSize = 24'                              HorizontalAlignment = CanvasHorizontalAlignment.Center'                              VerticalAlignment = CanvasVerticalAlignment.Center                          });                  }              }              else              {                  ticksSinceLastTouch = 0;              }
Magic Number,CoreWindowExample,Renderer,C:\repos\Microsoft_Win2D\samples\CoreWindowExample\Shared\Renderer.cs,DrawInfo,The following statement contains a magic number: if (currentPointsInContact.Count == 0)              {                  ticksSinceLastTouch++;                  if (ticksSinceLastTouch > 100)                  {                      ds.DrawText("Touch the screen!"' size.ToVector2() * 0.5f' Colors.White'                          new CanvasTextFormat()                          {                              FontSize = 24'                              HorizontalAlignment = CanvasHorizontalAlignment.Center'                              VerticalAlignment = CanvasVerticalAlignment.Center                          });                  }              }              else              {                  ticksSinceLastTouch = 0;              }
Magic Number,CoreWindowExample,Renderer,C:\repos\Microsoft_Win2D\samples\CoreWindowExample\Shared\Renderer.cs,DrawTitle,The following statement contains a magic number: ds.DrawText("Win2D CoreWindow Example"' new Rect(new Point(0' 0)' size)' Colors.White'                  new CanvasTextFormat()                  {                      FontSize = 28                  });
Missing Default,CoreWindowExample,SwapChainManager,C:\repos\Microsoft_Win2D\samples\CoreWindowExample\Shared\SwapChainManager.cs,EnsureMatchesWindow,The following switch statement is missing a default case: switch (orientation)              {                  case DisplayOrientations.Portrait:                      rotation = CanvasSwapChainRotation.None;                      break;                    case DisplayOrientations.Landscape:                      rotation = CanvasSwapChainRotation.Rotate270;                      break;                    case DisplayOrientations.LandscapeFlipped:                      rotation = CanvasSwapChainRotation.Rotate90;                      break;                    case DisplayOrientations.PortraitFlipped:                      rotation = CanvasSwapChainRotation.Rotate180;                      break;              }
