Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,CompositionExample,SwapChainRenderer,C:\repos\Microsoft_Win2D\samples\CompositionExample\SwapChainRenderer.cs,,The length of the parameter drawLoopCancellationTokenSource is 31.
Long Statement,CompositionExample,SwapChainRenderer,C:\repos\Microsoft_Win2D\samples\CompositionExample\SwapChainRenderer.cs,SetDevice,The length of the statement  "            swapChainVisual.Brush = compositor.CreateSurfaceBrush(CanvasComposition.CreateCompositionSurfaceForSwapChain(compositor' swapChain)); " is 133.
Long Statement,CompositionExample,SwapChainRenderer,C:\repos\Microsoft_Win2D\samples\CompositionExample\SwapChainRenderer.cs,DrawSwapChain,The length of the statement  "                var label = string.Format("Draws: {0}\nDevices: {1}\nTap to {2}"' drawCount' deviceCount' isPaused ? "unpause" : "pause"); " is 122.
Magic Number,CompositionExample,App,C:\repos\Microsoft_Win2D\samples\CompositionExample\App.cs,SetWindow,The following statement contains a magic number: if (!Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract"' 2))              {                  var dialog = new MessageDialog("This version of Windows does not support the Composition APIs.");                  await dialog.ShowAsync();                  CoreApplication.Exit();                  return;              }
Magic Number,CompositionExample,App,C:\repos\Microsoft_Win2D\samples\CompositionExample\App.cs,UpdateVisualsLoop,The following statement contains a magic number: while (!token.IsCancellationRequested)              {                  UpdateVisual(swapChainRenderer.Visual' swapChainRenderer.Size);                  UpdateVisual(drawingSurfaceRenderer.Visual' drawingSurfaceRenderer.Size);                    await Task.Delay(TimeSpan.FromSeconds(2));              }
Magic Number,CompositionExample,DrawingSurfaceRenderer,C:\repos\Microsoft_Win2D\samples\CompositionExample\DrawingSurfaceRenderer.cs,DrawingSurfaceRenderer,The following statement contains a magic number: drawingSurface = compositionGraphicsDevice.CreateDrawingSurface(new Size(256' 256)' DirectXPixelFormat.B8G8R8A8UIntNormalized' DirectXAlphaMode.Premultiplied);
Magic Number,CompositionExample,DrawingSurfaceRenderer,C:\repos\Microsoft_Win2D\samples\CompositionExample\DrawingSurfaceRenderer.cs,DrawingSurfaceRenderer,The following statement contains a magic number: drawingSurface = compositionGraphicsDevice.CreateDrawingSurface(new Size(256' 256)' DirectXPixelFormat.B8G8R8A8UIntNormalized' DirectXAlphaMode.Premultiplied);
Magic Number,CompositionExample,DrawingSurfaceRenderer,C:\repos\Microsoft_Win2D\samples\CompositionExample\DrawingSurfaceRenderer.cs,DrawDrawingSurface,The following statement contains a magic number: using (var ds = CanvasComposition.CreateDrawingSession(drawingSurface))              {                  ds.Clear(Colors.Transparent);                    var rect = new Rect(new Point(2' 2)' (drawingSurface.Size.ToVector2() - new Vector2(4' 4)).ToSize());                    ds.FillRoundedRectangle(rect' 15' 15' Colors.LightBlue);                  ds.DrawRoundedRectangle(rect' 15' 15' Colors.Gray' 2);                    ds.DrawText("This is a composition drawing surface"' rect' Colors.Black' new CanvasTextFormat()                  {                      FontFamily = "Comic Sans MS"'                      FontSize = 32'                      WordWrapping = CanvasWordWrapping.WholeWord'                      VerticalAlignment = CanvasVerticalAlignment.Center'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });                    ds.DrawText("Draws: " + drawCount' rect' Colors.Black' new CanvasTextFormat()                  {                      FontSize = 10'                      VerticalAlignment = CanvasVerticalAlignment.Bottom'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });              }
Magic Number,CompositionExample,DrawingSurfaceRenderer,C:\repos\Microsoft_Win2D\samples\CompositionExample\DrawingSurfaceRenderer.cs,DrawDrawingSurface,The following statement contains a magic number: using (var ds = CanvasComposition.CreateDrawingSession(drawingSurface))              {                  ds.Clear(Colors.Transparent);                    var rect = new Rect(new Point(2' 2)' (drawingSurface.Size.ToVector2() - new Vector2(4' 4)).ToSize());                    ds.FillRoundedRectangle(rect' 15' 15' Colors.LightBlue);                  ds.DrawRoundedRectangle(rect' 15' 15' Colors.Gray' 2);                    ds.DrawText("This is a composition drawing surface"' rect' Colors.Black' new CanvasTextFormat()                  {                      FontFamily = "Comic Sans MS"'                      FontSize = 32'                      WordWrapping = CanvasWordWrapping.WholeWord'                      VerticalAlignment = CanvasVerticalAlignment.Center'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });                    ds.DrawText("Draws: " + drawCount' rect' Colors.Black' new CanvasTextFormat()                  {                      FontSize = 10'                      VerticalAlignment = CanvasVerticalAlignment.Bottom'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });              }
Magic Number,CompositionExample,DrawingSurfaceRenderer,C:\repos\Microsoft_Win2D\samples\CompositionExample\DrawingSurfaceRenderer.cs,DrawDrawingSurface,The following statement contains a magic number: using (var ds = CanvasComposition.CreateDrawingSession(drawingSurface))              {                  ds.Clear(Colors.Transparent);                    var rect = new Rect(new Point(2' 2)' (drawingSurface.Size.ToVector2() - new Vector2(4' 4)).ToSize());                    ds.FillRoundedRectangle(rect' 15' 15' Colors.LightBlue);                  ds.DrawRoundedRectangle(rect' 15' 15' Colors.Gray' 2);                    ds.DrawText("This is a composition drawing surface"' rect' Colors.Black' new CanvasTextFormat()                  {                      FontFamily = "Comic Sans MS"'                      FontSize = 32'                      WordWrapping = CanvasWordWrapping.WholeWord'                      VerticalAlignment = CanvasVerticalAlignment.Center'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });                    ds.DrawText("Draws: " + drawCount' rect' Colors.Black' new CanvasTextFormat()                  {                      FontSize = 10'                      VerticalAlignment = CanvasVerticalAlignment.Bottom'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });              }
Magic Number,CompositionExample,DrawingSurfaceRenderer,C:\repos\Microsoft_Win2D\samples\CompositionExample\DrawingSurfaceRenderer.cs,DrawDrawingSurface,The following statement contains a magic number: using (var ds = CanvasComposition.CreateDrawingSession(drawingSurface))              {                  ds.Clear(Colors.Transparent);                    var rect = new Rect(new Point(2' 2)' (drawingSurface.Size.ToVector2() - new Vector2(4' 4)).ToSize());                    ds.FillRoundedRectangle(rect' 15' 15' Colors.LightBlue);                  ds.DrawRoundedRectangle(rect' 15' 15' Colors.Gray' 2);                    ds.DrawText("This is a composition drawing surface"' rect' Colors.Black' new CanvasTextFormat()                  {                      FontFamily = "Comic Sans MS"'                      FontSize = 32'                      WordWrapping = CanvasWordWrapping.WholeWord'                      VerticalAlignment = CanvasVerticalAlignment.Center'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });                    ds.DrawText("Draws: " + drawCount' rect' Colors.Black' new CanvasTextFormat()                  {                      FontSize = 10'                      VerticalAlignment = CanvasVerticalAlignment.Bottom'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });              }
Magic Number,CompositionExample,DrawingSurfaceRenderer,C:\repos\Microsoft_Win2D\samples\CompositionExample\DrawingSurfaceRenderer.cs,DrawDrawingSurface,The following statement contains a magic number: using (var ds = CanvasComposition.CreateDrawingSession(drawingSurface))              {                  ds.Clear(Colors.Transparent);                    var rect = new Rect(new Point(2' 2)' (drawingSurface.Size.ToVector2() - new Vector2(4' 4)).ToSize());                    ds.FillRoundedRectangle(rect' 15' 15' Colors.LightBlue);                  ds.DrawRoundedRectangle(rect' 15' 15' Colors.Gray' 2);                    ds.DrawText("This is a composition drawing surface"' rect' Colors.Black' new CanvasTextFormat()                  {                      FontFamily = "Comic Sans MS"'                      FontSize = 32'                      WordWrapping = CanvasWordWrapping.WholeWord'                      VerticalAlignment = CanvasVerticalAlignment.Center'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });                    ds.DrawText("Draws: " + drawCount' rect' Colors.Black' new CanvasTextFormat()                  {                      FontSize = 10'                      VerticalAlignment = CanvasVerticalAlignment.Bottom'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });              }
Magic Number,CompositionExample,DrawingSurfaceRenderer,C:\repos\Microsoft_Win2D\samples\CompositionExample\DrawingSurfaceRenderer.cs,DrawDrawingSurface,The following statement contains a magic number: using (var ds = CanvasComposition.CreateDrawingSession(drawingSurface))              {                  ds.Clear(Colors.Transparent);                    var rect = new Rect(new Point(2' 2)' (drawingSurface.Size.ToVector2() - new Vector2(4' 4)).ToSize());                    ds.FillRoundedRectangle(rect' 15' 15' Colors.LightBlue);                  ds.DrawRoundedRectangle(rect' 15' 15' Colors.Gray' 2);                    ds.DrawText("This is a composition drawing surface"' rect' Colors.Black' new CanvasTextFormat()                  {                      FontFamily = "Comic Sans MS"'                      FontSize = 32'                      WordWrapping = CanvasWordWrapping.WholeWord'                      VerticalAlignment = CanvasVerticalAlignment.Center'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });                    ds.DrawText("Draws: " + drawCount' rect' Colors.Black' new CanvasTextFormat()                  {                      FontSize = 10'                      VerticalAlignment = CanvasVerticalAlignment.Bottom'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });              }
Magic Number,CompositionExample,DrawingSurfaceRenderer,C:\repos\Microsoft_Win2D\samples\CompositionExample\DrawingSurfaceRenderer.cs,DrawDrawingSurface,The following statement contains a magic number: using (var ds = CanvasComposition.CreateDrawingSession(drawingSurface))              {                  ds.Clear(Colors.Transparent);                    var rect = new Rect(new Point(2' 2)' (drawingSurface.Size.ToVector2() - new Vector2(4' 4)).ToSize());                    ds.FillRoundedRectangle(rect' 15' 15' Colors.LightBlue);                  ds.DrawRoundedRectangle(rect' 15' 15' Colors.Gray' 2);                    ds.DrawText("This is a composition drawing surface"' rect' Colors.Black' new CanvasTextFormat()                  {                      FontFamily = "Comic Sans MS"'                      FontSize = 32'                      WordWrapping = CanvasWordWrapping.WholeWord'                      VerticalAlignment = CanvasVerticalAlignment.Center'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });                    ds.DrawText("Draws: " + drawCount' rect' Colors.Black' new CanvasTextFormat()                  {                      FontSize = 10'                      VerticalAlignment = CanvasVerticalAlignment.Bottom'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });              }
Magic Number,CompositionExample,DrawingSurfaceRenderer,C:\repos\Microsoft_Win2D\samples\CompositionExample\DrawingSurfaceRenderer.cs,DrawDrawingSurface,The following statement contains a magic number: using (var ds = CanvasComposition.CreateDrawingSession(drawingSurface))              {                  ds.Clear(Colors.Transparent);                    var rect = new Rect(new Point(2' 2)' (drawingSurface.Size.ToVector2() - new Vector2(4' 4)).ToSize());                    ds.FillRoundedRectangle(rect' 15' 15' Colors.LightBlue);                  ds.DrawRoundedRectangle(rect' 15' 15' Colors.Gray' 2);                    ds.DrawText("This is a composition drawing surface"' rect' Colors.Black' new CanvasTextFormat()                  {                      FontFamily = "Comic Sans MS"'                      FontSize = 32'                      WordWrapping = CanvasWordWrapping.WholeWord'                      VerticalAlignment = CanvasVerticalAlignment.Center'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });                    ds.DrawText("Draws: " + drawCount' rect' Colors.Black' new CanvasTextFormat()                  {                      FontSize = 10'                      VerticalAlignment = CanvasVerticalAlignment.Bottom'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });              }
Magic Number,CompositionExample,DrawingSurfaceRenderer,C:\repos\Microsoft_Win2D\samples\CompositionExample\DrawingSurfaceRenderer.cs,DrawDrawingSurface,The following statement contains a magic number: using (var ds = CanvasComposition.CreateDrawingSession(drawingSurface))              {                  ds.Clear(Colors.Transparent);                    var rect = new Rect(new Point(2' 2)' (drawingSurface.Size.ToVector2() - new Vector2(4' 4)).ToSize());                    ds.FillRoundedRectangle(rect' 15' 15' Colors.LightBlue);                  ds.DrawRoundedRectangle(rect' 15' 15' Colors.Gray' 2);                    ds.DrawText("This is a composition drawing surface"' rect' Colors.Black' new CanvasTextFormat()                  {                      FontFamily = "Comic Sans MS"'                      FontSize = 32'                      WordWrapping = CanvasWordWrapping.WholeWord'                      VerticalAlignment = CanvasVerticalAlignment.Center'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });                    ds.DrawText("Draws: " + drawCount' rect' Colors.Black' new CanvasTextFormat()                  {                      FontSize = 10'                      VerticalAlignment = CanvasVerticalAlignment.Bottom'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });              }
Magic Number,CompositionExample,DrawingSurfaceRenderer,C:\repos\Microsoft_Win2D\samples\CompositionExample\DrawingSurfaceRenderer.cs,DrawDrawingSurface,The following statement contains a magic number: using (var ds = CanvasComposition.CreateDrawingSession(drawingSurface))              {                  ds.Clear(Colors.Transparent);                    var rect = new Rect(new Point(2' 2)' (drawingSurface.Size.ToVector2() - new Vector2(4' 4)).ToSize());                    ds.FillRoundedRectangle(rect' 15' 15' Colors.LightBlue);                  ds.DrawRoundedRectangle(rect' 15' 15' Colors.Gray' 2);                    ds.DrawText("This is a composition drawing surface"' rect' Colors.Black' new CanvasTextFormat()                  {                      FontFamily = "Comic Sans MS"'                      FontSize = 32'                      WordWrapping = CanvasWordWrapping.WholeWord'                      VerticalAlignment = CanvasVerticalAlignment.Center'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });                    ds.DrawText("Draws: " + drawCount' rect' Colors.Black' new CanvasTextFormat()                  {                      FontSize = 10'                      VerticalAlignment = CanvasVerticalAlignment.Bottom'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });              }
Magic Number,CompositionExample,DrawingSurfaceRenderer,C:\repos\Microsoft_Win2D\samples\CompositionExample\DrawingSurfaceRenderer.cs,DrawDrawingSurface,The following statement contains a magic number: using (var ds = CanvasComposition.CreateDrawingSession(drawingSurface))              {                  ds.Clear(Colors.Transparent);                    var rect = new Rect(new Point(2' 2)' (drawingSurface.Size.ToVector2() - new Vector2(4' 4)).ToSize());                    ds.FillRoundedRectangle(rect' 15' 15' Colors.LightBlue);                  ds.DrawRoundedRectangle(rect' 15' 15' Colors.Gray' 2);                    ds.DrawText("This is a composition drawing surface"' rect' Colors.Black' new CanvasTextFormat()                  {                      FontFamily = "Comic Sans MS"'                      FontSize = 32'                      WordWrapping = CanvasWordWrapping.WholeWord'                      VerticalAlignment = CanvasVerticalAlignment.Center'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });                    ds.DrawText("Draws: " + drawCount' rect' Colors.Black' new CanvasTextFormat()                  {                      FontSize = 10'                      VerticalAlignment = CanvasVerticalAlignment.Bottom'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });              }
Magic Number,CompositionExample,SwapChainRenderer,C:\repos\Microsoft_Win2D\samples\CompositionExample\SwapChainRenderer.cs,SetDevice,The following statement contains a magic number: swapChain = new CanvasSwapChain(device' 256' 256' 96);
Magic Number,CompositionExample,SwapChainRenderer,C:\repos\Microsoft_Win2D\samples\CompositionExample\SwapChainRenderer.cs,SetDevice,The following statement contains a magic number: swapChain = new CanvasSwapChain(device' 256' 256' 96);
Magic Number,CompositionExample,SwapChainRenderer,C:\repos\Microsoft_Win2D\samples\CompositionExample\SwapChainRenderer.cs,SetDevice,The following statement contains a magic number: swapChain = new CanvasSwapChain(device' 256' 256' 96);
Magic Number,CompositionExample,SwapChainRenderer,C:\repos\Microsoft_Win2D\samples\CompositionExample\SwapChainRenderer.cs,DrawSwapChain,The following statement contains a magic number: using (var ds = swapChain.CreateDrawingSession(Colors.Transparent))              {                  var size = swapChain.Size.ToVector2();                  var radius = (Math.Min(size.X' size.Y) / 2.0f) - 4.0f;                    var center = size / 2;                    ds.FillCircle(center' radius' Colors.LightGoldenrodYellow);                  ds.DrawCircle(center' radius' Colors.LightGray);                    double mu = (-drawCount / 50.0f);                    for (int i =0; i < 16; ++i)                  {                      double a = mu + (i / 16.0) * Math.PI * 2;                      var x = (float)Math.Sin(a);                      var y = (float)Math.Cos(a);                      ds.DrawLine(center' center + new Vector2(x' y) * radius' Colors.Black' 5);                  }                    var rectLength = Math.Sqrt(radius * radius * 2);                    ds.FillCircle(center' (float)rectLength / 2' Colors.LightGoldenrodYellow);                    var rect = new Rect(center.X - rectLength / 2' center.Y - rectLength / 2' rectLength' rectLength);                    ds.DrawText("This is a swap chain"'                      rect'                      Colors.Black'                      new CanvasTextFormat()                      {                          FontFamily = "Comic Sans MS"'                          FontSize = 24'                          VerticalAlignment = CanvasVerticalAlignment.Center'                          HorizontalAlignment = CanvasHorizontalAlignment.Center'                          WordWrapping = CanvasWordWrapping.WholeWord'                      });                    var label = string.Format("Draws: {0}\nDevices: {1}\nTap to {2}"' drawCount' deviceCount' isPaused ? "unpause" : "pause");                    ds.DrawText(label' rect' Colors.Black' new CanvasTextFormat()                  {                      FontSize = 10'                      VerticalAlignment = CanvasVerticalAlignment.Bottom'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });              }
Magic Number,CompositionExample,SwapChainRenderer,C:\repos\Microsoft_Win2D\samples\CompositionExample\SwapChainRenderer.cs,DrawSwapChain,The following statement contains a magic number: using (var ds = swapChain.CreateDrawingSession(Colors.Transparent))              {                  var size = swapChain.Size.ToVector2();                  var radius = (Math.Min(size.X' size.Y) / 2.0f) - 4.0f;                    var center = size / 2;                    ds.FillCircle(center' radius' Colors.LightGoldenrodYellow);                  ds.DrawCircle(center' radius' Colors.LightGray);                    double mu = (-drawCount / 50.0f);                    for (int i =0; i < 16; ++i)                  {                      double a = mu + (i / 16.0) * Math.PI * 2;                      var x = (float)Math.Sin(a);                      var y = (float)Math.Cos(a);                      ds.DrawLine(center' center + new Vector2(x' y) * radius' Colors.Black' 5);                  }                    var rectLength = Math.Sqrt(radius * radius * 2);                    ds.FillCircle(center' (float)rectLength / 2' Colors.LightGoldenrodYellow);                    var rect = new Rect(center.X - rectLength / 2' center.Y - rectLength / 2' rectLength' rectLength);                    ds.DrawText("This is a swap chain"'                      rect'                      Colors.Black'                      new CanvasTextFormat()                      {                          FontFamily = "Comic Sans MS"'                          FontSize = 24'                          VerticalAlignment = CanvasVerticalAlignment.Center'                          HorizontalAlignment = CanvasHorizontalAlignment.Center'                          WordWrapping = CanvasWordWrapping.WholeWord'                      });                    var label = string.Format("Draws: {0}\nDevices: {1}\nTap to {2}"' drawCount' deviceCount' isPaused ? "unpause" : "pause");                    ds.DrawText(label' rect' Colors.Black' new CanvasTextFormat()                  {                      FontSize = 10'                      VerticalAlignment = CanvasVerticalAlignment.Bottom'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });              }
Magic Number,CompositionExample,SwapChainRenderer,C:\repos\Microsoft_Win2D\samples\CompositionExample\SwapChainRenderer.cs,DrawSwapChain,The following statement contains a magic number: using (var ds = swapChain.CreateDrawingSession(Colors.Transparent))              {                  var size = swapChain.Size.ToVector2();                  var radius = (Math.Min(size.X' size.Y) / 2.0f) - 4.0f;                    var center = size / 2;                    ds.FillCircle(center' radius' Colors.LightGoldenrodYellow);                  ds.DrawCircle(center' radius' Colors.LightGray);                    double mu = (-drawCount / 50.0f);                    for (int i =0; i < 16; ++i)                  {                      double a = mu + (i / 16.0) * Math.PI * 2;                      var x = (float)Math.Sin(a);                      var y = (float)Math.Cos(a);                      ds.DrawLine(center' center + new Vector2(x' y) * radius' Colors.Black' 5);                  }                    var rectLength = Math.Sqrt(radius * radius * 2);                    ds.FillCircle(center' (float)rectLength / 2' Colors.LightGoldenrodYellow);                    var rect = new Rect(center.X - rectLength / 2' center.Y - rectLength / 2' rectLength' rectLength);                    ds.DrawText("This is a swap chain"'                      rect'                      Colors.Black'                      new CanvasTextFormat()                      {                          FontFamily = "Comic Sans MS"'                          FontSize = 24'                          VerticalAlignment = CanvasVerticalAlignment.Center'                          HorizontalAlignment = CanvasHorizontalAlignment.Center'                          WordWrapping = CanvasWordWrapping.WholeWord'                      });                    var label = string.Format("Draws: {0}\nDevices: {1}\nTap to {2}"' drawCount' deviceCount' isPaused ? "unpause" : "pause");                    ds.DrawText(label' rect' Colors.Black' new CanvasTextFormat()                  {                      FontSize = 10'                      VerticalAlignment = CanvasVerticalAlignment.Bottom'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });              }
Magic Number,CompositionExample,SwapChainRenderer,C:\repos\Microsoft_Win2D\samples\CompositionExample\SwapChainRenderer.cs,DrawSwapChain,The following statement contains a magic number: using (var ds = swapChain.CreateDrawingSession(Colors.Transparent))              {                  var size = swapChain.Size.ToVector2();                  var radius = (Math.Min(size.X' size.Y) / 2.0f) - 4.0f;                    var center = size / 2;                    ds.FillCircle(center' radius' Colors.LightGoldenrodYellow);                  ds.DrawCircle(center' radius' Colors.LightGray);                    double mu = (-drawCount / 50.0f);                    for (int i =0; i < 16; ++i)                  {                      double a = mu + (i / 16.0) * Math.PI * 2;                      var x = (float)Math.Sin(a);                      var y = (float)Math.Cos(a);                      ds.DrawLine(center' center + new Vector2(x' y) * radius' Colors.Black' 5);                  }                    var rectLength = Math.Sqrt(radius * radius * 2);                    ds.FillCircle(center' (float)rectLength / 2' Colors.LightGoldenrodYellow);                    var rect = new Rect(center.X - rectLength / 2' center.Y - rectLength / 2' rectLength' rectLength);                    ds.DrawText("This is a swap chain"'                      rect'                      Colors.Black'                      new CanvasTextFormat()                      {                          FontFamily = "Comic Sans MS"'                          FontSize = 24'                          VerticalAlignment = CanvasVerticalAlignment.Center'                          HorizontalAlignment = CanvasHorizontalAlignment.Center'                          WordWrapping = CanvasWordWrapping.WholeWord'                      });                    var label = string.Format("Draws: {0}\nDevices: {1}\nTap to {2}"' drawCount' deviceCount' isPaused ? "unpause" : "pause");                    ds.DrawText(label' rect' Colors.Black' new CanvasTextFormat()                  {                      FontSize = 10'                      VerticalAlignment = CanvasVerticalAlignment.Bottom'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });              }
Magic Number,CompositionExample,SwapChainRenderer,C:\repos\Microsoft_Win2D\samples\CompositionExample\SwapChainRenderer.cs,DrawSwapChain,The following statement contains a magic number: using (var ds = swapChain.CreateDrawingSession(Colors.Transparent))              {                  var size = swapChain.Size.ToVector2();                  var radius = (Math.Min(size.X' size.Y) / 2.0f) - 4.0f;                    var center = size / 2;                    ds.FillCircle(center' radius' Colors.LightGoldenrodYellow);                  ds.DrawCircle(center' radius' Colors.LightGray);                    double mu = (-drawCount / 50.0f);                    for (int i =0; i < 16; ++i)                  {                      double a = mu + (i / 16.0) * Math.PI * 2;                      var x = (float)Math.Sin(a);                      var y = (float)Math.Cos(a);                      ds.DrawLine(center' center + new Vector2(x' y) * radius' Colors.Black' 5);                  }                    var rectLength = Math.Sqrt(radius * radius * 2);                    ds.FillCircle(center' (float)rectLength / 2' Colors.LightGoldenrodYellow);                    var rect = new Rect(center.X - rectLength / 2' center.Y - rectLength / 2' rectLength' rectLength);                    ds.DrawText("This is a swap chain"'                      rect'                      Colors.Black'                      new CanvasTextFormat()                      {                          FontFamily = "Comic Sans MS"'                          FontSize = 24'                          VerticalAlignment = CanvasVerticalAlignment.Center'                          HorizontalAlignment = CanvasHorizontalAlignment.Center'                          WordWrapping = CanvasWordWrapping.WholeWord'                      });                    var label = string.Format("Draws: {0}\nDevices: {1}\nTap to {2}"' drawCount' deviceCount' isPaused ? "unpause" : "pause");                    ds.DrawText(label' rect' Colors.Black' new CanvasTextFormat()                  {                      FontSize = 10'                      VerticalAlignment = CanvasVerticalAlignment.Bottom'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });              }
Magic Number,CompositionExample,SwapChainRenderer,C:\repos\Microsoft_Win2D\samples\CompositionExample\SwapChainRenderer.cs,DrawSwapChain,The following statement contains a magic number: using (var ds = swapChain.CreateDrawingSession(Colors.Transparent))              {                  var size = swapChain.Size.ToVector2();                  var radius = (Math.Min(size.X' size.Y) / 2.0f) - 4.0f;                    var center = size / 2;                    ds.FillCircle(center' radius' Colors.LightGoldenrodYellow);                  ds.DrawCircle(center' radius' Colors.LightGray);                    double mu = (-drawCount / 50.0f);                    for (int i =0; i < 16; ++i)                  {                      double a = mu + (i / 16.0) * Math.PI * 2;                      var x = (float)Math.Sin(a);                      var y = (float)Math.Cos(a);                      ds.DrawLine(center' center + new Vector2(x' y) * radius' Colors.Black' 5);                  }                    var rectLength = Math.Sqrt(radius * radius * 2);                    ds.FillCircle(center' (float)rectLength / 2' Colors.LightGoldenrodYellow);                    var rect = new Rect(center.X - rectLength / 2' center.Y - rectLength / 2' rectLength' rectLength);                    ds.DrawText("This is a swap chain"'                      rect'                      Colors.Black'                      new CanvasTextFormat()                      {                          FontFamily = "Comic Sans MS"'                          FontSize = 24'                          VerticalAlignment = CanvasVerticalAlignment.Center'                          HorizontalAlignment = CanvasHorizontalAlignment.Center'                          WordWrapping = CanvasWordWrapping.WholeWord'                      });                    var label = string.Format("Draws: {0}\nDevices: {1}\nTap to {2}"' drawCount' deviceCount' isPaused ? "unpause" : "pause");                    ds.DrawText(label' rect' Colors.Black' new CanvasTextFormat()                  {                      FontSize = 10'                      VerticalAlignment = CanvasVerticalAlignment.Bottom'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });              }
Magic Number,CompositionExample,SwapChainRenderer,C:\repos\Microsoft_Win2D\samples\CompositionExample\SwapChainRenderer.cs,DrawSwapChain,The following statement contains a magic number: using (var ds = swapChain.CreateDrawingSession(Colors.Transparent))              {                  var size = swapChain.Size.ToVector2();                  var radius = (Math.Min(size.X' size.Y) / 2.0f) - 4.0f;                    var center = size / 2;                    ds.FillCircle(center' radius' Colors.LightGoldenrodYellow);                  ds.DrawCircle(center' radius' Colors.LightGray);                    double mu = (-drawCount / 50.0f);                    for (int i =0; i < 16; ++i)                  {                      double a = mu + (i / 16.0) * Math.PI * 2;                      var x = (float)Math.Sin(a);                      var y = (float)Math.Cos(a);                      ds.DrawLine(center' center + new Vector2(x' y) * radius' Colors.Black' 5);                  }                    var rectLength = Math.Sqrt(radius * radius * 2);                    ds.FillCircle(center' (float)rectLength / 2' Colors.LightGoldenrodYellow);                    var rect = new Rect(center.X - rectLength / 2' center.Y - rectLength / 2' rectLength' rectLength);                    ds.DrawText("This is a swap chain"'                      rect'                      Colors.Black'                      new CanvasTextFormat()                      {                          FontFamily = "Comic Sans MS"'                          FontSize = 24'                          VerticalAlignment = CanvasVerticalAlignment.Center'                          HorizontalAlignment = CanvasHorizontalAlignment.Center'                          WordWrapping = CanvasWordWrapping.WholeWord'                      });                    var label = string.Format("Draws: {0}\nDevices: {1}\nTap to {2}"' drawCount' deviceCount' isPaused ? "unpause" : "pause");                    ds.DrawText(label' rect' Colors.Black' new CanvasTextFormat()                  {                      FontSize = 10'                      VerticalAlignment = CanvasVerticalAlignment.Bottom'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });              }
Magic Number,CompositionExample,SwapChainRenderer,C:\repos\Microsoft_Win2D\samples\CompositionExample\SwapChainRenderer.cs,DrawSwapChain,The following statement contains a magic number: using (var ds = swapChain.CreateDrawingSession(Colors.Transparent))              {                  var size = swapChain.Size.ToVector2();                  var radius = (Math.Min(size.X' size.Y) / 2.0f) - 4.0f;                    var center = size / 2;                    ds.FillCircle(center' radius' Colors.LightGoldenrodYellow);                  ds.DrawCircle(center' radius' Colors.LightGray);                    double mu = (-drawCount / 50.0f);                    for (int i =0; i < 16; ++i)                  {                      double a = mu + (i / 16.0) * Math.PI * 2;                      var x = (float)Math.Sin(a);                      var y = (float)Math.Cos(a);                      ds.DrawLine(center' center + new Vector2(x' y) * radius' Colors.Black' 5);                  }                    var rectLength = Math.Sqrt(radius * radius * 2);                    ds.FillCircle(center' (float)rectLength / 2' Colors.LightGoldenrodYellow);                    var rect = new Rect(center.X - rectLength / 2' center.Y - rectLength / 2' rectLength' rectLength);                    ds.DrawText("This is a swap chain"'                      rect'                      Colors.Black'                      new CanvasTextFormat()                      {                          FontFamily = "Comic Sans MS"'                          FontSize = 24'                          VerticalAlignment = CanvasVerticalAlignment.Center'                          HorizontalAlignment = CanvasHorizontalAlignment.Center'                          WordWrapping = CanvasWordWrapping.WholeWord'                      });                    var label = string.Format("Draws: {0}\nDevices: {1}\nTap to {2}"' drawCount' deviceCount' isPaused ? "unpause" : "pause");                    ds.DrawText(label' rect' Colors.Black' new CanvasTextFormat()                  {                      FontSize = 10'                      VerticalAlignment = CanvasVerticalAlignment.Bottom'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });              }
Magic Number,CompositionExample,SwapChainRenderer,C:\repos\Microsoft_Win2D\samples\CompositionExample\SwapChainRenderer.cs,DrawSwapChain,The following statement contains a magic number: using (var ds = swapChain.CreateDrawingSession(Colors.Transparent))              {                  var size = swapChain.Size.ToVector2();                  var radius = (Math.Min(size.X' size.Y) / 2.0f) - 4.0f;                    var center = size / 2;                    ds.FillCircle(center' radius' Colors.LightGoldenrodYellow);                  ds.DrawCircle(center' radius' Colors.LightGray);                    double mu = (-drawCount / 50.0f);                    for (int i =0; i < 16; ++i)                  {                      double a = mu + (i / 16.0) * Math.PI * 2;                      var x = (float)Math.Sin(a);                      var y = (float)Math.Cos(a);                      ds.DrawLine(center' center + new Vector2(x' y) * radius' Colors.Black' 5);                  }                    var rectLength = Math.Sqrt(radius * radius * 2);                    ds.FillCircle(center' (float)rectLength / 2' Colors.LightGoldenrodYellow);                    var rect = new Rect(center.X - rectLength / 2' center.Y - rectLength / 2' rectLength' rectLength);                    ds.DrawText("This is a swap chain"'                      rect'                      Colors.Black'                      new CanvasTextFormat()                      {                          FontFamily = "Comic Sans MS"'                          FontSize = 24'                          VerticalAlignment = CanvasVerticalAlignment.Center'                          HorizontalAlignment = CanvasHorizontalAlignment.Center'                          WordWrapping = CanvasWordWrapping.WholeWord'                      });                    var label = string.Format("Draws: {0}\nDevices: {1}\nTap to {2}"' drawCount' deviceCount' isPaused ? "unpause" : "pause");                    ds.DrawText(label' rect' Colors.Black' new CanvasTextFormat()                  {                      FontSize = 10'                      VerticalAlignment = CanvasVerticalAlignment.Bottom'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });              }
Magic Number,CompositionExample,SwapChainRenderer,C:\repos\Microsoft_Win2D\samples\CompositionExample\SwapChainRenderer.cs,DrawSwapChain,The following statement contains a magic number: using (var ds = swapChain.CreateDrawingSession(Colors.Transparent))              {                  var size = swapChain.Size.ToVector2();                  var radius = (Math.Min(size.X' size.Y) / 2.0f) - 4.0f;                    var center = size / 2;                    ds.FillCircle(center' radius' Colors.LightGoldenrodYellow);                  ds.DrawCircle(center' radius' Colors.LightGray);                    double mu = (-drawCount / 50.0f);                    for (int i =0; i < 16; ++i)                  {                      double a = mu + (i / 16.0) * Math.PI * 2;                      var x = (float)Math.Sin(a);                      var y = (float)Math.Cos(a);                      ds.DrawLine(center' center + new Vector2(x' y) * radius' Colors.Black' 5);                  }                    var rectLength = Math.Sqrt(radius * radius * 2);                    ds.FillCircle(center' (float)rectLength / 2' Colors.LightGoldenrodYellow);                    var rect = new Rect(center.X - rectLength / 2' center.Y - rectLength / 2' rectLength' rectLength);                    ds.DrawText("This is a swap chain"'                      rect'                      Colors.Black'                      new CanvasTextFormat()                      {                          FontFamily = "Comic Sans MS"'                          FontSize = 24'                          VerticalAlignment = CanvasVerticalAlignment.Center'                          HorizontalAlignment = CanvasHorizontalAlignment.Center'                          WordWrapping = CanvasWordWrapping.WholeWord'                      });                    var label = string.Format("Draws: {0}\nDevices: {1}\nTap to {2}"' drawCount' deviceCount' isPaused ? "unpause" : "pause");                    ds.DrawText(label' rect' Colors.Black' new CanvasTextFormat()                  {                      FontSize = 10'                      VerticalAlignment = CanvasVerticalAlignment.Bottom'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });              }
Magic Number,CompositionExample,SwapChainRenderer,C:\repos\Microsoft_Win2D\samples\CompositionExample\SwapChainRenderer.cs,DrawSwapChain,The following statement contains a magic number: using (var ds = swapChain.CreateDrawingSession(Colors.Transparent))              {                  var size = swapChain.Size.ToVector2();                  var radius = (Math.Min(size.X' size.Y) / 2.0f) - 4.0f;                    var center = size / 2;                    ds.FillCircle(center' radius' Colors.LightGoldenrodYellow);                  ds.DrawCircle(center' radius' Colors.LightGray);                    double mu = (-drawCount / 50.0f);                    for (int i =0; i < 16; ++i)                  {                      double a = mu + (i / 16.0) * Math.PI * 2;                      var x = (float)Math.Sin(a);                      var y = (float)Math.Cos(a);                      ds.DrawLine(center' center + new Vector2(x' y) * radius' Colors.Black' 5);                  }                    var rectLength = Math.Sqrt(radius * radius * 2);                    ds.FillCircle(center' (float)rectLength / 2' Colors.LightGoldenrodYellow);                    var rect = new Rect(center.X - rectLength / 2' center.Y - rectLength / 2' rectLength' rectLength);                    ds.DrawText("This is a swap chain"'                      rect'                      Colors.Black'                      new CanvasTextFormat()                      {                          FontFamily = "Comic Sans MS"'                          FontSize = 24'                          VerticalAlignment = CanvasVerticalAlignment.Center'                          HorizontalAlignment = CanvasHorizontalAlignment.Center'                          WordWrapping = CanvasWordWrapping.WholeWord'                      });                    var label = string.Format("Draws: {0}\nDevices: {1}\nTap to {2}"' drawCount' deviceCount' isPaused ? "unpause" : "pause");                    ds.DrawText(label' rect' Colors.Black' new CanvasTextFormat()                  {                      FontSize = 10'                      VerticalAlignment = CanvasVerticalAlignment.Bottom'                      HorizontalAlignment = CanvasHorizontalAlignment.Center                  });              }
