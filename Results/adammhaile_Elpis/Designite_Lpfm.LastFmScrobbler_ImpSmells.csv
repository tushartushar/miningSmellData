Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,Lpfm.LastFmScrobbler,Scrobbler,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\Scrobbler.cs,,The length of the parameter RequestAuthorisationUriPattern is 30.
Long Identifier,Lpfm.LastFmScrobbler,Scrobbler,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\Scrobbler.cs,,The length of the parameter MinimumScrobbleTrackLengthInSeconds is 35.
Long Statement,Lpfm.LastFmScrobbler.Api,ApiHelper,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\Api\ApiHelper.cs,SelectSingleNode,The length of the statement  "            if (node == null) throw new InvalidOperationException("Node is null. Cannot select single node. XML response may be mal-formed"); " is 129.
Long Statement,Lpfm.LastFmScrobbler.Api,TrackApi,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\Api\TrackApi.cs,GetScrobbleResponseFromNavigator,The length of the statement  "            if (responses.Count > 1) throw new InvalidOperationException("More than one scrobble response returned. One or zero expected"); " is 127.
Long Statement,Lpfm.LastFmScrobbler,Scrobbler,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\Scrobbler.cs,Scrobble,The length of the statement  "                throw new InvalidOperationException(string.Format("Duration is too short. Tracks shorter than {0} seconds in duration must not be scrobbled"' " is 141.
Long Statement,Lpfm.LastFmScrobbler,Scrobbler,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\Scrobbler.cs,Scrobble,The length of the statement  "            if (!track.WhenStartedPlaying.HasValue) throw new ArgumentException("A Track must have a WhenStartedPlaying value when Scrobbling"); " is 132.
Long Statement,Lpfm.LastFmScrobbler,Scrobbler,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\Scrobbler.cs,Scrobble,The length of the statement  "                    "Track has not been playing long enough. A scrobbled track must have been played for at least half its duration' or for 4 minutes (whichever occurs earlier)"); " is 159.
Complex Conditional,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,IsSafe,The conditional expression  "(((ch >= 'a') && (ch <= 'z')) || ((ch >= 'A') && (ch <= 'Z'))) || ((ch >= '0') && (ch <= '9'))"  is complex.
Complex Conditional,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeStringFromBytesInternal,The conditional expression  "((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0))"  is complex.
Complex Conditional,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeStringFromStringInternal,The conditional expression  "((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0))"  is complex.
Magic Number,Lpfm.LastFmScrobbler.Api,TrackApi,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\Api\TrackApi.cs,DateTimeToTimestamp,The following statement contains a magic number: var jan1St1970 = new DateTime(1970' 1' 1' 0' 0' 0);
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,HexToInt,The following statement contains a magic number: if ((h >= 'a') && (h <= 'f'))              {                  return ((h - 'a') + 10);              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,HexToInt,The following statement contains a magic number: if ((h >= 'A') && (h <= 'F'))              {                  return ((h - 'A') + 10);              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,IntToHex,The following statement contains a magic number: if (n <= 9)              {                  return (char)(n + 0x30);              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,IntToHex,The following statement contains a magic number: return (char)((n - 10) + 0x61);
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeBytesFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte num4 = buf[index];                  if (num4 == 0x2b)                  {                      num4 = 0x20;                  }                  else if ((num4 == 0x25) && (i < (count - 2)))                  {                      int num5 = HexToInt((char)buf[index + 1]);                      int num6 = HexToInt((char)buf[index + 2]);                      if ((num5 >= 0) && (num6 >= 0))                      {                          num4 = (byte)((num5 << 4) | num6);                          i += 2;                      }                  }                  sourceArray[length++] = num4;              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeBytesFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte num4 = buf[index];                  if (num4 == 0x2b)                  {                      num4 = 0x20;                  }                  else if ((num4 == 0x25) && (i < (count - 2)))                  {                      int num5 = HexToInt((char)buf[index + 1]);                      int num6 = HexToInt((char)buf[index + 2]);                      if ((num5 >= 0) && (num6 >= 0))                      {                          num4 = (byte)((num5 << 4) | num6);                          i += 2;                      }                  }                  sourceArray[length++] = num4;              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeBytesFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte num4 = buf[index];                  if (num4 == 0x2b)                  {                      num4 = 0x20;                  }                  else if ((num4 == 0x25) && (i < (count - 2)))                  {                      int num5 = HexToInt((char)buf[index + 1]);                      int num6 = HexToInt((char)buf[index + 2]);                      if ((num5 >= 0) && (num6 >= 0))                      {                          num4 = (byte)((num5 << 4) | num6);                          i += 2;                      }                  }                  sourceArray[length++] = num4;              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeBytesFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte num4 = buf[index];                  if (num4 == 0x2b)                  {                      num4 = 0x20;                  }                  else if ((num4 == 0x25) && (i < (count - 2)))                  {                      int num5 = HexToInt((char)buf[index + 1]);                      int num6 = HexToInt((char)buf[index + 2]);                      if ((num5 >= 0) && (num6 >= 0))                      {                          num4 = (byte)((num5 << 4) | num6);                          i += 2;                      }                  }                  sourceArray[length++] = num4;              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte b = buf[index];                  if (b == 0x2b)                  {                      b = 0x20;                  }                  else if ((b == 0x25) && (i < (count - 2)))                  {                      if ((buf[index + 1] == 0x75) && (i < (count - 5)))                      {                          int num4 = HexToInt((char)buf[index + 2]);                          int num5 = HexToInt((char)buf[index + 3]);                          int num6 = HexToInt((char)buf[index + 4]);                          int num7 = HexToInt((char)buf[index + 5]);                          if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0)))                          {                              goto Label_00DA;                          }                          char ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num8 = HexToInt((char)buf[index + 1]);                      int num9 = HexToInt((char)buf[index + 2]);                      if ((num8 >= 0) && (num9 >= 0))                      {                          b = (byte)((num8 << 4) | num9);                          i += 2;                      }                  }              Label_00DA:                  decoder.AddByte(b);              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte b = buf[index];                  if (b == 0x2b)                  {                      b = 0x20;                  }                  else if ((b == 0x25) && (i < (count - 2)))                  {                      if ((buf[index + 1] == 0x75) && (i < (count - 5)))                      {                          int num4 = HexToInt((char)buf[index + 2]);                          int num5 = HexToInt((char)buf[index + 3]);                          int num6 = HexToInt((char)buf[index + 4]);                          int num7 = HexToInt((char)buf[index + 5]);                          if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0)))                          {                              goto Label_00DA;                          }                          char ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num8 = HexToInt((char)buf[index + 1]);                      int num9 = HexToInt((char)buf[index + 2]);                      if ((num8 >= 0) && (num9 >= 0))                      {                          b = (byte)((num8 << 4) | num9);                          i += 2;                      }                  }              Label_00DA:                  decoder.AddByte(b);              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte b = buf[index];                  if (b == 0x2b)                  {                      b = 0x20;                  }                  else if ((b == 0x25) && (i < (count - 2)))                  {                      if ((buf[index + 1] == 0x75) && (i < (count - 5)))                      {                          int num4 = HexToInt((char)buf[index + 2]);                          int num5 = HexToInt((char)buf[index + 3]);                          int num6 = HexToInt((char)buf[index + 4]);                          int num7 = HexToInt((char)buf[index + 5]);                          if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0)))                          {                              goto Label_00DA;                          }                          char ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num8 = HexToInt((char)buf[index + 1]);                      int num9 = HexToInt((char)buf[index + 2]);                      if ((num8 >= 0) && (num9 >= 0))                      {                          b = (byte)((num8 << 4) | num9);                          i += 2;                      }                  }              Label_00DA:                  decoder.AddByte(b);              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte b = buf[index];                  if (b == 0x2b)                  {                      b = 0x20;                  }                  else if ((b == 0x25) && (i < (count - 2)))                  {                      if ((buf[index + 1] == 0x75) && (i < (count - 5)))                      {                          int num4 = HexToInt((char)buf[index + 2]);                          int num5 = HexToInt((char)buf[index + 3]);                          int num6 = HexToInt((char)buf[index + 4]);                          int num7 = HexToInt((char)buf[index + 5]);                          if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0)))                          {                              goto Label_00DA;                          }                          char ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num8 = HexToInt((char)buf[index + 1]);                      int num9 = HexToInt((char)buf[index + 2]);                      if ((num8 >= 0) && (num9 >= 0))                      {                          b = (byte)((num8 << 4) | num9);                          i += 2;                      }                  }              Label_00DA:                  decoder.AddByte(b);              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte b = buf[index];                  if (b == 0x2b)                  {                      b = 0x20;                  }                  else if ((b == 0x25) && (i < (count - 2)))                  {                      if ((buf[index + 1] == 0x75) && (i < (count - 5)))                      {                          int num4 = HexToInt((char)buf[index + 2]);                          int num5 = HexToInt((char)buf[index + 3]);                          int num6 = HexToInt((char)buf[index + 4]);                          int num7 = HexToInt((char)buf[index + 5]);                          if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0)))                          {                              goto Label_00DA;                          }                          char ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num8 = HexToInt((char)buf[index + 1]);                      int num9 = HexToInt((char)buf[index + 2]);                      if ((num8 >= 0) && (num9 >= 0))                      {                          b = (byte)((num8 << 4) | num9);                          i += 2;                      }                  }              Label_00DA:                  decoder.AddByte(b);              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte b = buf[index];                  if (b == 0x2b)                  {                      b = 0x20;                  }                  else if ((b == 0x25) && (i < (count - 2)))                  {                      if ((buf[index + 1] == 0x75) && (i < (count - 5)))                      {                          int num4 = HexToInt((char)buf[index + 2]);                          int num5 = HexToInt((char)buf[index + 3]);                          int num6 = HexToInt((char)buf[index + 4]);                          int num7 = HexToInt((char)buf[index + 5]);                          if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0)))                          {                              goto Label_00DA;                          }                          char ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num8 = HexToInt((char)buf[index + 1]);                      int num9 = HexToInt((char)buf[index + 2]);                      if ((num8 >= 0) && (num9 >= 0))                      {                          b = (byte)((num8 << 4) | num9);                          i += 2;                      }                  }              Label_00DA:                  decoder.AddByte(b);              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte b = buf[index];                  if (b == 0x2b)                  {                      b = 0x20;                  }                  else if ((b == 0x25) && (i < (count - 2)))                  {                      if ((buf[index + 1] == 0x75) && (i < (count - 5)))                      {                          int num4 = HexToInt((char)buf[index + 2]);                          int num5 = HexToInt((char)buf[index + 3]);                          int num6 = HexToInt((char)buf[index + 4]);                          int num7 = HexToInt((char)buf[index + 5]);                          if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0)))                          {                              goto Label_00DA;                          }                          char ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num8 = HexToInt((char)buf[index + 1]);                      int num9 = HexToInt((char)buf[index + 2]);                      if ((num8 >= 0) && (num9 >= 0))                      {                          b = (byte)((num8 << 4) | num9);                          i += 2;                      }                  }              Label_00DA:                  decoder.AddByte(b);              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte b = buf[index];                  if (b == 0x2b)                  {                      b = 0x20;                  }                  else if ((b == 0x25) && (i < (count - 2)))                  {                      if ((buf[index + 1] == 0x75) && (i < (count - 5)))                      {                          int num4 = HexToInt((char)buf[index + 2]);                          int num5 = HexToInt((char)buf[index + 3]);                          int num6 = HexToInt((char)buf[index + 4]);                          int num7 = HexToInt((char)buf[index + 5]);                          if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0)))                          {                              goto Label_00DA;                          }                          char ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num8 = HexToInt((char)buf[index + 1]);                      int num9 = HexToInt((char)buf[index + 2]);                      if ((num8 >= 0) && (num9 >= 0))                      {                          b = (byte)((num8 << 4) | num9);                          i += 2;                      }                  }              Label_00DA:                  decoder.AddByte(b);              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte b = buf[index];                  if (b == 0x2b)                  {                      b = 0x20;                  }                  else if ((b == 0x25) && (i < (count - 2)))                  {                      if ((buf[index + 1] == 0x75) && (i < (count - 5)))                      {                          int num4 = HexToInt((char)buf[index + 2]);                          int num5 = HexToInt((char)buf[index + 3]);                          int num6 = HexToInt((char)buf[index + 4]);                          int num7 = HexToInt((char)buf[index + 5]);                          if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0)))                          {                              goto Label_00DA;                          }                          char ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num8 = HexToInt((char)buf[index + 1]);                      int num9 = HexToInt((char)buf[index + 2]);                      if ((num8 >= 0) && (num9 >= 0))                      {                          b = (byte)((num8 << 4) | num9);                          i += 2;                      }                  }              Label_00DA:                  decoder.AddByte(b);              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte b = buf[index];                  if (b == 0x2b)                  {                      b = 0x20;                  }                  else if ((b == 0x25) && (i < (count - 2)))                  {                      if ((buf[index + 1] == 0x75) && (i < (count - 5)))                      {                          int num4 = HexToInt((char)buf[index + 2]);                          int num5 = HexToInt((char)buf[index + 3]);                          int num6 = HexToInt((char)buf[index + 4]);                          int num7 = HexToInt((char)buf[index + 5]);                          if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0)))                          {                              goto Label_00DA;                          }                          char ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num8 = HexToInt((char)buf[index + 1]);                      int num9 = HexToInt((char)buf[index + 2]);                      if ((num8 >= 0) && (num9 >= 0))                      {                          b = (byte)((num8 << 4) | num9);                          i += 2;                      }                  }              Label_00DA:                  decoder.AddByte(b);              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte b = buf[index];                  if (b == 0x2b)                  {                      b = 0x20;                  }                  else if ((b == 0x25) && (i < (count - 2)))                  {                      if ((buf[index + 1] == 0x75) && (i < (count - 5)))                      {                          int num4 = HexToInt((char)buf[index + 2]);                          int num5 = HexToInt((char)buf[index + 3]);                          int num6 = HexToInt((char)buf[index + 4]);                          int num7 = HexToInt((char)buf[index + 5]);                          if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0)))                          {                              goto Label_00DA;                          }                          char ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num8 = HexToInt((char)buf[index + 1]);                      int num9 = HexToInt((char)buf[index + 2]);                      if ((num8 >= 0) && (num9 >= 0))                      {                          b = (byte)((num8 << 4) | num9);                          i += 2;                      }                  }              Label_00DA:                  decoder.AddByte(b);              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte b = buf[index];                  if (b == 0x2b)                  {                      b = 0x20;                  }                  else if ((b == 0x25) && (i < (count - 2)))                  {                      if ((buf[index + 1] == 0x75) && (i < (count - 5)))                      {                          int num4 = HexToInt((char)buf[index + 2]);                          int num5 = HexToInt((char)buf[index + 3]);                          int num6 = HexToInt((char)buf[index + 4]);                          int num7 = HexToInt((char)buf[index + 5]);                          if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0)))                          {                              goto Label_00DA;                          }                          char ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num8 = HexToInt((char)buf[index + 1]);                      int num9 = HexToInt((char)buf[index + 2]);                      if ((num8 >= 0) && (num9 >= 0))                      {                          b = (byte)((num8 << 4) | num9);                          i += 2;                      }                  }              Label_00DA:                  decoder.AddByte(b);              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte b = buf[index];                  if (b == 0x2b)                  {                      b = 0x20;                  }                  else if ((b == 0x25) && (i < (count - 2)))                  {                      if ((buf[index + 1] == 0x75) && (i < (count - 5)))                      {                          int num4 = HexToInt((char)buf[index + 2]);                          int num5 = HexToInt((char)buf[index + 3]);                          int num6 = HexToInt((char)buf[index + 4]);                          int num7 = HexToInt((char)buf[index + 5]);                          if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0)))                          {                              goto Label_00DA;                          }                          char ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num8 = HexToInt((char)buf[index + 1]);                      int num9 = HexToInt((char)buf[index + 2]);                      if ((num8 >= 0) && (num9 >= 0))                      {                          b = (byte)((num8 << 4) | num9);                          i += 2;                      }                  }              Label_00DA:                  decoder.AddByte(b);              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlEncodeBytesToBytesInternal,The following statement contains a magic number: byte[] buffer = new byte[count + (num2 * 2)];
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlEncodeBytesToBytesInternal,The following statement contains a magic number: for (int j = 0; j < count; j++)              {                  byte num6 = bytes[offset + j];                  char ch2 = (char)num6;                  if (IsSafe(ch2))                  {                      buffer[num4++] = num6;                  }                  else if (ch2 == ' ')                  {                      buffer[num4++] = 0x2b;                  }                  else                  {                      buffer[num4++] = 0x25;                      buffer[num4++] = (byte)IntToHex((num6 >> 4) & 15);                      buffer[num4++] = (byte)IntToHex(num6 & 15);                  }              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlEncodeBytesToBytesInternal,The following statement contains a magic number: for (int j = 0; j < count; j++)              {                  byte num6 = bytes[offset + j];                  char ch2 = (char)num6;                  if (IsSafe(ch2))                  {                      buffer[num4++] = num6;                  }                  else if (ch2 == ' ')                  {                      buffer[num4++] = 0x2b;                  }                  else                  {                      buffer[num4++] = 0x25;                      buffer[num4++] = (byte)IntToHex((num6 >> 4) & 15);                      buffer[num4++] = (byte)IntToHex(num6 & 15);                  }              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlEncodeBytesToBytesInternal,The following statement contains a magic number: for (int j = 0; j < count; j++)              {                  byte num6 = bytes[offset + j];                  char ch2 = (char)num6;                  if (IsSafe(ch2))                  {                      buffer[num4++] = num6;                  }                  else if (ch2 == ' ')                  {                      buffer[num4++] = 0x2b;                  }                  else                  {                      buffer[num4++] = 0x25;                      buffer[num4++] = (byte)IntToHex((num6 >> 4) & 15);                      buffer[num4++] = (byte)IntToHex(num6 & 15);                  }              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlEncodeBytesToBytesInternalNonAscii,The following statement contains a magic number: byte[] buffer = new byte[count + (num * 2)];
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlEncodeBytesToBytesInternalNonAscii,The following statement contains a magic number: for (int j = 0; j < count; j++)              {                  byte b = bytes[offset + j];                  if (IsNonAsciiByte(b))                  {                      buffer[num3++] = 0x25;                      buffer[num3++] = (byte)IntToHex((b >> 4) & 15);                      buffer[num3++] = (byte)IntToHex(b & 15);                  }                  else                  {                      buffer[num3++] = b;                  }              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlEncodeBytesToBytesInternalNonAscii,The following statement contains a magic number: for (int j = 0; j < count; j++)              {                  byte b = bytes[offset + j];                  if (IsNonAsciiByte(b))                  {                      buffer[num3++] = 0x25;                      buffer[num3++] = (byte)IntToHex((b >> 4) & 15);                      buffer[num3++] = (byte)IntToHex(b & 15);                  }                  else                  {                      buffer[num3++] = b;                  }              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlEncodeBytesToBytesInternalNonAscii,The following statement contains a magic number: for (int j = 0; j < count; j++)              {                  byte b = bytes[offset + j];                  if (IsNonAsciiByte(b))                  {                      buffer[num3++] = 0x25;                      buffer[num3++] = (byte)IntToHex((b >> 4) & 15);                      buffer[num3++] = (byte)IntToHex(b & 15);                  }                  else                  {                      buffer[num3++] = b;                  }              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlEncodeUnicodeStringToStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if ((ch & 0xff80) == 0)                  {                      if (ignoreAscii || IsSafe(ch))                      {                          builder.Append(ch);                      }                      else if (ch == ' ')                      {                          builder.Append('+');                      }                      else                      {                          builder.Append('%');                          builder.Append(IntToHex((ch >> 4) & '\x000f'));                          builder.Append(IntToHex(ch & '\x000f'));                      }                  }                  else                  {                      builder.Append("%u");                      builder.Append(IntToHex((ch >> 12) & '\x000f'));                      builder.Append(IntToHex((ch >> 8) & '\x000f'));                      builder.Append(IntToHex((ch >> 4) & '\x000f'));                      builder.Append(IntToHex(ch & '\x000f'));                  }              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlEncodeUnicodeStringToStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if ((ch & 0xff80) == 0)                  {                      if (ignoreAscii || IsSafe(ch))                      {                          builder.Append(ch);                      }                      else if (ch == ' ')                      {                          builder.Append('+');                      }                      else                      {                          builder.Append('%');                          builder.Append(IntToHex((ch >> 4) & '\x000f'));                          builder.Append(IntToHex(ch & '\x000f'));                      }                  }                  else                  {                      builder.Append("%u");                      builder.Append(IntToHex((ch >> 12) & '\x000f'));                      builder.Append(IntToHex((ch >> 8) & '\x000f'));                      builder.Append(IntToHex((ch >> 4) & '\x000f'));                      builder.Append(IntToHex(ch & '\x000f'));                  }              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlEncodeUnicodeStringToStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if ((ch & 0xff80) == 0)                  {                      if (ignoreAscii || IsSafe(ch))                      {                          builder.Append(ch);                      }                      else if (ch == ' ')                      {                          builder.Append('+');                      }                      else                      {                          builder.Append('%');                          builder.Append(IntToHex((ch >> 4) & '\x000f'));                          builder.Append(IntToHex(ch & '\x000f'));                      }                  }                  else                  {                      builder.Append("%u");                      builder.Append(IntToHex((ch >> 12) & '\x000f'));                      builder.Append(IntToHex((ch >> 8) & '\x000f'));                      builder.Append(IntToHex((ch >> 4) & '\x000f'));                      builder.Append(IntToHex(ch & '\x000f'));                  }              }
Magic Number,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,UrlEncodeUnicodeStringToStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if ((ch & 0xff80) == 0)                  {                      if (ignoreAscii || IsSafe(ch))                      {                          builder.Append(ch);                      }                      else if (ch == ' ')                      {                          builder.Append('+');                      }                      else                      {                          builder.Append('%');                          builder.Append(IntToHex((ch >> 4) & '\x000f'));                          builder.Append(IntToHex(ch & '\x000f'));                      }                  }                  else                  {                      builder.Append("%u");                      builder.Append(IntToHex((ch >> 12) & '\x000f'));                      builder.Append(IntToHex((ch >> 8) & '\x000f'));                      builder.Append(IntToHex((ch >> 4) & '\x000f'));                      builder.Append(IntToHex(ch & '\x000f'));                  }              }
Magic Number,Lpfm.LastFmScrobbler,Scrobbler,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\Scrobbler.cs,Scrobble,The following statement contains a magic number: int minimumPlayingTime = (int) track.Duration.TotalSeconds/2;
Magic Number,Lpfm.LastFmScrobbler,Scrobbler,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\Scrobbler.cs,Scrobble,The following statement contains a magic number: if (minimumPlayingTime > (4*60)) minimumPlayingTime = (4*60);
Magic Number,Lpfm.LastFmScrobbler,Scrobbler,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\Scrobbler.cs,Scrobble,The following statement contains a magic number: if (minimumPlayingTime > (4*60)) minimumPlayingTime = (4*60);
Magic Number,Lpfm.LastFmScrobbler,Scrobbler,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\Scrobbler.cs,Scrobble,The following statement contains a magic number: if (minimumPlayingTime > (4*60)) minimumPlayingTime = (4*60);
Magic Number,Lpfm.LastFmScrobbler,Scrobbler,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\Scrobbler.cs,Scrobble,The following statement contains a magic number: if (minimumPlayingTime > (4*60)) minimumPlayingTime = (4*60);
Missing Default,System.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\HttpUtility.cs,IsSafe,The following switch statement is missing a default case: switch (ch)              {                  case '\'':                  case '(':                  case ')':                  case '*':                  case '-':                  case '.':                  case '_':                  case '!':                      return true;              }
Missing Default,Lpfm.LastFmScrobbler,QueuingScrobbler,C:\repos\adammhaile_Elpis\Libs\LastFmScrobbler\QueuingScrobbler.cs,Process,The following switch statement is missing a default case: switch(rating.RatingType)                      {                          case Rating.love:                              results.Add(_scrobbler.Love(rating.Track));                              break;                          case Rating.ban:                              results.Add(_scrobbler.Ban(rating.Track));                              break;                          case Rating.unlove:                              results.Add(_scrobbler.UnLove(rating.Track));                              break;                          case Rating.unban:                              results.Add(_scrobbler.UnBan(rating.Track));                              break;                      }
