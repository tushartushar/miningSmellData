Implementation smell,Namespace,Class,File,Method,Description
Complex Method,PandoraSharp,Pandora,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Pandora.cs,CallRPC_Internal,Cyclomatic complexity of the method is 9
Complex Method,PandoraSharp,Pandora,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Pandora.cs,RefreshStations,Cyclomatic complexity of the method is 8
Complex Method,PandoraSharp,Station,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Station.cs,Station,Cyclomatic complexity of the method is 8
Long Parameter List,PandoraSharp,Pandora,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Pandora.cs,CallRPC,The method has 6 parameters. Parameters: method' args' b_url_args' isAuth' useSSL' insertTime
Complex Conditional,PandoraSharp,Pandora,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Pandora.cs,SetAudioFormat,The conditional expression  "(fmt != PAudioFormat.AACPlus &&                   fmt != PAudioFormat.MP3 &&                   fmt != PAudioFormat.MP3_HIFI) ||                  (!HasSubscription && fmt == PAudioFormat.MP3_HIFI)"  is complex.
Empty Catch Block,PandoraSharp,Song,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Song.cs,Song,The method has an empty catch block.
Empty Catch Block,PandoraSharp,Song,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Song.cs,Song,The method has an empty catch block.
Empty Catch Block,PandoraSharp,Song,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Song.cs,Song,The method has an empty catch block.
Empty Catch Block,PandoraSharp,Song,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Song.cs,SetTired,The method has an empty catch block.
Empty Catch Block,PandoraSharp,Song,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Song.cs,Bookmark,The method has an empty catch block.
Empty Catch Block,PandoraSharp,Song,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Song.cs,BookmarkArtist,The method has an empty catch block.
Empty Catch Block,PandoraSharp,Station,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Station.cs,AddVariety,The method has an empty catch block.
Empty Catch Block,PandoraSharp,Station,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Station.cs,Delete,The method has an empty catch block.
Magic Number,PandoraSharp,Crypto,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,DecryptSyncTime,The following statement contains a magic number: try              {                  return long.Parse(System.Text.RegularExpressions.Regex.Match(b.Substring(4)' "^[0-9]*").Groups[0].Value);              }              catch (Exception e)              {                  Log.O("Failed to parse sync time '" + b + "': " + e + "\r\nRaw:" + s);                  throw;              }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Blowfish,The following statement contains a magic number: for (i = 0; i < N + 2; ++i)                  {                      data = 0x00000000;                      for (k = 0; k < 4; ++k)                      {                          data = (data << 8) | key[j];                          j++;                          if (j >= key.Length)                          {                              j = 0;                          }                      }                      P[i] = P[i] ^ data;                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Blowfish,The following statement contains a magic number: for (i = 0; i < N + 2; ++i)                  {                      data = 0x00000000;                      for (k = 0; k < 4; ++k)                      {                          data = (data << 8) | key[j];                          j++;                          if (j >= key.Length)                          {                              j = 0;                          }                      }                      P[i] = P[i] ^ data;                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Blowfish,The following statement contains a magic number: for (i = 0; i < N + 2; ++i)                  {                      data = 0x00000000;                      for (k = 0; k < 4; ++k)                      {                          data = (data << 8) | key[j];                          j++;                          if (j >= key.Length)                          {                              j = 0;                          }                      }                      P[i] = P[i] ^ data;                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Blowfish,The following statement contains a magic number: for (i = 0; i < N + 2; i += 2)                  {                      EncryptPair(ref datal' ref datar);                      P[i] = datal;                      P[i + 1] = datar;                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Blowfish,The following statement contains a magic number: for (i = 0; i < N + 2; i += 2)                  {                      EncryptPair(ref datal' ref datar);                      P[i] = datal;                      P[i + 1] = datar;                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Blowfish,The following statement contains a magic number: for (i = 0; i < 4; ++i)                  {                      for (j = 0; j < 256; j += 2)                      {                          EncryptPair(ref datal' ref datar);                            S[i' j] = datal;                          S[i' j + 1] = datar;                      }                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Blowfish,The following statement contains a magic number: for (i = 0; i < 4; ++i)                  {                      for (j = 0; j < 256; j += 2)                      {                          EncryptPair(ref datal' ref datar);                            S[i' j] = datal;                          S[i' j + 1] = datar;                      }                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Blowfish,The following statement contains a magic number: for (i = 0; i < 4; ++i)                  {                      for (j = 0; j < 256; j += 2)                      {                          EncryptPair(ref datal' ref datar);                            S[i' j] = datal;                          S[i' j + 1] = datar;                      }                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,F,The following statement contains a magic number: x >>= 8;
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,F,The following statement contains a magic number: x >>= 8;
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,F,The following statement contains a magic number: x >>= 8;
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,F,The following statement contains a magic number: y = y ^ S[2' c];
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,F,The following statement contains a magic number: y = y + S[3' d];
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Encrypt,The following statement contains a magic number: if ((data.Length % 8) != 0)                  {                      byte[] data2 = new byte[data.Length + 8 - (data.Length % 8)];                      Buffer.BlockCopy(data' 0' data2' 0' data.Length);                        data = data2;                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Encrypt,The following statement contains a magic number: if ((data.Length % 8) != 0)                  {                      byte[] data2 = new byte[data.Length + 8 - (data.Length % 8)];                      Buffer.BlockCopy(data' 0' data2' 0' data.Length);                        data = data2;                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Encrypt,The following statement contains a magic number: if ((data.Length % 8) != 0)                  {                      byte[] data2 = new byte[data.Length + 8 - (data.Length % 8)];                      Buffer.BlockCopy(data' 0' data2' 0' data.Length);                        data = data2;                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Encrypt,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      EncryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Encrypt,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      EncryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Encrypt,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      EncryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Encrypt,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      EncryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Encrypt,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      EncryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Encrypt,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      EncryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Encrypt,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      EncryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Encrypt,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      EncryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Encrypt,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      EncryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Encrypt,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      EncryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Encrypt,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      EncryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Encrypt,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      EncryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Encrypt,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      EncryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Encrypt,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      EncryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Encrypt,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      EncryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Encrypt,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      EncryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Encrypt,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      EncryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Encrypt,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      EncryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Encrypt,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      EncryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Encrypt,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      EncryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Encrypt,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      EncryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Encrypt,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      EncryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Encrypt,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      EncryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Encrypt,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      EncryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Encrypt,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      EncryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: if ((length % 8) != 0)                  {                      byte[] data2 = new byte[length + 8 - (length % 8)];                      data.CopyTo(data2' 0);                      data = data2;                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: if ((length % 8) != 0)                  {                      byte[] data2 = new byte[length + 8 - (length % 8)];                      data.CopyTo(data2' 0);                      data = data2;                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: if ((length % 8) != 0)                  {                      byte[] data2 = new byte[length + 8 - (length % 8)];                      data.CopyTo(data2' 0);                      data = data2;                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: for (int i = 0; i < length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      DecryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: for (int i = 0; i < length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      DecryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: for (int i = 0; i < length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      DecryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: for (int i = 0; i < length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      DecryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: for (int i = 0; i < length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      DecryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: for (int i = 0; i < length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      DecryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: for (int i = 0; i < length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      DecryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: for (int i = 0; i < length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      DecryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: for (int i = 0; i < length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      DecryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: for (int i = 0; i < length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      DecryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: for (int i = 0; i < length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      DecryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: for (int i = 0; i < length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      DecryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: for (int i = 0; i < length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      DecryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: for (int i = 0; i < length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      DecryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: for (int i = 0; i < length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      DecryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: for (int i = 0; i < length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      DecryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: for (int i = 0; i < length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      DecryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: for (int i = 0; i < length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      DecryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: for (int i = 0; i < length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      DecryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: for (int i = 0; i < length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      DecryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: for (int i = 0; i < length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      DecryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: for (int i = 0; i < length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      DecryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: for (int i = 0; i < length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      DecryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: for (int i = 0; i < length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      DecryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: for (int i = 0; i < length; i += 8)                  {                      // Encode the data in 8 byte blocks.                      xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);                      xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);                      DecryptPair(ref xl' ref xr);                      // Now Replace the data.                      data[i] = (byte)(xl >> 24);                      data[i + 1] = (byte)(xl >> 16);                      data[i + 2] = (byte)(xl >> 8);                      data[i + 3] = (byte)(xl);                      data[i + 4] = (byte)(xr >> 24);                      data[i + 5] = (byte)(xr >> 16);                      data[i + 6] = (byte)(xr >> 8);                      data[i + 7] = (byte)(xr);                  }
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: byte[] bytes = new byte[p.Length / 2];
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: for (int i = 0; i < p.Length; i += 2)                      bytes[i / 2] = Convert.ToByte(string.Concat(p[i]' p[i + 1])' 16);
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: for (int i = 0; i < p.Length; i += 2)                      bytes[i / 2] = Convert.ToByte(string.Concat(p[i]' p[i + 1])' 16);
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,Decrypt,The following statement contains a magic number: for (int i = 0; i < p.Length; i += 2)                      bytes[i / 2] = Convert.ToByte(string.Concat(p[i]' p[i + 1])' 16);
Magic Number,PandoraSharp,Blowfish,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Crypt.cs,bytesTohex,The following statement contains a magic number: foreach (byte b in bytes)                  {                      sb.Append(hexmap[(int)((b & 0xf0) >> 4)]);                      sb.Append(hexmap[(int)(b & 0x0f)]);                  }
Magic Number,PandoraSharp,DateTimeExtensions,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Extensions.cs,ToEpochTime,The following statement contains a magic number: var epoch = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,PandoraSharp,StringExtensions,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Extensions.cs,FromHex,The following statement contains a magic number: if (hex.Length%2 != 0)                  throw new ArgumentException("Input must be hex values and have an even number of characters.");
Magic Number,PandoraSharp,StringExtensions,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Extensions.cs,FromHex,The following statement contains a magic number: for (int i = 0; i < hex.Length; i += 2)              {                  result += (char) Convert.ToByte(hex.Substring(i' 2)' 16);              }
Magic Number,PandoraSharp,StringExtensions,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Extensions.cs,FromHex,The following statement contains a magic number: for (int i = 0; i < hex.Length; i += 2)              {                  result += (char) Convert.ToByte(hex.Substring(i' 2)' 16);              }
Magic Number,PandoraSharp,StringExtensions,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Extensions.cs,FromHex,The following statement contains a magic number: for (int i = 0; i < hex.Length; i += 2)              {                  result += (char) Convert.ToByte(hex.Substring(i' 2)' 16);              }
Magic Number,PandoraSharp,Pandora,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Pandora.cs,CallRPC_Internal,The following statement contains a magic number: if (!isAuth)              {                  int waitCount = 30;                  while (_authorizing)                  {                      waitCount--;                      if (waitCount >= 0)                          Thread.Sleep(1000);                      else                          break;                  }              }
Magic Number,PandoraSharp,Pandora,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Pandora.cs,CallRPC_Internal,The following statement contains a magic number: if (!isAuth)              {                  int waitCount = 30;                  while (_authorizing)                  {                      waitCount--;                      if (waitCount >= 0)                          Thread.Sleep(1000);                      else                          break;                  }              }
Magic Number,PandoraSharp,Pandora,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Pandora.cs,CallRPC,The following statement contains a magic number: if (args.Length % 2 != 0)              {                  Log.O("CallRPC: Called with an uneven number of arguments!");                  return null;              }
Magic Number,PandoraSharp,Pandora,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Pandora.cs,CallRPC,The following statement contains a magic number: for (int i=0; i < args.Length; i+=2)              {                  if(args[i].GetType() != typeof(string) || args[i].GetType() != typeof(String))                  {                      Log.O("CallRPC: Called with an incorrect parameter type!");                      return null;                  }                  req[(string)args[i]] = JToken.FromObject(args[i + 1]);              }
Magic Number,PandoraSharp,Song,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Song.cs,Song,The following statement contains a magic number: if (_pandora.AudioFormat == PAudioFormat.AACPlus)              {                  if(aacUrl == string.Empty)                      throw new PandoraException(ErrorCodes.NO_AUDIO_URLS);                    AudioUrl = aacUrl;              }              else              {                  string[] songUrls = null;                  try                  {                      if(song["additionalAudioUrl"].HasValues)                          songUrls = song["additionalAudioUrl"].ToObject<string[]>();                      else                          songUrls = new string[]{(string)song["additionalAudioUrl"]};                  }                  catch { }                    if (songUrls == null || songUrls.Length == 0)                  {                      if (aacUrl != string.Empty) AudioUrl = aacUrl;                      else throw new PandoraException(ErrorCodes.NO_AUDIO_URLS);                  }                  else if (songUrls.Length == 1)                  {                      AudioUrl = songUrls[0];                  }                  else if (songUrls.Length > 1)                  {                      if (_pandora.AudioFormat == PAudioFormat.MP3_HIFI)                      {                          if (songUrls.Length >= 2)                              AudioUrl = songUrls[1];                          else                              AudioUrl = songUrls[0];                      }                      else //default to PAudioFormat.MP3                      {                          AudioUrl = songUrls[0];                      }                  }              }
Missing Default,PandoraSharp,Pandora,C:\repos\adammhaile_Elpis\Libs\PandoraSharp\Pandora.cs,RefreshStations,The following switch statement is missing a default case: switch (StationSortOrder)              {                  case SortOrder.DateDesc:                      //Stations = Stations.OrderByDescending(x => x.ID).ToList();                      Stations = Stations.OrderByDescending(x => Convert.ToInt64(x.ID)).ToList();                      break;                  case SortOrder.DateAsc:                      //Stations = Stations.OrderBy(x => x.ID).ToList();                      Stations = Stations.OrderBy(x => Convert.ToInt64(x.ID)).ToList();                      break;                  case SortOrder.AlphaDesc:                      Stations = Stations.OrderByDescending(x => x.Name).ToList();                      break;                  case SortOrder.AlphaAsc:                      Stations = Stations.OrderBy(x => x.Name).ToList();                      break;                  case SortOrder.RatingAsc:                      GetStationMetaData();                      Stations = Stations.OrderBy(x => x.ThumbsUp).ToList();                      break;                  case SortOrder.RatingDesc:                      GetStationMetaData();                      Stations = Stations.OrderByDescending(x => x.ThumbsUp).ToList();                      break;                }
