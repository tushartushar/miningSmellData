Implementation smell,Namespace,Class,File,Method,Description
Long Method,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Play,The method has 165 lines of code.
Complex Method,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Play,Cyclomatic complexity of the method is 31
Complex Method,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,IsMODFile,Cyclomatic complexity of the method is 8
Complex Method,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,PlayPause,Cyclomatic complexity of the method is 10
Complex Method,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,SeekForward,Cyclomatic complexity of the method is 8
Complex Method,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,SeekReverse,Cyclomatic complexity of the method is 8
Complex Method,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,ChangeOutputDevice,Cyclomatic complexity of the method is 10
Complex Method,BassPlayer,StreamCopy,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\StreamCopy.cs,OnStarted,Cyclomatic complexity of the method is 16
Long Parameter List,BassPlayer,StreamCopy,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\StreamCopy.cs,DSPCallback,The method has 5 parameters.
Long Statement,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Initialize,The length of the statement  "			// In case of mixing use a Buffer of 500ms only' because the Mixer plays the complete bufer' before for example skipping " is 120.
Long Statement,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,InitBass,The length of the statement  "		initOK = (Bass.BASS_Init (soundDevice' 44100' BASSInit.BASS_DEVICE_DEFAULT | BASSInit.BASS_DEVICE_LATENCY' IntPtr.Zero)); " is 121.
Long Statement,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Play,The length of the statement  "			if (filePath.ToLower ().Contains (@"http://") || filePath.ToLower ().Contains (@"https://") || filePath.ToLower ().StartsWith ("mms") || filePath.ToLower ().StartsWith ("rtsp")) { " is 179.
Long Statement,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Play,The length of the statement  "				stream = Bass.BASS_MusicLoad (filePath' 0' 0' BASSFlag.BASS_SAMPLE_SOFTWARE | BASSFlag.BASS_SAMPLE_FLOAT | BASSFlag.BASS_MUSIC_AUTOFREE | BASSFlag.BASS_MUSIC_PRESCAN | BASSFlag.BASS_MUSIC_RAMP' 0); " is 197.
Long Statement,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Play,The length of the statement  "				BassMix.BASS_Mixer_StreamAddChannel (_mixer' stream' BASSFlag.BASS_MIXER_MATRIX | BASSFlag.BASS_STREAM_AUTOFREE | BASSFlag.BASS_MIXER_NORAMPIN | BASSFlag.BASS_MIXER_BUFFER); " is 173.
Long Statement,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Play,The length of the statement  "				throw new BassStreamException ("Bass Error: Unable to create stream - " + Enum.GetName (typeof(BASSError)' error)' error); " is 122.
Long Statement,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,RegisterPlaybackFadeOutEvent,The length of the statement  "	syncHandle = Bass.BASS_ChannelSetSync (stream' BASSSync.BASS_SYNC_ONETIME | BASSSync.BASS_SYNC_POS' bytePos' PlaybackFadeOutProcDelegate' IntPtr.Zero); " is 151.
Long Statement,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,RegisterPlaybackFadeOutEvent,The length of the statement  "		Log.Debug ("BASS: RegisterPlaybackFadeOutEvent of stream {0} failed with error {1}"' stream' Enum.GetName (typeof(BASSError)' Bass.BASS_ErrorGetCode ())); " is 154.
Long Statement,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,RegisterPlaybackEndEvent,The length of the statement  "	syncHandle = Bass.BASS_ChannelSetSync (stream' BASSSync.BASS_SYNC_ONETIME | BASSSync.BASS_SYNC_END' 0' PlaybackEndProcDelegate' IntPtr.Zero); " is 141.
Long Statement,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,RegisterPlaybackEndEvent,The length of the statement  "		Log.Debug ("BASS: RegisterPlaybackEndEvent of stream {0} failed with error {1}"' stream' Enum.GetName (typeof(BASSError)' Bass.BASS_ErrorGetCode ())); " is 150.
Long Statement,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,RegisterStreamFreedEvent,The length of the statement  "	syncHandle = Bass.BASS_ChannelSetSync (stream' BASSSync.BASS_SYNC_FREE' 0' PlaybackStreamFreedProcDelegate' IntPtr.Zero); " is 121.
Long Statement,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,RegisterStreamFreedEvent,The length of the statement  "		Log.Debug ("BASS: RegisterStreamFreedEvent of stream {0} failed with error {1}"' stream' Enum.GetName (typeof(BASSError)' Bass.BASS_ErrorGetCode ())); " is 150.
Long Statement,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,ChangeOutputDevice,The length of the statement  "		initOK = (Bass.BASS_Init (newDeviceId' 44100' BASSInit.BASS_DEVICE_DEFAULT | BASSInit.BASS_DEVICE_LATENCY' IntPtr.Zero)); " is 121.
Long Statement,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,ChangeOutputDevice,The length of the statement  "			throw new BassException ("Cannot initialize output device [" + newOutputDevice + "]' error is [" + Enum.GetName (typeof(BASSError)' error) + "]"); " is 146.
Complex Conditional,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Play,The conditional expression  "filePath.ToLower ().Contains (@"http://") || filePath.ToLower ().Contains (@"https://") || filePath.ToLower ().StartsWith ("mms") || filePath.ToLower ().StartsWith ("rtsp")"  is complex.
Empty Catch Block,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,PlayPause,The method has an empty catch block.
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Initialize,The following statement contains a magic number: try {  	Log.Info ("BASS: Initialize BASS environment ...");  	LoadSettings ();  	//TODO: Make this configurable  	if (_regEmail != string.Empty)  		BassNet.Registration (_regEmail' _regKey);  	// Set the Global Volume. 0 = silent' 10000 = Full  	// We get 0 - 100 from Configuration' so multiply by 100  	Bass.BASS_SetConfig (BASSConfig.BASS_CONFIG_GVOL_STREAM' _StreamVolume * 100);  	if (_Mixing) {  		// In case of mixing use a Buffer of 500ms only' because the Mixer plays the complete bufer' before for example skipping  		BufferingMS = 500;  	} else {  		Bass.BASS_SetConfig (BASSConfig.BASS_CONFIG_BUFFER' _BufferingMS);  	}  	for (int i = 0; i < MAXSTREAMS; i++) {  		Streams.Add (0);  	}  	PlaybackFadeOutProcDelegate = PlaybackFadeOutProc;  	PlaybackEndProcDelegate = PlaybackEndProc;  	PlaybackStreamFreedProcDelegate = PlaybackStreamFreedProc;  	MetaTagSyncProcDelegate = MetaTagSyncProc;  	DownloadProcDelegate = DownloadProc;  	StreamEventSyncHandles.Add (new List<int> ());  	StreamEventSyncHandles.Add (new List<int> ());  	LoadAudioDecoderPlugins ();  	Log.Info ("BASS: Initializing BASS environment done.");  	_Initialized = true;  	_BassFreed = true;  } catch (Exception ex) {  	Log.Error ("BASS: Initialize thread failed.  Reason: {0}"' ex.Message);  	throw new BassException ("BASS: Initialize thread failed.  Reason: " + ex);  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Initialize,The following statement contains a magic number: try {  	Log.Info ("BASS: Initialize BASS environment ...");  	LoadSettings ();  	//TODO: Make this configurable  	if (_regEmail != string.Empty)  		BassNet.Registration (_regEmail' _regKey);  	// Set the Global Volume. 0 = silent' 10000 = Full  	// We get 0 - 100 from Configuration' so multiply by 100  	Bass.BASS_SetConfig (BASSConfig.BASS_CONFIG_GVOL_STREAM' _StreamVolume * 100);  	if (_Mixing) {  		// In case of mixing use a Buffer of 500ms only' because the Mixer plays the complete bufer' before for example skipping  		BufferingMS = 500;  	} else {  		Bass.BASS_SetConfig (BASSConfig.BASS_CONFIG_BUFFER' _BufferingMS);  	}  	for (int i = 0; i < MAXSTREAMS; i++) {  		Streams.Add (0);  	}  	PlaybackFadeOutProcDelegate = PlaybackFadeOutProc;  	PlaybackEndProcDelegate = PlaybackEndProc;  	PlaybackStreamFreedProcDelegate = PlaybackStreamFreedProc;  	MetaTagSyncProcDelegate = MetaTagSyncProc;  	DownloadProcDelegate = DownloadProc;  	StreamEventSyncHandles.Add (new List<int> ());  	StreamEventSyncHandles.Add (new List<int> ());  	LoadAudioDecoderPlugins ();  	Log.Info ("BASS: Initializing BASS environment done.");  	_Initialized = true;  	_BassFreed = true;  } catch (Exception ex) {  	Log.Error ("BASS: Initialize thread failed.  Reason: {0}"' ex.Message);  	throw new BassException ("BASS: Initialize thread failed.  Reason: " + ex);  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Initialize,The following statement contains a magic number: Bass.BASS_SetConfig (BASSConfig.BASS_CONFIG_GVOL_STREAM' _StreamVolume * 100);  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Initialize,The following statement contains a magic number: if (_Mixing) {  	// In case of mixing use a Buffer of 500ms only' because the Mixer plays the complete bufer' before for example skipping  	BufferingMS = 500;  } else {  	Bass.BASS_SetConfig (BASSConfig.BASS_CONFIG_BUFFER' _BufferingMS);  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Initialize,The following statement contains a magic number: BufferingMS = 500;  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,InitBass,The following statement contains a magic number: try {  	Log.Info ("BASS: Initializing BASS audio engine...");  	bool initOK = false;  	Bass.BASS_SetConfig (BASSConfig.BASS_CONFIG_DEV_DEFAULT' true);  	//Allows following Default device (Win 7 Only)  	int soundDevice = GetSoundDevice ();  	initOK = (Bass.BASS_Init (soundDevice' 44100' BASSInit.BASS_DEVICE_DEFAULT | BASSInit.BASS_DEVICE_LATENCY' IntPtr.Zero));  	if (initOK) {  		// Create an 8 Channel Mixer' which should be running until stopped.  		// The streams to play are added to the active screen  		if (_Mixing && _mixer == 0) {  			_mixer = BassMix.BASS_Mixer_StreamCreate (44100' 8' BASSFlag.BASS_MIXER_NONSTOP | BASSFlag.BASS_STREAM_AUTOFREE);  		}  		UpdateTimer.Interval = _progUpdateInterval;  		UpdateTimer.Tick += OnUpdateTimerTick;  		Log.Info ("BASS: Initialization done.");  		_Initialized = true;  		_BassFreed = false;  	} else {  		BASSError error = Bass.BASS_ErrorGetCode ();  		Log.Error ("BASS: Error initializing BASS audio engine {0}"' Enum.GetName (typeof(BASSError)' error));  		throw new Exception ("Init Error: " + error.ToString ());  	}  } catch (Exception ex) {  	Log.Error ("BASS: Initialize failed. Reason: {0}"' ex.Message);  	throw new BassException ("BASS: Initialize failed. Reason: }" + ex.Message);  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,InitBass,The following statement contains a magic number: try {  	Log.Info ("BASS: Initializing BASS audio engine...");  	bool initOK = false;  	Bass.BASS_SetConfig (BASSConfig.BASS_CONFIG_DEV_DEFAULT' true);  	//Allows following Default device (Win 7 Only)  	int soundDevice = GetSoundDevice ();  	initOK = (Bass.BASS_Init (soundDevice' 44100' BASSInit.BASS_DEVICE_DEFAULT | BASSInit.BASS_DEVICE_LATENCY' IntPtr.Zero));  	if (initOK) {  		// Create an 8 Channel Mixer' which should be running until stopped.  		// The streams to play are added to the active screen  		if (_Mixing && _mixer == 0) {  			_mixer = BassMix.BASS_Mixer_StreamCreate (44100' 8' BASSFlag.BASS_MIXER_NONSTOP | BASSFlag.BASS_STREAM_AUTOFREE);  		}  		UpdateTimer.Interval = _progUpdateInterval;  		UpdateTimer.Tick += OnUpdateTimerTick;  		Log.Info ("BASS: Initialization done.");  		_Initialized = true;  		_BassFreed = false;  	} else {  		BASSError error = Bass.BASS_ErrorGetCode ();  		Log.Error ("BASS: Error initializing BASS audio engine {0}"' Enum.GetName (typeof(BASSError)' error));  		throw new Exception ("Init Error: " + error.ToString ());  	}  } catch (Exception ex) {  	Log.Error ("BASS: Initialize failed. Reason: {0}"' ex.Message);  	throw new BassException ("BASS: Initialize failed. Reason: }" + ex.Message);  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,InitBass,The following statement contains a magic number: try {  	Log.Info ("BASS: Initializing BASS audio engine...");  	bool initOK = false;  	Bass.BASS_SetConfig (BASSConfig.BASS_CONFIG_DEV_DEFAULT' true);  	//Allows following Default device (Win 7 Only)  	int soundDevice = GetSoundDevice ();  	initOK = (Bass.BASS_Init (soundDevice' 44100' BASSInit.BASS_DEVICE_DEFAULT | BASSInit.BASS_DEVICE_LATENCY' IntPtr.Zero));  	if (initOK) {  		// Create an 8 Channel Mixer' which should be running until stopped.  		// The streams to play are added to the active screen  		if (_Mixing && _mixer == 0) {  			_mixer = BassMix.BASS_Mixer_StreamCreate (44100' 8' BASSFlag.BASS_MIXER_NONSTOP | BASSFlag.BASS_STREAM_AUTOFREE);  		}  		UpdateTimer.Interval = _progUpdateInterval;  		UpdateTimer.Tick += OnUpdateTimerTick;  		Log.Info ("BASS: Initialization done.");  		_Initialized = true;  		_BassFreed = false;  	} else {  		BASSError error = Bass.BASS_ErrorGetCode ();  		Log.Error ("BASS: Error initializing BASS audio engine {0}"' Enum.GetName (typeof(BASSError)' error));  		throw new Exception ("Init Error: " + error.ToString ());  	}  } catch (Exception ex) {  	Log.Error ("BASS: Initialize failed. Reason: {0}"' ex.Message);  	throw new BassException ("BASS: Initialize failed. Reason: }" + ex.Message);  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,InitBass,The following statement contains a magic number: initOK = (Bass.BASS_Init (soundDevice' 44100' BASSInit.BASS_DEVICE_DEFAULT | BASSInit.BASS_DEVICE_LATENCY' IntPtr.Zero));  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,InitBass,The following statement contains a magic number: if (initOK) {  	// Create an 8 Channel Mixer' which should be running until stopped.  	// The streams to play are added to the active screen  	if (_Mixing && _mixer == 0) {  		_mixer = BassMix.BASS_Mixer_StreamCreate (44100' 8' BASSFlag.BASS_MIXER_NONSTOP | BASSFlag.BASS_STREAM_AUTOFREE);  	}  	UpdateTimer.Interval = _progUpdateInterval;  	UpdateTimer.Tick += OnUpdateTimerTick;  	Log.Info ("BASS: Initialization done.");  	_Initialized = true;  	_BassFreed = false;  } else {  	BASSError error = Bass.BASS_ErrorGetCode ();  	Log.Error ("BASS: Error initializing BASS audio engine {0}"' Enum.GetName (typeof(BASSError)' error));  	throw new Exception ("Init Error: " + error.ToString ());  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,InitBass,The following statement contains a magic number: if (initOK) {  	// Create an 8 Channel Mixer' which should be running until stopped.  	// The streams to play are added to the active screen  	if (_Mixing && _mixer == 0) {  		_mixer = BassMix.BASS_Mixer_StreamCreate (44100' 8' BASSFlag.BASS_MIXER_NONSTOP | BASSFlag.BASS_STREAM_AUTOFREE);  	}  	UpdateTimer.Interval = _progUpdateInterval;  	UpdateTimer.Tick += OnUpdateTimerTick;  	Log.Info ("BASS: Initialization done.");  	_Initialized = true;  	_BassFreed = false;  } else {  	BASSError error = Bass.BASS_ErrorGetCode ();  	Log.Error ("BASS: Error initializing BASS audio engine {0}"' Enum.GetName (typeof(BASSError)' error));  	throw new Exception ("Init Error: " + error.ToString ());  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,InitBass,The following statement contains a magic number: if (_Mixing && _mixer == 0) {  	_mixer = BassMix.BASS_Mixer_StreamCreate (44100' 8' BASSFlag.BASS_MIXER_NONSTOP | BASSFlag.BASS_STREAM_AUTOFREE);  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,InitBass,The following statement contains a magic number: if (_Mixing && _mixer == 0) {  	_mixer = BassMix.BASS_Mixer_StreamCreate (44100' 8' BASSFlag.BASS_MIXER_NONSTOP | BASSFlag.BASS_STREAM_AUTOFREE);  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,InitBass,The following statement contains a magic number: _mixer = BassMix.BASS_Mixer_StreamCreate (44100' 8' BASSFlag.BASS_MIXER_NONSTOP | BASSFlag.BASS_STREAM_AUTOFREE);  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,InitBass,The following statement contains a magic number: _mixer = BassMix.BASS_Mixer_StreamCreate (44100' 8' BASSFlag.BASS_MIXER_NONSTOP | BASSFlag.BASS_STREAM_AUTOFREE);  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,LoadSettings,The following statement contains a magic number: _StreamVolume = 100;  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,LoadSettings,The following statement contains a magic number: _BufferingMS = 5000;  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,LoadSettings,The following statement contains a magic number: if (_BufferingMS <= 0) {  	_BufferingMS = 1000;  } else if (_BufferingMS > 8000) {  	_BufferingMS = 8000;  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,LoadSettings,The following statement contains a magic number: if (_BufferingMS <= 0) {  	_BufferingMS = 1000;  } else if (_BufferingMS > 8000) {  	_BufferingMS = 8000;  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,LoadSettings,The following statement contains a magic number: if (_BufferingMS <= 0) {  	_BufferingMS = 1000;  } else if (_BufferingMS > 8000) {  	_BufferingMS = 8000;  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,LoadSettings,The following statement contains a magic number: _BufferingMS = 1000;  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,LoadSettings,The following statement contains a magic number: if (_BufferingMS > 8000) {  	_BufferingMS = 8000;  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,LoadSettings,The following statement contains a magic number: if (_BufferingMS > 8000) {  	_BufferingMS = 8000;  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,LoadSettings,The following statement contains a magic number: _BufferingMS = 8000;  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,LoadSettings,The following statement contains a magic number: if (_CrossFadeIntervalMS < 0) {  	_CrossFadeIntervalMS = 0;  } else if (_CrossFadeIntervalMS > 16000) {  	_CrossFadeIntervalMS = 16000;  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,LoadSettings,The following statement contains a magic number: if (_CrossFadeIntervalMS < 0) {  	_CrossFadeIntervalMS = 0;  } else if (_CrossFadeIntervalMS > 16000) {  	_CrossFadeIntervalMS = 16000;  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,LoadSettings,The following statement contains a magic number: if (_CrossFadeIntervalMS > 16000) {  	_CrossFadeIntervalMS = 16000;  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,LoadSettings,The following statement contains a magic number: if (_CrossFadeIntervalMS > 16000) {  	_CrossFadeIntervalMS = 16000;  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,LoadSettings,The following statement contains a magic number: _CrossFadeIntervalMS = 16000;  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,LoadSettings,The following statement contains a magic number: if (doGaplessPlayback) {  	_CrossFadeIntervalMS = 200;  	_playBackType = (int)PlayBackType.GAPLESS;  } else {  	if (_CrossFadeIntervalMS == 0) {  		_playBackType = (int)PlayBackType.NORMAL;  		_CrossFadeIntervalMS = 100;  	} else {  		_playBackType = (int)PlayBackType.CROSSFADE;  	}  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,LoadSettings,The following statement contains a magic number: if (doGaplessPlayback) {  	_CrossFadeIntervalMS = 200;  	_playBackType = (int)PlayBackType.GAPLESS;  } else {  	if (_CrossFadeIntervalMS == 0) {  		_playBackType = (int)PlayBackType.NORMAL;  		_CrossFadeIntervalMS = 100;  	} else {  		_playBackType = (int)PlayBackType.CROSSFADE;  	}  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,LoadSettings,The following statement contains a magic number: _CrossFadeIntervalMS = 200;  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,LoadSettings,The following statement contains a magic number: if (_CrossFadeIntervalMS == 0) {  	_playBackType = (int)PlayBackType.NORMAL;  	_CrossFadeIntervalMS = 100;  } else {  	_playBackType = (int)PlayBackType.CROSSFADE;  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,LoadSettings,The following statement contains a magic number: _CrossFadeIntervalMS = 100;  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,SetGain,The following statement contains a magic number: if (gainDB > 60.0)  	gainDB = 60.0;  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,SetGain,The following statement contains a magic number: if (gainDB > 60.0)  	gainDB = 60.0;  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,SetGain,The following statement contains a magic number: gainDB = 60.0;  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Play,The following statement contains a magic number: try {  	if (Paused || (filePath.ToLower ().CompareTo (FilePath.ToLower ()) == 0 && stream != 0)) {  		bool doReturn = !Paused;  		// Selected file is equal to current stream  		if (_State == PlayState.Paused) {  			// Resume paused stream  			if (_SoftStop) {  				Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1' 500);  			} else {  				Bass.BASS_ChannelSetAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1);  			}  			result = Bass.BASS_Start ();  			if (result) {  				_State = PlayState.Playing;  				UpdateTimer.Start ();  				if (PlaybackStateChanged != null) {  					PlaybackStateChanged (this' PlayState.Paused' _State);  				}  			}  			if (doReturn)  				return result;  		}  	}  	if (stream != 0 && StreamIsPlaying (stream)) {  		int oldStream = stream;  		double oldStreamDuration = GetTotalStreamSeconds (oldStream);  		double oldStreamElapsedSeconds = GetStreamElapsedTime (oldStream);  		double crossFadeSeconds = _CrossFadeIntervalMS;  		if (crossFadeSeconds > 0)  			crossFadeSeconds = crossFadeSeconds / 1000.0;  		if ((oldStreamDuration - (oldStreamElapsedSeconds + crossFadeSeconds) > -1)) {  			FadeOutStop (oldStream);  		} else {  			Bass.BASS_ChannelStop (oldStream);  		}  		doFade = true;  		stream = GetNextStream ();  		if (stream != 0 || StreamIsPlaying (stream)) {  			FreeStream (stream);  		}  	}  	if (stream != 0) {  		if (!Stopped)// Check if stopped already to avoid that Stop() is called two or three times  		 {  			Stop (true);  		}  		FreeStream (stream);  	}  	_State = PlayState.Init;  	// Make sure Bass is ready to begin playing again  	Bass.BASS_Start ();  	if (filePath != string.Empty) {  		// Turn on parsing of ASX files  		Bass.BASS_SetConfig (BASSConfig.BASS_CONFIG_NET_PLAYLIST' 2);  		BASSFlag streamFlags;  		if (_Mixing) {  			streamFlags = BASSFlag.BASS_STREAM_DECODE | BASSFlag.BASS_SAMPLE_FLOAT;  			// Don't use the BASS_STREAM_AUTOFREE flag on a decoding channel. will produce a BASS_ERROR_NOTAVAIL  		} else {  			streamFlags = BASSFlag.BASS_SAMPLE_FLOAT | BASSFlag.BASS_STREAM_AUTOFREE;  		}  		FilePath = filePath;  		_isRadio = false;  		if (filePath.ToLower ().Contains (@"http://") || filePath.ToLower ().Contains (@"https://") || filePath.ToLower ().StartsWith ("mms") || filePath.ToLower ().StartsWith ("rtsp")) {  			_isRadio = true;  			// We're playing Internet Radio Stream  			stream = Bass.BASS_StreamCreateURL (filePath' 0' streamFlags' DownloadProcDelegate' IntPtr.Zero);  			if (stream != 0) {  				// Get the Tags and set the Meta Tag SyncProc  				_tagInfo = new TAG_INFO (filePath);  				SetStreamTags (stream);  				if (BassTags.BASS_TAG_GetFromURL (stream' _tagInfo)) {  					GetMetaTags ();  				}  				Bass.BASS_ChannelSetSync (stream' BASSSync.BASS_SYNC_META' 0' MetaTagSyncProcDelegate' IntPtr.Zero);  			}  			Log.Debug ("BASSAudio: Webstream found - trying to fetch stream {0}"' Convert.ToString (stream));  		} else if (IsMODFile (filePath)) {  			// Load a Mod file  			stream = Bass.BASS_MusicLoad (filePath' 0' 0' BASSFlag.BASS_SAMPLE_SOFTWARE | BASSFlag.BASS_SAMPLE_FLOAT | BASSFlag.BASS_MUSIC_AUTOFREE | BASSFlag.BASS_MUSIC_PRESCAN | BASSFlag.BASS_MUSIC_RAMP' 0);  		} else {  			// Create a Standard Stream  			stream = Bass.BASS_StreamCreateFile (filePath' 0' 0' streamFlags);  		}  		// Is Mixing' then we create a mixer channel and assign the stream to the mixer  		if ((_Mixing) && stream != 0) {  			// Do an upmix of the stereo according to the matrix.   			// Now Plugin the stream to the mixer and set the mixing matrix  			BassMix.BASS_Mixer_StreamAddChannel (_mixer' stream' BASSFlag.BASS_MIXER_MATRIX | BASSFlag.BASS_STREAM_AUTOFREE | BASSFlag.BASS_MIXER_NORAMPIN | BASSFlag.BASS_MIXER_BUFFER);  			BassMix.BASS_Mixer_ChannelSetMatrix (stream' _MixingMatrix);  		}  		Streams [CurrentStreamIndex] = stream;  		if (stream != 0) {  			// When we have a MIDI file' we need to assign the sound banks to the stream  			if (IsMidiFile (filePath) && soundFonts != null) {  				BassMidi.BASS_MIDI_StreamSetFonts (stream' soundFonts' soundFonts.Length);  			}  			StreamEventSyncHandles [CurrentStreamIndex] = RegisterPlaybackEvents (stream' CurrentStreamIndex);  			if (doFade && _CrossFadeIntervalMS > 0) {  				_CrossFading = true;  				// Reduce the stream volume to zero so we can fade it in...  				Bass.BASS_ChannelSetAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 0);  				// Fade in from 0 to 1 over the _CrossFadeIntervalMS duration   				Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1' _CrossFadeIntervalMS);  			}  		} else {  			BASSError error = Bass.BASS_ErrorGetCode ();  			Log.Error ("BASS: Unable to create Stream for {0}.  Reason: {1}."' filePath' Enum.GetName (typeof(BASSError)' error));  			throw new BassStreamException ("Bass Error: Unable to create stream - " + Enum.GetName (typeof(BASSError)' error)' error);  		}  		bool playbackStarted = false;  		if (_Mixing) {  			if (Bass.BASS_ChannelIsActive (_mixer) == BASSActive.BASS_ACTIVE_PLAYING) {  				playbackStarted = true;  			} else {  				playbackStarted = Bass.BASS_ChannelPlay (_mixer' false);  			}  		} else {  			playbackStarted = Bass.BASS_ChannelPlay (stream' false);  		}  		if (stream != 0 && playbackStarted) {  			Log.Info ("BASS: playback started");  			PlayState oldState = _State;  			_State = PlayState.Playing;  			UpdateTimer.Start ();  			if (oldState != _State && PlaybackStateChanged != null) {  				PlaybackStateChanged (this' oldState' _State);  			}  			if (PlaybackStart != null) {  				PlaybackStart (this' GetTotalStreamSeconds (stream));  			}  		} else {  			BASSError error = Bass.BASS_ErrorGetCode ();  			Log.Error ("BASS: Unable to play {0}.  Reason: {1}."' filePath' Enum.GetName (typeof(BASSError)' error));  			throw new BassStreamException ("Bass Error: Unable to play - " + Enum.GetName (typeof(BASSError)' error)' error);  			// Release all of the sync proc handles  			if (StreamEventSyncHandles [CurrentStreamIndex] != null) {  				UnregisterPlaybackEvents (stream' StreamEventSyncHandles [CurrentStreamIndex]);  			}  			result = false;  		}  	}  } catch (Exception ex) {  	result = false;  	Log.Error ("BASS: Play caused an exception:  {0}."' ex);  	if (ex.GetType () == typeof(BassStreamException))  		throw;  	throw new BassException ("BASS: Play caused an exception: " + ex);  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Play,The following statement contains a magic number: try {  	if (Paused || (filePath.ToLower ().CompareTo (FilePath.ToLower ()) == 0 && stream != 0)) {  		bool doReturn = !Paused;  		// Selected file is equal to current stream  		if (_State == PlayState.Paused) {  			// Resume paused stream  			if (_SoftStop) {  				Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1' 500);  			} else {  				Bass.BASS_ChannelSetAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1);  			}  			result = Bass.BASS_Start ();  			if (result) {  				_State = PlayState.Playing;  				UpdateTimer.Start ();  				if (PlaybackStateChanged != null) {  					PlaybackStateChanged (this' PlayState.Paused' _State);  				}  			}  			if (doReturn)  				return result;  		}  	}  	if (stream != 0 && StreamIsPlaying (stream)) {  		int oldStream = stream;  		double oldStreamDuration = GetTotalStreamSeconds (oldStream);  		double oldStreamElapsedSeconds = GetStreamElapsedTime (oldStream);  		double crossFadeSeconds = _CrossFadeIntervalMS;  		if (crossFadeSeconds > 0)  			crossFadeSeconds = crossFadeSeconds / 1000.0;  		if ((oldStreamDuration - (oldStreamElapsedSeconds + crossFadeSeconds) > -1)) {  			FadeOutStop (oldStream);  		} else {  			Bass.BASS_ChannelStop (oldStream);  		}  		doFade = true;  		stream = GetNextStream ();  		if (stream != 0 || StreamIsPlaying (stream)) {  			FreeStream (stream);  		}  	}  	if (stream != 0) {  		if (!Stopped)// Check if stopped already to avoid that Stop() is called two or three times  		 {  			Stop (true);  		}  		FreeStream (stream);  	}  	_State = PlayState.Init;  	// Make sure Bass is ready to begin playing again  	Bass.BASS_Start ();  	if (filePath != string.Empty) {  		// Turn on parsing of ASX files  		Bass.BASS_SetConfig (BASSConfig.BASS_CONFIG_NET_PLAYLIST' 2);  		BASSFlag streamFlags;  		if (_Mixing) {  			streamFlags = BASSFlag.BASS_STREAM_DECODE | BASSFlag.BASS_SAMPLE_FLOAT;  			// Don't use the BASS_STREAM_AUTOFREE flag on a decoding channel. will produce a BASS_ERROR_NOTAVAIL  		} else {  			streamFlags = BASSFlag.BASS_SAMPLE_FLOAT | BASSFlag.BASS_STREAM_AUTOFREE;  		}  		FilePath = filePath;  		_isRadio = false;  		if (filePath.ToLower ().Contains (@"http://") || filePath.ToLower ().Contains (@"https://") || filePath.ToLower ().StartsWith ("mms") || filePath.ToLower ().StartsWith ("rtsp")) {  			_isRadio = true;  			// We're playing Internet Radio Stream  			stream = Bass.BASS_StreamCreateURL (filePath' 0' streamFlags' DownloadProcDelegate' IntPtr.Zero);  			if (stream != 0) {  				// Get the Tags and set the Meta Tag SyncProc  				_tagInfo = new TAG_INFO (filePath);  				SetStreamTags (stream);  				if (BassTags.BASS_TAG_GetFromURL (stream' _tagInfo)) {  					GetMetaTags ();  				}  				Bass.BASS_ChannelSetSync (stream' BASSSync.BASS_SYNC_META' 0' MetaTagSyncProcDelegate' IntPtr.Zero);  			}  			Log.Debug ("BASSAudio: Webstream found - trying to fetch stream {0}"' Convert.ToString (stream));  		} else if (IsMODFile (filePath)) {  			// Load a Mod file  			stream = Bass.BASS_MusicLoad (filePath' 0' 0' BASSFlag.BASS_SAMPLE_SOFTWARE | BASSFlag.BASS_SAMPLE_FLOAT | BASSFlag.BASS_MUSIC_AUTOFREE | BASSFlag.BASS_MUSIC_PRESCAN | BASSFlag.BASS_MUSIC_RAMP' 0);  		} else {  			// Create a Standard Stream  			stream = Bass.BASS_StreamCreateFile (filePath' 0' 0' streamFlags);  		}  		// Is Mixing' then we create a mixer channel and assign the stream to the mixer  		if ((_Mixing) && stream != 0) {  			// Do an upmix of the stereo according to the matrix.   			// Now Plugin the stream to the mixer and set the mixing matrix  			BassMix.BASS_Mixer_StreamAddChannel (_mixer' stream' BASSFlag.BASS_MIXER_MATRIX | BASSFlag.BASS_STREAM_AUTOFREE | BASSFlag.BASS_MIXER_NORAMPIN | BASSFlag.BASS_MIXER_BUFFER);  			BassMix.BASS_Mixer_ChannelSetMatrix (stream' _MixingMatrix);  		}  		Streams [CurrentStreamIndex] = stream;  		if (stream != 0) {  			// When we have a MIDI file' we need to assign the sound banks to the stream  			if (IsMidiFile (filePath) && soundFonts != null) {  				BassMidi.BASS_MIDI_StreamSetFonts (stream' soundFonts' soundFonts.Length);  			}  			StreamEventSyncHandles [CurrentStreamIndex] = RegisterPlaybackEvents (stream' CurrentStreamIndex);  			if (doFade && _CrossFadeIntervalMS > 0) {  				_CrossFading = true;  				// Reduce the stream volume to zero so we can fade it in...  				Bass.BASS_ChannelSetAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 0);  				// Fade in from 0 to 1 over the _CrossFadeIntervalMS duration   				Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1' _CrossFadeIntervalMS);  			}  		} else {  			BASSError error = Bass.BASS_ErrorGetCode ();  			Log.Error ("BASS: Unable to create Stream for {0}.  Reason: {1}."' filePath' Enum.GetName (typeof(BASSError)' error));  			throw new BassStreamException ("Bass Error: Unable to create stream - " + Enum.GetName (typeof(BASSError)' error)' error);  		}  		bool playbackStarted = false;  		if (_Mixing) {  			if (Bass.BASS_ChannelIsActive (_mixer) == BASSActive.BASS_ACTIVE_PLAYING) {  				playbackStarted = true;  			} else {  				playbackStarted = Bass.BASS_ChannelPlay (_mixer' false);  			}  		} else {  			playbackStarted = Bass.BASS_ChannelPlay (stream' false);  		}  		if (stream != 0 && playbackStarted) {  			Log.Info ("BASS: playback started");  			PlayState oldState = _State;  			_State = PlayState.Playing;  			UpdateTimer.Start ();  			if (oldState != _State && PlaybackStateChanged != null) {  				PlaybackStateChanged (this' oldState' _State);  			}  			if (PlaybackStart != null) {  				PlaybackStart (this' GetTotalStreamSeconds (stream));  			}  		} else {  			BASSError error = Bass.BASS_ErrorGetCode ();  			Log.Error ("BASS: Unable to play {0}.  Reason: {1}."' filePath' Enum.GetName (typeof(BASSError)' error));  			throw new BassStreamException ("Bass Error: Unable to play - " + Enum.GetName (typeof(BASSError)' error)' error);  			// Release all of the sync proc handles  			if (StreamEventSyncHandles [CurrentStreamIndex] != null) {  				UnregisterPlaybackEvents (stream' StreamEventSyncHandles [CurrentStreamIndex]);  			}  			result = false;  		}  	}  } catch (Exception ex) {  	result = false;  	Log.Error ("BASS: Play caused an exception:  {0}."' ex);  	if (ex.GetType () == typeof(BassStreamException))  		throw;  	throw new BassException ("BASS: Play caused an exception: " + ex);  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Play,The following statement contains a magic number: try {  	if (Paused || (filePath.ToLower ().CompareTo (FilePath.ToLower ()) == 0 && stream != 0)) {  		bool doReturn = !Paused;  		// Selected file is equal to current stream  		if (_State == PlayState.Paused) {  			// Resume paused stream  			if (_SoftStop) {  				Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1' 500);  			} else {  				Bass.BASS_ChannelSetAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1);  			}  			result = Bass.BASS_Start ();  			if (result) {  				_State = PlayState.Playing;  				UpdateTimer.Start ();  				if (PlaybackStateChanged != null) {  					PlaybackStateChanged (this' PlayState.Paused' _State);  				}  			}  			if (doReturn)  				return result;  		}  	}  	if (stream != 0 && StreamIsPlaying (stream)) {  		int oldStream = stream;  		double oldStreamDuration = GetTotalStreamSeconds (oldStream);  		double oldStreamElapsedSeconds = GetStreamElapsedTime (oldStream);  		double crossFadeSeconds = _CrossFadeIntervalMS;  		if (crossFadeSeconds > 0)  			crossFadeSeconds = crossFadeSeconds / 1000.0;  		if ((oldStreamDuration - (oldStreamElapsedSeconds + crossFadeSeconds) > -1)) {  			FadeOutStop (oldStream);  		} else {  			Bass.BASS_ChannelStop (oldStream);  		}  		doFade = true;  		stream = GetNextStream ();  		if (stream != 0 || StreamIsPlaying (stream)) {  			FreeStream (stream);  		}  	}  	if (stream != 0) {  		if (!Stopped)// Check if stopped already to avoid that Stop() is called two or three times  		 {  			Stop (true);  		}  		FreeStream (stream);  	}  	_State = PlayState.Init;  	// Make sure Bass is ready to begin playing again  	Bass.BASS_Start ();  	if (filePath != string.Empty) {  		// Turn on parsing of ASX files  		Bass.BASS_SetConfig (BASSConfig.BASS_CONFIG_NET_PLAYLIST' 2);  		BASSFlag streamFlags;  		if (_Mixing) {  			streamFlags = BASSFlag.BASS_STREAM_DECODE | BASSFlag.BASS_SAMPLE_FLOAT;  			// Don't use the BASS_STREAM_AUTOFREE flag on a decoding channel. will produce a BASS_ERROR_NOTAVAIL  		} else {  			streamFlags = BASSFlag.BASS_SAMPLE_FLOAT | BASSFlag.BASS_STREAM_AUTOFREE;  		}  		FilePath = filePath;  		_isRadio = false;  		if (filePath.ToLower ().Contains (@"http://") || filePath.ToLower ().Contains (@"https://") || filePath.ToLower ().StartsWith ("mms") || filePath.ToLower ().StartsWith ("rtsp")) {  			_isRadio = true;  			// We're playing Internet Radio Stream  			stream = Bass.BASS_StreamCreateURL (filePath' 0' streamFlags' DownloadProcDelegate' IntPtr.Zero);  			if (stream != 0) {  				// Get the Tags and set the Meta Tag SyncProc  				_tagInfo = new TAG_INFO (filePath);  				SetStreamTags (stream);  				if (BassTags.BASS_TAG_GetFromURL (stream' _tagInfo)) {  					GetMetaTags ();  				}  				Bass.BASS_ChannelSetSync (stream' BASSSync.BASS_SYNC_META' 0' MetaTagSyncProcDelegate' IntPtr.Zero);  			}  			Log.Debug ("BASSAudio: Webstream found - trying to fetch stream {0}"' Convert.ToString (stream));  		} else if (IsMODFile (filePath)) {  			// Load a Mod file  			stream = Bass.BASS_MusicLoad (filePath' 0' 0' BASSFlag.BASS_SAMPLE_SOFTWARE | BASSFlag.BASS_SAMPLE_FLOAT | BASSFlag.BASS_MUSIC_AUTOFREE | BASSFlag.BASS_MUSIC_PRESCAN | BASSFlag.BASS_MUSIC_RAMP' 0);  		} else {  			// Create a Standard Stream  			stream = Bass.BASS_StreamCreateFile (filePath' 0' 0' streamFlags);  		}  		// Is Mixing' then we create a mixer channel and assign the stream to the mixer  		if ((_Mixing) && stream != 0) {  			// Do an upmix of the stereo according to the matrix.   			// Now Plugin the stream to the mixer and set the mixing matrix  			BassMix.BASS_Mixer_StreamAddChannel (_mixer' stream' BASSFlag.BASS_MIXER_MATRIX | BASSFlag.BASS_STREAM_AUTOFREE | BASSFlag.BASS_MIXER_NORAMPIN | BASSFlag.BASS_MIXER_BUFFER);  			BassMix.BASS_Mixer_ChannelSetMatrix (stream' _MixingMatrix);  		}  		Streams [CurrentStreamIndex] = stream;  		if (stream != 0) {  			// When we have a MIDI file' we need to assign the sound banks to the stream  			if (IsMidiFile (filePath) && soundFonts != null) {  				BassMidi.BASS_MIDI_StreamSetFonts (stream' soundFonts' soundFonts.Length);  			}  			StreamEventSyncHandles [CurrentStreamIndex] = RegisterPlaybackEvents (stream' CurrentStreamIndex);  			if (doFade && _CrossFadeIntervalMS > 0) {  				_CrossFading = true;  				// Reduce the stream volume to zero so we can fade it in...  				Bass.BASS_ChannelSetAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 0);  				// Fade in from 0 to 1 over the _CrossFadeIntervalMS duration   				Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1' _CrossFadeIntervalMS);  			}  		} else {  			BASSError error = Bass.BASS_ErrorGetCode ();  			Log.Error ("BASS: Unable to create Stream for {0}.  Reason: {1}."' filePath' Enum.GetName (typeof(BASSError)' error));  			throw new BassStreamException ("Bass Error: Unable to create stream - " + Enum.GetName (typeof(BASSError)' error)' error);  		}  		bool playbackStarted = false;  		if (_Mixing) {  			if (Bass.BASS_ChannelIsActive (_mixer) == BASSActive.BASS_ACTIVE_PLAYING) {  				playbackStarted = true;  			} else {  				playbackStarted = Bass.BASS_ChannelPlay (_mixer' false);  			}  		} else {  			playbackStarted = Bass.BASS_ChannelPlay (stream' false);  		}  		if (stream != 0 && playbackStarted) {  			Log.Info ("BASS: playback started");  			PlayState oldState = _State;  			_State = PlayState.Playing;  			UpdateTimer.Start ();  			if (oldState != _State && PlaybackStateChanged != null) {  				PlaybackStateChanged (this' oldState' _State);  			}  			if (PlaybackStart != null) {  				PlaybackStart (this' GetTotalStreamSeconds (stream));  			}  		} else {  			BASSError error = Bass.BASS_ErrorGetCode ();  			Log.Error ("BASS: Unable to play {0}.  Reason: {1}."' filePath' Enum.GetName (typeof(BASSError)' error));  			throw new BassStreamException ("Bass Error: Unable to play - " + Enum.GetName (typeof(BASSError)' error)' error);  			// Release all of the sync proc handles  			if (StreamEventSyncHandles [CurrentStreamIndex] != null) {  				UnregisterPlaybackEvents (stream' StreamEventSyncHandles [CurrentStreamIndex]);  			}  			result = false;  		}  	}  } catch (Exception ex) {  	result = false;  	Log.Error ("BASS: Play caused an exception:  {0}."' ex);  	if (ex.GetType () == typeof(BassStreamException))  		throw;  	throw new BassException ("BASS: Play caused an exception: " + ex);  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Play,The following statement contains a magic number: if (Paused || (filePath.ToLower ().CompareTo (FilePath.ToLower ()) == 0 && stream != 0)) {  	bool doReturn = !Paused;  	// Selected file is equal to current stream  	if (_State == PlayState.Paused) {  		// Resume paused stream  		if (_SoftStop) {  			Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1' 500);  		} else {  			Bass.BASS_ChannelSetAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1);  		}  		result = Bass.BASS_Start ();  		if (result) {  			_State = PlayState.Playing;  			UpdateTimer.Start ();  			if (PlaybackStateChanged != null) {  				PlaybackStateChanged (this' PlayState.Paused' _State);  			}  		}  		if (doReturn)  			return result;  	}  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Play,The following statement contains a magic number: if (_State == PlayState.Paused) {  	// Resume paused stream  	if (_SoftStop) {  		Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1' 500);  	} else {  		Bass.BASS_ChannelSetAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1);  	}  	result = Bass.BASS_Start ();  	if (result) {  		_State = PlayState.Playing;  		UpdateTimer.Start ();  		if (PlaybackStateChanged != null) {  			PlaybackStateChanged (this' PlayState.Paused' _State);  		}  	}  	if (doReturn)  		return result;  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Play,The following statement contains a magic number: if (_SoftStop) {  	Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1' 500);  } else {  	Bass.BASS_ChannelSetAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1);  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Play,The following statement contains a magic number: Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1' 500);  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Play,The following statement contains a magic number: if (stream != 0 && StreamIsPlaying (stream)) {  	int oldStream = stream;  	double oldStreamDuration = GetTotalStreamSeconds (oldStream);  	double oldStreamElapsedSeconds = GetStreamElapsedTime (oldStream);  	double crossFadeSeconds = _CrossFadeIntervalMS;  	if (crossFadeSeconds > 0)  		crossFadeSeconds = crossFadeSeconds / 1000.0;  	if ((oldStreamDuration - (oldStreamElapsedSeconds + crossFadeSeconds) > -1)) {  		FadeOutStop (oldStream);  	} else {  		Bass.BASS_ChannelStop (oldStream);  	}  	doFade = true;  	stream = GetNextStream ();  	if (stream != 0 || StreamIsPlaying (stream)) {  		FreeStream (stream);  	}  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Play,The following statement contains a magic number: if (crossFadeSeconds > 0)  	crossFadeSeconds = crossFadeSeconds / 1000.0;  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Play,The following statement contains a magic number: crossFadeSeconds = crossFadeSeconds / 1000.0;  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Play,The following statement contains a magic number: if (filePath != string.Empty) {  	// Turn on parsing of ASX files  	Bass.BASS_SetConfig (BASSConfig.BASS_CONFIG_NET_PLAYLIST' 2);  	BASSFlag streamFlags;  	if (_Mixing) {  		streamFlags = BASSFlag.BASS_STREAM_DECODE | BASSFlag.BASS_SAMPLE_FLOAT;  		// Don't use the BASS_STREAM_AUTOFREE flag on a decoding channel. will produce a BASS_ERROR_NOTAVAIL  	} else {  		streamFlags = BASSFlag.BASS_SAMPLE_FLOAT | BASSFlag.BASS_STREAM_AUTOFREE;  	}  	FilePath = filePath;  	_isRadio = false;  	if (filePath.ToLower ().Contains (@"http://") || filePath.ToLower ().Contains (@"https://") || filePath.ToLower ().StartsWith ("mms") || filePath.ToLower ().StartsWith ("rtsp")) {  		_isRadio = true;  		// We're playing Internet Radio Stream  		stream = Bass.BASS_StreamCreateURL (filePath' 0' streamFlags' DownloadProcDelegate' IntPtr.Zero);  		if (stream != 0) {  			// Get the Tags and set the Meta Tag SyncProc  			_tagInfo = new TAG_INFO (filePath);  			SetStreamTags (stream);  			if (BassTags.BASS_TAG_GetFromURL (stream' _tagInfo)) {  				GetMetaTags ();  			}  			Bass.BASS_ChannelSetSync (stream' BASSSync.BASS_SYNC_META' 0' MetaTagSyncProcDelegate' IntPtr.Zero);  		}  		Log.Debug ("BASSAudio: Webstream found - trying to fetch stream {0}"' Convert.ToString (stream));  	} else if (IsMODFile (filePath)) {  		// Load a Mod file  		stream = Bass.BASS_MusicLoad (filePath' 0' 0' BASSFlag.BASS_SAMPLE_SOFTWARE | BASSFlag.BASS_SAMPLE_FLOAT | BASSFlag.BASS_MUSIC_AUTOFREE | BASSFlag.BASS_MUSIC_PRESCAN | BASSFlag.BASS_MUSIC_RAMP' 0);  	} else {  		// Create a Standard Stream  		stream = Bass.BASS_StreamCreateFile (filePath' 0' 0' streamFlags);  	}  	// Is Mixing' then we create a mixer channel and assign the stream to the mixer  	if ((_Mixing) && stream != 0) {  		// Do an upmix of the stereo according to the matrix.   		// Now Plugin the stream to the mixer and set the mixing matrix  		BassMix.BASS_Mixer_StreamAddChannel (_mixer' stream' BASSFlag.BASS_MIXER_MATRIX | BASSFlag.BASS_STREAM_AUTOFREE | BASSFlag.BASS_MIXER_NORAMPIN | BASSFlag.BASS_MIXER_BUFFER);  		BassMix.BASS_Mixer_ChannelSetMatrix (stream' _MixingMatrix);  	}  	Streams [CurrentStreamIndex] = stream;  	if (stream != 0) {  		// When we have a MIDI file' we need to assign the sound banks to the stream  		if (IsMidiFile (filePath) && soundFonts != null) {  			BassMidi.BASS_MIDI_StreamSetFonts (stream' soundFonts' soundFonts.Length);  		}  		StreamEventSyncHandles [CurrentStreamIndex] = RegisterPlaybackEvents (stream' CurrentStreamIndex);  		if (doFade && _CrossFadeIntervalMS > 0) {  			_CrossFading = true;  			// Reduce the stream volume to zero so we can fade it in...  			Bass.BASS_ChannelSetAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 0);  			// Fade in from 0 to 1 over the _CrossFadeIntervalMS duration   			Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1' _CrossFadeIntervalMS);  		}  	} else {  		BASSError error = Bass.BASS_ErrorGetCode ();  		Log.Error ("BASS: Unable to create Stream for {0}.  Reason: {1}."' filePath' Enum.GetName (typeof(BASSError)' error));  		throw new BassStreamException ("Bass Error: Unable to create stream - " + Enum.GetName (typeof(BASSError)' error)' error);  	}  	bool playbackStarted = false;  	if (_Mixing) {  		if (Bass.BASS_ChannelIsActive (_mixer) == BASSActive.BASS_ACTIVE_PLAYING) {  			playbackStarted = true;  		} else {  			playbackStarted = Bass.BASS_ChannelPlay (_mixer' false);  		}  	} else {  		playbackStarted = Bass.BASS_ChannelPlay (stream' false);  	}  	if (stream != 0 && playbackStarted) {  		Log.Info ("BASS: playback started");  		PlayState oldState = _State;  		_State = PlayState.Playing;  		UpdateTimer.Start ();  		if (oldState != _State && PlaybackStateChanged != null) {  			PlaybackStateChanged (this' oldState' _State);  		}  		if (PlaybackStart != null) {  			PlaybackStart (this' GetTotalStreamSeconds (stream));  		}  	} else {  		BASSError error = Bass.BASS_ErrorGetCode ();  		Log.Error ("BASS: Unable to play {0}.  Reason: {1}."' filePath' Enum.GetName (typeof(BASSError)' error));  		throw new BassStreamException ("Bass Error: Unable to play - " + Enum.GetName (typeof(BASSError)' error)' error);  		// Release all of the sync proc handles  		if (StreamEventSyncHandles [CurrentStreamIndex] != null) {  			UnregisterPlaybackEvents (stream' StreamEventSyncHandles [CurrentStreamIndex]);  		}  		result = false;  	}  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Play,The following statement contains a magic number: Bass.BASS_SetConfig (BASSConfig.BASS_CONFIG_NET_PLAYLIST' 2);  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,RegisterPlaybackFadeOutEvent,The following statement contains a magic number: if (fadeOutMS > 0)  	fadeOutSeconds = fadeOutMS / 1000.0;  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,RegisterPlaybackFadeOutEvent,The following statement contains a magic number: fadeOutSeconds = fadeOutMS / 1000.0;  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,PlayPause,The following statement contains a magic number: try {  	PlayState oldPlayState = _State;  	if (oldPlayState == PlayState.Ended || oldPlayState == PlayState.Init) {  		return;  	}  	if (oldPlayState == PlayState.Paused) {  		_State = PlayState.Playing;  		if (_SoftStop) {  			// Fade-in over 500ms  			Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1' 500);  			Bass.BASS_Start ();  		} else {  			Bass.BASS_ChannelSetAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1);  			Bass.BASS_Start ();  		}  		UpdateTimer.Start ();  	} else {  		_State = PlayState.Paused;  		UpdateTimer.Stop ();  		if (_SoftStop) {  			// Fade-out over 500ms  			Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 0' 500);  			// Wait until the slide is done  			while (Bass.BASS_ChannelIsSliding (stream' BASSAttribute.BASS_ATTRIB_VOL))  				Thread.Sleep (20);  			Bass.BASS_Pause ();  		} else {  			Bass.BASS_Pause ();  		}  	}  	if (oldPlayState != _State) {  		if (PlaybackStateChanged != null) {  			PlaybackStateChanged (this' oldPlayState' _State);  		}  	}  } catch {  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,PlayPause,The following statement contains a magic number: try {  	PlayState oldPlayState = _State;  	if (oldPlayState == PlayState.Ended || oldPlayState == PlayState.Init) {  		return;  	}  	if (oldPlayState == PlayState.Paused) {  		_State = PlayState.Playing;  		if (_SoftStop) {  			// Fade-in over 500ms  			Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1' 500);  			Bass.BASS_Start ();  		} else {  			Bass.BASS_ChannelSetAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1);  			Bass.BASS_Start ();  		}  		UpdateTimer.Start ();  	} else {  		_State = PlayState.Paused;  		UpdateTimer.Stop ();  		if (_SoftStop) {  			// Fade-out over 500ms  			Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 0' 500);  			// Wait until the slide is done  			while (Bass.BASS_ChannelIsSliding (stream' BASSAttribute.BASS_ATTRIB_VOL))  				Thread.Sleep (20);  			Bass.BASS_Pause ();  		} else {  			Bass.BASS_Pause ();  		}  	}  	if (oldPlayState != _State) {  		if (PlaybackStateChanged != null) {  			PlaybackStateChanged (this' oldPlayState' _State);  		}  	}  } catch {  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,PlayPause,The following statement contains a magic number: try {  	PlayState oldPlayState = _State;  	if (oldPlayState == PlayState.Ended || oldPlayState == PlayState.Init) {  		return;  	}  	if (oldPlayState == PlayState.Paused) {  		_State = PlayState.Playing;  		if (_SoftStop) {  			// Fade-in over 500ms  			Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1' 500);  			Bass.BASS_Start ();  		} else {  			Bass.BASS_ChannelSetAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1);  			Bass.BASS_Start ();  		}  		UpdateTimer.Start ();  	} else {  		_State = PlayState.Paused;  		UpdateTimer.Stop ();  		if (_SoftStop) {  			// Fade-out over 500ms  			Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 0' 500);  			// Wait until the slide is done  			while (Bass.BASS_ChannelIsSliding (stream' BASSAttribute.BASS_ATTRIB_VOL))  				Thread.Sleep (20);  			Bass.BASS_Pause ();  		} else {  			Bass.BASS_Pause ();  		}  	}  	if (oldPlayState != _State) {  		if (PlaybackStateChanged != null) {  			PlaybackStateChanged (this' oldPlayState' _State);  		}  	}  } catch {  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,PlayPause,The following statement contains a magic number: if (oldPlayState == PlayState.Paused) {  	_State = PlayState.Playing;  	if (_SoftStop) {  		// Fade-in over 500ms  		Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1' 500);  		Bass.BASS_Start ();  	} else {  		Bass.BASS_ChannelSetAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1);  		Bass.BASS_Start ();  	}  	UpdateTimer.Start ();  } else {  	_State = PlayState.Paused;  	UpdateTimer.Stop ();  	if (_SoftStop) {  		// Fade-out over 500ms  		Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 0' 500);  		// Wait until the slide is done  		while (Bass.BASS_ChannelIsSliding (stream' BASSAttribute.BASS_ATTRIB_VOL))  			Thread.Sleep (20);  		Bass.BASS_Pause ();  	} else {  		Bass.BASS_Pause ();  	}  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,PlayPause,The following statement contains a magic number: if (oldPlayState == PlayState.Paused) {  	_State = PlayState.Playing;  	if (_SoftStop) {  		// Fade-in over 500ms  		Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1' 500);  		Bass.BASS_Start ();  	} else {  		Bass.BASS_ChannelSetAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1);  		Bass.BASS_Start ();  	}  	UpdateTimer.Start ();  } else {  	_State = PlayState.Paused;  	UpdateTimer.Stop ();  	if (_SoftStop) {  		// Fade-out over 500ms  		Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 0' 500);  		// Wait until the slide is done  		while (Bass.BASS_ChannelIsSliding (stream' BASSAttribute.BASS_ATTRIB_VOL))  			Thread.Sleep (20);  		Bass.BASS_Pause ();  	} else {  		Bass.BASS_Pause ();  	}  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,PlayPause,The following statement contains a magic number: if (oldPlayState == PlayState.Paused) {  	_State = PlayState.Playing;  	if (_SoftStop) {  		// Fade-in over 500ms  		Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1' 500);  		Bass.BASS_Start ();  	} else {  		Bass.BASS_ChannelSetAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1);  		Bass.BASS_Start ();  	}  	UpdateTimer.Start ();  } else {  	_State = PlayState.Paused;  	UpdateTimer.Stop ();  	if (_SoftStop) {  		// Fade-out over 500ms  		Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 0' 500);  		// Wait until the slide is done  		while (Bass.BASS_ChannelIsSliding (stream' BASSAttribute.BASS_ATTRIB_VOL))  			Thread.Sleep (20);  		Bass.BASS_Pause ();  	} else {  		Bass.BASS_Pause ();  	}  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,PlayPause,The following statement contains a magic number: if (_SoftStop) {  	// Fade-in over 500ms  	Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1' 500);  	Bass.BASS_Start ();  } else {  	Bass.BASS_ChannelSetAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1);  	Bass.BASS_Start ();  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,PlayPause,The following statement contains a magic number: Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 1' 500);  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,PlayPause,The following statement contains a magic number: if (_SoftStop) {  	// Fade-out over 500ms  	Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 0' 500);  	// Wait until the slide is done  	while (Bass.BASS_ChannelIsSliding (stream' BASSAttribute.BASS_ATTRIB_VOL))  		Thread.Sleep (20);  	Bass.BASS_Pause ();  } else {  	Bass.BASS_Pause ();  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,PlayPause,The following statement contains a magic number: if (_SoftStop) {  	// Fade-out over 500ms  	Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 0' 500);  	// Wait until the slide is done  	while (Bass.BASS_ChannelIsSliding (stream' BASSAttribute.BASS_ATTRIB_VOL))  		Thread.Sleep (20);  	Bass.BASS_Pause ();  } else {  	Bass.BASS_Pause ();  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,PlayPause,The following statement contains a magic number: Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' 0' 500);  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,PlayPause,The following statement contains a magic number: while (Bass.BASS_ChannelIsSliding (stream' BASSAttribute.BASS_ATTRIB_VOL))  	Thread.Sleep (20);  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,PlayPause,The following statement contains a magic number: Thread.Sleep (20);  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Stop,The following statement contains a magic number: try {  	UpdateTimer.Stop ();  	if (_SoftStop) {  		Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' -1' 500);  		// Wait until the slide is done  		while (Bass.BASS_ChannelIsSliding (stream' BASSAttribute.BASS_ATTRIB_VOL))  			Thread.Sleep (20);  	}  	if (_Mixing) {  		Bass.BASS_ChannelStop (stream);  		BassMix.BASS_Mixer_ChannelRemove (stream);  	} else {  		Bass.BASS_ChannelStop (stream);  	}  	stream = 0;  	if (PlaybackStop != null) {  		PlaybackStop (this);  	}  	HandleSongEnded (true' songSkipped);  } catch (Exception ex) {  	Log.Error ("BASS: Stop command caused an exception - {0}"' ex.Message);  	throw new BassException ("BASS: Stop command caused an exception - }" + ex.Message);  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Stop,The following statement contains a magic number: try {  	UpdateTimer.Stop ();  	if (_SoftStop) {  		Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' -1' 500);  		// Wait until the slide is done  		while (Bass.BASS_ChannelIsSliding (stream' BASSAttribute.BASS_ATTRIB_VOL))  			Thread.Sleep (20);  	}  	if (_Mixing) {  		Bass.BASS_ChannelStop (stream);  		BassMix.BASS_Mixer_ChannelRemove (stream);  	} else {  		Bass.BASS_ChannelStop (stream);  	}  	stream = 0;  	if (PlaybackStop != null) {  		PlaybackStop (this);  	}  	HandleSongEnded (true' songSkipped);  } catch (Exception ex) {  	Log.Error ("BASS: Stop command caused an exception - {0}"' ex.Message);  	throw new BassException ("BASS: Stop command caused an exception - }" + ex.Message);  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Stop,The following statement contains a magic number: if (_SoftStop) {  	Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' -1' 500);  	// Wait until the slide is done  	while (Bass.BASS_ChannelIsSliding (stream' BASSAttribute.BASS_ATTRIB_VOL))  		Thread.Sleep (20);  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Stop,The following statement contains a magic number: if (_SoftStop) {  	Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' -1' 500);  	// Wait until the slide is done  	while (Bass.BASS_ChannelIsSliding (stream' BASSAttribute.BASS_ATTRIB_VOL))  		Thread.Sleep (20);  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Stop,The following statement contains a magic number: Bass.BASS_ChannelSlideAttribute (stream' BASSAttribute.BASS_ATTRIB_VOL' -1' 500);  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Stop,The following statement contains a magic number: while (Bass.BASS_ChannelIsSliding (stream' BASSAttribute.BASS_ATTRIB_VOL))  	Thread.Sleep (20);  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,Stop,The following statement contains a magic number: Thread.Sleep (20);  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,SeekForward,The following statement contains a magic number: try {  	int stream = GetCurrentStream ();  	long len = Bass.BASS_ChannelGetLength (stream);  	// length in bytes  	double totaltime = Bass.BASS_ChannelBytes2Seconds (stream' len);  	// the total time length  	long pos = 0;  	// position in bytes  	if (_Mixing) {  		pos = BassMix.BASS_Mixer_ChannelGetPosition (stream);  	} else {  		pos = Bass.BASS_ChannelGetPosition (stream);  	}  	double timePos = Bass.BASS_ChannelBytes2Seconds (stream' pos);  	double offsetSecs = ms / 1000.0;  	if (timePos + offsetSecs >= totaltime) {  		return false;  	}  	if (_Mixing) {  		BassMix.BASS_Mixer_ChannelSetPosition (stream' Bass.BASS_ChannelSeconds2Bytes (stream' timePos + offsetSecs));  		// the elapsed time length  	} else  		Bass.BASS_ChannelSetPosition (stream' timePos + offsetSecs);  	// the elapsed time length  } catch {  	result = false;  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,SeekReverse,The following statement contains a magic number: try {  	//long len = Bass.BASS_ChannelGetLength(stream); // length in bytes  	long pos = 0;  	// position in bytes  	if (_Mixing) {  		pos = BassMix.BASS_Mixer_ChannelGetPosition (stream);  	} else {  		pos = Bass.BASS_ChannelGetPosition (stream);  	}  	double timePos = Bass.BASS_ChannelBytes2Seconds (stream' pos);  	double offsetSecs = ms / 1000.0;  	if (timePos - offsetSecs <= 0) {  		return false;  	}  	if (_Mixing) {  		BassMix.BASS_Mixer_ChannelSetPosition (stream' Bass.BASS_ChannelSeconds2Bytes (stream' timePos - offsetSecs));  		// the elapsed time length  	} else  		Bass.BASS_ChannelSetPosition (stream' timePos - offsetSecs);  	// the elapsed time length  } catch {  	result = false;  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,SeekAsolutePercentage,The following statement contains a magic number: if (_State != PlayState.Init) {  	if (iPercentage < 0) {  		iPercentage = 0;  	}  	if (iPercentage >= 100) {  		iPercentage = 100;  	}  	if (iPercentage == 0) {  		SeekToTimePosition (0);  	} else {  		SeekToTimePosition ((int)(Duration * (iPercentage / 100d)));  	}  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,SeekAsolutePercentage,The following statement contains a magic number: if (_State != PlayState.Init) {  	if (iPercentage < 0) {  		iPercentage = 0;  	}  	if (iPercentage >= 100) {  		iPercentage = 100;  	}  	if (iPercentage == 0) {  		SeekToTimePosition (0);  	} else {  		SeekToTimePosition ((int)(Duration * (iPercentage / 100d)));  	}  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,SeekAsolutePercentage,The following statement contains a magic number: if (iPercentage >= 100) {  	iPercentage = 100;  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,SeekAsolutePercentage,The following statement contains a magic number: if (iPercentage >= 100) {  	iPercentage = 100;  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,SeekAsolutePercentage,The following statement contains a magic number: iPercentage = 100;  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,RMS,The following statement contains a magic number: dbLeft = Utils.LevelToDB (peakL' 65535);  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,RMS,The following statement contains a magic number: dbRight = Utils.LevelToDB (peakR' 65535);  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,ChangeOutputDevice,The following statement contains a magic number: if (!info.IsInitialized) {  	Log.Info ("BASS: Initializing new device ID " + newDeviceId);  	initOK = (Bass.BASS_Init (newDeviceId' 44100' BASSInit.BASS_DEVICE_DEFAULT | BASSInit.BASS_DEVICE_LATENCY' IntPtr.Zero));  	if (!initOK) {  		BASSError error = Bass.BASS_ErrorGetCode ();  		throw new BassException ("Cannot initialize output device [" + newOutputDevice + "]' error is [" + Enum.GetName (typeof(BASSError)' error) + "]");  	}  }  
Magic Number,BassPlayer,BassAudioEngine,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\BassPlayer.cs,ChangeOutputDevice,The following statement contains a magic number: initOK = (Bass.BASS_Init (newDeviceId' 44100' BASSInit.BASS_DEVICE_DEFAULT | BASSInit.BASS_DEVICE_LATENCY' IntPtr.Zero));  
Magic Number,BassPlayer,StreamCopy,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\StreamCopy.cs,OnStarted,The following statement contains a magic number: switch (channelBitwidth) {  case 0x20:  	_streamFlags &= ~BASSFlag.BASS_SAMPLE_8BITS;  	_streamFlags |= BASSFlag.BASS_SAMPLE_FLOAT;  	channelBitwidth = 4;  	break;  case 8:  	_streamFlags &= ~BASSFlag.BASS_SAMPLE_FLOAT;  	_streamFlags |= BASSFlag.BASS_SAMPLE_8BITS;  	channelBitwidth = 1;  	break;  default:  	_streamFlags &= ~BASSFlag.BASS_SAMPLE_FLOAT;  	_streamFlags &= ~BASSFlag.BASS_SAMPLE_8BITS;  	channelBitwidth = 2;  	break;  }  
Magic Number,BassPlayer,StreamCopy,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\StreamCopy.cs,OnStarted,The following statement contains a magic number: switch (channelBitwidth) {  case 0x20:  	_streamFlags &= ~BASSFlag.BASS_SAMPLE_8BITS;  	_streamFlags |= BASSFlag.BASS_SAMPLE_FLOAT;  	channelBitwidth = 4;  	break;  case 8:  	_streamFlags &= ~BASSFlag.BASS_SAMPLE_FLOAT;  	_streamFlags |= BASSFlag.BASS_SAMPLE_8BITS;  	channelBitwidth = 1;  	break;  default:  	_streamFlags &= ~BASSFlag.BASS_SAMPLE_FLOAT;  	_streamFlags &= ~BASSFlag.BASS_SAMPLE_8BITS;  	channelBitwidth = 2;  	break;  }  
Magic Number,BassPlayer,StreamCopy,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\StreamCopy.cs,OnStarted,The following statement contains a magic number: switch (channelBitwidth) {  case 0x20:  	_streamFlags &= ~BASSFlag.BASS_SAMPLE_8BITS;  	_streamFlags |= BASSFlag.BASS_SAMPLE_FLOAT;  	channelBitwidth = 4;  	break;  case 8:  	_streamFlags &= ~BASSFlag.BASS_SAMPLE_FLOAT;  	_streamFlags |= BASSFlag.BASS_SAMPLE_8BITS;  	channelBitwidth = 1;  	break;  default:  	_streamFlags &= ~BASSFlag.BASS_SAMPLE_FLOAT;  	_streamFlags &= ~BASSFlag.BASS_SAMPLE_8BITS;  	channelBitwidth = 2;  	break;  }  
Magic Number,BassPlayer,StreamCopy,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\StreamCopy.cs,OnStarted,The following statement contains a magic number: channelBitwidth = 4;  
Magic Number,BassPlayer,StreamCopy,F:\newReposMay17\adammhaile_Elpis\Libs\BassPlayer\StreamCopy.cs,OnStarted,The following statement contains a magic number: channelBitwidth = 2;  
