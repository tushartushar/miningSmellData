Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Util,MapConfig,C:\repos\adammhaile_Elpis\Libs\Util\MapConfig.cs,LoadConfig,Cyclomatic complexity of the method is 11
Complex Method,NDesk.Options,Option,C:\repos\adammhaile_Elpis\Libs\Util\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 9
Complex Method,NDesk.Options,OptionSet,C:\repos\adammhaile_Elpis\Libs\Util\Options.cs,WriteOptionPrototype,Cyclomatic complexity of the method is 8
Long Parameter List,NDesk.Options,OptionSet,C:\repos\adammhaile_Elpis\Libs\Util\Options.cs,GetOptionParts,The method has 5 parameters. Parameters: argument' flag' name' sep' value
Long Statement,Util,Errors,C:\repos\adammhaile_Elpis\Libs\Util\Errors.cs,GetErrorMessage,The length of the statement  "                case ErrorCodes.INSUFFICIENT_CONNECTIVITY: return "INSUFFICIENT_CONNECTIVITY. Possibly invalid sync time. Try logging in again' and check for client updates."; " is 159.
Long Statement,Util,Errors,C:\repos\adammhaile_Elpis\Libs\Util\Errors.cs,GetErrorMessage,The length of the statement  "                case ErrorCodes.LISTENER_NOT_AUTHORIZED: return "Your subscription has lapsed. Please visit www.pandora.com to confirm account status."; " is 136.
Long Statement,Util,Errors,C:\repos\adammhaile_Elpis\Libs\Util\Errors.cs,GetErrorMessage,The length of the statement  "                case ErrorCodes.ERROR_RPC: return "Error communicating with the server. \r\nTry again' check your connection or try restarting."; " is 129.
Long Statement,Util,Errors,C:\repos\adammhaile_Elpis\Libs\Util\Errors.cs,GetErrorMessage,The length of the statement  "                case ErrorCodes.CONFIG_LOAD_ERROR: return @"Error loading Elpis configuration. Try navigating to %AppData%\Elpis\ and deleting ""elpis.config"""; " is 145.
Long Statement,Util,Errors,C:\repos\adammhaile_Elpis\Libs\Util\Errors.cs,GetErrorMessage,The length of the statement  "                case ErrorCodes.ENGINE_INIT_ERROR: return "Error initializing the player engine' Elpis must close. Try restarting the application."; " is 132.
Long Statement,DrWPF.Windows.Data,ObservableDictionary<TKey;TValue>,C:\repos\adammhaile_Elpis\Libs\Util\ObservableDictionary.cs,FireEntryAddedNotifications,The length of the statement  "                OnCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add' new KeyValuePair<TKey' TValue>((TKey)entry.Key' (TValue)entry.Value)' index)); " is 170.
Long Statement,DrWPF.Windows.Data,ObservableDictionary<TKey;TValue>,C:\repos\adammhaile_Elpis\Libs\Util\ObservableDictionary.cs,FireEntryRemovedNotifications,The length of the statement  "                OnCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Remove' new KeyValuePair<TKey' TValue>((TKey)entry.Key' (TValue)entry.Value)' index)); " is 173.
Long Statement,DrWPF.Windows.Data,ObservableDictionary<TKey;TValue>,C:\repos\adammhaile_Elpis\Libs\Util\ObservableDictionary.cs,CopyTo,The length of the statement  "                throw new ArgumentOutOfRangeException("CopyTo() failed:  index parameter was outside the bounds of the supplied array"); " is 120.
Long Statement,DrWPF.Windows.Data,Enumerator,C:\repos\adammhaile_Elpis\Libs\Util\ObservableDictionary.cs,MoveNext,The length of the statement  "                    _current = new KeyValuePair<TKey' TValue>((TKey)_dictionary._keyedEntryCollection[_index].Key' (TValue)_dictionary._keyedEntryCollection[_index].Value); " is 152.
Complex Conditional,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,IsSafe,The conditional expression  "(((ch >= 'a') && (ch <= 'z')) || ((ch >= 'A') && (ch <= 'Z'))) || ((ch >= '0') && (ch <= '9'))"  is complex.
Complex Conditional,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeStringFromBytesInternal,The conditional expression  "((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0))"  is complex.
Complex Conditional,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeStringFromStringInternal,The conditional expression  "((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0))"  is complex.
Complex Conditional,NDesk.Options,Option,C:\repos\adammhaile_Elpis\Libs\Util\Options.cs,Option,The conditional expression  "Array.IndexOf (names' "<>") >= 0 &&   					((names.Length == 1 && this.type != OptionValueType.None) ||  					 (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,NDesk.Options,OptionSet,C:\repos\adammhaile_Elpis\Libs\Util\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n [n.Length-1] == '+' || n [n.Length-1] == '-') &&  					Contains ((rn = n.Substring (0' n.Length-1)))"  is complex.
Empty Catch Block,Util,Log,C:\repos\adammhaile_Elpis\Libs\Util\Log.cs,O,The method has an empty catch block.
Empty Catch Block,Util,Log,C:\repos\adammhaile_Elpis\Libs\Util\Log.cs,O,The method has an empty catch block.
Magic Number,Util,DateTimeExtensions,C:\repos\adammhaile_Elpis\Libs\Util\Extensions.cs,ToEpochTime,The following statement contains a magic number: var epoch = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,Util,StringExtensions,C:\repos\adammhaile_Elpis\Libs\Util\Extensions.cs,FromHex,The following statement contains a magic number: if (hex.Length%2 != 0)                  throw new ArgumentException("Input must be hex values and have an even number of characters.");
Magic Number,Util,StringExtensions,C:\repos\adammhaile_Elpis\Libs\Util\Extensions.cs,FromHex,The following statement contains a magic number: for (int i = 0; i < hex.Length; i += 2)              {                  result += (char) Convert.ToByte(hex.Substring(i' 2)' 16);              }
Magic Number,Util,StringExtensions,C:\repos\adammhaile_Elpis\Libs\Util\Extensions.cs,FromHex,The following statement contains a magic number: for (int i = 0; i < hex.Length; i += 2)              {                  result += (char) Convert.ToByte(hex.Substring(i' 2)' 16);              }
Magic Number,Util,StringExtensions,C:\repos\adammhaile_Elpis\Libs\Util\Extensions.cs,FromHex,The following statement contains a magic number: for (int i = 0; i < hex.Length; i += 2)              {                  result += (char) Convert.ToByte(hex.Substring(i' 2)' 16);              }
Magic Number,Util,StringExtensions,C:\repos\adammhaile_Elpis\Libs\Util\Extensions.cs,StringEllipses,The following statement contains a magic number: if (sub.Length < str.Length)              {                  sub = str.SafeSubstring(maxlen - 3) + "...";              }
Magic Number,Util,MapConfig,C:\repos\adammhaile_Elpis\Libs\Util\MapConfig.cs,LoadConfig,The following statement contains a magic number: if (result)              {                  foreach (string line in lines)                  {                      try                      {                          string[] split = line.Split('|');                            if (split.Length == 2)                          {                              //Deal with our lists of config items saved out to keys that look like Key[ID]                              if(split[0].Contains("["))                              {                                  string[] splitList = split[0].Split(new []{"["'"]"}' StringSplitOptions.None);                                  if(!_map.ContainsKey(splitList[0]))                                  {                                      _map[splitList[0]] = new Dictionary<int' string>();                                  }                                  ((Dictionary<int'string>)_map[splitList[0]])[int.Parse(splitList[1])] = split[1];                              }                              //This is the normal stype of config entry - just a string                              else                              {                                  if (_map.ContainsKey(split[0]))                                      _map[split[0]] = split[1]; //cascading style. newer values override old                                  else                                      _map.Add(split[0]' split[1]);                              }                          }                      }                      catch (Exception ex)                      {                          Log.O(ex.ToString());                      }                  }              }
Magic Number,Util,PostSubmitter,C:\repos\adammhaile_Elpis\Libs\Util\PostSubmitter.cs,Send,The following statement contains a magic number: while (!_uploadComplete && ((DateTime.Now - start).TotalMilliseconds < (timeoutSec * 1000)))                  Thread.Sleep(25);
Magic Number,Util,PostSubmitter,C:\repos\adammhaile_Elpis\Libs\Util\PostSubmitter.cs,Send,The following statement contains a magic number: while (!_uploadComplete && ((DateTime.Now - start).TotalMilliseconds < (timeoutSec * 1000)))                  Thread.Sleep(25);
Magic Number,Util,StringCrypt,C:\repos\adammhaile_Elpis\Libs\Util\StringCrypt.cs,EncryptString,The following statement contains a magic number: try              {                  // generate the key from the shared secret and the salt                  var key = new Rfc2898DeriveBytes(sharedSecret' _salt);                    // Create a RijndaelManaged object                  // with the specified key and IV.                  aesAlg = new RijndaelManaged();                  aesAlg.Key = key.GetBytes(aesAlg.KeySize/8);                  aesAlg.IV = key.GetBytes(aesAlg.BlockSize/8);                    // Create a decrytor to perform the stream transform.                  ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key' aesAlg.IV);                    // Create the streams used for encryption.                  using (var msEncrypt = new MemoryStream())                  {                      using (var csEncrypt = new CryptoStream(msEncrypt' encryptor' CryptoStreamMode.Write))                      {                          using (var swEncrypt = new StreamWriter(csEncrypt))                          {                              //Write all data to the stream.                              swEncrypt.Write(plainText);                          }                      }                      outStr = Convert.ToBase64String(msEncrypt.ToArray());                  }              }              finally              {                  // Clear the RijndaelManaged object.                  if (aesAlg != null)                      aesAlg.Clear();              }
Magic Number,Util,StringCrypt,C:\repos\adammhaile_Elpis\Libs\Util\StringCrypt.cs,EncryptString,The following statement contains a magic number: try              {                  // generate the key from the shared secret and the salt                  var key = new Rfc2898DeriveBytes(sharedSecret' _salt);                    // Create a RijndaelManaged object                  // with the specified key and IV.                  aesAlg = new RijndaelManaged();                  aesAlg.Key = key.GetBytes(aesAlg.KeySize/8);                  aesAlg.IV = key.GetBytes(aesAlg.BlockSize/8);                    // Create a decrytor to perform the stream transform.                  ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key' aesAlg.IV);                    // Create the streams used for encryption.                  using (var msEncrypt = new MemoryStream())                  {                      using (var csEncrypt = new CryptoStream(msEncrypt' encryptor' CryptoStreamMode.Write))                      {                          using (var swEncrypt = new StreamWriter(csEncrypt))                          {                              //Write all data to the stream.                              swEncrypt.Write(plainText);                          }                      }                      outStr = Convert.ToBase64String(msEncrypt.ToArray());                  }              }              finally              {                  // Clear the RijndaelManaged object.                  if (aesAlg != null)                      aesAlg.Clear();              }
Magic Number,Util,StringCrypt,C:\repos\adammhaile_Elpis\Libs\Util\StringCrypt.cs,DecryptString,The following statement contains a magic number: try              {                  // generate the key from the shared secret and the salt                  var key = new Rfc2898DeriveBytes(sharedSecret' _salt);                    // Create a RijndaelManaged object                  // with the specified key and IV.                  aesAlg = new RijndaelManaged();                  aesAlg.Key = key.GetBytes(aesAlg.KeySize/8);                  aesAlg.IV = key.GetBytes(aesAlg.BlockSize/8);                    // Create a decrytor to perform the stream transform.                  ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key' aesAlg.IV);                  // Create the streams used for decryption.                                  byte[] bytes = Convert.FromBase64String(cipherText);                  using (var msDecrypt = new MemoryStream(bytes))                  {                      using (var csDecrypt = new CryptoStream(msDecrypt' decryptor' CryptoStreamMode.Read))                      {                          using (var srDecrypt = new StreamReader(csDecrypt))                                // Read the decrypted bytes from the decrypting stream                              // and place them in a string.                              plaintext = srDecrypt.ReadToEnd();                      }                  }              }              finally              {                  // Clear the RijndaelManaged object.                  if (aesAlg != null)                      aesAlg.Clear();              }
Magic Number,Util,StringCrypt,C:\repos\adammhaile_Elpis\Libs\Util\StringCrypt.cs,DecryptString,The following statement contains a magic number: try              {                  // generate the key from the shared secret and the salt                  var key = new Rfc2898DeriveBytes(sharedSecret' _salt);                    // Create a RijndaelManaged object                  // with the specified key and IV.                  aesAlg = new RijndaelManaged();                  aesAlg.Key = key.GetBytes(aesAlg.KeySize/8);                  aesAlg.IV = key.GetBytes(aesAlg.BlockSize/8);                    // Create a decrytor to perform the stream transform.                  ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key' aesAlg.IV);                  // Create the streams used for decryption.                                  byte[] bytes = Convert.FromBase64String(cipherText);                  using (var msDecrypt = new MemoryStream(bytes))                  {                      using (var csDecrypt = new CryptoStream(msDecrypt' decryptor' CryptoStreamMode.Read))                      {                          using (var srDecrypt = new StreamReader(csDecrypt))                                // Read the decrypted bytes from the decrypting stream                              // and place them in a string.                              plaintext = srDecrypt.ReadToEnd();                      }                  }              }              finally              {                  // Clear the RijndaelManaged object.                  if (aesAlg != null)                      aesAlg.Clear();              }
Magic Number,Util,SystemInfo,C:\repos\adammhaile_Elpis\Libs\Util\SystemInfo.cs,GetWindowsVersion,The following statement contains a magic number: if (os.Platform == PlatformID.Win32Windows)              {                  switch (vs.Minor)                  {                      case 0:                          operatingSystem = "95";                          break;                      case 10:                          if (vs.Revision.ToString() == "2222A")                              operatingSystem = "98SE";                          else                              operatingSystem = "98";                          break;                      case 90:                          operatingSystem = "Me";                          break;                      default:                          break;                  }              }              else if (os.Platform == PlatformID.Win32NT)              {                  switch (vs.Major)                  {                      case 3:                          operatingSystem = "NT 3.51";                          break;                      case 4:                          operatingSystem = "NT 4.0";                          break;                      case 5:                          if (vs.Minor == 0)                              operatingSystem = "2000";                          else                              operatingSystem = "XP";                          break;                      case 6:                          if (vs.Minor == 0)                              operatingSystem = "Vista";                          else if (vs.Minor == 1)                              operatingSystem = "7";                          else if (vs.Minor == 2)                              operatingSystem = "8";                          else                              operatingSystem = "Future";                          break;                      default:                          operatingSystem = "Future";                          break;                  }              }
Magic Number,Util,SystemInfo,C:\repos\adammhaile_Elpis\Libs\Util\SystemInfo.cs,GetWindowsVersion,The following statement contains a magic number: if (os.Platform == PlatformID.Win32Windows)              {                  switch (vs.Minor)                  {                      case 0:                          operatingSystem = "95";                          break;                      case 10:                          if (vs.Revision.ToString() == "2222A")                              operatingSystem = "98SE";                          else                              operatingSystem = "98";                          break;                      case 90:                          operatingSystem = "Me";                          break;                      default:                          break;                  }              }              else if (os.Platform == PlatformID.Win32NT)              {                  switch (vs.Major)                  {                      case 3:                          operatingSystem = "NT 3.51";                          break;                      case 4:                          operatingSystem = "NT 4.0";                          break;                      case 5:                          if (vs.Minor == 0)                              operatingSystem = "2000";                          else                              operatingSystem = "XP";                          break;                      case 6:                          if (vs.Minor == 0)                              operatingSystem = "Vista";                          else if (vs.Minor == 1)                              operatingSystem = "7";                          else if (vs.Minor == 2)                              operatingSystem = "8";                          else                              operatingSystem = "Future";                          break;                      default:                          operatingSystem = "Future";                          break;                  }              }
Magic Number,Util,SystemInfo,C:\repos\adammhaile_Elpis\Libs\Util\SystemInfo.cs,GetWindowsVersion,The following statement contains a magic number: if (os.Platform == PlatformID.Win32Windows)              {                  switch (vs.Minor)                  {                      case 0:                          operatingSystem = "95";                          break;                      case 10:                          if (vs.Revision.ToString() == "2222A")                              operatingSystem = "98SE";                          else                              operatingSystem = "98";                          break;                      case 90:                          operatingSystem = "Me";                          break;                      default:                          break;                  }              }              else if (os.Platform == PlatformID.Win32NT)              {                  switch (vs.Major)                  {                      case 3:                          operatingSystem = "NT 3.51";                          break;                      case 4:                          operatingSystem = "NT 4.0";                          break;                      case 5:                          if (vs.Minor == 0)                              operatingSystem = "2000";                          else                              operatingSystem = "XP";                          break;                      case 6:                          if (vs.Minor == 0)                              operatingSystem = "Vista";                          else if (vs.Minor == 1)                              operatingSystem = "7";                          else if (vs.Minor == 2)                              operatingSystem = "8";                          else                              operatingSystem = "Future";                          break;                      default:                          operatingSystem = "Future";                          break;                  }              }
Magic Number,Util,SystemInfo,C:\repos\adammhaile_Elpis\Libs\Util\SystemInfo.cs,GetWindowsVersion,The following statement contains a magic number: if (os.Platform == PlatformID.Win32Windows)              {                  switch (vs.Minor)                  {                      case 0:                          operatingSystem = "95";                          break;                      case 10:                          if (vs.Revision.ToString() == "2222A")                              operatingSystem = "98SE";                          else                              operatingSystem = "98";                          break;                      case 90:                          operatingSystem = "Me";                          break;                      default:                          break;                  }              }              else if (os.Platform == PlatformID.Win32NT)              {                  switch (vs.Major)                  {                      case 3:                          operatingSystem = "NT 3.51";                          break;                      case 4:                          operatingSystem = "NT 4.0";                          break;                      case 5:                          if (vs.Minor == 0)                              operatingSystem = "2000";                          else                              operatingSystem = "XP";                          break;                      case 6:                          if (vs.Minor == 0)                              operatingSystem = "Vista";                          else if (vs.Minor == 1)                              operatingSystem = "7";                          else if (vs.Minor == 2)                              operatingSystem = "8";                          else                              operatingSystem = "Future";                          break;                      default:                          operatingSystem = "Future";                          break;                  }              }
Magic Number,Util,SystemInfo,C:\repos\adammhaile_Elpis\Libs\Util\SystemInfo.cs,GetWindowsVersion,The following statement contains a magic number: if (os.Platform == PlatformID.Win32Windows)              {                  switch (vs.Minor)                  {                      case 0:                          operatingSystem = "95";                          break;                      case 10:                          if (vs.Revision.ToString() == "2222A")                              operatingSystem = "98SE";                          else                              operatingSystem = "98";                          break;                      case 90:                          operatingSystem = "Me";                          break;                      default:                          break;                  }              }              else if (os.Platform == PlatformID.Win32NT)              {                  switch (vs.Major)                  {                      case 3:                          operatingSystem = "NT 3.51";                          break;                      case 4:                          operatingSystem = "NT 4.0";                          break;                      case 5:                          if (vs.Minor == 0)                              operatingSystem = "2000";                          else                              operatingSystem = "XP";                          break;                      case 6:                          if (vs.Minor == 0)                              operatingSystem = "Vista";                          else if (vs.Minor == 1)                              operatingSystem = "7";                          else if (vs.Minor == 2)                              operatingSystem = "8";                          else                              operatingSystem = "Future";                          break;                      default:                          operatingSystem = "Future";                          break;                  }              }
Magic Number,Util,SystemInfo,C:\repos\adammhaile_Elpis\Libs\Util\SystemInfo.cs,GetWindowsVersion,The following statement contains a magic number: if (os.Platform == PlatformID.Win32Windows)              {                  switch (vs.Minor)                  {                      case 0:                          operatingSystem = "95";                          break;                      case 10:                          if (vs.Revision.ToString() == "2222A")                              operatingSystem = "98SE";                          else                              operatingSystem = "98";                          break;                      case 90:                          operatingSystem = "Me";                          break;                      default:                          break;                  }              }              else if (os.Platform == PlatformID.Win32NT)              {                  switch (vs.Major)                  {                      case 3:                          operatingSystem = "NT 3.51";                          break;                      case 4:                          operatingSystem = "NT 4.0";                          break;                      case 5:                          if (vs.Minor == 0)                              operatingSystem = "2000";                          else                              operatingSystem = "XP";                          break;                      case 6:                          if (vs.Minor == 0)                              operatingSystem = "Vista";                          else if (vs.Minor == 1)                              operatingSystem = "7";                          else if (vs.Minor == 2)                              operatingSystem = "8";                          else                              operatingSystem = "Future";                          break;                      default:                          operatingSystem = "Future";                          break;                  }              }
Magic Number,Util,SystemInfo,C:\repos\adammhaile_Elpis\Libs\Util\SystemInfo.cs,GetWindowsVersion,The following statement contains a magic number: if (os.Platform == PlatformID.Win32Windows)              {                  switch (vs.Minor)                  {                      case 0:                          operatingSystem = "95";                          break;                      case 10:                          if (vs.Revision.ToString() == "2222A")                              operatingSystem = "98SE";                          else                              operatingSystem = "98";                          break;                      case 90:                          operatingSystem = "Me";                          break;                      default:                          break;                  }              }              else if (os.Platform == PlatformID.Win32NT)              {                  switch (vs.Major)                  {                      case 3:                          operatingSystem = "NT 3.51";                          break;                      case 4:                          operatingSystem = "NT 4.0";                          break;                      case 5:                          if (vs.Minor == 0)                              operatingSystem = "2000";                          else                              operatingSystem = "XP";                          break;                      case 6:                          if (vs.Minor == 0)                              operatingSystem = "Vista";                          else if (vs.Minor == 1)                              operatingSystem = "7";                          else if (vs.Minor == 2)                              operatingSystem = "8";                          else                              operatingSystem = "Future";                          break;                      default:                          operatingSystem = "Future";                          break;                  }              }
Magic Number,Util,SystemInfo,C:\repos\adammhaile_Elpis\Libs\Util\SystemInfo.cs,GetWindowsVersion,The following statement contains a magic number: if (operatingSystem != "")              {                  operatingSystem = "Windows " + operatingSystem;                    if (os.ServicePack != "")                  {                      operatingSystem += " " + os.ServicePack;                  }                    string pa = Environment.GetEnvironmentVariable("PROCESSOR_ARCHITECTURE"'                                                                 EnvironmentVariableTarget.Machine);                  int osArch = ((String.IsNullOrEmpty(pa) || String.Compare(pa' 0' "x86"' 0' 3' true) == 0) ? 32 : 64);                    operatingSystem += " " + osArch + "-bit";              }
Magic Number,Util,SystemInfo,C:\repos\adammhaile_Elpis\Libs\Util\SystemInfo.cs,GetWindowsVersion,The following statement contains a magic number: if (operatingSystem != "")              {                  operatingSystem = "Windows " + operatingSystem;                    if (os.ServicePack != "")                  {                      operatingSystem += " " + os.ServicePack;                  }                    string pa = Environment.GetEnvironmentVariable("PROCESSOR_ARCHITECTURE"'                                                                 EnvironmentVariableTarget.Machine);                  int osArch = ((String.IsNullOrEmpty(pa) || String.Compare(pa' 0' "x86"' 0' 3' true) == 0) ? 32 : 64);                    operatingSystem += " " + osArch + "-bit";              }
Magic Number,Util,SystemInfo,C:\repos\adammhaile_Elpis\Libs\Util\SystemInfo.cs,GetWindowsVersion,The following statement contains a magic number: if (operatingSystem != "")              {                  operatingSystem = "Windows " + operatingSystem;                    if (os.ServicePack != "")                  {                      operatingSystem += " " + os.ServicePack;                  }                    string pa = Environment.GetEnvironmentVariable("PROCESSOR_ARCHITECTURE"'                                                                 EnvironmentVariableTarget.Machine);                  int osArch = ((String.IsNullOrEmpty(pa) || String.Compare(pa' 0' "x86"' 0' 3' true) == 0) ? 32 : 64);                    operatingSystem += " " + osArch + "-bit";              }
Magic Number,Util,PRequest,C:\repos\adammhaile_Elpis\Libs\Util\WebRequest.cs,StringRequest,The following statement contains a magic number: try              {                  response = wc.UploadString(new Uri(url)' "POST"' data);              }              catch (WebException wex)              {                  Log.O("StringRequest Error: " + wex.ToString());                  //Wait and Try again' just in case                  Thread.Sleep(500);                  response = wc.UploadString(new Uri(url)' "POST"' data);              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,HexToInt,The following statement contains a magic number: if ((h >= 'a') && (h <= 'f'))              {                  return ((h - 'a') + 10);              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,HexToInt,The following statement contains a magic number: if ((h >= 'A') && (h <= 'F'))              {                  return ((h - 'A') + 10);              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,IntToHex,The following statement contains a magic number: if (n <= 9)              {                  return (char)(n + 0x30);              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,IntToHex,The following statement contains a magic number: return (char)((n - 10) + 0x61);
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeBytesFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte num4 = buf[index];                  if (num4 == 0x2b)                  {                      num4 = 0x20;                  }                  else if ((num4 == 0x25) && (i < (count - 2)))                  {                      int num5 = HexToInt((char)buf[index + 1]);                      int num6 = HexToInt((char)buf[index + 2]);                      if ((num5 >= 0) && (num6 >= 0))                      {                          num4 = (byte)((num5 << 4) | num6);                          i += 2;                      }                  }                  sourceArray[length++] = num4;              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeBytesFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte num4 = buf[index];                  if (num4 == 0x2b)                  {                      num4 = 0x20;                  }                  else if ((num4 == 0x25) && (i < (count - 2)))                  {                      int num5 = HexToInt((char)buf[index + 1]);                      int num6 = HexToInt((char)buf[index + 2]);                      if ((num5 >= 0) && (num6 >= 0))                      {                          num4 = (byte)((num5 << 4) | num6);                          i += 2;                      }                  }                  sourceArray[length++] = num4;              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeBytesFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte num4 = buf[index];                  if (num4 == 0x2b)                  {                      num4 = 0x20;                  }                  else if ((num4 == 0x25) && (i < (count - 2)))                  {                      int num5 = HexToInt((char)buf[index + 1]);                      int num6 = HexToInt((char)buf[index + 2]);                      if ((num5 >= 0) && (num6 >= 0))                      {                          num4 = (byte)((num5 << 4) | num6);                          i += 2;                      }                  }                  sourceArray[length++] = num4;              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeBytesFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte num4 = buf[index];                  if (num4 == 0x2b)                  {                      num4 = 0x20;                  }                  else if ((num4 == 0x25) && (i < (count - 2)))                  {                      int num5 = HexToInt((char)buf[index + 1]);                      int num6 = HexToInt((char)buf[index + 2]);                      if ((num5 >= 0) && (num6 >= 0))                      {                          num4 = (byte)((num5 << 4) | num6);                          i += 2;                      }                  }                  sourceArray[length++] = num4;              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte b = buf[index];                  if (b == 0x2b)                  {                      b = 0x20;                  }                  else if ((b == 0x25) && (i < (count - 2)))                  {                      if ((buf[index + 1] == 0x75) && (i < (count - 5)))                      {                          int num4 = HexToInt((char)buf[index + 2]);                          int num5 = HexToInt((char)buf[index + 3]);                          int num6 = HexToInt((char)buf[index + 4]);                          int num7 = HexToInt((char)buf[index + 5]);                          if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0)))                          {                              goto Label_00DA;                          }                          char ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num8 = HexToInt((char)buf[index + 1]);                      int num9 = HexToInt((char)buf[index + 2]);                      if ((num8 >= 0) && (num9 >= 0))                      {                          b = (byte)((num8 << 4) | num9);                          i += 2;                      }                  }              Label_00DA:                  decoder.AddByte(b);              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte b = buf[index];                  if (b == 0x2b)                  {                      b = 0x20;                  }                  else if ((b == 0x25) && (i < (count - 2)))                  {                      if ((buf[index + 1] == 0x75) && (i < (count - 5)))                      {                          int num4 = HexToInt((char)buf[index + 2]);                          int num5 = HexToInt((char)buf[index + 3]);                          int num6 = HexToInt((char)buf[index + 4]);                          int num7 = HexToInt((char)buf[index + 5]);                          if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0)))                          {                              goto Label_00DA;                          }                          char ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num8 = HexToInt((char)buf[index + 1]);                      int num9 = HexToInt((char)buf[index + 2]);                      if ((num8 >= 0) && (num9 >= 0))                      {                          b = (byte)((num8 << 4) | num9);                          i += 2;                      }                  }              Label_00DA:                  decoder.AddByte(b);              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte b = buf[index];                  if (b == 0x2b)                  {                      b = 0x20;                  }                  else if ((b == 0x25) && (i < (count - 2)))                  {                      if ((buf[index + 1] == 0x75) && (i < (count - 5)))                      {                          int num4 = HexToInt((char)buf[index + 2]);                          int num5 = HexToInt((char)buf[index + 3]);                          int num6 = HexToInt((char)buf[index + 4]);                          int num7 = HexToInt((char)buf[index + 5]);                          if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0)))                          {                              goto Label_00DA;                          }                          char ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num8 = HexToInt((char)buf[index + 1]);                      int num9 = HexToInt((char)buf[index + 2]);                      if ((num8 >= 0) && (num9 >= 0))                      {                          b = (byte)((num8 << 4) | num9);                          i += 2;                      }                  }              Label_00DA:                  decoder.AddByte(b);              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte b = buf[index];                  if (b == 0x2b)                  {                      b = 0x20;                  }                  else if ((b == 0x25) && (i < (count - 2)))                  {                      if ((buf[index + 1] == 0x75) && (i < (count - 5)))                      {                          int num4 = HexToInt((char)buf[index + 2]);                          int num5 = HexToInt((char)buf[index + 3]);                          int num6 = HexToInt((char)buf[index + 4]);                          int num7 = HexToInt((char)buf[index + 5]);                          if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0)))                          {                              goto Label_00DA;                          }                          char ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num8 = HexToInt((char)buf[index + 1]);                      int num9 = HexToInt((char)buf[index + 2]);                      if ((num8 >= 0) && (num9 >= 0))                      {                          b = (byte)((num8 << 4) | num9);                          i += 2;                      }                  }              Label_00DA:                  decoder.AddByte(b);              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte b = buf[index];                  if (b == 0x2b)                  {                      b = 0x20;                  }                  else if ((b == 0x25) && (i < (count - 2)))                  {                      if ((buf[index + 1] == 0x75) && (i < (count - 5)))                      {                          int num4 = HexToInt((char)buf[index + 2]);                          int num5 = HexToInt((char)buf[index + 3]);                          int num6 = HexToInt((char)buf[index + 4]);                          int num7 = HexToInt((char)buf[index + 5]);                          if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0)))                          {                              goto Label_00DA;                          }                          char ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num8 = HexToInt((char)buf[index + 1]);                      int num9 = HexToInt((char)buf[index + 2]);                      if ((num8 >= 0) && (num9 >= 0))                      {                          b = (byte)((num8 << 4) | num9);                          i += 2;                      }                  }              Label_00DA:                  decoder.AddByte(b);              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte b = buf[index];                  if (b == 0x2b)                  {                      b = 0x20;                  }                  else if ((b == 0x25) && (i < (count - 2)))                  {                      if ((buf[index + 1] == 0x75) && (i < (count - 5)))                      {                          int num4 = HexToInt((char)buf[index + 2]);                          int num5 = HexToInt((char)buf[index + 3]);                          int num6 = HexToInt((char)buf[index + 4]);                          int num7 = HexToInt((char)buf[index + 5]);                          if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0)))                          {                              goto Label_00DA;                          }                          char ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num8 = HexToInt((char)buf[index + 1]);                      int num9 = HexToInt((char)buf[index + 2]);                      if ((num8 >= 0) && (num9 >= 0))                      {                          b = (byte)((num8 << 4) | num9);                          i += 2;                      }                  }              Label_00DA:                  decoder.AddByte(b);              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte b = buf[index];                  if (b == 0x2b)                  {                      b = 0x20;                  }                  else if ((b == 0x25) && (i < (count - 2)))                  {                      if ((buf[index + 1] == 0x75) && (i < (count - 5)))                      {                          int num4 = HexToInt((char)buf[index + 2]);                          int num5 = HexToInt((char)buf[index + 3]);                          int num6 = HexToInt((char)buf[index + 4]);                          int num7 = HexToInt((char)buf[index + 5]);                          if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0)))                          {                              goto Label_00DA;                          }                          char ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num8 = HexToInt((char)buf[index + 1]);                      int num9 = HexToInt((char)buf[index + 2]);                      if ((num8 >= 0) && (num9 >= 0))                      {                          b = (byte)((num8 << 4) | num9);                          i += 2;                      }                  }              Label_00DA:                  decoder.AddByte(b);              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte b = buf[index];                  if (b == 0x2b)                  {                      b = 0x20;                  }                  else if ((b == 0x25) && (i < (count - 2)))                  {                      if ((buf[index + 1] == 0x75) && (i < (count - 5)))                      {                          int num4 = HexToInt((char)buf[index + 2]);                          int num5 = HexToInt((char)buf[index + 3]);                          int num6 = HexToInt((char)buf[index + 4]);                          int num7 = HexToInt((char)buf[index + 5]);                          if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0)))                          {                              goto Label_00DA;                          }                          char ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num8 = HexToInt((char)buf[index + 1]);                      int num9 = HexToInt((char)buf[index + 2]);                      if ((num8 >= 0) && (num9 >= 0))                      {                          b = (byte)((num8 << 4) | num9);                          i += 2;                      }                  }              Label_00DA:                  decoder.AddByte(b);              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte b = buf[index];                  if (b == 0x2b)                  {                      b = 0x20;                  }                  else if ((b == 0x25) && (i < (count - 2)))                  {                      if ((buf[index + 1] == 0x75) && (i < (count - 5)))                      {                          int num4 = HexToInt((char)buf[index + 2]);                          int num5 = HexToInt((char)buf[index + 3]);                          int num6 = HexToInt((char)buf[index + 4]);                          int num7 = HexToInt((char)buf[index + 5]);                          if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0)))                          {                              goto Label_00DA;                          }                          char ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num8 = HexToInt((char)buf[index + 1]);                      int num9 = HexToInt((char)buf[index + 2]);                      if ((num8 >= 0) && (num9 >= 0))                      {                          b = (byte)((num8 << 4) | num9);                          i += 2;                      }                  }              Label_00DA:                  decoder.AddByte(b);              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte b = buf[index];                  if (b == 0x2b)                  {                      b = 0x20;                  }                  else if ((b == 0x25) && (i < (count - 2)))                  {                      if ((buf[index + 1] == 0x75) && (i < (count - 5)))                      {                          int num4 = HexToInt((char)buf[index + 2]);                          int num5 = HexToInt((char)buf[index + 3]);                          int num6 = HexToInt((char)buf[index + 4]);                          int num7 = HexToInt((char)buf[index + 5]);                          if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0)))                          {                              goto Label_00DA;                          }                          char ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num8 = HexToInt((char)buf[index + 1]);                      int num9 = HexToInt((char)buf[index + 2]);                      if ((num8 >= 0) && (num9 >= 0))                      {                          b = (byte)((num8 << 4) | num9);                          i += 2;                      }                  }              Label_00DA:                  decoder.AddByte(b);              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte b = buf[index];                  if (b == 0x2b)                  {                      b = 0x20;                  }                  else if ((b == 0x25) && (i < (count - 2)))                  {                      if ((buf[index + 1] == 0x75) && (i < (count - 5)))                      {                          int num4 = HexToInt((char)buf[index + 2]);                          int num5 = HexToInt((char)buf[index + 3]);                          int num6 = HexToInt((char)buf[index + 4]);                          int num7 = HexToInt((char)buf[index + 5]);                          if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0)))                          {                              goto Label_00DA;                          }                          char ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num8 = HexToInt((char)buf[index + 1]);                      int num9 = HexToInt((char)buf[index + 2]);                      if ((num8 >= 0) && (num9 >= 0))                      {                          b = (byte)((num8 << 4) | num9);                          i += 2;                      }                  }              Label_00DA:                  decoder.AddByte(b);              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte b = buf[index];                  if (b == 0x2b)                  {                      b = 0x20;                  }                  else if ((b == 0x25) && (i < (count - 2)))                  {                      if ((buf[index + 1] == 0x75) && (i < (count - 5)))                      {                          int num4 = HexToInt((char)buf[index + 2]);                          int num5 = HexToInt((char)buf[index + 3]);                          int num6 = HexToInt((char)buf[index + 4]);                          int num7 = HexToInt((char)buf[index + 5]);                          if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0)))                          {                              goto Label_00DA;                          }                          char ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num8 = HexToInt((char)buf[index + 1]);                      int num9 = HexToInt((char)buf[index + 2]);                      if ((num8 >= 0) && (num9 >= 0))                      {                          b = (byte)((num8 << 4) | num9);                          i += 2;                      }                  }              Label_00DA:                  decoder.AddByte(b);              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeStringFromBytesInternal,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int index = offset + i;                  byte b = buf[index];                  if (b == 0x2b)                  {                      b = 0x20;                  }                  else if ((b == 0x25) && (i < (count - 2)))                  {                      if ((buf[index + 1] == 0x75) && (i < (count - 5)))                      {                          int num4 = HexToInt((char)buf[index + 2]);                          int num5 = HexToInt((char)buf[index + 3]);                          int num6 = HexToInt((char)buf[index + 4]);                          int num7 = HexToInt((char)buf[index + 5]);                          if (((num4 < 0) || (num5 < 0)) || ((num6 < 0) || (num7 < 0)))                          {                              goto Label_00DA;                          }                          char ch = (char)((((num4 << 12) | (num5 << 8)) | (num6 << 4)) | num7);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num8 = HexToInt((char)buf[index + 1]);                      int num9 = HexToInt((char)buf[index + 2]);                      if ((num8 >= 0) && (num9 >= 0))                      {                          b = (byte)((num8 << 4) | num9);                          i += 2;                      }                  }              Label_00DA:                  decoder.AddByte(b);              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlEncodeBytesToBytesInternal,The following statement contains a magic number: byte[] buffer = new byte[count + (num2 * 2)];
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlEncodeBytesToBytesInternal,The following statement contains a magic number: for (int j = 0; j < count; j++)              {                  byte num6 = bytes[offset + j];                  char ch2 = (char)num6;                  if (IsSafe(ch2))                  {                      buffer[num4++] = num6;                  }                  else if (ch2 == ' ')                  {                      buffer[num4++] = 0x2b;                  }                  else                  {                      buffer[num4++] = 0x25;                      buffer[num4++] = (byte)IntToHex((num6 >> 4) & 15);                      buffer[num4++] = (byte)IntToHex(num6 & 15);                  }              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlEncodeBytesToBytesInternal,The following statement contains a magic number: for (int j = 0; j < count; j++)              {                  byte num6 = bytes[offset + j];                  char ch2 = (char)num6;                  if (IsSafe(ch2))                  {                      buffer[num4++] = num6;                  }                  else if (ch2 == ' ')                  {                      buffer[num4++] = 0x2b;                  }                  else                  {                      buffer[num4++] = 0x25;                      buffer[num4++] = (byte)IntToHex((num6 >> 4) & 15);                      buffer[num4++] = (byte)IntToHex(num6 & 15);                  }              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlEncodeBytesToBytesInternal,The following statement contains a magic number: for (int j = 0; j < count; j++)              {                  byte num6 = bytes[offset + j];                  char ch2 = (char)num6;                  if (IsSafe(ch2))                  {                      buffer[num4++] = num6;                  }                  else if (ch2 == ' ')                  {                      buffer[num4++] = 0x2b;                  }                  else                  {                      buffer[num4++] = 0x25;                      buffer[num4++] = (byte)IntToHex((num6 >> 4) & 15);                      buffer[num4++] = (byte)IntToHex(num6 & 15);                  }              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlEncodeBytesToBytesInternalNonAscii,The following statement contains a magic number: byte[] buffer = new byte[count + (num * 2)];
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlEncodeBytesToBytesInternalNonAscii,The following statement contains a magic number: for (int j = 0; j < count; j++)              {                  byte b = bytes[offset + j];                  if (IsNonAsciiByte(b))                  {                      buffer[num3++] = 0x25;                      buffer[num3++] = (byte)IntToHex((b >> 4) & 15);                      buffer[num3++] = (byte)IntToHex(b & 15);                  }                  else                  {                      buffer[num3++] = b;                  }              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlEncodeBytesToBytesInternalNonAscii,The following statement contains a magic number: for (int j = 0; j < count; j++)              {                  byte b = bytes[offset + j];                  if (IsNonAsciiByte(b))                  {                      buffer[num3++] = 0x25;                      buffer[num3++] = (byte)IntToHex((b >> 4) & 15);                      buffer[num3++] = (byte)IntToHex(b & 15);                  }                  else                  {                      buffer[num3++] = b;                  }              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlEncodeBytesToBytesInternalNonAscii,The following statement contains a magic number: for (int j = 0; j < count; j++)              {                  byte b = bytes[offset + j];                  if (IsNonAsciiByte(b))                  {                      buffer[num3++] = 0x25;                      buffer[num3++] = (byte)IntToHex((b >> 4) & 15);                      buffer[num3++] = (byte)IntToHex(b & 15);                  }                  else                  {                      buffer[num3++] = b;                  }              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlEncodeUnicodeStringToStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if ((ch & 0xff80) == 0)                  {                      if (ignoreAscii || IsSafe(ch))                      {                          builder.Append(ch);                      }                      else if (ch == ' ')                      {                          builder.Append('+');                      }                      else                      {                          builder.Append('%');                          builder.Append(IntToHex((ch >> 4) & '\x000f'));                          builder.Append(IntToHex(ch & '\x000f'));                      }                  }                  else                  {                      builder.Append("%u");                      builder.Append(IntToHex((ch >> 12) & '\x000f'));                      builder.Append(IntToHex((ch >> 8) & '\x000f'));                      builder.Append(IntToHex((ch >> 4) & '\x000f'));                      builder.Append(IntToHex(ch & '\x000f'));                  }              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlEncodeUnicodeStringToStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if ((ch & 0xff80) == 0)                  {                      if (ignoreAscii || IsSafe(ch))                      {                          builder.Append(ch);                      }                      else if (ch == ' ')                      {                          builder.Append('+');                      }                      else                      {                          builder.Append('%');                          builder.Append(IntToHex((ch >> 4) & '\x000f'));                          builder.Append(IntToHex(ch & '\x000f'));                      }                  }                  else                  {                      builder.Append("%u");                      builder.Append(IntToHex((ch >> 12) & '\x000f'));                      builder.Append(IntToHex((ch >> 8) & '\x000f'));                      builder.Append(IntToHex((ch >> 4) & '\x000f'));                      builder.Append(IntToHex(ch & '\x000f'));                  }              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlEncodeUnicodeStringToStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if ((ch & 0xff80) == 0)                  {                      if (ignoreAscii || IsSafe(ch))                      {                          builder.Append(ch);                      }                      else if (ch == ' ')                      {                          builder.Append('+');                      }                      else                      {                          builder.Append('%');                          builder.Append(IntToHex((ch >> 4) & '\x000f'));                          builder.Append(IntToHex(ch & '\x000f'));                      }                  }                  else                  {                      builder.Append("%u");                      builder.Append(IntToHex((ch >> 12) & '\x000f'));                      builder.Append(IntToHex((ch >> 8) & '\x000f'));                      builder.Append(IntToHex((ch >> 4) & '\x000f'));                      builder.Append(IntToHex(ch & '\x000f'));                  }              }
Magic Number,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,UrlEncodeUnicodeStringToStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if ((ch & 0xff80) == 0)                  {                      if (ignoreAscii || IsSafe(ch))                      {                          builder.Append(ch);                      }                      else if (ch == ' ')                      {                          builder.Append('+');                      }                      else                      {                          builder.Append('%');                          builder.Append(IntToHex((ch >> 4) & '\x000f'));                          builder.Append(IntToHex(ch & '\x000f'));                      }                  }                  else                  {                      builder.Append("%u");                      builder.Append(IntToHex((ch >> 12) & '\x000f'));                      builder.Append(IntToHex((ch >> 8) & '\x000f'));                      builder.Append(IntToHex((ch >> 4) & '\x000f'));                      builder.Append(IntToHex(ch & '\x000f'));                  }              }
Magic Number,DrWPF.Windows.Data,Enumerator,C:\repos\adammhaile_Elpis\Libs\Util\ObservableDictionary.cs,MoveNext,The following statement contains a magic number: _index = -2;
Magic Number,DrWPF.Windows.Data,Enumerator,C:\repos\adammhaile_Elpis\Libs\Util\ObservableDictionary.cs,ValidateCurrent,The following statement contains a magic number: if (_index == -1)                  {                      throw new InvalidOperationException("The enumerator has not been started.");                  }                  else if (_index == -2)                  {                      throw new InvalidOperationException("The enumerator has reached the end of the collection.");                  }
Magic Number,NDesk.Options,OptionSet,C:\repos\adammhaile_Elpis\Libs\Util\Options.cs,Add,The following statement contains a magic number: Option p = new ActionOption (prototype' description' 2'   					delegate (OptionValueCollection v) {action (v [0]' v [1]);});
Magic Number,NDesk.Options,OptionSet,C:\repos\adammhaile_Elpis\Libs\Util\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  				int written = 0;  				if (!WriteOptionPrototype (o' p' ref written))  					continue;    				if (written < OptionWidth)  					o.Write (new string (' '' OptionWidth - written));  				else {  					o.WriteLine ();  					o.Write (new string (' '' OptionWidth));  				}    				List<string> lines = GetLines (localizer (GetDescription (p.Description)));  				o.WriteLine (lines [0]);  				string prefix = new string (' '' OptionWidth+2);  				for (int i = 1; i < lines.Count; ++i) {  					o.Write (prefix);  					o.WriteLine (lines [i]);  				}  			}
Magic Number,NDesk.Options,OptionSet,C:\repos\adammhaile_Elpis\Libs\Util\Options.cs,GetLines,The following statement contains a magic number: int length = 80 - OptionWidth - 2;
Magic Number,NDesk.Options,OptionSet,C:\repos\adammhaile_Elpis\Libs\Util\Options.cs,GetLines,The following statement contains a magic number: int length = 80 - OptionWidth - 2;
Missing Default,Util,SystemSessionState,C:\repos\adammhaile_Elpis\Libs\Util\SystemSessionState.cs,SystemEvents_SessionSwitch,The following switch statement is missing a default case: switch(e.Reason)              {                  case SessionSwitchReason.SessionLock:                      if (SystemLocked != null) SystemLocked();                      break;                  case SessionSwitchReason.SessionUnlock:                      if (SystemUnlocked != null) SystemUnlocked();                      break;              }
Missing Default,Util.Web,HttpUtility,C:\repos\adammhaile_Elpis\Libs\Util\HttpUtility.cs,IsSafe,The following switch statement is missing a default case: switch (ch)              {                  case '\'':                  case '(':                  case ')':                  case '*':                  case '-':                  case '.':                  case '_':                  case '!':                      return true;              }
Missing Default,NDesk.Options,OptionSet,C:\repos\adammhaile_Elpis\Libs\Util\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType) {  					case OptionValueType.None:  						c.OptionValues.Add (n);  						c.Option.Invoke (c);  						break;  					case OptionValueType.Optional:  					case OptionValueType.Required:   						ParseValue (v' c);  						break;  				}
Missing Default,NDesk.Options,OptionSet,C:\repos\adammhaile_Elpis\Libs\Util\Options.cs,GetLineEnd,The following switch statement is missing a default case: switch (description [i]) {  					case ' ':  					case '\t':  					case '\v':  					case '-':  					case ''':  					case '.':  					case ';':  						sep = i;  						break;  					case '\n':  						return i;  				}
