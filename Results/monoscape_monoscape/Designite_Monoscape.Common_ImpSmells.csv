Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Monoscape.Common,SharpZip,C:\repos\monoscape_monoscape\Monoscape.Common\SharpZip.cs,Extract,Cyclomatic complexity of the method is 10
Complex Method,Monoscape.Common.Services.FileServer,AbstractFileTransferService,C:\repos\monoscape_monoscape\Monoscape.Common\Services\FileServer\AbstractFileTransferService.cs,UploadApplication,Cyclomatic complexity of the method is 9
Complex Method,Monoscape.Common.WCFExtensions,ExceptionMarshallingBehavior,C:\repos\monoscape_monoscape\Monoscape.Common\WCFExtensions\ExceptionMarshallingBehavior.cs,Validate,Cyclomatic complexity of the method is 8
Complex Method,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,Cyclomatic complexity of the method is 13
Long Parameter List,Monoscape.Common.Services.FileServer.Model,ApplicationMetadata,C:\repos\monoscape_monoscape\Monoscape.Common\Services\FileServer\Model\ApplicationMetaData.cs,ApplicationMetadata,The method has 5 parameters.
Long Statement,Monoscape.Common,MonoscapeService,C:\repos\monoscape_monoscape\Monoscape.Common\MonoscapeService.cs,Authenticate,The length of the statement  "	if ((requestCredentials == null) || (!requestCredentials.AccessKey.Equals (Credentials.AccessKey)) || (!requestCredentials.SecretKey.Equals (Credentials.SecretKey))) { " is 167.
Long Statement,Monoscape.Common,SharpZip,C:\repos\monoscape_monoscape\Monoscape.Common\SharpZip.cs,FileExistsInRoot,The length of the statement  "			if ((!ignoreCase) && ((directoryName.Length == 0) && fileName_.Equals (fileName)) || ((ignoreCase) && ((directoryName.Length == 0) && fileName_.ToLower ().Equals (fileName.ToLower ())))) { " is 188.
Long Statement,Monoscape.Common.Models,InstanceRequest,C:\repos\monoscape_monoscape\Monoscape.Common\Model\InstanceRequest.cs,ToString,The length of the statement  "	return String.Format ("Application ID: {0} Instance ID: {1} RequestCount: {2}"' ApplicaitonId' InstanceId' RequestCount); " is 121.
Long Statement,Monoscape.Common.Services.FileServer,AbstractFileTransferService,C:\repos\monoscape_monoscape\Monoscape.Common\Services\FileServer\AbstractFileTransferService.cs,UploadApplication,The length of the statement  "				throw new MonoscapeException ("Application package is not valid. Re-package the application excluding any project folders and try again."); " is 139.
Long Statement,Monoscape.Common.WCFExtensions,ExceptionMarshallingBehavior,C:\repos\monoscape_monoscape\Monoscape.Common\WCFExtensions\ExceptionMarshallingBehavior.cs,ProvideFault,The length of the statement  "		FaultException<MonoscapeFault> fe = new FaultException<MonoscapeFault> (new MonoscapeFault (ex.Message)' new FaultReason (ex.Message)); " is 135.
Long Statement,Monoscape.Common.WCFExtensions,ExceptionMarshallingBehavior,C:\repos\monoscape_monoscape\Monoscape.Common\WCFExtensions\ExceptionMarshallingBehavior.cs,Validate,The length of the statement  "		if (endpoint.Contract.Name.Equals ("IMetadataExchange") && endpoint.Contract.Namespace.Equals ("http://schemas.microsoft.com/2006/04/mex")) " is 139.
Long Statement,Monoscape.Common.WCFExtensions,ExceptionMarshallingBehavior,C:\repos\monoscape_monoscape\Monoscape.Common\WCFExtensions\ExceptionMarshallingBehavior.cs,Validate,The length of the statement  "				throw new InvalidOperationException (String.Format ("FaultBehavior requires a [FaultContract(typeof(MonoscapeFault))] in each operation contract. The \"{0}\" operation contains no FaultContractAttribute."' opDesc.Name)); " is 220.
Long Statement,Monoscape.Common.WCFExtensions,ExceptionMarshallingBehavior,C:\repos\monoscape_monoscape\Monoscape.Common\WCFExtensions\ExceptionMarshallingBehavior.cs,Validate,The length of the statement  "				throw new InvalidOperationException ("FaultBehavior requires a FaultContractAttribute(typeof(MonoscapeFault)) in an operation contract."); " is 138.
Complex Conditional,Monoscape.Common,SharpZip,C:\repos\monoscape_monoscape\Monoscape.Common\SharpZip.cs,FileExistsInRoot,The conditional expression  "(!ignoreCase) && ((directoryName.Length == 0) && fileName_.Equals (fileName)) || ((ignoreCase) && ((directoryName.Length == 0) && fileName_.ToLower ().Equals (fileName.ToLower ())))"  is complex.
Empty Catch Block,Monoscape.Common,MonoscapeUtil,C:\repos\monoscape_monoscape\Monoscape.Common\MonoscapeUtil.cs,GetMonoRuntime,The method has an empty catch block.
Magic Number,Monoscape.Common,SharpZip,C:\repos\monoscape_monoscape\Monoscape.Common\SharpZip.cs,Extract,The following statement contains a magic number: using (ZipInputStream s = new ZipInputStream (File.OpenRead (filePath))) {  	Log.Debug (typeof(SharpZip)' "Extracting zip file: " + Path.GetFileName (filePath));  	ZipEntry theEntry;  	while ((theEntry = s.GetNextEntry ()) != null) {  		//Log.Debug(typeof(SharpZip)' theEntry.Name);  		string directoryName = Path.GetDirectoryName (theEntry.Name);  		string fileName = Path.GetFileName (theEntry.Name);  		// create directory  		if (directoryName.Length > 0) {  			Directory.CreateDirectory (Path.Combine (extractPath' directoryName));  		}  		if (fileName != String.Empty) {  			using (FileStream streamWriter = File.Create (Path.Combine (extractPath' theEntry.Name))) {  				int size = 2048;  				byte[] data = new byte[2048];  				while (true) {  					size = s.Read (data' 0' data.Length);  					if (size > 0) {  						streamWriter.Write (data' 0' size);  					}  					else {  						break;  					}  				}  			}  		}  	}  }  
Magic Number,Monoscape.Common,SharpZip,C:\repos\monoscape_monoscape\Monoscape.Common\SharpZip.cs,Extract,The following statement contains a magic number: using (ZipInputStream s = new ZipInputStream (File.OpenRead (filePath))) {  	Log.Debug (typeof(SharpZip)' "Extracting zip file: " + Path.GetFileName (filePath));  	ZipEntry theEntry;  	while ((theEntry = s.GetNextEntry ()) != null) {  		//Log.Debug(typeof(SharpZip)' theEntry.Name);  		string directoryName = Path.GetDirectoryName (theEntry.Name);  		string fileName = Path.GetFileName (theEntry.Name);  		// create directory  		if (directoryName.Length > 0) {  			Directory.CreateDirectory (Path.Combine (extractPath' directoryName));  		}  		if (fileName != String.Empty) {  			using (FileStream streamWriter = File.Create (Path.Combine (extractPath' theEntry.Name))) {  				int size = 2048;  				byte[] data = new byte[2048];  				while (true) {  					size = s.Read (data' 0' data.Length);  					if (size > 0) {  						streamWriter.Write (data' 0' size);  					}  					else {  						break;  					}  				}  			}  		}  	}  }  
Magic Number,Monoscape.Common,SharpZip,C:\repos\monoscape_monoscape\Monoscape.Common\SharpZip.cs,Extract,The following statement contains a magic number: while ((theEntry = s.GetNextEntry ()) != null) {  	//Log.Debug(typeof(SharpZip)' theEntry.Name);  	string directoryName = Path.GetDirectoryName (theEntry.Name);  	string fileName = Path.GetFileName (theEntry.Name);  	// create directory  	if (directoryName.Length > 0) {  		Directory.CreateDirectory (Path.Combine (extractPath' directoryName));  	}  	if (fileName != String.Empty) {  		using (FileStream streamWriter = File.Create (Path.Combine (extractPath' theEntry.Name))) {  			int size = 2048;  			byte[] data = new byte[2048];  			while (true) {  				size = s.Read (data' 0' data.Length);  				if (size > 0) {  					streamWriter.Write (data' 0' size);  				}  				else {  					break;  				}  			}  		}  	}  }  
Magic Number,Monoscape.Common,SharpZip,C:\repos\monoscape_monoscape\Monoscape.Common\SharpZip.cs,Extract,The following statement contains a magic number: while ((theEntry = s.GetNextEntry ()) != null) {  	//Log.Debug(typeof(SharpZip)' theEntry.Name);  	string directoryName = Path.GetDirectoryName (theEntry.Name);  	string fileName = Path.GetFileName (theEntry.Name);  	// create directory  	if (directoryName.Length > 0) {  		Directory.CreateDirectory (Path.Combine (extractPath' directoryName));  	}  	if (fileName != String.Empty) {  		using (FileStream streamWriter = File.Create (Path.Combine (extractPath' theEntry.Name))) {  			int size = 2048;  			byte[] data = new byte[2048];  			while (true) {  				size = s.Read (data' 0' data.Length);  				if (size > 0) {  					streamWriter.Write (data' 0' size);  				}  				else {  					break;  				}  			}  		}  	}  }  
Magic Number,Monoscape.Common,SharpZip,C:\repos\monoscape_monoscape\Monoscape.Common\SharpZip.cs,Extract,The following statement contains a magic number: if (fileName != String.Empty) {  	using (FileStream streamWriter = File.Create (Path.Combine (extractPath' theEntry.Name))) {  		int size = 2048;  		byte[] data = new byte[2048];  		while (true) {  			size = s.Read (data' 0' data.Length);  			if (size > 0) {  				streamWriter.Write (data' 0' size);  			}  			else {  				break;  			}  		}  	}  }  
Magic Number,Monoscape.Common,SharpZip,C:\repos\monoscape_monoscape\Monoscape.Common\SharpZip.cs,Extract,The following statement contains a magic number: if (fileName != String.Empty) {  	using (FileStream streamWriter = File.Create (Path.Combine (extractPath' theEntry.Name))) {  		int size = 2048;  		byte[] data = new byte[2048];  		while (true) {  			size = s.Read (data' 0' data.Length);  			if (size > 0) {  				streamWriter.Write (data' 0' size);  			}  			else {  				break;  			}  		}  	}  }  
Magic Number,Monoscape.Common,SharpZip,C:\repos\monoscape_monoscape\Monoscape.Common\SharpZip.cs,Extract,The following statement contains a magic number: using (FileStream streamWriter = File.Create (Path.Combine (extractPath' theEntry.Name))) {  	int size = 2048;  	byte[] data = new byte[2048];  	while (true) {  		size = s.Read (data' 0' data.Length);  		if (size > 0) {  			streamWriter.Write (data' 0' size);  		}  		else {  			break;  		}  	}  }  
Magic Number,Monoscape.Common,SharpZip,C:\repos\monoscape_monoscape\Monoscape.Common\SharpZip.cs,Extract,The following statement contains a magic number: using (FileStream streamWriter = File.Create (Path.Combine (extractPath' theEntry.Name))) {  	int size = 2048;  	byte[] data = new byte[2048];  	while (true) {  		size = s.Read (data' 0' data.Length);  		if (size > 0) {  			streamWriter.Write (data' 0' size);  		}  		else {  			break;  		}  	}  }  
Magic Number,Monoscape.Common.Services.FileServer,AbstractFileTransferService,C:\repos\monoscape_monoscape\Monoscape.Common\Services\FileServer\AbstractFileTransferService.cs,UploadApplication,The following statement contains a magic number: try {  	UploadApplicationResponse response = new UploadApplicationResponse ();  	string basePath = GetApplicationStorePath ();  	if (!Directory.Exists (basePath))  		Directory.CreateDirectory (basePath);  	string serverFileName = Path.Combine (basePath' request.Metadata.RemoteFileName);  	using (FileStream outfile = new FileStream (serverFileName' FileMode.Create)) {  		const int bufferSize = 65536;  		// 64K  		Byte[] buffer = new Byte[bufferSize];  		int bytesRead = request.FileByteStream.Read (buffer' 0' bufferSize);  		while (bytesRead > 0) {  			outfile.Write (buffer' 0' bytesRead);  			bytesRead = request.FileByteStream.Read (buffer' 0' bufferSize);  		}  		outfile.Close ();  	}  	//using (ZipFile zip = ZipFile.Read(serverFileName' options))  	{  		if (!MonoscapeUtil.WebConfigExistsInRoot (serverFileName)) {  			if (File.Exists (serverFileName))  				File.Delete (serverFileName);  			throw new MonoscapeException ("Application package is not valid. Re-package the application excluding any project folders and try again.");  		}  	}  	Application application = new Application ();  	application.Id = request.Metadata.ApplicationId;  	application.Name = request.Metadata.ApplicationName;  	application.Version = request.Metadata.ApplicationVersion;  	application.FileName = Path.GetFileName (serverFileName);  	application.State = ApplicationState.Uploaded;  	ApplicationUploaded (application);  	return response;  }  catch (Exception e) {  	Log.Error (this' e);  	throw e;  }  
Magic Number,Monoscape.Common.Services.FileServer,AbstractFileTransferService,C:\repos\monoscape_monoscape\Monoscape.Common\Services\FileServer\AbstractFileTransferService.cs,UploadApplication,The following statement contains a magic number: using (FileStream outfile = new FileStream (serverFileName' FileMode.Create)) {  	const int bufferSize = 65536;  	// 64K  	Byte[] buffer = new Byte[bufferSize];  	int bytesRead = request.FileByteStream.Read (buffer' 0' bufferSize);  	while (bytesRead > 0) {  		outfile.Write (buffer' 0' bytesRead);  		bytesRead = request.FileByteStream.Read (buffer' 0' bufferSize);  	}  	outfile.Close ();  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: try {  	IPEndPoint ipEnd = new IPEndPoint (ipAddress' port);  	serverSocket = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.IP);  	serverSocket.Bind (ipEnd);  	serverSocket.Listen (100);  	while (socketOpen) {  		// Wait for the next connection  		clientSocket = serverSocket.Accept ();  		// Read File Header  		// FileHeader: [fileNameInBytesLength (4bytes) | fileNameInBytes | fileSizeInBytesLength (8bytes) | fileSizeInBytes]  		byte[] fileNameInBytesLengthInBytes = new byte[4];  		Log.Debug (this' "Reading file name length in bytes");  		int bytesRead = clientSocket.Receive (fileNameInBytesLengthInBytes' 4' SocketFlags.None);  		if (bytesRead == 4) {  			int fileNameInBytesLength = BitConverter.ToInt32 (fileNameInBytesLengthInBytes' 0);  			Log.Debug (this' "File name length in bytes: " + fileNameInBytesLength);  			Log.Debug (this' "Reading file name");  			byte[] fileNameInBytes = new byte[fileNameInBytesLength];  			bytesRead = clientSocket.Receive (fileNameInBytes' fileNameInBytesLength' 0);  			if (bytesRead == fileNameInBytesLength) {  				string fileName = Encoding.ASCII.GetString (fileNameInBytes);  				Log.Debug (this' "File name: " + fileName);  				Log.Debug (this' "Reading file size length in bytes");  				byte[] fileSizeInBytesLengthInBytes = new byte[8];  				bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  				if (bytesRead == 8) {  					int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  					Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  					Log.Debug (this' "Reading file size length");  					byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  					bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  					if (bytesRead == 8) {  						long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  						Log.Debug (this' "File size: " + fileSize);  						if (!Directory.Exists (fileStorePath))  							Directory.CreateDirectory (fileStorePath);  						string filePath = Path.Combine (fileStorePath' fileName);  						// Read File Content  						long buffer = 65536;  						// Block size = 64K  						byte[] fileData = new byte[fileSize];  						using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  							bytesRead = 0;  							long totalBytesRead = 0;  							long bytesToRead = buffer;  							Log.Debug (this' "Reading file content... ");  							while (bytesToRead > 0) {  								bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  								if (bytesRead == 0)  									break;  								fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  								totalBytesRead = totalBytesRead + bytesRead;  								bytesToRead = fileSize - totalBytesRead;  								if (bytesToRead < buffer)  									buffer = bytesToRead;  								Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  							}  						}  						Log.Debug (this' "File " + fileName + " written to application store");  					}  					else {  						throw new MonoscapeException ("File header is not valid' could not receive file.");  					}  				}  				else {  					throw new MonoscapeException ("File header is not valid' could not receive file.");  				}  			}  			else {  				throw new MonoscapeException ("File header is not valid' could not receive file.");  			}  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  }  catch (Exception e) {  	if (socketOpen) {  		Log.Error (this' "File receiving failed"' e);  		if (serverSocket.Connected)  			throw e;  	}  }  finally {  	CloseSockets ();  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: try {  	IPEndPoint ipEnd = new IPEndPoint (ipAddress' port);  	serverSocket = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.IP);  	serverSocket.Bind (ipEnd);  	serverSocket.Listen (100);  	while (socketOpen) {  		// Wait for the next connection  		clientSocket = serverSocket.Accept ();  		// Read File Header  		// FileHeader: [fileNameInBytesLength (4bytes) | fileNameInBytes | fileSizeInBytesLength (8bytes) | fileSizeInBytes]  		byte[] fileNameInBytesLengthInBytes = new byte[4];  		Log.Debug (this' "Reading file name length in bytes");  		int bytesRead = clientSocket.Receive (fileNameInBytesLengthInBytes' 4' SocketFlags.None);  		if (bytesRead == 4) {  			int fileNameInBytesLength = BitConverter.ToInt32 (fileNameInBytesLengthInBytes' 0);  			Log.Debug (this' "File name length in bytes: " + fileNameInBytesLength);  			Log.Debug (this' "Reading file name");  			byte[] fileNameInBytes = new byte[fileNameInBytesLength];  			bytesRead = clientSocket.Receive (fileNameInBytes' fileNameInBytesLength' 0);  			if (bytesRead == fileNameInBytesLength) {  				string fileName = Encoding.ASCII.GetString (fileNameInBytes);  				Log.Debug (this' "File name: " + fileName);  				Log.Debug (this' "Reading file size length in bytes");  				byte[] fileSizeInBytesLengthInBytes = new byte[8];  				bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  				if (bytesRead == 8) {  					int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  					Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  					Log.Debug (this' "Reading file size length");  					byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  					bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  					if (bytesRead == 8) {  						long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  						Log.Debug (this' "File size: " + fileSize);  						if (!Directory.Exists (fileStorePath))  							Directory.CreateDirectory (fileStorePath);  						string filePath = Path.Combine (fileStorePath' fileName);  						// Read File Content  						long buffer = 65536;  						// Block size = 64K  						byte[] fileData = new byte[fileSize];  						using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  							bytesRead = 0;  							long totalBytesRead = 0;  							long bytesToRead = buffer;  							Log.Debug (this' "Reading file content... ");  							while (bytesToRead > 0) {  								bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  								if (bytesRead == 0)  									break;  								fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  								totalBytesRead = totalBytesRead + bytesRead;  								bytesToRead = fileSize - totalBytesRead;  								if (bytesToRead < buffer)  									buffer = bytesToRead;  								Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  							}  						}  						Log.Debug (this' "File " + fileName + " written to application store");  					}  					else {  						throw new MonoscapeException ("File header is not valid' could not receive file.");  					}  				}  				else {  					throw new MonoscapeException ("File header is not valid' could not receive file.");  				}  			}  			else {  				throw new MonoscapeException ("File header is not valid' could not receive file.");  			}  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  }  catch (Exception e) {  	if (socketOpen) {  		Log.Error (this' "File receiving failed"' e);  		if (serverSocket.Connected)  			throw e;  	}  }  finally {  	CloseSockets ();  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: try {  	IPEndPoint ipEnd = new IPEndPoint (ipAddress' port);  	serverSocket = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.IP);  	serverSocket.Bind (ipEnd);  	serverSocket.Listen (100);  	while (socketOpen) {  		// Wait for the next connection  		clientSocket = serverSocket.Accept ();  		// Read File Header  		// FileHeader: [fileNameInBytesLength (4bytes) | fileNameInBytes | fileSizeInBytesLength (8bytes) | fileSizeInBytes]  		byte[] fileNameInBytesLengthInBytes = new byte[4];  		Log.Debug (this' "Reading file name length in bytes");  		int bytesRead = clientSocket.Receive (fileNameInBytesLengthInBytes' 4' SocketFlags.None);  		if (bytesRead == 4) {  			int fileNameInBytesLength = BitConverter.ToInt32 (fileNameInBytesLengthInBytes' 0);  			Log.Debug (this' "File name length in bytes: " + fileNameInBytesLength);  			Log.Debug (this' "Reading file name");  			byte[] fileNameInBytes = new byte[fileNameInBytesLength];  			bytesRead = clientSocket.Receive (fileNameInBytes' fileNameInBytesLength' 0);  			if (bytesRead == fileNameInBytesLength) {  				string fileName = Encoding.ASCII.GetString (fileNameInBytes);  				Log.Debug (this' "File name: " + fileName);  				Log.Debug (this' "Reading file size length in bytes");  				byte[] fileSizeInBytesLengthInBytes = new byte[8];  				bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  				if (bytesRead == 8) {  					int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  					Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  					Log.Debug (this' "Reading file size length");  					byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  					bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  					if (bytesRead == 8) {  						long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  						Log.Debug (this' "File size: " + fileSize);  						if (!Directory.Exists (fileStorePath))  							Directory.CreateDirectory (fileStorePath);  						string filePath = Path.Combine (fileStorePath' fileName);  						// Read File Content  						long buffer = 65536;  						// Block size = 64K  						byte[] fileData = new byte[fileSize];  						using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  							bytesRead = 0;  							long totalBytesRead = 0;  							long bytesToRead = buffer;  							Log.Debug (this' "Reading file content... ");  							while (bytesToRead > 0) {  								bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  								if (bytesRead == 0)  									break;  								fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  								totalBytesRead = totalBytesRead + bytesRead;  								bytesToRead = fileSize - totalBytesRead;  								if (bytesToRead < buffer)  									buffer = bytesToRead;  								Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  							}  						}  						Log.Debug (this' "File " + fileName + " written to application store");  					}  					else {  						throw new MonoscapeException ("File header is not valid' could not receive file.");  					}  				}  				else {  					throw new MonoscapeException ("File header is not valid' could not receive file.");  				}  			}  			else {  				throw new MonoscapeException ("File header is not valid' could not receive file.");  			}  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  }  catch (Exception e) {  	if (socketOpen) {  		Log.Error (this' "File receiving failed"' e);  		if (serverSocket.Connected)  			throw e;  	}  }  finally {  	CloseSockets ();  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: try {  	IPEndPoint ipEnd = new IPEndPoint (ipAddress' port);  	serverSocket = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.IP);  	serverSocket.Bind (ipEnd);  	serverSocket.Listen (100);  	while (socketOpen) {  		// Wait for the next connection  		clientSocket = serverSocket.Accept ();  		// Read File Header  		// FileHeader: [fileNameInBytesLength (4bytes) | fileNameInBytes | fileSizeInBytesLength (8bytes) | fileSizeInBytes]  		byte[] fileNameInBytesLengthInBytes = new byte[4];  		Log.Debug (this' "Reading file name length in bytes");  		int bytesRead = clientSocket.Receive (fileNameInBytesLengthInBytes' 4' SocketFlags.None);  		if (bytesRead == 4) {  			int fileNameInBytesLength = BitConverter.ToInt32 (fileNameInBytesLengthInBytes' 0);  			Log.Debug (this' "File name length in bytes: " + fileNameInBytesLength);  			Log.Debug (this' "Reading file name");  			byte[] fileNameInBytes = new byte[fileNameInBytesLength];  			bytesRead = clientSocket.Receive (fileNameInBytes' fileNameInBytesLength' 0);  			if (bytesRead == fileNameInBytesLength) {  				string fileName = Encoding.ASCII.GetString (fileNameInBytes);  				Log.Debug (this' "File name: " + fileName);  				Log.Debug (this' "Reading file size length in bytes");  				byte[] fileSizeInBytesLengthInBytes = new byte[8];  				bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  				if (bytesRead == 8) {  					int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  					Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  					Log.Debug (this' "Reading file size length");  					byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  					bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  					if (bytesRead == 8) {  						long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  						Log.Debug (this' "File size: " + fileSize);  						if (!Directory.Exists (fileStorePath))  							Directory.CreateDirectory (fileStorePath);  						string filePath = Path.Combine (fileStorePath' fileName);  						// Read File Content  						long buffer = 65536;  						// Block size = 64K  						byte[] fileData = new byte[fileSize];  						using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  							bytesRead = 0;  							long totalBytesRead = 0;  							long bytesToRead = buffer;  							Log.Debug (this' "Reading file content... ");  							while (bytesToRead > 0) {  								bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  								if (bytesRead == 0)  									break;  								fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  								totalBytesRead = totalBytesRead + bytesRead;  								bytesToRead = fileSize - totalBytesRead;  								if (bytesToRead < buffer)  									buffer = bytesToRead;  								Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  							}  						}  						Log.Debug (this' "File " + fileName + " written to application store");  					}  					else {  						throw new MonoscapeException ("File header is not valid' could not receive file.");  					}  				}  				else {  					throw new MonoscapeException ("File header is not valid' could not receive file.");  				}  			}  			else {  				throw new MonoscapeException ("File header is not valid' could not receive file.");  			}  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  }  catch (Exception e) {  	if (socketOpen) {  		Log.Error (this' "File receiving failed"' e);  		if (serverSocket.Connected)  			throw e;  	}  }  finally {  	CloseSockets ();  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: try {  	IPEndPoint ipEnd = new IPEndPoint (ipAddress' port);  	serverSocket = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.IP);  	serverSocket.Bind (ipEnd);  	serverSocket.Listen (100);  	while (socketOpen) {  		// Wait for the next connection  		clientSocket = serverSocket.Accept ();  		// Read File Header  		// FileHeader: [fileNameInBytesLength (4bytes) | fileNameInBytes | fileSizeInBytesLength (8bytes) | fileSizeInBytes]  		byte[] fileNameInBytesLengthInBytes = new byte[4];  		Log.Debug (this' "Reading file name length in bytes");  		int bytesRead = clientSocket.Receive (fileNameInBytesLengthInBytes' 4' SocketFlags.None);  		if (bytesRead == 4) {  			int fileNameInBytesLength = BitConverter.ToInt32 (fileNameInBytesLengthInBytes' 0);  			Log.Debug (this' "File name length in bytes: " + fileNameInBytesLength);  			Log.Debug (this' "Reading file name");  			byte[] fileNameInBytes = new byte[fileNameInBytesLength];  			bytesRead = clientSocket.Receive (fileNameInBytes' fileNameInBytesLength' 0);  			if (bytesRead == fileNameInBytesLength) {  				string fileName = Encoding.ASCII.GetString (fileNameInBytes);  				Log.Debug (this' "File name: " + fileName);  				Log.Debug (this' "Reading file size length in bytes");  				byte[] fileSizeInBytesLengthInBytes = new byte[8];  				bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  				if (bytesRead == 8) {  					int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  					Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  					Log.Debug (this' "Reading file size length");  					byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  					bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  					if (bytesRead == 8) {  						long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  						Log.Debug (this' "File size: " + fileSize);  						if (!Directory.Exists (fileStorePath))  							Directory.CreateDirectory (fileStorePath);  						string filePath = Path.Combine (fileStorePath' fileName);  						// Read File Content  						long buffer = 65536;  						// Block size = 64K  						byte[] fileData = new byte[fileSize];  						using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  							bytesRead = 0;  							long totalBytesRead = 0;  							long bytesToRead = buffer;  							Log.Debug (this' "Reading file content... ");  							while (bytesToRead > 0) {  								bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  								if (bytesRead == 0)  									break;  								fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  								totalBytesRead = totalBytesRead + bytesRead;  								bytesToRead = fileSize - totalBytesRead;  								if (bytesToRead < buffer)  									buffer = bytesToRead;  								Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  							}  						}  						Log.Debug (this' "File " + fileName + " written to application store");  					}  					else {  						throw new MonoscapeException ("File header is not valid' could not receive file.");  					}  				}  				else {  					throw new MonoscapeException ("File header is not valid' could not receive file.");  				}  			}  			else {  				throw new MonoscapeException ("File header is not valid' could not receive file.");  			}  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  }  catch (Exception e) {  	if (socketOpen) {  		Log.Error (this' "File receiving failed"' e);  		if (serverSocket.Connected)  			throw e;  	}  }  finally {  	CloseSockets ();  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: try {  	IPEndPoint ipEnd = new IPEndPoint (ipAddress' port);  	serverSocket = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.IP);  	serverSocket.Bind (ipEnd);  	serverSocket.Listen (100);  	while (socketOpen) {  		// Wait for the next connection  		clientSocket = serverSocket.Accept ();  		// Read File Header  		// FileHeader: [fileNameInBytesLength (4bytes) | fileNameInBytes | fileSizeInBytesLength (8bytes) | fileSizeInBytes]  		byte[] fileNameInBytesLengthInBytes = new byte[4];  		Log.Debug (this' "Reading file name length in bytes");  		int bytesRead = clientSocket.Receive (fileNameInBytesLengthInBytes' 4' SocketFlags.None);  		if (bytesRead == 4) {  			int fileNameInBytesLength = BitConverter.ToInt32 (fileNameInBytesLengthInBytes' 0);  			Log.Debug (this' "File name length in bytes: " + fileNameInBytesLength);  			Log.Debug (this' "Reading file name");  			byte[] fileNameInBytes = new byte[fileNameInBytesLength];  			bytesRead = clientSocket.Receive (fileNameInBytes' fileNameInBytesLength' 0);  			if (bytesRead == fileNameInBytesLength) {  				string fileName = Encoding.ASCII.GetString (fileNameInBytes);  				Log.Debug (this' "File name: " + fileName);  				Log.Debug (this' "Reading file size length in bytes");  				byte[] fileSizeInBytesLengthInBytes = new byte[8];  				bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  				if (bytesRead == 8) {  					int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  					Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  					Log.Debug (this' "Reading file size length");  					byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  					bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  					if (bytesRead == 8) {  						long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  						Log.Debug (this' "File size: " + fileSize);  						if (!Directory.Exists (fileStorePath))  							Directory.CreateDirectory (fileStorePath);  						string filePath = Path.Combine (fileStorePath' fileName);  						// Read File Content  						long buffer = 65536;  						// Block size = 64K  						byte[] fileData = new byte[fileSize];  						using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  							bytesRead = 0;  							long totalBytesRead = 0;  							long bytesToRead = buffer;  							Log.Debug (this' "Reading file content... ");  							while (bytesToRead > 0) {  								bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  								if (bytesRead == 0)  									break;  								fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  								totalBytesRead = totalBytesRead + bytesRead;  								bytesToRead = fileSize - totalBytesRead;  								if (bytesToRead < buffer)  									buffer = bytesToRead;  								Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  							}  						}  						Log.Debug (this' "File " + fileName + " written to application store");  					}  					else {  						throw new MonoscapeException ("File header is not valid' could not receive file.");  					}  				}  				else {  					throw new MonoscapeException ("File header is not valid' could not receive file.");  				}  			}  			else {  				throw new MonoscapeException ("File header is not valid' could not receive file.");  			}  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  }  catch (Exception e) {  	if (socketOpen) {  		Log.Error (this' "File receiving failed"' e);  		if (serverSocket.Connected)  			throw e;  	}  }  finally {  	CloseSockets ();  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: try {  	IPEndPoint ipEnd = new IPEndPoint (ipAddress' port);  	serverSocket = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.IP);  	serverSocket.Bind (ipEnd);  	serverSocket.Listen (100);  	while (socketOpen) {  		// Wait for the next connection  		clientSocket = serverSocket.Accept ();  		// Read File Header  		// FileHeader: [fileNameInBytesLength (4bytes) | fileNameInBytes | fileSizeInBytesLength (8bytes) | fileSizeInBytes]  		byte[] fileNameInBytesLengthInBytes = new byte[4];  		Log.Debug (this' "Reading file name length in bytes");  		int bytesRead = clientSocket.Receive (fileNameInBytesLengthInBytes' 4' SocketFlags.None);  		if (bytesRead == 4) {  			int fileNameInBytesLength = BitConverter.ToInt32 (fileNameInBytesLengthInBytes' 0);  			Log.Debug (this' "File name length in bytes: " + fileNameInBytesLength);  			Log.Debug (this' "Reading file name");  			byte[] fileNameInBytes = new byte[fileNameInBytesLength];  			bytesRead = clientSocket.Receive (fileNameInBytes' fileNameInBytesLength' 0);  			if (bytesRead == fileNameInBytesLength) {  				string fileName = Encoding.ASCII.GetString (fileNameInBytes);  				Log.Debug (this' "File name: " + fileName);  				Log.Debug (this' "Reading file size length in bytes");  				byte[] fileSizeInBytesLengthInBytes = new byte[8];  				bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  				if (bytesRead == 8) {  					int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  					Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  					Log.Debug (this' "Reading file size length");  					byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  					bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  					if (bytesRead == 8) {  						long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  						Log.Debug (this' "File size: " + fileSize);  						if (!Directory.Exists (fileStorePath))  							Directory.CreateDirectory (fileStorePath);  						string filePath = Path.Combine (fileStorePath' fileName);  						// Read File Content  						long buffer = 65536;  						// Block size = 64K  						byte[] fileData = new byte[fileSize];  						using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  							bytesRead = 0;  							long totalBytesRead = 0;  							long bytesToRead = buffer;  							Log.Debug (this' "Reading file content... ");  							while (bytesToRead > 0) {  								bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  								if (bytesRead == 0)  									break;  								fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  								totalBytesRead = totalBytesRead + bytesRead;  								bytesToRead = fileSize - totalBytesRead;  								if (bytesToRead < buffer)  									buffer = bytesToRead;  								Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  							}  						}  						Log.Debug (this' "File " + fileName + " written to application store");  					}  					else {  						throw new MonoscapeException ("File header is not valid' could not receive file.");  					}  				}  				else {  					throw new MonoscapeException ("File header is not valid' could not receive file.");  				}  			}  			else {  				throw new MonoscapeException ("File header is not valid' could not receive file.");  			}  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  }  catch (Exception e) {  	if (socketOpen) {  		Log.Error (this' "File receiving failed"' e);  		if (serverSocket.Connected)  			throw e;  	}  }  finally {  	CloseSockets ();  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: try {  	IPEndPoint ipEnd = new IPEndPoint (ipAddress' port);  	serverSocket = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.IP);  	serverSocket.Bind (ipEnd);  	serverSocket.Listen (100);  	while (socketOpen) {  		// Wait for the next connection  		clientSocket = serverSocket.Accept ();  		// Read File Header  		// FileHeader: [fileNameInBytesLength (4bytes) | fileNameInBytes | fileSizeInBytesLength (8bytes) | fileSizeInBytes]  		byte[] fileNameInBytesLengthInBytes = new byte[4];  		Log.Debug (this' "Reading file name length in bytes");  		int bytesRead = clientSocket.Receive (fileNameInBytesLengthInBytes' 4' SocketFlags.None);  		if (bytesRead == 4) {  			int fileNameInBytesLength = BitConverter.ToInt32 (fileNameInBytesLengthInBytes' 0);  			Log.Debug (this' "File name length in bytes: " + fileNameInBytesLength);  			Log.Debug (this' "Reading file name");  			byte[] fileNameInBytes = new byte[fileNameInBytesLength];  			bytesRead = clientSocket.Receive (fileNameInBytes' fileNameInBytesLength' 0);  			if (bytesRead == fileNameInBytesLength) {  				string fileName = Encoding.ASCII.GetString (fileNameInBytes);  				Log.Debug (this' "File name: " + fileName);  				Log.Debug (this' "Reading file size length in bytes");  				byte[] fileSizeInBytesLengthInBytes = new byte[8];  				bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  				if (bytesRead == 8) {  					int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  					Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  					Log.Debug (this' "Reading file size length");  					byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  					bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  					if (bytesRead == 8) {  						long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  						Log.Debug (this' "File size: " + fileSize);  						if (!Directory.Exists (fileStorePath))  							Directory.CreateDirectory (fileStorePath);  						string filePath = Path.Combine (fileStorePath' fileName);  						// Read File Content  						long buffer = 65536;  						// Block size = 64K  						byte[] fileData = new byte[fileSize];  						using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  							bytesRead = 0;  							long totalBytesRead = 0;  							long bytesToRead = buffer;  							Log.Debug (this' "Reading file content... ");  							while (bytesToRead > 0) {  								bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  								if (bytesRead == 0)  									break;  								fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  								totalBytesRead = totalBytesRead + bytesRead;  								bytesToRead = fileSize - totalBytesRead;  								if (bytesToRead < buffer)  									buffer = bytesToRead;  								Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  							}  						}  						Log.Debug (this' "File " + fileName + " written to application store");  					}  					else {  						throw new MonoscapeException ("File header is not valid' could not receive file.");  					}  				}  				else {  					throw new MonoscapeException ("File header is not valid' could not receive file.");  				}  			}  			else {  				throw new MonoscapeException ("File header is not valid' could not receive file.");  			}  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  }  catch (Exception e) {  	if (socketOpen) {  		Log.Error (this' "File receiving failed"' e);  		if (serverSocket.Connected)  			throw e;  	}  }  finally {  	CloseSockets ();  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: try {  	IPEndPoint ipEnd = new IPEndPoint (ipAddress' port);  	serverSocket = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.IP);  	serverSocket.Bind (ipEnd);  	serverSocket.Listen (100);  	while (socketOpen) {  		// Wait for the next connection  		clientSocket = serverSocket.Accept ();  		// Read File Header  		// FileHeader: [fileNameInBytesLength (4bytes) | fileNameInBytes | fileSizeInBytesLength (8bytes) | fileSizeInBytes]  		byte[] fileNameInBytesLengthInBytes = new byte[4];  		Log.Debug (this' "Reading file name length in bytes");  		int bytesRead = clientSocket.Receive (fileNameInBytesLengthInBytes' 4' SocketFlags.None);  		if (bytesRead == 4) {  			int fileNameInBytesLength = BitConverter.ToInt32 (fileNameInBytesLengthInBytes' 0);  			Log.Debug (this' "File name length in bytes: " + fileNameInBytesLength);  			Log.Debug (this' "Reading file name");  			byte[] fileNameInBytes = new byte[fileNameInBytesLength];  			bytesRead = clientSocket.Receive (fileNameInBytes' fileNameInBytesLength' 0);  			if (bytesRead == fileNameInBytesLength) {  				string fileName = Encoding.ASCII.GetString (fileNameInBytes);  				Log.Debug (this' "File name: " + fileName);  				Log.Debug (this' "Reading file size length in bytes");  				byte[] fileSizeInBytesLengthInBytes = new byte[8];  				bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  				if (bytesRead == 8) {  					int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  					Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  					Log.Debug (this' "Reading file size length");  					byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  					bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  					if (bytesRead == 8) {  						long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  						Log.Debug (this' "File size: " + fileSize);  						if (!Directory.Exists (fileStorePath))  							Directory.CreateDirectory (fileStorePath);  						string filePath = Path.Combine (fileStorePath' fileName);  						// Read File Content  						long buffer = 65536;  						// Block size = 64K  						byte[] fileData = new byte[fileSize];  						using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  							bytesRead = 0;  							long totalBytesRead = 0;  							long bytesToRead = buffer;  							Log.Debug (this' "Reading file content... ");  							while (bytesToRead > 0) {  								bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  								if (bytesRead == 0)  									break;  								fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  								totalBytesRead = totalBytesRead + bytesRead;  								bytesToRead = fileSize - totalBytesRead;  								if (bytesToRead < buffer)  									buffer = bytesToRead;  								Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  							}  						}  						Log.Debug (this' "File " + fileName + " written to application store");  					}  					else {  						throw new MonoscapeException ("File header is not valid' could not receive file.");  					}  				}  				else {  					throw new MonoscapeException ("File header is not valid' could not receive file.");  				}  			}  			else {  				throw new MonoscapeException ("File header is not valid' could not receive file.");  			}  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  }  catch (Exception e) {  	if (socketOpen) {  		Log.Error (this' "File receiving failed"' e);  		if (serverSocket.Connected)  			throw e;  	}  }  finally {  	CloseSockets ();  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: try {  	IPEndPoint ipEnd = new IPEndPoint (ipAddress' port);  	serverSocket = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.IP);  	serverSocket.Bind (ipEnd);  	serverSocket.Listen (100);  	while (socketOpen) {  		// Wait for the next connection  		clientSocket = serverSocket.Accept ();  		// Read File Header  		// FileHeader: [fileNameInBytesLength (4bytes) | fileNameInBytes | fileSizeInBytesLength (8bytes) | fileSizeInBytes]  		byte[] fileNameInBytesLengthInBytes = new byte[4];  		Log.Debug (this' "Reading file name length in bytes");  		int bytesRead = clientSocket.Receive (fileNameInBytesLengthInBytes' 4' SocketFlags.None);  		if (bytesRead == 4) {  			int fileNameInBytesLength = BitConverter.ToInt32 (fileNameInBytesLengthInBytes' 0);  			Log.Debug (this' "File name length in bytes: " + fileNameInBytesLength);  			Log.Debug (this' "Reading file name");  			byte[] fileNameInBytes = new byte[fileNameInBytesLength];  			bytesRead = clientSocket.Receive (fileNameInBytes' fileNameInBytesLength' 0);  			if (bytesRead == fileNameInBytesLength) {  				string fileName = Encoding.ASCII.GetString (fileNameInBytes);  				Log.Debug (this' "File name: " + fileName);  				Log.Debug (this' "Reading file size length in bytes");  				byte[] fileSizeInBytesLengthInBytes = new byte[8];  				bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  				if (bytesRead == 8) {  					int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  					Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  					Log.Debug (this' "Reading file size length");  					byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  					bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  					if (bytesRead == 8) {  						long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  						Log.Debug (this' "File size: " + fileSize);  						if (!Directory.Exists (fileStorePath))  							Directory.CreateDirectory (fileStorePath);  						string filePath = Path.Combine (fileStorePath' fileName);  						// Read File Content  						long buffer = 65536;  						// Block size = 64K  						byte[] fileData = new byte[fileSize];  						using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  							bytesRead = 0;  							long totalBytesRead = 0;  							long bytesToRead = buffer;  							Log.Debug (this' "Reading file content... ");  							while (bytesToRead > 0) {  								bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  								if (bytesRead == 0)  									break;  								fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  								totalBytesRead = totalBytesRead + bytesRead;  								bytesToRead = fileSize - totalBytesRead;  								if (bytesToRead < buffer)  									buffer = bytesToRead;  								Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  							}  						}  						Log.Debug (this' "File " + fileName + " written to application store");  					}  					else {  						throw new MonoscapeException ("File header is not valid' could not receive file.");  					}  				}  				else {  					throw new MonoscapeException ("File header is not valid' could not receive file.");  				}  			}  			else {  				throw new MonoscapeException ("File header is not valid' could not receive file.");  			}  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  }  catch (Exception e) {  	if (socketOpen) {  		Log.Error (this' "File receiving failed"' e);  		if (serverSocket.Connected)  			throw e;  	}  }  finally {  	CloseSockets ();  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: serverSocket.Listen (100);  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: while (socketOpen) {  	// Wait for the next connection  	clientSocket = serverSocket.Accept ();  	// Read File Header  	// FileHeader: [fileNameInBytesLength (4bytes) | fileNameInBytes | fileSizeInBytesLength (8bytes) | fileSizeInBytes]  	byte[] fileNameInBytesLengthInBytes = new byte[4];  	Log.Debug (this' "Reading file name length in bytes");  	int bytesRead = clientSocket.Receive (fileNameInBytesLengthInBytes' 4' SocketFlags.None);  	if (bytesRead == 4) {  		int fileNameInBytesLength = BitConverter.ToInt32 (fileNameInBytesLengthInBytes' 0);  		Log.Debug (this' "File name length in bytes: " + fileNameInBytesLength);  		Log.Debug (this' "Reading file name");  		byte[] fileNameInBytes = new byte[fileNameInBytesLength];  		bytesRead = clientSocket.Receive (fileNameInBytes' fileNameInBytesLength' 0);  		if (bytesRead == fileNameInBytesLength) {  			string fileName = Encoding.ASCII.GetString (fileNameInBytes);  			Log.Debug (this' "File name: " + fileName);  			Log.Debug (this' "Reading file size length in bytes");  			byte[] fileSizeInBytesLengthInBytes = new byte[8];  			bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  			if (bytesRead == 8) {  				int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  				Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  				Log.Debug (this' "Reading file size length");  				byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  				bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  				if (bytesRead == 8) {  					long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  					Log.Debug (this' "File size: " + fileSize);  					if (!Directory.Exists (fileStorePath))  						Directory.CreateDirectory (fileStorePath);  					string filePath = Path.Combine (fileStorePath' fileName);  					// Read File Content  					long buffer = 65536;  					// Block size = 64K  					byte[] fileData = new byte[fileSize];  					using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  						bytesRead = 0;  						long totalBytesRead = 0;  						long bytesToRead = buffer;  						Log.Debug (this' "Reading file content... ");  						while (bytesToRead > 0) {  							bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  							if (bytesRead == 0)  								break;  							fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  							totalBytesRead = totalBytesRead + bytesRead;  							bytesToRead = fileSize - totalBytesRead;  							if (bytesToRead < buffer)  								buffer = bytesToRead;  							Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  						}  					}  					Log.Debug (this' "File " + fileName + " written to application store");  				}  				else {  					throw new MonoscapeException ("File header is not valid' could not receive file.");  				}  			}  			else {  				throw new MonoscapeException ("File header is not valid' could not receive file.");  			}  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  	else {  		throw new MonoscapeException ("File header is not valid' could not receive file.");  	}  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: while (socketOpen) {  	// Wait for the next connection  	clientSocket = serverSocket.Accept ();  	// Read File Header  	// FileHeader: [fileNameInBytesLength (4bytes) | fileNameInBytes | fileSizeInBytesLength (8bytes) | fileSizeInBytes]  	byte[] fileNameInBytesLengthInBytes = new byte[4];  	Log.Debug (this' "Reading file name length in bytes");  	int bytesRead = clientSocket.Receive (fileNameInBytesLengthInBytes' 4' SocketFlags.None);  	if (bytesRead == 4) {  		int fileNameInBytesLength = BitConverter.ToInt32 (fileNameInBytesLengthInBytes' 0);  		Log.Debug (this' "File name length in bytes: " + fileNameInBytesLength);  		Log.Debug (this' "Reading file name");  		byte[] fileNameInBytes = new byte[fileNameInBytesLength];  		bytesRead = clientSocket.Receive (fileNameInBytes' fileNameInBytesLength' 0);  		if (bytesRead == fileNameInBytesLength) {  			string fileName = Encoding.ASCII.GetString (fileNameInBytes);  			Log.Debug (this' "File name: " + fileName);  			Log.Debug (this' "Reading file size length in bytes");  			byte[] fileSizeInBytesLengthInBytes = new byte[8];  			bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  			if (bytesRead == 8) {  				int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  				Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  				Log.Debug (this' "Reading file size length");  				byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  				bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  				if (bytesRead == 8) {  					long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  					Log.Debug (this' "File size: " + fileSize);  					if (!Directory.Exists (fileStorePath))  						Directory.CreateDirectory (fileStorePath);  					string filePath = Path.Combine (fileStorePath' fileName);  					// Read File Content  					long buffer = 65536;  					// Block size = 64K  					byte[] fileData = new byte[fileSize];  					using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  						bytesRead = 0;  						long totalBytesRead = 0;  						long bytesToRead = buffer;  						Log.Debug (this' "Reading file content... ");  						while (bytesToRead > 0) {  							bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  							if (bytesRead == 0)  								break;  							fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  							totalBytesRead = totalBytesRead + bytesRead;  							bytesToRead = fileSize - totalBytesRead;  							if (bytesToRead < buffer)  								buffer = bytesToRead;  							Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  						}  					}  					Log.Debug (this' "File " + fileName + " written to application store");  				}  				else {  					throw new MonoscapeException ("File header is not valid' could not receive file.");  				}  			}  			else {  				throw new MonoscapeException ("File header is not valid' could not receive file.");  			}  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  	else {  		throw new MonoscapeException ("File header is not valid' could not receive file.");  	}  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: while (socketOpen) {  	// Wait for the next connection  	clientSocket = serverSocket.Accept ();  	// Read File Header  	// FileHeader: [fileNameInBytesLength (4bytes) | fileNameInBytes | fileSizeInBytesLength (8bytes) | fileSizeInBytes]  	byte[] fileNameInBytesLengthInBytes = new byte[4];  	Log.Debug (this' "Reading file name length in bytes");  	int bytesRead = clientSocket.Receive (fileNameInBytesLengthInBytes' 4' SocketFlags.None);  	if (bytesRead == 4) {  		int fileNameInBytesLength = BitConverter.ToInt32 (fileNameInBytesLengthInBytes' 0);  		Log.Debug (this' "File name length in bytes: " + fileNameInBytesLength);  		Log.Debug (this' "Reading file name");  		byte[] fileNameInBytes = new byte[fileNameInBytesLength];  		bytesRead = clientSocket.Receive (fileNameInBytes' fileNameInBytesLength' 0);  		if (bytesRead == fileNameInBytesLength) {  			string fileName = Encoding.ASCII.GetString (fileNameInBytes);  			Log.Debug (this' "File name: " + fileName);  			Log.Debug (this' "Reading file size length in bytes");  			byte[] fileSizeInBytesLengthInBytes = new byte[8];  			bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  			if (bytesRead == 8) {  				int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  				Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  				Log.Debug (this' "Reading file size length");  				byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  				bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  				if (bytesRead == 8) {  					long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  					Log.Debug (this' "File size: " + fileSize);  					if (!Directory.Exists (fileStorePath))  						Directory.CreateDirectory (fileStorePath);  					string filePath = Path.Combine (fileStorePath' fileName);  					// Read File Content  					long buffer = 65536;  					// Block size = 64K  					byte[] fileData = new byte[fileSize];  					using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  						bytesRead = 0;  						long totalBytesRead = 0;  						long bytesToRead = buffer;  						Log.Debug (this' "Reading file content... ");  						while (bytesToRead > 0) {  							bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  							if (bytesRead == 0)  								break;  							fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  							totalBytesRead = totalBytesRead + bytesRead;  							bytesToRead = fileSize - totalBytesRead;  							if (bytesToRead < buffer)  								buffer = bytesToRead;  							Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  						}  					}  					Log.Debug (this' "File " + fileName + " written to application store");  				}  				else {  					throw new MonoscapeException ("File header is not valid' could not receive file.");  				}  			}  			else {  				throw new MonoscapeException ("File header is not valid' could not receive file.");  			}  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  	else {  		throw new MonoscapeException ("File header is not valid' could not receive file.");  	}  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: while (socketOpen) {  	// Wait for the next connection  	clientSocket = serverSocket.Accept ();  	// Read File Header  	// FileHeader: [fileNameInBytesLength (4bytes) | fileNameInBytes | fileSizeInBytesLength (8bytes) | fileSizeInBytes]  	byte[] fileNameInBytesLengthInBytes = new byte[4];  	Log.Debug (this' "Reading file name length in bytes");  	int bytesRead = clientSocket.Receive (fileNameInBytesLengthInBytes' 4' SocketFlags.None);  	if (bytesRead == 4) {  		int fileNameInBytesLength = BitConverter.ToInt32 (fileNameInBytesLengthInBytes' 0);  		Log.Debug (this' "File name length in bytes: " + fileNameInBytesLength);  		Log.Debug (this' "Reading file name");  		byte[] fileNameInBytes = new byte[fileNameInBytesLength];  		bytesRead = clientSocket.Receive (fileNameInBytes' fileNameInBytesLength' 0);  		if (bytesRead == fileNameInBytesLength) {  			string fileName = Encoding.ASCII.GetString (fileNameInBytes);  			Log.Debug (this' "File name: " + fileName);  			Log.Debug (this' "Reading file size length in bytes");  			byte[] fileSizeInBytesLengthInBytes = new byte[8];  			bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  			if (bytesRead == 8) {  				int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  				Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  				Log.Debug (this' "Reading file size length");  				byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  				bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  				if (bytesRead == 8) {  					long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  					Log.Debug (this' "File size: " + fileSize);  					if (!Directory.Exists (fileStorePath))  						Directory.CreateDirectory (fileStorePath);  					string filePath = Path.Combine (fileStorePath' fileName);  					// Read File Content  					long buffer = 65536;  					// Block size = 64K  					byte[] fileData = new byte[fileSize];  					using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  						bytesRead = 0;  						long totalBytesRead = 0;  						long bytesToRead = buffer;  						Log.Debug (this' "Reading file content... ");  						while (bytesToRead > 0) {  							bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  							if (bytesRead == 0)  								break;  							fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  							totalBytesRead = totalBytesRead + bytesRead;  							bytesToRead = fileSize - totalBytesRead;  							if (bytesToRead < buffer)  								buffer = bytesToRead;  							Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  						}  					}  					Log.Debug (this' "File " + fileName + " written to application store");  				}  				else {  					throw new MonoscapeException ("File header is not valid' could not receive file.");  				}  			}  			else {  				throw new MonoscapeException ("File header is not valid' could not receive file.");  			}  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  	else {  		throw new MonoscapeException ("File header is not valid' could not receive file.");  	}  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: while (socketOpen) {  	// Wait for the next connection  	clientSocket = serverSocket.Accept ();  	// Read File Header  	// FileHeader: [fileNameInBytesLength (4bytes) | fileNameInBytes | fileSizeInBytesLength (8bytes) | fileSizeInBytes]  	byte[] fileNameInBytesLengthInBytes = new byte[4];  	Log.Debug (this' "Reading file name length in bytes");  	int bytesRead = clientSocket.Receive (fileNameInBytesLengthInBytes' 4' SocketFlags.None);  	if (bytesRead == 4) {  		int fileNameInBytesLength = BitConverter.ToInt32 (fileNameInBytesLengthInBytes' 0);  		Log.Debug (this' "File name length in bytes: " + fileNameInBytesLength);  		Log.Debug (this' "Reading file name");  		byte[] fileNameInBytes = new byte[fileNameInBytesLength];  		bytesRead = clientSocket.Receive (fileNameInBytes' fileNameInBytesLength' 0);  		if (bytesRead == fileNameInBytesLength) {  			string fileName = Encoding.ASCII.GetString (fileNameInBytes);  			Log.Debug (this' "File name: " + fileName);  			Log.Debug (this' "Reading file size length in bytes");  			byte[] fileSizeInBytesLengthInBytes = new byte[8];  			bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  			if (bytesRead == 8) {  				int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  				Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  				Log.Debug (this' "Reading file size length");  				byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  				bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  				if (bytesRead == 8) {  					long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  					Log.Debug (this' "File size: " + fileSize);  					if (!Directory.Exists (fileStorePath))  						Directory.CreateDirectory (fileStorePath);  					string filePath = Path.Combine (fileStorePath' fileName);  					// Read File Content  					long buffer = 65536;  					// Block size = 64K  					byte[] fileData = new byte[fileSize];  					using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  						bytesRead = 0;  						long totalBytesRead = 0;  						long bytesToRead = buffer;  						Log.Debug (this' "Reading file content... ");  						while (bytesToRead > 0) {  							bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  							if (bytesRead == 0)  								break;  							fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  							totalBytesRead = totalBytesRead + bytesRead;  							bytesToRead = fileSize - totalBytesRead;  							if (bytesToRead < buffer)  								buffer = bytesToRead;  							Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  						}  					}  					Log.Debug (this' "File " + fileName + " written to application store");  				}  				else {  					throw new MonoscapeException ("File header is not valid' could not receive file.");  				}  			}  			else {  				throw new MonoscapeException ("File header is not valid' could not receive file.");  			}  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  	else {  		throw new MonoscapeException ("File header is not valid' could not receive file.");  	}  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: while (socketOpen) {  	// Wait for the next connection  	clientSocket = serverSocket.Accept ();  	// Read File Header  	// FileHeader: [fileNameInBytesLength (4bytes) | fileNameInBytes | fileSizeInBytesLength (8bytes) | fileSizeInBytes]  	byte[] fileNameInBytesLengthInBytes = new byte[4];  	Log.Debug (this' "Reading file name length in bytes");  	int bytesRead = clientSocket.Receive (fileNameInBytesLengthInBytes' 4' SocketFlags.None);  	if (bytesRead == 4) {  		int fileNameInBytesLength = BitConverter.ToInt32 (fileNameInBytesLengthInBytes' 0);  		Log.Debug (this' "File name length in bytes: " + fileNameInBytesLength);  		Log.Debug (this' "Reading file name");  		byte[] fileNameInBytes = new byte[fileNameInBytesLength];  		bytesRead = clientSocket.Receive (fileNameInBytes' fileNameInBytesLength' 0);  		if (bytesRead == fileNameInBytesLength) {  			string fileName = Encoding.ASCII.GetString (fileNameInBytes);  			Log.Debug (this' "File name: " + fileName);  			Log.Debug (this' "Reading file size length in bytes");  			byte[] fileSizeInBytesLengthInBytes = new byte[8];  			bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  			if (bytesRead == 8) {  				int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  				Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  				Log.Debug (this' "Reading file size length");  				byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  				bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  				if (bytesRead == 8) {  					long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  					Log.Debug (this' "File size: " + fileSize);  					if (!Directory.Exists (fileStorePath))  						Directory.CreateDirectory (fileStorePath);  					string filePath = Path.Combine (fileStorePath' fileName);  					// Read File Content  					long buffer = 65536;  					// Block size = 64K  					byte[] fileData = new byte[fileSize];  					using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  						bytesRead = 0;  						long totalBytesRead = 0;  						long bytesToRead = buffer;  						Log.Debug (this' "Reading file content... ");  						while (bytesToRead > 0) {  							bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  							if (bytesRead == 0)  								break;  							fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  							totalBytesRead = totalBytesRead + bytesRead;  							bytesToRead = fileSize - totalBytesRead;  							if (bytesToRead < buffer)  								buffer = bytesToRead;  							Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  						}  					}  					Log.Debug (this' "File " + fileName + " written to application store");  				}  				else {  					throw new MonoscapeException ("File header is not valid' could not receive file.");  				}  			}  			else {  				throw new MonoscapeException ("File header is not valid' could not receive file.");  			}  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  	else {  		throw new MonoscapeException ("File header is not valid' could not receive file.");  	}  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: while (socketOpen) {  	// Wait for the next connection  	clientSocket = serverSocket.Accept ();  	// Read File Header  	// FileHeader: [fileNameInBytesLength (4bytes) | fileNameInBytes | fileSizeInBytesLength (8bytes) | fileSizeInBytes]  	byte[] fileNameInBytesLengthInBytes = new byte[4];  	Log.Debug (this' "Reading file name length in bytes");  	int bytesRead = clientSocket.Receive (fileNameInBytesLengthInBytes' 4' SocketFlags.None);  	if (bytesRead == 4) {  		int fileNameInBytesLength = BitConverter.ToInt32 (fileNameInBytesLengthInBytes' 0);  		Log.Debug (this' "File name length in bytes: " + fileNameInBytesLength);  		Log.Debug (this' "Reading file name");  		byte[] fileNameInBytes = new byte[fileNameInBytesLength];  		bytesRead = clientSocket.Receive (fileNameInBytes' fileNameInBytesLength' 0);  		if (bytesRead == fileNameInBytesLength) {  			string fileName = Encoding.ASCII.GetString (fileNameInBytes);  			Log.Debug (this' "File name: " + fileName);  			Log.Debug (this' "Reading file size length in bytes");  			byte[] fileSizeInBytesLengthInBytes = new byte[8];  			bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  			if (bytesRead == 8) {  				int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  				Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  				Log.Debug (this' "Reading file size length");  				byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  				bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  				if (bytesRead == 8) {  					long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  					Log.Debug (this' "File size: " + fileSize);  					if (!Directory.Exists (fileStorePath))  						Directory.CreateDirectory (fileStorePath);  					string filePath = Path.Combine (fileStorePath' fileName);  					// Read File Content  					long buffer = 65536;  					// Block size = 64K  					byte[] fileData = new byte[fileSize];  					using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  						bytesRead = 0;  						long totalBytesRead = 0;  						long bytesToRead = buffer;  						Log.Debug (this' "Reading file content... ");  						while (bytesToRead > 0) {  							bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  							if (bytesRead == 0)  								break;  							fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  							totalBytesRead = totalBytesRead + bytesRead;  							bytesToRead = fileSize - totalBytesRead;  							if (bytesToRead < buffer)  								buffer = bytesToRead;  							Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  						}  					}  					Log.Debug (this' "File " + fileName + " written to application store");  				}  				else {  					throw new MonoscapeException ("File header is not valid' could not receive file.");  				}  			}  			else {  				throw new MonoscapeException ("File header is not valid' could not receive file.");  			}  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  	else {  		throw new MonoscapeException ("File header is not valid' could not receive file.");  	}  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: while (socketOpen) {  	// Wait for the next connection  	clientSocket = serverSocket.Accept ();  	// Read File Header  	// FileHeader: [fileNameInBytesLength (4bytes) | fileNameInBytes | fileSizeInBytesLength (8bytes) | fileSizeInBytes]  	byte[] fileNameInBytesLengthInBytes = new byte[4];  	Log.Debug (this' "Reading file name length in bytes");  	int bytesRead = clientSocket.Receive (fileNameInBytesLengthInBytes' 4' SocketFlags.None);  	if (bytesRead == 4) {  		int fileNameInBytesLength = BitConverter.ToInt32 (fileNameInBytesLengthInBytes' 0);  		Log.Debug (this' "File name length in bytes: " + fileNameInBytesLength);  		Log.Debug (this' "Reading file name");  		byte[] fileNameInBytes = new byte[fileNameInBytesLength];  		bytesRead = clientSocket.Receive (fileNameInBytes' fileNameInBytesLength' 0);  		if (bytesRead == fileNameInBytesLength) {  			string fileName = Encoding.ASCII.GetString (fileNameInBytes);  			Log.Debug (this' "File name: " + fileName);  			Log.Debug (this' "Reading file size length in bytes");  			byte[] fileSizeInBytesLengthInBytes = new byte[8];  			bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  			if (bytesRead == 8) {  				int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  				Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  				Log.Debug (this' "Reading file size length");  				byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  				bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  				if (bytesRead == 8) {  					long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  					Log.Debug (this' "File size: " + fileSize);  					if (!Directory.Exists (fileStorePath))  						Directory.CreateDirectory (fileStorePath);  					string filePath = Path.Combine (fileStorePath' fileName);  					// Read File Content  					long buffer = 65536;  					// Block size = 64K  					byte[] fileData = new byte[fileSize];  					using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  						bytesRead = 0;  						long totalBytesRead = 0;  						long bytesToRead = buffer;  						Log.Debug (this' "Reading file content... ");  						while (bytesToRead > 0) {  							bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  							if (bytesRead == 0)  								break;  							fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  							totalBytesRead = totalBytesRead + bytesRead;  							bytesToRead = fileSize - totalBytesRead;  							if (bytesToRead < buffer)  								buffer = bytesToRead;  							Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  						}  					}  					Log.Debug (this' "File " + fileName + " written to application store");  				}  				else {  					throw new MonoscapeException ("File header is not valid' could not receive file.");  				}  			}  			else {  				throw new MonoscapeException ("File header is not valid' could not receive file.");  			}  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  	else {  		throw new MonoscapeException ("File header is not valid' could not receive file.");  	}  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: while (socketOpen) {  	// Wait for the next connection  	clientSocket = serverSocket.Accept ();  	// Read File Header  	// FileHeader: [fileNameInBytesLength (4bytes) | fileNameInBytes | fileSizeInBytesLength (8bytes) | fileSizeInBytes]  	byte[] fileNameInBytesLengthInBytes = new byte[4];  	Log.Debug (this' "Reading file name length in bytes");  	int bytesRead = clientSocket.Receive (fileNameInBytesLengthInBytes' 4' SocketFlags.None);  	if (bytesRead == 4) {  		int fileNameInBytesLength = BitConverter.ToInt32 (fileNameInBytesLengthInBytes' 0);  		Log.Debug (this' "File name length in bytes: " + fileNameInBytesLength);  		Log.Debug (this' "Reading file name");  		byte[] fileNameInBytes = new byte[fileNameInBytesLength];  		bytesRead = clientSocket.Receive (fileNameInBytes' fileNameInBytesLength' 0);  		if (bytesRead == fileNameInBytesLength) {  			string fileName = Encoding.ASCII.GetString (fileNameInBytes);  			Log.Debug (this' "File name: " + fileName);  			Log.Debug (this' "Reading file size length in bytes");  			byte[] fileSizeInBytesLengthInBytes = new byte[8];  			bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  			if (bytesRead == 8) {  				int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  				Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  				Log.Debug (this' "Reading file size length");  				byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  				bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  				if (bytesRead == 8) {  					long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  					Log.Debug (this' "File size: " + fileSize);  					if (!Directory.Exists (fileStorePath))  						Directory.CreateDirectory (fileStorePath);  					string filePath = Path.Combine (fileStorePath' fileName);  					// Read File Content  					long buffer = 65536;  					// Block size = 64K  					byte[] fileData = new byte[fileSize];  					using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  						bytesRead = 0;  						long totalBytesRead = 0;  						long bytesToRead = buffer;  						Log.Debug (this' "Reading file content... ");  						while (bytesToRead > 0) {  							bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  							if (bytesRead == 0)  								break;  							fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  							totalBytesRead = totalBytesRead + bytesRead;  							bytesToRead = fileSize - totalBytesRead;  							if (bytesToRead < buffer)  								buffer = bytesToRead;  							Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  						}  					}  					Log.Debug (this' "File " + fileName + " written to application store");  				}  				else {  					throw new MonoscapeException ("File header is not valid' could not receive file.");  				}  			}  			else {  				throw new MonoscapeException ("File header is not valid' could not receive file.");  			}  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  	else {  		throw new MonoscapeException ("File header is not valid' could not receive file.");  	}  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: if (bytesRead == 4) {  	int fileNameInBytesLength = BitConverter.ToInt32 (fileNameInBytesLengthInBytes' 0);  	Log.Debug (this' "File name length in bytes: " + fileNameInBytesLength);  	Log.Debug (this' "Reading file name");  	byte[] fileNameInBytes = new byte[fileNameInBytesLength];  	bytesRead = clientSocket.Receive (fileNameInBytes' fileNameInBytesLength' 0);  	if (bytesRead == fileNameInBytesLength) {  		string fileName = Encoding.ASCII.GetString (fileNameInBytes);  		Log.Debug (this' "File name: " + fileName);  		Log.Debug (this' "Reading file size length in bytes");  		byte[] fileSizeInBytesLengthInBytes = new byte[8];  		bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  		if (bytesRead == 8) {  			int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  			Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  			Log.Debug (this' "Reading file size length");  			byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  			bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  			if (bytesRead == 8) {  				long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  				Log.Debug (this' "File size: " + fileSize);  				if (!Directory.Exists (fileStorePath))  					Directory.CreateDirectory (fileStorePath);  				string filePath = Path.Combine (fileStorePath' fileName);  				// Read File Content  				long buffer = 65536;  				// Block size = 64K  				byte[] fileData = new byte[fileSize];  				using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  					bytesRead = 0;  					long totalBytesRead = 0;  					long bytesToRead = buffer;  					Log.Debug (this' "Reading file content... ");  					while (bytesToRead > 0) {  						bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  						if (bytesRead == 0)  							break;  						fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  						totalBytesRead = totalBytesRead + bytesRead;  						bytesToRead = fileSize - totalBytesRead;  						if (bytesToRead < buffer)  							buffer = bytesToRead;  						Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  					}  				}  				Log.Debug (this' "File " + fileName + " written to application store");  			}  			else {  				throw new MonoscapeException ("File header is not valid' could not receive file.");  			}  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  	else {  		throw new MonoscapeException ("File header is not valid' could not receive file.");  	}  }  else {  	throw new MonoscapeException ("File header is not valid' could not receive file.");  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: if (bytesRead == 4) {  	int fileNameInBytesLength = BitConverter.ToInt32 (fileNameInBytesLengthInBytes' 0);  	Log.Debug (this' "File name length in bytes: " + fileNameInBytesLength);  	Log.Debug (this' "Reading file name");  	byte[] fileNameInBytes = new byte[fileNameInBytesLength];  	bytesRead = clientSocket.Receive (fileNameInBytes' fileNameInBytesLength' 0);  	if (bytesRead == fileNameInBytesLength) {  		string fileName = Encoding.ASCII.GetString (fileNameInBytes);  		Log.Debug (this' "File name: " + fileName);  		Log.Debug (this' "Reading file size length in bytes");  		byte[] fileSizeInBytesLengthInBytes = new byte[8];  		bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  		if (bytesRead == 8) {  			int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  			Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  			Log.Debug (this' "Reading file size length");  			byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  			bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  			if (bytesRead == 8) {  				long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  				Log.Debug (this' "File size: " + fileSize);  				if (!Directory.Exists (fileStorePath))  					Directory.CreateDirectory (fileStorePath);  				string filePath = Path.Combine (fileStorePath' fileName);  				// Read File Content  				long buffer = 65536;  				// Block size = 64K  				byte[] fileData = new byte[fileSize];  				using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  					bytesRead = 0;  					long totalBytesRead = 0;  					long bytesToRead = buffer;  					Log.Debug (this' "Reading file content... ");  					while (bytesToRead > 0) {  						bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  						if (bytesRead == 0)  							break;  						fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  						totalBytesRead = totalBytesRead + bytesRead;  						bytesToRead = fileSize - totalBytesRead;  						if (bytesToRead < buffer)  							buffer = bytesToRead;  						Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  					}  				}  				Log.Debug (this' "File " + fileName + " written to application store");  			}  			else {  				throw new MonoscapeException ("File header is not valid' could not receive file.");  			}  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  	else {  		throw new MonoscapeException ("File header is not valid' could not receive file.");  	}  }  else {  	throw new MonoscapeException ("File header is not valid' could not receive file.");  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: if (bytesRead == 4) {  	int fileNameInBytesLength = BitConverter.ToInt32 (fileNameInBytesLengthInBytes' 0);  	Log.Debug (this' "File name length in bytes: " + fileNameInBytesLength);  	Log.Debug (this' "Reading file name");  	byte[] fileNameInBytes = new byte[fileNameInBytesLength];  	bytesRead = clientSocket.Receive (fileNameInBytes' fileNameInBytesLength' 0);  	if (bytesRead == fileNameInBytesLength) {  		string fileName = Encoding.ASCII.GetString (fileNameInBytes);  		Log.Debug (this' "File name: " + fileName);  		Log.Debug (this' "Reading file size length in bytes");  		byte[] fileSizeInBytesLengthInBytes = new byte[8];  		bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  		if (bytesRead == 8) {  			int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  			Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  			Log.Debug (this' "Reading file size length");  			byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  			bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  			if (bytesRead == 8) {  				long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  				Log.Debug (this' "File size: " + fileSize);  				if (!Directory.Exists (fileStorePath))  					Directory.CreateDirectory (fileStorePath);  				string filePath = Path.Combine (fileStorePath' fileName);  				// Read File Content  				long buffer = 65536;  				// Block size = 64K  				byte[] fileData = new byte[fileSize];  				using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  					bytesRead = 0;  					long totalBytesRead = 0;  					long bytesToRead = buffer;  					Log.Debug (this' "Reading file content... ");  					while (bytesToRead > 0) {  						bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  						if (bytesRead == 0)  							break;  						fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  						totalBytesRead = totalBytesRead + bytesRead;  						bytesToRead = fileSize - totalBytesRead;  						if (bytesToRead < buffer)  							buffer = bytesToRead;  						Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  					}  				}  				Log.Debug (this' "File " + fileName + " written to application store");  			}  			else {  				throw new MonoscapeException ("File header is not valid' could not receive file.");  			}  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  	else {  		throw new MonoscapeException ("File header is not valid' could not receive file.");  	}  }  else {  	throw new MonoscapeException ("File header is not valid' could not receive file.");  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: if (bytesRead == 4) {  	int fileNameInBytesLength = BitConverter.ToInt32 (fileNameInBytesLengthInBytes' 0);  	Log.Debug (this' "File name length in bytes: " + fileNameInBytesLength);  	Log.Debug (this' "Reading file name");  	byte[] fileNameInBytes = new byte[fileNameInBytesLength];  	bytesRead = clientSocket.Receive (fileNameInBytes' fileNameInBytesLength' 0);  	if (bytesRead == fileNameInBytesLength) {  		string fileName = Encoding.ASCII.GetString (fileNameInBytes);  		Log.Debug (this' "File name: " + fileName);  		Log.Debug (this' "Reading file size length in bytes");  		byte[] fileSizeInBytesLengthInBytes = new byte[8];  		bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  		if (bytesRead == 8) {  			int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  			Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  			Log.Debug (this' "Reading file size length");  			byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  			bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  			if (bytesRead == 8) {  				long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  				Log.Debug (this' "File size: " + fileSize);  				if (!Directory.Exists (fileStorePath))  					Directory.CreateDirectory (fileStorePath);  				string filePath = Path.Combine (fileStorePath' fileName);  				// Read File Content  				long buffer = 65536;  				// Block size = 64K  				byte[] fileData = new byte[fileSize];  				using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  					bytesRead = 0;  					long totalBytesRead = 0;  					long bytesToRead = buffer;  					Log.Debug (this' "Reading file content... ");  					while (bytesToRead > 0) {  						bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  						if (bytesRead == 0)  							break;  						fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  						totalBytesRead = totalBytesRead + bytesRead;  						bytesToRead = fileSize - totalBytesRead;  						if (bytesToRead < buffer)  							buffer = bytesToRead;  						Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  					}  				}  				Log.Debug (this' "File " + fileName + " written to application store");  			}  			else {  				throw new MonoscapeException ("File header is not valid' could not receive file.");  			}  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  	else {  		throw new MonoscapeException ("File header is not valid' could not receive file.");  	}  }  else {  	throw new MonoscapeException ("File header is not valid' could not receive file.");  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: if (bytesRead == 4) {  	int fileNameInBytesLength = BitConverter.ToInt32 (fileNameInBytesLengthInBytes' 0);  	Log.Debug (this' "File name length in bytes: " + fileNameInBytesLength);  	Log.Debug (this' "Reading file name");  	byte[] fileNameInBytes = new byte[fileNameInBytesLength];  	bytesRead = clientSocket.Receive (fileNameInBytes' fileNameInBytesLength' 0);  	if (bytesRead == fileNameInBytesLength) {  		string fileName = Encoding.ASCII.GetString (fileNameInBytes);  		Log.Debug (this' "File name: " + fileName);  		Log.Debug (this' "Reading file size length in bytes");  		byte[] fileSizeInBytesLengthInBytes = new byte[8];  		bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  		if (bytesRead == 8) {  			int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  			Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  			Log.Debug (this' "Reading file size length");  			byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  			bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  			if (bytesRead == 8) {  				long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  				Log.Debug (this' "File size: " + fileSize);  				if (!Directory.Exists (fileStorePath))  					Directory.CreateDirectory (fileStorePath);  				string filePath = Path.Combine (fileStorePath' fileName);  				// Read File Content  				long buffer = 65536;  				// Block size = 64K  				byte[] fileData = new byte[fileSize];  				using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  					bytesRead = 0;  					long totalBytesRead = 0;  					long bytesToRead = buffer;  					Log.Debug (this' "Reading file content... ");  					while (bytesToRead > 0) {  						bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  						if (bytesRead == 0)  							break;  						fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  						totalBytesRead = totalBytesRead + bytesRead;  						bytesToRead = fileSize - totalBytesRead;  						if (bytesToRead < buffer)  							buffer = bytesToRead;  						Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  					}  				}  				Log.Debug (this' "File " + fileName + " written to application store");  			}  			else {  				throw new MonoscapeException ("File header is not valid' could not receive file.");  			}  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  	else {  		throw new MonoscapeException ("File header is not valid' could not receive file.");  	}  }  else {  	throw new MonoscapeException ("File header is not valid' could not receive file.");  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: if (bytesRead == 4) {  	int fileNameInBytesLength = BitConverter.ToInt32 (fileNameInBytesLengthInBytes' 0);  	Log.Debug (this' "File name length in bytes: " + fileNameInBytesLength);  	Log.Debug (this' "Reading file name");  	byte[] fileNameInBytes = new byte[fileNameInBytesLength];  	bytesRead = clientSocket.Receive (fileNameInBytes' fileNameInBytesLength' 0);  	if (bytesRead == fileNameInBytesLength) {  		string fileName = Encoding.ASCII.GetString (fileNameInBytes);  		Log.Debug (this' "File name: " + fileName);  		Log.Debug (this' "Reading file size length in bytes");  		byte[] fileSizeInBytesLengthInBytes = new byte[8];  		bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  		if (bytesRead == 8) {  			int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  			Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  			Log.Debug (this' "Reading file size length");  			byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  			bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  			if (bytesRead == 8) {  				long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  				Log.Debug (this' "File size: " + fileSize);  				if (!Directory.Exists (fileStorePath))  					Directory.CreateDirectory (fileStorePath);  				string filePath = Path.Combine (fileStorePath' fileName);  				// Read File Content  				long buffer = 65536;  				// Block size = 64K  				byte[] fileData = new byte[fileSize];  				using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  					bytesRead = 0;  					long totalBytesRead = 0;  					long bytesToRead = buffer;  					Log.Debug (this' "Reading file content... ");  					while (bytesToRead > 0) {  						bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  						if (bytesRead == 0)  							break;  						fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  						totalBytesRead = totalBytesRead + bytesRead;  						bytesToRead = fileSize - totalBytesRead;  						if (bytesToRead < buffer)  							buffer = bytesToRead;  						Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  					}  				}  				Log.Debug (this' "File " + fileName + " written to application store");  			}  			else {  				throw new MonoscapeException ("File header is not valid' could not receive file.");  			}  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  	else {  		throw new MonoscapeException ("File header is not valid' could not receive file.");  	}  }  else {  	throw new MonoscapeException ("File header is not valid' could not receive file.");  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: if (bytesRead == 4) {  	int fileNameInBytesLength = BitConverter.ToInt32 (fileNameInBytesLengthInBytes' 0);  	Log.Debug (this' "File name length in bytes: " + fileNameInBytesLength);  	Log.Debug (this' "Reading file name");  	byte[] fileNameInBytes = new byte[fileNameInBytesLength];  	bytesRead = clientSocket.Receive (fileNameInBytes' fileNameInBytesLength' 0);  	if (bytesRead == fileNameInBytesLength) {  		string fileName = Encoding.ASCII.GetString (fileNameInBytes);  		Log.Debug (this' "File name: " + fileName);  		Log.Debug (this' "Reading file size length in bytes");  		byte[] fileSizeInBytesLengthInBytes = new byte[8];  		bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  		if (bytesRead == 8) {  			int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  			Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  			Log.Debug (this' "Reading file size length");  			byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  			bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  			if (bytesRead == 8) {  				long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  				Log.Debug (this' "File size: " + fileSize);  				if (!Directory.Exists (fileStorePath))  					Directory.CreateDirectory (fileStorePath);  				string filePath = Path.Combine (fileStorePath' fileName);  				// Read File Content  				long buffer = 65536;  				// Block size = 64K  				byte[] fileData = new byte[fileSize];  				using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  					bytesRead = 0;  					long totalBytesRead = 0;  					long bytesToRead = buffer;  					Log.Debug (this' "Reading file content... ");  					while (bytesToRead > 0) {  						bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  						if (bytesRead == 0)  							break;  						fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  						totalBytesRead = totalBytesRead + bytesRead;  						bytesToRead = fileSize - totalBytesRead;  						if (bytesToRead < buffer)  							buffer = bytesToRead;  						Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  					}  				}  				Log.Debug (this' "File " + fileName + " written to application store");  			}  			else {  				throw new MonoscapeException ("File header is not valid' could not receive file.");  			}  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  	else {  		throw new MonoscapeException ("File header is not valid' could not receive file.");  	}  }  else {  	throw new MonoscapeException ("File header is not valid' could not receive file.");  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: if (bytesRead == fileNameInBytesLength) {  	string fileName = Encoding.ASCII.GetString (fileNameInBytes);  	Log.Debug (this' "File name: " + fileName);  	Log.Debug (this' "Reading file size length in bytes");  	byte[] fileSizeInBytesLengthInBytes = new byte[8];  	bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  	if (bytesRead == 8) {  		int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  		Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  		Log.Debug (this' "Reading file size length");  		byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  		bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  		if (bytesRead == 8) {  			long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  			Log.Debug (this' "File size: " + fileSize);  			if (!Directory.Exists (fileStorePath))  				Directory.CreateDirectory (fileStorePath);  			string filePath = Path.Combine (fileStorePath' fileName);  			// Read File Content  			long buffer = 65536;  			// Block size = 64K  			byte[] fileData = new byte[fileSize];  			using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  				bytesRead = 0;  				long totalBytesRead = 0;  				long bytesToRead = buffer;  				Log.Debug (this' "Reading file content... ");  				while (bytesToRead > 0) {  					bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  					if (bytesRead == 0)  						break;  					fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  					totalBytesRead = totalBytesRead + bytesRead;  					bytesToRead = fileSize - totalBytesRead;  					if (bytesToRead < buffer)  						buffer = bytesToRead;  					Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  				}  			}  			Log.Debug (this' "File " + fileName + " written to application store");  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  	else {  		throw new MonoscapeException ("File header is not valid' could not receive file.");  	}  }  else {  	throw new MonoscapeException ("File header is not valid' could not receive file.");  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: if (bytesRead == fileNameInBytesLength) {  	string fileName = Encoding.ASCII.GetString (fileNameInBytes);  	Log.Debug (this' "File name: " + fileName);  	Log.Debug (this' "Reading file size length in bytes");  	byte[] fileSizeInBytesLengthInBytes = new byte[8];  	bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  	if (bytesRead == 8) {  		int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  		Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  		Log.Debug (this' "Reading file size length");  		byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  		bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  		if (bytesRead == 8) {  			long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  			Log.Debug (this' "File size: " + fileSize);  			if (!Directory.Exists (fileStorePath))  				Directory.CreateDirectory (fileStorePath);  			string filePath = Path.Combine (fileStorePath' fileName);  			// Read File Content  			long buffer = 65536;  			// Block size = 64K  			byte[] fileData = new byte[fileSize];  			using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  				bytesRead = 0;  				long totalBytesRead = 0;  				long bytesToRead = buffer;  				Log.Debug (this' "Reading file content... ");  				while (bytesToRead > 0) {  					bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  					if (bytesRead == 0)  						break;  					fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  					totalBytesRead = totalBytesRead + bytesRead;  					bytesToRead = fileSize - totalBytesRead;  					if (bytesToRead < buffer)  						buffer = bytesToRead;  					Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  				}  			}  			Log.Debug (this' "File " + fileName + " written to application store");  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  	else {  		throw new MonoscapeException ("File header is not valid' could not receive file.");  	}  }  else {  	throw new MonoscapeException ("File header is not valid' could not receive file.");  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: if (bytesRead == fileNameInBytesLength) {  	string fileName = Encoding.ASCII.GetString (fileNameInBytes);  	Log.Debug (this' "File name: " + fileName);  	Log.Debug (this' "Reading file size length in bytes");  	byte[] fileSizeInBytesLengthInBytes = new byte[8];  	bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  	if (bytesRead == 8) {  		int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  		Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  		Log.Debug (this' "Reading file size length");  		byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  		bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  		if (bytesRead == 8) {  			long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  			Log.Debug (this' "File size: " + fileSize);  			if (!Directory.Exists (fileStorePath))  				Directory.CreateDirectory (fileStorePath);  			string filePath = Path.Combine (fileStorePath' fileName);  			// Read File Content  			long buffer = 65536;  			// Block size = 64K  			byte[] fileData = new byte[fileSize];  			using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  				bytesRead = 0;  				long totalBytesRead = 0;  				long bytesToRead = buffer;  				Log.Debug (this' "Reading file content... ");  				while (bytesToRead > 0) {  					bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  					if (bytesRead == 0)  						break;  					fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  					totalBytesRead = totalBytesRead + bytesRead;  					bytesToRead = fileSize - totalBytesRead;  					if (bytesToRead < buffer)  						buffer = bytesToRead;  					Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  				}  			}  			Log.Debug (this' "File " + fileName + " written to application store");  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  	else {  		throw new MonoscapeException ("File header is not valid' could not receive file.");  	}  }  else {  	throw new MonoscapeException ("File header is not valid' could not receive file.");  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: if (bytesRead == fileNameInBytesLength) {  	string fileName = Encoding.ASCII.GetString (fileNameInBytes);  	Log.Debug (this' "File name: " + fileName);  	Log.Debug (this' "Reading file size length in bytes");  	byte[] fileSizeInBytesLengthInBytes = new byte[8];  	bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  	if (bytesRead == 8) {  		int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  		Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  		Log.Debug (this' "Reading file size length");  		byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  		bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  		if (bytesRead == 8) {  			long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  			Log.Debug (this' "File size: " + fileSize);  			if (!Directory.Exists (fileStorePath))  				Directory.CreateDirectory (fileStorePath);  			string filePath = Path.Combine (fileStorePath' fileName);  			// Read File Content  			long buffer = 65536;  			// Block size = 64K  			byte[] fileData = new byte[fileSize];  			using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  				bytesRead = 0;  				long totalBytesRead = 0;  				long bytesToRead = buffer;  				Log.Debug (this' "Reading file content... ");  				while (bytesToRead > 0) {  					bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  					if (bytesRead == 0)  						break;  					fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  					totalBytesRead = totalBytesRead + bytesRead;  					bytesToRead = fileSize - totalBytesRead;  					if (bytesToRead < buffer)  						buffer = bytesToRead;  					Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  				}  			}  			Log.Debug (this' "File " + fileName + " written to application store");  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  	else {  		throw new MonoscapeException ("File header is not valid' could not receive file.");  	}  }  else {  	throw new MonoscapeException ("File header is not valid' could not receive file.");  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: if (bytesRead == fileNameInBytesLength) {  	string fileName = Encoding.ASCII.GetString (fileNameInBytes);  	Log.Debug (this' "File name: " + fileName);  	Log.Debug (this' "Reading file size length in bytes");  	byte[] fileSizeInBytesLengthInBytes = new byte[8];  	bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  	if (bytesRead == 8) {  		int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  		Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  		Log.Debug (this' "Reading file size length");  		byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  		bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  		if (bytesRead == 8) {  			long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  			Log.Debug (this' "File size: " + fileSize);  			if (!Directory.Exists (fileStorePath))  				Directory.CreateDirectory (fileStorePath);  			string filePath = Path.Combine (fileStorePath' fileName);  			// Read File Content  			long buffer = 65536;  			// Block size = 64K  			byte[] fileData = new byte[fileSize];  			using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  				bytesRead = 0;  				long totalBytesRead = 0;  				long bytesToRead = buffer;  				Log.Debug (this' "Reading file content... ");  				while (bytesToRead > 0) {  					bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  					if (bytesRead == 0)  						break;  					fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  					totalBytesRead = totalBytesRead + bytesRead;  					bytesToRead = fileSize - totalBytesRead;  					if (bytesToRead < buffer)  						buffer = bytesToRead;  					Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  				}  			}  			Log.Debug (this' "File " + fileName + " written to application store");  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  	else {  		throw new MonoscapeException ("File header is not valid' could not receive file.");  	}  }  else {  	throw new MonoscapeException ("File header is not valid' could not receive file.");  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: if (bytesRead == fileNameInBytesLength) {  	string fileName = Encoding.ASCII.GetString (fileNameInBytes);  	Log.Debug (this' "File name: " + fileName);  	Log.Debug (this' "Reading file size length in bytes");  	byte[] fileSizeInBytesLengthInBytes = new byte[8];  	bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  	if (bytesRead == 8) {  		int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  		Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  		Log.Debug (this' "Reading file size length");  		byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  		bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  		if (bytesRead == 8) {  			long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  			Log.Debug (this' "File size: " + fileSize);  			if (!Directory.Exists (fileStorePath))  				Directory.CreateDirectory (fileStorePath);  			string filePath = Path.Combine (fileStorePath' fileName);  			// Read File Content  			long buffer = 65536;  			// Block size = 64K  			byte[] fileData = new byte[fileSize];  			using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  				bytesRead = 0;  				long totalBytesRead = 0;  				long bytesToRead = buffer;  				Log.Debug (this' "Reading file content... ");  				while (bytesToRead > 0) {  					bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  					if (bytesRead == 0)  						break;  					fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  					totalBytesRead = totalBytesRead + bytesRead;  					bytesToRead = fileSize - totalBytesRead;  					if (bytesToRead < buffer)  						buffer = bytesToRead;  					Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  				}  			}  			Log.Debug (this' "File " + fileName + " written to application store");  		}  		else {  			throw new MonoscapeException ("File header is not valid' could not receive file.");  		}  	}  	else {  		throw new MonoscapeException ("File header is not valid' could not receive file.");  	}  }  else {  	throw new MonoscapeException ("File header is not valid' could not receive file.");  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: bytesRead = clientSocket.Receive (fileSizeInBytesLengthInBytes' 8' SocketFlags.None);  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: if (bytesRead == 8) {  	int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  	Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  	Log.Debug (this' "Reading file size length");  	byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  	bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  	if (bytesRead == 8) {  		long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  		Log.Debug (this' "File size: " + fileSize);  		if (!Directory.Exists (fileStorePath))  			Directory.CreateDirectory (fileStorePath);  		string filePath = Path.Combine (fileStorePath' fileName);  		// Read File Content  		long buffer = 65536;  		// Block size = 64K  		byte[] fileData = new byte[fileSize];  		using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  			bytesRead = 0;  			long totalBytesRead = 0;  			long bytesToRead = buffer;  			Log.Debug (this' "Reading file content... ");  			while (bytesToRead > 0) {  				bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  				if (bytesRead == 0)  					break;  				fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  				totalBytesRead = totalBytesRead + bytesRead;  				bytesToRead = fileSize - totalBytesRead;  				if (bytesToRead < buffer)  					buffer = bytesToRead;  				Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  			}  		}  		Log.Debug (this' "File " + fileName + " written to application store");  	}  	else {  		throw new MonoscapeException ("File header is not valid' could not receive file.");  	}  }  else {  	throw new MonoscapeException ("File header is not valid' could not receive file.");  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: if (bytesRead == 8) {  	int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  	Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  	Log.Debug (this' "Reading file size length");  	byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  	bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  	if (bytesRead == 8) {  		long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  		Log.Debug (this' "File size: " + fileSize);  		if (!Directory.Exists (fileStorePath))  			Directory.CreateDirectory (fileStorePath);  		string filePath = Path.Combine (fileStorePath' fileName);  		// Read File Content  		long buffer = 65536;  		// Block size = 64K  		byte[] fileData = new byte[fileSize];  		using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  			bytesRead = 0;  			long totalBytesRead = 0;  			long bytesToRead = buffer;  			Log.Debug (this' "Reading file content... ");  			while (bytesToRead > 0) {  				bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  				if (bytesRead == 0)  					break;  				fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  				totalBytesRead = totalBytesRead + bytesRead;  				bytesToRead = fileSize - totalBytesRead;  				if (bytesToRead < buffer)  					buffer = bytesToRead;  				Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  			}  		}  		Log.Debug (this' "File " + fileName + " written to application store");  	}  	else {  		throw new MonoscapeException ("File header is not valid' could not receive file.");  	}  }  else {  	throw new MonoscapeException ("File header is not valid' could not receive file.");  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: if (bytesRead == 8) {  	int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  	Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  	Log.Debug (this' "Reading file size length");  	byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  	bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  	if (bytesRead == 8) {  		long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  		Log.Debug (this' "File size: " + fileSize);  		if (!Directory.Exists (fileStorePath))  			Directory.CreateDirectory (fileStorePath);  		string filePath = Path.Combine (fileStorePath' fileName);  		// Read File Content  		long buffer = 65536;  		// Block size = 64K  		byte[] fileData = new byte[fileSize];  		using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  			bytesRead = 0;  			long totalBytesRead = 0;  			long bytesToRead = buffer;  			Log.Debug (this' "Reading file content... ");  			while (bytesToRead > 0) {  				bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  				if (bytesRead == 0)  					break;  				fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  				totalBytesRead = totalBytesRead + bytesRead;  				bytesToRead = fileSize - totalBytesRead;  				if (bytesToRead < buffer)  					buffer = bytesToRead;  				Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  			}  		}  		Log.Debug (this' "File " + fileName + " written to application store");  	}  	else {  		throw new MonoscapeException ("File header is not valid' could not receive file.");  	}  }  else {  	throw new MonoscapeException ("File header is not valid' could not receive file.");  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: if (bytesRead == 8) {  	int fileSizeInBytesLength = BitConverter.ToInt32 (fileSizeInBytesLengthInBytes' 0);  	Log.Debug (this' "File size length in bytes: " + fileSizeInBytesLength);  	Log.Debug (this' "Reading file size length");  	byte[] fileSizeInBytes = new byte[fileSizeInBytesLength];  	bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  	if (bytesRead == 8) {  		long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  		Log.Debug (this' "File size: " + fileSize);  		if (!Directory.Exists (fileStorePath))  			Directory.CreateDirectory (fileStorePath);  		string filePath = Path.Combine (fileStorePath' fileName);  		// Read File Content  		long buffer = 65536;  		// Block size = 64K  		byte[] fileData = new byte[fileSize];  		using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  			bytesRead = 0;  			long totalBytesRead = 0;  			long bytesToRead = buffer;  			Log.Debug (this' "Reading file content... ");  			while (bytesToRead > 0) {  				bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  				if (bytesRead == 0)  					break;  				fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  				totalBytesRead = totalBytesRead + bytesRead;  				bytesToRead = fileSize - totalBytesRead;  				if (bytesToRead < buffer)  					buffer = bytesToRead;  				Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  			}  		}  		Log.Debug (this' "File " + fileName + " written to application store");  	}  	else {  		throw new MonoscapeException ("File header is not valid' could not receive file.");  	}  }  else {  	throw new MonoscapeException ("File header is not valid' could not receive file.");  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: bytesRead = clientSocket.Receive (fileSizeInBytes' 8' SocketFlags.None);  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: if (bytesRead == 8) {  	long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  	Log.Debug (this' "File size: " + fileSize);  	if (!Directory.Exists (fileStorePath))  		Directory.CreateDirectory (fileStorePath);  	string filePath = Path.Combine (fileStorePath' fileName);  	// Read File Content  	long buffer = 65536;  	// Block size = 64K  	byte[] fileData = new byte[fileSize];  	using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  		bytesRead = 0;  		long totalBytesRead = 0;  		long bytesToRead = buffer;  		Log.Debug (this' "Reading file content... ");  		while (bytesToRead > 0) {  			bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  			if (bytesRead == 0)  				break;  			fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  			totalBytesRead = totalBytesRead + bytesRead;  			bytesToRead = fileSize - totalBytesRead;  			if (bytesToRead < buffer)  				buffer = bytesToRead;  			Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  		}  	}  	Log.Debug (this' "File " + fileName + " written to application store");  }  else {  	throw new MonoscapeException ("File header is not valid' could not receive file.");  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileReceiveSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileReceiveSocket.cs,ReceiveFile,The following statement contains a magic number: if (bytesRead == 8) {  	long fileSize = BitConverter.ToInt32 (fileSizeInBytes' 0);  	Log.Debug (this' "File size: " + fileSize);  	if (!Directory.Exists (fileStorePath))  		Directory.CreateDirectory (fileStorePath);  	string filePath = Path.Combine (fileStorePath' fileName);  	// Read File Content  	long buffer = 65536;  	// Block size = 64K  	byte[] fileData = new byte[fileSize];  	using (FileStream fileStream = new FileStream (filePath' FileMode.Create)) {  		bytesRead = 0;  		long totalBytesRead = 0;  		long bytesToRead = buffer;  		Log.Debug (this' "Reading file content... ");  		while (bytesToRead > 0) {  			bytesRead = clientSocket.Receive (fileData' (int)totalBytesRead' (int)buffer' SocketFlags.None);  			if (bytesRead == 0)  				break;  			fileStream.Write (fileData' (int)totalBytesRead' (int)bytesRead);  			totalBytesRead = totalBytesRead + bytesRead;  			bytesToRead = fileSize - totalBytesRead;  			if (bytesToRead < buffer)  				buffer = bytesToRead;  			Log.Debug (this' "Received bytes: " + (fileSize - bytesToRead));  		}  	}  	Log.Debug (this' "File " + fileName + " written to application store");  }  else {  	throw new MonoscapeException ("File header is not valid' could not receive file.");  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileTransferSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileTransferSocket.cs,SendFile,The following statement contains a magic number: if (fileNameInBytesLength.Length > 4)  	throw new MonoscapeException ("File name length is too long. Please reduce the file name length and try again.");  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileTransferSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileTransferSocket.cs,SendFile,The following statement contains a magic number: using (fileStream) {  	// FileHeader: [fileNameInBytesLength (4bytes) | fileNameInBytes | fileSizeInBytesLength (8bytes) | fileSizeInBytes]                  	long fileSize = fileStream.Length;  	byte[] fileSizeInBytes = BitConverter.GetBytes (fileSize);  	byte[] fileSizeInBytesLength = BitConverter.GetBytes (fileSizeInBytes.Length);  	int headerSize = 4 + fileNameInBytes.Length + 8 + fileSizeInBytes.Length;  	byte[] fileHeader = new byte[headerSize];  	fileNameInBytesLength.CopyTo (fileHeader' 0);  	fileNameInBytes.CopyTo (fileHeader' 4);  	fileSizeInBytesLength.CopyTo (fileHeader' (4 + fileNameInBytes.Length));  	fileSizeInBytes.CopyTo (fileHeader' (8 + 4 + fileNameInBytes.Length));  	Log.Debug (typeof(AbstractFileTransferSocket)' "Starting ApFileTransferServerSocket...");  	IPEndPoint ipEnd = new IPEndPoint (ipAddress' port);  	Socket clientSock = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.IP);  	clientSock.Connect (ipEnd);  	// Send File Header  	clientSock.Send (fileHeader' SocketFlags.None);  	long blockSize = 1024 * 64;  	// Block size = 64K  	byte[] fileData = new byte[fileSize];  	long bytesRead = 0;  	long totalBytesRead = 0;  	long bytesToRead = blockSize;  	Log.Debug (typeof(AbstractFileTransferSocket)' "Reading file: " + fileName);  	while (bytesToRead > 0) {  		bytesRead = fileStream.Read (fileData' (int)totalBytesRead' (int)blockSize);  		if (bytesRead == 0)  			break;  		// Send File Blocks                      		clientSock.Send (fileData' (int)totalBytesRead' (int)bytesRead' SocketFlags.None);  		totalBytesRead = totalBytesRead + bytesRead;  		bytesToRead = fileSize - totalBytesRead;  		if (bytesToRead < blockSize)  			blockSize = bytesToRead;  		Log.Debug (typeof(AbstractFileTransferSocket)' "Total bytes sent: " + totalBytesRead + " Remaining: " + bytesToRead);  	}  	Log.Debug (typeof(AbstractFileTransferSocket)' "File sent successfully");  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileTransferSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileTransferSocket.cs,SendFile,The following statement contains a magic number: using (fileStream) {  	// FileHeader: [fileNameInBytesLength (4bytes) | fileNameInBytes | fileSizeInBytesLength (8bytes) | fileSizeInBytes]                  	long fileSize = fileStream.Length;  	byte[] fileSizeInBytes = BitConverter.GetBytes (fileSize);  	byte[] fileSizeInBytesLength = BitConverter.GetBytes (fileSizeInBytes.Length);  	int headerSize = 4 + fileNameInBytes.Length + 8 + fileSizeInBytes.Length;  	byte[] fileHeader = new byte[headerSize];  	fileNameInBytesLength.CopyTo (fileHeader' 0);  	fileNameInBytes.CopyTo (fileHeader' 4);  	fileSizeInBytesLength.CopyTo (fileHeader' (4 + fileNameInBytes.Length));  	fileSizeInBytes.CopyTo (fileHeader' (8 + 4 + fileNameInBytes.Length));  	Log.Debug (typeof(AbstractFileTransferSocket)' "Starting ApFileTransferServerSocket...");  	IPEndPoint ipEnd = new IPEndPoint (ipAddress' port);  	Socket clientSock = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.IP);  	clientSock.Connect (ipEnd);  	// Send File Header  	clientSock.Send (fileHeader' SocketFlags.None);  	long blockSize = 1024 * 64;  	// Block size = 64K  	byte[] fileData = new byte[fileSize];  	long bytesRead = 0;  	long totalBytesRead = 0;  	long bytesToRead = blockSize;  	Log.Debug (typeof(AbstractFileTransferSocket)' "Reading file: " + fileName);  	while (bytesToRead > 0) {  		bytesRead = fileStream.Read (fileData' (int)totalBytesRead' (int)blockSize);  		if (bytesRead == 0)  			break;  		// Send File Blocks                      		clientSock.Send (fileData' (int)totalBytesRead' (int)bytesRead' SocketFlags.None);  		totalBytesRead = totalBytesRead + bytesRead;  		bytesToRead = fileSize - totalBytesRead;  		if (bytesToRead < blockSize)  			blockSize = bytesToRead;  		Log.Debug (typeof(AbstractFileTransferSocket)' "Total bytes sent: " + totalBytesRead + " Remaining: " + bytesToRead);  	}  	Log.Debug (typeof(AbstractFileTransferSocket)' "File sent successfully");  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileTransferSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileTransferSocket.cs,SendFile,The following statement contains a magic number: using (fileStream) {  	// FileHeader: [fileNameInBytesLength (4bytes) | fileNameInBytes | fileSizeInBytesLength (8bytes) | fileSizeInBytes]                  	long fileSize = fileStream.Length;  	byte[] fileSizeInBytes = BitConverter.GetBytes (fileSize);  	byte[] fileSizeInBytesLength = BitConverter.GetBytes (fileSizeInBytes.Length);  	int headerSize = 4 + fileNameInBytes.Length + 8 + fileSizeInBytes.Length;  	byte[] fileHeader = new byte[headerSize];  	fileNameInBytesLength.CopyTo (fileHeader' 0);  	fileNameInBytes.CopyTo (fileHeader' 4);  	fileSizeInBytesLength.CopyTo (fileHeader' (4 + fileNameInBytes.Length));  	fileSizeInBytes.CopyTo (fileHeader' (8 + 4 + fileNameInBytes.Length));  	Log.Debug (typeof(AbstractFileTransferSocket)' "Starting ApFileTransferServerSocket...");  	IPEndPoint ipEnd = new IPEndPoint (ipAddress' port);  	Socket clientSock = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.IP);  	clientSock.Connect (ipEnd);  	// Send File Header  	clientSock.Send (fileHeader' SocketFlags.None);  	long blockSize = 1024 * 64;  	// Block size = 64K  	byte[] fileData = new byte[fileSize];  	long bytesRead = 0;  	long totalBytesRead = 0;  	long bytesToRead = blockSize;  	Log.Debug (typeof(AbstractFileTransferSocket)' "Reading file: " + fileName);  	while (bytesToRead > 0) {  		bytesRead = fileStream.Read (fileData' (int)totalBytesRead' (int)blockSize);  		if (bytesRead == 0)  			break;  		// Send File Blocks                      		clientSock.Send (fileData' (int)totalBytesRead' (int)bytesRead' SocketFlags.None);  		totalBytesRead = totalBytesRead + bytesRead;  		bytesToRead = fileSize - totalBytesRead;  		if (bytesToRead < blockSize)  			blockSize = bytesToRead;  		Log.Debug (typeof(AbstractFileTransferSocket)' "Total bytes sent: " + totalBytesRead + " Remaining: " + bytesToRead);  	}  	Log.Debug (typeof(AbstractFileTransferSocket)' "File sent successfully");  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileTransferSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileTransferSocket.cs,SendFile,The following statement contains a magic number: using (fileStream) {  	// FileHeader: [fileNameInBytesLength (4bytes) | fileNameInBytes | fileSizeInBytesLength (8bytes) | fileSizeInBytes]                  	long fileSize = fileStream.Length;  	byte[] fileSizeInBytes = BitConverter.GetBytes (fileSize);  	byte[] fileSizeInBytesLength = BitConverter.GetBytes (fileSizeInBytes.Length);  	int headerSize = 4 + fileNameInBytes.Length + 8 + fileSizeInBytes.Length;  	byte[] fileHeader = new byte[headerSize];  	fileNameInBytesLength.CopyTo (fileHeader' 0);  	fileNameInBytes.CopyTo (fileHeader' 4);  	fileSizeInBytesLength.CopyTo (fileHeader' (4 + fileNameInBytes.Length));  	fileSizeInBytes.CopyTo (fileHeader' (8 + 4 + fileNameInBytes.Length));  	Log.Debug (typeof(AbstractFileTransferSocket)' "Starting ApFileTransferServerSocket...");  	IPEndPoint ipEnd = new IPEndPoint (ipAddress' port);  	Socket clientSock = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.IP);  	clientSock.Connect (ipEnd);  	// Send File Header  	clientSock.Send (fileHeader' SocketFlags.None);  	long blockSize = 1024 * 64;  	// Block size = 64K  	byte[] fileData = new byte[fileSize];  	long bytesRead = 0;  	long totalBytesRead = 0;  	long bytesToRead = blockSize;  	Log.Debug (typeof(AbstractFileTransferSocket)' "Reading file: " + fileName);  	while (bytesToRead > 0) {  		bytesRead = fileStream.Read (fileData' (int)totalBytesRead' (int)blockSize);  		if (bytesRead == 0)  			break;  		// Send File Blocks                      		clientSock.Send (fileData' (int)totalBytesRead' (int)bytesRead' SocketFlags.None);  		totalBytesRead = totalBytesRead + bytesRead;  		bytesToRead = fileSize - totalBytesRead;  		if (bytesToRead < blockSize)  			blockSize = bytesToRead;  		Log.Debug (typeof(AbstractFileTransferSocket)' "Total bytes sent: " + totalBytesRead + " Remaining: " + bytesToRead);  	}  	Log.Debug (typeof(AbstractFileTransferSocket)' "File sent successfully");  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileTransferSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileTransferSocket.cs,SendFile,The following statement contains a magic number: using (fileStream) {  	// FileHeader: [fileNameInBytesLength (4bytes) | fileNameInBytes | fileSizeInBytesLength (8bytes) | fileSizeInBytes]                  	long fileSize = fileStream.Length;  	byte[] fileSizeInBytes = BitConverter.GetBytes (fileSize);  	byte[] fileSizeInBytesLength = BitConverter.GetBytes (fileSizeInBytes.Length);  	int headerSize = 4 + fileNameInBytes.Length + 8 + fileSizeInBytes.Length;  	byte[] fileHeader = new byte[headerSize];  	fileNameInBytesLength.CopyTo (fileHeader' 0);  	fileNameInBytes.CopyTo (fileHeader' 4);  	fileSizeInBytesLength.CopyTo (fileHeader' (4 + fileNameInBytes.Length));  	fileSizeInBytes.CopyTo (fileHeader' (8 + 4 + fileNameInBytes.Length));  	Log.Debug (typeof(AbstractFileTransferSocket)' "Starting ApFileTransferServerSocket...");  	IPEndPoint ipEnd = new IPEndPoint (ipAddress' port);  	Socket clientSock = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.IP);  	clientSock.Connect (ipEnd);  	// Send File Header  	clientSock.Send (fileHeader' SocketFlags.None);  	long blockSize = 1024 * 64;  	// Block size = 64K  	byte[] fileData = new byte[fileSize];  	long bytesRead = 0;  	long totalBytesRead = 0;  	long bytesToRead = blockSize;  	Log.Debug (typeof(AbstractFileTransferSocket)' "Reading file: " + fileName);  	while (bytesToRead > 0) {  		bytesRead = fileStream.Read (fileData' (int)totalBytesRead' (int)blockSize);  		if (bytesRead == 0)  			break;  		// Send File Blocks                      		clientSock.Send (fileData' (int)totalBytesRead' (int)bytesRead' SocketFlags.None);  		totalBytesRead = totalBytesRead + bytesRead;  		bytesToRead = fileSize - totalBytesRead;  		if (bytesToRead < blockSize)  			blockSize = bytesToRead;  		Log.Debug (typeof(AbstractFileTransferSocket)' "Total bytes sent: " + totalBytesRead + " Remaining: " + bytesToRead);  	}  	Log.Debug (typeof(AbstractFileTransferSocket)' "File sent successfully");  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileTransferSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileTransferSocket.cs,SendFile,The following statement contains a magic number: using (fileStream) {  	// FileHeader: [fileNameInBytesLength (4bytes) | fileNameInBytes | fileSizeInBytesLength (8bytes) | fileSizeInBytes]                  	long fileSize = fileStream.Length;  	byte[] fileSizeInBytes = BitConverter.GetBytes (fileSize);  	byte[] fileSizeInBytesLength = BitConverter.GetBytes (fileSizeInBytes.Length);  	int headerSize = 4 + fileNameInBytes.Length + 8 + fileSizeInBytes.Length;  	byte[] fileHeader = new byte[headerSize];  	fileNameInBytesLength.CopyTo (fileHeader' 0);  	fileNameInBytes.CopyTo (fileHeader' 4);  	fileSizeInBytesLength.CopyTo (fileHeader' (4 + fileNameInBytes.Length));  	fileSizeInBytes.CopyTo (fileHeader' (8 + 4 + fileNameInBytes.Length));  	Log.Debug (typeof(AbstractFileTransferSocket)' "Starting ApFileTransferServerSocket...");  	IPEndPoint ipEnd = new IPEndPoint (ipAddress' port);  	Socket clientSock = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.IP);  	clientSock.Connect (ipEnd);  	// Send File Header  	clientSock.Send (fileHeader' SocketFlags.None);  	long blockSize = 1024 * 64;  	// Block size = 64K  	byte[] fileData = new byte[fileSize];  	long bytesRead = 0;  	long totalBytesRead = 0;  	long bytesToRead = blockSize;  	Log.Debug (typeof(AbstractFileTransferSocket)' "Reading file: " + fileName);  	while (bytesToRead > 0) {  		bytesRead = fileStream.Read (fileData' (int)totalBytesRead' (int)blockSize);  		if (bytesRead == 0)  			break;  		// Send File Blocks                      		clientSock.Send (fileData' (int)totalBytesRead' (int)bytesRead' SocketFlags.None);  		totalBytesRead = totalBytesRead + bytesRead;  		bytesToRead = fileSize - totalBytesRead;  		if (bytesToRead < blockSize)  			blockSize = bytesToRead;  		Log.Debug (typeof(AbstractFileTransferSocket)' "Total bytes sent: " + totalBytesRead + " Remaining: " + bytesToRead);  	}  	Log.Debug (typeof(AbstractFileTransferSocket)' "File sent successfully");  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileTransferSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileTransferSocket.cs,SendFile,The following statement contains a magic number: using (fileStream) {  	// FileHeader: [fileNameInBytesLength (4bytes) | fileNameInBytes | fileSizeInBytesLength (8bytes) | fileSizeInBytes]                  	long fileSize = fileStream.Length;  	byte[] fileSizeInBytes = BitConverter.GetBytes (fileSize);  	byte[] fileSizeInBytesLength = BitConverter.GetBytes (fileSizeInBytes.Length);  	int headerSize = 4 + fileNameInBytes.Length + 8 + fileSizeInBytes.Length;  	byte[] fileHeader = new byte[headerSize];  	fileNameInBytesLength.CopyTo (fileHeader' 0);  	fileNameInBytes.CopyTo (fileHeader' 4);  	fileSizeInBytesLength.CopyTo (fileHeader' (4 + fileNameInBytes.Length));  	fileSizeInBytes.CopyTo (fileHeader' (8 + 4 + fileNameInBytes.Length));  	Log.Debug (typeof(AbstractFileTransferSocket)' "Starting ApFileTransferServerSocket...");  	IPEndPoint ipEnd = new IPEndPoint (ipAddress' port);  	Socket clientSock = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.IP);  	clientSock.Connect (ipEnd);  	// Send File Header  	clientSock.Send (fileHeader' SocketFlags.None);  	long blockSize = 1024 * 64;  	// Block size = 64K  	byte[] fileData = new byte[fileSize];  	long bytesRead = 0;  	long totalBytesRead = 0;  	long bytesToRead = blockSize;  	Log.Debug (typeof(AbstractFileTransferSocket)' "Reading file: " + fileName);  	while (bytesToRead > 0) {  		bytesRead = fileStream.Read (fileData' (int)totalBytesRead' (int)blockSize);  		if (bytesRead == 0)  			break;  		// Send File Blocks                      		clientSock.Send (fileData' (int)totalBytesRead' (int)bytesRead' SocketFlags.None);  		totalBytesRead = totalBytesRead + bytesRead;  		bytesToRead = fileSize - totalBytesRead;  		if (bytesToRead < blockSize)  			blockSize = bytesToRead;  		Log.Debug (typeof(AbstractFileTransferSocket)' "Total bytes sent: " + totalBytesRead + " Remaining: " + bytesToRead);  	}  	Log.Debug (typeof(AbstractFileTransferSocket)' "File sent successfully");  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileTransferSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileTransferSocket.cs,SendFile,The following statement contains a magic number: using (fileStream) {  	// FileHeader: [fileNameInBytesLength (4bytes) | fileNameInBytes | fileSizeInBytesLength (8bytes) | fileSizeInBytes]                  	long fileSize = fileStream.Length;  	byte[] fileSizeInBytes = BitConverter.GetBytes (fileSize);  	byte[] fileSizeInBytesLength = BitConverter.GetBytes (fileSizeInBytes.Length);  	int headerSize = 4 + fileNameInBytes.Length + 8 + fileSizeInBytes.Length;  	byte[] fileHeader = new byte[headerSize];  	fileNameInBytesLength.CopyTo (fileHeader' 0);  	fileNameInBytes.CopyTo (fileHeader' 4);  	fileSizeInBytesLength.CopyTo (fileHeader' (4 + fileNameInBytes.Length));  	fileSizeInBytes.CopyTo (fileHeader' (8 + 4 + fileNameInBytes.Length));  	Log.Debug (typeof(AbstractFileTransferSocket)' "Starting ApFileTransferServerSocket...");  	IPEndPoint ipEnd = new IPEndPoint (ipAddress' port);  	Socket clientSock = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.IP);  	clientSock.Connect (ipEnd);  	// Send File Header  	clientSock.Send (fileHeader' SocketFlags.None);  	long blockSize = 1024 * 64;  	// Block size = 64K  	byte[] fileData = new byte[fileSize];  	long bytesRead = 0;  	long totalBytesRead = 0;  	long bytesToRead = blockSize;  	Log.Debug (typeof(AbstractFileTransferSocket)' "Reading file: " + fileName);  	while (bytesToRead > 0) {  		bytesRead = fileStream.Read (fileData' (int)totalBytesRead' (int)blockSize);  		if (bytesRead == 0)  			break;  		// Send File Blocks                      		clientSock.Send (fileData' (int)totalBytesRead' (int)bytesRead' SocketFlags.None);  		totalBytesRead = totalBytesRead + bytesRead;  		bytesToRead = fileSize - totalBytesRead;  		if (bytesToRead < blockSize)  			blockSize = bytesToRead;  		Log.Debug (typeof(AbstractFileTransferSocket)' "Total bytes sent: " + totalBytesRead + " Remaining: " + bytesToRead);  	}  	Log.Debug (typeof(AbstractFileTransferSocket)' "File sent successfully");  }  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileTransferSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileTransferSocket.cs,SendFile,The following statement contains a magic number: fileNameInBytes.CopyTo (fileHeader' 4);  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileTransferSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileTransferSocket.cs,SendFile,The following statement contains a magic number: fileSizeInBytesLength.CopyTo (fileHeader' (4 + fileNameInBytes.Length));  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileTransferSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileTransferSocket.cs,SendFile,The following statement contains a magic number: fileSizeInBytes.CopyTo (fileHeader' (8 + 4 + fileNameInBytes.Length));  
Magic Number,Monoscape.Common.Sockets.FileServer,AbstractFileTransferSocket,C:\repos\monoscape_monoscape\Monoscape.Common\Sockets\FileServer\AbstractFileTransferSocket.cs,SendFile,The following statement contains a magic number: fileSizeInBytes.CopyTo (fileHeader' (8 + 4 + fileNameInBytes.Length));  
