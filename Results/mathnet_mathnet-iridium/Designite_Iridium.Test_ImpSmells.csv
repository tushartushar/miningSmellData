Implementation smell,Namespace,Class,File,Method,Description
Long Method,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The method has 127 lines of code.
Long Method,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The method has 117 lines of code.
Long Parameter List,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributionShape,The method has 9 parameters. Parameters: distribution' min' max' expectedShape' expectedUnderflow' expectedOverflow' avgSamplesPerBucket' absoluteAccuracy' message
Long Parameter List,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributionShapeMatchesCumulativeDensity,The method has 7 parameters. Parameters: distribution' min' max' numberOfBuckets' avgSamplesPerBucket' absoluteAccuracy' message
Long Parameter List,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,Helper_TestAlmostEqualityForGenericType,The method has 5 parameters. Parameters: value' valueClone' completelyDifferentValue' notablyDifferentValue' almostEqualValue
Long Parameter List,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,BuildLinearCase,The method has 6 parameters. Parameters: start' stop' x' y' xtest' ytest
Long Statement,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID119_PolynomialExtrapolatePositiveDirection,The length of the statement  "            double[] x = new double[] { -6.060771484' -5.855378418' -1.794238281' -1.229428711' 0.89935791' 2.912121582' 4.699230957' 4.788347168' 7.728830566' 11.70989502 }; " is 162.
Long Statement,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID119_PolynomialExtrapolatePositiveDirection,The length of the statement  "            double[] y = new double[] { 0.959422052' 0.959447861' 0.959958017' 0.960028946' 0.960323274' 0.960636258' 0.960914195' 0.960928023' 0.96138531' 0.962004483 }; " is 158.
Long Statement,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The length of the statement  "                new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }' " is 254.
Long Statement,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The length of the statement  "                new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }' " is 258.
Long Statement,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The length of the statement  "                new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }' " is 250.
Long Statement,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The length of the statement  "                new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }' " is 252.
Long Statement,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The length of the statement  "                new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }' " is 248.
Long Statement,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The length of the statement  "                new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }' " is 254.
Long Statement,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The length of the statement  "                new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }' " is 260.
Long Statement,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The length of the statement  "                new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }' " is 254.
Long Statement,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The length of the statement  "                new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }' " is 253.
Long Statement,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The length of the statement  "                new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }' " is 252.
Long Statement,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The length of the statement  "                new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }' " is 249.
Long Statement,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The length of the statement  "                new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 } " is 248.
Long Statement,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID204_GammaRegularizedSmallA,The length of the statement  "            Assert.That(Fn.GammaRegularized(0.016512683231958761' 1.0625)' NumericIs.AlmostEqualTo(.99667704526159905093' 1e-13)' "X"); " is 123.
Long Statement,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestSignedMagnitudeToTwosComplement,The length of the statement  "            Assert.That(Number.SignedMagnitudeToTwosComplementUInt64(-9223372036854775808 + 1)' Is.EqualTo(0xFFFFFFFFFFFFFFFF)' "E"); " is 121.
Long Statement,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestSignedMagnitudeToTwosComplement,The length of the statement  "            Assert.That(Number.SignedMagnitudeToTwosComplementUInt64(-9223372036854775808 + 2)' Is.EqualTo(0xFFFFFFFFFFFFFFFE)' "F"); " is 121.
Long Statement,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The length of the statement  "            Assert.That(method.Differentiate(0.1' out dx' out d2x)' NumericIs.AlmostEqualTo(.57225000000000000000' 1e-15)' "B 0.1"); " is 120.
Long Statement,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The length of the statement  "            Assert.That(method.Differentiate(0.4' out dx' out d2x)' NumericIs.AlmostEqualTo(1.8840000000000000000' 1e-15)' "B 0.4"); " is 120.
Long Statement,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The length of the statement  "            Assert.That(method.Differentiate(1.1' out dx' out d2x)' NumericIs.AlmostEqualTo(3.0314166666666666667' 1e-15)' "B 1.1"); " is 120.
Long Statement,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The length of the statement  "            Assert.That(method.Differentiate(10.0' out dx' out d2x)' NumericIs.AlmostEqualTo(277.50000000000000000' 1e-15)' "B 10.0"); " is 122.
Long Statement,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The length of the statement  "            Assert.That(method.Differentiate(-10.0' out dx' out d2x)' NumericIs.AlmostEqualTo(-1010.8333333333333333' 1e-15)' "B -10.0"); " is 125.
Long Statement,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The length of the statement  "                    Assert.That(linearMethod.Interpolate(linxtest[i])' NumericIs.AlmostEqualTo(linytest[i]' 1e-12)' String.Format("Linear k={0} i={1}"' k' i)); " is 139.
Long Statement,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The length of the statement  "                    Assert.That(linearMethod.Interpolate(linxtest[i])' NumericIs.AlmostEqualTo(linytest[i]' 1e-12)' String.Format("Linear k={0} i={1}"' k' i)); " is 139.
Long Statement,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The length of the statement  "            // Maple: "evalf(subs({x=0.1}'PolynomialInterpolation(evalf([[2*cos(Pi/10)+2'0]'[2*cos(3*Pi/10)+2'3]'[2*cos(5*Pi/10)+2'2.5]'[2*cos(7*Pi/10)+2'1]'[2*cos(9*Pi/10)+2'3]])' x))'20);" " is 178.
Long Statement,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The length of the statement  "            // Maple: "evalf(subs({x=0.1}'PolynomialInterpolation(evalf([[2*cos(0*Pi/4)+2'0]'[2*cos(1*Pi/4)+2'3]'[2*cos(2*Pi/4)+2'2.5]'[2*cos(3*Pi/4)+2'1]'[2*cos(4*Pi/4)+2'3]])' x))'20);" " is 175.
Long Statement,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The length of the statement  "                    Assert.That(linearMethod.Interpolate(linxtest[i])' NumericIs.AlmostEqualTo(linytest[i]' 1e-12)' String.Format("Linear k={0} i={1}"' k' i)); " is 139.
Long Statement,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The length of the statement  "                    Assert.That(linearMethod.Interpolate(linxtest[i])' NumericIs.AlmostEqualTo(linytest[i]' 1e-12)' String.Format("Linear k={0} i={1}"' k' i)); " is 139.
Long Statement,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The length of the statement  "                    Assert.That(linearMethod.Interpolate(linxtest[i])' NumericIs.AlmostEqualTo(linytest[i]' 1e-12)' String.Format("Linear k={0} i={1}"' k' i)); " is 139.
Long Statement,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The length of the statement  "            IInterpolationMethod method = Interpolation.CreateCubicSpline(t' x' SplineBoundaryCondition.FirstDerivative' 1.0' SplineBoundaryCondition.FirstDerivative' -1.0); " is 161.
Long Statement,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The length of the statement  "            IInterpolationMethod method = Interpolation.CreateCubicSpline(t' x' SplineBoundaryCondition.SecondDerivative' -5.0' SplineBoundaryCondition.SecondDerivative' -1.0); " is 164.
Long Statement,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The length of the statement  "            // Maple: "evalf(subs({x=-2.4}'Spline([[-2'1]'[-1'2]'[0'-1]'[1'0]'[2'1]]' x' degree=3' endpoints=Matrix(2'13'{(1'3)=1'(1'13)=-5'(2'10)=1'(2'13)=-1})))'20);" " is 156.
Long Statement,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The length of the statement  "                    Assert.That(linearMethod.Interpolate(linxtest[i])' NumericIs.AlmostEqualTo(linytest[i]' 1e-12)' String.Format("Linear k={0} i={1}"' k' i)); " is 139.
Long Statement,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalRotation,The length of the statement  "                Assert.That(Matrix.Transpose(rotation) * rotation' NumericIs.AlmostEqualTo(Matrix.Identity(2' 2))' "orthogonal rotation matrix"); " is 129.
Long Statement,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalRotationComplex,The length of the statement  "                Assert.That(rotation.HermitianTranspose() * rotation' NumericIs.AlmostEqualTo(ComplexMatrix.Identity(2' 2))' "unitary rotation matrix"); " is 136.
Long Statement,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalReflection,The length of the statement  "                Assert.That(Matrix.Transpose(reflection) * reflection' NumericIs.AlmostEqualTo(Matrix.Identity(4' 4))' "orthogonal reflection matrix"); " is 135.
Long Statement,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalReflectionComplex,The length of the statement  "                ComplexVector v = new ComplexVector(new Complex[] { Complex.Random(gaussian)' Complex.Random(gaussian)' Complex.Random(gaussian)' Complex.Random(gaussian) }); " is 158.
Long Statement,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalReflectionComplex,The length of the statement  "                Assert.That(reflection.HermitianTranspose() * reflection' NumericIs.AlmostEqualTo(ComplexMatrix.Identity(4' 4))' "orthogonal reflection matrix"); " is 145.
Long Statement,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateIdentity,The length of the statement  "            Matrix m = new Matrix(new double[][] { new double[] { 1.0' 0.0' 0.0' 0.0 }' new double[] { 0.0' 1.0' 0.0' 0.0 }' new double[] { 0.0' 0.0' 1.0' 0.0 } }); " is 152.
Long Statement,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixArrayArithmetics,The length of the statement  "            Assert.That((r - r).Norm1()' Is.EqualTo(0.0)' "Subtract I: difference of identical Matrices is nonzero'\nSubsequent use of Subtract should be suspect"); " is 152.
Long Statement,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixArrayArithmetics,The length of the statement  "            Assert.That((r.Clone() - r).Norm1()' Is.EqualTo(0.0)' "Subtract II: difference of identical Matrices is nonzero'\nSubsequent use of Subtract should be suspect"); " is 161.
Long Statement,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixArrayArithmetics,The length of the statement  "            Assert.That(b.Norm1()' Is.EqualTo(0.0)' "Subtract III: difference of identical Matrices is nonzero'\nSubsequent use of Subtract should be suspect"); " is 148.
Long Statement,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixNormTraceDeterminant,The length of the statement  "            Assert.That(0.0' NumericIs.AlmostEqualTo(a.GetMatrix(0' a.RowCount - 1' 0' a.RowCount - 1).Determinant())' "Determinant"); " is 122.
Long Statement,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The length of the statement  "            Assert.That(a[a.RowCount - 1' a.ColumnCount - 1]' Is.EqualTo(avals[a.RowCount - 1][a.ColumnCount - 1])' "get(int'int)"); " is 120.
Long Statement,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The length of the statement  "            Assert.That(a.GetMatrix(RowTop' RowBottom' ColumnLeft' ColumnRight)' NumericIs.AlmostEqualTo(sub)' "GetMatrix(int'int'int'int)"); " is 129.
Long Statement,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The length of the statement  "            Assert.That(delegate { Matrix m = a.GetMatrix(RowTop' RowBottom + a.RowCount + 1' ColumnLeft' ColumnRight); }' Throws.TypeOf<IndexOutOfRangeException>()); " is 154.
Long Statement,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The length of the statement  "            Assert.That(delegate { Matrix m = a.GetMatrix(RowTop' RowBottom' ColumnLeft' ColumnRight + a.ColumnCount + 1); }' Throws.TypeOf<IndexOutOfRangeException>()); " is 157.
Long Statement,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The length of the statement  "            Assert.That(delegate { Matrix m = a.GetMatrix(RowTop' RowBottom' badcolumnindexset); }' Throws.TypeOf<IndexOutOfRangeException>()); " is 131.
Long Statement,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The length of the statement  "            Assert.That(delegate { Matrix m = a.GetMatrix(RowTop' RowBottom + a.RowCount + 1' columnindexset); }' Throws.TypeOf<IndexOutOfRangeException>()); " is 145.
Long Statement,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The length of the statement  "            Assert.That(delegate { Matrix m = a.GetMatrix(badrowindexset' ColumnLeft' ColumnRight); }' Throws.TypeOf<IndexOutOfRangeException>()); " is 134.
Long Statement,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The length of the statement  "            Assert.That(delegate { Matrix m = a.GetMatrix(rowindexset' ColumnLeft' ColumnRight + a.ColumnCount + 1); }' Throws.TypeOf<IndexOutOfRangeException>()); " is 151.
Long Statement,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The length of the statement  "            Assert.That(delegate { Matrix m = a.GetMatrix(badrowindexset' columnindexset); }' Throws.TypeOf<IndexOutOfRangeException>()); " is 125.
Long Statement,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The length of the statement  "            Assert.That(delegate { Matrix m = a.GetMatrix(rowindexset' badcolumnindexset); }' Throws.TypeOf<IndexOutOfRangeException>()); " is 125.
Long Statement,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixSetSubmatrix,The length of the statement  "            Assert.That(delegate { a.SetMatrix(RowTop' RowBottom + a.RowCount + 1' ColumnLeft' ColumnRight' sub); }' Throws.TypeOf<IndexOutOfRangeException>()); " is 148.
Long Statement,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixSetSubmatrix,The length of the statement  "            Assert.That(delegate { a.SetMatrix(RowTop' RowBottom' ColumnLeft' ColumnRight + a.ColumnCount + 1' sub); }' Throws.TypeOf<IndexOutOfRangeException>()); " is 151.
Long Statement,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixSetSubmatrix,The length of the statement  "            Assert.That(b.GetMatrix(RowTop' RowBottom' ColumnLeft' ColumnRight)' Is.EqualTo(sub)' "SetMatrix(int'int'int'int'Matrix)"); " is 123.
Long Statement,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixSetSubmatrix,The length of the statement  "            Assert.That(delegate { a.SetMatrix(RowTop' RowBottom + a.RowCount + 1' columnindexset' sub); }' Throws.TypeOf<IndexOutOfRangeException>()); " is 139.
Long Statement,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixSetSubmatrix,The length of the statement  "            Assert.That(delegate { a.SetMatrix(RowTop' RowBottom' badcolumnindexset' sub); }' Throws.TypeOf<IndexOutOfRangeException>()); " is 125.
Long Statement,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixSetSubmatrix,The length of the statement  "            Assert.That(b.GetMatrix(RowTop' RowBottom' ColumnLeft' ColumnRight)' Is.EqualTo(sub)' "SetMatrix(int'int'int[]'Matrix)"); " is 121.
Long Statement,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixSetSubmatrix,The length of the statement  "            Assert.That(delegate { a.SetMatrix(rowindexset' ColumnLeft' ColumnRight + a.ColumnCount + 1' sub); }' Throws.TypeOf<IndexOutOfRangeException>()); " is 145.
Long Statement,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixSetSubmatrix,The length of the statement  "            Assert.That(delegate { a.SetMatrix(badrowindexset' ColumnLeft' ColumnRight' sub); }' Throws.TypeOf<IndexOutOfRangeException>()); " is 128.
Long Statement,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixSetSubmatrix,The length of the statement  "            Assert.That(b.GetMatrix(RowTop' RowBottom' ColumnLeft' ColumnRight)' Is.EqualTo(sub)' "SetMatrix(int[]'int'int'Matrix)"); " is 121.
Long Statement,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve4,The length of the statement  "            Matrix ma = new Matrix(new double[][] { new double[] { 1' 2' 3 }' new double[] { 5' 7' 11 }' new double[] { 13' 17' 19 } }); " is 124.
Long Statement,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The length of the statement  "            Assert.That(mdhQR.Solve(Matrix.Identity(4' 4))' NumericIs.AlmostEqualTo(mdhPInv' 1e-13)' "real QR Solve/Pseudoinverse (H)"); " is 124.
Long Statement,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSingularValueDecomposition,The length of the statement  "            Assert.That(svd.LeftSingularVectors * (svd.S * Matrix.Transpose(svd.RightSingularVectors))' NumericIs.AlmostEqualTo(b)' "SingularValueDecomposition"); " is 150.
Long Statement,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSingularValueDecomposition,The length of the statement  "            Assert.That(c.Condition()' NumericIs.AlmostEqualTo(singularvalues[0] / singularvalues[Math.Min(c.RowCount' c.ColumnCount) - 1])' "Condition"); " is 142.
Long Statement,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GcdList,The length of the statement  "            Assert.That(Fn.Gcd(Int64.MaxValue - 1' Int64.MaxValue - 4' Int64.MaxValue - 7)' Is.EqualTo(3)' "Gcd(Int64Max-1'Int64Max-4'Int64Max-7)"); " is 136.
Long Statement,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularized,The length of the statement  "            Assert.That(Fn.GammaRegularized(0.5' 0.2)' NumericIs.AlmostEqualTo(0.47291074313446191487)' "(1/2'1/5) -> erf(sqrt(5)/5)"); " is 123.
Long Statement,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularized,The length of the statement  "            Assert.That(Fn.GammaRegularized(0.5' 0.4)' NumericIs.AlmostEqualTo(0.62890663047730242621)' "(1/2'2/5) -> erf(sqrt(10)/5)"); " is 124.
Long Statement,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularized,The length of the statement  "            Assert.That(Fn.GammaRegularized(0.5' 0.8)' NumericIs.AlmostEqualTo(0.79409678926793169113)' "(1/2'4/5) -> erf(sqrt(20)/5)"); " is 124.
Long Statement,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularized,The length of the statement  "            Assert.That(Fn.GammaRegularized(0.5' 20d)' NumericIs.AlmostEqualTo(0.99999999974603714105)' "(1/2'20) -> erf(2*5^(1/2))"); " is 122.
Long Statement,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The length of the statement  "            Assert.That(Fn.GammaRegularizedInverse(1' 0.63212055882855767840)' NumericIs.AlmostEqualTo((double) 1)' "(1'1-exp(-1)) -> 1"); " is 126.
Long Statement,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The length of the statement  "            Assert.That(Fn.GammaRegularizedInverse(1' 0.95678608173622775023)' NumericIs.AlmostEqualTo(Math.PI)' "(1'1-exp(-pi)) -> pi"); " is 125.
Long Statement,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The length of the statement  "            Assert.That(Fn.GammaRegularizedInverse(0.5' 0.84270079294971486934)' NumericIs.AlmostEqualTo((double) 1)' "(1/2'erf(1)) -> 1"); " is 127.
Long Statement,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The length of the statement  "            Assert.That(Fn.GammaRegularizedInverse(0.5' 0.47291074313446191487)' NumericIs.AlmostEqualTo(0.2)' "(1/2'erf(sqrt(1/5))) -> 1/5"); " is 130.
Long Statement,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The length of the statement  "            Assert.That(Fn.GammaRegularizedInverse(0.5' 0.62890663047730242621)' NumericIs.AlmostEqualTo(0.4)' "(1/2'erf(sqrt(2/5))) -> 2/5"); " is 130.
Long Statement,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The length of the statement  "            Assert.That(Fn.GammaRegularizedInverse(0.5' 0.79409678926793169113)' NumericIs.AlmostEqualTo(0.8)' "(1/2'erf(sqrt(8/5))) -> 4/5"); " is 130.
Long Statement,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The length of the statement  "            Assert.That(Fn.GammaRegularizedInverse(0.5' 0.99999225578356895592)' NumericIs.AlmostEqualTo((double) 10' 1e-12)' "(1/2'erf(sqrt(10))) -> 10"); " is 143.
Long Statement,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The length of the statement  "            Assert.That(Fn.GammaRegularizedInverse(0.5' 0.99999999974603714105)' NumericIs.AlmostEqualTo((double) 20' 1e-8)' "(1/2'erf(sqrt(20))) -> 20"); " is 142.
Long Statement,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsMeanVariance,The length of the statement  "            Assert.That(DescriptiveStatistics.Mean(gaussian.EnumerateDoubles(10000))' NumericIs.AlmostEqualTo(1e+9' 0.2)' "Mean of (1e+9'2)"); " is 130.
Long Statement,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsMeanVariance,The length of the statement  "            Assert.That(DescriptiveStatistics.Variance(gaussian.EnumerateDoubles(10000))' NumericIs.AlmostEqualTo((double) 4' 0.5)' "Variance of (1e+9'2)"); " is 144.
Long Statement,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsMeanVariance,The length of the statement  "            Assert.That(DescriptiveStatistics.StandardDeviation(gaussian.EnumerateDoubles(10000))' NumericIs.AlmostEqualTo((double) 2' 0.5)' "StdDev of (1e+9'2)"); " is 151.
Long Statement,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,ComplexTestTimeEven,The length of the statement  "                Assert.That(samples[len + 1 - i]' NumericIs.AlmostEqualTo(samples[i + 1])' "Complex Even in Time Space: Imaginary Part"); " is 121.
Long Statement,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,ComplexTestTimeOdd,The length of the statement  "                Assert.That(-samples[len + 1 - i]' NumericIs.AlmostEqualTo(samples[i + 1])' "Complex Odd in Time Space: Imaginary Part"); " is 121.
Long Statement,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,ComplexTestTimeOdd,The length of the statement  "            Assert.That(samples[1]' NumericIs.AlmostEqualTo(0.0)' "Complex Odd in Time Space: Imaginary Part: Periodic Continuation"); " is 122.
Long Statement,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,ComplexTestFreqEven,The length of the statement  "                Assert.That(samples[len - 2 - i]' Is.EqualTo(samples[i + 2]).Within(0.00000001)' "Complex Even in Frequency Space: Real Part"); " is 127.
Long Statement,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,ComplexTestFreqEven,The length of the statement  "                Assert.That(samples[len - 1 - i]' Is.EqualTo(samples[i + 3]).Within(0.00000001)' "Complex Even in Frequency Space: Imaginary Part"); " is 132.
Long Statement,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,ComplexTestFreqOdd,The length of the statement  "                Assert.That(-samples[len - 2 - i]' Is.EqualTo(samples[i + 2]).Within(0.00000001)' "Complex Odd in Frequency Space: Real Part"); " is 127.
Long Statement,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,ComplexTestFreqOdd,The length of the statement  "                Assert.That(-samples[len - 1 - i]' Is.EqualTo(samples[i + 3]).Within(0.00000001)' "Complex Odd in Frequency Space: Imaginary Part"); " is 132.
Long Statement,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,ComplexTestFreqOdd,The length of the statement  "            Assert.That(samples[0]' NumericIs.AlmostEqualTo(0.0)' "Complex Odd in Frequency Space: Real Part: Periodic Continuation (No DC)"); " is 130.
Long Statement,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,ComplexTestFreqOdd,The length of the statement  "            Assert.That(samples[1]' NumericIs.AlmostEqualTo(0.0)' "Complex Odd in Frequency Space: Imaginary Part: Periodic Continuation (No DC)"); " is 135.
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID90_CholeskySolve,The following statement contains a magic number: Matrix i = Matrix.Identity(3' 3);
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID90_CholeskySolve,The following statement contains a magic number: Matrix i = Matrix.Identity(3' 3);
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID90_CholeskySolve,The following statement contains a magic number: double[][] pvals1 = { new double[] { 1.0' 1.0' 1.0 }' new double[] { 1.0' 2.0' 3.0 }' new double[] { 1.0' 3.0' 6.0 } };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID90_CholeskySolve,The following statement contains a magic number: double[][] pvals1 = { new double[] { 1.0' 1.0' 1.0 }' new double[] { 1.0' 2.0' 3.0 }' new double[] { 1.0' 3.0' 6.0 } };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID90_CholeskySolve,The following statement contains a magic number: double[][] pvals1 = { new double[] { 1.0' 1.0' 1.0 }' new double[] { 1.0' 2.0' 3.0 }' new double[] { 1.0' 3.0' 6.0 } };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID90_CholeskySolve,The following statement contains a magic number: double[][] pvals1 = { new double[] { 1.0' 1.0' 1.0 }' new double[] { 1.0' 2.0' 3.0 }' new double[] { 1.0' 3.0' 6.0 } };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID90_CholeskySolve,The following statement contains a magic number: double[][] pvals2 = { new double[] { 25' -5' 10 }' new double[] { -5' 17' 10 }' new double[] { 10' 10' 62 } };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID90_CholeskySolve,The following statement contains a magic number: double[][] pvals2 = { new double[] { 25' -5' 10 }' new double[] { -5' 17' 10 }' new double[] { 10' 10' 62 } };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID90_CholeskySolve,The following statement contains a magic number: double[][] pvals2 = { new double[] { 25' -5' 10 }' new double[] { -5' 17' 10 }' new double[] { 10' 10' 62 } };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID90_CholeskySolve,The following statement contains a magic number: double[][] pvals2 = { new double[] { 25' -5' 10 }' new double[] { -5' 17' 10 }' new double[] { 10' 10' 62 } };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID90_CholeskySolve,The following statement contains a magic number: double[][] pvals2 = { new double[] { 25' -5' 10 }' new double[] { -5' 17' 10 }' new double[] { 10' 10' 62 } };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID90_CholeskySolve,The following statement contains a magic number: double[][] pvals2 = { new double[] { 25' -5' 10 }' new double[] { -5' 17' 10 }' new double[] { 10' 10' 62 } };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID90_CholeskySolve,The following statement contains a magic number: double[][] pvals2 = { new double[] { 25' -5' 10 }' new double[] { -5' 17' 10 }' new double[] { 10' 10' 62 } };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID90_CholeskySolve,The following statement contains a magic number: double[][] pvals2 = { new double[] { 25' -5' 10 }' new double[] { -5' 17' 10 }' new double[] { 10' 10' 62 } };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID90_CholeskySolve,The following statement contains a magic number: double[][] pvals2 = { new double[] { 25' -5' 10 }' new double[] { -5' 17' 10 }' new double[] { 10' 10' 62 } };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID107_ComplexPowerAtZero,The following statement contains a magic number: Complex zeroPowTwo = Complex.Zero.Power(2);
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID119_PolynomialExtrapolatePositiveDirection,The following statement contains a magic number: double[] x = new double[] { -6.060771484' -5.855378418' -1.794238281' -1.229428711' 0.89935791' 2.912121582' 4.699230957' 4.788347168' 7.728830566' 11.70989502 };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID119_PolynomialExtrapolatePositiveDirection,The following statement contains a magic number: double[] x = new double[] { -6.060771484' -5.855378418' -1.794238281' -1.229428711' 0.89935791' 2.912121582' 4.699230957' 4.788347168' 7.728830566' 11.70989502 };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID119_PolynomialExtrapolatePositiveDirection,The following statement contains a magic number: double[] x = new double[] { -6.060771484' -5.855378418' -1.794238281' -1.229428711' 0.89935791' 2.912121582' 4.699230957' 4.788347168' 7.728830566' 11.70989502 };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID119_PolynomialExtrapolatePositiveDirection,The following statement contains a magic number: double[] x = new double[] { -6.060771484' -5.855378418' -1.794238281' -1.229428711' 0.89935791' 2.912121582' 4.699230957' 4.788347168' 7.728830566' 11.70989502 };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID119_PolynomialExtrapolatePositiveDirection,The following statement contains a magic number: double[] x = new double[] { -6.060771484' -5.855378418' -1.794238281' -1.229428711' 0.89935791' 2.912121582' 4.699230957' 4.788347168' 7.728830566' 11.70989502 };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID119_PolynomialExtrapolatePositiveDirection,The following statement contains a magic number: double[] x = new double[] { -6.060771484' -5.855378418' -1.794238281' -1.229428711' 0.89935791' 2.912121582' 4.699230957' 4.788347168' 7.728830566' 11.70989502 };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID119_PolynomialExtrapolatePositiveDirection,The following statement contains a magic number: double[] x = new double[] { -6.060771484' -5.855378418' -1.794238281' -1.229428711' 0.89935791' 2.912121582' 4.699230957' 4.788347168' 7.728830566' 11.70989502 };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID119_PolynomialExtrapolatePositiveDirection,The following statement contains a magic number: double[] x = new double[] { -6.060771484' -5.855378418' -1.794238281' -1.229428711' 0.89935791' 2.912121582' 4.699230957' 4.788347168' 7.728830566' 11.70989502 };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID119_PolynomialExtrapolatePositiveDirection,The following statement contains a magic number: double[] x = new double[] { -6.060771484' -5.855378418' -1.794238281' -1.229428711' 0.89935791' 2.912121582' 4.699230957' 4.788347168' 7.728830566' 11.70989502 };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID119_PolynomialExtrapolatePositiveDirection,The following statement contains a magic number: double[] x = new double[] { -6.060771484' -5.855378418' -1.794238281' -1.229428711' 0.89935791' 2.912121582' 4.699230957' 4.788347168' 7.728830566' 11.70989502 };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID119_PolynomialExtrapolatePositiveDirection,The following statement contains a magic number: double[] y = new double[] { 0.959422052' 0.959447861' 0.959958017' 0.960028946' 0.960323274' 0.960636258' 0.960914195' 0.960928023' 0.96138531' 0.962004483 };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID119_PolynomialExtrapolatePositiveDirection,The following statement contains a magic number: double[] y = new double[] { 0.959422052' 0.959447861' 0.959958017' 0.960028946' 0.960323274' 0.960636258' 0.960914195' 0.960928023' 0.96138531' 0.962004483 };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID119_PolynomialExtrapolatePositiveDirection,The following statement contains a magic number: double[] y = new double[] { 0.959422052' 0.959447861' 0.959958017' 0.960028946' 0.960323274' 0.960636258' 0.960914195' 0.960928023' 0.96138531' 0.962004483 };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID119_PolynomialExtrapolatePositiveDirection,The following statement contains a magic number: double[] y = new double[] { 0.959422052' 0.959447861' 0.959958017' 0.960028946' 0.960323274' 0.960636258' 0.960914195' 0.960928023' 0.96138531' 0.962004483 };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID119_PolynomialExtrapolatePositiveDirection,The following statement contains a magic number: double[] y = new double[] { 0.959422052' 0.959447861' 0.959958017' 0.960028946' 0.960323274' 0.960636258' 0.960914195' 0.960928023' 0.96138531' 0.962004483 };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID119_PolynomialExtrapolatePositiveDirection,The following statement contains a magic number: double[] y = new double[] { 0.959422052' 0.959447861' 0.959958017' 0.960028946' 0.960323274' 0.960636258' 0.960914195' 0.960928023' 0.96138531' 0.962004483 };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID119_PolynomialExtrapolatePositiveDirection,The following statement contains a magic number: double[] y = new double[] { 0.959422052' 0.959447861' 0.959958017' 0.960028946' 0.960323274' 0.960636258' 0.960914195' 0.960928023' 0.96138531' 0.962004483 };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID119_PolynomialExtrapolatePositiveDirection,The following statement contains a magic number: double[] y = new double[] { 0.959422052' 0.959447861' 0.959958017' 0.960028946' 0.960323274' 0.960636258' 0.960914195' 0.960928023' 0.96138531' 0.962004483 };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID119_PolynomialExtrapolatePositiveDirection,The following statement contains a magic number: double[] y = new double[] { 0.959422052' 0.959447861' 0.959958017' 0.960028946' 0.960323274' 0.960636258' 0.960914195' 0.960928023' 0.96138531' 0.962004483 };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID119_PolynomialExtrapolatePositiveDirection,The following statement contains a magic number: double[] y = new double[] { 0.959422052' 0.959447861' 0.959958017' 0.960028946' 0.960323274' 0.960636258' 0.960914195' 0.960928023' 0.96138531' 0.962004483 };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID119_PolynomialExtrapolatePositiveDirection,The following statement contains a magic number: PolynomialInterpolationAlgorithm pia = new PolynomialInterpolationAlgorithm(10);
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID119_PolynomialExtrapolatePositiveDirection,The following statement contains a magic number: SampleList sl = new SampleList(10);
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID119_PolynomialExtrapolatePositiveDirection,The following statement contains a magic number: i < 10
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID119_PolynomialExtrapolatePositiveDirection,The following statement contains a magic number: Assert.That(pia.Extrapolate(12)' NumericIs.AlmostEqualTo(0.9622' 1e-3)' "extrapolate(12)");
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID119_PolynomialExtrapolatePositiveDirection,The following statement contains a magic number: Assert.That(pia.Extrapolate(12)' NumericIs.AlmostEqualTo(0.9622' 1e-3)' "extrapolate(12)");
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID119_PolynomialExtrapolatePositiveDirection,The following statement contains a magic number: Assert.That(pia.Extrapolate(12)' NumericIs.AlmostEqualTo(0.9622' 1e-3)' "extrapolate(12)");
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID177_MatrixPseudoInverse,The following statement contains a magic number: Matrix a = new Matrix(new double[][] {                  new double[] { 15' 23' 44' 54 }'                  new double[] { 1' 5' 9' 4 }'                  new double[] { 8' 11' 4' 2 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID177_MatrixPseudoInverse,The following statement contains a magic number: Matrix a = new Matrix(new double[][] {                  new double[] { 15' 23' 44' 54 }'                  new double[] { 1' 5' 9' 4 }'                  new double[] { 8' 11' 4' 2 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID177_MatrixPseudoInverse,The following statement contains a magic number: Matrix a = new Matrix(new double[][] {                  new double[] { 15' 23' 44' 54 }'                  new double[] { 1' 5' 9' 4 }'                  new double[] { 8' 11' 4' 2 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID177_MatrixPseudoInverse,The following statement contains a magic number: Matrix a = new Matrix(new double[][] {                  new double[] { 15' 23' 44' 54 }'                  new double[] { 1' 5' 9' 4 }'                  new double[] { 8' 11' 4' 2 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID177_MatrixPseudoInverse,The following statement contains a magic number: Matrix a = new Matrix(new double[][] {                  new double[] { 15' 23' 44' 54 }'                  new double[] { 1' 5' 9' 4 }'                  new double[] { 8' 11' 4' 2 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID177_MatrixPseudoInverse,The following statement contains a magic number: Matrix a = new Matrix(new double[][] {                  new double[] { 15' 23' 44' 54 }'                  new double[] { 1' 5' 9' 4 }'                  new double[] { 8' 11' 4' 2 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID177_MatrixPseudoInverse,The following statement contains a magic number: Matrix a = new Matrix(new double[][] {                  new double[] { 15' 23' 44' 54 }'                  new double[] { 1' 5' 9' 4 }'                  new double[] { 8' 11' 4' 2 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID177_MatrixPseudoInverse,The following statement contains a magic number: Matrix a = new Matrix(new double[][] {                  new double[] { 15' 23' 44' 54 }'                  new double[] { 1' 5' 9' 4 }'                  new double[] { 8' 11' 4' 2 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID177_MatrixPseudoInverse,The following statement contains a magic number: Matrix a = new Matrix(new double[][] {                  new double[] { 15' 23' 44' 54 }'                  new double[] { 1' 5' 9' 4 }'                  new double[] { 8' 11' 4' 2 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID177_MatrixPseudoInverse,The following statement contains a magic number: Matrix a = new Matrix(new double[][] {                  new double[] { 15' 23' 44' 54 }'                  new double[] { 1' 5' 9' 4 }'                  new double[] { 8' 11' 4' 2 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID177_MatrixPseudoInverse,The following statement contains a magic number: Matrix a = new Matrix(new double[][] {                  new double[] { 15' 23' 44' 54 }'                  new double[] { 1' 5' 9' 4 }'                  new double[] { 8' 11' 4' 2 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID177_MatrixPseudoInverse,The following statement contains a magic number: Matrix aInverse = new Matrix(new double[][] {                  new double[] { 0.00729481932863557' -0.0906433578450537' 0.0629567950756452 }'                  new double[] { -0.00695248549232449' 0.0302767536403138' 0.0601374162387492 }'                  new double[] { -0.00876996343998189' 0.155054444209528' -0.033311997806593 }'                  new double[] { 0.0265993197732062' -0.114057602060568' -0.0159589740025151 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID177_MatrixPseudoInverse,The following statement contains a magic number: Matrix aInverse = new Matrix(new double[][] {                  new double[] { 0.00729481932863557' -0.0906433578450537' 0.0629567950756452 }'                  new double[] { -0.00695248549232449' 0.0302767536403138' 0.0601374162387492 }'                  new double[] { -0.00876996343998189' 0.155054444209528' -0.033311997806593 }'                  new double[] { 0.0265993197732062' -0.114057602060568' -0.0159589740025151 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID177_MatrixPseudoInverse,The following statement contains a magic number: Matrix aInverse = new Matrix(new double[][] {                  new double[] { 0.00729481932863557' -0.0906433578450537' 0.0629567950756452 }'                  new double[] { -0.00695248549232449' 0.0302767536403138' 0.0601374162387492 }'                  new double[] { -0.00876996343998189' 0.155054444209528' -0.033311997806593 }'                  new double[] { 0.0265993197732062' -0.114057602060568' -0.0159589740025151 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID177_MatrixPseudoInverse,The following statement contains a magic number: Matrix aInverse = new Matrix(new double[][] {                  new double[] { 0.00729481932863557' -0.0906433578450537' 0.0629567950756452 }'                  new double[] { -0.00695248549232449' 0.0302767536403138' 0.0601374162387492 }'                  new double[] { -0.00876996343998189' 0.155054444209528' -0.033311997806593 }'                  new double[] { 0.0265993197732062' -0.114057602060568' -0.0159589740025151 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID177_MatrixPseudoInverse,The following statement contains a magic number: Matrix aInverse = new Matrix(new double[][] {                  new double[] { 0.00729481932863557' -0.0906433578450537' 0.0629567950756452 }'                  new double[] { -0.00695248549232449' 0.0302767536403138' 0.0601374162387492 }'                  new double[] { -0.00876996343998189' 0.155054444209528' -0.033311997806593 }'                  new double[] { 0.0265993197732062' -0.114057602060568' -0.0159589740025151 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID177_MatrixPseudoInverse,The following statement contains a magic number: Matrix aInverse = new Matrix(new double[][] {                  new double[] { 0.00729481932863557' -0.0906433578450537' 0.0629567950756452 }'                  new double[] { -0.00695248549232449' 0.0302767536403138' 0.0601374162387492 }'                  new double[] { -0.00876996343998189' 0.155054444209528' -0.033311997806593 }'                  new double[] { 0.0265993197732062' -0.114057602060568' -0.0159589740025151 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID177_MatrixPseudoInverse,The following statement contains a magic number: Matrix aInverse = new Matrix(new double[][] {                  new double[] { 0.00729481932863557' -0.0906433578450537' 0.0629567950756452 }'                  new double[] { -0.00695248549232449' 0.0302767536403138' 0.0601374162387492 }'                  new double[] { -0.00876996343998189' 0.155054444209528' -0.033311997806593 }'                  new double[] { 0.0265993197732062' -0.114057602060568' -0.0159589740025151 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID177_MatrixPseudoInverse,The following statement contains a magic number: Matrix aInverse = new Matrix(new double[][] {                  new double[] { 0.00729481932863557' -0.0906433578450537' 0.0629567950756452 }'                  new double[] { -0.00695248549232449' 0.0302767536403138' 0.0601374162387492 }'                  new double[] { -0.00876996343998189' 0.155054444209528' -0.033311997806593 }'                  new double[] { 0.0265993197732062' -0.114057602060568' -0.0159589740025151 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID177_MatrixPseudoInverse,The following statement contains a magic number: Matrix aInverse = new Matrix(new double[][] {                  new double[] { 0.00729481932863557' -0.0906433578450537' 0.0629567950756452 }'                  new double[] { -0.00695248549232449' 0.0302767536403138' 0.0601374162387492 }'                  new double[] { -0.00876996343998189' 0.155054444209528' -0.033311997806593 }'                  new double[] { 0.0265993197732062' -0.114057602060568' -0.0159589740025151 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID177_MatrixPseudoInverse,The following statement contains a magic number: Matrix aInverse = new Matrix(new double[][] {                  new double[] { 0.00729481932863557' -0.0906433578450537' 0.0629567950756452 }'                  new double[] { -0.00695248549232449' 0.0302767536403138' 0.0601374162387492 }'                  new double[] { -0.00876996343998189' 0.155054444209528' -0.033311997806593 }'                  new double[] { 0.0265993197732062' -0.114057602060568' -0.0159589740025151 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID177_MatrixPseudoInverse,The following statement contains a magic number: Matrix aInverse = new Matrix(new double[][] {                  new double[] { 0.00729481932863557' -0.0906433578450537' 0.0629567950756452 }'                  new double[] { -0.00695248549232449' 0.0302767536403138' 0.0601374162387492 }'                  new double[] { -0.00876996343998189' 0.155054444209528' -0.033311997806593 }'                  new double[] { 0.0265993197732062' -0.114057602060568' -0.0159589740025151 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID177_MatrixPseudoInverse,The following statement contains a magic number: Matrix aInverse = new Matrix(new double[][] {                  new double[] { 0.00729481932863557' -0.0906433578450537' 0.0629567950756452 }'                  new double[] { -0.00695248549232449' 0.0302767536403138' 0.0601374162387492 }'                  new double[] { -0.00876996343998189' 0.155054444209528' -0.033311997806593 }'                  new double[] { 0.0265993197732062' -0.114057602060568' -0.0159589740025151 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID177_MatrixPseudoInverse,The following statement contains a magic number: Assert.That(a.Inverse()' NumericIs.AlmostEqualTo(aInverse' 1e-14)' "A");
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID177_MatrixPseudoInverse,The following statement contains a magic number: Assert.That(Matrix.Transpose(a).Inverse()' NumericIs.AlmostEqualTo(Matrix.Transpose(aInverse)' 1e-14)' "B");
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix m = Matrix.Create(new double['] {                  {                      0.885544230294749' -0.580336000562429' 0.400869970588928'                      0.165954532231597' 0.690977298196212' -0.521887360236719'                      -0.0814483582258942' -0.939682389503636' -0.210173828668251'                      0.564932147694539' -1.0154353322131' 0.640685090404004                  }'                  {                      -0.580336000562429' 0.492486112353507' -0.262914069278714'                      -0.0584647849641528' -0.537766775087812' 0.294726342538363'                      0.0927869109175177' 0.726403468926861' 0.0862640603521092'                      -0.489794367061056' 0.744944058771799' -0.508334956905994                  }'                  {                      0.400869970588928' -0.262914069278714' 0.244830980759568'                      0.11785975727827' 0.32222855875326' -0.204193677592214'                      -0.214481531745175' -0.442608559845998' 0.026150314424896'                      0.227433408251588' -0.513686177880137' 0.298511026285728                  }'                  {                      0.165954532231597' -0.0584647849641528' 0.11785975727827'                      0.140069862075066' 0.0897123706302303' -0.0758472091590544'                      -0.0932037350339198' -0.165672162129375' -0.00707090905640249'                      0.026167220128558' -0.193113416527151' 0.0536084745263342                  }'                  {                      0.690977298196212' -0.537766775087812' 0.32222855875326'                      0.0897123706302303' 0.657562200713567' -0.401936443046788'                      -0.0234089455262449' -0.862071919853614' -0.216526083877413'                      0.571650829476108' -0.854054719662501' 0.563633629284995                  }'                  {                      -0.521887360236719' 0.294726342538363' -0.204193677592214'                      -0.0758472091590544' -0.401936443046788' 0.37498137218359'                      -0.129585782998913' 0.517649461236531' 0.273871905878737'                      -0.322714035020032' 0.536190051081469' -0.34125462486497                  }'                  {                      -0.0814483582258942' 0.0927869109175177' -0.214481531745175'                      -0.0932037350339198' -0.0234089455262449' -0.129585782998913'                      0.910194610272133' 0.0543719437593689' -0.59175909723612'                      0.011081021028939' 0.235777494730137' -0.170324529941829                  }'                  {                      -0.939682389503636' 0.726403468926861' -0.442608559845998'                       -0.165672162129375' -0.862071919853614' 0.517649461236531'                       0.0543719437593689' 1.18519903822716' 0.226643546080826'                       -0.742715732562644' 1.20491236837527' -0.762429062710757                  }'                  {                      -0.210173828668251' 0.0862640603521092' 0.026150314424896'                      -0.00707090905640249' -0.216526083877413' 0.273871905878737'                       -0.59175909723612' 0.226643546080826' 0.621099014778964'                      -0.217571234379085' 0.0386828111635692' -0.0296104994618287'                  }'                  {                      0.564932147694539' -0.489794367061056' 0.227433408251588'                       0.026167220128558' 0.571650829476108' -0.322714035020032'                       0.011081021028939' -0.742715732562644' -0.217571234379085'                       0.557123237502864' -0.694564753107317' 0.508972258047537                  }'                  {                      -1.0154353322131' 0.744944058771799' -0.513686177880137'                       -0.193113416527151' -0.854054719662501' 0.536190051081469'                      0.235777494730137' 1.20491236837527' 0.0386828111635692'                      -0.694564753107317' 1.347356880385' -0.837009265117046                  }'                  {                      0.640685090404004' -0.508334956905994' 0.298511026285728'                      0.0536084745263342' 0.563633629284995' -0.34125462486497'                      -0.170324529941829' -0.762429062710757' -0.0296104994618287'                      0.508972258047537' -0.837009265117046' 0.583552460453826                  }              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: ComplexVector expectedEigenValues = ComplexVector.Create(new double[] {                  0d' 0d' 0d' 0d'                  0.00262233860281324'                  0.0210323773292213'                  0.0355556528747382'                  0.127624731796062'                  0.179718416331653'                  0.310576269081767'                  1.52253860917203'                  5.80033160481171              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: ComplexVector expectedEigenValues = ComplexVector.Create(new double[] {                  0d' 0d' 0d' 0d'                  0.00262233860281324'                  0.0210323773292213'                  0.0355556528747382'                  0.127624731796062'                  0.179718416331653'                  0.310576269081767'                  1.52253860917203'                  5.80033160481171              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: ComplexVector expectedEigenValues = ComplexVector.Create(new double[] {                  0d' 0d' 0d' 0d'                  0.00262233860281324'                  0.0210323773292213'                  0.0355556528747382'                  0.127624731796062'                  0.179718416331653'                  0.310576269081767'                  1.52253860917203'                  5.80033160481171              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: ComplexVector expectedEigenValues = ComplexVector.Create(new double[] {                  0d' 0d' 0d' 0d'                  0.00262233860281324'                  0.0210323773292213'                  0.0355556528747382'                  0.127624731796062'                  0.179718416331653'                  0.310576269081767'                  1.52253860917203'                  5.80033160481171              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: ComplexVector expectedEigenValues = ComplexVector.Create(new double[] {                  0d' 0d' 0d' 0d'                  0.00262233860281324'                  0.0210323773292213'                  0.0355556528747382'                  0.127624731796062'                  0.179718416331653'                  0.310576269081767'                  1.52253860917203'                  5.80033160481171              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: ComplexVector expectedEigenValues = ComplexVector.Create(new double[] {                  0d' 0d' 0d' 0d'                  0.00262233860281324'                  0.0210323773292213'                  0.0355556528747382'                  0.127624731796062'                  0.179718416331653'                  0.310576269081767'                  1.52253860917203'                  5.80033160481171              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: ComplexVector expectedEigenValues = ComplexVector.Create(new double[] {                  0d' 0d' 0d' 0d'                  0.00262233860281324'                  0.0210323773292213'                  0.0355556528747382'                  0.127624731796062'                  0.179718416331653'                  0.310576269081767'                  1.52253860917203'                  5.80033160481171              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: ComplexVector expectedEigenValues = ComplexVector.Create(new double[] {                  0d' 0d' 0d' 0d'                  0.00262233860281324'                  0.0210323773292213'                  0.0355556528747382'                  0.127624731796062'                  0.179718416331653'                  0.310576269081767'                  1.52253860917203'                  5.80033160481171              });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Matrix expectedEigenVectors = new Matrix(new double[][] {                  new double[] { 0.106498497282379' 0.419691143613967' -0.0557817580954078' -0.00690851159493115' 0.371136426079307' 0.223461682210106' -0.468606464889867' 0.343527867020022' 0.0756466774996531' -0.369826279577119' -0.0284941597416966' 0.375195260395109 }'                  new double[] { 0.106498497282348' 0.419691143613984' -0.0557817580953903' -0.00690851159494274' 0.347453164986349' -0.567931379282469' 0.448676542846663' 0.0426012577167882' -0.00926728212925367' -0.290807685971263' -0.0241538261982648' -0.278790999189846 }'                  new double[] { 0.141668469389994' 0.156579178192424' -0.546459905897362' -0.320022417617439' -0.370241497490735' 0.332713332831733' 0.399336647042652' -0.104765030616846' 0.0739529635375817' -0.283780350824145' 0.138326048745256' 0.176134628893008 }'                  new double[] { 0.456535390675942' -0.214226432376964' 0.109822773758153' 0.133529424410943' -0.191583966179205' -0.266148198349251' -0.313325326798921' -0.506526681171299' 0.0272792573144116' -0.495783211258065' 0.0584677852966494' 0.059551430007216 }'                  new double[] { 0.364647620387872' 0.0977045432532739' 0.436554618830564' 0.335448611182954' 0.163995962609024' 0.328414432657394' 0.477700760063001' -0.152793609708388' 0.192188934685942' 0.137049561691855' -0.0685542301292428' 0.328126132911985 }'                  new double[] { -0.0118021512337526' 0.687830921400826' 0.0253622787075734' 0.0340672396524277' -0.128932474003535' 0.111659773051072' -0.253460159931006' -0.480758764565753' -0.0957818149202032' 0.338676131657749' 0.180081795108562' -0.210185274196965 }'                  new double[] { 0.283462964841237' 0.0345316526707189' -0.136594149073437' -0.0420356194913279' -0.0133246227195541' 0.102617378729154' -0.00943588067870301' -0.0313070656278569' -0.574003455674121' 0.0681122379738542' -0.741712896390675' -0.0446883956970386 }'                  new double[] { 0.244849290172628' 0.0918403159398603' -0.0949837111837109' 0.577123713866291' -0.38448721213687' 0.141537415024233' -0.0419331454701546' 0.452402089212107' 0.0853436565432261' -0.0866385554860394' 0.0434070293735178' -0.445597633077243 }'                  new double[] { 0.400790602926352' -0.199507773642233' -0.135930857423972' -0.0303383327890531' 0.343450721385221' 0.108021571075484' 0.0137877512860494' 0.0892884039126865' -0.512143067951694' 0.158808597386327' 0.590928375174204' -0.0752948350722554 }'                  new double[] { 0.221355443237417' -0.0542519363253111' -0.585993504810665' 0.258161164492889' 0.123510354803434' -0.32794171148589' -0.105403788999763' -0.0520352776917921' 0.325720237275597' 0.455414054946441' -0.0958514753059141' 0.280573659051638 }'                  new double[] { 0.407153336780693' -0.096005525911419' 0.0677148671312564' -0.494402873973341' 0.192742899138734' 0.18832136952349' -0.123734336631771' 0.0245713241631777' 0.481424400615441' 0.12926200568014' -0.142716239407588' -0.467562669903876 }'                  new double[] { 0.316238576923814' 0.181825098245019' 0.312639383751487' -0.345156725151147' -0.45371975647163' -0.374725665985126' -0.0236025978381509' 0.375795487357127' -0.0703605067966124' 0.23951349378026' 0.0902717934751914' 0.30253869587827 }                  });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Assert.That(eigenValues.Length' Is.EqualTo(12)' "Eigenvalue Length");
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Assert.That(eigenValues' NumericIs.AlmostEqualTo(expectedEigenValues' 1e-13)' "Eigenvalue Values");
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Assert.That(eigenVectors.RowCount' Is.EqualTo(12)' "Eigenvector Rows");
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Assert.That(eigenVectors.ColumnCount' Is.EqualTo(12)' "Eigenvector Columns");
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: Assert.That(b' NumericIs.AlmostEqualTo(a' 1e-11)' "Eigenvector Values: " + i.ToString());
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID182_Eigenvalues,The following statement contains a magic number: i < 12
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID203_PolynomialAddition,The following statement contains a magic number: Polynomial p1 = new Polynomial(new double[] { -1' 0' 2 });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID203_PolynomialAddition,The following statement contains a magic number: Polynomial p2 = new Polynomial(new double[] { 4 });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID203_PolynomialAddition,The following statement contains a magic number: ComplexPolynomial cp1 = new ComplexPolynomial(new Complex[] { -1' 0' 2 });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID203_PolynomialAddition,The following statement contains a magic number: ComplexPolynomial cp2 = new ComplexPolynomial(new Complex[] { 4 });
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID204_GammaRegularizedSmallA,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.1' 1.0625)' NumericIs.AlmostEqualTo(.97815275356248035867' 1e-13)' "A");
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID204_GammaRegularizedSmallA,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.1' 1.0625)' NumericIs.AlmostEqualTo(.97815275356248035867' 1e-13)' "A");
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID204_GammaRegularizedSmallA,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.1' 1.0625)' NumericIs.AlmostEqualTo(.97815275356248035867' 1e-13)' "A");
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID204_GammaRegularizedSmallA,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.1' 1.0625)' NumericIs.AlmostEqualTo(.97815275356248035867' 1e-13)' "A");
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID204_GammaRegularizedSmallA,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.01' 1.0625)' NumericIs.AlmostEqualTo(.99800133196409378795' 1e-13)' "B");
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID204_GammaRegularizedSmallA,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.01' 1.0625)' NumericIs.AlmostEqualTo(.99800133196409378795' 1e-13)' "B");
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID204_GammaRegularizedSmallA,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.01' 1.0625)' NumericIs.AlmostEqualTo(.99800133196409378795' 1e-13)' "B");
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID204_GammaRegularizedSmallA,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.01' 1.0625)' NumericIs.AlmostEqualTo(.99800133196409378795' 1e-13)' "B");
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID204_GammaRegularizedSmallA,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.001' 1.0625)' NumericIs.AlmostEqualTo(.99980203148024635861' 1e-13)' "C");
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID204_GammaRegularizedSmallA,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.001' 1.0625)' NumericIs.AlmostEqualTo(.99980203148024635861' 1e-13)' "C");
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID204_GammaRegularizedSmallA,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.001' 1.0625)' NumericIs.AlmostEqualTo(.99980203148024635861' 1e-13)' "C");
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID204_GammaRegularizedSmallA,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.001' 1.0625)' NumericIs.AlmostEqualTo(.99980203148024635861' 1e-13)' "C");
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID204_GammaRegularizedSmallA,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.0001' 1.0625)' NumericIs.AlmostEqualTo(.99998022216513016030' 1e-13)' "D");
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID204_GammaRegularizedSmallA,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.0001' 1.0625)' NumericIs.AlmostEqualTo(.99998022216513016030' 1e-13)' "D");
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID204_GammaRegularizedSmallA,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.0001' 1.0625)' NumericIs.AlmostEqualTo(.99998022216513016030' 1e-13)' "D");
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID204_GammaRegularizedSmallA,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.0001' 1.0625)' NumericIs.AlmostEqualTo(.99998022216513016030' 1e-13)' "D");
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID204_GammaRegularizedSmallA,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.016512683231958761' 1.0625)' NumericIs.AlmostEqualTo(.99667704526159905093' 1e-13)' "X");
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID204_GammaRegularizedSmallA,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.016512683231958761' 1.0625)' NumericIs.AlmostEqualTo(.99667704526159905093' 1e-13)' "X");
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID204_GammaRegularizedSmallA,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.016512683231958761' 1.0625)' NumericIs.AlmostEqualTo(.99667704526159905093' 1e-13)' "X");
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID204_GammaRegularizedSmallA,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.016512683231958761' 1.0625)' NumericIs.AlmostEqualTo(.99667704526159905093' 1e-13)' "X");
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID205_GammaDistInvCdfSmallAlphaLargeTheta,The following statement contains a magic number: double alpha = 0.016512683231958761;
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID205_GammaDistInvCdfSmallAlphaLargeTheta,The following statement contains a magic number: double theta = 73076944.560563684;
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID205_GammaDistInvCdfSmallAlphaLargeTheta,The following statement contains a magic number: double left_tail = gamma_dist.InverseCumulativeDistribution(0.001);
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID209_InterpolationWithThreeSamples,The following statement contains a magic number: double[] values = new double[] { 6.0' 12.0' 16.0 };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID209_InterpolationWithThreeSamples,The following statement contains a magic number: double[] values = new double[] { 6.0' 12.0' 16.0 };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID209_InterpolationWithThreeSamples,The following statement contains a magic number: double[] values = new double[] { 6.0' 12.0' 16.0 };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID209_InterpolationWithThreeSamples,The following statement contains a magic number: double[] points = new double[] { 1.0' 2.0' 3.0 };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID209_InterpolationWithThreeSamples,The following statement contains a magic number: double[] points = new double[] { 1.0' 2.0' 3.0 };
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID209_InterpolationWithThreeSamples,The following statement contains a magic number: double b = method2.Interpolate(2.5);
Magic Number,Iridium.Test,BugRegression,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\BugRegression.cs,IRID209_InterpolationWithThreeSamples,The following statement contains a magic number: double a = method.Interpolate(2.5);
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_Combinatorics_Permutation,The following statement contains a magic number: int[] numbers = new int[] { 1' 2' 3' 4' 5 };
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_Combinatorics_Permutation,The following statement contains a magic number: int[] numbers = new int[] { 1' 2' 3' 4' 5 };
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_Combinatorics_Permutation,The following statement contains a magic number: int[] numbers = new int[] { 1' 2' 3' 4' 5 };
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_Combinatorics_Permutation,The following statement contains a magic number: int[] numbers = new int[] { 1' 2' 3' 4' 5 };
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_Combinatorics_Permutation,The following statement contains a magic number: Assert.That(Combinatorics.Permutations(count)' NumericIs.AlmostEqualTo(120.0)' "perm(5)");
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_LinearAlgebra_Eigen,The following statement contains a magic number: Matrix m = new Matrix(new double[][] {                  new double[] { 10.0' -18.0 }'                  new double[] { 6.0' -11.0 }                  });
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_LinearAlgebra_Eigen,The following statement contains a magic number: Matrix m = new Matrix(new double[][] {                  new double[] { 10.0' -18.0 }'                  new double[] { 6.0' -11.0 }                  });
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_LinearAlgebra_Eigen,The following statement contains a magic number: Matrix m = new Matrix(new double[][] {                  new double[] { 10.0' -18.0 }'                  new double[] { 6.0' -11.0 }                  });
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_LinearAlgebra_Eigen,The following statement contains a magic number: Matrix m = new Matrix(new double[][] {                  new double[] { 10.0' -18.0 }'                  new double[] { 6.0' -11.0 }                  });
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_LinearAlgebra_Eigen,The following statement contains a magic number: Assert.That(eigenValues[1].Real' NumericIs.AlmostEqualTo(-2.0)' "Re{eigenvalueB}");
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_LinearAlgebra_Eigen,The following statement contains a magic number: Assert.That(eigenVectors[0' 0]' NumericIs.AlmostEqualTo(.8944271910' 1e-9)' "eigenvectorA[0]");
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_LinearAlgebra_Eigen,The following statement contains a magic number: Assert.That(eigenVectors[0' 0]' NumericIs.AlmostEqualTo(.8944271910' 1e-9)' "eigenvectorA[0]");
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_LinearAlgebra_Eigen,The following statement contains a magic number: Assert.That(eigenVectors[1' 0]' NumericIs.AlmostEqualTo(.4472135955' 1e-9)' "eigenvectorA[1]");
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_LinearAlgebra_Eigen,The following statement contains a magic number: Assert.That(eigenVectors[1' 0]' NumericIs.AlmostEqualTo(.4472135955' 1e-9)' "eigenvectorA[1]");
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_LinearAlgebra_Eigen,The following statement contains a magic number: Assert.That(eigenVectors[0' 1]' NumericIs.AlmostEqualTo(6.708203936' 1e-9)' "eigenvectorB[0]");
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_LinearAlgebra_Eigen,The following statement contains a magic number: Assert.That(eigenVectors[0' 1]' NumericIs.AlmostEqualTo(6.708203936' 1e-9)' "eigenvectorB[0]");
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_LinearAlgebra_Eigen,The following statement contains a magic number: Assert.That(eigenVectors[1' 1]' NumericIs.AlmostEqualTo(4.472135956' 1e-9)' "eigenvectorB[1]");
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_LinearAlgebra_Eigen,The following statement contains a magic number: Assert.That(eigenVectors[1' 1]' NumericIs.AlmostEqualTo(4.472135956' 1e-9)' "eigenvectorB[1]");
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_PolynomialRegression,The following statement contains a magic number: double[] x = new double[] { 1000' 2000' 3000' 4000' 5000' 6000' 7000 };
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_PolynomialRegression,The following statement contains a magic number: double[] x = new double[] { 1000' 2000' 3000' 4000' 5000' 6000' 7000 };
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_PolynomialRegression,The following statement contains a magic number: double[] x = new double[] { 1000' 2000' 3000' 4000' 5000' 6000' 7000 };
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_PolynomialRegression,The following statement contains a magic number: double[] x = new double[] { 1000' 2000' 3000' 4000' 5000' 6000' 7000 };
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_PolynomialRegression,The following statement contains a magic number: double[] x = new double[] { 1000' 2000' 3000' 4000' 5000' 6000' 7000 };
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_PolynomialRegression,The following statement contains a magic number: double[] x = new double[] { 1000' 2000' 3000' 4000' 5000' 6000' 7000 };
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_PolynomialRegression,The following statement contains a magic number: double[] x = new double[] { 1000' 2000' 3000' 4000' 5000' 6000' 7000 };
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_PolynomialRegression,The following statement contains a magic number: double[] y = new double[] { -30' -60' -88' -123' -197' -209' -266 };
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_PolynomialRegression,The following statement contains a magic number: double[] y = new double[] { -30' -60' -88' -123' -197' -209' -266 };
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_PolynomialRegression,The following statement contains a magic number: double[] y = new double[] { -30' -60' -88' -123' -197' -209' -266 };
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_PolynomialRegression,The following statement contains a magic number: double[] y = new double[] { -30' -60' -88' -123' -197' -209' -266 };
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_PolynomialRegression,The following statement contains a magic number: double[] y = new double[] { -30' -60' -88' -123' -197' -209' -266 };
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_PolynomialRegression,The following statement contains a magic number: double[] y = new double[] { -30' -60' -88' -123' -197' -209' -266 };
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_PolynomialRegression,The following statement contains a magic number: double[] y = new double[] { -30' -60' -88' -123' -197' -209' -266 };
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_PolynomialRegression,The following statement contains a magic number: int polynomialOrder = 3;
Magic Number,Iridium.Test,CodeSamples,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CodeSamples.cs,CodeSample_PolynomialRegression,The following statement contains a magic number: Assert.That(polynomial.Evaluate(x[i])' NumericIs.AlmostEqualTo(y[i]' 0.1)' i.ToString());
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Variations(10' 0)' Is.EqualTo(1)' "Var(10'0)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Variations(10' 2)' Is.EqualTo(90)' "Var(10'2)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Variations(10' 2)' Is.EqualTo(90)' "Var(10'2)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Variations(10' 2)' Is.EqualTo(90)' "Var(10'2)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Variations(10' 4)' Is.EqualTo(5040)' "Var(10'4)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Variations(10' 4)' Is.EqualTo(5040)' "Var(10'4)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Variations(10' 4)' Is.EqualTo(5040)' "Var(10'4)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Variations(10' 6)' Is.EqualTo(151200)' "Var(10'6)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Variations(10' 6)' Is.EqualTo(151200)' "Var(10'6)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Variations(10' 6)' Is.EqualTo(151200)' "Var(10'6)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Variations(10' 9)' Is.EqualTo(3628800)' "Var(10'9)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Variations(10' 9)' Is.EqualTo(3628800)' "Var(10'9)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Variations(10' 9)' Is.EqualTo(3628800)' "Var(10'9)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Variations(10' 10)' Is.EqualTo(3628800)' "Var(10'10)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Variations(10' 10)' Is.EqualTo(3628800)' "Var(10'10)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Variations(10' 10)' Is.EqualTo(3628800)' "Var(10'10)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Variations(10' 11)' Is.EqualTo(0)' "Var(10'11)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Variations(10' 11)' Is.EqualTo(0)' "Var(10'11)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.VariationsWithRepetition(10' 0)' Is.EqualTo(1)' "VarRep(10'0)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.VariationsWithRepetition(10' 2)' Is.EqualTo(100)' "VarRep(10'2)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.VariationsWithRepetition(10' 2)' Is.EqualTo(100)' "VarRep(10'2)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.VariationsWithRepetition(10' 2)' Is.EqualTo(100)' "VarRep(10'2)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.VariationsWithRepetition(10' 4)' Is.EqualTo(10000)' "VarRep(10'4)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.VariationsWithRepetition(10' 4)' Is.EqualTo(10000)' "VarRep(10'4)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.VariationsWithRepetition(10' 4)' Is.EqualTo(10000)' "VarRep(10'4)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.VariationsWithRepetition(10' 6)' Is.EqualTo(1000000)' "VarRep(10'6)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.VariationsWithRepetition(10' 6)' Is.EqualTo(1000000)' "VarRep(10'6)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.VariationsWithRepetition(10' 6)' Is.EqualTo(1000000)' "VarRep(10'6)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.VariationsWithRepetition(10' 9)' Is.EqualTo(1000000000)' "VarRep(10'9)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.VariationsWithRepetition(10' 9)' Is.EqualTo(1000000000)' "VarRep(10'9)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.VariationsWithRepetition(10' 9)' Is.EqualTo(1000000000)' "VarRep(10'9)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.VariationsWithRepetition(10' 10)' Is.EqualTo(10000000000)' "VarRep(10'10)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.VariationsWithRepetition(10' 10)' Is.EqualTo(10000000000)' "VarRep(10'10)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.VariationsWithRepetition(10' 10)' Is.EqualTo(10000000000)' "VarRep(10'10)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.VariationsWithRepetition(10' 11)' Is.EqualTo(100000000000)' "VarRep(10'11)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.VariationsWithRepetition(10' 11)' Is.EqualTo(100000000000)' "VarRep(10'11)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingVariationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.VariationsWithRepetition(10' 11)' Is.EqualTo(100000000000)' "VarRep(10'11)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Combinations(10' 0)' Is.EqualTo(1)' "Comb(10'0)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Combinations(10' 2)' Is.EqualTo(45)' "Comb(10'2)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Combinations(10' 2)' Is.EqualTo(45)' "Comb(10'2)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Combinations(10' 2)' Is.EqualTo(45)' "Comb(10'2)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Combinations(10' 4)' Is.EqualTo(210)' "Comb(10'4)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Combinations(10' 4)' Is.EqualTo(210)' "Comb(10'4)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Combinations(10' 4)' Is.EqualTo(210)' "Comb(10'4)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Combinations(10' 6)' Is.EqualTo(210)' "Comb(10'6)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Combinations(10' 6)' Is.EqualTo(210)' "Comb(10'6)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Combinations(10' 6)' Is.EqualTo(210)' "Comb(10'6)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Combinations(10' 9)' Is.EqualTo(10)' "Comb(10'9)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Combinations(10' 9)' Is.EqualTo(10)' "Comb(10'9)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Combinations(10' 9)' Is.EqualTo(10)' "Comb(10'9)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Combinations(10' 10)' Is.EqualTo(1)' "Comb(10'10)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Combinations(10' 10)' Is.EqualTo(1)' "Comb(10'10)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Combinations(10' 11)' Is.EqualTo(0)' "Comb(10'11)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsTest,The following statement contains a magic number: Assert.That(Combinatorics.Combinations(10' 11)' Is.EqualTo(0)' "Comb(10'11)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.CombinationsWithRepetition(10' 0)' Is.EqualTo(1)' "CombRep(10'0)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.CombinationsWithRepetition(10' 2)' Is.EqualTo(55)' "CombRep(10'2)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.CombinationsWithRepetition(10' 2)' Is.EqualTo(55)' "CombRep(10'2)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.CombinationsWithRepetition(10' 2)' Is.EqualTo(55)' "CombRep(10'2)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.CombinationsWithRepetition(10' 4)' Is.EqualTo(715)' "CombRep(10'4)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.CombinationsWithRepetition(10' 4)' Is.EqualTo(715)' "CombRep(10'4)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.CombinationsWithRepetition(10' 4)' Is.EqualTo(715)' "CombRep(10'4)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.CombinationsWithRepetition(10' 6)' Is.EqualTo(5005)' "CombRep(10'6)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.CombinationsWithRepetition(10' 6)' Is.EqualTo(5005)' "CombRep(10'6)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.CombinationsWithRepetition(10' 6)' Is.EqualTo(5005)' "CombRep(10'6)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.CombinationsWithRepetition(10' 9)' Is.EqualTo(48620)' "CombRep(10'9)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.CombinationsWithRepetition(10' 9)' Is.EqualTo(48620)' "CombRep(10'9)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.CombinationsWithRepetition(10' 9)' Is.EqualTo(48620)' "CombRep(10'9)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.CombinationsWithRepetition(10' 10)' Is.EqualTo(92378)' "CombRep(10'10)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.CombinationsWithRepetition(10' 10)' Is.EqualTo(92378)' "CombRep(10'10)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.CombinationsWithRepetition(10' 10)' Is.EqualTo(92378)' "CombRep(10'10)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.CombinationsWithRepetition(10' 11)' Is.EqualTo(167960)' "CombRep(10'11)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.CombinationsWithRepetition(10' 11)' Is.EqualTo(167960)' "CombRep(10'11)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingCombinationsWithRepetitionTest,The following statement contains a magic number: Assert.That(Combinatorics.CombinationsWithRepetition(10' 11)' Is.EqualTo(167960)' "CombRep(10'11)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingPermutations,The following statement contains a magic number: Assert.That(Combinatorics.Permutations(2)' Is.EqualTo(2)' "Perm(2)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingPermutations,The following statement contains a magic number: Assert.That(Combinatorics.Permutations(2)' Is.EqualTo(2)' "Perm(2)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingPermutations,The following statement contains a magic number: Assert.That(Combinatorics.Permutations(8)' Is.EqualTo(40320)' "Perm(8)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingPermutations,The following statement contains a magic number: Assert.That(Combinatorics.Permutations(8)' Is.EqualTo(40320)' "Perm(8)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingPermutations,The following statement contains a magic number: Assert.That(Combinatorics.Permutations(15)' Is.EqualTo(1307674368000)' "Perm(15)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingPermutations,The following statement contains a magic number: Assert.That(Combinatorics.Permutations(15)' Is.EqualTo(1307674368000)' "Perm(15)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingPermutations,The following statement contains a magic number: Assert.That(Combinatorics.Permutations(30)' Is.EqualTo(265252859812191058636308480000000d)' "Perm(30)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingPermutations,The following statement contains a magic number: Assert.That(Combinatorics.Permutations(30)' Is.EqualTo(265252859812191058636308480000000d)' "Perm(30)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingPermutations,The following statement contains a magic number: Assert.That(Combinatorics.Permutations(128)' NumericIs.AlmostEqualTo(0.3856204824e216' 1e-10)' "Perm(128)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingPermutations,The following statement contains a magic number: Assert.That(Combinatorics.Permutations(128)' NumericIs.AlmostEqualTo(0.3856204824e216' 1e-10)' "Perm(128)");
Magic Number,Iridium.Test.CombinatoricsTests,CombinatoricsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\CombinatoricsTests\CombinatoricsTest.cs,CountingPermutations,The following statement contains a magic number: Assert.That(Combinatorics.Permutations(128)' NumericIs.AlmostEqualTo(0.3856204824e216' 1e-10)' "Perm(128)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestDistributionShapeTestHelper,The following statement contains a magic number: DistributionShape shape = DistributionShape.CreateMinMax(2' -1.0' +1.0);
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestDistributionShapeTestHelper,The following statement contains a magic number: shape.Push(-1.5);
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestDistributionShapeTestHelper,The following statement contains a magic number: shape.Push(-0.5);
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestDistributionShapeTestHelper,The following statement contains a magic number: shape.Push(0.5);
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestDistributionShapeTestHelper,The following statement contains a magic number: shape.Push(1.5);
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestDistributionShapeTestHelper,The following statement contains a magic number: Assert.That(shape.Overflow' Is.EqualTo(2)' "overflow");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestDistributionShapeTestHelper,The following statement contains a magic number: Assert.That(shape[0]' Is.EqualTo(2)' "0");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestDistributionShapeTestHelper,The following statement contains a magic number: Assert.That(shape[1]' Is.EqualTo(2)' "1");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Uniform,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ContinuousUniformDistribution(0.0' 1.0)'                  0.0'                  1.0'                  5'                  100000'                  0.01'                  "ContinuousUniform(0.0'1.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Uniform,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ContinuousUniformDistribution(0.0' 1.0)'                  0.0'                  1.0'                  5'                  100000'                  0.01'                  "ContinuousUniform(0.0'1.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Uniform,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ContinuousUniformDistribution(0.0' 1.0)'                  0.0'                  1.0'                  5'                  100000'                  0.01'                  "ContinuousUniform(0.0'1.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Uniform,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ContinuousUniformDistribution(-2.0' 2.0)'                  -2.0'                  2.0'                  10'                  100000'                  0.01'                  "ContinuousUniform(-2.0'2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Uniform,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ContinuousUniformDistribution(-2.0' 2.0)'                  -2.0'                  2.0'                  10'                  100000'                  0.01'                  "ContinuousUniform(-2.0'2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Uniform,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ContinuousUniformDistribution(-2.0' 2.0)'                  -2.0'                  2.0'                  10'                  100000'                  0.01'                  "ContinuousUniform(-2.0'2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Uniform,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ContinuousUniformDistribution(-2.0' 2.0)'                  -2.0'                  2.0'                  10'                  100000'                  0.01'                  "ContinuousUniform(-2.0'2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Uniform,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ContinuousUniformDistribution(-2.0' 2.0)'                  -2.0'                  2.0'                  10'                  100000'                  0.01'                  "ContinuousUniform(-2.0'2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Uniform,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ContinuousUniformDistribution(-2.0' 2.0)'                  -2.0'                  2.0'                  10'                  100000'                  0.01'                  "ContinuousUniform(-2.0'2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Uniform,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ContinuousUniformDistribution(-2.0' 2.0)'                  -2.0'                  2.0'                  10'                  100000'                  0.01'                  "ContinuousUniform(-2.0'2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Triangular,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new TriangularDistribution(2.0' 4.0' 2.5)'                  2.0'                  4.0'                  10'                  100000'                  0.01'                  "TriangularDistribution(2.0'4.0'2.5)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Triangular,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new TriangularDistribution(2.0' 4.0' 2.5)'                  2.0'                  4.0'                  10'                  100000'                  0.01'                  "TriangularDistribution(2.0'4.0'2.5)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Triangular,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new TriangularDistribution(2.0' 4.0' 2.5)'                  2.0'                  4.0'                  10'                  100000'                  0.01'                  "TriangularDistribution(2.0'4.0'2.5)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Triangular,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new TriangularDistribution(2.0' 4.0' 2.5)'                  2.0'                  4.0'                  10'                  100000'                  0.01'                  "TriangularDistribution(2.0'4.0'2.5)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Triangular,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new TriangularDistribution(2.0' 4.0' 2.5)'                  2.0'                  4.0'                  10'                  100000'                  0.01'                  "TriangularDistribution(2.0'4.0'2.5)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Triangular,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new TriangularDistribution(2.0' 4.0' 2.5)'                  2.0'                  4.0'                  10'                  100000'                  0.01'                  "TriangularDistribution(2.0'4.0'2.5)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Triangular,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new TriangularDistribution(2.0' 4.0' 2.5)'                  2.0'                  4.0'                  10'                  100000'                  0.01'                  "TriangularDistribution(2.0'4.0'2.5)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Triangular,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new TriangularDistribution(2.0' 4.0' 2.5)'                  2.0'                  4.0'                  10'                  100000'                  0.01'                  "TriangularDistribution(2.0'4.0'2.5)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Gaussian,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new StandardDistribution()'                  -2.0'                  2.0'                  10'                  100000'                  0.01'                  "StandardDistribution()");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Gaussian,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new StandardDistribution()'                  -2.0'                  2.0'                  10'                  100000'                  0.01'                  "StandardDistribution()");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Gaussian,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new StandardDistribution()'                  -2.0'                  2.0'                  10'                  100000'                  0.01'                  "StandardDistribution()");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Gaussian,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new StandardDistribution()'                  -2.0'                  2.0'                  10'                  100000'                  0.01'                  "StandardDistribution()");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Gaussian,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new StandardDistribution()'                  -2.0'                  2.0'                  10'                  100000'                  0.01'                  "StandardDistribution()");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Gaussian,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new NormalDistribution(-5.0' 2.0)'                  -9.0'                  -1.0'                  10'                  100000'                  0.01'                  "NormalDistribution(-5.0'2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Gaussian,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new NormalDistribution(-5.0' 2.0)'                  -9.0'                  -1.0'                  10'                  100000'                  0.01'                  "NormalDistribution(-5.0'2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Gaussian,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new NormalDistribution(-5.0' 2.0)'                  -9.0'                  -1.0'                  10'                  100000'                  0.01'                  "NormalDistribution(-5.0'2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Gaussian,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new NormalDistribution(-5.0' 2.0)'                  -9.0'                  -1.0'                  10'                  100000'                  0.01'                  "NormalDistribution(-5.0'2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Gaussian,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new NormalDistribution(-5.0' 2.0)'                  -9.0'                  -1.0'                  10'                  100000'                  0.01'                  "NormalDistribution(-5.0'2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Gaussian,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new NormalDistribution(-5.0' 2.0)'                  -9.0'                  -1.0'                  10'                  100000'                  0.01'                  "NormalDistribution(-5.0'2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Gaussian,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new LognormalDistribution(1.0' 0.5)'                  0.0'                  8.0'                  10'                  100000'                  0.01'                  "LognormalDistribution(1.0'0.5)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Gaussian,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new LognormalDistribution(1.0' 0.5)'                  0.0'                  8.0'                  10'                  100000'                  0.01'                  "LognormalDistribution(1.0'0.5)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Gaussian,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new LognormalDistribution(1.0' 0.5)'                  0.0'                  8.0'                  10'                  100000'                  0.01'                  "LognormalDistribution(1.0'0.5)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Gaussian,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new LognormalDistribution(1.0' 0.5)'                  0.0'                  8.0'                  10'                  100000'                  0.01'                  "LognormalDistribution(1.0'0.5)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Gaussian,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new LognormalDistribution(1.0' 0.5)'                  0.0'                  8.0'                  10'                  100000'                  0.01'                  "LognormalDistribution(1.0'0.5)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Gaussian,The following statement contains a magic number: NormalDistribution source = new NormalDistribution(4.0' 2.0);
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Gaussian,The following statement contains a magic number: NormalDistribution source = new NormalDistribution(4.0' 2.0);
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Gaussian,The following statement contains a magic number: target.EstimateDistributionParameters(source.EnumerateDoubles(1000));
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Gaussian,The following statement contains a magic number: Assert.That(target.Mu' NumericIs.AlmostEqualTo(4.0' 0.1)' "Normal Parameter Estimation: Mu");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Gaussian,The following statement contains a magic number: Assert.That(target.Mu' NumericIs.AlmostEqualTo(4.0' 0.1)' "Normal Parameter Estimation: Mu");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Gaussian,The following statement contains a magic number: Assert.That(target.Sigma' NumericIs.AlmostEqualTo(2.0' 0.1)' "Normal Parameter Estimation: Sigma");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Gaussian,The following statement contains a magic number: Assert.That(target.Sigma' NumericIs.AlmostEqualTo(2.0' 0.1)' "Normal Parameter Estimation: Sigma");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Exponential,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ExponentialDistribution(0.75)'                  0.0'                  7.0'                  10'                  100000'                  0.01'                  "ExponentialDistribution(0.75)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Exponential,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ExponentialDistribution(0.75)'                  0.0'                  7.0'                  10'                  100000'                  0.01'                  "ExponentialDistribution(0.75)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Exponential,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ExponentialDistribution(0.75)'                  0.0'                  7.0'                  10'                  100000'                  0.01'                  "ExponentialDistribution(0.75)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Exponential,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ExponentialDistribution(0.75)'                  0.0'                  7.0'                  10'                  100000'                  0.01'                  "ExponentialDistribution(0.75)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Exponential,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ExponentialDistribution(0.75)'                  0.0'                  7.0'                  10'                  100000'                  0.01'                  "ExponentialDistribution(0.75)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_GammaBeta,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new GammaDistribution(2.0' 2.0)'                  0.0'                  12.0'                  10'                  100000'                  0.01'                  "GammaDistribution(2.0'2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_GammaBeta,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new GammaDistribution(2.0' 2.0)'                  0.0'                  12.0'                  10'                  100000'                  0.01'                  "GammaDistribution(2.0'2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_GammaBeta,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new GammaDistribution(2.0' 2.0)'                  0.0'                  12.0'                  10'                  100000'                  0.01'                  "GammaDistribution(2.0'2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_GammaBeta,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new GammaDistribution(2.0' 2.0)'                  0.0'                  12.0'                  10'                  100000'                  0.01'                  "GammaDistribution(2.0'2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_GammaBeta,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new GammaDistribution(2.0' 2.0)'                  0.0'                  12.0'                  10'                  100000'                  0.01'                  "GammaDistribution(2.0'2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_GammaBeta,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new GammaDistribution(2.0' 2.0)'                  0.0'                  12.0'                  10'                  100000'                  0.01'                  "GammaDistribution(2.0'2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_GammaBeta,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new BetaDistribution(2.0' 5.0)'                  0.0'                  1.0'                  10'                  100000'                  0.01'                  "BetaDistribution(2.0'5.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_GammaBeta,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new BetaDistribution(2.0' 5.0)'                  0.0'                  1.0'                  10'                  100000'                  0.01'                  "BetaDistribution(2.0'5.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_GammaBeta,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new BetaDistribution(2.0' 5.0)'                  0.0'                  1.0'                  10'                  100000'                  0.01'                  "BetaDistribution(2.0'5.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_GammaBeta,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new BetaDistribution(2.0' 5.0)'                  0.0'                  1.0'                  10'                  100000'                  0.01'                  "BetaDistribution(2.0'5.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_GammaBeta,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new BetaDistribution(2.0' 5.0)'                  0.0'                  1.0'                  10'                  100000'                  0.01'                  "BetaDistribution(2.0'5.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Laplace,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new LaplaceDistribution(4.0' 1.5)'                  0.0'                  8.0'                  10'                  100000'                  0.01'                  "LaplaceDistribution(4.0'1.5)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Laplace,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new LaplaceDistribution(4.0' 1.5)'                  0.0'                  8.0'                  10'                  100000'                  0.01'                  "LaplaceDistribution(4.0'1.5)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Laplace,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new LaplaceDistribution(4.0' 1.5)'                  0.0'                  8.0'                  10'                  100000'                  0.01'                  "LaplaceDistribution(4.0'1.5)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Laplace,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new LaplaceDistribution(4.0' 1.5)'                  0.0'                  8.0'                  10'                  100000'                  0.01'                  "LaplaceDistribution(4.0'1.5)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Laplace,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new LaplaceDistribution(4.0' 1.5)'                  0.0'                  8.0'                  10'                  100000'                  0.01'                  "LaplaceDistribution(4.0'1.5)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Laplace,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new LaplaceDistribution(4.0' 1.5)'                  0.0'                  8.0'                  10'                  100000'                  0.01'                  "LaplaceDistribution(4.0'1.5)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Chi,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ChiDistribution(3)'                  0.0'                  8.0'                  10'                  100000'                  0.01'                  "ChiDistribution(3)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Chi,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ChiDistribution(3)'                  0.0'                  8.0'                  10'                  100000'                  0.01'                  "ChiDistribution(3)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Chi,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ChiDistribution(3)'                  0.0'                  8.0'                  10'                  100000'                  0.01'                  "ChiDistribution(3)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Chi,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ChiDistribution(3)'                  0.0'                  8.0'                  10'                  100000'                  0.01'                  "ChiDistribution(3)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Chi,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ChiDistribution(3)'                  0.0'                  8.0'                  10'                  100000'                  0.01'                  "ChiDistribution(3)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Chi,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ChiSquareDistribution(2)'                  0.0'                  8.0'                  10'                  100000'                  0.01'                  "ChiSquareDistribution(2)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Chi,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ChiSquareDistribution(2)'                  0.0'                  8.0'                  10'                  100000'                  0.01'                  "ChiSquareDistribution(2)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Chi,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ChiSquareDistribution(2)'                  0.0'                  8.0'                  10'                  100000'                  0.01'                  "ChiSquareDistribution(2)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Chi,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ChiSquareDistribution(2)'                  0.0'                  8.0'                  10'                  100000'                  0.01'                  "ChiSquareDistribution(2)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Chi,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ChiSquareDistribution(2)'                  0.0'                  8.0'                  10'                  100000'                  0.01'                  "ChiSquareDistribution(2)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Pareto,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ParetoDistribution(1.0' 2.0)'                  1.0'                  4.0'                  10'                  100000'                  0.01'                  "ParetoDistribution(1.0'2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Pareto,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ParetoDistribution(1.0' 2.0)'                  1.0'                  4.0'                  10'                  100000'                  0.01'                  "ParetoDistribution(1.0'2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Pareto,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ParetoDistribution(1.0' 2.0)'                  1.0'                  4.0'                  10'                  100000'                  0.01'                  "ParetoDistribution(1.0'2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Pareto,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ParetoDistribution(1.0' 2.0)'                  1.0'                  4.0'                  10'                  100000'                  0.01'                  "ParetoDistribution(1.0'2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Pareto,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ParetoDistribution(1.0' 2.0)'                  1.0'                  4.0'                  10'                  100000'                  0.01'                  "ParetoDistribution(1.0'2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Cauchy,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new CauchyLorentzDistribution(1.0' 0.5)'                  0.0'                  3.0'                  10'                  100000'                  0.01'                  "CauchyLorentzDistribution(1.0'0.5)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Cauchy,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new CauchyLorentzDistribution(1.0' 0.5)'                  0.0'                  3.0'                  10'                  100000'                  0.01'                  "CauchyLorentzDistribution(1.0'0.5)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Cauchy,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new CauchyLorentzDistribution(1.0' 0.5)'                  0.0'                  3.0'                  10'                  100000'                  0.01'                  "CauchyLorentzDistribution(1.0'0.5)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Cauchy,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new CauchyLorentzDistribution(1.0' 0.5)'                  0.0'                  3.0'                  10'                  100000'                  0.01'                  "CauchyLorentzDistribution(1.0'0.5)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Cauchy,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new CauchyLorentzDistribution(1.0' 0.5)'                  0.0'                  3.0'                  10'                  100000'                  0.01'                  "CauchyLorentzDistribution(1.0'0.5)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Erlang,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ErlangDistribution(2' 2.0)'                  0.0'                  10.0'                  10'                  100000'                  0.01'                  "ErlangDistribution(2'2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Erlang,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ErlangDistribution(2' 2.0)'                  0.0'                  10.0'                  10'                  100000'                  0.01'                  "ErlangDistribution(2'2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Erlang,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ErlangDistribution(2' 2.0)'                  0.0'                  10.0'                  10'                  100000'                  0.01'                  "ErlangDistribution(2'2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Erlang,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ErlangDistribution(2' 2.0)'                  0.0'                  10.0'                  10'                  100000'                  0.01'                  "ErlangDistribution(2'2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Erlang,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ErlangDistribution(2' 2.0)'                  0.0'                  10.0'                  10'                  100000'                  0.01'                  "ErlangDistribution(2'2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Erlang,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new ErlangDistribution(2' 2.0)'                  0.0'                  10.0'                  10'                  100000'                  0.01'                  "ErlangDistribution(2'2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Rayleigh,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new RayleighDistribution(2.0)'                  0.0'                  8.0'                  10'                  100000'                  0.01'                  "RayleighDistribution(2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Rayleigh,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new RayleighDistribution(2.0)'                  0.0'                  8.0'                  10'                  100000'                  0.01'                  "RayleighDistribution(2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Rayleigh,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new RayleighDistribution(2.0)'                  0.0'                  8.0'                  10'                  100000'                  0.01'                  "RayleighDistribution(2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Rayleigh,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new RayleighDistribution(2.0)'                  0.0'                  8.0'                  10'                  100000'                  0.01'                  "RayleighDistribution(2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Rayleigh,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new RayleighDistribution(2.0)'                  0.0'                  8.0'                  10'                  100000'                  0.01'                  "RayleighDistribution(2.0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Rayleigh,The following statement contains a magic number: RayleighDistribution source = new RayleighDistribution(4.0);
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Rayleigh,The following statement contains a magic number: target.EstimateDistributionParameters(source.EnumerateDoubles(1000));
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Rayleigh,The following statement contains a magic number: Assert.That(target.Sigma' NumericIs.AlmostEqualTo(4.0' 0.1)' "Rayleigh Parameter Estimation: Sigma");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_Rayleigh,The following statement contains a magic number: Assert.That(target.Sigma' NumericIs.AlmostEqualTo(4.0' 0.1)' "Rayleigh Parameter Estimation: Sigma");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new FisherSnedecorDistribution(10' 5)'                  0.0'                  3.0'                  10'                  100000'                  0.01'                  "FisherSnedecorDistribution(10'5)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new FisherSnedecorDistribution(10' 5)'                  0.0'                  3.0'                  10'                  100000'                  0.01'                  "FisherSnedecorDistribution(10'5)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new FisherSnedecorDistribution(10' 5)'                  0.0'                  3.0'                  10'                  100000'                  0.01'                  "FisherSnedecorDistribution(10'5)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new FisherSnedecorDistribution(10' 5)'                  0.0'                  3.0'                  10'                  100000'                  0.01'                  "FisherSnedecorDistribution(10'5)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new FisherSnedecorDistribution(10' 5)'                  0.0'                  3.0'                  10'                  100000'                  0.01'                  "FisherSnedecorDistribution(10'5)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new FisherSnedecorDistribution(10' 5)'                  0.0'                  3.0'                  10'                  100000'                  0.01'                  "FisherSnedecorDistribution(10'5)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: FisherSnedecorDistribution d = new FisherSnedecorDistribution(100' 100);
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: FisherSnedecorDistribution d = new FisherSnedecorDistribution(100' 100);
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(0.50)' NumericIs.AlmostEqualTo(0.1102042201e-1' 1e-9)' "pdf(0.50)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(0.50)' NumericIs.AlmostEqualTo(0.1102042201e-1' 1e-9)' "pdf(0.50)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(0.50)' NumericIs.AlmostEqualTo(0.1102042201e-1' 1e-9)' "pdf(0.50)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(0.75)' NumericIs.AlmostEqualTo(0.9462174566' 1e-9)' "pdf(0.75)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(0.75)' NumericIs.AlmostEqualTo(0.9462174566' 1e-9)' "pdf(0.75)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(0.75)' NumericIs.AlmostEqualTo(0.9462174566' 1e-9)' "pdf(0.75)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(1.00)' NumericIs.AlmostEqualTo(1.989730935' 1e-9)' "pdf(1.00)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(1.00)' NumericIs.AlmostEqualTo(1.989730935' 1e-9)' "pdf(1.00)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(1.25)' NumericIs.AlmostEqualTo(0.8553281091' 1e-9)' "pdf(1.25)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(1.25)' NumericIs.AlmostEqualTo(0.8553281091' 1e-9)' "pdf(1.25)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(1.25)' NumericIs.AlmostEqualTo(0.8553281091' 1e-9)' "pdf(1.25)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(1.50)' NumericIs.AlmostEqualTo(0.1722918542' 1e-9)' "pdf(1.50)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(1.50)' NumericIs.AlmostEqualTo(0.1722918542' 1e-9)' "pdf(1.50)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(1.50)' NumericIs.AlmostEqualTo(0.1722918542' 1e-9)' "pdf(1.50)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(2.00)' NumericIs.AlmostEqualTo(0.2755105502e-2' 1e-9)' "pdf(2.00)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(2.00)' NumericIs.AlmostEqualTo(0.2755105502e-2' 1e-9)' "pdf(2.00)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(2.00)' NumericIs.AlmostEqualTo(0.2755105502e-2' 1e-9)' "pdf(2.00)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(5.00)' NumericIs.AlmostEqualTo(0.6858025452e-13' 1e-9)' "pdf(5.00)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(5.00)' NumericIs.AlmostEqualTo(0.6858025452e-13' 1e-9)' "pdf(5.00)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(5.00)' NumericIs.AlmostEqualTo(0.6858025452e-13' 1e-9)' "pdf(5.00)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(0.50)' NumericIs.AlmostEqualTo(0.309136863e-3' 1e-8)' "cdf(0.50)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(0.50)' NumericIs.AlmostEqualTo(0.309136863e-3' 1e-8)' "cdf(0.50)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(0.50)' NumericIs.AlmostEqualTo(0.309136863e-3' 1e-8)' "cdf(0.50)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(0.75)' NumericIs.AlmostEqualTo(0.7602003436e-1' 1e-9)' "cdf(0.75)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(0.75)' NumericIs.AlmostEqualTo(0.7602003436e-1' 1e-9)' "cdf(0.75)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(0.75)' NumericIs.AlmostEqualTo(0.7602003436e-1' 1e-9)' "cdf(0.75)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(1.00)' NumericIs.AlmostEqualTo(0.5000000000' 1e-9)' "cdf(1.00)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(1.00)' NumericIs.AlmostEqualTo(0.5000000000' 1e-9)' "cdf(1.00)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(1.25)' NumericIs.AlmostEqualTo(0.8668843977' 1e-9)' "cdf(1.25)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(1.25)' NumericIs.AlmostEqualTo(0.8668843977' 1e-9)' "cdf(1.25)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(1.25)' NumericIs.AlmostEqualTo(0.8668843977' 1e-9)' "cdf(1.25)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(1.50)' NumericIs.AlmostEqualTo(0.9780695579' 1e-9)' "cdf(1.50)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(1.50)' NumericIs.AlmostEqualTo(0.9780695579' 1e-9)' "cdf(1.50)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(1.50)' NumericIs.AlmostEqualTo(0.9780695579' 1e-9)' "cdf(1.50)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(2.00)' NumericIs.AlmostEqualTo(0.9996908631' 1e-9)' "cdf(2.00)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(2.00)' NumericIs.AlmostEqualTo(0.9996908631' 1e-9)' "cdf(2.00)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(2.00)' NumericIs.AlmostEqualTo(0.9996908631' 1e-9)' "cdf(2.00)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(5.00)' NumericIs.AlmostEqualTo(1.0' 1e-9)' "cdf(5.00)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(5.00)' NumericIs.AlmostEqualTo(1.0' 1e-9)' "cdf(5.00)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: FisherSnedecorDistribution dOne = new FisherSnedecorDistribution(1' 5);
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: FisherSnedecorDistribution dTwo = new FisherSnedecorDistribution(2' 5);
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_FisherSnedecor,The following statement contains a magic number: FisherSnedecorDistribution dTwo = new FisherSnedecorDistribution(2' 5);
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new StudentsTDistribution(2)'                  -2.0'                  5.0'                  10'                  100000'                  0.01'                  "StudentsTDistribution(2)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new StudentsTDistribution(2)'                  -2.0'                  5.0'                  10'                  100000'                  0.01'                  "StudentsTDistribution(2)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new StudentsTDistribution(2)'                  -2.0'                  5.0'                  10'                  100000'                  0.01'                  "StudentsTDistribution(2)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new StudentsTDistribution(2)'                  -2.0'                  5.0'                  10'                  100000'                  0.01'                  "StudentsTDistribution(2)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new StudentsTDistribution(2)'                  -2.0'                  5.0'                  10'                  100000'                  0.01'                  "StudentsTDistribution(2)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: TestContinuousDistributionShapeMatchesCumulativeDensity(                  new StudentsTDistribution(2)'                  -2.0'                  5.0'                  10'                  100000'                  0.01'                  "StudentsTDistribution(2)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: StudentsTDistribution d = new StudentsTDistribution(2);
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(0.0)' NumericIs.AlmostEqualTo(0.3535533906' 1e-9)' "pdf(0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(0.0)' NumericIs.AlmostEqualTo(0.3535533906' 1e-9)' "pdf(0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(1.0)' NumericIs.AlmostEqualTo(0.1924500897' 1e-9)' "pdf(1)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(1.0)' NumericIs.AlmostEqualTo(0.1924500897' 1e-9)' "pdf(1)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(2.0)' NumericIs.AlmostEqualTo(0.06804138174' 1e-9)' "pdf(2)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(2.0)' NumericIs.AlmostEqualTo(0.06804138174' 1e-9)' "pdf(2)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(2.0)' NumericIs.AlmostEqualTo(0.06804138174' 1e-9)' "pdf(2)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(3.0)' NumericIs.AlmostEqualTo(0.02741012223' 1e-9)' "pdf(3)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(3.0)' NumericIs.AlmostEqualTo(0.02741012223' 1e-9)' "pdf(3)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(3.0)' NumericIs.AlmostEqualTo(0.02741012223' 1e-9)' "pdf(3)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(4.0)' NumericIs.AlmostEqualTo(0.01309457002' 1e-9)' "pdf(4)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(4.0)' NumericIs.AlmostEqualTo(0.01309457002' 1e-9)' "pdf(4)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(4.0)' NumericIs.AlmostEqualTo(0.01309457002' 1e-9)' "pdf(4)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(-1.0)' NumericIs.AlmostEqualTo(0.1924500897' 1e-9)' "pdf(-1)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(-1.0)' NumericIs.AlmostEqualTo(0.1924500897' 1e-9)' "pdf(-1)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(-2.0)' NumericIs.AlmostEqualTo(0.06804138174' 1e-9)' "pdf(-2)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(-2.0)' NumericIs.AlmostEqualTo(0.06804138174' 1e-9)' "pdf(-2)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(-2.0)' NumericIs.AlmostEqualTo(0.06804138174' 1e-9)' "pdf(-2)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(-3.0)' NumericIs.AlmostEqualTo(0.02741012223' 1e-9)' "pdf(-3)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(-3.0)' NumericIs.AlmostEqualTo(0.02741012223' 1e-9)' "pdf(-3)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(-3.0)' NumericIs.AlmostEqualTo(0.02741012223' 1e-9)' "pdf(-3)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(-4.0)' NumericIs.AlmostEqualTo(0.01309457002' 1e-9)' "pdf(-4)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(-4.0)' NumericIs.AlmostEqualTo(0.01309457002' 1e-9)' "pdf(-4)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.ProbabilityDensity(-4.0)' NumericIs.AlmostEqualTo(0.01309457002' 1e-9)' "pdf(-4)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(0.0)' NumericIs.AlmostEqualTo(0.5000000000)' "cdf(0)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(1.0)' NumericIs.AlmostEqualTo(0.7886751346' 1e-9)' "cdf(1)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(1.0)' NumericIs.AlmostEqualTo(0.7886751346' 1e-9)' "cdf(1)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(2.0)' NumericIs.AlmostEqualTo(0.9082482905' 1e-9)' "cdf(2)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(2.0)' NumericIs.AlmostEqualTo(0.9082482905' 1e-9)' "cdf(2)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(2.0)' NumericIs.AlmostEqualTo(0.9082482905' 1e-9)' "cdf(2)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(3.0)' NumericIs.AlmostEqualTo(0.9522670169' 1e-9)' "cdf(3)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(3.0)' NumericIs.AlmostEqualTo(0.9522670169' 1e-9)' "cdf(3)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(3.0)' NumericIs.AlmostEqualTo(0.9522670169' 1e-9)' "cdf(3)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(4.0)' NumericIs.AlmostEqualTo(0.9714045208' 1e-9)' "cdf(4)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(4.0)' NumericIs.AlmostEqualTo(0.9714045208' 1e-9)' "cdf(4)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(4.0)' NumericIs.AlmostEqualTo(0.9714045208' 1e-9)' "cdf(4)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(-1.0)' NumericIs.AlmostEqualTo(0.2113248654' 1e-9)' "cdf(-1)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(-1.0)' NumericIs.AlmostEqualTo(0.2113248654' 1e-9)' "cdf(-1)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(-2.0)' NumericIs.AlmostEqualTo(0.09175170954' 1e-9)' "cdf(-2)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(-2.0)' NumericIs.AlmostEqualTo(0.09175170954' 1e-9)' "cdf(-2)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(-2.0)' NumericIs.AlmostEqualTo(0.09175170954' 1e-9)' "cdf(-2)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(-3.0)' NumericIs.AlmostEqualTo(0.04773298313' 1e-9)' "cdf(-3)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(-3.0)' NumericIs.AlmostEqualTo(0.04773298313' 1e-9)' "cdf(-3)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(-3.0)' NumericIs.AlmostEqualTo(0.04773298313' 1e-9)' "cdf(-3)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(-4.0)' NumericIs.AlmostEqualTo(0.02859547921' 1e-9)' "cdf(-4)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(-4.0)' NumericIs.AlmostEqualTo(0.02859547921' 1e-9)' "cdf(-4)");
Magic Number,Iridium.Test.DistributionTests,DistributionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\DistributionTests\DistributionTest.cs,TestContinuousDistributions_StudensT,The following statement contains a magic number: Assert.That(d.CumulativeDistribution(-4.0)' NumericIs.AlmostEqualTo(0.02859547921' 1e-9)' "cdf(-4)");
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestFrameworkValueTypeEquality,The following statement contains a magic number: const int two = 2;
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEqual,The following statement contains a magic number: Assert.That(Number.AlmostEqual(0.0' 0.0' 50)' "B");
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEqual,The following statement contains a magic number: Assert.That(!Number.AlmostEqual(max' max - (2 * Number.EpsilonOf(max))' 0)' "G");
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEqual,The following statement contains a magic number: Assert.That(!Number.AlmostEqual(max' max - (2 * Number.EpsilonOf(max))' 1)' "H");
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEqual,The following statement contains a magic number: Assert.That(Number.AlmostEqual(max' max - (2 * Number.EpsilonOf(max))' 2)' "I");
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEqual,The following statement contains a magic number: Assert.That(Number.AlmostEqual(max' max - (2 * Number.EpsilonOf(max))' 2)' "I");
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEqual,The following statement contains a magic number: Assert.That(Convert.ToDouble("3.170404"' format) == 3.170404' "J");
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEqual,The following statement contains a magic number: Assert.That(Convert.ToDouble("4.170404"' format) != 4.170404' "K");
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEqual,The following statement contains a magic number: Assert.That(Number.AlmostEqual(Convert.ToDouble("3.170404"' format)' 3.170404' 0)' "L");
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEqual,The following statement contains a magic number: Assert.That(!Number.AlmostEqual(Convert.ToDouble("4.170404"' format)' 4.170404' 0)' "M");
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEqual,The following statement contains a magic number: Assert.That(Number.AlmostEqual(Convert.ToDouble("4.170404"' format)' 4.170404' 1)' "N");
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEqual,The following statement contains a magic number: Assert.That(!Number.AlmostEqual(double.NaN' double.NaN' 25)' "O");
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEqual,The following statement contains a magic number: Assert.That(!Number.AlmostEqual(double.PositiveInfinity' double.NegativeInfinity' 25)' "P");
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEqual,The following statement contains a magic number: Assert.That(Number.AlmostEqual(double.PositiveInfinity' double.PositiveInfinity' 25)' "Q");
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,Helper_TestAlmostEqualityForGenericType,The following statement contains a magic number: Assert.That(Number.AlmostEqual(value' value' 1e-10)' Is.True);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,Helper_TestAlmostEqualityForGenericType,The following statement contains a magic number: Assert.That(Number.AlmostEqual(value' default(T)' 1e-10)' Is.False);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,Helper_TestAlmostEqualityForGenericType,The following statement contains a magic number: Assert.That(Number.AlmostEqual(value' valueClone' 1e-10)' Is.True);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,Helper_TestAlmostEqualityForGenericType,The following statement contains a magic number: Assert.That(Number.AlmostEqual(value' completelyDifferentValue' 1e-10)' Is.False);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,Helper_TestAlmostEqualityForGenericType,The following statement contains a magic number: Assert.That(Number.AlmostEqual(value' notablyDifferentValue' 1e-10)' Is.False);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,Helper_TestAlmostEqualityForGenericType,The following statement contains a magic number: Assert.That(Number.AlmostEqual(value' notablyDifferentValue' 1e-2)' Is.True);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,Helper_TestAlmostEqualityForGenericType,The following statement contains a magic number: Assert.That(Number.AlmostEqual(value' almostEqualValue' 1e-10)' Is.True);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,Helper_TestAlmostEqualityForGenericType,The following statement contains a magic number: Assert.That(Number.AlmostEqual(value' almostEqualValue' 1e-2)' Is.True);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_Complex,The following statement contains a magic number: Complex a1 = new Complex(1.0' 2.0);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_Complex,The following statement contains a magic number: Complex a2 = new Complex(1.0' 2.0);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_Complex,The following statement contains a magic number: Complex b = new Complex(2.0' 1.0);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_Complex,The following statement contains a magic number: Complex c = new Complex(1.0 + 1e+10 * Number.PositiveEpsilonOf(1.0)' 2.0);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_Complex,The following statement contains a magic number: Complex c = new Complex(1.0 + 1e+10 * Number.PositiveEpsilonOf(1.0)' 2.0);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_Complex,The following statement contains a magic number: Complex d = new Complex(1.0 + 2 * Number.PositiveEpsilonOf(1.0)' 2.0);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_Complex,The following statement contains a magic number: Complex d = new Complex(1.0 + 2 * Number.PositiveEpsilonOf(1.0)' 2.0);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_Complex,The following statement contains a magic number: Assert.That(Complex.AlmostEqual(a1' c' 1e-10)' Is.False);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_Complex,The following statement contains a magic number: Assert.That(Complex.AlmostEqual(a1' c' 1e-2)' Is.True);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_Complex,The following statement contains a magic number: Assert.That(Number.AlmostEqual(a1' Complex.Infinity' 1e-10)' Is.False);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_Complex,The following statement contains a magic number: Assert.That(Number.AlmostEqual(a1' Complex.NaN' 1e-10)' Is.False);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_Matrix,The following statement contains a magic number: Matrix a1 = Matrix.Random(3' 2' new ContinuousUniformDistribution());
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_Matrix,The following statement contains a magic number: Matrix a1 = Matrix.Random(3' 2' new ContinuousUniformDistribution());
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_Matrix,The following statement contains a magic number: Matrix c = a1 * (1.0 + (1e+10 * Number.PositiveEpsilonOf(1.0)));
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_Matrix,The following statement contains a magic number: Matrix d = a1 * (1.0 + (2 * Number.PositiveEpsilonOf(1.0)));
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_Matrix,The following statement contains a magic number: Assert.That(Matrix.AlmostEqual(a1' c' 1e-10)' Is.False);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_Matrix,The following statement contains a magic number: Assert.That(Matrix.AlmostEqual(a1' c' 1e-2)' Is.True);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_Matrix,The following statement contains a magic number: Assert.That(Number.AlmostEqual(a1' Matrix.Transpose(a1)' 1e-10)' Is.False);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_ComplexMatrix,The following statement contains a magic number: ComplexMatrix a1 = ComplexMatrix.Random(3' 2' new ContinuousUniformDistribution());
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_ComplexMatrix,The following statement contains a magic number: ComplexMatrix a1 = ComplexMatrix.Random(3' 2' new ContinuousUniformDistribution());
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_ComplexMatrix,The following statement contains a magic number: ComplexMatrix c = a1 * (1.0 + (1e+10 * Number.PositiveEpsilonOf(1.0)));
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_ComplexMatrix,The following statement contains a magic number: ComplexMatrix d = a1 * (1.0 + (2 * Number.PositiveEpsilonOf(1.0)));
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_ComplexMatrix,The following statement contains a magic number: Assert.That(ComplexMatrix.AlmostEqual(a1' c' 1e-10)' Is.False);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_ComplexMatrix,The following statement contains a magic number: Assert.That(ComplexMatrix.AlmostEqual(a1' c' 1e-2)' Is.True);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_ComplexMatrix,The following statement contains a magic number: Assert.That(Number.AlmostEqual(a1' a1.Transpose()' 1e-10)' Is.False);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_ComplexMatrix,The following statement contains a magic number: Assert.That(Number.AlmostEqual(a1' a1.HermitianTranspose()' 1e-10)' Is.False);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_Vector,The following statement contains a magic number: Vector a1 = Vector.Random(3' new ContinuousUniformDistribution());
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_Vector,The following statement contains a magic number: Vector c = a1 * (1.0 + (1e+10 * Number.PositiveEpsilonOf(1.0)));
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_Vector,The following statement contains a magic number: Vector d = a1 * (1.0 + (2 * Number.PositiveEpsilonOf(1.0)));
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_Vector,The following statement contains a magic number: Assert.That(Vector.AlmostEqual(a1' c' 1e-10)' Is.False);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_Vector,The following statement contains a magic number: Assert.That(Vector.AlmostEqual(a1' c' 1e-2)' Is.True);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_ComplexVector,The following statement contains a magic number: ComplexVector a1 = ComplexVector.Random(3' new ContinuousUniformDistribution());
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_ComplexVector,The following statement contains a magic number: ComplexVector c = a1 * (1.0 + (1e+10 * Number.PositiveEpsilonOf(1.0)));
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_ComplexVector,The following statement contains a magic number: ComplexVector d = a1 * (1.0 + (2 * Number.PositiveEpsilonOf(1.0)));
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_ComplexVector,The following statement contains a magic number: Assert.That(ComplexVector.AlmostEqual(a1' c' 1e-10)' Is.False);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_ComplexVector,The following statement contains a magic number: Assert.That(ComplexVector.AlmostEqual(a1' c' 1e-2)' Is.True);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_Polynomial,The following statement contains a magic number: Polynomial a1 = new Polynomial(Vector.Random(5' new ContinuousUniformDistribution()));
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_Polynomial,The following statement contains a magic number: Polynomial c = a1 * (1.0 + (1e+10 * Number.PositiveEpsilonOf(1.0)));
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_Polynomial,The following statement contains a magic number: Polynomial d = a1 * (1.0 + (2 * Number.PositiveEpsilonOf(1.0)));
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_Polynomial,The following statement contains a magic number: Assert.That(Polynomial.AlmostEqual(a1' c' 1e-10)' Is.False);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_Polynomial,The following statement contains a magic number: Assert.That(Polynomial.AlmostEqual(a1' c' 1e-2)' Is.True);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_ComplexPolynomial,The following statement contains a magic number: ComplexPolynomial a1 = new ComplexPolynomial(ComplexVector.Random(5' new ContinuousUniformDistribution()));
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_ComplexPolynomial,The following statement contains a magic number: ComplexPolynomial c = a1 * (1.0 + (1e+10 * Number.PositiveEpsilonOf(1.0)));
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_ComplexPolynomial,The following statement contains a magic number: ComplexPolynomial d = a1 * (1.0 + (2 * Number.PositiveEpsilonOf(1.0)));
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_ComplexPolynomial,The following statement contains a magic number: Assert.That(ComplexPolynomial.AlmostEqual(a1' c' 1e-10)' Is.False);
Magic Number,Iridium.Test.InfrastructureTests,AlmostEqualityTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\AlmostEqualityTest.cs,TestAlmostEquals_ComplexPolynomial,The following statement contains a magic number: Assert.That(ComplexPolynomial.AlmostEqual(a1' c' 1e-2)' Is.True);
Magic Number,Iridium.Test.InfrastructureTests,ComplexTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\ComplexTest.cs,TestParser_Invariant,The following statement contains a magic number: Assert.That(c1.Real' Is.EqualTo(1231.2d)' "A1");
Magic Number,Iridium.Test.InfrastructureTests,ComplexTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\ComplexTest.cs,TestParser_Invariant,The following statement contains a magic number: Assert.That(c2.Real' Is.EqualTo(1.5d)' "B1");
Magic Number,Iridium.Test.InfrastructureTests,ComplexTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\ComplexTest.cs,TestParser_Invariant,The following statement contains a magic number: Assert.That(c2.Imag' Is.EqualTo(-34.56)' "B2");
Magic Number,Iridium.Test.InfrastructureTests,ComplexTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\ComplexTest.cs,TestParser_Invariant,The following statement contains a magic number: Assert.That(c3.Real' Is.EqualTo(-1.5d)' "C1");
Magic Number,Iridium.Test.InfrastructureTests,ComplexTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\ComplexTest.cs,TestParser_Invariant,The following statement contains a magic number: Assert.That(c3.Imag' Is.EqualTo(-34.56)' "C2");
Magic Number,Iridium.Test.InfrastructureTests,ComplexTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\ComplexTest.cs,TestParser_Invariant,The following statement contains a magic number: Assert.That(c4.Imag' Is.EqualTo(-34.56)' "D2");
Magic Number,Iridium.Test.InfrastructureTests,ComplexTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\ComplexTest.cs,TestParser_DE_CH,The following statement contains a magic number: Assert.That(c1.Real' Is.EqualTo(1231.2d)' "A1");
Magic Number,Iridium.Test.InfrastructureTests,ComplexTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\ComplexTest.cs,TestParser_DE_DE,The following statement contains a magic number: Assert.That(c1.Real' Is.EqualTo(1231.2d)' "A1");
Magic Number,Iridium.Test.InfrastructureTests,ComplexTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\ComplexTest.cs,TestParser_TH_TH,The following statement contains a magic number: string number = 1231.2.ToString(format);
Magic Number,Iridium.Test.InfrastructureTests,ComplexTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\ComplexTest.cs,TestParser_TH_TH,The following statement contains a magic number: Assert.That(c1.Real' Is.EqualTo(1231.2d)' "A1");
Magic Number,Iridium.Test.InfrastructureTests,ComplexTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\ComplexTest.cs,TestNaturalLogarithm,The following statement contains a magic number: Assert.That(lnOnePlusI.Real' Is.EqualTo(Constants.Ln2 * 0.5)' "Re{ln(i+1)} = ln(2)/2");
Magic Number,Iridium.Test.InfrastructureTests,ComplexTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\ComplexTest.cs,TestPower,The following statement contains a magic number: Assert.That(Math.Pow(0d' 2d)' Is.EqualTo(0d)' "(0)^(2) = 0 (.Net Framework Sanity Check)");
Magic Number,Iridium.Test.InfrastructureTests,ComplexTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\ComplexTest.cs,TestPower,The following statement contains a magic number: Complex two = new Complex(2d' 0d);
Magic Number,Iridium.Test.InfrastructureTests,ComplexTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\ComplexTest.cs,TestPower,The following statement contains a magic number: Assert.That(Math.Pow(0d' -2d)' Is.EqualTo(double.PositiveInfinity)' "(0)^(-2) = infty (.Net Framework Sanity Check)");
Magic Number,Iridium.Test.InfrastructureTests,ComplexTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\ComplexTest.cs,TestPower,The following statement contains a magic number: Complex mTwo = Complex.FromRealImaginary(-2d' 0d);
Magic Number,Iridium.Test.InfrastructureTests,ComplexTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\ComplexTest.cs,TestDivision,The following statement contains a magic number: Complex onePlus2I = new Complex(1' 2);
Magic Number,Iridium.Test.InfrastructureTests,ComplexTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\ComplexTest.cs,TestDivision,The following statement contains a magic number: Complex threePlus4I = new Complex(3' 4);
Magic Number,Iridium.Test.InfrastructureTests,ComplexTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\ComplexTest.cs,TestDivision,The following statement contains a magic number: Complex threePlus4I = new Complex(3' 4);
Magic Number,Iridium.Test.InfrastructureTests,ComplexTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\ComplexTest.cs,TestDivision,The following statement contains a magic number: Assert.That(onPlus2IDivthreePlus4I.Real' Is.EqualTo(11d / 25d)' "Re{(1+2I)/(3+4I)} = 11/25");
Magic Number,Iridium.Test.InfrastructureTests,ComplexTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\ComplexTest.cs,TestDivision,The following statement contains a magic number: Assert.That(onPlus2IDivthreePlus4I.Real' Is.EqualTo(11d / 25d)' "Re{(1+2I)/(3+4I)} = 11/25");
Magic Number,Iridium.Test.InfrastructureTests,ComplexTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\ComplexTest.cs,TestDivision,The following statement contains a magic number: Assert.That(onPlus2IDivthreePlus4I.Imag' Is.EqualTo(2d / 25d)' "Im{(1+2I)/(3+4I)} = 2/25");
Magic Number,Iridium.Test.InfrastructureTests,ComplexTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\ComplexTest.cs,TestDivision,The following statement contains a magic number: Assert.That(onPlus2IDivthreePlus4I.Imag' Is.EqualTo(2d / 25d)' "Im{(1+2I)/(3+4I)} = 2/25");
Magic Number,Iridium.Test.InfrastructureTests,ComplexTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\ComplexTest.cs,TestDivision,The following statement contains a magic number: const double big1 = double.MaxValue / 4;
Magic Number,Iridium.Test.InfrastructureTests,ComplexTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\ComplexTest.cs,TestDivision,The following statement contains a magic number: const double big2 = double.MaxValue / 2;
Magic Number,Iridium.Test.InfrastructureTests,ComplexTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\ComplexTest.cs,TestDivision,The following statement contains a magic number: Assert.That(big1PlusBig1IDivBig2PlusBig2I.Real' Is.EqualTo(0.5)' "Re{(big+big*I)/(2*big+2*big*I)} = 0.5");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestIncrementDecrementAtZero,The following statement contains a magic number: double x = 2 * double.Epsilon;
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestIncrementDecrementAtZero,The following statement contains a magic number: Assert.That(x' Is.EqualTo(2 * double.Epsilon)' "A");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestIncrementDecrementAtZero,The following statement contains a magic number: Assert.That(x' Is.EqualTo(-2 * double.Epsilon)' "C");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestIncrementDecrementAtZero,The following statement contains a magic number: Assert.That(x' Is.EqualTo(2 * double.Epsilon)' "E");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestIncrementDecrementStep,The following statement contains a magic number: const double x0 = 1e-100;
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestIncrementDecrementStep,The following statement contains a magic number: const double x2 = 1e+100;
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestIncrementDecrementStep,The following statement contains a magic number: const double x3 = 1e+200;
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestIncrementDecrementStep,The following statement contains a magic number: const double x4 = -1e+100;
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestEpsilonOf,The following statement contains a magic number: Assert.That(Number.EpsilonOf(1.0e+100).ToString(format)' Is.EqualTo("1.94266889222573E+84")' "D");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestEpsilonOf,The following statement contains a magic number: Assert.That(Number.EpsilonOf(-1.0e+100).ToString(format)' Is.EqualTo("1.94266889222573E+84")' "E");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestEpsilonOf,The following statement contains a magic number: Assert.That(Number.EpsilonOf(1.0e-100).ToString(format)' Is.EqualTo("1.26897091865782E-116")' "F");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestEpsilonOf,The following statement contains a magic number: Assert.That(Number.EpsilonOf(-1.0e-100).ToString(format)' Is.EqualTo("1.26897091865782E-116")' "G");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestLexicographicalOrder,The following statement contains a magic number: Assert.That(Number.ToLexicographicalOrderedUInt64(2 * double.Epsilon)' Is.EqualTo(2)' "A");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestLexicographicalOrder,The following statement contains a magic number: Assert.That(Number.ToLexicographicalOrderedUInt64(2 * double.Epsilon)' Is.EqualTo(2)' "A");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestLexicographicalOrder,The following statement contains a magic number: Assert.That(Number.ToLexicographicalOrderedUInt64(-2 * double.Epsilon)' Is.EqualTo(0xFFFFFFFFFFFFFFFE)' "E");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestLexicographicalOrder,The following statement contains a magic number: Assert.That(Number.ToLexicographicalOrderedInt64(2 * double.Epsilon)' Is.EqualTo(2)' "N");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestLexicographicalOrder,The following statement contains a magic number: Assert.That(Number.ToLexicographicalOrderedInt64(2 * double.Epsilon)' Is.EqualTo(2)' "N");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestLexicographicalOrder,The following statement contains a magic number: Assert.That(Number.ToLexicographicalOrderedInt64(-2 * double.Epsilon)' Is.EqualTo(-2)' "R");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestLexicographicalOrder,The following statement contains a magic number: Assert.That(Number.ToLexicographicalOrderedInt64(-2 * double.Epsilon)' Is.EqualTo(-2)' "R");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestSignedMagnitudeToTwosComplement,The following statement contains a magic number: Assert.That(Number.SignedMagnitudeToTwosComplementUInt64(2)' Is.EqualTo(2)' "A");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestSignedMagnitudeToTwosComplement,The following statement contains a magic number: Assert.That(Number.SignedMagnitudeToTwosComplementUInt64(2)' Is.EqualTo(2)' "A");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestSignedMagnitudeToTwosComplement,The following statement contains a magic number: Assert.That(Number.SignedMagnitudeToTwosComplementUInt64(-9223372036854775808)' Is.EqualTo(0)' "D");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestSignedMagnitudeToTwosComplement,The following statement contains a magic number: Assert.That(Number.SignedMagnitudeToTwosComplementUInt64(-9223372036854775808 + 1)' Is.EqualTo(0xFFFFFFFFFFFFFFFF)' "E");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestSignedMagnitudeToTwosComplement,The following statement contains a magic number: Assert.That(Number.SignedMagnitudeToTwosComplementUInt64(-9223372036854775808 + 2)' Is.EqualTo(0xFFFFFFFFFFFFFFFE)' "F");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestSignedMagnitudeToTwosComplement,The following statement contains a magic number: Assert.That(Number.SignedMagnitudeToTwosComplementUInt64(-9223372036854775808 + 2)' Is.EqualTo(0xFFFFFFFFFFFFFFFE)' "F");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestSignedMagnitudeToTwosComplement,The following statement contains a magic number: Assert.That(Number.SignedMagnitudeToTwosComplementInt64(2)' Is.EqualTo(2)' "M");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestSignedMagnitudeToTwosComplement,The following statement contains a magic number: Assert.That(Number.SignedMagnitudeToTwosComplementInt64(2)' Is.EqualTo(2)' "M");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestSignedMagnitudeToTwosComplement,The following statement contains a magic number: Assert.That(Number.SignedMagnitudeToTwosComplementInt64(-9223372036854775808)' Is.EqualTo(0)' "Q");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestSignedMagnitudeToTwosComplement,The following statement contains a magic number: Assert.That(Number.SignedMagnitudeToTwosComplementInt64(-9223372036854775808 + 1)' Is.EqualTo(-1)' "R");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestSignedMagnitudeToTwosComplement,The following statement contains a magic number: Assert.That(Number.SignedMagnitudeToTwosComplementInt64(-9223372036854775808 + 2)' Is.EqualTo(-2)' "S");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestSignedMagnitudeToTwosComplement,The following statement contains a magic number: Assert.That(Number.SignedMagnitudeToTwosComplementInt64(-9223372036854775808 + 2)' Is.EqualTo(-2)' "S");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestSignedMagnitudeToTwosComplement,The following statement contains a magic number: Assert.That(Number.SignedMagnitudeToTwosComplementInt64(-9223372036854775808 + 2)' Is.EqualTo(-2)' "S");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestNumbersBetween,The following statement contains a magic number: Assert.That(Number.NumbersBetween(0' 2*double.Epsilon)' Is.EqualTo(2)' "F");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestNumbersBetween,The following statement contains a magic number: Assert.That(Number.NumbersBetween(0' 2*double.Epsilon)' Is.EqualTo(2)' "F");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestNumbersBetween,The following statement contains a magic number: Assert.That(Number.NumbersBetween(0' -2 * double.Epsilon)' Is.EqualTo(2)' "G");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestNumbersBetween,The following statement contains a magic number: Assert.That(Number.NumbersBetween(0' -2 * double.Epsilon)' Is.EqualTo(2)' "G");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestNumbersBetween,The following statement contains a magic number: Assert.That(Number.NumbersBetween(-double.Epsilon' 2 * double.Epsilon)' Is.EqualTo(3)' "H");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestNumbersBetween,The following statement contains a magic number: Assert.That(Number.NumbersBetween(-double.Epsilon' 2 * double.Epsilon)' Is.EqualTo(3)' "H");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestNumbersBetween,The following statement contains a magic number: Assert.That(Number.NumbersBetween(double.Epsilon' -2 * double.Epsilon)' Is.EqualTo(3)' "I");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestNumbersBetween,The following statement contains a magic number: Assert.That(Number.NumbersBetween(double.Epsilon' -2 * double.Epsilon)' Is.EqualTo(3)' "I");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestNumbersBetween,The following statement contains a magic number: double test = Math.PI * 1e+150;
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestNumbersBetween,The following statement contains a magic number: Assert.That(Number.NumbersBetween(test' test + (10 * Number.EpsilonOf(test)))' Is.EqualTo(10)' "J");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestNumbersBetween,The following statement contains a magic number: Assert.That(Number.NumbersBetween(test' test + (10 * Number.EpsilonOf(test)))' Is.EqualTo(10)' "J");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestNumbersBetween,The following statement contains a magic number: Assert.That(Number.NumbersBetween(test' test - (10 * Number.EpsilonOf(test)))' Is.EqualTo(10)' "K");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestNumbersBetween,The following statement contains a magic number: Assert.That(Number.NumbersBetween(test' test - (10 * Number.EpsilonOf(test)))' Is.EqualTo(10)' "K");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestNumbersBetween,The following statement contains a magic number: Assert.That(Number.NumbersBetween(1.0001' 1.0002)' Is.EqualTo(450359962737)' "L");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestNumbersBetween,The following statement contains a magic number: Assert.That(Number.NumbersBetween(1.0001' 1.0002)' Is.EqualTo(450359962737)' "L");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestNumbersBetween,The following statement contains a magic number: Assert.That(Number.NumbersBetween(1.0001' 1.0002)' Is.EqualTo(450359962737)' "L");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestNumbersBetween,The following statement contains a magic number: Assert.That(Number.NumbersBetween(10000.0001' 10000.0002)' Is.EqualTo(54975582)' "M");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestNumbersBetween,The following statement contains a magic number: Assert.That(Number.NumbersBetween(10000.0001' 10000.0002)' Is.EqualTo(54975582)' "M");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestNumbersBetween,The following statement contains a magic number: Assert.That(Number.NumbersBetween(10000.0001' 10000.0002)' Is.EqualTo(54975582)' "M");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestNumbersBetween,The following statement contains a magic number: Assert.That(Number.NumbersBetween(10000000.0001' 10000000.0002)' Is.EqualTo(53687)' "N");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestNumbersBetween,The following statement contains a magic number: Assert.That(Number.NumbersBetween(10000000.0001' 10000000.0002)' Is.EqualTo(53687)' "N");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestNumbersBetween,The following statement contains a magic number: Assert.That(Number.NumbersBetween(10000000.0001' 10000000.0002)' Is.EqualTo(53687)' "N");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestNumbersBetween,The following statement contains a magic number: Assert.That(Number.NumbersBetween(10000000000.0001' 10000000000.0002)' Is.EqualTo(53)' "O");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestNumbersBetween,The following statement contains a magic number: Assert.That(Number.NumbersBetween(10000000000.0001' 10000000000.0002)' Is.EqualTo(53)' "O");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestNumbersBetween,The following statement contains a magic number: Assert.That(Number.NumbersBetween(10000000000.0001' 10000000000.0002)' Is.EqualTo(53)' "O");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(0.5d)' Is.EqualTo(0.5)' "B3");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(0.5d)' Is.EqualTo(0.5)' "B3");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(-0.5d)' Is.EqualTo(-0.5)' "B4");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(-0.5d)' Is.EqualTo(-0.5)' "B4");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(double.Epsilon * 1e3)' Is.EqualTo(0.0)' "D2");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(double.Epsilon * 1e6)' Is.EqualTo(0.0)' "D3");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(double.Epsilon * 1e200)' Is.EqualTo(0.0)' "D4");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(double.Epsilon * -1e200)' Is.EqualTo(0.0)' "D6");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(Number.PositiveEpsilonOf(1e-5))' Is.EqualTo(0.0)' "E1");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(Number.PositiveEpsilonOf(1e+1))' Is.Not.EqualTo(0.0)' "E3");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(Number.PositiveEpsilonOf(1e+5))' Is.Not.EqualTo(0.0)' "E4");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(Number.PositiveEpsilonOf(-1e+1))' Is.Not.EqualTo(0.0)' "E6");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(1e-15)' Is.EqualTo(0.0)' "F1");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(1e-14)' Is.Not.EqualTo(0.0)' "F2");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(-1e-15)' Is.EqualTo(0.0)' "F3");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(-1e-14)' Is.Not.EqualTo(0.0)' "F4");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(1e-6' 1e-5)' Is.EqualTo(0.0)' "G1");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(1e-6' 1e-5)' Is.EqualTo(0.0)' "G1");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(1e-4' 1e-5)' Is.Not.EqualTo(0.0)' "G2");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(1e-4' 1e-5)' Is.Not.EqualTo(0.0)' "G2");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(1e-5' 1e-5)' Is.Not.EqualTo(0.0)' "G3");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(1e-5' 1e-5)' Is.Not.EqualTo(0.0)' "G3");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(-1e-6' 1e-5)' Is.EqualTo(0.0)' "G4");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(-1e-6' 1e-5)' Is.EqualTo(0.0)' "G4");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(-1e-4' 1e-5)' Is.Not.EqualTo(0.0)' "G5");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(-1e-4' 1e-5)' Is.Not.EqualTo(0.0)' "G5");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(-1e-5' 1e-5)' Is.Not.EqualTo(0.0)' "G6");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(-1e-5' 1e-5)' Is.Not.EqualTo(0.0)' "G6");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(1e+6' 1e+5)' Is.Not.EqualTo(0.0)' "H1");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(1e+6' 1e+5)' Is.Not.EqualTo(0.0)' "H1");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(1e+4' 1e+5)' Is.EqualTo(0.0)' "H2");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(1e+4' 1e+5)' Is.EqualTo(0.0)' "H2");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(1e+5' 1e+5)' Is.Not.EqualTo(0.0)' "H3");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(1e+5' 1e+5)' Is.Not.EqualTo(0.0)' "H3");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(-1e+6' 1e+5)' Is.Not.EqualTo(0.0)' "H4");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(-1e+6' 1e+5)' Is.Not.EqualTo(0.0)' "H4");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(-1e+4' 1e+5)' Is.EqualTo(0.0)' "H5");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(-1e+4' 1e+5)' Is.EqualTo(0.0)' "H5");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(-1e+5' 1e+5)' Is.Not.EqualTo(0.0)' "H6");
Magic Number,Iridium.Test.InfrastructureTests,NumberTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\NumberTest.cs,TestCoerceZero,The following statement contains a magic number: Assert.That(Number.CoerceZero(-1e+5' 1e+5)' Is.Not.EqualTo(0.0)' "H6");
Magic Number,Iridium.Test.InfrastructureTests,SearchingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SearchingTest.cs,TestBinarySearchOnArray,The following statement contains a magic number: int[] data = { -2' 3' 5' 20' 21' 1000' 2500 };
Magic Number,Iridium.Test.InfrastructureTests,SearchingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SearchingTest.cs,TestBinarySearchOnArray,The following statement contains a magic number: int[] data = { -2' 3' 5' 20' 21' 1000' 2500 };
Magic Number,Iridium.Test.InfrastructureTests,SearchingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SearchingTest.cs,TestBinarySearchOnArray,The following statement contains a magic number: int[] data = { -2' 3' 5' 20' 21' 1000' 2500 };
Magic Number,Iridium.Test.InfrastructureTests,SearchingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SearchingTest.cs,TestBinarySearchOnArray,The following statement contains a magic number: int[] data = { -2' 3' 5' 20' 21' 1000' 2500 };
Magic Number,Iridium.Test.InfrastructureTests,SearchingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SearchingTest.cs,TestBinarySearchOnArray,The following statement contains a magic number: int[] data = { -2' 3' 5' 20' 21' 1000' 2500 };
Magic Number,Iridium.Test.InfrastructureTests,SearchingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SearchingTest.cs,TestBinarySearchOnArray,The following statement contains a magic number: int[] data = { -2' 3' 5' 20' 21' 1000' 2500 };
Magic Number,Iridium.Test.InfrastructureTests,SearchingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SearchingTest.cs,TestBinarySearchOnArray,The following statement contains a magic number: int[] data = { -2' 3' 5' 20' 21' 1000' 2500 };
Magic Number,Iridium.Test.InfrastructureTests,SearchingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SearchingTest.cs,TestBinarySearchOnArray,The following statement contains a magic number: Assert.That(Searching.BinarySearch(data' -100)' Is.LessThan(0));
Magic Number,Iridium.Test.InfrastructureTests,SearchingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SearchingTest.cs,TestBinarySearchOnArray,The following statement contains a magic number: Assert.That(Searching.BinarySearch(data' 100000)' Is.LessThan(0));
Magic Number,Iridium.Test.InfrastructureTests,SearchingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SearchingTest.cs,TestBinarySearchOnGenericList,The following statement contains a magic number: List<int> data = new List<int>(new int[] { -2' 3' 5' 20' 21' 1000' 2500 });
Magic Number,Iridium.Test.InfrastructureTests,SearchingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SearchingTest.cs,TestBinarySearchOnGenericList,The following statement contains a magic number: List<int> data = new List<int>(new int[] { -2' 3' 5' 20' 21' 1000' 2500 });
Magic Number,Iridium.Test.InfrastructureTests,SearchingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SearchingTest.cs,TestBinarySearchOnGenericList,The following statement contains a magic number: List<int> data = new List<int>(new int[] { -2' 3' 5' 20' 21' 1000' 2500 });
Magic Number,Iridium.Test.InfrastructureTests,SearchingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SearchingTest.cs,TestBinarySearchOnGenericList,The following statement contains a magic number: List<int> data = new List<int>(new int[] { -2' 3' 5' 20' 21' 1000' 2500 });
Magic Number,Iridium.Test.InfrastructureTests,SearchingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SearchingTest.cs,TestBinarySearchOnGenericList,The following statement contains a magic number: List<int> data = new List<int>(new int[] { -2' 3' 5' 20' 21' 1000' 2500 });
Magic Number,Iridium.Test.InfrastructureTests,SearchingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SearchingTest.cs,TestBinarySearchOnGenericList,The following statement contains a magic number: List<int> data = new List<int>(new int[] { -2' 3' 5' 20' 21' 1000' 2500 });
Magic Number,Iridium.Test.InfrastructureTests,SearchingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SearchingTest.cs,TestBinarySearchOnGenericList,The following statement contains a magic number: List<int> data = new List<int>(new int[] { -2' 3' 5' 20' 21' 1000' 2500 });
Magic Number,Iridium.Test.InfrastructureTests,SearchingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SearchingTest.cs,TestBinarySearchOnGenericList,The following statement contains a magic number: Assert.That(Searching.BinarySearch(data' -100)' Is.LessThan(0));
Magic Number,Iridium.Test.InfrastructureTests,SearchingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SearchingTest.cs,TestBinarySearchOnGenericList,The following statement contains a magic number: Assert.That(Searching.BinarySearch(data' 100000)' Is.LessThan(0));
Magic Number,Iridium.Test.InfrastructureTests,SearchingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SearchingTest.cs,TestBinaryMapSearchOnArray,The following statement contains a magic number: int[] intData = { -2' 3' 5' 20' 21' 1000' 2500 };
Magic Number,Iridium.Test.InfrastructureTests,SearchingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SearchingTest.cs,TestBinaryMapSearchOnArray,The following statement contains a magic number: int[] intData = { -2' 3' 5' 20' 21' 1000' 2500 };
Magic Number,Iridium.Test.InfrastructureTests,SearchingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SearchingTest.cs,TestBinaryMapSearchOnArray,The following statement contains a magic number: int[] intData = { -2' 3' 5' 20' 21' 1000' 2500 };
Magic Number,Iridium.Test.InfrastructureTests,SearchingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SearchingTest.cs,TestBinaryMapSearchOnArray,The following statement contains a magic number: int[] intData = { -2' 3' 5' 20' 21' 1000' 2500 };
Magic Number,Iridium.Test.InfrastructureTests,SearchingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SearchingTest.cs,TestBinaryMapSearchOnArray,The following statement contains a magic number: int[] intData = { -2' 3' 5' 20' 21' 1000' 2500 };
Magic Number,Iridium.Test.InfrastructureTests,SearchingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SearchingTest.cs,TestBinaryMapSearchOnArray,The following statement contains a magic number: int[] intData = { -2' 3' 5' 20' 21' 1000' 2500 };
Magic Number,Iridium.Test.InfrastructureTests,SearchingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SearchingTest.cs,TestBinaryMapSearchOnArray,The following statement contains a magic number: int[] intData = { -2' 3' 5' 20' 21' 1000' 2500 };
Magic Number,Iridium.Test.InfrastructureTests,SearchingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SearchingTest.cs,TestBinaryMapSearchOnArray,The following statement contains a magic number: Assert.That(Searching.BinaryMapSearch(data' -100)' Is.LessThan(0));
Magic Number,Iridium.Test.InfrastructureTests,SearchingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SearchingTest.cs,TestBinaryMapSearchOnArray,The following statement contains a magic number: Assert.That(Searching.BinaryMapSearch(data' 100000)' Is.LessThan(0));
Magic Number,Iridium.Test.InfrastructureTests,SerializationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SerializationTest.cs,Setup,The following statement contains a magic number: _random = new StableDistribution(0.0' 1.0' 0.5' 0.75);
Magic Number,Iridium.Test.InfrastructureTests,SerializationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SerializationTest.cs,Setup,The following statement contains a magic number: _random = new StableDistribution(0.0' 1.0' 0.5' 0.75);
Magic Number,Iridium.Test.InfrastructureTests,SerializationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SerializationTest.cs,TestSerializeVector,The following statement contains a magic number: Vector before = Vector.Random(10' _random);
Magic Number,Iridium.Test.InfrastructureTests,SerializationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SerializationTest.cs,TestSerializeComplexVector,The following statement contains a magic number: ComplexVector before = ComplexVector.Random(10' _random);
Magic Number,Iridium.Test.InfrastructureTests,SerializationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SerializationTest.cs,TestSerializeMatrix,The following statement contains a magic number: Matrix before = Matrix.Random(3' 5' _random);
Magic Number,Iridium.Test.InfrastructureTests,SerializationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SerializationTest.cs,TestSerializeMatrix,The following statement contains a magic number: Matrix before = Matrix.Random(3' 5' _random);
Magic Number,Iridium.Test.InfrastructureTests,SerializationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SerializationTest.cs,TestSerializeComplexMatrix,The following statement contains a magic number: ComplexMatrix before = ComplexMatrix.Random(3' 5' _random);
Magic Number,Iridium.Test.InfrastructureTests,SerializationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SerializationTest.cs,TestSerializeComplexMatrix,The following statement contains a magic number: ComplexMatrix before = ComplexMatrix.Random(3' 5' _random);
Magic Number,Iridium.Test.InfrastructureTests,SerializationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SerializationTest.cs,TestSerializePolynomial,The following statement contains a magic number: Polynomial before = new Polynomial(Vector.Random(10' _random));
Magic Number,Iridium.Test.InfrastructureTests,SerializationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SerializationTest.cs,TestSerializeComplexPolynomial,The following statement contains a magic number: ComplexPolynomial before = new ComplexPolynomial(ComplexVector.Random(10' _random));
Magic Number,Iridium.Test.InfrastructureTests,SetTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SetTest.cs,SetIntersectionTest,The following statement contains a magic number: i < 16
Magic Number,Iridium.Test.InfrastructureTests,SetTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SetTest.cs,SetIntersectionTest,The following statement contains a magic number: i < 16
Magic Number,Iridium.Test.InfrastructureTests,SetTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SetTest.cs,SetIntersectionTest,The following statement contains a magic number: Assert.That(inter.Count' Is.EqualTo(3)' "A01");
Magic Number,Iridium.Test.InfrastructureTests,SetTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SetTest.cs,SetIntersectionTest,The following statement contains a magic number: Assert.That(inter[1]' Is.EqualTo(6)' "A03");
Magic Number,Iridium.Test.InfrastructureTests,SetTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SetTest.cs,SetIntersectionTest,The following statement contains a magic number: Assert.That(inter[2]' Is.EqualTo(12)' "A04");
Magic Number,Iridium.Test.InfrastructureTests,SetTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SetTest.cs,SetIntersectionTest,The following statement contains a magic number: Assert.That(inter[2]' Is.EqualTo(12)' "A04");
Magic Number,Iridium.Test.InfrastructureTests,SetTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SetTest.cs,PortedSetIntersectionTest,The following statement contains a magic number: int[] array1 = new int[100];
Magic Number,Iridium.Test.InfrastructureTests,SetTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SetTest.cs,PortedSetIntersectionTest,The following statement contains a magic number: int[] array2 = new int[100];
Magic Number,Iridium.Test.InfrastructureTests,SetTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SetTest.cs,PortedSetIntersectionTest,The following statement contains a magic number: array2[i] = i / 2;
Magic Number,Iridium.Test.InfrastructureTests,SetTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SetTest.cs,PortedSetIntersectionTest,The following statement contains a magic number: Assert.That(intersection.Count' Is.EqualTo(50));
Magic Number,Iridium.Test.InfrastructureTests,SetTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SetTest.cs,PortedSetIntersectionTest,The following statement contains a magic number: Assert.That(k' Is.LessThanOrEqualTo(50));
Magic Number,Iridium.Test.InfrastructureTests,SetTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SetTest.cs,PortedSetConcatCountTest,The following statement contains a magic number: int[] array1 = new int[7];
Magic Number,Iridium.Test.InfrastructureTests,SetTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SetTest.cs,PortedSetConcatCountTest,The following statement contains a magic number: int[] array2 = new int[13];
Magic Number,Iridium.Test.InfrastructureTests,SetTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SetTest.cs,PortedSetConcatTest,The following statement contains a magic number: int[] array1 = new int[10];
Magic Number,Iridium.Test.InfrastructureTests,SetTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SetTest.cs,PortedSetConcatTest,The following statement contains a magic number: int[] array2 = new int[13];
Magic Number,Iridium.Test.InfrastructureTests,SetTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SetTest.cs,PortedSetUnionTest,The following statement contains a magic number: int[] array1 = new int[100];
Magic Number,Iridium.Test.InfrastructureTests,SetTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SetTest.cs,PortedSetUnionTest,The following statement contains a magic number: int[] array2 = new int[100];
Magic Number,Iridium.Test.InfrastructureTests,SetTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SetTest.cs,PortedSetUnionTest,The following statement contains a magic number: array2[i] = i / 2;
Magic Number,Iridium.Test.InfrastructureTests,SetTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SetTest.cs,PortedSetUnionTest,The following statement contains a magic number: Assert.That(union.Count' Is.EqualTo(100));
Magic Number,Iridium.Test.InfrastructureTests,SetTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SetTest.cs,PortedSetUnionTest,The following statement contains a magic number: Assert.That(k' Is.LessThanOrEqualTo(100));
Magic Number,Iridium.Test.InfrastructureTests,SetTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SetTest.cs,PortedSetSubtractTest,The following statement contains a magic number: int[] array1 = new int[100];
Magic Number,Iridium.Test.InfrastructureTests,SetTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SetTest.cs,PortedSetSubtractTest,The following statement contains a magic number: int[] array2 = new int[100];
Magic Number,Iridium.Test.InfrastructureTests,SetTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SetTest.cs,PortedSetSubtractTest,The following statement contains a magic number: array2[i] = i / 2;
Magic Number,Iridium.Test.InfrastructureTests,SetTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SetTest.cs,PortedSetSubtractTest,The following statement contains a magic number: Assert.That(minus.Count' Is.EqualTo(50));
Magic Number,Iridium.Test.InfrastructureTests,SetTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SetTest.cs,PortedSetSubtractTest,The following statement contains a magic number: Assert.That(k' Is.GreaterThanOrEqualTo(50));
Magic Number,Iridium.Test.InfrastructureTests,SetTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SetTest.cs,PortedSetSubtractTest,The following statement contains a magic number: Assert.That(k' Is.LessThanOrEqualTo(100));
Magic Number,Iridium.Test.InfrastructureTests,SortingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SortingTest.cs,TestRandomTupleArraySorting,The following statement contains a magic number: const int len = 0x1 << 10;
Magic Number,Iridium.Test.InfrastructureTests,SortingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SortingTest.cs,TestRandomTupleListSorting,The following statement contains a magic number: const int len = 0x1 << 10;
Magic Number,Iridium.Test.InfrastructureTests,SortingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SortingTest.cs,TestRandomTripleArraySorting,The following statement contains a magic number: const int len = 0x1 << 10;
Magic Number,Iridium.Test.InfrastructureTests,SortingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SortingTest.cs,TestRandomTripleArraySorting,The following statement contains a magic number: items2[i] = keys[i] >> 2;
Magic Number,Iridium.Test.InfrastructureTests,SortingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SortingTest.cs,TestRandomTripleArraySorting,The following statement contains a magic number: Assert.That(items2[i]' Is.EqualTo(keys[i] >> 2)' "Items2 Permutation - " + i.ToString());
Magic Number,Iridium.Test.InfrastructureTests,SortingTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InfrastructureTests\SortingTest.cs,TestAppliedSetSorting,The following statement contains a magic number: const int len = 0x1 << 10;
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TargetFunctionA,The following statement contains a magic number: return Math.Exp(-x / 5) * (2 + Math.Sin(2 * x));
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TargetFunctionA,The following statement contains a magic number: return Math.Exp(-x / 5) * (2 + Math.Sin(2 * x));
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TargetFunctionA,The following statement contains a magic number: return Math.Exp(-x / 5) * (2 + Math.Sin(2 * x));
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestPortal,The following statement contains a magic number: Assert.That(                  Integrate.OnClosedInterval(TargetFunctionA' StartA' StopA)'                  NumericIs.AlmostEqualTo(TargetAreaA' 1e-5)'                  "Basic");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestPortal,The following statement contains a magic number: Assert.That(                  Integrate.OnClosedInterval(TargetFunctionA' StartA' StopA' 1e-10)'                  NumericIs.AlmostEqualTo(TargetAreaA' 1e-10)'                  "Basic Target 1e-10");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestPortal,The following statement contains a magic number: Assert.That(                  Integrate.OnClosedInterval(TargetFunctionA' StartA' StopA' 1e-10)'                  NumericIs.AlmostEqualTo(TargetAreaA' 1e-10)'                  "Basic Target 1e-10");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestTrapeziumRule,The following statement contains a magic number: Assert.That(                  algorithm.IntegrateTwoPoint(TargetFunctionA' StartA' StopA)'                  NumericIs.AlmostEqualTo(TargetAreaA' 2.5e-1)'                  "Direct (1 Partition)");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestTrapeziumRule,The following statement contains a magic number: Assert.That(                  algorithm.IntegrateComposite(TargetFunctionA' StartA' StopA' 1)'                  NumericIs.AlmostEqualTo(TargetAreaA' 2.5e-1)'                  "Composite 1 Partition");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestTrapeziumRule,The following statement contains a magic number: Assert.That(                  algorithm.IntegrateComposite(TargetFunctionA' StartA' StopA' 5)'                  NumericIs.AlmostEqualTo(TargetAreaA' 1e-1)'                  "Composite 5 Partitions");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestTrapeziumRule,The following statement contains a magic number: Assert.That(                  algorithm.IntegrateComposite(TargetFunctionA' StartA' StopA' 5)'                  NumericIs.AlmostEqualTo(TargetAreaA' 1e-1)'                  "Composite 5 Partitions");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestTrapeziumRule,The following statement contains a magic number: Assert.That(                  algorithm.IntegrateComposite(TargetFunctionA' StartA' StopA' 10)'                  NumericIs.AlmostEqualTo(TargetAreaA' 2e-2)'                  "Composite 10 Partitions");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestTrapeziumRule,The following statement contains a magic number: Assert.That(                  algorithm.IntegrateComposite(TargetFunctionA' StartA' StopA' 10)'                  NumericIs.AlmostEqualTo(TargetAreaA' 2e-2)'                  "Composite 10 Partitions");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestTrapeziumRule,The following statement contains a magic number: Assert.That(                  algorithm.IntegrateComposite(TargetFunctionA' StartA' StopA' 50)'                  NumericIs.AlmostEqualTo(TargetAreaA' 6e-4)'                  "Composite 50 Partitions");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestTrapeziumRule,The following statement contains a magic number: Assert.That(                  algorithm.IntegrateComposite(TargetFunctionA' StartA' StopA' 50)'                  NumericIs.AlmostEqualTo(TargetAreaA' 6e-4)'                  "Composite 50 Partitions");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestTrapeziumRule,The following statement contains a magic number: Assert.That(                  algorithm.IntegrateComposite(TargetFunctionA' StartA' StopA' 1000)'                  NumericIs.AlmostEqualTo(TargetAreaA' 1.5e-6)'                  "Composite 1000 Partitions");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestTrapeziumRule,The following statement contains a magic number: Assert.That(                  algorithm.IntegrateComposite(TargetFunctionA' StartA' StopA' 1000)'                  NumericIs.AlmostEqualTo(TargetAreaA' 1.5e-6)'                  "Composite 1000 Partitions");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestTrapeziumRule,The following statement contains a magic number: Assert.That(                  algorithm.IntegrateAdaptive(TargetFunctionA' StartA' StopA' 1e-1)'                  NumericIs.AlmostEqualTo(TargetAreaA' 1e-1)'                  "Adaptive Target 1e-1");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestTrapeziumRule,The following statement contains a magic number: Assert.That(                  algorithm.IntegrateAdaptive(TargetFunctionA' StartA' StopA' 1e-1)'                  NumericIs.AlmostEqualTo(TargetAreaA' 1e-1)'                  "Adaptive Target 1e-1");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestTrapeziumRule,The following statement contains a magic number: Assert.That(                  algorithm.IntegrateAdaptive(TargetFunctionA' StartA' StopA' 1e-5)'                  NumericIs.AlmostEqualTo(TargetAreaA' 1e-5)'                  "Adaptive Target 1e-5");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestTrapeziumRule,The following statement contains a magic number: Assert.That(                  algorithm.IntegrateAdaptive(TargetFunctionA' StartA' StopA' 1e-5)'                  NumericIs.AlmostEqualTo(TargetAreaA' 1e-5)'                  "Adaptive Target 1e-5");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestTrapeziumRule,The following statement contains a magic number: Assert.That(                  algorithm.IntegrateAdaptive(TargetFunctionA' StartA' StopA' 1e-10)'                  NumericIs.AlmostEqualTo(TargetAreaA' 1e-10)'                  "Adaptive Target 1e-10");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestTrapeziumRule,The following statement contains a magic number: Assert.That(                  algorithm.IntegrateAdaptive(TargetFunctionA' StartA' StopA' 1e-10)'                  NumericIs.AlmostEqualTo(TargetAreaA' 1e-10)'                  "Adaptive Target 1e-10");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestSimpsonRule,The following statement contains a magic number: Assert.That(                  algorithm.IntegrateThreePoint(TargetFunctionA' StartA' StopA)'                  NumericIs.AlmostEqualTo(TargetAreaA' 1.7e-1)'                  "Direct (2 Partitions)");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestSimpsonRule,The following statement contains a magic number: Assert.That(                  algorithm.IntegrateComposite(TargetFunctionA' StartA' StopA' 2)'                  NumericIs.AlmostEqualTo(TargetAreaA' 1.7e-1)'                  "Composite 2 Partitions");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestSimpsonRule,The following statement contains a magic number: Assert.That(                  algorithm.IntegrateComposite(TargetFunctionA' StartA' StopA' 2)'                  NumericIs.AlmostEqualTo(TargetAreaA' 1.7e-1)'                  "Composite 2 Partitions");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestSimpsonRule,The following statement contains a magic number: Assert.That(                  algorithm.IntegrateComposite(TargetFunctionA' StartA' StopA' 6)'                  NumericIs.AlmostEqualTo(TargetAreaA' 1.2e-1)'                  "Composite 6 Partitions");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestSimpsonRule,The following statement contains a magic number: Assert.That(                  algorithm.IntegrateComposite(TargetFunctionA' StartA' StopA' 6)'                  NumericIs.AlmostEqualTo(TargetAreaA' 1.2e-1)'                  "Composite 6 Partitions");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestSimpsonRule,The following statement contains a magic number: Assert.That(                  algorithm.IntegrateComposite(TargetFunctionA' StartA' StopA' 10)'                  NumericIs.AlmostEqualTo(TargetAreaA' 8e-3)'                  "Composite 10 Partitions");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestSimpsonRule,The following statement contains a magic number: Assert.That(                  algorithm.IntegrateComposite(TargetFunctionA' StartA' StopA' 10)'                  NumericIs.AlmostEqualTo(TargetAreaA' 8e-3)'                  "Composite 10 Partitions");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestSimpsonRule,The following statement contains a magic number: Assert.That(                  algorithm.IntegrateComposite(TargetFunctionA' StartA' StopA' 50)'                  NumericIs.AlmostEqualTo(TargetAreaA' 8e-6)'                  "Composite 50 Partitions");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestSimpsonRule,The following statement contains a magic number: Assert.That(                  algorithm.IntegrateComposite(TargetFunctionA' StartA' StopA' 50)'                  NumericIs.AlmostEqualTo(TargetAreaA' 8e-6)'                  "Composite 50 Partitions");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestSimpsonRule,The following statement contains a magic number: Assert.That(                  algorithm.IntegrateComposite(TargetFunctionA' StartA' StopA' 1000)'                  NumericIs.AlmostEqualTo(TargetAreaA' 5e-11)'                  "Composite 1000 Partitions");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestSimpsonRule,The following statement contains a magic number: Assert.That(                  algorithm.IntegrateComposite(TargetFunctionA' StartA' StopA' 1000)'                  NumericIs.AlmostEqualTo(TargetAreaA' 5e-11)'                  "Composite 1000 Partitions");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestDoubleExponentialTransformationAlgorithm,The following statement contains a magic number: Assert.That(                  det.Integrate(TargetFunctionA' StartA' StopA' 1e-5)'                  NumericIs.AlmostEqualTo(TargetAreaA' 1e-5)'                  "Adaptive Target 1e-5");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestDoubleExponentialTransformationAlgorithm,The following statement contains a magic number: Assert.That(                  det.Integrate(TargetFunctionA' StartA' StopA' 1e-5)'                  NumericIs.AlmostEqualTo(TargetAreaA' 1e-5)'                  "Adaptive Target 1e-5");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestDoubleExponentialTransformationAlgorithm,The following statement contains a magic number: Assert.That(                  det.Integrate(TargetFunctionA' StartA' StopA' 1e-10)'                  NumericIs.AlmostEqualTo(TargetAreaA' 1e-10)'                  "Adaptive Target 1e-10");
Magic Number,Iridium.Test.IntegrationTests,IntegrationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\IntegrationTests\IntegrationTest.cs,TestDoubleExponentialTransformationAlgorithm,The following statement contains a magic number: Assert.That(                  det.Integrate(TargetFunctionA' StartA' StopA' 1e-10)'                  NumericIs.AlmostEqualTo(TargetAreaA' 1e-10)'                  "Adaptive Target 1e-10");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: double[] t = new double[] { 0.0' 1.0' 3.0' 4.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: double[] t = new double[] { 0.0' 1.0' 3.0' 4.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: double[] x = new double[] { 0.0' 3.0' 1.0' 3.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: double[] x = new double[] { 0.0' 3.0' 1.0' 3.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(.57225000000000000000' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(.57225000000000000000' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(.57225000000000000000' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Differentiate(0.1' out dx' out d2x)' NumericIs.AlmostEqualTo(.57225000000000000000' 1e-15)' "B 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Differentiate(0.1' out dx' out d2x)' NumericIs.AlmostEqualTo(.57225000000000000000' 1e-15)' "B 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Differentiate(0.1' out dx' out d2x)' NumericIs.AlmostEqualTo(.57225000000000000000' 1e-15)' "B 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(1.8840000000000000000' 1e-15)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(1.8840000000000000000' 1e-15)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(1.8840000000000000000' 1e-15)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Differentiate(0.4' out dx' out d2x)' NumericIs.AlmostEqualTo(1.8840000000000000000' 1e-15)' "B 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Differentiate(0.4' out dx' out d2x)' NumericIs.AlmostEqualTo(1.8840000000000000000' 1e-15)' "B 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Differentiate(0.4' out dx' out d2x)' NumericIs.AlmostEqualTo(1.8840000000000000000' 1e-15)' "B 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(1.1)' NumericIs.AlmostEqualTo(3.0314166666666666667' 1e-15)' "A 1.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(1.1)' NumericIs.AlmostEqualTo(3.0314166666666666667' 1e-15)' "A 1.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(1.1)' NumericIs.AlmostEqualTo(3.0314166666666666667' 1e-15)' "A 1.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Differentiate(1.1' out dx' out d2x)' NumericIs.AlmostEqualTo(3.0314166666666666667' 1e-15)' "B 1.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Differentiate(1.1' out dx' out d2x)' NumericIs.AlmostEqualTo(3.0314166666666666667' 1e-15)' "B 1.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Differentiate(1.1' out dx' out d2x)' NumericIs.AlmostEqualTo(3.0314166666666666667' 1e-15)' "B 1.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(3.2)' NumericIs.AlmostEqualTo(1.034666666666666667' 1e-15)' "A 3.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(3.2)' NumericIs.AlmostEqualTo(1.034666666666666667' 1e-15)' "A 3.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(3.2)' NumericIs.AlmostEqualTo(1.034666666666666667' 1e-15)' "A 3.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Differentiate(3.2' out dx' out d2x)' NumericIs.AlmostEqualTo(1.034666666666666667' 1e-15)' "B 3.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Differentiate(3.2' out dx' out d2x)' NumericIs.AlmostEqualTo(1.034666666666666667' 1e-15)' "B 3.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Differentiate(3.2' out dx' out d2x)' NumericIs.AlmostEqualTo(1.034666666666666667' 1e-15)' "B 3.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(4.5)' NumericIs.AlmostEqualTo(6.281250000000000000' 1e-15)' "A 4.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(4.5)' NumericIs.AlmostEqualTo(6.281250000000000000' 1e-15)' "A 4.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(4.5)' NumericIs.AlmostEqualTo(6.281250000000000000' 1e-15)' "A 4.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Differentiate(4.5' out dx' out d2x)' NumericIs.AlmostEqualTo(6.281250000000000000' 1e-15)' "B 4.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Differentiate(4.5' out dx' out d2x)' NumericIs.AlmostEqualTo(6.281250000000000000' 1e-15)' "B 4.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Differentiate(4.5' out dx' out d2x)' NumericIs.AlmostEqualTo(6.281250000000000000' 1e-15)' "B 4.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo(277.50000000000000000' 1e-15)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo(277.50000000000000000' 1e-15)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo(277.50000000000000000' 1e-15)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Differentiate(10.0' out dx' out d2x)' NumericIs.AlmostEqualTo(277.50000000000000000' 1e-15)' "B 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Differentiate(10.0' out dx' out d2x)' NumericIs.AlmostEqualTo(277.50000000000000000' 1e-15)' "B 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Differentiate(10.0' out dx' out d2x)' NumericIs.AlmostEqualTo(277.50000000000000000' 1e-15)' "B 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo(-1010.8333333333333333' 1e-15)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo(-1010.8333333333333333' 1e-15)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo(-1010.8333333333333333' 1e-15)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Differentiate(-10.0' out dx' out d2x)' NumericIs.AlmostEqualTo(-1010.8333333333333333' 1e-15)' "B -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Differentiate(-10.0' out dx' out d2x)' NumericIs.AlmostEqualTo(-1010.8333333333333333' 1e-15)' "B -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(method.Differentiate(-10.0' out dx' out d2x)' NumericIs.AlmostEqualTo(-1010.8333333333333333' 1e-15)' "B -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: BuildLinearCase(2' k' out linx' out liny' out linxtest' out linytest);
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: Assert.That(linearMethod.Interpolate(linxtest[i])' NumericIs.AlmostEqualTo(linytest[i]' 1e-12)' String.Format("Linear k={0} i={1}"' k' i));
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_NevillePolynomial,The following statement contains a magic number: k < 7
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: double[] x = new double[] { 0.0' 3.0' 2.5' 1.0' 3.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: double[] x = new double[] { 0.0' 3.0' 2.5' 1.0' 3.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: double[] x = new double[] { 0.0' 3.0' 2.5' 1.0' 3.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: IInterpolationMethod method = Interpolation.CreateOnEquidistantPoints(0.0' 4.0' x);
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: i < 4
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(.48742500000000000000' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(.48742500000000000000' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(.48742500000000000000' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(1.6968000000000000000' 1e-15)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(1.6968000000000000000' 1e-15)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(1.6968000000000000000' 1e-15)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(1.1)' NumericIs.AlmostEqualTo(3.0819250000000000000' 1e-15)' "A 1.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(1.1)' NumericIs.AlmostEqualTo(3.0819250000000000000' 1e-15)' "A 1.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(1.1)' NumericIs.AlmostEqualTo(3.0819250000000000000' 1e-15)' "A 1.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(3.2)' NumericIs.AlmostEqualTo(.940800000000000001' 1e-15)' "A 3.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(3.2)' NumericIs.AlmostEqualTo(.940800000000000001' 1e-15)' "A 3.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(3.2)' NumericIs.AlmostEqualTo(.940800000000000001' 1e-15)' "A 3.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(4.5)' NumericIs.AlmostEqualTo(7.265625000000000001' 1e-15)' "A 4.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(4.5)' NumericIs.AlmostEqualTo(7.265625000000000001' 1e-15)' "A 4.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(4.5)' NumericIs.AlmostEqualTo(7.265625000000000001' 1e-15)' "A 4.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo(592.50000000000000000' 1e-13)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo(592.50000000000000000' 1e-13)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo(592.50000000000000000' 1e-13)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo(657.50000000000000000' 1e-12)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo(657.50000000000000000' 1e-12)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo(657.50000000000000000' 1e-12)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: BuildLinearCase(2' k' out linx' out liny' out linxtest' out linytest);
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: IInterpolationMethod linearMethod = Interpolation.CreateOnEquidistantPoints(2' Math.Max(k' 3)' liny);
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: IInterpolationMethod linearMethod = Interpolation.CreateOnEquidistantPoints(2' Math.Max(k' 3)' liny);
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: Assert.That(linearMethod.Interpolate(linxtest[i])' NumericIs.AlmostEqualTo(linytest[i]' 1e-12)' String.Format("Linear k={0} i={1}"' k' i));
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_EquidistantBarycentricPolynomial,The following statement contains a magic number: k < 7
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: double[] x = new double[] { 0.0' 3.0' 2.5' 1.0' 3.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: double[] x = new double[] { 0.0' 3.0' 2.5' 1.0' 3.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: double[] x = new double[] { 0.0' 3.0' 2.5' 1.0' 3.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: IInterpolationMethod method = Interpolation.CreateOnChebyshevFirstKindPoints(0.0' 4.0' x);
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: double[] t = Interpolation.GenerateChebyshevFirstKindSamplePoints(0.0' 4.0' 5);
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: double[] t = Interpolation.GenerateChebyshevFirstKindSamplePoints(0.0' 4.0' 5);
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: double tt = 2.0 + (2.0 * Math.Cos(Math.PI * 0.1 * ((2 * i) + 1)));
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: double tt = 2.0 + (2.0 * Math.Cos(Math.PI * 0.1 * ((2 * i) + 1)));
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: double tt = 2.0 + (2.0 * Math.Cos(Math.PI * 0.1 * ((2 * i) + 1)));
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: double tt = 2.0 + (2.0 * Math.Cos(Math.PI * 0.1 * ((2 * i) + 1)));
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: i < 4
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(2.9882560375702001608' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(2.9882560375702001608' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(2.9882560375702001608' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(1.7097090371118968872' 1e-15)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(1.7097090371118968872' 1e-15)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(1.7097090371118968872' 1e-15)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(1.1)' NumericIs.AlmostEqualTo(1.0462830804302586508' 1e-15)' "A 1.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(1.1)' NumericIs.AlmostEqualTo(1.0462830804302586508' 1e-15)' "A 1.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(1.1)' NumericIs.AlmostEqualTo(1.0462830804302586508' 1e-15)' "A 1.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(3.2)' NumericIs.AlmostEqualTo(2.951922899377369724' 1e-15)' "A 3.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(3.2)' NumericIs.AlmostEqualTo(2.951922899377369724' 1e-15)' "A 3.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(3.2)' NumericIs.AlmostEqualTo(2.951922899377369724' 1e-15)' "A 3.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(4.5)' NumericIs.AlmostEqualTo(-5.394317844683536750' 1e-15)' "A 4.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(4.5)' NumericIs.AlmostEqualTo(-5.394317844683536750' 1e-15)' "A 4.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(4.5)' NumericIs.AlmostEqualTo(-5.394317844683536750' 1e-15)' "A 4.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo(-228.01438153088988107' 1e-13)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo(-228.01438153088988107' 1e-13)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo(-228.01438153088988107' 1e-13)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo(1979.2646653044133954' 1e-12)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo(1979.2646653044133954' 1e-12)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev1BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo(1979.2646653044133954' 1e-12)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: double[] x = new double[] { 0.0' 3.0' 2.5' 1.0' 3.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: double[] x = new double[] { 0.0' 3.0' 2.5' 1.0' 3.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: double[] x = new double[] { 0.0' 3.0' 2.5' 1.0' 3.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: IInterpolationMethod method = Interpolation.CreateOnChebyshevSecondKindPoints(0.0' 4.0' x);
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: double[] t = Interpolation.GenerateChebyshevSecondKindSamplePoints(0.0' 4.0' 5);
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: double[] t = Interpolation.GenerateChebyshevSecondKindSamplePoints(0.0' 4.0' 5);
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: double tt = 2.0 + (2.0 * Math.Cos(Math.PI * i * 0.25));
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: double tt = 2.0 + (2.0 * Math.Cos(Math.PI * i * 0.25));
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: double tt = 2.0 + (2.0 * Math.Cos(Math.PI * i * 0.25));
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: i < 4
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(2.4826419375703841423' 1e-14)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(2.4826419375703841423' 1e-14)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(2.4826419375703841423' 1e-14)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(1.3814129880730972522' 1e-14)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(1.3814129880730972522' 1e-14)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(1.3814129880730972522' 1e-14)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(1.1)' NumericIs.AlmostEqualTo(.8808232156067110292' 1e-15)' "A 1.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(1.1)' NumericIs.AlmostEqualTo(.8808232156067110292' 1e-15)' "A 1.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(1.1)' NumericIs.AlmostEqualTo(.8808232156067110292' 1e-15)' "A 1.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(3.2)' NumericIs.AlmostEqualTo(3.478116015902536997' 1e-15)' "A 3.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(3.2)' NumericIs.AlmostEqualTo(3.478116015902536997' 1e-15)' "A 3.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(3.2)' NumericIs.AlmostEqualTo(3.478116015902536997' 1e-15)' "A 3.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(4.5)' NumericIs.AlmostEqualTo(-5.035612822087164912' 1e-15)' "A 4.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(4.5)' NumericIs.AlmostEqualTo(-5.035612822087164912' 1e-15)' "A 4.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(4.5)' NumericIs.AlmostEqualTo(-5.035612822087164912' 1e-15)' "A 4.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo(-369.20562748477140583' 1e-13)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo(-369.20562748477140583' 1e-13)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo(-369.20562748477140583' 1e-13)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo(1199.4696961966999204' 1e-12)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo(1199.4696961966999204' 1e-12)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_Chebyshev2BarycentricPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo(1199.4696961966999204' 1e-12)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: double[] t = new double[] { -2.0' -1.0' 0.0' 1.0' 2.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: double[] t = new double[] { -2.0' -1.0' 0.0' 1.0' 2.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: double[] x = new double[] { 1.0' 2.0' -1.0' 0.0' 1.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: Assert.That(method.Interpolate(-2.4)' NumericIs.AlmostEqualTo(-4.5968' 1e-15)' "A -2.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: Assert.That(method.Interpolate(-2.4)' NumericIs.AlmostEqualTo(-4.5968' 1e-15)' "A -2.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: Assert.That(method.Interpolate(-2.4)' NumericIs.AlmostEqualTo(-4.5968' 1e-15)' "A -2.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: Assert.That(method.Interpolate(-0.9)' NumericIs.AlmostEqualTo(1.65395' 1e-15)' "A -0.9");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: Assert.That(method.Interpolate(-0.9)' NumericIs.AlmostEqualTo(1.65395' 1e-15)' "A -0.9");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: Assert.That(method.Interpolate(-0.9)' NumericIs.AlmostEqualTo(1.65395' 1e-15)' "A -0.9");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: Assert.That(method.Interpolate(-0.5)' NumericIs.AlmostEqualTo(0.21875' 1e-15)' "A -0.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: Assert.That(method.Interpolate(-0.5)' NumericIs.AlmostEqualTo(0.21875' 1e-15)' "A -0.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: Assert.That(method.Interpolate(-0.5)' NumericIs.AlmostEqualTo(0.21875' 1e-15)' "A -0.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: Assert.That(method.Interpolate(-0.1)' NumericIs.AlmostEqualTo(-0.84205' 1e-15)' "A -0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: Assert.That(method.Interpolate(-0.1)' NumericIs.AlmostEqualTo(-0.84205' 1e-15)' "A -0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: Assert.That(method.Interpolate(-0.1)' NumericIs.AlmostEqualTo(-0.84205' 1e-15)' "A -0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(-1.10805' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(-1.10805' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(-1.10805' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(-1.1248' 1e-15)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(-1.1248' 1e-15)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(-1.1248' 1e-15)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: Assert.That(method.Interpolate(1.2)' NumericIs.AlmostEqualTo(0.5392' 1e-15)' "A 1.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: Assert.That(method.Interpolate(1.2)' NumericIs.AlmostEqualTo(0.5392' 1e-15)' "A 1.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: Assert.That(method.Interpolate(1.2)' NumericIs.AlmostEqualTo(0.5392' 1e-15)' "A 1.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo((double) (-4431)' 1e-12)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo((double) (-4431)' 1e-12)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo((double) (-4431)' 1e-12)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo((double) (-5071)' 1e-12)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo((double) (-5071)' 1e-12)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo((double) (-5071)' 1e-12)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: t = new double[40];
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: x = new double[40];
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: const double step = 10.0 / 39.0;
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: const double step = 10.0 / 39.0;
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: double tt = -5 + (i * step);
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: BuildLinearCase(2' k' out linx' out liny' out linxtest' out linytest);
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: Assert.That(linearMethod.Interpolate(linxtest[i])' NumericIs.AlmostEqualTo(linytest[i]' 1e-12)' String.Format("Linear k={0} i={1}"' k' i));
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalPoleFreeBarycentric,The following statement contains a magic number: k < 7
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: double[] t = new double[] { 0' 1' 3' 4' 5 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: double[] t = new double[] { 0' 1' 3' 4' 5 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: double[] t = new double[] { 0' 1' 3' 4' 5 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: double[] x = new double[] { 0' 3' 1000' -1000' 3 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: double[] x = new double[] { 0' 3' 1000' -1000' 3 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: double[] x = new double[] { 0' 3' 1000' -1000' 3 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: double[] x = new double[] { 0' 3' 1000' -1000' 3 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(.19389203383553566255' 1e-14)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(.19389203383553566255' 1e-14)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(.19389203383553566255' 1e-14)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(.88132900698869875369' 1e-14)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(.88132900698869875369' 1e-14)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(.88132900698869875369' 1e-14)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(1.1)' NumericIs.AlmostEqualTo(3.5057665681580626913' 1e-15)' "A 1.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(1.1)' NumericIs.AlmostEqualTo(3.5057665681580626913' 1e-15)' "A 1.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(1.1)' NumericIs.AlmostEqualTo(3.5057665681580626913' 1e-15)' "A 1.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(3.01)' NumericIs.AlmostEqualTo(1548.7666642693586902' 1e-13)' "A 3.01");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(3.01)' NumericIs.AlmostEqualTo(1548.7666642693586902' 1e-13)' "A 3.01");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(3.01)' NumericIs.AlmostEqualTo(1548.7666642693586902' 1e-13)' "A 3.01");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(3.02)' NumericIs.AlmostEqualTo(3362.2564334253633516' 1e-13)' "A 3.02");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(3.02)' NumericIs.AlmostEqualTo(3362.2564334253633516' 1e-13)' "A 3.02");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(3.02)' NumericIs.AlmostEqualTo(3362.2564334253633516' 1e-13)' "A 3.02");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(3.03)' NumericIs.AlmostEqualTo(-22332.603641443806014' 1e-12)' "A 3.03");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(3.03)' NumericIs.AlmostEqualTo(-22332.603641443806014' 1e-12)' "A 3.03");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(3.03)' NumericIs.AlmostEqualTo(-22332.603641443806014' 1e-12)' "A 3.03");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(3.1)' NumericIs.AlmostEqualTo(-440.30323769822443789' 1e-14)' "A 3.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(3.1)' NumericIs.AlmostEqualTo(-440.30323769822443789' 1e-14)' "A 3.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(3.1)' NumericIs.AlmostEqualTo(-440.30323769822443789' 1e-14)' "A 3.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(3.2)' NumericIs.AlmostEqualTo(-202.42421196280566349' 1e-14)' "A 3.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(3.2)' NumericIs.AlmostEqualTo(-202.42421196280566349' 1e-14)' "A 3.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(3.2)' NumericIs.AlmostEqualTo(-202.42421196280566349' 1e-14)' "A 3.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(4.5)' NumericIs.AlmostEqualTo(21.208249625210155439' 1e-14)' "A 4.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(4.5)' NumericIs.AlmostEqualTo(21.208249625210155439' 1e-14)' "A 4.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(4.5)' NumericIs.AlmostEqualTo(21.208249625210155439' 1e-14)' "A 4.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo(-4.8936986959784751517' 1e-13)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo(-4.8936986959784751517' 1e-13)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo(-4.8936986959784751517' 1e-13)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo(-3.6017584308603731307' 1e-13)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo(-3.6017584308603731307' 1e-13)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo(-3.6017584308603731307' 1e-13)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: BuildLinearCase(2' k' out linx' out liny' out linxtest' out linytest);
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_RationalWithPoles,The following statement contains a magic number: k < 6
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderPolynomial,The following statement contains a magic number: double[] t = new double[] { 0.0' 1.0' 3.0' 4.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderPolynomial,The following statement contains a magic number: double[] t = new double[] { 0.0' 1.0' 3.0' 4.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderPolynomial,The following statement contains a magic number: double[] x = new double[] { 0.0' 3.0' 1.0' 3.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderPolynomial,The following statement contains a magic number: double[] x = new double[] { 0.0' 3.0' 1.0' 3.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(.57225000000000000000' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(.57225000000000000000' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(.57225000000000000000' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(1.8840000000000000000' 1e-15)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(1.8840000000000000000' 1e-15)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(1.8840000000000000000' 1e-15)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(1.1)' NumericIs.AlmostEqualTo(3.0314166666666666667' 1e-15)' "A 1.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(1.1)' NumericIs.AlmostEqualTo(3.0314166666666666667' 1e-15)' "A 1.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(1.1)' NumericIs.AlmostEqualTo(3.0314166666666666667' 1e-15)' "A 1.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(3.2)' NumericIs.AlmostEqualTo(1.034666666666666667' 1e-15)' "A 3.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(3.2)' NumericIs.AlmostEqualTo(1.034666666666666667' 1e-15)' "A 3.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(3.2)' NumericIs.AlmostEqualTo(1.034666666666666667' 1e-15)' "A 3.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(4.5)' NumericIs.AlmostEqualTo(6.281250000000000000' 1e-15)' "A 4.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(4.5)' NumericIs.AlmostEqualTo(6.281250000000000000' 1e-15)' "A 4.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(4.5)' NumericIs.AlmostEqualTo(6.281250000000000000' 1e-15)' "A 4.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo(277.50000000000000000' 1e-15)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo(277.50000000000000000' 1e-15)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo(277.50000000000000000' 1e-15)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo(-1010.8333333333333333' 1e-15)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo(-1010.8333333333333333' 1e-15)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderPolynomial,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo(-1010.8333333333333333' 1e-15)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: double[] t = new double[] { 0' 1' 3'    4'     5 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: double[] t = new double[] { 0' 1' 3'    4'     5 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: double[] t = new double[] { 0' 1' 3'    4'     5 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: double[] x = new double[] { 0' 3' 1000' -1000' 3 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: double[] x = new double[] { 0' 3' 1000' -1000' 3 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: double[] x = new double[] { 0' 3' 1000' -1000' 3 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: double[] x = new double[] { 0' 3' 1000' -1000' 3 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(.19389203383553566255' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(.19389203383553566255' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(.19389203383553566255' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(.88132900698869875369' 1e-14)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(.88132900698869875369' 1e-14)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(.88132900698869875369' 1e-14)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(1.1)' NumericIs.AlmostEqualTo(3.5057665681580626913' 1e-15)' "A 1.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(1.1)' NumericIs.AlmostEqualTo(3.5057665681580626913' 1e-15)' "A 1.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(1.1)' NumericIs.AlmostEqualTo(3.5057665681580626913' 1e-15)' "A 1.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(3.01)' NumericIs.AlmostEqualTo(1548.7666642693586902' 1e-13)' "A 3.01");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(3.01)' NumericIs.AlmostEqualTo(1548.7666642693586902' 1e-13)' "A 3.01");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(3.01)' NumericIs.AlmostEqualTo(1548.7666642693586902' 1e-13)' "A 3.01");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(3.02)' NumericIs.AlmostEqualTo(3362.2564334253633516' 1e-13)' "A 3.02");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(3.02)' NumericIs.AlmostEqualTo(3362.2564334253633516' 1e-13)' "A 3.02");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(3.02)' NumericIs.AlmostEqualTo(3362.2564334253633516' 1e-13)' "A 3.02");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(3.03)' NumericIs.AlmostEqualTo(-22332.603641443806014' 1e-12)' "A 3.03");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(3.03)' NumericIs.AlmostEqualTo(-22332.603641443806014' 1e-12)' "A 3.03");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(3.03)' NumericIs.AlmostEqualTo(-22332.603641443806014' 1e-12)' "A 3.03");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(3.1)' NumericIs.AlmostEqualTo(-440.30323769822443789' 1e-14)' "A 3.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(3.1)' NumericIs.AlmostEqualTo(-440.30323769822443789' 1e-14)' "A 3.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(3.1)' NumericIs.AlmostEqualTo(-440.30323769822443789' 1e-14)' "A 3.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(3.2)' NumericIs.AlmostEqualTo(-202.42421196280566349' 1e-14)' "A 3.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(3.2)' NumericIs.AlmostEqualTo(-202.42421196280566349' 1e-14)' "A 3.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(3.2)' NumericIs.AlmostEqualTo(-202.42421196280566349' 1e-14)' "A 3.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(4.5)' NumericIs.AlmostEqualTo(21.208249625210155439' 1e-14)' "A 4.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(4.5)' NumericIs.AlmostEqualTo(21.208249625210155439' 1e-14)' "A 4.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(4.5)' NumericIs.AlmostEqualTo(21.208249625210155439' 1e-14)' "A 4.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo(-4.8936986959784751517' 1e-13)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo(-4.8936986959784751517' 1e-13)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo(-4.8936986959784751517' 1e-13)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo(-3.6017584308603731307' 1e-13)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo(-3.6017584308603731307' 1e-13)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LimitedOrderRationalWithPoles,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo(-3.6017584308603731307' 1e-13)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: double[] t = new double[] { -2.0' -1.0' 0.0' 1.0' 2.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: double[] t = new double[] { -2.0' -1.0' 0.0' 1.0' 2.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: double[] x = new double[] { 1.0' 2.0' -1.0' 0.0' 1.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: Assert.That(method.Interpolate(-2.4)' NumericIs.AlmostEqualTo(.6' 1e-15)' "A -2.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: Assert.That(method.Interpolate(-2.4)' NumericIs.AlmostEqualTo(.6' 1e-15)' "A -2.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: Assert.That(method.Interpolate(-2.4)' NumericIs.AlmostEqualTo(.6' 1e-15)' "A -2.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: Assert.That(method.Interpolate(-0.9)' NumericIs.AlmostEqualTo(1.7' 1e-15)' "A -0.9");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: Assert.That(method.Interpolate(-0.9)' NumericIs.AlmostEqualTo(1.7' 1e-15)' "A -0.9");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: Assert.That(method.Interpolate(-0.9)' NumericIs.AlmostEqualTo(1.7' 1e-15)' "A -0.9");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: Assert.That(method.Interpolate(-0.5)' NumericIs.AlmostEqualTo(.5' 1e-15)' "A -0.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: Assert.That(method.Interpolate(-0.5)' NumericIs.AlmostEqualTo(.5' 1e-15)' "A -0.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: Assert.That(method.Interpolate(-0.5)' NumericIs.AlmostEqualTo(.5' 1e-15)' "A -0.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: Assert.That(method.Interpolate(-0.1)' NumericIs.AlmostEqualTo(-.7' 1e-15)' "A -0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: Assert.That(method.Interpolate(-0.1)' NumericIs.AlmostEqualTo(-.7' 1e-15)' "A -0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: Assert.That(method.Interpolate(-0.1)' NumericIs.AlmostEqualTo(-.7' 1e-15)' "A -0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(-.9' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(-.9' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(-.9' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(-.6' 1e-15)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(-.6' 1e-15)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(-.6' 1e-15)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: Assert.That(method.Interpolate(1.2)' NumericIs.AlmostEqualTo(.2' 1e-15)' "A 1.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: Assert.That(method.Interpolate(1.2)' NumericIs.AlmostEqualTo(.2' 1e-15)' "A 1.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: Assert.That(method.Interpolate(1.2)' NumericIs.AlmostEqualTo(.2' 1e-15)' "A 1.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo(9.0' 1e-15)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo(9.0' 1e-15)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo(9.0' 1e-15)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo(-7.0' 1e-15)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo(-7.0' 1e-15)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo(-7.0' 1e-15)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: BuildLinearCase(2' k + 1' out linx' out liny' out linxtest' out linytest);
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: Assert.That(linearMethod.Interpolate(linxtest[i])' NumericIs.AlmostEqualTo(linytest[i]' 1e-12)' String.Format("Linear k={0} i={1}"' k' i));
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_LinearSpline,The following statement contains a magic number: k < 6
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: double[] t = new double[] { -2.0' -1.0' 0.0' 1.0' 2.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: double[] t = new double[] { -2.0' -1.0' 0.0' 1.0' 2.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: double[] x = new double[] { 1.0' 2.0' -1.0' 0.0' 1.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: Assert.That(method.Interpolate(-2.4)' NumericIs.AlmostEqualTo(.144000000000000000' 1e-15)' "A -2.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: Assert.That(method.Interpolate(-2.4)' NumericIs.AlmostEqualTo(.144000000000000000' 1e-15)' "A -2.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: Assert.That(method.Interpolate(-2.4)' NumericIs.AlmostEqualTo(.144000000000000000' 1e-15)' "A -2.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: Assert.That(method.Interpolate(-0.9)' NumericIs.AlmostEqualTo(1.7906428571428571429' 1e-15)' "A -0.9");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: Assert.That(method.Interpolate(-0.9)' NumericIs.AlmostEqualTo(1.7906428571428571429' 1e-15)' "A -0.9");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: Assert.That(method.Interpolate(-0.9)' NumericIs.AlmostEqualTo(1.7906428571428571429' 1e-15)' "A -0.9");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: Assert.That(method.Interpolate(-0.5)' NumericIs.AlmostEqualTo(.47321428571428571431' 1e-15)' "A -0.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: Assert.That(method.Interpolate(-0.5)' NumericIs.AlmostEqualTo(.47321428571428571431' 1e-15)' "A -0.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: Assert.That(method.Interpolate(-0.5)' NumericIs.AlmostEqualTo(.47321428571428571431' 1e-15)' "A -0.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: Assert.That(method.Interpolate(-0.1)' NumericIs.AlmostEqualTo(-.80992857142857142857' 1e-15)' "A -0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: Assert.That(method.Interpolate(-0.1)' NumericIs.AlmostEqualTo(-.80992857142857142857' 1e-15)' "A -0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: Assert.That(method.Interpolate(-0.1)' NumericIs.AlmostEqualTo(-.80992857142857142857' 1e-15)' "A -0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(-1.1089285714285714286' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(-1.1089285714285714286' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(-1.1089285714285714286' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(-1.0285714285714285714' 1e-15)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(-1.0285714285714285714' 1e-15)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(-1.0285714285714285714' 1e-15)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: Assert.That(method.Interpolate(1.2)' NumericIs.AlmostEqualTo(.30285714285714285716' 1e-15)' "A 1.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: Assert.That(method.Interpolate(1.2)' NumericIs.AlmostEqualTo(.30285714285714285716' 1e-15)' "A 1.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: Assert.That(method.Interpolate(1.2)' NumericIs.AlmostEqualTo(.30285714285714285716' 1e-15)' "A 1.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo((double) 189' 1e-15)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo((double) 189' 1e-15)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo((double) 189' 1e-15)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo((double) 677' 1e-15)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo((double) 677' 1e-15)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo((double) 677' 1e-15)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: BuildLinearCase(2' k + 1' out linx' out liny' out linxtest' out linytest);
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: Assert.That(linearMethod.Interpolate(linxtest[i])' NumericIs.AlmostEqualTo(linytest[i]' 1e-12)' String.Format("Linear k={0} i={1}"' k' i));
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryNatural,The following statement contains a magic number: k < 6
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The following statement contains a magic number: double[] t = new double[] { -2.0' -1.0' 0.0' 1.0' 2.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The following statement contains a magic number: double[] t = new double[] { -2.0' -1.0' 0.0' 1.0' 2.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The following statement contains a magic number: double[] x = new double[] { 1.0' 2.0' -1.0' 0.0' 1.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(-2.4)' NumericIs.AlmostEqualTo(1.120000000000000001' 1e-15)' "A -2.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(-2.4)' NumericIs.AlmostEqualTo(1.120000000000000001' 1e-15)' "A -2.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(-2.4)' NumericIs.AlmostEqualTo(1.120000000000000001' 1e-15)' "A -2.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(-0.9)' NumericIs.AlmostEqualTo(1.8243928571428571428' 1e-15)' "A -0.9");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(-0.9)' NumericIs.AlmostEqualTo(1.8243928571428571428' 1e-15)' "A -0.9");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(-0.9)' NumericIs.AlmostEqualTo(1.8243928571428571428' 1e-15)' "A -0.9");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(-0.5)' NumericIs.AlmostEqualTo(.54910714285714285715' 1e-15)' "A -0.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(-0.5)' NumericIs.AlmostEqualTo(.54910714285714285715' 1e-15)' "A -0.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(-0.5)' NumericIs.AlmostEqualTo(.54910714285714285715' 1e-15)' "A -0.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(-0.1)' NumericIs.AlmostEqualTo(-.78903571428571428572' 1e-15)' "A -0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(-0.1)' NumericIs.AlmostEqualTo(-.78903571428571428572' 1e-15)' "A -0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(-0.1)' NumericIs.AlmostEqualTo(-.78903571428571428572' 1e-15)' "A -0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(-1.1304642857142857143' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(-1.1304642857142857143' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(-1.1304642857142857143' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(-1.1040000000000000000' 1e-15)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(-1.1040000000000000000' 1e-15)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(-1.1040000000000000000' 1e-15)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(1.2)' NumericIs.AlmostEqualTo(.4148571428571428571' 1e-15)' "A 1.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(1.2)' NumericIs.AlmostEqualTo(.4148571428571428571' 1e-15)' "A 1.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(1.2)' NumericIs.AlmostEqualTo(.4148571428571428571' 1e-15)' "A 1.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo(-608.14285714285714286' 1e-15)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo(-608.14285714285714286' 1e-15)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo(-608.14285714285714286' 1e-15)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo(1330.1428571428571429' 1e-15)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo(1330.1428571428571429' 1e-15)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundaryFirstDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo(1330.1428571428571429' 1e-15)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: double[] t = new double[] { -2.0' -1.0' 0.0' 1.0' 2.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: double[] t = new double[] { -2.0' -1.0' 0.0' 1.0' 2.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: double[] x = new double[] { 1.0' 2.0' -1.0' 0.0' 1.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: IInterpolationMethod method = Interpolation.CreateCubicSpline(t' x' SplineBoundaryCondition.SecondDerivative' -5.0' SplineBoundaryCondition.SecondDerivative' -1.0);
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(-2.4)' NumericIs.AlmostEqualTo(-.8999999999999999993' 1e-15)' "A -2.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(-2.4)' NumericIs.AlmostEqualTo(-.8999999999999999993' 1e-15)' "A -2.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(-2.4)' NumericIs.AlmostEqualTo(-.8999999999999999993' 1e-15)' "A -2.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(-0.9)' NumericIs.AlmostEqualTo(1.7590357142857142857' 1e-15)' "A -0.9");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(-0.9)' NumericIs.AlmostEqualTo(1.7590357142857142857' 1e-15)' "A -0.9");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(-0.9)' NumericIs.AlmostEqualTo(1.7590357142857142857' 1e-15)' "A -0.9");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(-0.5)' NumericIs.AlmostEqualTo(.41517857142857142854' 1e-15)' "A -0.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(-0.5)' NumericIs.AlmostEqualTo(.41517857142857142854' 1e-15)' "A -0.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(-0.5)' NumericIs.AlmostEqualTo(.41517857142857142854' 1e-15)' "A -0.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(-0.1)' NumericIs.AlmostEqualTo(-.82010714285714285714' 1e-15)' "A -0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(-0.1)' NumericIs.AlmostEqualTo(-.82010714285714285714' 1e-15)' "A -0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(-0.1)' NumericIs.AlmostEqualTo(-.82010714285714285714' 1e-15)' "A -0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(-1.1026071428571428572' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(-1.1026071428571428572' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(-1.1026071428571428572' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(-1.0211428571428571429' 1e-15)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(-1.0211428571428571429' 1e-15)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(-1.0211428571428571429' 1e-15)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(1.2)' NumericIs.AlmostEqualTo(.31771428571428571421' 1e-15)' "A 1.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(1.2)' NumericIs.AlmostEqualTo(.31771428571428571421' 1e-15)' "A 1.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(1.2)' NumericIs.AlmostEqualTo(.31771428571428571421' 1e-15)' "A 1.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo((double) 39' 1e-14)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo((double) 39' 1e-14)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo((double) 39' 1e-14)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo((double) (-37)' 1e-14)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo((double) (-37)' 1e-14)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_CubicSpline_BoundarySecondDerivativeFixed,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo((double) (-37)' 1e-14)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: double[] t = new double[] { -2.0' -1.0' 0.0' 1.0' 2.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: double[] t = new double[] { -2.0' -1.0' 0.0' 1.0' 2.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: double[] x = new double[] { 1.0' 2.0' -1.0' 0.0' 1.0 };
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: Assert.That(method.Interpolate(-2.4)' NumericIs.AlmostEqualTo(-0.52' 1e-15)' "A -2.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: Assert.That(method.Interpolate(-2.4)' NumericIs.AlmostEqualTo(-0.52' 1e-15)' "A -2.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: Assert.That(method.Interpolate(-2.4)' NumericIs.AlmostEqualTo(-0.52' 1e-15)' "A -2.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: Assert.That(method.Interpolate(-0.9)' NumericIs.AlmostEqualTo(1.826' 1e-15)' "A -0.9");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: Assert.That(method.Interpolate(-0.9)' NumericIs.AlmostEqualTo(1.826' 1e-15)' "A -0.9");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: Assert.That(method.Interpolate(-0.9)' NumericIs.AlmostEqualTo(1.826' 1e-15)' "A -0.9");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: Assert.That(method.Interpolate(-0.5)' NumericIs.AlmostEqualTo(0.25' 1e-15)' "A -0.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: Assert.That(method.Interpolate(-0.5)' NumericIs.AlmostEqualTo(0.25' 1e-15)' "A -0.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: Assert.That(method.Interpolate(-0.5)' NumericIs.AlmostEqualTo(0.25' 1e-15)' "A -0.5");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: Assert.That(method.Interpolate(-0.1)' NumericIs.AlmostEqualTo(-1.006' 1e-15)' "A -0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: Assert.That(method.Interpolate(-0.1)' NumericIs.AlmostEqualTo(-1.006' 1e-15)' "A -0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: Assert.That(method.Interpolate(-0.1)' NumericIs.AlmostEqualTo(-1.006' 1e-15)' "A -0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(-0.9' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(-0.9' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: Assert.That(method.Interpolate(0.1)' NumericIs.AlmostEqualTo(-0.9' 1e-15)' "A 0.1");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(-0.6' 1e-15)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(-0.6' 1e-15)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: Assert.That(method.Interpolate(0.4)' NumericIs.AlmostEqualTo(-0.6' 1e-15)' "A 0.4");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: Assert.That(method.Interpolate(1.2)' NumericIs.AlmostEqualTo(0.2' 1e-15)' "A 1.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: Assert.That(method.Interpolate(1.2)' NumericIs.AlmostEqualTo(0.2' 1e-15)' "A 1.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: Assert.That(method.Interpolate(1.2)' NumericIs.AlmostEqualTo(0.2' 1e-15)' "A 1.2");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo((double) 9' 1e-14)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo((double) 9' 1e-14)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: Assert.That(method.Interpolate(10.0)' NumericIs.AlmostEqualTo((double) 9' 1e-14)' "A 10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo((double) (-151)' 1e-14)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo((double) (-151)' 1e-14)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: Assert.That(method.Interpolate(-10.0)' NumericIs.AlmostEqualTo((double) (-151)' 1e-14)' "A -10.0");
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: BuildLinearCase(2' k + 4' out linx' out liny' out linxtest' out linytest);
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: BuildLinearCase(2' k + 4' out linx' out liny' out linxtest' out linytest);
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: Assert.That(linearMethod.Interpolate(linxtest[i])' NumericIs.AlmostEqualTo(linytest[i]' 1e-12)' String.Format("Linear k={0} i={1}"' k' i));
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,TestInterpolationMethod_AkimaSpline,The following statement contains a magic number: k < 6
Magic Number,Iridium.Test.InterpolationTests,InterpolationTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\InterpolationTests\InterpolationTest.cs,BuildLinearCase,The following statement contains a magic number: const double yOffset = 2.0;
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _ma3X2 = new Matrix(new double[][] {                  new double[] { 1' -2 }'                  new double[] { -1' 4 }'                  new double[] { 5' 7 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _ma3X2 = new Matrix(new double[][] {                  new double[] { 1' -2 }'                  new double[] { -1' 4 }'                  new double[] { 5' 7 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _ma3X2 = new Matrix(new double[][] {                  new double[] { 1' -2 }'                  new double[] { -1' 4 }'                  new double[] { 5' 7 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _ma3X2 = new Matrix(new double[][] {                  new double[] { 1' -2 }'                  new double[] { -1' 4 }'                  new double[] { 5' 7 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _mb3X2 = new Matrix(new double[][] {                  new double[] { 10' 2.5 }'                  new double[] { -3' -1.5 }'                  new double[] { 19' -6 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _mb3X2 = new Matrix(new double[][] {                  new double[] { 10' 2.5 }'                  new double[] { -3' -1.5 }'                  new double[] { 19' -6 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _mb3X2 = new Matrix(new double[][] {                  new double[] { 10' 2.5 }'                  new double[] { -3' -1.5 }'                  new double[] { 19' -6 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _mb3X2 = new Matrix(new double[][] {                  new double[] { 10' 2.5 }'                  new double[] { -3' -1.5 }'                  new double[] { 19' -6 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _mb3X2 = new Matrix(new double[][] {                  new double[] { 10' 2.5 }'                  new double[] { -3' -1.5 }'                  new double[] { 19' -6 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _mb3X2 = new Matrix(new double[][] {                  new double[] { 10' 2.5 }'                  new double[] { -3' -1.5 }'                  new double[] { 19' -6 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _mc2X2 = new Matrix(new double[][] {                  new double[] { 1' 2 }'                  new double[] { 3' 4 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _mc2X2 = new Matrix(new double[][] {                  new double[] { 1' 2 }'                  new double[] { 3' 4 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _mc2X2 = new Matrix(new double[][] {                  new double[] { 1' 2 }'                  new double[] { 3' 4 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _md2X4 = new Matrix(new double[][] {                  new double[] { 1' 2' -3' 12 }'                  new double[] { 3' 3.1' 4' 2 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _md2X4 = new Matrix(new double[][] {                  new double[] { 1' 2' -3' 12 }'                  new double[] { 3' 3.1' 4' 2 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _md2X4 = new Matrix(new double[][] {                  new double[] { 1' 2' -3' 12 }'                  new double[] { 3' 3.1' 4' 2 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _md2X4 = new Matrix(new double[][] {                  new double[] { 1' 2' -3' 12 }'                  new double[] { 3' 3.1' 4' 2 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _md2X4 = new Matrix(new double[][] {                  new double[] { 1' 2' -3' 12 }'                  new double[] { 3' 3.1' 4' 2 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _md2X4 = new Matrix(new double[][] {                  new double[] { 1' 2' -3' 12 }'                  new double[] { 3' 3.1' 4' 2 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _md2X4 = new Matrix(new double[][] {                  new double[] { 1' 2' -3' 12 }'                  new double[] { 3' 3.1' 4' 2 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _ra3X2 = ComplexMatrix.Create(_ma3X2) + 2;
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _rc2X2 = ComplexMatrix.Create(_mc2X2) + 5;
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _rd2X4 = ComplexMatrix.Create(_md2X4) * 2;
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _ia3X2 = (_ra3X2 * 2) * j;
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _ib3X2 = ((_rb3X2 * 3) + 1) * j;
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _ic2X2 = (_rc2X2 + 2) * j;
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _id2X4 = (_rd2X4 - 5) * j;
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _ca3X2 = (2 * _ra3X2) - (2 * _ia3X2);
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _ca3X2 = (2 * _ra3X2) - (2 * _ia3X2);
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _cb3X2 = _rb3X2 + (3 * _ib3X2);
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _cc2X2 = _rc2X2 + 2 - (3 * _ic2X2);
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _cc2X2 = _rc2X2 + 2 - (3 * _ic2X2);
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _cd2X4 = (-2 * _rd2X4) + _id2X4 + (1 - j);
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _v2 = new Vector(new double[] { 5' -2 });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _v2 = new Vector(new double[] { 5' -2 });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _cv2 = new ComplexVector(new Complex[] { 5 + j' -2 + (3 * j) });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _cv2 = new ComplexVector(new Complex[] { 5 + j' -2 + (3 * j) });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _cv2 = new ComplexVector(new Complex[] { 5 + j' -2 + (3 * j) });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixTranspose,The following statement contains a magic number: ComplexMatrix u = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 2-(4*j)' 14-(28*j) }'                  new Complex[] { 0' 12-(24*j)' 18-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixTranspose,The following statement contains a magic number: ComplexMatrix u = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 2-(4*j)' 14-(28*j) }'                  new Complex[] { 0' 12-(24*j)' 18-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixTranspose,The following statement contains a magic number: ComplexMatrix u = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 2-(4*j)' 14-(28*j) }'                  new Complex[] { 0' 12-(24*j)' 18-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixTranspose,The following statement contains a magic number: ComplexMatrix u = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 2-(4*j)' 14-(28*j) }'                  new Complex[] { 0' 12-(24*j)' 18-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixTranspose,The following statement contains a magic number: ComplexMatrix u = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 2-(4*j)' 14-(28*j) }'                  new Complex[] { 0' 12-(24*j)' 18-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixTranspose,The following statement contains a magic number: ComplexMatrix u = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 2-(4*j)' 14-(28*j) }'                  new Complex[] { 0' 12-(24*j)' 18-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixTranspose,The following statement contains a magic number: ComplexMatrix u = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 2-(4*j)' 14-(28*j) }'                  new Complex[] { 0' 12-(24*j)' 18-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixTranspose,The following statement contains a magic number: ComplexMatrix u = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 2-(4*j)' 14-(28*j) }'                  new Complex[] { 0' 12-(24*j)' 18-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixTranspose,The following statement contains a magic number: ComplexMatrix u = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 2-(4*j)' 14-(28*j) }'                  new Complex[] { 0' 12-(24*j)' 18-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixTranspose,The following statement contains a magic number: ComplexMatrix u = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 2-(4*j)' 14-(28*j) }'                  new Complex[] { 0' 12-(24*j)' 18-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixTranspose,The following statement contains a magic number: ComplexMatrix v = new ComplexMatrix(new Complex[][] {                  new Complex[] { 8-(24*j)' 10-(30*j) }'                  new Complex[] { 9-(27*j)' 11-(33*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixTranspose,The following statement contains a magic number: ComplexMatrix v = new ComplexMatrix(new Complex[][] {                  new Complex[] { 8-(24*j)' 10-(30*j) }'                  new Complex[] { 9-(27*j)' 11-(33*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixTranspose,The following statement contains a magic number: ComplexMatrix v = new ComplexMatrix(new Complex[][] {                  new Complex[] { 8-(24*j)' 10-(30*j) }'                  new Complex[] { 9-(27*j)' 11-(33*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixTranspose,The following statement contains a magic number: ComplexMatrix v = new ComplexMatrix(new Complex[][] {                  new Complex[] { 8-(24*j)' 10-(30*j) }'                  new Complex[] { 9-(27*j)' 11-(33*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixTranspose,The following statement contains a magic number: ComplexMatrix v = new ComplexMatrix(new Complex[][] {                  new Complex[] { 8-(24*j)' 10-(30*j) }'                  new Complex[] { 9-(27*j)' 11-(33*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixTranspose,The following statement contains a magic number: ComplexMatrix v = new ComplexMatrix(new Complex[][] {                  new Complex[] { 8-(24*j)' 10-(30*j) }'                  new Complex[] { 9-(27*j)' 11-(33*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixTranspose,The following statement contains a magic number: ComplexMatrix v = new ComplexMatrix(new Complex[][] {                  new Complex[] { 8-(24*j)' 10-(30*j) }'                  new Complex[] { 9-(27*j)' 11-(33*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixTranspose,The following statement contains a magic number: ComplexMatrix v = new ComplexMatrix(new Complex[][] {                  new Complex[] { 8-(24*j)' 10-(30*j) }'                  new Complex[] { 9-(27*j)' 11-(33*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixHermitianTranspose,The following statement contains a magic number: ComplexMatrix u = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6+(12*j)' 2+(4*j)' 14+(28*j) }'                  new Complex[] { 0' 12+(24*j)' 18+(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixHermitianTranspose,The following statement contains a magic number: ComplexMatrix u = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6+(12*j)' 2+(4*j)' 14+(28*j) }'                  new Complex[] { 0' 12+(24*j)' 18+(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixHermitianTranspose,The following statement contains a magic number: ComplexMatrix u = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6+(12*j)' 2+(4*j)' 14+(28*j) }'                  new Complex[] { 0' 12+(24*j)' 18+(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixHermitianTranspose,The following statement contains a magic number: ComplexMatrix u = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6+(12*j)' 2+(4*j)' 14+(28*j) }'                  new Complex[] { 0' 12+(24*j)' 18+(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixHermitianTranspose,The following statement contains a magic number: ComplexMatrix u = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6+(12*j)' 2+(4*j)' 14+(28*j) }'                  new Complex[] { 0' 12+(24*j)' 18+(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixHermitianTranspose,The following statement contains a magic number: ComplexMatrix u = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6+(12*j)' 2+(4*j)' 14+(28*j) }'                  new Complex[] { 0' 12+(24*j)' 18+(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixHermitianTranspose,The following statement contains a magic number: ComplexMatrix u = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6+(12*j)' 2+(4*j)' 14+(28*j) }'                  new Complex[] { 0' 12+(24*j)' 18+(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixHermitianTranspose,The following statement contains a magic number: ComplexMatrix u = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6+(12*j)' 2+(4*j)' 14+(28*j) }'                  new Complex[] { 0' 12+(24*j)' 18+(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixHermitianTranspose,The following statement contains a magic number: ComplexMatrix u = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6+(12*j)' 2+(4*j)' 14+(28*j) }'                  new Complex[] { 0' 12+(24*j)' 18+(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixHermitianTranspose,The following statement contains a magic number: ComplexMatrix u = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6+(12*j)' 2+(4*j)' 14+(28*j) }'                  new Complex[] { 0' 12+(24*j)' 18+(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixHermitianTranspose,The following statement contains a magic number: ComplexMatrix v = new ComplexMatrix(new Complex[][] {                  new Complex[] { 8+(24*j)' 10+(30*j) }'                  new Complex[] { 9+(27*j)' 11+(33*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixHermitianTranspose,The following statement contains a magic number: ComplexMatrix v = new ComplexMatrix(new Complex[][] {                  new Complex[] { 8+(24*j)' 10+(30*j) }'                  new Complex[] { 9+(27*j)' 11+(33*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixHermitianTranspose,The following statement contains a magic number: ComplexMatrix v = new ComplexMatrix(new Complex[][] {                  new Complex[] { 8+(24*j)' 10+(30*j) }'                  new Complex[] { 9+(27*j)' 11+(33*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixHermitianTranspose,The following statement contains a magic number: ComplexMatrix v = new ComplexMatrix(new Complex[][] {                  new Complex[] { 8+(24*j)' 10+(30*j) }'                  new Complex[] { 9+(27*j)' 11+(33*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixHermitianTranspose,The following statement contains a magic number: ComplexMatrix v = new ComplexMatrix(new Complex[][] {                  new Complex[] { 8+(24*j)' 10+(30*j) }'                  new Complex[] { 9+(27*j)' 11+(33*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixHermitianTranspose,The following statement contains a magic number: ComplexMatrix v = new ComplexMatrix(new Complex[][] {                  new Complex[] { 8+(24*j)' 10+(30*j) }'                  new Complex[] { 9+(27*j)' 11+(33*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixHermitianTranspose,The following statement contains a magic number: ComplexMatrix v = new ComplexMatrix(new Complex[][] {                  new Complex[] { 8+(24*j)' 10+(30*j) }'                  new Complex[] { 9+(27*j)' 11+(33*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixHermitianTranspose,The following statement contains a magic number: ComplexMatrix v = new ComplexMatrix(new Complex[][] {                  new Complex[] { 8+(24*j)' 10+(30*j) }'                  new Complex[] { 9+(27*j)' 11+(33*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixConjugate,The following statement contains a magic number: ComplexMatrix u = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6+(12*j)' 0 }'                  new Complex[] { 2+(4*j)' 12+(24*j) }'                  new Complex[] { 14+(28*j)' 18+(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixConjugate,The following statement contains a magic number: ComplexMatrix u = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6+(12*j)' 0 }'                  new Complex[] { 2+(4*j)' 12+(24*j) }'                  new Complex[] { 14+(28*j)' 18+(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixConjugate,The following statement contains a magic number: ComplexMatrix u = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6+(12*j)' 0 }'                  new Complex[] { 2+(4*j)' 12+(24*j) }'                  new Complex[] { 14+(28*j)' 18+(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixConjugate,The following statement contains a magic number: ComplexMatrix u = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6+(12*j)' 0 }'                  new Complex[] { 2+(4*j)' 12+(24*j) }'                  new Complex[] { 14+(28*j)' 18+(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixConjugate,The following statement contains a magic number: ComplexMatrix u = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6+(12*j)' 0 }'                  new Complex[] { 2+(4*j)' 12+(24*j) }'                  new Complex[] { 14+(28*j)' 18+(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixConjugate,The following statement contains a magic number: ComplexMatrix u = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6+(12*j)' 0 }'                  new Complex[] { 2+(4*j)' 12+(24*j) }'                  new Complex[] { 14+(28*j)' 18+(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixConjugate,The following statement contains a magic number: ComplexMatrix u = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6+(12*j)' 0 }'                  new Complex[] { 2+(4*j)' 12+(24*j) }'                  new Complex[] { 14+(28*j)' 18+(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixConjugate,The following statement contains a magic number: ComplexMatrix u = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6+(12*j)' 0 }'                  new Complex[] { 2+(4*j)' 12+(24*j) }'                  new Complex[] { 14+(28*j)' 18+(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixConjugate,The following statement contains a magic number: ComplexMatrix u = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6+(12*j)' 0 }'                  new Complex[] { 2+(4*j)' 12+(24*j) }'                  new Complex[] { 14+(28*j)' 18+(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixConjugate,The following statement contains a magic number: ComplexMatrix u = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6+(12*j)' 0 }'                  new Complex[] { 2+(4*j)' 12+(24*j) }'                  new Complex[] { 14+(28*j)' 18+(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { 15+(72*j)' 1.5+(16.5*j) }'                  new Complex[] { -2-(37*j)' 9.5-(43.5*j) }'                  new Complex[] { 32+(137*j)' 11-(96*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { 15+(72*j)' 1.5+(16.5*j) }'                  new Complex[] { -2-(37*j)' 9.5-(43.5*j) }'                  new Complex[] { 32+(137*j)' 11-(96*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { 15+(72*j)' 1.5+(16.5*j) }'                  new Complex[] { -2-(37*j)' 9.5-(43.5*j) }'                  new Complex[] { 32+(137*j)' 11-(96*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { 15+(72*j)' 1.5+(16.5*j) }'                  new Complex[] { -2-(37*j)' 9.5-(43.5*j) }'                  new Complex[] { 32+(137*j)' 11-(96*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { 15+(72*j)' 1.5+(16.5*j) }'                  new Complex[] { -2-(37*j)' 9.5-(43.5*j) }'                  new Complex[] { 32+(137*j)' 11-(96*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { 15+(72*j)' 1.5+(16.5*j) }'                  new Complex[] { -2-(37*j)' 9.5-(43.5*j) }'                  new Complex[] { 32+(137*j)' 11-(96*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { 15+(72*j)' 1.5+(16.5*j) }'                  new Complex[] { -2-(37*j)' 9.5-(43.5*j) }'                  new Complex[] { 32+(137*j)' 11-(96*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { 15+(72*j)' 1.5+(16.5*j) }'                  new Complex[] { -2-(37*j)' 9.5-(43.5*j) }'                  new Complex[] { 32+(137*j)' 11-(96*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { 15+(72*j)' 1.5+(16.5*j) }'                  new Complex[] { -2-(37*j)' 9.5-(43.5*j) }'                  new Complex[] { 32+(137*j)' 11-(96*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { 15+(72*j)' 1.5+(16.5*j) }'                  new Complex[] { -2-(37*j)' 9.5-(43.5*j) }'                  new Complex[] { 32+(137*j)' 11-(96*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { 15+(72*j)' 1.5+(16.5*j) }'                  new Complex[] { -2-(37*j)' 9.5-(43.5*j) }'                  new Complex[] { 32+(137*j)' 11-(96*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { 15+(72*j)' 1.5+(16.5*j) }'                  new Complex[] { -2-(37*j)' 9.5-(43.5*j) }'                  new Complex[] { 32+(137*j)' 11-(96*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -3-(96*j)' -1.5-(16.5*j) }'                  new Complex[] { 6+(29*j)' 14.5-(4.5*j) }'                  new Complex[] { -4-(193*j)' 25+(24*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -3-(96*j)' -1.5-(16.5*j) }'                  new Complex[] { 6+(29*j)' 14.5-(4.5*j) }'                  new Complex[] { -4-(193*j)' 25+(24*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -3-(96*j)' -1.5-(16.5*j) }'                  new Complex[] { 6+(29*j)' 14.5-(4.5*j) }'                  new Complex[] { -4-(193*j)' 25+(24*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -3-(96*j)' -1.5-(16.5*j) }'                  new Complex[] { 6+(29*j)' 14.5-(4.5*j) }'                  new Complex[] { -4-(193*j)' 25+(24*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -3-(96*j)' -1.5-(16.5*j) }'                  new Complex[] { 6+(29*j)' 14.5-(4.5*j) }'                  new Complex[] { -4-(193*j)' 25+(24*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -3-(96*j)' -1.5-(16.5*j) }'                  new Complex[] { 6+(29*j)' 14.5-(4.5*j) }'                  new Complex[] { -4-(193*j)' 25+(24*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -3-(96*j)' -1.5-(16.5*j) }'                  new Complex[] { 6+(29*j)' 14.5-(4.5*j) }'                  new Complex[] { -4-(193*j)' 25+(24*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -3-(96*j)' -1.5-(16.5*j) }'                  new Complex[] { 6+(29*j)' 14.5-(4.5*j) }'                  new Complex[] { -4-(193*j)' 25+(24*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -3-(96*j)' -1.5-(16.5*j) }'                  new Complex[] { 6+(29*j)' 14.5-(4.5*j) }'                  new Complex[] { -4-(193*j)' 25+(24*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -3-(96*j)' -1.5-(16.5*j) }'                  new Complex[] { 6+(29*j)' 14.5-(4.5*j) }'                  new Complex[] { -4-(193*j)' 25+(24*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -3-(96*j)' -1.5-(16.5*j) }'                  new Complex[] { 6+(29*j)' 14.5-(4.5*j) }'                  new Complex[] { -4-(193*j)' 25+(24*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -3-(96*j)' -1.5-(16.5*j) }'                  new Complex[] { 6+(29*j)' 14.5-(4.5*j) }'                  new Complex[] { -4-(193*j)' 25+(24*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 16-(12*j)' 2.5 }'                  new Complex[] { -1-(4*j)' 10.5-(24*j) }'                  new Complex[] { 33-(28*j)' 12-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 16-(12*j)' 2.5 }'                  new Complex[] { -1-(4*j)' 10.5-(24*j) }'                  new Complex[] { 33-(28*j)' 12-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 16-(12*j)' 2.5 }'                  new Complex[] { -1-(4*j)' 10.5-(24*j) }'                  new Complex[] { 33-(28*j)' 12-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 16-(12*j)' 2.5 }'                  new Complex[] { -1-(4*j)' 10.5-(24*j) }'                  new Complex[] { 33-(28*j)' 12-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 16-(12*j)' 2.5 }'                  new Complex[] { -1-(4*j)' 10.5-(24*j) }'                  new Complex[] { 33-(28*j)' 12-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 16-(12*j)' 2.5 }'                  new Complex[] { -1-(4*j)' 10.5-(24*j) }'                  new Complex[] { 33-(28*j)' 12-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 16-(12*j)' 2.5 }'                  new Complex[] { -1-(4*j)' 10.5-(24*j) }'                  new Complex[] { 33-(28*j)' 12-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 16-(12*j)' 2.5 }'                  new Complex[] { -1-(4*j)' 10.5-(24*j) }'                  new Complex[] { 33-(28*j)' 12-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 16-(12*j)' 2.5 }'                  new Complex[] { -1-(4*j)' 10.5-(24*j) }'                  new Complex[] { 33-(28*j)' 12-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 16-(12*j)' 2.5 }'                  new Complex[] { -1-(4*j)' 10.5-(24*j) }'                  new Complex[] { 33-(28*j)' 12-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { -4-(12*j)' -2.5 }'                  new Complex[] { 5-(4*j)' 13.5-(24*j) }'                  new Complex[] { -5-(28*j)' 24-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { -4-(12*j)' -2.5 }'                  new Complex[] { 5-(4*j)' 13.5-(24*j) }'                  new Complex[] { -5-(28*j)' 24-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { -4-(12*j)' -2.5 }'                  new Complex[] { 5-(4*j)' 13.5-(24*j) }'                  new Complex[] { -5-(28*j)' 24-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { -4-(12*j)' -2.5 }'                  new Complex[] { 5-(4*j)' 13.5-(24*j) }'                  new Complex[] { -5-(28*j)' 24-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { -4-(12*j)' -2.5 }'                  new Complex[] { 5-(4*j)' 13.5-(24*j) }'                  new Complex[] { -5-(28*j)' 24-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { -4-(12*j)' -2.5 }'                  new Complex[] { 5-(4*j)' 13.5-(24*j) }'                  new Complex[] { -5-(28*j)' 24-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { -4-(12*j)' -2.5 }'                  new Complex[] { 5-(4*j)' 13.5-(24*j) }'                  new Complex[] { -5-(28*j)' 24-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { -4-(12*j)' -2.5 }'                  new Complex[] { 5-(4*j)' 13.5-(24*j) }'                  new Complex[] { -5-(28*j)' 24-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { -4-(12*j)' -2.5 }'                  new Complex[] { 5-(4*j)' 13.5-(24*j) }'                  new Complex[] { -5-(28*j)' 24-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { -4-(12*j)' -2.5 }'                  new Complex[] { 5-(4*j)' 13.5-(24*j) }'                  new Complex[] { -5-(28*j)' 24-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { -4-(12*j)' -2.5 }'                  new Complex[] { 5-(4*j)' 13.5-(24*j) }'                  new Complex[] { -5-(28*j)' 24-(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmC = new ComplexMatrix(new Complex[][] {                  new Complex[] { 7-(11*j)' 1+j }'                  new Complex[] { 3-(3*j)' 13-(23*j) }'                  new Complex[] { 15-(27*j)' 19-(35*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmC = new ComplexMatrix(new Complex[][] {                  new Complex[] { 7-(11*j)' 1+j }'                  new Complex[] { 3-(3*j)' 13-(23*j) }'                  new Complex[] { 15-(27*j)' 19-(35*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmC = new ComplexMatrix(new Complex[][] {                  new Complex[] { 7-(11*j)' 1+j }'                  new Complex[] { 3-(3*j)' 13-(23*j) }'                  new Complex[] { 15-(27*j)' 19-(35*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmC = new ComplexMatrix(new Complex[][] {                  new Complex[] { 7-(11*j)' 1+j }'                  new Complex[] { 3-(3*j)' 13-(23*j) }'                  new Complex[] { 15-(27*j)' 19-(35*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmC = new ComplexMatrix(new Complex[][] {                  new Complex[] { 7-(11*j)' 1+j }'                  new Complex[] { 3-(3*j)' 13-(23*j) }'                  new Complex[] { 15-(27*j)' 19-(35*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmC = new ComplexMatrix(new Complex[][] {                  new Complex[] { 7-(11*j)' 1+j }'                  new Complex[] { 3-(3*j)' 13-(23*j) }'                  new Complex[] { 15-(27*j)' 19-(35*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmC = new ComplexMatrix(new Complex[][] {                  new Complex[] { 7-(11*j)' 1+j }'                  new Complex[] { 3-(3*j)' 13-(23*j) }'                  new Complex[] { 15-(27*j)' 19-(35*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmC = new ComplexMatrix(new Complex[][] {                  new Complex[] { 7-(11*j)' 1+j }'                  new Complex[] { 3-(3*j)' 13-(23*j) }'                  new Complex[] { 15-(27*j)' 19-(35*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmC = new ComplexMatrix(new Complex[][] {                  new Complex[] { 7-(11*j)' 1+j }'                  new Complex[] { 3-(3*j)' 13-(23*j) }'                  new Complex[] { 15-(27*j)' 19-(35*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix sumCmC = new ComplexMatrix(new Complex[][] {                  new Complex[] { 7-(11*j)' 1+j }'                  new Complex[] { 3-(3*j)' 13-(23*j) }'                  new Complex[] { 15-(27*j)' 19-(35*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmC = new ComplexMatrix(new Complex[][] {                  new Complex[] { 5-(13*j)' -1-j }'                  new Complex[] { 1-(5*j)' 11-(25*j) }'                  new Complex[] { 13-(29*j)' 17-(37*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmC = new ComplexMatrix(new Complex[][] {                  new Complex[] { 5-(13*j)' -1-j }'                  new Complex[] { 1-(5*j)' 11-(25*j) }'                  new Complex[] { 13-(29*j)' 17-(37*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmC = new ComplexMatrix(new Complex[][] {                  new Complex[] { 5-(13*j)' -1-j }'                  new Complex[] { 1-(5*j)' 11-(25*j) }'                  new Complex[] { 13-(29*j)' 17-(37*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmC = new ComplexMatrix(new Complex[][] {                  new Complex[] { 5-(13*j)' -1-j }'                  new Complex[] { 1-(5*j)' 11-(25*j) }'                  new Complex[] { 13-(29*j)' 17-(37*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmC = new ComplexMatrix(new Complex[][] {                  new Complex[] { 5-(13*j)' -1-j }'                  new Complex[] { 1-(5*j)' 11-(25*j) }'                  new Complex[] { 13-(29*j)' 17-(37*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmC = new ComplexMatrix(new Complex[][] {                  new Complex[] { 5-(13*j)' -1-j }'                  new Complex[] { 1-(5*j)' 11-(25*j) }'                  new Complex[] { 13-(29*j)' 17-(37*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmC = new ComplexMatrix(new Complex[][] {                  new Complex[] { 5-(13*j)' -1-j }'                  new Complex[] { 1-(5*j)' 11-(25*j) }'                  new Complex[] { 13-(29*j)' 17-(37*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmC = new ComplexMatrix(new Complex[][] {                  new Complex[] { 5-(13*j)' -1-j }'                  new Complex[] { 1-(5*j)' 11-(25*j) }'                  new Complex[] { 13-(29*j)' 17-(37*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix diffCmC = new ComplexMatrix(new Complex[][] {                  new Complex[] { 5-(13*j)' -1-j }'                  new Complex[] { 1-(5*j)' 11-(25*j) }'                  new Complex[] { 13-(29*j)' 17-(37*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix negateCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -6+(12*j)' 0 }'                  new Complex[] { -2+(4*j)' -12+(24*j) }'                  new Complex[] { -14+(28*j)' -18+(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix negateCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -6+(12*j)' 0 }'                  new Complex[] { -2+(4*j)' -12+(24*j) }'                  new Complex[] { -14+(28*j)' -18+(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix negateCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -6+(12*j)' 0 }'                  new Complex[] { -2+(4*j)' -12+(24*j) }'                  new Complex[] { -14+(28*j)' -18+(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix negateCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -6+(12*j)' 0 }'                  new Complex[] { -2+(4*j)' -12+(24*j) }'                  new Complex[] { -14+(28*j)' -18+(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix negateCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -6+(12*j)' 0 }'                  new Complex[] { -2+(4*j)' -12+(24*j) }'                  new Complex[] { -14+(28*j)' -18+(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix negateCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -6+(12*j)' 0 }'                  new Complex[] { -2+(4*j)' -12+(24*j) }'                  new Complex[] { -14+(28*j)' -18+(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix negateCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -6+(12*j)' 0 }'                  new Complex[] { -2+(4*j)' -12+(24*j) }'                  new Complex[] { -14+(28*j)' -18+(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix negateCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -6+(12*j)' 0 }'                  new Complex[] { -2+(4*j)' -12+(24*j) }'                  new Complex[] { -14+(28*j)' -18+(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix negateCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -6+(12*j)' 0 }'                  new Complex[] { -2+(4*j)' -12+(24*j) }'                  new Complex[] { -14+(28*j)' -18+(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixAddition,The following statement contains a magic number: ComplexMatrix negateCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -6+(12*j)' 0 }'                  new Complex[] { -2+(4*j)' -12+(24*j) }'                  new Complex[] { -14+(28*j)' -18+(36*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -66+(12*j)' -66+(72*j)' -66-(228*j)' -66+(672*j) }'                  new Complex[] { -154+(268*j)' -154+(300*j)' -154+(308*j)' -154+(368*j) }'                  new Complex[] { -352+(424*j)' -352+(582*j)' -352+(44*j)' -352+(1784*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -66+(12*j)' -66+(72*j)' -66-(228*j)' -66+(672*j) }'                  new Complex[] { -154+(268*j)' -154+(300*j)' -154+(308*j)' -154+(368*j) }'                  new Complex[] { -352+(424*j)' -352+(582*j)' -352+(44*j)' -352+(1784*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -66+(12*j)' -66+(72*j)' -66-(228*j)' -66+(672*j) }'                  new Complex[] { -154+(268*j)' -154+(300*j)' -154+(308*j)' -154+(368*j) }'                  new Complex[] { -352+(424*j)' -352+(582*j)' -352+(44*j)' -352+(1784*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -66+(12*j)' -66+(72*j)' -66-(228*j)' -66+(672*j) }'                  new Complex[] { -154+(268*j)' -154+(300*j)' -154+(308*j)' -154+(368*j) }'                  new Complex[] { -352+(424*j)' -352+(582*j)' -352+(44*j)' -352+(1784*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -66+(12*j)' -66+(72*j)' -66-(228*j)' -66+(672*j) }'                  new Complex[] { -154+(268*j)' -154+(300*j)' -154+(308*j)' -154+(368*j) }'                  new Complex[] { -352+(424*j)' -352+(582*j)' -352+(44*j)' -352+(1784*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -66+(12*j)' -66+(72*j)' -66-(228*j)' -66+(672*j) }'                  new Complex[] { -154+(268*j)' -154+(300*j)' -154+(308*j)' -154+(368*j) }'                  new Complex[] { -352+(424*j)' -352+(582*j)' -352+(44*j)' -352+(1784*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -66+(12*j)' -66+(72*j)' -66-(228*j)' -66+(672*j) }'                  new Complex[] { -154+(268*j)' -154+(300*j)' -154+(308*j)' -154+(368*j) }'                  new Complex[] { -352+(424*j)' -352+(582*j)' -352+(44*j)' -352+(1784*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -66+(12*j)' -66+(72*j)' -66-(228*j)' -66+(672*j) }'                  new Complex[] { -154+(268*j)' -154+(300*j)' -154+(308*j)' -154+(368*j) }'                  new Complex[] { -352+(424*j)' -352+(582*j)' -352+(44*j)' -352+(1784*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -66+(12*j)' -66+(72*j)' -66-(228*j)' -66+(672*j) }'                  new Complex[] { -154+(268*j)' -154+(300*j)' -154+(308*j)' -154+(368*j) }'                  new Complex[] { -352+(424*j)' -352+(582*j)' -352+(44*j)' -352+(1784*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -66+(12*j)' -66+(72*j)' -66-(228*j)' -66+(672*j) }'                  new Complex[] { -154+(268*j)' -154+(300*j)' -154+(308*j)' -154+(368*j) }'                  new Complex[] { -352+(424*j)' -352+(582*j)' -352+(44*j)' -352+(1784*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -66+(12*j)' -66+(72*j)' -66-(228*j)' -66+(672*j) }'                  new Complex[] { -154+(268*j)' -154+(300*j)' -154+(308*j)' -154+(368*j) }'                  new Complex[] { -352+(424*j)' -352+(582*j)' -352+(44*j)' -352+(1784*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -66+(12*j)' -66+(72*j)' -66-(228*j)' -66+(672*j) }'                  new Complex[] { -154+(268*j)' -154+(300*j)' -154+(308*j)' -154+(368*j) }'                  new Complex[] { -352+(424*j)' -352+(582*j)' -352+(44*j)' -352+(1784*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -66+(12*j)' -66+(72*j)' -66-(228*j)' -66+(672*j) }'                  new Complex[] { -154+(268*j)' -154+(300*j)' -154+(308*j)' -154+(368*j) }'                  new Complex[] { -352+(424*j)' -352+(582*j)' -352+(44*j)' -352+(1784*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -66+(12*j)' -66+(72*j)' -66-(228*j)' -66+(672*j) }'                  new Complex[] { -154+(268*j)' -154+(300*j)' -154+(308*j)' -154+(368*j) }'                  new Complex[] { -352+(424*j)' -352+(582*j)' -352+(44*j)' -352+(1784*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -66+(12*j)' -66+(72*j)' -66-(228*j)' -66+(672*j) }'                  new Complex[] { -154+(268*j)' -154+(300*j)' -154+(308*j)' -154+(368*j) }'                  new Complex[] { -352+(424*j)' -352+(582*j)' -352+(44*j)' -352+(1784*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -66+(12*j)' -66+(72*j)' -66-(228*j)' -66+(672*j) }'                  new Complex[] { -154+(268*j)' -154+(300*j)' -154+(308*j)' -154+(368*j) }'                  new Complex[] { -352+(424*j)' -352+(582*j)' -352+(44*j)' -352+(1784*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -66+(12*j)' -66+(72*j)' -66-(228*j)' -66+(672*j) }'                  new Complex[] { -154+(268*j)' -154+(300*j)' -154+(308*j)' -154+(368*j) }'                  new Complex[] { -352+(424*j)' -352+(582*j)' -352+(44*j)' -352+(1784*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -66+(12*j)' -66+(72*j)' -66-(228*j)' -66+(672*j) }'                  new Complex[] { -154+(268*j)' -154+(300*j)' -154+(308*j)' -154+(368*j) }'                  new Complex[] { -352+(424*j)' -352+(582*j)' -352+(44*j)' -352+(1784*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -66+(12*j)' -66+(72*j)' -66-(228*j)' -66+(672*j) }'                  new Complex[] { -154+(268*j)' -154+(300*j)' -154+(308*j)' -154+(368*j) }'                  new Complex[] { -352+(424*j)' -352+(582*j)' -352+(44*j)' -352+(1784*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -66+(12*j)' -66+(72*j)' -66-(228*j)' -66+(672*j) }'                  new Complex[] { -154+(268*j)' -154+(300*j)' -154+(308*j)' -154+(368*j) }'                  new Complex[] { -352+(424*j)' -352+(582*j)' -352+(44*j)' -352+(1784*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -66+(12*j)' -66+(72*j)' -66-(228*j)' -66+(672*j) }'                  new Complex[] { -154+(268*j)' -154+(300*j)' -154+(308*j)' -154+(368*j) }'                  new Complex[] { -352+(424*j)' -352+(582*j)' -352+(44*j)' -352+(1784*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -66+(12*j)' -66+(72*j)' -66-(228*j)' -66+(672*j) }'                  new Complex[] { -154+(268*j)' -154+(300*j)' -154+(308*j)' -154+(368*j) }'                  new Complex[] { -352+(424*j)' -352+(582*j)' -352+(44*j)' -352+(1784*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -66+(12*j)' -66+(72*j)' -66-(228*j)' -66+(672*j) }'                  new Complex[] { -154+(268*j)' -154+(300*j)' -154+(308*j)' -154+(368*j) }'                  new Complex[] { -352+(424*j)' -352+(582*j)' -352+(44*j)' -352+(1784*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCm = new ComplexMatrix(new Complex[][] {                  new Complex[] { -66+(12*j)' -66+(72*j)' -66-(228*j)' -66+(672*j) }'                  new Complex[] { -154+(268*j)' -154+(300*j)' -154+(308*j)' -154+(368*j) }'                  new Complex[] { -352+(424*j)' -352+(582*j)' -352+(44*j)' -352+(1784*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 12-(24*j)' -18+(36*j)' 72-(144*j) }'                  new Complex[] { 38-(76*j)' 41.2-(82.4*j)' 42-(84*j)' 48-(96*j) }'                  new Complex[] { 68-(136*j)' 83.8-(167.6*j)' 30-(60*j)' 204-(408*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 12-(24*j)' -18+(36*j)' 72-(144*j) }'                  new Complex[] { 38-(76*j)' 41.2-(82.4*j)' 42-(84*j)' 48-(96*j) }'                  new Complex[] { 68-(136*j)' 83.8-(167.6*j)' 30-(60*j)' 204-(408*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 12-(24*j)' -18+(36*j)' 72-(144*j) }'                  new Complex[] { 38-(76*j)' 41.2-(82.4*j)' 42-(84*j)' 48-(96*j) }'                  new Complex[] { 68-(136*j)' 83.8-(167.6*j)' 30-(60*j)' 204-(408*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 12-(24*j)' -18+(36*j)' 72-(144*j) }'                  new Complex[] { 38-(76*j)' 41.2-(82.4*j)' 42-(84*j)' 48-(96*j) }'                  new Complex[] { 68-(136*j)' 83.8-(167.6*j)' 30-(60*j)' 204-(408*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 12-(24*j)' -18+(36*j)' 72-(144*j) }'                  new Complex[] { 38-(76*j)' 41.2-(82.4*j)' 42-(84*j)' 48-(96*j) }'                  new Complex[] { 68-(136*j)' 83.8-(167.6*j)' 30-(60*j)' 204-(408*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 12-(24*j)' -18+(36*j)' 72-(144*j) }'                  new Complex[] { 38-(76*j)' 41.2-(82.4*j)' 42-(84*j)' 48-(96*j) }'                  new Complex[] { 68-(136*j)' 83.8-(167.6*j)' 30-(60*j)' 204-(408*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 12-(24*j)' -18+(36*j)' 72-(144*j) }'                  new Complex[] { 38-(76*j)' 41.2-(82.4*j)' 42-(84*j)' 48-(96*j) }'                  new Complex[] { 68-(136*j)' 83.8-(167.6*j)' 30-(60*j)' 204-(408*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 12-(24*j)' -18+(36*j)' 72-(144*j) }'                  new Complex[] { 38-(76*j)' 41.2-(82.4*j)' 42-(84*j)' 48-(96*j) }'                  new Complex[] { 68-(136*j)' 83.8-(167.6*j)' 30-(60*j)' 204-(408*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 12-(24*j)' -18+(36*j)' 72-(144*j) }'                  new Complex[] { 38-(76*j)' 41.2-(82.4*j)' 42-(84*j)' 48-(96*j) }'                  new Complex[] { 68-(136*j)' 83.8-(167.6*j)' 30-(60*j)' 204-(408*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 12-(24*j)' -18+(36*j)' 72-(144*j) }'                  new Complex[] { 38-(76*j)' 41.2-(82.4*j)' 42-(84*j)' 48-(96*j) }'                  new Complex[] { 68-(136*j)' 83.8-(167.6*j)' 30-(60*j)' 204-(408*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 12-(24*j)' -18+(36*j)' 72-(144*j) }'                  new Complex[] { 38-(76*j)' 41.2-(82.4*j)' 42-(84*j)' 48-(96*j) }'                  new Complex[] { 68-(136*j)' 83.8-(167.6*j)' 30-(60*j)' 204-(408*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 12-(24*j)' -18+(36*j)' 72-(144*j) }'                  new Complex[] { 38-(76*j)' 41.2-(82.4*j)' 42-(84*j)' 48-(96*j) }'                  new Complex[] { 68-(136*j)' 83.8-(167.6*j)' 30-(60*j)' 204-(408*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 12-(24*j)' -18+(36*j)' 72-(144*j) }'                  new Complex[] { 38-(76*j)' 41.2-(82.4*j)' 42-(84*j)' 48-(96*j) }'                  new Complex[] { 68-(136*j)' 83.8-(167.6*j)' 30-(60*j)' 204-(408*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 12-(24*j)' -18+(36*j)' 72-(144*j) }'                  new Complex[] { 38-(76*j)' 41.2-(82.4*j)' 42-(84*j)' 48-(96*j) }'                  new Complex[] { 68-(136*j)' 83.8-(167.6*j)' 30-(60*j)' 204-(408*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 12-(24*j)' -18+(36*j)' 72-(144*j) }'                  new Complex[] { 38-(76*j)' 41.2-(82.4*j)' 42-(84*j)' 48-(96*j) }'                  new Complex[] { 68-(136*j)' 83.8-(167.6*j)' 30-(60*j)' 204-(408*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 12-(24*j)' -18+(36*j)' 72-(144*j) }'                  new Complex[] { 38-(76*j)' 41.2-(82.4*j)' 42-(84*j)' 48-(96*j) }'                  new Complex[] { 68-(136*j)' 83.8-(167.6*j)' 30-(60*j)' 204-(408*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 12-(24*j)' -18+(36*j)' 72-(144*j) }'                  new Complex[] { 38-(76*j)' 41.2-(82.4*j)' 42-(84*j)' 48-(96*j) }'                  new Complex[] { 68-(136*j)' 83.8-(167.6*j)' 30-(60*j)' 204-(408*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 12-(24*j)' -18+(36*j)' 72-(144*j) }'                  new Complex[] { 38-(76*j)' 41.2-(82.4*j)' 42-(84*j)' 48-(96*j) }'                  new Complex[] { 68-(136*j)' 83.8-(167.6*j)' 30-(60*j)' 204-(408*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 12-(24*j)' -18+(36*j)' 72-(144*j) }'                  new Complex[] { 38-(76*j)' 41.2-(82.4*j)' 42-(84*j)' 48-(96*j) }'                  new Complex[] { 68-(136*j)' 83.8-(167.6*j)' 30-(60*j)' 204-(408*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 12-(24*j)' -18+(36*j)' 72-(144*j) }'                  new Complex[] { 38-(76*j)' 41.2-(82.4*j)' 42-(84*j)' 48-(96*j) }'                  new Complex[] { 68-(136*j)' 83.8-(167.6*j)' 30-(60*j)' 204-(408*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 12-(24*j)' -18+(36*j)' 72-(144*j) }'                  new Complex[] { 38-(76*j)' 41.2-(82.4*j)' 42-(84*j)' 48-(96*j) }'                  new Complex[] { 68-(136*j)' 83.8-(167.6*j)' 30-(60*j)' 204-(408*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 12-(24*j)' -18+(36*j)' 72-(144*j) }'                  new Complex[] { 38-(76*j)' 41.2-(82.4*j)' 42-(84*j)' 48-(96*j) }'                  new Complex[] { 68-(136*j)' 83.8-(167.6*j)' 30-(60*j)' 204-(408*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 12-(24*j)' -18+(36*j)' 72-(144*j) }'                  new Complex[] { 38-(76*j)' 41.2-(82.4*j)' 42-(84*j)' 48-(96*j) }'                  new Complex[] { 68-(136*j)' 83.8-(167.6*j)' 30-(60*j)' 204-(408*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmM = new ComplexMatrix(new Complex[][] {                  new Complex[] { 6-(12*j)' 12-(24*j)' -18+(36*j)' 72-(144*j) }'                  new Complex[] { 38-(76*j)' 41.2-(82.4*j)' 42-(84*j)' 48-(96*j) }'                  new Complex[] { 68-(136*j)' 83.8-(167.6*j)' 30-(60*j)' 204-(408*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmC = new ComplexMatrix(new Complex[][] {                  new Complex[] { 18-(6*j)' 0 }'                  new Complex[] { 6-(2*j)' 36-(12*j) }'                  new Complex[] { 42-(14*j)' 54-(18*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmC = new ComplexMatrix(new Complex[][] {                  new Complex[] { 18-(6*j)' 0 }'                  new Complex[] { 6-(2*j)' 36-(12*j) }'                  new Complex[] { 42-(14*j)' 54-(18*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmC = new ComplexMatrix(new Complex[][] {                  new Complex[] { 18-(6*j)' 0 }'                  new Complex[] { 6-(2*j)' 36-(12*j) }'                  new Complex[] { 42-(14*j)' 54-(18*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmC = new ComplexMatrix(new Complex[][] {                  new Complex[] { 18-(6*j)' 0 }'                  new Complex[] { 6-(2*j)' 36-(12*j) }'                  new Complex[] { 42-(14*j)' 54-(18*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmC = new ComplexMatrix(new Complex[][] {                  new Complex[] { 18-(6*j)' 0 }'                  new Complex[] { 6-(2*j)' 36-(12*j) }'                  new Complex[] { 42-(14*j)' 54-(18*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmC = new ComplexMatrix(new Complex[][] {                  new Complex[] { 18-(6*j)' 0 }'                  new Complex[] { 6-(2*j)' 36-(12*j) }'                  new Complex[] { 42-(14*j)' 54-(18*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmC = new ComplexMatrix(new Complex[][] {                  new Complex[] { 18-(6*j)' 0 }'                  new Complex[] { 6-(2*j)' 36-(12*j) }'                  new Complex[] { 42-(14*j)' 54-(18*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmC = new ComplexMatrix(new Complex[][] {                  new Complex[] { 18-(6*j)' 0 }'                  new Complex[] { 6-(2*j)' 36-(12*j) }'                  new Complex[] { 42-(14*j)' 54-(18*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmC = new ComplexMatrix(new Complex[][] {                  new Complex[] { 18-(6*j)' 0 }'                  new Complex[] { 6-(2*j)' 36-(12*j) }'                  new Complex[] { 42-(14*j)' 54-(18*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmC = new ComplexMatrix(new Complex[][] {                  new Complex[] { 18-(6*j)' 0 }'                  new Complex[] { 6-(2*j)' 36-(12*j) }'                  new Complex[] { 42-(14*j)' 54-(18*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCmSquare = new ComplexMatrix(new Complex[][] {                  new Complex[] { -1232-(924*j)' -1368-(1026*j) }'                  new Complex[] { -1520-(1140*j)' -1688-(1266*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCmSquare = new ComplexMatrix(new Complex[][] {                  new Complex[] { -1232-(924*j)' -1368-(1026*j) }'                  new Complex[] { -1520-(1140*j)' -1688-(1266*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCmSquare = new ComplexMatrix(new Complex[][] {                  new Complex[] { -1232-(924*j)' -1368-(1026*j) }'                  new Complex[] { -1520-(1140*j)' -1688-(1266*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCmSquare = new ComplexMatrix(new Complex[][] {                  new Complex[] { -1232-(924*j)' -1368-(1026*j) }'                  new Complex[] { -1520-(1140*j)' -1688-(1266*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCmSquare = new ComplexMatrix(new Complex[][] {                  new Complex[] { -1232-(924*j)' -1368-(1026*j) }'                  new Complex[] { -1520-(1140*j)' -1688-(1266*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCmSquare = new ComplexMatrix(new Complex[][] {                  new Complex[] { -1232-(924*j)' -1368-(1026*j) }'                  new Complex[] { -1520-(1140*j)' -1688-(1266*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCmSquare = new ComplexMatrix(new Complex[][] {                  new Complex[] { -1232-(924*j)' -1368-(1026*j) }'                  new Complex[] { -1520-(1140*j)' -1688-(1266*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCmSquare = new ComplexMatrix(new Complex[][] {                  new Complex[] { -1232-(924*j)' -1368-(1026*j) }'                  new Complex[] { -1520-(1140*j)' -1688-(1266*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmMSquare = new ComplexMatrix(new Complex[][] {                  new Complex[] { 35-(105*j)' 52-(156*j) }'                  new Complex[] { 43-(129*j)' 64-(192*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmMSquare = new ComplexMatrix(new Complex[][] {                  new Complex[] { 35-(105*j)' 52-(156*j) }'                  new Complex[] { 43-(129*j)' 64-(192*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmMSquare = new ComplexMatrix(new Complex[][] {                  new Complex[] { 35-(105*j)' 52-(156*j) }'                  new Complex[] { 43-(129*j)' 64-(192*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmMSquare = new ComplexMatrix(new Complex[][] {                  new Complex[] { 35-(105*j)' 52-(156*j) }'                  new Complex[] { 43-(129*j)' 64-(192*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmMSquare = new ComplexMatrix(new Complex[][] {                  new Complex[] { 35-(105*j)' 52-(156*j) }'                  new Complex[] { 43-(129*j)' 64-(192*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmMSquare = new ComplexMatrix(new Complex[][] {                  new Complex[] { 35-(105*j)' 52-(156*j) }'                  new Complex[] { 43-(129*j)' 64-(192*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmMSquare = new ComplexMatrix(new Complex[][] {                  new Complex[] { 35-(105*j)' 52-(156*j) }'                  new Complex[] { 43-(129*j)' 64-(192*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmMSquare = new ComplexMatrix(new Complex[][] {                  new Complex[] { 35-(105*j)' 52-(156*j) }'                  new Complex[] { 43-(129*j)' 64-(192*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCSquare = new ComplexMatrix(new Complex[][] {                  new Complex[] { 32-(16*j)' 36-(18*j) }'                  new Complex[] { 40-(20*j)' 44-(22*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCSquare = new ComplexMatrix(new Complex[][] {                  new Complex[] { 32-(16*j)' 36-(18*j) }'                  new Complex[] { 40-(20*j)' 44-(22*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCSquare = new ComplexMatrix(new Complex[][] {                  new Complex[] { 32-(16*j)' 36-(18*j) }'                  new Complex[] { 40-(20*j)' 44-(22*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCSquare = new ComplexMatrix(new Complex[][] {                  new Complex[] { 32-(16*j)' 36-(18*j) }'                  new Complex[] { 40-(20*j)' 44-(22*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCSquare = new ComplexMatrix(new Complex[][] {                  new Complex[] { 32-(16*j)' 36-(18*j) }'                  new Complex[] { 40-(20*j)' 44-(22*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCSquare = new ComplexMatrix(new Complex[][] {                  new Complex[] { 32-(16*j)' 36-(18*j) }'                  new Complex[] { 40-(20*j)' 44-(22*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCSquare = new ComplexMatrix(new Complex[][] {                  new Complex[] { 32-(16*j)' 36-(18*j) }'                  new Complex[] { 40-(20*j)' 44-(22*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCSquare = new ComplexMatrix(new Complex[][] {                  new Complex[] { 32-(16*j)' 36-(18*j) }'                  new Complex[] { 40-(20*j)' 44-(22*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexVector prodCmCvc = new ComplexVector(new Complex[] { 42 - (54 * j)' 62 + (66 * j)' 170 });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexVector prodCmCvc = new ComplexVector(new Complex[] { 42 - (54 * j)' 62 + (66 * j)' 170 });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexVector prodCmCvc = new ComplexVector(new Complex[] { 42 - (54 * j)' 62 + (66 * j)' 170 });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexVector prodCmCvc = new ComplexVector(new Complex[] { 42 - (54 * j)' 62 + (66 * j)' 170 });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexVector prodCmCvc = new ComplexVector(new Complex[] { 42 - (54 * j)' 62 + (66 * j)' 170 });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexVector prodCmVc = new ComplexVector(new Complex[] { 30 - (60 * j)' -14 + (28 * j)' 34 - (68 * j) });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexVector prodCmVc = new ComplexVector(new Complex[] { 30 - (60 * j)' -14 + (28 * j)' 34 - (68 * j) });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexVector prodCmVc = new ComplexVector(new Complex[] { 30 - (60 * j)' -14 + (28 * j)' 34 - (68 * j) });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexVector prodCmVc = new ComplexVector(new Complex[] { 30 - (60 * j)' -14 + (28 * j)' 34 - (68 * j) });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexVector prodCmVc = new ComplexVector(new Complex[] { 30 - (60 * j)' -14 + (28 * j)' 34 - (68 * j) });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexVector prodCmVc = new ComplexVector(new Complex[] { 30 - (60 * j)' -14 + (28 * j)' 34 - (68 * j) });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCvdl = new ComplexMatrix(new Complex[][] {                  new Complex[] { 64-(112*j)' 72-(126*j) }'                  new Complex[] { 70+(90*j)' 77+(99*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCvdl = new ComplexMatrix(new Complex[][] {                  new Complex[] { 64-(112*j)' 72-(126*j) }'                  new Complex[] { 70+(90*j)' 77+(99*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCvdl = new ComplexMatrix(new Complex[][] {                  new Complex[] { 64-(112*j)' 72-(126*j) }'                  new Complex[] { 70+(90*j)' 77+(99*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCvdl = new ComplexMatrix(new Complex[][] {                  new Complex[] { 64-(112*j)' 72-(126*j) }'                  new Complex[] { 70+(90*j)' 77+(99*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCvdl = new ComplexMatrix(new Complex[][] {                  new Complex[] { 64-(112*j)' 72-(126*j) }'                  new Complex[] { 70+(90*j)' 77+(99*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCvdl = new ComplexMatrix(new Complex[][] {                  new Complex[] { 64-(112*j)' 72-(126*j) }'                  new Complex[] { 70+(90*j)' 77+(99*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCvdl = new ComplexMatrix(new Complex[][] {                  new Complex[] { 64-(112*j)' 72-(126*j) }'                  new Complex[] { 70+(90*j)' 77+(99*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCvdl = new ComplexMatrix(new Complex[][] {                  new Complex[] { 64-(112*j)' 72-(126*j) }'                  new Complex[] { 70+(90*j)' 77+(99*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmVdl = new ComplexMatrix(new Complex[][] {                  new Complex[] { 40-(120*j)' 45-(135*j) }'                  new Complex[] { -20+(60*j)' -22+(66*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmVdl = new ComplexMatrix(new Complex[][] {                  new Complex[] { 40-(120*j)' 45-(135*j) }'                  new Complex[] { -20+(60*j)' -22+(66*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmVdl = new ComplexMatrix(new Complex[][] {                  new Complex[] { 40-(120*j)' 45-(135*j) }'                  new Complex[] { -20+(60*j)' -22+(66*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmVdl = new ComplexMatrix(new Complex[][] {                  new Complex[] { 40-(120*j)' 45-(135*j) }'                  new Complex[] { -20+(60*j)' -22+(66*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmVdl = new ComplexMatrix(new Complex[][] {                  new Complex[] { 40-(120*j)' 45-(135*j) }'                  new Complex[] { -20+(60*j)' -22+(66*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmVdl = new ComplexMatrix(new Complex[][] {                  new Complex[] { 40-(120*j)' 45-(135*j) }'                  new Complex[] { -20+(60*j)' -22+(66*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmVdl = new ComplexMatrix(new Complex[][] {                  new Complex[] { 40-(120*j)' 45-(135*j) }'                  new Complex[] { -20+(60*j)' -22+(66*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmVdl = new ComplexMatrix(new Complex[][] {                  new Complex[] { 40-(120*j)' 45-(135*j) }'                  new Complex[] { -20+(60*j)' -22+(66*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCvdr = new ComplexMatrix(new Complex[][] {                  new Complex[] { 64-(112*j)' 63+(81*j) }'                  new Complex[] { 80-(140*j)' 77+(99*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCvdr = new ComplexMatrix(new Complex[][] {                  new Complex[] { 64-(112*j)' 63+(81*j) }'                  new Complex[] { 80-(140*j)' 77+(99*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCvdr = new ComplexMatrix(new Complex[][] {                  new Complex[] { 64-(112*j)' 63+(81*j) }'                  new Complex[] { 80-(140*j)' 77+(99*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCvdr = new ComplexMatrix(new Complex[][] {                  new Complex[] { 64-(112*j)' 63+(81*j) }'                  new Complex[] { 80-(140*j)' 77+(99*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCvdr = new ComplexMatrix(new Complex[][] {                  new Complex[] { 64-(112*j)' 63+(81*j) }'                  new Complex[] { 80-(140*j)' 77+(99*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCvdr = new ComplexMatrix(new Complex[][] {                  new Complex[] { 64-(112*j)' 63+(81*j) }'                  new Complex[] { 80-(140*j)' 77+(99*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCvdr = new ComplexMatrix(new Complex[][] {                  new Complex[] { 64-(112*j)' 63+(81*j) }'                  new Complex[] { 80-(140*j)' 77+(99*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmCvdr = new ComplexMatrix(new Complex[][] {                  new Complex[] { 64-(112*j)' 63+(81*j) }'                  new Complex[] { 80-(140*j)' 77+(99*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmVdr = new ComplexMatrix(new Complex[][] {                  new Complex[] { 40-(120*j)' -18+(54*j) }'                  new Complex[] { 50-(150*j)' -22+(66*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmVdr = new ComplexMatrix(new Complex[][] {                  new Complex[] { 40-(120*j)' -18+(54*j) }'                  new Complex[] { 50-(150*j)' -22+(66*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmVdr = new ComplexMatrix(new Complex[][] {                  new Complex[] { 40-(120*j)' -18+(54*j) }'                  new Complex[] { 50-(150*j)' -22+(66*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmVdr = new ComplexMatrix(new Complex[][] {                  new Complex[] { 40-(120*j)' -18+(54*j) }'                  new Complex[] { 50-(150*j)' -22+(66*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmVdr = new ComplexMatrix(new Complex[][] {                  new Complex[] { 40-(120*j)' -18+(54*j) }'                  new Complex[] { 50-(150*j)' -22+(66*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmVdr = new ComplexMatrix(new Complex[][] {                  new Complex[] { 40-(120*j)' -18+(54*j) }'                  new Complex[] { 50-(150*j)' -22+(66*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmVdr = new ComplexMatrix(new Complex[][] {                  new Complex[] { 40-(120*j)' -18+(54*j) }'                  new Complex[] { 50-(150*j)' -22+(66*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,ComplexMatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\ComplexMatrixArithmeticsTest.cs,ComplexMatrixMultiplication,The following statement contains a magic number: ComplexMatrix prodCmVdr = new ComplexMatrix(new Complex[][] {                  new Complex[] { 40-(120*j)' -18+(54*j) }'                  new Complex[] { 50-(150*j)' -22+(66*j) }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalRotation,The following statement contains a magic number: Vector v = Vector.Random(2' gaussian);
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalRotation,The following statement contains a magic number: Assert.That(Matrix.Transpose(rotation) * rotation' NumericIs.AlmostEqualTo(Matrix.Identity(2' 2))' "orthogonal rotation matrix");
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalRotation,The following statement contains a magic number: Assert.That(Matrix.Transpose(rotation) * rotation' NumericIs.AlmostEqualTo(Matrix.Identity(2' 2))' "orthogonal rotation matrix");
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalRotation,The following statement contains a magic number: Assert.That(Math.Abs(res[0])' NumericIs.AlmostEqualTo(v.Norm()' 1e-12)' "res(1)");
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalRotation,The following statement contains a magic number: Assert.That(res[1]' NumericIs.AlmostEqualTo((double) 0' 1e-12)' "res(2)");
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalRotation,The following statement contains a magic number: i < 100
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalRotationComplex,The following statement contains a magic number: Assert.That(rotation.HermitianTranspose() * rotation' NumericIs.AlmostEqualTo(ComplexMatrix.Identity(2' 2))' "unitary rotation matrix");
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalRotationComplex,The following statement contains a magic number: Assert.That(rotation.HermitianTranspose() * rotation' NumericIs.AlmostEqualTo(ComplexMatrix.Identity(2' 2))' "unitary rotation matrix");
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalRotationComplex,The following statement contains a magic number: Assert.That(res[0].Modulus' NumericIs.AlmostEqualTo(v.Norm()' 1e-12)' "res(1)");
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalRotationComplex,The following statement contains a magic number: Assert.That(res[1]' NumericIs.AlmostEqualTo((Complex) 0' 1e-12)' "res(2)");
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalRotationComplex,The following statement contains a magic number: i < 100
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalReflection,The following statement contains a magic number: Vector v = Vector.Random(4' gaussian);
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalReflection,The following statement contains a magic number: Assert.That(Matrix.Transpose(reflection) * reflection' NumericIs.AlmostEqualTo(Matrix.Identity(4' 4))' "orthogonal reflection matrix");
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalReflection,The following statement contains a magic number: Assert.That(Matrix.Transpose(reflection) * reflection' NumericIs.AlmostEqualTo(Matrix.Identity(4' 4))' "orthogonal reflection matrix");
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalReflection,The following statement contains a magic number: Assert.That(Math.Abs(res[0])' NumericIs.AlmostEqualTo(v.Norm()' 1e-12)' "res(1)");
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalReflection,The following statement contains a magic number: Assert.That(res[1]' NumericIs.AlmostEqualTo((double) 0' 1e-12)' "res(2)");
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalReflection,The following statement contains a magic number: Assert.That(res[2]' NumericIs.AlmostEqualTo((double) 0' 1e-12)' "res(3)");
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalReflection,The following statement contains a magic number: Assert.That(res[2]' NumericIs.AlmostEqualTo((double) 0' 1e-12)' "res(3)");
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalReflection,The following statement contains a magic number: Assert.That(res[3]' NumericIs.AlmostEqualTo((double) 0' 1e-12)' "res(4)");
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalReflection,The following statement contains a magic number: Assert.That(res[3]' NumericIs.AlmostEqualTo((double) 0' 1e-12)' "res(4)");
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalReflection,The following statement contains a magic number: i < 100
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalReflectionComplex,The following statement contains a magic number: Assert.That(reflection.HermitianTranspose() * reflection' NumericIs.AlmostEqualTo(ComplexMatrix.Identity(4' 4))' "orthogonal reflection matrix");
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalReflectionComplex,The following statement contains a magic number: Assert.That(reflection.HermitianTranspose() * reflection' NumericIs.AlmostEqualTo(ComplexMatrix.Identity(4' 4))' "orthogonal reflection matrix");
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalReflectionComplex,The following statement contains a magic number: Assert.That(reflection[2' 2].IsReal' "c3 real");
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalReflectionComplex,The following statement contains a magic number: Assert.That(reflection[2' 2].IsReal' "c3 real");
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalReflectionComplex,The following statement contains a magic number: Assert.That(reflection[3' 3].IsReal' "c4 real");
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalReflectionComplex,The following statement contains a magic number: Assert.That(reflection[3' 3].IsReal' "c4 real");
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalReflectionComplex,The following statement contains a magic number: Assert.That(res[0].Modulus' NumericIs.AlmostEqualTo(v.Norm()' 1e-12)' "res(1)");
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalReflectionComplex,The following statement contains a magic number: Assert.That(res[1]' NumericIs.AlmostEqualTo((Complex) 0' 1e-12)' "res(2)");
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalReflectionComplex,The following statement contains a magic number: Assert.That(res[2]' NumericIs.AlmostEqualTo((Complex) 0' 1e-12)' "res(3)");
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalReflectionComplex,The following statement contains a magic number: Assert.That(res[2]' NumericIs.AlmostEqualTo((Complex) 0' 1e-12)' "res(3)");
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalReflectionComplex,The following statement contains a magic number: Assert.That(res[3]' NumericIs.AlmostEqualTo((Complex) 0' 1e-12)' "res(4)");
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalReflectionComplex,The following statement contains a magic number: Assert.That(res[3]' NumericIs.AlmostEqualTo((Complex) 0' 1e-12)' "res(4)");
Magic Number,Iridium.Test.LinearAlgebraTests,LinearAlgebraAlgorithmsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\LinearAlgebraAlgorithmsTest.cs,TestOrthogonalReflectionComplex,The following statement contains a magic number: i < 100
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _ma3X2 = new Matrix(new double[][] {                  new double[] { 1' -2 }'                  new double[] { -1' 4 }'                  new double[] { 5' 7 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _ma3X2 = new Matrix(new double[][] {                  new double[] { 1' -2 }'                  new double[] { -1' 4 }'                  new double[] { 5' 7 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _ma3X2 = new Matrix(new double[][] {                  new double[] { 1' -2 }'                  new double[] { -1' 4 }'                  new double[] { 5' 7 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _ma3X2 = new Matrix(new double[][] {                  new double[] { 1' -2 }'                  new double[] { -1' 4 }'                  new double[] { 5' 7 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _mb3X2 = new Matrix(new double[][] {                  new double[] { 10' 2.5 }'                  new double[] { -3' -1.5 }'                  new double[] { 19' -6 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _mb3X2 = new Matrix(new double[][] {                  new double[] { 10' 2.5 }'                  new double[] { -3' -1.5 }'                  new double[] { 19' -6 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _mb3X2 = new Matrix(new double[][] {                  new double[] { 10' 2.5 }'                  new double[] { -3' -1.5 }'                  new double[] { 19' -6 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _mb3X2 = new Matrix(new double[][] {                  new double[] { 10' 2.5 }'                  new double[] { -3' -1.5 }'                  new double[] { 19' -6 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _mb3X2 = new Matrix(new double[][] {                  new double[] { 10' 2.5 }'                  new double[] { -3' -1.5 }'                  new double[] { 19' -6 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _mb3X2 = new Matrix(new double[][] {                  new double[] { 10' 2.5 }'                  new double[] { -3' -1.5 }'                  new double[] { 19' -6 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _md2X4 = new Matrix(new double[][] {                  new double[] { 1' 2' -3' 12 }'                  new double[] { 3' 3.1' 4' 2 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _md2X4 = new Matrix(new double[][] {                  new double[] { 1' 2' -3' 12 }'                  new double[] { 3' 3.1' 4' 2 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _md2X4 = new Matrix(new double[][] {                  new double[] { 1' 2' -3' 12 }'                  new double[] { 3' 3.1' 4' 2 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _md2X4 = new Matrix(new double[][] {                  new double[] { 1' 2' -3' 12 }'                  new double[] { 3' 3.1' 4' 2 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _md2X4 = new Matrix(new double[][] {                  new double[] { 1' 2' -3' 12 }'                  new double[] { 3' 3.1' 4' 2 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _md2X4 = new Matrix(new double[][] {                  new double[] { 1' 2' -3' 12 }'                  new double[] { 3' 3.1' 4' 2 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,Setup,The following statement contains a magic number: _md2X4 = new Matrix(new double[][] {                  new double[] { 1' 2' -3' 12 }'                  new double[] { 3' 3.1' 4' 2 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreate,The following statement contains a magic number: double[][] a = { new double[] { 1' 2 }' new double[] { 2' 3 } };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreate,The following statement contains a magic number: double[][] a = { new double[] { 1' 2 }' new double[] { 2' 3 } };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreate,The following statement contains a magic number: double[][] a = { new double[] { 1' 2 }' new double[] { 2' 3 } };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreate,The following statement contains a magic number: double[][] b = { new double[] { 1.0' 2.0 }' new double[] { 2.0' 3.0 } };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreate,The following statement contains a magic number: double[][] b = { new double[] { 1.0' 2.0 }' new double[] { 2.0' 3.0 } };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreate,The following statement contains a magic number: double[][] b = { new double[] { 1.0' 2.0 }' new double[] { 2.0' 3.0 } };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateIdentity,The following statement contains a magic number: Matrix u = Matrix.Identity(3' 4);
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateIdentity,The following statement contains a magic number: Matrix u = Matrix.Identity(3' 4);
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateIdentity,The following statement contains a magic number: Assert.That(Matrix.Identity(4' 3)' Is.EqualTo(Matrix.Transpose(m)));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateIdentity,The following statement contains a magic number: Assert.That(Matrix.Identity(4' 3)' Is.EqualTo(Matrix.Transpose(m)));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateIdentity,The following statement contains a magic number: u[0' 1] = 0.1;
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateIdentity,The following statement contains a magic number: Assert.That(u' Is.Not.EqualTo(Matrix.Identity(3' 4)));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateIdentity,The following statement contains a magic number: Assert.That(u' Is.Not.EqualTo(Matrix.Identity(3' 4)));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateDirect,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateDirect,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateDirect,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateDirect,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateDirect,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateDirect,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateDirect,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateDirect,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateDirect,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateDirect,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateDirect,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateDirect,The following statement contains a magic number: Assert.That(a[2' 0]' Is.EqualTo(avals[2][0]));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateDirect,The following statement contains a magic number: Assert.That(a[2' 0]' Is.EqualTo(avals[2][0]));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateDirect,The following statement contains a magic number: Assert.That(a[0' 3]' Is.EqualTo(avals[0][3]));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateDirect,The following statement contains a magic number: Assert.That(a[0' 3]' Is.EqualTo(avals[0][3]));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateDirect,The following statement contains a magic number: Assert.That(a[2' 3]' Is.EqualTo(avals[2][3]));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateDirect,The following statement contains a magic number: Assert.That(a[2' 3]' Is.EqualTo(avals[2][3]));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateDirect,The following statement contains a magic number: Assert.That(a[2' 3]' Is.EqualTo(avals[2][3]));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateDirect,The following statement contains a magic number: Assert.That(a[2' 3]' Is.EqualTo(avals[2][3]));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateDirect,The following statement contains a magic number: avals[0][0] = 1.5;
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateFromJaggedArray,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateFromJaggedArray,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateFromJaggedArray,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateFromJaggedArray,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateFromJaggedArray,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateFromJaggedArray,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateFromJaggedArray,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateFromJaggedArray,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateFromJaggedArray,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateFromJaggedArray,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateFromJaggedArray,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateFromJaggedArray,The following statement contains a magic number: Assert.That(a[2' 0]' Is.EqualTo(avals[2][0]));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateFromJaggedArray,The following statement contains a magic number: Assert.That(a[2' 0]' Is.EqualTo(avals[2][0]));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateFromJaggedArray,The following statement contains a magic number: Assert.That(a[0' 3]' Is.EqualTo(avals[0][3]));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateFromJaggedArray,The following statement contains a magic number: Assert.That(a[0' 3]' Is.EqualTo(avals[0][3]));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateFromJaggedArray,The following statement contains a magic number: Assert.That(a[2' 3]' Is.EqualTo(avals[2][3]));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateFromJaggedArray,The following statement contains a magic number: Assert.That(a[2' 3]' Is.EqualTo(avals[2][3]));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateFromJaggedArray,The following statement contains a magic number: Assert.That(a[2' 3]' Is.EqualTo(avals[2][3]));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateFromJaggedArray,The following statement contains a magic number: Assert.That(a[2' 3]' Is.EqualTo(avals[2][3]));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateFromJaggedArray,The following statement contains a magic number: avals[0][0] = 1.5;
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateColumnwise,The following statement contains a magic number: const int Stride = 3;
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateColumnwise,The following statement contains a magic number: const int InvalidStride = 5;
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateColumnwise,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateColumnwise,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateColumnwise,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateColumnwise,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateColumnwise,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateColumnwise,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateColumnwise,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateColumnwise,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateColumnwise,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateColumnwise,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateColumnwise,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateColumnwise,The following statement contains a magic number: Assert.That(a[2' 0]' Is.EqualTo(columnwise[2]));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateColumnwise,The following statement contains a magic number: Assert.That(a[2' 0]' Is.EqualTo(columnwise[2]));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateColumnwise,The following statement contains a magic number: Assert.That(a[0' 1]' Is.EqualTo(columnwise[3]));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateColumnwise,The following statement contains a magic number: Assert.That(a[0' 2]' Is.EqualTo(columnwise[6]));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateColumnwise,The following statement contains a magic number: Assert.That(a[0' 2]' Is.EqualTo(columnwise[6]));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateColumnwise,The following statement contains a magic number: Assert.That(a[0' 3]' Is.EqualTo(columnwise[9]));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateColumnwise,The following statement contains a magic number: Assert.That(a[0' 3]' Is.EqualTo(columnwise[9]));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateColumnwise,The following statement contains a magic number: Assert.That(a[1' 3]' Is.EqualTo(columnwise[10]));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateColumnwise,The following statement contains a magic number: Assert.That(a[1' 3]' Is.EqualTo(columnwise[10]));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateColumnwise,The following statement contains a magic number: Assert.That(a[2' 3]' Is.EqualTo(columnwise[11]));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateColumnwise,The following statement contains a magic number: Assert.That(a[2' 3]' Is.EqualTo(columnwise[11]));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateColumnwise,The following statement contains a magic number: Assert.That(a[2' 3]' Is.EqualTo(columnwise[11]));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCreateColumnwise,The following statement contains a magic number: columnwise[0] = 1.5;
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCastArray,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCastArray,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCastArray,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCastArray,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCastArray,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCastArray,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCastArray,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCastArray,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCastArray,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCastArray,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCastArray,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCastArray,The following statement contains a magic number: Assert.That(a.RowCount' Is.EqualTo(3)' "getRowDimension");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixCastArray,The following statement contains a magic number: Assert.That(a.ColumnCount' Is.EqualTo(4)' "getColumnDimension");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixTranspose1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixTranspose1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixTranspose1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixTranspose1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixTranspose1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixTranspose1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixTranspose1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixTranspose1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixTranspose1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixTranspose1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixTranspose1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixTranspose1,The following statement contains a magic number: double[][] tvals = {                  new double[] { 1.0' 2.0' 3.0 }'                  new double[] { 4.0' 5.0' 6.0 }'                  new double[] { 7.0' 8.0' 9.0 }'                  new double[] { 10.0' 11.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixTranspose1,The following statement contains a magic number: double[][] tvals = {                  new double[] { 1.0' 2.0' 3.0 }'                  new double[] { 4.0' 5.0' 6.0 }'                  new double[] { 7.0' 8.0' 9.0 }'                  new double[] { 10.0' 11.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixTranspose1,The following statement contains a magic number: double[][] tvals = {                  new double[] { 1.0' 2.0' 3.0 }'                  new double[] { 4.0' 5.0' 6.0 }'                  new double[] { 7.0' 8.0' 9.0 }'                  new double[] { 10.0' 11.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixTranspose1,The following statement contains a magic number: double[][] tvals = {                  new double[] { 1.0' 2.0' 3.0 }'                  new double[] { 4.0' 5.0' 6.0 }'                  new double[] { 7.0' 8.0' 9.0 }'                  new double[] { 10.0' 11.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixTranspose1,The following statement contains a magic number: double[][] tvals = {                  new double[] { 1.0' 2.0' 3.0 }'                  new double[] { 4.0' 5.0' 6.0 }'                  new double[] { 7.0' 8.0' 9.0 }'                  new double[] { 10.0' 11.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixTranspose1,The following statement contains a magic number: double[][] tvals = {                  new double[] { 1.0' 2.0' 3.0 }'                  new double[] { 4.0' 5.0' 6.0 }'                  new double[] { 7.0' 8.0' 9.0 }'                  new double[] { 10.0' 11.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixTranspose1,The following statement contains a magic number: double[][] tvals = {                  new double[] { 1.0' 2.0' 3.0 }'                  new double[] { 4.0' 5.0' 6.0 }'                  new double[] { 7.0' 8.0' 9.0 }'                  new double[] { 10.0' 11.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixTranspose1,The following statement contains a magic number: double[][] tvals = {                  new double[] { 1.0' 2.0' 3.0 }'                  new double[] { 4.0' 5.0' 6.0 }'                  new double[] { 7.0' 8.0' 9.0 }'                  new double[] { 10.0' 11.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixTranspose1,The following statement contains a magic number: double[][] tvals = {                  new double[] { 1.0' 2.0' 3.0 }'                  new double[] { 4.0' 5.0' 6.0 }'                  new double[] { 7.0' 8.0' 9.0 }'                  new double[] { 10.0' 11.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixTranspose1,The following statement contains a magic number: double[][] tvals = {                  new double[] { 1.0' 2.0' 3.0 }'                  new double[] { 4.0' 5.0' 6.0 }'                  new double[] { 7.0' 8.0' 9.0 }'                  new double[] { 10.0' 11.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixTranspose1,The following statement contains a magic number: double[][] tvals = {                  new double[] { 1.0' 2.0' 3.0 }'                  new double[] { 4.0' 5.0' 6.0 }'                  new double[] { 7.0' 8.0' 9.0 }'                  new double[] { 10.0' 11.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixTranspose1,The following statement contains a magic number: Matrix a = new Matrix(columnwise' 3);
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixTranspose2,The following statement contains a magic number: Matrix u = new Matrix(new double[][] {                  new double[] { 1' -1' 5 }'                  new double[] { -2' 4' 7 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixTranspose2,The following statement contains a magic number: Matrix u = new Matrix(new double[][] {                  new double[] { 1' -1' 5 }'                  new double[] { -2' 4' 7 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixTranspose2,The following statement contains a magic number: Matrix u = new Matrix(new double[][] {                  new double[] { 1' -1' 5 }'                  new double[] { -2' 4' 7 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixTranspose2,The following statement contains a magic number: Matrix u = new Matrix(new double[][] {                  new double[] { 1' -1' 5 }'                  new double[] { -2' 4' 7 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixAddition,The following statement contains a magic number: Matrix sum = new Matrix(new double[][] {                  new double[] { 11' 0.5 }'                  new double[] { -4' 2.5 }'                  new double[] { 24' 1 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixAddition,The following statement contains a magic number: Matrix sum = new Matrix(new double[][] {                  new double[] { 11' 0.5 }'                  new double[] { -4' 2.5 }'                  new double[] { 24' 1 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixAddition,The following statement contains a magic number: Matrix sum = new Matrix(new double[][] {                  new double[] { 11' 0.5 }'                  new double[] { -4' 2.5 }'                  new double[] { 24' 1 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixAddition,The following statement contains a magic number: Matrix sum = new Matrix(new double[][] {                  new double[] { 11' 0.5 }'                  new double[] { -4' 2.5 }'                  new double[] { 24' 1 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixAddition,The following statement contains a magic number: Matrix sum = new Matrix(new double[][] {                  new double[] { 11' 0.5 }'                  new double[] { -4' 2.5 }'                  new double[] { 24' 1 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixAddition,The following statement contains a magic number: Matrix diff = new Matrix(new double[][] {                  new double[] { -9' -4.5 }'                  new double[] { 2' 5.5 }'                  new double[] { -14' 13 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixAddition,The following statement contains a magic number: Matrix diff = new Matrix(new double[][] {                  new double[] { -9' -4.5 }'                  new double[] { 2' 5.5 }'                  new double[] { -14' 13 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixAddition,The following statement contains a magic number: Matrix diff = new Matrix(new double[][] {                  new double[] { -9' -4.5 }'                  new double[] { 2' 5.5 }'                  new double[] { -14' 13 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixAddition,The following statement contains a magic number: Matrix diff = new Matrix(new double[][] {                  new double[] { -9' -4.5 }'                  new double[] { 2' 5.5 }'                  new double[] { -14' 13 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixAddition,The following statement contains a magic number: Matrix diff = new Matrix(new double[][] {                  new double[] { -9' -4.5 }'                  new double[] { 2' 5.5 }'                  new double[] { -14' 13 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixAddition,The following statement contains a magic number: Matrix diff = new Matrix(new double[][] {                  new double[] { -9' -4.5 }'                  new double[] { 2' 5.5 }'                  new double[] { -14' 13 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixAddition,The following statement contains a magic number: Matrix negative = new Matrix(new double[][] {                  new double[] { -1' 2 }'                  new double[] { 1' -4 }'                  new double[] { -5' -7 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixAddition,The following statement contains a magic number: Matrix negative = new Matrix(new double[][] {                  new double[] { -1' 2 }'                  new double[] { 1' -4 }'                  new double[] { -5' -7 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixAddition,The following statement contains a magic number: Matrix negative = new Matrix(new double[][] {                  new double[] { -1' 2 }'                  new double[] { 1' -4 }'                  new double[] { -5' -7 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixAddition,The following statement contains a magic number: Matrix negative = new Matrix(new double[][] {                  new double[] { -1' 2 }'                  new double[] { 1' -4 }'                  new double[] { -5' -7 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplication,The following statement contains a magic number: Matrix product = new Matrix(new double[][] {                  new double[] { -5' -4.2' -11' 8 }'                  new double[] { 11' 10.4' 19' -4 }'                  new double[] { 26' 31.7' 13' 74 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplication,The following statement contains a magic number: Matrix product = new Matrix(new double[][] {                  new double[] { -5' -4.2' -11' 8 }'                  new double[] { 11' 10.4' 19' -4 }'                  new double[] { 26' 31.7' 13' 74 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplication,The following statement contains a magic number: Matrix product = new Matrix(new double[][] {                  new double[] { -5' -4.2' -11' 8 }'                  new double[] { 11' 10.4' 19' -4 }'                  new double[] { 26' 31.7' 13' 74 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplication,The following statement contains a magic number: Matrix product = new Matrix(new double[][] {                  new double[] { -5' -4.2' -11' 8 }'                  new double[] { 11' 10.4' 19' -4 }'                  new double[] { 26' 31.7' 13' 74 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplication,The following statement contains a magic number: Matrix product = new Matrix(new double[][] {                  new double[] { -5' -4.2' -11' 8 }'                  new double[] { 11' 10.4' 19' -4 }'                  new double[] { 26' 31.7' 13' 74 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplication,The following statement contains a magic number: Matrix product = new Matrix(new double[][] {                  new double[] { -5' -4.2' -11' 8 }'                  new double[] { 11' 10.4' 19' -4 }'                  new double[] { 26' 31.7' 13' 74 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplication,The following statement contains a magic number: Matrix product = new Matrix(new double[][] {                  new double[] { -5' -4.2' -11' 8 }'                  new double[] { 11' 10.4' 19' -4 }'                  new double[] { 26' 31.7' 13' 74 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplication,The following statement contains a magic number: Matrix product = new Matrix(new double[][] {                  new double[] { -5' -4.2' -11' 8 }'                  new double[] { 11' 10.4' 19' -4 }'                  new double[] { 26' 31.7' 13' 74 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplication,The following statement contains a magic number: Matrix product = new Matrix(new double[][] {                  new double[] { -5' -4.2' -11' 8 }'                  new double[] { 11' 10.4' 19' -4 }'                  new double[] { 26' 31.7' 13' 74 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplication,The following statement contains a magic number: Matrix product = new Matrix(new double[][] {                  new double[] { -5' -4.2' -11' 8 }'                  new double[] { 11' 10.4' 19' -4 }'                  new double[] { 26' 31.7' 13' 74 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplication,The following statement contains a magic number: Matrix product = new Matrix(new double[][] {                  new double[] { -5' -4.2' -11' 8 }'                  new double[] { 11' 10.4' 19' -4 }'                  new double[] { 26' 31.7' 13' 74 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplication,The following statement contains a magic number: Matrix product = new Matrix(new double[][] {                  new double[] { -5' -4.2' -11' 8 }'                  new double[] { 11' 10.4' 19' -4 }'                  new double[] { 26' 31.7' 13' 74 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplication,The following statement contains a magic number: Matrix scaled = new Matrix(new double[][] {                  new double[] { 2' -4 }'                  new double[] { -2' 8 }'                  new double[] { 10' 14 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplication,The following statement contains a magic number: Matrix scaled = new Matrix(new double[][] {                  new double[] { 2' -4 }'                  new double[] { -2' 8 }'                  new double[] { 10' 14 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplication,The following statement contains a magic number: Matrix scaled = new Matrix(new double[][] {                  new double[] { 2' -4 }'                  new double[] { -2' 8 }'                  new double[] { 10' 14 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplication,The following statement contains a magic number: Matrix scaled = new Matrix(new double[][] {                  new double[] { 2' -4 }'                  new double[] { -2' 8 }'                  new double[] { 10' 14 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplication,The following statement contains a magic number: Matrix scaled = new Matrix(new double[][] {                  new double[] { 2' -4 }'                  new double[] { -2' 8 }'                  new double[] { 10' 14 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplication,The following statement contains a magic number: Matrix scaled = new Matrix(new double[][] {                  new double[] { 2' -4 }'                  new double[] { -2' 8 }'                  new double[] { 10' 14 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplication,The following statement contains a magic number: Assert.That(_ma3X2 * 2' NumericIs.AlmostEqualTo(scaled)' "prod s 1");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplication,The following statement contains a magic number: scaledInplace.MultiplyInplace(2);
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByDiagonal,The following statement contains a magic number: Matrix a = Matrix.Create(                  new double[3' 4] {                      { 1' 2' 3' 4 }'                      { 3' 4' 5' 6 }'                      { 5' 6' 7' 8 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByDiagonal,The following statement contains a magic number: Matrix a = Matrix.Create(                  new double[3' 4] {                      { 1' 2' 3' 4 }'                      { 3' 4' 5' 6 }'                      { 5' 6' 7' 8 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByDiagonal,The following statement contains a magic number: Matrix a = Matrix.Create(                  new double[3' 4] {                      { 1' 2' 3' 4 }'                      { 3' 4' 5' 6 }'                      { 5' 6' 7' 8 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByDiagonal,The following statement contains a magic number: Matrix a = Matrix.Create(                  new double[3' 4] {                      { 1' 2' 3' 4 }'                      { 3' 4' 5' 6 }'                      { 5' 6' 7' 8 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByDiagonal,The following statement contains a magic number: Matrix a = Matrix.Create(                  new double[3' 4] {                      { 1' 2' 3' 4 }'                      { 3' 4' 5' 6 }'                      { 5' 6' 7' 8 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByDiagonal,The following statement contains a magic number: Matrix a = Matrix.Create(                  new double[3' 4] {                      { 1' 2' 3' 4 }'                      { 3' 4' 5' 6 }'                      { 5' 6' 7' 8 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByDiagonal,The following statement contains a magic number: Matrix a = Matrix.Create(                  new double[3' 4] {                      { 1' 2' 3' 4 }'                      { 3' 4' 5' 6 }'                      { 5' 6' 7' 8 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByDiagonal,The following statement contains a magic number: Matrix a = Matrix.Create(                  new double[3' 4] {                      { 1' 2' 3' 4 }'                      { 3' 4' 5' 6 }'                      { 5' 6' 7' 8 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByDiagonal,The following statement contains a magic number: Matrix a = Matrix.Create(                  new double[3' 4] {                      { 1' 2' 3' 4 }'                      { 3' 4' 5' 6 }'                      { 5' 6' 7' 8 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByDiagonal,The following statement contains a magic number: Matrix a = Matrix.Create(                  new double[3' 4] {                      { 1' 2' 3' 4 }'                      { 3' 4' 5' 6 }'                      { 5' 6' 7' 8 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByDiagonal,The following statement contains a magic number: Matrix a = Matrix.Create(                  new double[3' 4] {                      { 1' 2' 3' 4 }'                      { 3' 4' 5' 6 }'                      { 5' 6' 7' 8 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByDiagonal,The following statement contains a magic number: Matrix a = Matrix.Create(                  new double[3' 4] {                      { 1' 2' 3' 4 }'                      { 3' 4' 5' 6 }'                      { 5' 6' 7' 8 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByDiagonal,The following statement contains a magic number: Matrix a = Matrix.Create(                  new double[3' 4] {                      { 1' 2' 3' 4 }'                      { 3' 4' 5' 6 }'                      { 5' 6' 7' 8 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByDiagonal,The following statement contains a magic number: double[] diagonal = new double[] { 0' 1' 2 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByDiagonal,The following statement contains a magic number: Assert.That(a[1' 0]' Is.EqualTo(3)' "#A02");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByDiagonal,The following statement contains a magic number: Assert.That(a[1' 1]' Is.EqualTo(4)' "#A03");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByDiagonal,The following statement contains a magic number: Assert.That(a[2' 0]' Is.EqualTo(10)' "#A04");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByDiagonal,The following statement contains a magic number: Assert.That(a[2' 0]' Is.EqualTo(10)' "#A04");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByDiagonal,The following statement contains a magic number: Assert.That(a[2' 1]' Is.EqualTo(12)' "#A05");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByDiagonal,The following statement contains a magic number: Assert.That(a[2' 1]' Is.EqualTo(12)' "#A05");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix a = Matrix.Create(                  new double[3' 4] {                      { 10' -61' -8' -29 }'                      { 95' 11' -49' -47 }'                      { 40' -81' 91' 68 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix a = Matrix.Create(                  new double[3' 4] {                      { 10' -61' -8' -29 }'                      { 95' 11' -49' -47 }'                      { 40' -81' 91' 68 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix a = Matrix.Create(                  new double[3' 4] {                      { 10' -61' -8' -29 }'                      { 95' 11' -49' -47 }'                      { 40' -81' 91' 68 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix a = Matrix.Create(                  new double[3' 4] {                      { 10' -61' -8' -29 }'                      { 95' 11' -49' -47 }'                      { 40' -81' 91' 68 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix a = Matrix.Create(                  new double[3' 4] {                      { 10' -61' -8' -29 }'                      { 95' 11' -49' -47 }'                      { 40' -81' 91' 68 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix a = Matrix.Create(                  new double[3' 4] {                      { 10' -61' -8' -29 }'                      { 95' 11' -49' -47 }'                      { 40' -81' 91' 68 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix a = Matrix.Create(                  new double[3' 4] {                      { 10' -61' -8' -29 }'                      { 95' 11' -49' -47 }'                      { 40' -81' 91' 68 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix a = Matrix.Create(                  new double[3' 4] {                      { 10' -61' -8' -29 }'                      { 95' 11' -49' -47 }'                      { 40' -81' 91' 68 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix a = Matrix.Create(                  new double[3' 4] {                      { 10' -61' -8' -29 }'                      { 95' 11' -49' -47 }'                      { 40' -81' 91' 68 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix a = Matrix.Create(                  new double[3' 4] {                      { 10' -61' -8' -29 }'                      { 95' 11' -49' -47 }'                      { 40' -81' 91' 68 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix a = Matrix.Create(                  new double[3' 4] {                      { 10' -61' -8' -29 }'                      { 95' 11' -49' -47 }'                      { 40' -81' 91' 68 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix a = Matrix.Create(                  new double[3' 4] {                      { 10' -61' -8' -29 }'                      { 95' 11' -49' -47 }'                      { 40' -81' 91' 68 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix a = Matrix.Create(                  new double[3' 4] {                      { 10' -61' -8' -29 }'                      { 95' 11' -49' -47 }'                      { 40' -81' 91' 68 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix a = Matrix.Create(                  new double[3' 4] {                      { 10' -61' -8' -29 }'                      { 95' 11' -49' -47 }'                      { 40' -81' 91' 68 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix b = Matrix.Create(                  new double[4' 2] {                      { 72' 37 }'                      { -23' 87 }'                      { 44' 29 }'                      { 98' -23 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix b = Matrix.Create(                  new double[4' 2] {                      { 72' 37 }'                      { -23' 87 }'                      { 44' 29 }'                      { 98' -23 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix b = Matrix.Create(                  new double[4' 2] {                      { 72' 37 }'                      { -23' 87 }'                      { 44' 29 }'                      { 98' -23 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix b = Matrix.Create(                  new double[4' 2] {                      { 72' 37 }'                      { -23' 87 }'                      { 44' 29 }'                      { 98' -23 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix b = Matrix.Create(                  new double[4' 2] {                      { 72' 37 }'                      { -23' 87 }'                      { 44' 29 }'                      { 98' -23 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix b = Matrix.Create(                  new double[4' 2] {                      { 72' 37 }'                      { -23' 87 }'                      { 44' 29 }'                      { 98' -23 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix b = Matrix.Create(                  new double[4' 2] {                      { 72' 37 }'                      { -23' 87 }'                      { 44' 29 }'                      { 98' -23 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix b = Matrix.Create(                  new double[4' 2] {                      { 72' 37 }'                      { -23' 87 }'                      { 44' 29 }'                      { 98' -23 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix b = Matrix.Create(                  new double[4' 2] {                      { 72' 37 }'                      { -23' 87 }'                      { 44' 29 }'                      { 98' -23 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix b = Matrix.Create(                  new double[4' 2] {                      { 72' 37 }'                      { -23' 87 }'                      { 44' 29 }'                      { 98' -23 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix c = Matrix.Create(                  new double[3' 2] {                      { -1071' -4502 }'                      {  -175' 4132 }'                      { 15411' -4492 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix c = Matrix.Create(                  new double[3' 2] {                      { -1071' -4502 }'                      {  -175' 4132 }'                      { 15411' -4492 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix c = Matrix.Create(                  new double[3' 2] {                      { -1071' -4502 }'                      {  -175' 4132 }'                      { 15411' -4492 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix c = Matrix.Create(                  new double[3' 2] {                      { -1071' -4502 }'                      {  -175' 4132 }'                      { 15411' -4492 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix c = Matrix.Create(                  new double[3' 2] {                      { -1071' -4502 }'                      {  -175' 4132 }'                      { 15411' -4492 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix c = Matrix.Create(                  new double[3' 2] {                      { -1071' -4502 }'                      {  -175' 4132 }'                      { 15411' -4492 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix c = Matrix.Create(                  new double[3' 2] {                      { -1071' -4502 }'                      {  -175' 4132 }'                      { 15411' -4492 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixMultiplicationByMatrix,The following statement contains a magic number: Matrix c = Matrix.Create(                  new double[3' 2] {                      { -1071' -4502 }'                      {  -175' 4132 }'                      { 15411' -4492 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixArrayArithmetics,The following statement contains a magic number: IContinuousGenerator uniform = new ContinuousUniformDistribution(-1' 2);
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixArrayArithmetics,The following statement contains a magic number: Matrix r = Matrix.Random(3' 4' uniform);
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixArrayArithmetics,The following statement contains a magic number: Matrix r = Matrix.Random(3' 4' uniform);
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixArrayArithmetics,The following statement contains a magic number: Matrix r2 = Matrix.Random(3' 4' uniform);
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixArrayArithmetics,The following statement contains a magic number: Matrix r2 = Matrix.Random(3' 4' uniform);
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixArrayArithmetics,The following statement contains a magic number: Assert.That(delegate { Matrix m = r - Matrix.Zeros(4); }' Throws.TypeOf<ArgumentException>());
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixArrayArithmetics,The following statement contains a magic number: Assert.That(delegate { Matrix m = r + Matrix.Zeros(4); }' Throws.TypeOf<ArgumentException>());
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixArrayArithmetics,The following statement contains a magic number: Assert.That(delegate { r.SubtractInplace(Matrix.Zeros(4)); }' Throws.TypeOf<ArgumentException>());
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixArrayArithmetics,The following statement contains a magic number: Assert.That(delegate { r.AddInplace(Matrix.Zeros(4)); }' Throws.TypeOf<ArgumentException>());
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixArrayArithmetics,The following statement contains a magic number: Assert.That(delegate { Matrix.ArrayDivide(Matrix.Ones(3)' Matrix.Ones(4)); }' Throws.TypeOf<ArgumentException>());
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixArrayArithmetics,The following statement contains a magic number: Assert.That(delegate { Matrix.ArrayDivide(Matrix.Ones(3)' Matrix.Ones(4)); }' Throws.TypeOf<ArgumentException>());
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixArrayArithmetics,The following statement contains a magic number: Assert.That(delegate { r.ArrayDivideInplace(Matrix.Ones(4)); }' Throws.TypeOf<ArgumentException>());
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixArrayArithmetics,The following statement contains a magic number: Assert.That(Matrix.ArrayDivide(Matrix.Zeros(4)' Matrix.Ones(4))' Is.EqualTo(Matrix.Zeros(4)));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixArrayArithmetics,The following statement contains a magic number: Assert.That(Matrix.ArrayDivide(Matrix.Zeros(4)' Matrix.Ones(4))' Is.EqualTo(Matrix.Zeros(4)));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixArrayArithmetics,The following statement contains a magic number: Assert.That(Matrix.ArrayDivide(Matrix.Zeros(4)' Matrix.Ones(4))' Is.EqualTo(Matrix.Zeros(4)));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixArrayArithmetics,The following statement contains a magic number: Assert.That(delegate { Matrix.ArrayMultiply(Matrix.Ones(3)' Matrix.Ones(4)); }' Throws.TypeOf<ArgumentException>());
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixArrayArithmetics,The following statement contains a magic number: Assert.That(delegate { Matrix.ArrayMultiply(Matrix.Ones(3)' Matrix.Ones(4)); }' Throws.TypeOf<ArgumentException>());
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixArrayArithmetics,The following statement contains a magic number: Assert.That(delegate { r.ArrayMultiplyInplace(Matrix.Ones(4)); }' Throws.TypeOf<ArgumentException>());
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixNormTraceDeterminant,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixNormTraceDeterminant,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixNormTraceDeterminant,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixNormTraceDeterminant,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixNormTraceDeterminant,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixNormTraceDeterminant,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixNormTraceDeterminant,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixNormTraceDeterminant,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixNormTraceDeterminant,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixNormTraceDeterminant,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixNormTraceDeterminant,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixNormTraceDeterminant,The following statement contains a magic number: const double ColumnSumMax = 33.0;
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixNormTraceDeterminant,The following statement contains a magic number: const double RowSumMax = 30.0;
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixNormTraceDeterminant,The following statement contains a magic number: const double SumOfDiagonals = 15;
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixNormTraceDeterminant,The following statement contains a magic number: const double SumOfSquares = 650;
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixNormTraceDeterminant,The following statement contains a magic number: Matrix a = new Matrix(columnwise' 3);
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The following statement contains a magic number: const int RowBottom = 2;
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The following statement contains a magic number: const int ColumnRight = 3;
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The following statement contains a magic number: int[] rowindexset = new int[] { 1' 2 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The following statement contains a magic number: int[] badrowindexset = new int[] { 1' 3 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The following statement contains a magic number: int[] columnindexset = new int[] { 1' 2' 3 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The following statement contains a magic number: int[] columnindexset = new int[] { 1' 2' 3 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The following statement contains a magic number: int[] badcolumnindexset = new int[] { 1' 2' 4 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The following statement contains a magic number: int[] badcolumnindexset = new int[] { 1' 2' 4 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The following statement contains a magic number: double[][] subavals = {                  new double[] { 5.0' 8.0' 11.0 }'                  new double[] { 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The following statement contains a magic number: double[][] subavals = {                  new double[] { 5.0' 8.0' 11.0 }'                  new double[] { 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The following statement contains a magic number: double[][] subavals = {                  new double[] { 5.0' 8.0' 11.0 }'                  new double[] { 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The following statement contains a magic number: double[][] subavals = {                  new double[] { 5.0' 8.0' 11.0 }'                  new double[] { 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The following statement contains a magic number: double[][] subavals = {                  new double[] { 5.0' 8.0' 11.0 }'                  new double[] { 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixGetSubmatrix,The following statement contains a magic number: double[][] subavals = {                  new double[] { 5.0' 8.0' 11.0 }'                  new double[] { 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixSetSubmatrix,The following statement contains a magic number: const int RowBottom = 2;
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixSetSubmatrix,The following statement contains a magic number: const int ColumnRight = 3;
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixSetSubmatrix,The following statement contains a magic number: int[] rowindexset = new int[] { 1' 2 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixSetSubmatrix,The following statement contains a magic number: int[] badrowindexset = new int[] { 1' 3 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixSetSubmatrix,The following statement contains a magic number: int[] columnindexset = new int[] { 1' 2' 3 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixSetSubmatrix,The following statement contains a magic number: int[] columnindexset = new int[] { 1' 2' 3 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixSetSubmatrix,The following statement contains a magic number: int[] badcolumnindexset = new int[] { 1' 2' 4 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixSetSubmatrix,The following statement contains a magic number: int[] badcolumnindexset = new int[] { 1' 2' 4 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixSetSubmatrix,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixSetSubmatrix,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixSetSubmatrix,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixSetSubmatrix,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixSetSubmatrix,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixSetSubmatrix,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixSetSubmatrix,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixSetSubmatrix,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixSetSubmatrix,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixSetSubmatrix,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixSetSubmatrix,The following statement contains a magic number: double[][] avals = {                  new double[] { 1.0' 4.0' 7.0' 10.0 }'                  new double[] { 2.0' 5.0' 8.0' 11.0 }'                  new double[] { 3.0' 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixSetSubmatrix,The following statement contains a magic number: Matrix sub = new Matrix(2' 3' 0.0);
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixArithmeticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixArithmeticsTest.cs,MatrixSetSubmatrix,The following statement contains a magic number: Matrix sub = new Matrix(2' 3' 0.0);
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a1 = Matrix.Create(                  new double[6' 2] {                      { 1' 1 }'                      { 1' 2 }'                      { 1' 2 }'                      { 1' -1 }'                      { 0' 1 }'                      { 2' 1 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a1 = Matrix.Create(                  new double[6' 2] {                      { 1' 1 }'                      { 1' 2 }'                      { 1' 2 }'                      { 1' -1 }'                      { 0' 1 }'                      { 2' 1 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a1 = Matrix.Create(                  new double[6' 2] {                      { 1' 1 }'                      { 1' 2 }'                      { 1' 2 }'                      { 1' -1 }'                      { 0' 1 }'                      { 2' 1 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a1 = Matrix.Create(                  new double[6' 2] {                      { 1' 1 }'                      { 1' 2 }'                      { 1' 2 }'                      { 1' -1 }'                      { 0' 1 }'                      { 2' 1 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a1 = Matrix.Create(                  new double[6' 2] {                      { 1' 1 }'                      { 1' 2 }'                      { 1' 2 }'                      { 1' -1 }'                      { 0' 1 }'                      { 2' 1 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix b1 = Matrix.Create(                  new double[6' 1] {                      { 2 }'                      { 2 }'                      { 2 }'                      { 2 }'                      { 2 }'                      { 2 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix b1 = Matrix.Create(                  new double[6' 1] {                      { 2 }'                      { 2 }'                      { 2 }'                      { 2 }'                      { 2 }'                      { 2 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix b1 = Matrix.Create(                  new double[6' 1] {                      { 2 }'                      { 2 }'                      { 2 }'                      { 2 }'                      { 2 }'                      { 2 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix b1 = Matrix.Create(                  new double[6' 1] {                      { 2 }'                      { 2 }'                      { 2 }'                      { 2 }'                      { 2 }'                      { 2 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix b1 = Matrix.Create(                  new double[6' 1] {                      { 2 }'                      { 2 }'                      { 2 }'                      { 2 }'                      { 2 }'                      { 2 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix b1 = Matrix.Create(                  new double[6' 1] {                      { 2 }'                      { 2 }'                      { 2 }'                      { 2 }'                      { 2 }'                      { 2 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix b1 = Matrix.Create(                  new double[6' 1] {                      { 2 }'                      { 2 }'                      { 2 }'                      { 2 }'                      { 2 }'                      { 2 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Assert.That(x1[0' 0]' NumericIs.AlmostEqualTo(1.2)' "#A00 Unexpected robust regression result.");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Assert.That(x1[1' 0]' NumericIs.AlmostEqualTo(0.4)' "#A01 Unexpected robust regression result.");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a2 = Matrix.Create(                  new double[6' 3] {                      { 2' -1' 2 }'                      { 3' 2' 0 }'                      { 1' 2' 4 }'                      { 1' -1' -1 }'                      { 0' 1' 2 }'                      { 2' 1' 1 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a2 = Matrix.Create(                  new double[6' 3] {                      { 2' -1' 2 }'                      { 3' 2' 0 }'                      { 1' 2' 4 }'                      { 1' -1' -1 }'                      { 0' 1' 2 }'                      { 2' 1' 1 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a2 = Matrix.Create(                  new double[6' 3] {                      { 2' -1' 2 }'                      { 3' 2' 0 }'                      { 1' 2' 4 }'                      { 1' -1' -1 }'                      { 0' 1' 2 }'                      { 2' 1' 1 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a2 = Matrix.Create(                  new double[6' 3] {                      { 2' -1' 2 }'                      { 3' 2' 0 }'                      { 1' 2' 4 }'                      { 1' -1' -1 }'                      { 0' 1' 2 }'                      { 2' 1' 1 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a2 = Matrix.Create(                  new double[6' 3] {                      { 2' -1' 2 }'                      { 3' 2' 0 }'                      { 1' 2' 4 }'                      { 1' -1' -1 }'                      { 0' 1' 2 }'                      { 2' 1' 1 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a2 = Matrix.Create(                  new double[6' 3] {                      { 2' -1' 2 }'                      { 3' 2' 0 }'                      { 1' 2' 4 }'                      { 1' -1' -1 }'                      { 0' 1' 2 }'                      { 2' 1' 1 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a2 = Matrix.Create(                  new double[6' 3] {                      { 2' -1' 2 }'                      { 3' 2' 0 }'                      { 1' 2' 4 }'                      { 1' -1' -1 }'                      { 0' 1' 2 }'                      { 2' 1' 1 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a2 = Matrix.Create(                  new double[6' 3] {                      { 2' -1' 2 }'                      { 3' 2' 0 }'                      { 1' 2' 4 }'                      { 1' -1' -1 }'                      { 0' 1' 2 }'                      { 2' 1' 1 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a2 = Matrix.Create(                  new double[6' 3] {                      { 2' -1' 2 }'                      { 3' 2' 0 }'                      { 1' 2' 4 }'                      { 1' -1' -1 }'                      { 0' 1' 2 }'                      { 2' 1' 1 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a2 = Matrix.Create(                  new double[6' 3] {                      { 2' -1' 2 }'                      { 3' 2' 0 }'                      { 1' 2' 4 }'                      { 1' -1' -1 }'                      { 0' 1' 2 }'                      { 2' 1' 1 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix b2 = Matrix.Create(                  new double[6' 1] {                      { 0 }'                      { 4 }'                      { 2 }'                      { -3 }'                      { 2 }'                      { 1 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix b2 = Matrix.Create(                  new double[6' 1] {                      { 0 }'                      { 4 }'                      { 2 }'                      { -3 }'                      { 2 }'                      { 1 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix b2 = Matrix.Create(                  new double[6' 1] {                      { 0 }'                      { 4 }'                      { 2 }'                      { -3 }'                      { 2 }'                      { 1 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix b2 = Matrix.Create(                  new double[6' 1] {                      { 0 }'                      { 4 }'                      { 2 }'                      { -3 }'                      { 2 }'                      { 1 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix b2 = Matrix.Create(                  new double[6' 1] {                      { 0 }'                      { 4 }'                      { 2 }'                      { -3 }'                      { 2 }'                      { 1 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Assert.That(x2[0' 0]' NumericIs.AlmostEqualTo(0.667' 1e-3)' "#A02 Unexpected robust regression result.");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Assert.That(x2[0' 0]' NumericIs.AlmostEqualTo(0.667' 1e-3)' "#A02 Unexpected robust regression result.");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Assert.That(x2[1' 0]' NumericIs.AlmostEqualTo(1.0' 1e-5)' "#A03 Unexpected robust regression result.");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Assert.That(x2[2' 0]' NumericIs.AlmostEqualTo(-0.167' 1e-2)' "#A04 Unexpected robust regression result.");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Assert.That(x2[2' 0]' NumericIs.AlmostEqualTo(-0.167' 1e-2)' "#A04 Unexpected robust regression result.");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Assert.That(x2[2' 0]' NumericIs.AlmostEqualTo(-0.167' 1e-2)' "#A04 Unexpected robust regression result.");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix a3 = Matrix.Create(                  new double[10' 4] {                      { -8' -29' 95' 11 }'                      { -47' 40' -81' 91 }'                      { -10' 31' -51' 77 }'                      { 1' 1' 55' -28 }'                      { 30' -27' -15' -59 }'                      { 72' -87' 47' -90 }'                      { 92' -91' -88' -48 }'                      { -28' 5' 13' -10 }'                      { 71' 16' 83' 9 }'                      { -83' 98' -48' -19 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix b3 = Matrix.Create(                  new double[10' 1] {                      { -49 }'                      { 68 }'                      { 95 }'                      { 16 }'                      { -96 }'                      { 43 }'                      { 53 }'                      { -82 }'                      { -60 }'                      { 62 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix b3 = Matrix.Create(                  new double[10' 1] {                      { -49 }'                      { 68 }'                      { 95 }'                      { 16 }'                      { -96 }'                      { 43 }'                      { 53 }'                      { -82 }'                      { -60 }'                      { 62 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix b3 = Matrix.Create(                  new double[10' 1] {                      { -49 }'                      { 68 }'                      { 95 }'                      { 16 }'                      { -96 }'                      { 43 }'                      { 53 }'                      { -82 }'                      { -60 }'                      { 62 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix b3 = Matrix.Create(                  new double[10' 1] {                      { -49 }'                      { 68 }'                      { 95 }'                      { 16 }'                      { -96 }'                      { 43 }'                      { 53 }'                      { -82 }'                      { -60 }'                      { 62 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix b3 = Matrix.Create(                  new double[10' 1] {                      { -49 }'                      { 68 }'                      { 95 }'                      { 16 }'                      { -96 }'                      { 43 }'                      { 53 }'                      { -82 }'                      { -60 }'                      { 62 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix b3 = Matrix.Create(                  new double[10' 1] {                      { -49 }'                      { 68 }'                      { 95 }'                      { 16 }'                      { -96 }'                      { 43 }'                      { 53 }'                      { -82 }'                      { -60 }'                      { 62 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix b3 = Matrix.Create(                  new double[10' 1] {                      { -49 }'                      { 68 }'                      { 95 }'                      { 16 }'                      { -96 }'                      { 43 }'                      { 53 }'                      { -82 }'                      { -60 }'                      { 62 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix b3 = Matrix.Create(                  new double[10' 1] {                      { -49 }'                      { 68 }'                      { 95 }'                      { 16 }'                      { -96 }'                      { 43 }'                      { 53 }'                      { -82 }'                      { -60 }'                      { 62 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix b3 = Matrix.Create(                  new double[10' 1] {                      { -49 }'                      { 68 }'                      { 95 }'                      { 16 }'                      { -96 }'                      { 43 }'                      { 53 }'                      { -82 }'                      { -60 }'                      { 62 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix b3 = Matrix.Create(                  new double[10' 1] {                      { -49 }'                      { 68 }'                      { 95 }'                      { 16 }'                      { -96 }'                      { 43 }'                      { 53 }'                      { -82 }'                      { -60 }'                      { 62 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Matrix b3 = Matrix.Create(                  new double[10' 1] {                      { -49 }'                      { 68 }'                      { 95 }'                      { 16 }'                      { -96 }'                      { 43 }'                      { 53 }'                      { -82 }'                      { -60 }'                      { 62 }                      });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Assert.That(x3[0' 0]' NumericIs.AlmostEqualTo(-0.104' 1e-2)' "#A05 Unexpected robust regression result.");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Assert.That(x3[0' 0]' NumericIs.AlmostEqualTo(-0.104' 1e-2)' "#A05 Unexpected robust regression result.");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Assert.That(x3[1' 0]' NumericIs.AlmostEqualTo(-0.216' 1e-2)' "#A06 Unexpected robust regression result.");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Assert.That(x3[1' 0]' NumericIs.AlmostEqualTo(-0.216' 1e-2)' "#A06 Unexpected robust regression result.");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Assert.That(x3[2' 0]' NumericIs.AlmostEqualTo(-0.618' 1e-3)' "#A07 Unexpected robust regression result.");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Assert.That(x3[2' 0]' NumericIs.AlmostEqualTo(-0.618' 1e-3)' "#A07 Unexpected robust regression result.");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Assert.That(x3[2' 0]' NumericIs.AlmostEqualTo(-0.618' 1e-3)' "#A07 Unexpected robust regression result.");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Assert.That(x3[3' 0]' NumericIs.AlmostEqualTo(0.238' 1e-3)' "#A08 Unexpected robust regression result.");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Assert.That(x3[3' 0]' NumericIs.AlmostEqualTo(0.238' 1e-3)' "#A08 Unexpected robust regression result.");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolveRobust,The following statement contains a magic number: Assert.That(x3[3' 0]' NumericIs.AlmostEqualTo(0.238' 1e-3)' "#A08 Unexpected robust regression result.");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve1,The following statement contains a magic number: double[][] subavals = {                  new double[] { 5.0' 8.0' 11.0 }'                  new double[] { 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve1,The following statement contains a magic number: double[][] subavals = {                  new double[] { 5.0' 8.0' 11.0 }'                  new double[] { 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve1,The following statement contains a magic number: double[][] subavals = {                  new double[] { 5.0' 8.0' 11.0 }'                  new double[] { 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve1,The following statement contains a magic number: double[][] subavals = {                  new double[] { 5.0' 8.0' 11.0 }'                  new double[] { 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve1,The following statement contains a magic number: double[][] subavals = {                  new double[] { 5.0' 8.0' 11.0 }'                  new double[] { 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve1,The following statement contains a magic number: double[][] subavals = {                  new double[] { 5.0' 8.0' 11.0 }'                  new double[] { 6.0' 9.0' 12.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve1,The following statement contains a magic number: double[][] sqSolution = {                  new double[] { 13.0 }'                  new double[] { 15.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve1,The following statement contains a magic number: double[][] sqSolution = {                  new double[] { 13.0 }'                  new double[] { 15.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve2,The following statement contains a magic number: Matrix ma = new Matrix(new double[][] { new double[] { 1' 2 }' new double[] { 3' 5 } });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve2,The following statement contains a magic number: Matrix ma = new Matrix(new double[][] { new double[] { 1' 2 }' new double[] { 3' 5 } });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve2,The following statement contains a magic number: Matrix ma = new Matrix(new double[][] { new double[] { 1' 2 }' new double[] { 3' 5 } });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve2,The following statement contains a magic number: Matrix mb = new Matrix(new double[][] { new double[] { 29.0 }' new double[] { 76.0 } });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve2,The following statement contains a magic number: Matrix mb = new Matrix(new double[][] { new double[] { 29.0 }' new double[] { 76.0 } });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve2,The following statement contains a magic number: Matrix mr = new Matrix(new double[][] { new double[] { 7 }' new double[] { 11.0 } });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve2,The following statement contains a magic number: Matrix mr = new Matrix(new double[][] { new double[] { 7 }' new double[] { 11.0 } });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve3,The following statement contains a magic number: Matrix ma = new Matrix(new double[][] { new double[] { 1' 2 }' new double[] { 3' 5 } });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve3,The following statement contains a magic number: Matrix ma = new Matrix(new double[][] { new double[] { 1' 2 }' new double[] { 3' 5 } });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve3,The following statement contains a magic number: Matrix ma = new Matrix(new double[][] { new double[] { 1' 2 }' new double[] { 3' 5 } });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve3,The following statement contains a magic number: Matrix mx = new Matrix(new double[][] { new double[] { 7 }' new double[] { 11.0 } });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve3,The following statement contains a magic number: Matrix mx = new Matrix(new double[][] { new double[] { 7 }' new double[] { 11.0 } });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve4,The following statement contains a magic number: Matrix ma = new Matrix(new double[][] { new double[] { 1' 2' 3 }' new double[] { 5' 7' 11 }' new double[] { 13' 17' 19 } });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve4,The following statement contains a magic number: Matrix ma = new Matrix(new double[][] { new double[] { 1' 2' 3 }' new double[] { 5' 7' 11 }' new double[] { 13' 17' 19 } });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve4,The following statement contains a magic number: Matrix ma = new Matrix(new double[][] { new double[] { 1' 2' 3 }' new double[] { 5' 7' 11 }' new double[] { 13' 17' 19 } });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve4,The following statement contains a magic number: Matrix ma = new Matrix(new double[][] { new double[] { 1' 2' 3 }' new double[] { 5' 7' 11 }' new double[] { 13' 17' 19 } });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve4,The following statement contains a magic number: Matrix ma = new Matrix(new double[][] { new double[] { 1' 2' 3 }' new double[] { 5' 7' 11 }' new double[] { 13' 17' 19 } });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve4,The following statement contains a magic number: Matrix ma = new Matrix(new double[][] { new double[] { 1' 2' 3 }' new double[] { 5' 7' 11 }' new double[] { 13' 17' 19 } });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve4,The following statement contains a magic number: Matrix ma = new Matrix(new double[][] { new double[] { 1' 2' 3 }' new double[] { 5' 7' 11 }' new double[] { 13' 17' 19 } });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve4,The following statement contains a magic number: Matrix ma = new Matrix(new double[][] { new double[] { 1' 2' 3 }' new double[] { 5' 7' 11 }' new double[] { 13' 17' 19 } });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve4,The following statement contains a magic number: Matrix mx = new Matrix(new double[][] { new double[] { 23 }' new double[] { 29 }' new double[] { 31 } });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve4,The following statement contains a magic number: Matrix mx = new Matrix(new double[][] { new double[] { 23 }' new double[] { 29 }' new double[] { 31 } });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSolve4,The following statement contains a magic number: Matrix mx = new Matrix(new double[][] { new double[] { 23 }' new double[] { 29 }' new double[] { 31 } });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixLUDecomposition1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixLUDecomposition1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixLUDecomposition1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixLUDecomposition1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixLUDecomposition1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixLUDecomposition1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixLUDecomposition1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixLUDecomposition1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixLUDecomposition1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixLUDecomposition1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixLUDecomposition1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixLUDecomposition1,The following statement contains a magic number: Matrix b = new Matrix(columnwise' 4);
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixLUDecomposition2,The following statement contains a magic number: Matrix mc2X2 = new Matrix(new double[][]                  {                      new double[] { 1' 2 }'                      new double[] { 3' 4 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixLUDecomposition2,The following statement contains a magic number: Matrix mc2X2 = new Matrix(new double[][]                  {                      new double[] { 1' 2 }'                      new double[] { 3' 4 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixLUDecomposition2,The following statement contains a magic number: Matrix mc2X2 = new Matrix(new double[][]                  {                      new double[] { 1' 2 }'                      new double[] { 3' 4 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixLUDecomposition2,The following statement contains a magic number: Matrix mcL = new Matrix(new double[][] {                  new double[] { 1' 0 }'                  new double[] { 1d/3d' 1 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixLUDecomposition2,The following statement contains a magic number: Matrix mcU = new Matrix(new double[][] {                  new double[] { 3' 4 }'                  new double[] { 0' 2d/3d }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixLUDecomposition2,The following statement contains a magic number: Matrix mcU = new Matrix(new double[][] {                  new double[] { 3' 4 }'                  new double[] { 0' 2d/3d }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixLUDecomposition2,The following statement contains a magic number: Matrix mcU = new Matrix(new double[][] {                  new double[] { 3' 4 }'                  new double[] { 0' 2d/3d }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixLUDecomposition2,The following statement contains a magic number: Matrix mcU = new Matrix(new double[][] {                  new double[] { 3' 4 }'                  new double[] { 0' 2d/3d }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixLUDecomposition2,The following statement contains a magic number: Assert.That(mcLU.Determinant()' NumericIs.AlmostEqualTo((double)(-2))' "real LU determinant");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixLUDecomposition2,The following statement contains a magic number: Assert.That(mc2X2.Determinant()' NumericIs.AlmostEqualTo((double)(-2))' "real LU determinant II");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixLUDecomposition2,The following statement contains a magic number: Matrix mchL = new Matrix(new double[][] {                  new double[] { 1' 0 }'                  new double[] { 0.5' 1 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixLUDecomposition2,The following statement contains a magic number: Matrix mchU = new Matrix(new double[][] {                  new double[] { 2' 4 }'                  new double[] { 0' 1 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixLUDecomposition2,The following statement contains a magic number: Matrix mchU = new Matrix(new double[][] {                  new double[] { 2' 4 }'                  new double[] { 0' 1 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixLUDecomposition2,The following statement contains a magic number: Assert.That(mchLU.Determinant()' NumericIs.AlmostEqualTo((double)(-2))' "real LU determinant (H)");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixLUDecomposition2,The following statement contains a magic number: Assert.That(mc2X2H.Determinant()' NumericIs.AlmostEqualTo((double)(-2))' "real LU determinant II (H)");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition1,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition1,The following statement contains a magic number: Matrix b = new Matrix(columnwise' 4);
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix md2X4 = new Matrix(new double[][]                  {                      new double[] { 1' 2' -3' 12 }'                      new double[] { 3' 3.1' 4' 2 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix md2X4 = new Matrix(new double[][]                  {                      new double[] { 1' 2' -3' 12 }'                      new double[] { 3' 3.1' 4' 2 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix md2X4 = new Matrix(new double[][]                  {                      new double[] { 1' 2' -3' 12 }'                      new double[] { 3' 3.1' 4' 2 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix md2X4 = new Matrix(new double[][]                  {                      new double[] { 1' 2' -3' 12 }'                      new double[] { 3' 3.1' 4' 2 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix md2X4 = new Matrix(new double[][]                  {                      new double[] { 1' 2' -3' 12 }'                      new double[] { 3' 3.1' 4' 2 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix md2X4 = new Matrix(new double[][]                  {                      new double[] { 1' 2' -3' 12 }'                      new double[] { 3' 3.1' 4' 2 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix md2X4 = new Matrix(new double[][]                  {                      new double[] { 1' 2' -3' 12 }'                      new double[] { 3' 3.1' 4' 2 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdhQ = new Matrix(new double[][] {                  new double[] { 0.07955572841757' 0.47920079143039 }'                  new double[] { 0.15911145683515' 0.47348594100255 }'                  new double[] { -0.23866718525272' 0.73615739955605 }'                  new double[] { 0.95466874101088' 0.06519162710272 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdhQ = new Matrix(new double[][] {                  new double[] { 0.07955572841757' 0.47920079143039 }'                  new double[] { 0.15911145683515' 0.47348594100255 }'                  new double[] { -0.23866718525272' 0.73615739955605 }'                  new double[] { 0.95466874101088' 0.06519162710272 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdhQ = new Matrix(new double[][] {                  new double[] { 0.07955572841757' 0.47920079143039 }'                  new double[] { 0.15911145683515' 0.47348594100255 }'                  new double[] { -0.23866718525272' 0.73615739955605 }'                  new double[] { 0.95466874101088' 0.06519162710272 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdhQ = new Matrix(new double[][] {                  new double[] { 0.07955572841757' 0.47920079143039 }'                  new double[] { 0.15911145683515' 0.47348594100255 }'                  new double[] { -0.23866718525272' 0.73615739955605 }'                  new double[] { 0.95466874101088' 0.06519162710272 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdhQ = new Matrix(new double[][] {                  new double[] { 0.07955572841757' 0.47920079143039 }'                  new double[] { 0.15911145683515' 0.47348594100255 }'                  new double[] { -0.23866718525272' 0.73615739955605 }'                  new double[] { 0.95466874101088' 0.06519162710272 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdhQ = new Matrix(new double[][] {                  new double[] { 0.07955572841757' 0.47920079143039 }'                  new double[] { 0.15911145683515' 0.47348594100255 }'                  new double[] { -0.23866718525272' 0.73615739955605 }'                  new double[] { 0.95466874101088' 0.06519162710272 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdhQ = new Matrix(new double[][] {                  new double[] { 0.07955572841757' 0.47920079143039 }'                  new double[] { 0.15911145683515' 0.47348594100255 }'                  new double[] { -0.23866718525272' 0.73615739955605 }'                  new double[] { 0.95466874101088' 0.06519162710272 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdhQ = new Matrix(new double[][] {                  new double[] { 0.07955572841757' 0.47920079143039 }'                  new double[] { 0.15911145683515' 0.47348594100255 }'                  new double[] { -0.23866718525272' 0.73615739955605 }'                  new double[] { 0.95466874101088' 0.06519162710272 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdhR = new Matrix(new double[][] {                  new double[] { 12.56980508997654' 1.68658144245255 }'                  new double[] { 0' 5.98042164382869 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdhR = new Matrix(new double[][] {                  new double[] { 12.56980508997654' 1.68658144245255 }'                  new double[] { 0' 5.98042164382869 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdhR = new Matrix(new double[][] {                  new double[] { 12.56980508997654' 1.68658144245255 }'                  new double[] { 0' 5.98042164382869 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdhPInv = new Matrix(new double[][] {                  new double[] { -0.00442227310854' 0.00203505965379' -0.03550382768177' 0.07448672256297 }'                  new double[] { 0.08012826184670' 0.07917266861796' 0.12309456479807' 0.01090084127596 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdhPInv = new Matrix(new double[][] {                  new double[] { -0.00442227310854' 0.00203505965379' -0.03550382768177' 0.07448672256297 }'                  new double[] { 0.08012826184670' 0.07917266861796' 0.12309456479807' 0.01090084127596 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdhPInv = new Matrix(new double[][] {                  new double[] { -0.00442227310854' 0.00203505965379' -0.03550382768177' 0.07448672256297 }'                  new double[] { 0.08012826184670' 0.07917266861796' 0.12309456479807' 0.01090084127596 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdhPInv = new Matrix(new double[][] {                  new double[] { -0.00442227310854' 0.00203505965379' -0.03550382768177' 0.07448672256297 }'                  new double[] { 0.08012826184670' 0.07917266861796' 0.12309456479807' 0.01090084127596 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdhPInv = new Matrix(new double[][] {                  new double[] { -0.00442227310854' 0.00203505965379' -0.03550382768177' 0.07448672256297 }'                  new double[] { 0.08012826184670' 0.07917266861796' 0.12309456479807' 0.01090084127596 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdhPInv = new Matrix(new double[][] {                  new double[] { -0.00442227310854' 0.00203505965379' -0.03550382768177' 0.07448672256297 }'                  new double[] { 0.08012826184670' 0.07917266861796' 0.12309456479807' 0.01090084127596 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdhPInv = new Matrix(new double[][] {                  new double[] { -0.00442227310854' 0.00203505965379' -0.03550382768177' 0.07448672256297 }'                  new double[] { 0.08012826184670' 0.07917266861796' 0.12309456479807' 0.01090084127596 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdhPInv = new Matrix(new double[][] {                  new double[] { -0.00442227310854' 0.00203505965379' -0.03550382768177' 0.07448672256297 }'                  new double[] { 0.08012826184670' 0.07917266861796' 0.12309456479807' 0.01090084127596 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Assert.That(mdhQR.Q' NumericIs.AlmostEqualTo(mdhQ' 1e-14)' "real QR Q-matrix (H)");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Assert.That(Matrix.Transpose(mdhQR.Q) * mdhQR.Q' NumericIs.AlmostEqualTo(Matrix.Identity(2' 2))' "real QR QHQ=I (H)");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Assert.That(Matrix.Transpose(mdhQR.Q) * mdhQR.Q' NumericIs.AlmostEqualTo(Matrix.Identity(2' 2))' "real QR QHQ=I (H)");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Assert.That(mdhQR.Solve(Matrix.Identity(4' 4))' NumericIs.AlmostEqualTo(mdhPInv' 1e-13)' "real QR Solve/Pseudoinverse (H)");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Assert.That(mdhQR.Solve(Matrix.Identity(4' 4))' NumericIs.AlmostEqualTo(mdhPInv' 1e-13)' "real QR Solve/Pseudoinverse (H)");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Assert.That(mdhQR.Solve(Matrix.Identity(4' 4))' NumericIs.AlmostEqualTo(mdhPInv' 1e-13)' "real QR Solve/Pseudoinverse (H)");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Assert.That(md2X4H.Inverse()' NumericIs.AlmostEqualTo(mdhPInv' 1e-13)' "real pseudoinverse (H)");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdQ = new Matrix(new double[][] {                  new double[] { 0.31622776601684' 0.94868329805051 }'                  new double[] { 0.94868329805051' -0.31622776601684 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdQ = new Matrix(new double[][] {                  new double[] { 0.31622776601684' 0.94868329805051 }'                  new double[] { 0.94868329805051' -0.31622776601684 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdQ = new Matrix(new double[][] {                  new double[] { 0.31622776601684' 0.94868329805051 }'                  new double[] { 0.94868329805051' -0.31622776601684 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdQ = new Matrix(new double[][] {                  new double[] { 0.31622776601684' 0.94868329805051 }'                  new double[] { 0.94868329805051' -0.31622776601684 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdR = new Matrix(new double[][] {                  new double[] { 3.16227766016838' 3.57337375599027' 2.84604989415154' 5.69209978830308 }'                  new double[] { 0' 0.91706052144883' -4.11096095821889' 10.75174404457249 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdR = new Matrix(new double[][] {                  new double[] { 3.16227766016838' 3.57337375599027' 2.84604989415154' 5.69209978830308 }'                  new double[] { 0' 0.91706052144883' -4.11096095821889' 10.75174404457249 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdR = new Matrix(new double[][] {                  new double[] { 3.16227766016838' 3.57337375599027' 2.84604989415154' 5.69209978830308 }'                  new double[] { 0' 0.91706052144883' -4.11096095821889' 10.75174404457249 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdR = new Matrix(new double[][] {                  new double[] { 3.16227766016838' 3.57337375599027' 2.84604989415154' 5.69209978830308 }'                  new double[] { 0' 0.91706052144883' -4.11096095821889' 10.75174404457249 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdR = new Matrix(new double[][] {                  new double[] { 3.16227766016838' 3.57337375599027' 2.84604989415154' 5.69209978830308 }'                  new double[] { 0' 0.91706052144883' -4.11096095821889' 10.75174404457249 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdR = new Matrix(new double[][] {                  new double[] { 3.16227766016838' 3.57337375599027' 2.84604989415154' 5.69209978830308 }'                  new double[] { 0' 0.91706052144883' -4.11096095821889' 10.75174404457249 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdR = new Matrix(new double[][] {                  new double[] { 3.16227766016838' 3.57337375599027' 2.84604989415154' 5.69209978830308 }'                  new double[] { 0' 0.91706052144883' -4.11096095821889' 10.75174404457249 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdPInv = new Matrix(new double[][] {                  new double[] { -0.00442227310854' 0.08012826184670 }'                  new double[] { 0.00203505965379' 0.07917266861796 }'                  new double[] { -0.03550382768177' 0.12309456479807 }'                  new double[] { 0.07448672256297' 0.01090084127596 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdPInv = new Matrix(new double[][] {                  new double[] { -0.00442227310854' 0.08012826184670 }'                  new double[] { 0.00203505965379' 0.07917266861796 }'                  new double[] { -0.03550382768177' 0.12309456479807 }'                  new double[] { 0.07448672256297' 0.01090084127596 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdPInv = new Matrix(new double[][] {                  new double[] { -0.00442227310854' 0.08012826184670 }'                  new double[] { 0.00203505965379' 0.07917266861796 }'                  new double[] { -0.03550382768177' 0.12309456479807 }'                  new double[] { 0.07448672256297' 0.01090084127596 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdPInv = new Matrix(new double[][] {                  new double[] { -0.00442227310854' 0.08012826184670 }'                  new double[] { 0.00203505965379' 0.07917266861796 }'                  new double[] { -0.03550382768177' 0.12309456479807 }'                  new double[] { 0.07448672256297' 0.01090084127596 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdPInv = new Matrix(new double[][] {                  new double[] { -0.00442227310854' 0.08012826184670 }'                  new double[] { 0.00203505965379' 0.07917266861796 }'                  new double[] { -0.03550382768177' 0.12309456479807 }'                  new double[] { 0.07448672256297' 0.01090084127596 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdPInv = new Matrix(new double[][] {                  new double[] { -0.00442227310854' 0.08012826184670 }'                  new double[] { 0.00203505965379' 0.07917266861796 }'                  new double[] { -0.03550382768177' 0.12309456479807 }'                  new double[] { 0.07448672256297' 0.01090084127596 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdPInv = new Matrix(new double[][] {                  new double[] { -0.00442227310854' 0.08012826184670 }'                  new double[] { 0.00203505965379' 0.07917266861796 }'                  new double[] { -0.03550382768177' 0.12309456479807 }'                  new double[] { 0.07448672256297' 0.01090084127596 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Matrix mdPInv = new Matrix(new double[][] {                  new double[] { -0.00442227310854' 0.08012826184670 }'                  new double[] { 0.00203505965379' 0.07917266861796 }'                  new double[] { -0.03550382768177' 0.12309456479807 }'                  new double[] { 0.07448672256297' 0.01090084127596 }                  });
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Assert.That(mdQR.Q' NumericIs.AlmostEqualTo(mdQ' 1e-14)' "real QR Q-matrix");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Assert.That(Matrix.Transpose(mdQR.Q) * mdQR.Q' NumericIs.AlmostEqualTo(Matrix.Identity(2' 2))' "real QR QHQ=I");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Assert.That(Matrix.Transpose(mdQR.Q) * mdQR.Q' NumericIs.AlmostEqualTo(Matrix.Identity(2' 2))' "real QR QHQ=I");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixQRDecomposition2,The following statement contains a magic number: Assert.That(md2X4.Inverse()' NumericIs.AlmostEqualTo(mdPInv' 1e-13)' "real pseudoinverse");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixPseudoInverse,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixPseudoInverse,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixPseudoInverse,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixPseudoInverse,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixPseudoInverse,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixPseudoInverse,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixPseudoInverse,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixPseudoInverse,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixPseudoInverse,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixPseudoInverse,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixPseudoInverse,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixPseudoInverse,The following statement contains a magic number: Matrix b = new Matrix(columnwise' 4);
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixPseudoInverse,The following statement contains a magic number: Assert.That(d * b' NumericIs.AlmostEqualTo(Matrix.Identity(3' 3)' 1e-13)' "Inverse");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixPseudoInverse,The following statement contains a magic number: Assert.That(d * b' NumericIs.AlmostEqualTo(Matrix.Identity(3' 3)' 1e-13)' "Inverse");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixPseudoInverse,The following statement contains a magic number: Assert.That(d * b' NumericIs.AlmostEqualTo(Matrix.Identity(3' 3)' 1e-13)' "Inverse");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSingularValueDecompositionRandom,The following statement contains a magic number: Matrix matrix = Matrix.Random(10' SizeRandom.NextInt32()' ValueRandom);
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSingularValueDecompositionRandom,The following statement contains a magic number: Assert.That(product' NumericIs.AlmostEqualTo(matrix' 1e-14));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSingularValueDecomposition,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSingularValueDecomposition,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSingularValueDecomposition,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSingularValueDecomposition,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSingularValueDecomposition,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSingularValueDecomposition,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSingularValueDecomposition,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSingularValueDecomposition,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSingularValueDecomposition,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSingularValueDecomposition,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSingularValueDecomposition,The following statement contains a magic number: double[] columnwise = { 1.0' 2.0' 3.0' 4.0' 5.0' 6.0' 7.0' 8.0' 9.0' 10.0' 11.0' 12.0 };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSingularValueDecomposition,The following statement contains a magic number: double[][] condmat = {                  new double[] { 1.0' 3.0 }'                  new double[] { 7.0' 9.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSingularValueDecomposition,The following statement contains a magic number: double[][] condmat = {                  new double[] { 1.0' 3.0 }'                  new double[] { 7.0' 9.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSingularValueDecomposition,The following statement contains a magic number: double[][] condmat = {                  new double[] { 1.0' 3.0 }'                  new double[] { 7.0' 9.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSingularValueDecomposition,The following statement contains a magic number: Matrix b = new Matrix(columnwise' 4);
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixSingularValueDecomposition,The following statement contains a magic number: Matrix def = new Matrix(columnwise' 3);
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixCholeskyDecomposition,The following statement contains a magic number: double[][] pvals = {                  new double[] { 25' -5' 10 }'                  new double[] { -5' 17' 10 }'                  new double[] { 10' 10' 62 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixCholeskyDecomposition,The following statement contains a magic number: double[][] pvals = {                  new double[] { 25' -5' 10 }'                  new double[] { -5' 17' 10 }'                  new double[] { 10' 10' 62 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixCholeskyDecomposition,The following statement contains a magic number: double[][] pvals = {                  new double[] { 25' -5' 10 }'                  new double[] { -5' 17' 10 }'                  new double[] { 10' 10' 62 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixCholeskyDecomposition,The following statement contains a magic number: double[][] pvals = {                  new double[] { 25' -5' 10 }'                  new double[] { -5' 17' 10 }'                  new double[] { 10' 10' 62 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixCholeskyDecomposition,The following statement contains a magic number: double[][] pvals = {                  new double[] { 25' -5' 10 }'                  new double[] { -5' 17' 10 }'                  new double[] { 10' 10' 62 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixCholeskyDecomposition,The following statement contains a magic number: double[][] pvals = {                  new double[] { 25' -5' 10 }'                  new double[] { -5' 17' 10 }'                  new double[] { 10' 10' 62 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixCholeskyDecomposition,The following statement contains a magic number: double[][] pvals = {                  new double[] { 25' -5' 10 }'                  new double[] { -5' 17' 10 }'                  new double[] { 10' 10' 62 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixCholeskyDecomposition,The following statement contains a magic number: double[][] pvals = {                  new double[] { 25' -5' 10 }'                  new double[] { -5' 17' 10 }'                  new double[] { 10' 10' 62 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixCholeskyDecomposition,The following statement contains a magic number: double[][] pvals = {                  new double[] { 25' -5' 10 }'                  new double[] { -5' 17' 10 }'                  new double[] { 10' 10' 62 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixCholeskyDecomposition,The following statement contains a magic number: Matrix g = chol.Solve(Matrix.Identity(3' 3));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixCholeskyDecomposition,The following statement contains a magic number: Matrix g = chol.Solve(Matrix.Identity(3' 3));
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixCholeskyDecomposition,The following statement contains a magic number: Assert.That(e * g' NumericIs.AlmostEqualTo(Matrix.Identity(3' 3))' "CholeskyDecomposition Solve");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixCholeskyDecomposition,The following statement contains a magic number: Assert.That(e * g' NumericIs.AlmostEqualTo(Matrix.Identity(3' 3))' "CholeskyDecomposition Solve");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixEigenvalueDecomposition,The following statement contains a magic number: double[][] pvals = {                  new double[] { 25' -5' 10 }'                  new double[] { -5' 17' 10 }'                  new double[] { 10' 10' 62 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixEigenvalueDecomposition,The following statement contains a magic number: double[][] pvals = {                  new double[] { 25' -5' 10 }'                  new double[] { -5' 17' 10 }'                  new double[] { 10' 10' 62 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixEigenvalueDecomposition,The following statement contains a magic number: double[][] pvals = {                  new double[] { 25' -5' 10 }'                  new double[] { -5' 17' 10 }'                  new double[] { 10' 10' 62 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixEigenvalueDecomposition,The following statement contains a magic number: double[][] pvals = {                  new double[] { 25' -5' 10 }'                  new double[] { -5' 17' 10 }'                  new double[] { 10' 10' 62 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixEigenvalueDecomposition,The following statement contains a magic number: double[][] pvals = {                  new double[] { 25' -5' 10 }'                  new double[] { -5' 17' 10 }'                  new double[] { 10' 10' 62 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixEigenvalueDecomposition,The following statement contains a magic number: double[][] pvals = {                  new double[] { 25' -5' 10 }'                  new double[] { -5' 17' 10 }'                  new double[] { 10' 10' 62 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixEigenvalueDecomposition,The following statement contains a magic number: double[][] pvals = {                  new double[] { 25' -5' 10 }'                  new double[] { -5' 17' 10 }'                  new double[] { 10' 10' 62 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixEigenvalueDecomposition,The following statement contains a magic number: double[][] pvals = {                  new double[] { 25' -5' 10 }'                  new double[] { -5' 17' 10 }'                  new double[] { 10' 10' 62 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixEigenvalueDecomposition,The following statement contains a magic number: double[][] pvals = {                  new double[] { 25' -5' 10 }'                  new double[] { -5' 17' 10 }'                  new double[] { 10' 10' 62 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixEigenvalueDecomposition,The following statement contains a magic number: double[][] evals = {                  new double[] { 0.0' 1.0' 0.0' 0.0 }'                  new double[] { 1.0' 0.0' 2e-7' 0.0 }'                  new double[] { 0.0' -2e-7' 0.0' 1.0 }'                  new double[] { 0.0' 0.0' 1.0' 0.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixEigenvalueDecomposition,The following statement contains a magic number: double[][] evals = {                  new double[] { 0.0' 1.0' 0.0' 0.0 }'                  new double[] { 1.0' 0.0' 2e-7' 0.0 }'                  new double[] { 0.0' -2e-7' 0.0' 1.0 }'                  new double[] { 0.0' 0.0' 1.0' 0.0 }              };
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixDecompositionTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixDecompositionTest.cs,MatrixEigenvalueDecomposition,The following statement contains a magic number: Assert.That(eigv * eigd' NumericIs.AlmostEqualTo(h * eigv' 1e-14)' "EigenvalueDecomposition (nonsymmetric)");
Magic Number,Iridium.Test.LinearAlgebraTests,MatrixStressTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\LinearAlgebraTests\MatrixStressTest.cs,SolveLinearSystem,The following statement contains a magic number: Assert.That(ma.Solve(mb)' NumericIs.AlmostEqualTo(mx' 1e-10));
Magic Number,Iridium.Test.NumberTheoryTests,NumberTheoryTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\NumberTheoryTests\NumberTheoryTest.cs,TestIsPerfectSquare32,The following statement contains a magic number: Assert.That(IntegerTheory.IsPerfectSquare(100000000)' "100000000 (+)");
Magic Number,Iridium.Test.NumberTheoryTests,NumberTheoryTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\NumberTheoryTests\NumberTheoryTest.cs,TestIsPerfectSquare32,The following statement contains a magic number: Assert.That(!IntegerTheory.IsPerfectSquare(100000001)' "100000001 (-)");
Magic Number,Iridium.Test.NumberTheoryTests,NumberTheoryTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\NumberTheoryTests\NumberTheoryTest.cs,TestIsPerfectSquare32,The following statement contains a magic number: Assert.That(!IntegerTheory.IsPerfectSquare(99999999)' "99999999 (-)");
Magic Number,Iridium.Test.NumberTheoryTests,NumberTheoryTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\NumberTheoryTests\NumberTheoryTest.cs,TestIsPerfectSquare32,The following statement contains a magic number: Assert.That(!IntegerTheory.IsPerfectSquare(-4)' "-4 (-)");
Magic Number,Iridium.Test.NumberTheoryTests,NumberTheoryTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\NumberTheoryTests\NumberTheoryTest.cs,TestIsPerfectSquare64,The following statement contains a magic number: i < 32
Magic Number,Iridium.Test.NumberTheoryTests,NumberTheoryTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\NumberTheoryTests\NumberTheoryTest.cs,TestIsPerfectSquare64,The following statement contains a magic number: i < 32
Magic Number,Iridium.Test.NumberTheoryTests,NumberTheoryTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\NumberTheoryTests\NumberTheoryTest.cs,TestIsPerfectSquare64,The following statement contains a magic number: Assert.That(IntegerTheory.IsPerfectSquare((long)1000000000000000000)' "1000000000000000000 (+)");
Magic Number,Iridium.Test.NumberTheoryTests,NumberTheoryTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\NumberTheoryTests\NumberTheoryTest.cs,TestIsPerfectSquare64,The following statement contains a magic number: Assert.That(!IntegerTheory.IsPerfectSquare((long)1000000000000000001)' "1000000000000000001 (-)");
Magic Number,Iridium.Test.NumberTheoryTests,NumberTheoryTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\NumberTheoryTests\NumberTheoryTest.cs,TestIsPerfectSquare64,The following statement contains a magic number: Assert.That(!IntegerTheory.IsPerfectSquare((long)999999999999999999)' "999999999999999999 (-)");
Magic Number,Iridium.Test.NumberTheoryTests,NumberTheoryTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\NumberTheoryTests\NumberTheoryTest.cs,TestIsPerfectSquare64,The following statement contains a magic number: Assert.That(!IntegerTheory.IsPerfectSquare((long)999999999999999993)' "999999999999999993 (-)");
Magic Number,Iridium.Test.NumberTheoryTests,NumberTheoryTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\NumberTheoryTests\NumberTheoryTest.cs,TestIsPerfectSquare64,The following statement contains a magic number: Assert.That(!IntegerTheory.IsPerfectSquare((long)-4)' "-4 (-)");
Magic Number,Iridium.Test.PolynomialTests,PolynomialTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\PolynomialTests\PolynomialTest.cs,TestPolynomial_Additive,The following statement contains a magic number: Polynomial p1 = new Polynomial(new double[] { -1' 0' 2 });
Magic Number,Iridium.Test.PolynomialTests,PolynomialTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\PolynomialTests\PolynomialTest.cs,TestPolynomial_Additive,The following statement contains a magic number: Polynomial p2 = new Polynomial(new double[] { 4 });
Magic Number,Iridium.Test.PolynomialTests,PolynomialTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\PolynomialTests\PolynomialTest.cs,TestPolynomial_Additive,The following statement contains a magic number: Polynomial p3 = new Polynomial(new double[] { -2' 0' 2 });
Magic Number,Iridium.Test.PolynomialTests,PolynomialTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\PolynomialTests\PolynomialTest.cs,TestPolynomial_Additive,The following statement contains a magic number: Polynomial p3 = new Polynomial(new double[] { -2' 0' 2 });
Magic Number,Iridium.Test.PolynomialTests,PolynomialTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\PolynomialTests\PolynomialTest.cs,TestPolynomial_Additive,The following statement contains a magic number: Assert.That(p1.Order' Is.EqualTo(2)' "P1 Order");
Magic Number,Iridium.Test.PolynomialTests,PolynomialTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\PolynomialTests\PolynomialTest.cs,TestPolynomial_Additive,The following statement contains a magic number: Assert.That(p3.Order' Is.EqualTo(2)' "P3 Order");
Magic Number,Iridium.Test.PolynomialTests,PolynomialTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\PolynomialTests\PolynomialTest.cs,TestPolynomial_Additive,The following statement contains a magic number: Assert.That(r1.Order' Is.EqualTo(2)' "R1 Order");
Magic Number,Iridium.Test.PolynomialTests,PolynomialTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\PolynomialTests\PolynomialTest.cs,TestPolynomial_Additive,The following statement contains a magic number: Assert.That(r4.Order' Is.EqualTo(2)' "R4 Order");
Magic Number,Iridium.Test.PolynomialTests,PolynomialTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\PolynomialTests\PolynomialTest.cs,TestPolynomial_Additive,The following statement contains a magic number: Assert.That(r5.Order' Is.EqualTo(2)' "R5 Order");
Magic Number,Iridium.Test.PolynomialTests,PolynomialTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\PolynomialTests\PolynomialTest.cs,TestPolynomial_Additive,The following statement contains a magic number: Assert.That(r6.Order' Is.EqualTo(2)' "R6 Order");
Magic Number,Iridium.Test.PolynomialTests,PolynomialTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\PolynomialTests\PolynomialTest.cs,TestPolynomial_Additive,The following statement contains a magic number: Assert.That(r7.Order' Is.EqualTo(2)' "R7 Order");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TDIST,The following statement contains a magic number: switch(tails)              {                  case 1:                      return 1d - dist.CumulativeDistribution(x);                  case 2:                      return 1d - dist.CumulativeDistribution(x) + dist.CumulativeDistribution(-x);                  default:                      throw new ArgumentOutOfRangeException("tails");              }
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(0' 2' 1)' NumericIs.AlmostEqualTo(5.000000000000000E-01' 1e-8)' "A1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(0' 2' 1)' NumericIs.AlmostEqualTo(5.000000000000000E-01' 1e-8)' "A1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(0' 2' 1)' NumericIs.AlmostEqualTo(5.000000000000000E-01' 1e-8)' "A1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(0.25' 2' 1)' NumericIs.AlmostEqualTo(4.129611720298140E-01' 1e-8)' "B1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(0.25' 2' 1)' NumericIs.AlmostEqualTo(4.129611720298140E-01' 1e-8)' "B1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(0.25' 2' 1)' NumericIs.AlmostEqualTo(4.129611720298140E-01' 1e-8)' "B1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(0.25' 2' 1)' NumericIs.AlmostEqualTo(4.129611720298140E-01' 1e-8)' "B1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(0.5' 2' 1)' NumericIs.AlmostEqualTo(3.333333333480060E-01' 1e-8)' "C1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(0.5' 2' 1)' NumericIs.AlmostEqualTo(3.333333333480060E-01' 1e-8)' "C1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(0.5' 2' 1)' NumericIs.AlmostEqualTo(3.333333333480060E-01' 1e-8)' "C1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(0.5' 2' 1)' NumericIs.AlmostEqualTo(3.333333333480060E-01' 1e-8)' "C1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(1' 2' 1)' NumericIs.AlmostEqualTo(2.113248654306010E-01' 1e-8)' "D1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(1' 2' 1)' NumericIs.AlmostEqualTo(2.113248654306010E-01' 1e-8)' "D1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(1' 2' 1)' NumericIs.AlmostEqualTo(2.113248654306010E-01' 1e-8)' "D1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(2' 2' 1)' NumericIs.AlmostEqualTo(9.175170951687770E-02' 1e-8)' "E1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(2' 2' 1)' NumericIs.AlmostEqualTo(9.175170951687770E-02' 1e-8)' "E1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(2' 2' 1)' NumericIs.AlmostEqualTo(9.175170951687770E-02' 1e-8)' "E1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(2' 2' 1)' NumericIs.AlmostEqualTo(9.175170951687770E-02' 1e-8)' "E1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(10' 2' 1)' NumericIs.AlmostEqualTo(4.926228511229080E-03' 1e-8)' "F1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(10' 2' 1)' NumericIs.AlmostEqualTo(4.926228511229080E-03' 1e-8)' "F1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(10' 2' 1)' NumericIs.AlmostEqualTo(4.926228511229080E-03' 1e-8)' "F1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(10' 2' 1)' NumericIs.AlmostEqualTo(4.926228511229080E-03' 1e-8)' "F1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(0' 2' 2)' NumericIs.AlmostEqualTo(1.000000000000000E+00' 1e-8)' "A2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(0' 2' 2)' NumericIs.AlmostEqualTo(1.000000000000000E+00' 1e-8)' "A2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(0' 2' 2)' NumericIs.AlmostEqualTo(1.000000000000000E+00' 1e-8)' "A2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(0.25' 2' 2)' NumericIs.AlmostEqualTo(8.259223440596280E-01' 1e-8)' "B2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(0.25' 2' 2)' NumericIs.AlmostEqualTo(8.259223440596280E-01' 1e-8)' "B2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(0.25' 2' 2)' NumericIs.AlmostEqualTo(8.259223440596280E-01' 1e-8)' "B2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(0.25' 2' 2)' NumericIs.AlmostEqualTo(8.259223440596280E-01' 1e-8)' "B2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(0.25' 2' 2)' NumericIs.AlmostEqualTo(8.259223440596280E-01' 1e-8)' "B2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(0.5' 2' 2)' NumericIs.AlmostEqualTo(6.666666666960120E-01' 1e-8)' "C2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(0.5' 2' 2)' NumericIs.AlmostEqualTo(6.666666666960120E-01' 1e-8)' "C2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(0.5' 2' 2)' NumericIs.AlmostEqualTo(6.666666666960120E-01' 1e-8)' "C2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(0.5' 2' 2)' NumericIs.AlmostEqualTo(6.666666666960120E-01' 1e-8)' "C2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(0.5' 2' 2)' NumericIs.AlmostEqualTo(6.666666666960120E-01' 1e-8)' "C2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(1' 2' 2)' NumericIs.AlmostEqualTo(4.226497308612030E-01' 1e-8)' "D2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(1' 2' 2)' NumericIs.AlmostEqualTo(4.226497308612030E-01' 1e-8)' "D2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(1' 2' 2)' NumericIs.AlmostEqualTo(4.226497308612030E-01' 1e-8)' "D2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(1' 2' 2)' NumericIs.AlmostEqualTo(4.226497308612030E-01' 1e-8)' "D2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(2' 2' 2)' NumericIs.AlmostEqualTo(1.835034190337550E-01' 1e-8)' "E2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(2' 2' 2)' NumericIs.AlmostEqualTo(1.835034190337550E-01' 1e-8)' "E2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(2' 2' 2)' NumericIs.AlmostEqualTo(1.835034190337550E-01' 1e-8)' "E2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(2' 2' 2)' NumericIs.AlmostEqualTo(1.835034190337550E-01' 1e-8)' "E2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(2' 2' 2)' NumericIs.AlmostEqualTo(1.835034190337550E-01' 1e-8)' "E2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(10' 2' 2)' NumericIs.AlmostEqualTo(9.852457022458160E-03' 1e-8)' "F2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(10' 2' 2)' NumericIs.AlmostEqualTo(9.852457022458160E-03' 1e-8)' "F2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(10' 2' 2)' NumericIs.AlmostEqualTo(9.852457022458160E-03' 1e-8)' "F2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(10' 2' 2)' NumericIs.AlmostEqualTo(9.852457022458160E-03' 1e-8)' "F2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestTDIST,The following statement contains a magic number: Assert.That(TDIST(10' 2' 2)' NumericIs.AlmostEqualTo(9.852457022458160E-03' 1e-8)' "F2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(0' 2' 1.5' true)' NumericIs.AlmostEqualTo(0.000000000000000E+00' 1e-8)' "A1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(0' 2' 1.5' true)' NumericIs.AlmostEqualTo(0.000000000000000E+00' 1e-8)' "A1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(0' 2' 1.5' true)' NumericIs.AlmostEqualTo(0.000000000000000E+00' 1e-8)' "A1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(0.25' 2' 1.5' true)' NumericIs.AlmostEqualTo(1.243798761594900E-02' 1e-8)' "B1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(0.25' 2' 1.5' true)' NumericIs.AlmostEqualTo(1.243798761594900E-02' 1e-8)' "B1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(0.25' 2' 1.5' true)' NumericIs.AlmostEqualTo(1.243798761594900E-02' 1e-8)' "B1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(0.25' 2' 1.5' true)' NumericIs.AlmostEqualTo(1.243798761594900E-02' 1e-8)' "B1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(0.25' 2' 1.5' true)' NumericIs.AlmostEqualTo(1.243798761594900E-02' 1e-8)' "B1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(0.5' 2' 1.5' true)' NumericIs.AlmostEqualTo(4.462491913500840E-02' 1e-8)' "C1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(0.5' 2' 1.5' true)' NumericIs.AlmostEqualTo(4.462491913500840E-02' 1e-8)' "C1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(0.5' 2' 1.5' true)' NumericIs.AlmostEqualTo(4.462491913500840E-02' 1e-8)' "C1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(0.5' 2' 1.5' true)' NumericIs.AlmostEqualTo(4.462491913500840E-02' 1e-8)' "C1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(0.5' 2' 1.5' true)' NumericIs.AlmostEqualTo(4.462491913500840E-02' 1e-8)' "C1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(1' 2' 1.5' true)' NumericIs.AlmostEqualTo(1.443047990137690E-01' 1e-6)' "D1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(1' 2' 1.5' true)' NumericIs.AlmostEqualTo(1.443047990137690E-01' 1e-6)' "D1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(1' 2' 1.5' true)' NumericIs.AlmostEqualTo(1.443047990137690E-01' 1e-6)' "D1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(1' 2' 1.5' true)' NumericIs.AlmostEqualTo(1.443047990137690E-01' 1e-6)' "D1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(2' 2' 1.5' true)' NumericIs.AlmostEqualTo(3.849400091283540E-01' 1e-8)' "E1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(2' 2' 1.5' true)' NumericIs.AlmostEqualTo(3.849400091283540E-01' 1e-8)' "E1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(2' 2' 1.5' true)' NumericIs.AlmostEqualTo(3.849400091283540E-01' 1e-8)' "E1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(2' 2' 1.5' true)' NumericIs.AlmostEqualTo(3.849400091283540E-01' 1e-8)' "E1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(2' 2' 1.5' true)' NumericIs.AlmostEqualTo(3.849400091283540E-01' 1e-8)' "E1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(10' 2' 1.5' true)' NumericIs.AlmostEqualTo(9.902431408555580E-01' 1e-8)' "F1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(10' 2' 1.5' true)' NumericIs.AlmostEqualTo(9.902431408555580E-01' 1e-8)' "F1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(10' 2' 1.5' true)' NumericIs.AlmostEqualTo(9.902431408555580E-01' 1e-8)' "F1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(10' 2' 1.5' true)' NumericIs.AlmostEqualTo(9.902431408555580E-01' 1e-8)' "F1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(10' 2' 1.5' true)' NumericIs.AlmostEqualTo(9.902431408555580E-01' 1e-8)' "F1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(0' 2' 1.5' false)' NumericIs.AlmostEqualTo(0.000000000000000E+00' 1e-8)' "A2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(0' 2' 1.5' false)' NumericIs.AlmostEqualTo(0.000000000000000E+00' 1e-8)' "A2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(0' 2' 1.5' false)' NumericIs.AlmostEqualTo(0.000000000000000E+00' 1e-8)' "A2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(0.25' 2' 1.5' false)' NumericIs.AlmostEqualTo(9.405352499591280E-02' 1e-8)' "B2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(0.25' 2' 1.5' false)' NumericIs.AlmostEqualTo(9.405352499591280E-02' 1e-8)' "B2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(0.25' 2' 1.5' false)' NumericIs.AlmostEqualTo(9.405352499591280E-02' 1e-8)' "B2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(0.25' 2' 1.5' false)' NumericIs.AlmostEqualTo(9.405352499591280E-02' 1e-8)' "B2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(0.25' 2' 1.5' false)' NumericIs.AlmostEqualTo(9.405352499591280E-02' 1e-8)' "B2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(0.5' 2' 1.5' false)' NumericIs.AlmostEqualTo(1.592291801411650E-01' 1e-8)' "C2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(0.5' 2' 1.5' false)' NumericIs.AlmostEqualTo(1.592291801411650E-01' 1e-8)' "C2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(0.5' 2' 1.5' false)' NumericIs.AlmostEqualTo(1.592291801411650E-01' 1e-8)' "C2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(0.5' 2' 1.5' false)' NumericIs.AlmostEqualTo(1.592291801411650E-01' 1e-8)' "C2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(0.5' 2' 1.5' false)' NumericIs.AlmostEqualTo(1.592291801411650E-01' 1e-8)' "C2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(1' 2' 1.5' false)' NumericIs.AlmostEqualTo(2.281853862562790E-01' 1e-8)' "D2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(1' 2' 1.5' false)' NumericIs.AlmostEqualTo(2.281853862562790E-01' 1e-8)' "D2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(1' 2' 1.5' false)' NumericIs.AlmostEqualTo(2.281853862562790E-01' 1e-8)' "D2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(1' 2' 1.5' false)' NumericIs.AlmostEqualTo(2.281853862562790E-01' 1e-8)' "D2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(2' 2' 1.5' false)' NumericIs.AlmostEqualTo(2.343085672340750E-01' 1e-8)' "E2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(2' 2' 1.5' false)' NumericIs.AlmostEqualTo(2.343085672340750E-01' 1e-8)' "E2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(2' 2' 1.5' false)' NumericIs.AlmostEqualTo(2.343085672340750E-01' 1e-8)' "E2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(2' 2' 1.5' false)' NumericIs.AlmostEqualTo(2.343085672340750E-01' 1e-8)' "E2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(2' 2' 1.5' false)' NumericIs.AlmostEqualTo(2.343085672340750E-01' 1e-8)' "E2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(10' 2' 1.5' false)' NumericIs.AlmostEqualTo(5.656150228662040E-03' 1e-8)' "F2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(10' 2' 1.5' false)' NumericIs.AlmostEqualTo(5.656150228662040E-03' 1e-8)' "F2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(10' 2' 1.5' false)' NumericIs.AlmostEqualTo(5.656150228662040E-03' 1e-8)' "F2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(10' 2' 1.5' false)' NumericIs.AlmostEqualTo(5.656150228662040E-03' 1e-8)' "F2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMADIST,The following statement contains a magic number: Assert.That(GAMMADIST(10' 2' 1.5' false)' NumericIs.AlmostEqualTo(5.656150228662040E-03' 1e-8)' "F2");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0' 2' 1.5)' NumericIs.AlmostEqualTo(0.000000000000000E+00' 1e-8)' "A1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0' 2' 1.5)' NumericIs.AlmostEqualTo(0.000000000000000E+00' 1e-8)' "A1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0' 2' 1.5)' NumericIs.AlmostEqualTo(0.000000000000000E+00' 1e-8)' "A1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0.01' 2' 1.5)' NumericIs.AlmostEqualTo(2.228321104302450E-01' 1e-8)' "B1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0.01' 2' 1.5)' NumericIs.AlmostEqualTo(2.228321104302450E-01' 1e-8)' "B1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0.01' 2' 1.5)' NumericIs.AlmostEqualTo(2.228321104302450E-01' 1e-8)' "B1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0.01' 2' 1.5)' NumericIs.AlmostEqualTo(2.228321104302450E-01' 1e-8)' "B1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0.01' 2' 1.5)' NumericIs.AlmostEqualTo(2.228321104302450E-01' 1e-8)' "B1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0.25' 2' 1.5)' NumericIs.AlmostEqualTo(1.441918172091760E+00' 1e-6)' "C1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0.25' 2' 1.5)' NumericIs.AlmostEqualTo(1.441918172091760E+00' 1e-6)' "C1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0.25' 2' 1.5)' NumericIs.AlmostEqualTo(1.441918172091760E+00' 1e-6)' "C1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0.25' 2' 1.5)' NumericIs.AlmostEqualTo(1.441918172091760E+00' 1e-6)' "C1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0.25' 2' 1.5)' NumericIs.AlmostEqualTo(1.441918172091760E+00' 1e-6)' "C1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0.5' 2' 1.5)' NumericIs.AlmostEqualTo(2.517520501047540E+00' 1e-8)' "D1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0.5' 2' 1.5)' NumericIs.AlmostEqualTo(2.517520501047540E+00' 1e-8)' "D1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0.5' 2' 1.5)' NumericIs.AlmostEqualTo(2.517520501047540E+00' 1e-8)' "D1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0.5' 2' 1.5)' NumericIs.AlmostEqualTo(2.517520501047540E+00' 1e-8)' "D1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0.5' 2' 1.5)' NumericIs.AlmostEqualTo(2.517520501047540E+00' 1e-8)' "D1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0.75' 2' 1.5)' NumericIs.AlmostEqualTo(4.038951793510970E+00' 1e-8)' "E1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0.75' 2' 1.5)' NumericIs.AlmostEqualTo(4.038951793510970E+00' 1e-8)' "E1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0.75' 2' 1.5)' NumericIs.AlmostEqualTo(4.038951793510970E+00' 1e-8)' "E1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0.75' 2' 1.5)' NumericIs.AlmostEqualTo(4.038951793510970E+00' 1e-8)' "E1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0.75' 2' 1.5)' NumericIs.AlmostEqualTo(4.038951793510970E+00' 1e-8)' "E1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0.99' 2' 1.5)' NumericIs.AlmostEqualTo(9.957528102138740E+00' 1e-8)' "F1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0.99' 2' 1.5)' NumericIs.AlmostEqualTo(9.957528102138740E+00' 1e-8)' "F1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0.99' 2' 1.5)' NumericIs.AlmostEqualTo(9.957528102138740E+00' 1e-8)' "F1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0.99' 2' 1.5)' NumericIs.AlmostEqualTo(9.957528102138740E+00' 1e-8)' "F1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0.99' 2' 1.5)' NumericIs.AlmostEqualTo(9.957528102138740E+00' 1e-8)' "F1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0.9999' 2' 1.5)' NumericIs.AlmostEqualTo(1.763455683388200E+01' 1e-8)' "G1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0.9999' 2' 1.5)' NumericIs.AlmostEqualTo(1.763455683388200E+01' 1e-8)' "G1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0.9999' 2' 1.5)' NumericIs.AlmostEqualTo(1.763455683388200E+01' 1e-8)' "G1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0.9999' 2' 1.5)' NumericIs.AlmostEqualTo(1.763455683388200E+01' 1e-8)' "G1");
Magic Number,Iridium.Test.SpecialFunctionsTests,ExcelStatisticsTests,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\ExcelStatisticsTests.cs,TestGAMMAINV,The following statement contains a magic number: Assert.That(GAMMAINV(0.9999' 2' 1.5)' NumericIs.AlmostEqualTo(1.763455683388200E+01' 1e-8)' "G1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_IntLog2,The following statement contains a magic number: Assert.That(Fn.IntLog2(2)' Is.EqualTo(1)' "B");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_IntLog2,The following statement contains a magic number: Assert.That(Fn.IntLog2(3)' Is.EqualTo(2)' "C");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_IntLog2,The following statement contains a magic number: Assert.That(Fn.IntLog2(3)' Is.EqualTo(2)' "C");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_IntLog2,The following statement contains a magic number: Assert.That(Fn.IntLog2(4)' Is.EqualTo(2)' "D");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_IntLog2,The following statement contains a magic number: Assert.That(Fn.IntLog2(4)' Is.EqualTo(2)' "D");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_IntLog2,The following statement contains a magic number: int pow = (int)Math.Pow(2.0' i);
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_IntLog2,The following statement contains a magic number: i < 31
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_IntLog2,The following statement contains a magic number: Assert.That(Fn.IntLog2(int.MaxValue)' Is.EqualTo(31)' "Y");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_IntLog2,The following statement contains a magic number: Assert.That(Fn.IntLog2(int.MaxValue - 1)' Is.EqualTo(31)' "Z");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_FloorToPowerOf2,The following statement contains a magic number: Assert.That(Fn.FloorToPowerOf2(2)' Is.EqualTo(2)' "C");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_FloorToPowerOf2,The following statement contains a magic number: Assert.That(Fn.FloorToPowerOf2(2)' Is.EqualTo(2)' "C");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_FloorToPowerOf2,The following statement contains a magic number: Assert.That(Fn.FloorToPowerOf2(3)' Is.EqualTo(2)' "D");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_FloorToPowerOf2,The following statement contains a magic number: Assert.That(Fn.FloorToPowerOf2(3)' Is.EqualTo(2)' "D");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_FloorToPowerOf2,The following statement contains a magic number: Assert.That(Fn.FloorToPowerOf2(4)' Is.EqualTo(4)' "E");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_FloorToPowerOf2,The following statement contains a magic number: Assert.That(Fn.FloorToPowerOf2(4)' Is.EqualTo(4)' "E");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_FloorToPowerOf2,The following statement contains a magic number: int pow = (int)Math.Pow(2.0' i);
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_FloorToPowerOf2,The following statement contains a magic number: i < 31
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_CeilingToPowerOf2,The following statement contains a magic number: Assert.That(Fn.CeilingToPowerOf2(2)' Is.EqualTo(2)' "C");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_CeilingToPowerOf2,The following statement contains a magic number: Assert.That(Fn.CeilingToPowerOf2(2)' Is.EqualTo(2)' "C");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_CeilingToPowerOf2,The following statement contains a magic number: Assert.That(Fn.CeilingToPowerOf2(3)' Is.EqualTo(4)' "D");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_CeilingToPowerOf2,The following statement contains a magic number: Assert.That(Fn.CeilingToPowerOf2(3)' Is.EqualTo(4)' "D");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_CeilingToPowerOf2,The following statement contains a magic number: Assert.That(Fn.CeilingToPowerOf2(4)' Is.EqualTo(4)' "E");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_CeilingToPowerOf2,The following statement contains a magic number: Assert.That(Fn.CeilingToPowerOf2(4)' Is.EqualTo(4)' "E");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_CeilingToPowerOf2,The following statement contains a magic number: int pow = (int)Math.Pow(2.0' i);
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_CeilingToPowerOf2,The following statement contains a magic number: i < 31
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gcd,The following statement contains a magic number: Assert.That(Fn.Gcd(-5' 0)' Is.EqualTo(5)' "Gcd(-5'0)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gcd,The following statement contains a magic number: Assert.That(Fn.Gcd(-5' 0)' Is.EqualTo(5)' "Gcd(-5'0)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gcd,The following statement contains a magic number: Assert.That(Fn.Gcd(0' 6)' Is.EqualTo(6)' "Gcd(0'6)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gcd,The following statement contains a magic number: Assert.That(Fn.Gcd(0' 6)' Is.EqualTo(6)' "Gcd(0'6)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gcd,The following statement contains a magic number: Assert.That(Fn.Gcd(1 << 18' 1 << 20)' Is.EqualTo(1 << 18)' "Gcd(1>>18'1<<20)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gcd,The following statement contains a magic number: Assert.That(Fn.Gcd(1 << 18' 1 << 20)' Is.EqualTo(1 << 18)' "Gcd(1>>18'1<<20)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gcd,The following statement contains a magic number: Assert.That(Fn.Gcd(1 << 18' 1 << 20)' Is.EqualTo(1 << 18)' "Gcd(1>>18'1<<20)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gcd,The following statement contains a magic number: Assert.That(Fn.Gcd(7' 13)' Is.EqualTo(1)' "Gcd(7'13)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gcd,The following statement contains a magic number: Assert.That(Fn.Gcd(7' 13)' Is.EqualTo(1)' "Gcd(7'13)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gcd,The following statement contains a magic number: Assert.That(Fn.Gcd(7' 14)' Is.EqualTo(7)' "Gcd(7'14)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gcd,The following statement contains a magic number: Assert.That(Fn.Gcd(7' 14)' Is.EqualTo(7)' "Gcd(7'14)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gcd,The following statement contains a magic number: Assert.That(Fn.Gcd(7' 14)' Is.EqualTo(7)' "Gcd(7'14)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gcd,The following statement contains a magic number: Assert.That(Fn.Gcd(7' 15)' Is.EqualTo(1)' "Gcd(7'15)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gcd,The following statement contains a magic number: Assert.That(Fn.Gcd(7' 15)' Is.EqualTo(1)' "Gcd(7'15)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gcd,The following statement contains a magic number: Assert.That(Fn.Gcd(6' 15)' Is.EqualTo(3)' "Gcd(6'15)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gcd,The following statement contains a magic number: Assert.That(Fn.Gcd(6' 15)' Is.EqualTo(3)' "Gcd(6'15)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gcd,The following statement contains a magic number: Assert.That(Fn.Gcd(6' 15)' Is.EqualTo(3)' "Gcd(6'15)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GcdList,The following statement contains a magic number: Assert.That(Fn.Gcd(-100)' Is.EqualTo(100)' "Gcd(-100)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GcdList,The following statement contains a magic number: Assert.That(Fn.Gcd(-100)' Is.EqualTo(100)' "Gcd(-100)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GcdList,The following statement contains a magic number: Assert.That(Fn.Gcd(-10' 6' -8)' Is.EqualTo(2)' "Gcd(-10'6'-8)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GcdList,The following statement contains a magic number: Assert.That(Fn.Gcd(-10' 6' -8)' Is.EqualTo(2)' "Gcd(-10'6'-8)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GcdList,The following statement contains a magic number: Assert.That(Fn.Gcd(-10' 6' -8)' Is.EqualTo(2)' "Gcd(-10'6'-8)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GcdList,The following statement contains a magic number: Assert.That(Fn.Gcd(-10' 6' -8)' Is.EqualTo(2)' "Gcd(-10'6'-8)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GcdList,The following statement contains a magic number: Assert.That(Fn.Gcd(-10' 6' -8' 5' 9' 13)' Is.EqualTo(1)' "Gcd(-10'6'-8'5'9'13)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GcdList,The following statement contains a magic number: Assert.That(Fn.Gcd(-10' 6' -8' 5' 9' 13)' Is.EqualTo(1)' "Gcd(-10'6'-8'5'9'13)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GcdList,The following statement contains a magic number: Assert.That(Fn.Gcd(-10' 6' -8' 5' 9' 13)' Is.EqualTo(1)' "Gcd(-10'6'-8'5'9'13)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GcdList,The following statement contains a magic number: Assert.That(Fn.Gcd(-10' 6' -8' 5' 9' 13)' Is.EqualTo(1)' "Gcd(-10'6'-8'5'9'13)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GcdList,The following statement contains a magic number: Assert.That(Fn.Gcd(-10' 6' -8' 5' 9' 13)' Is.EqualTo(1)' "Gcd(-10'6'-8'5'9'13)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GcdList,The following statement contains a magic number: Assert.That(Fn.Gcd(-10' 6' -8' 5' 9' 13)' Is.EqualTo(1)' "Gcd(-10'6'-8'5'9'13)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GcdList,The following statement contains a magic number: Assert.That(Fn.Gcd(-10' 20' 120' 60' -15' 1000)' Is.EqualTo(5)' "Gcd(-10'20'120'60'-15'1000)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GcdList,The following statement contains a magic number: Assert.That(Fn.Gcd(-10' 20' 120' 60' -15' 1000)' Is.EqualTo(5)' "Gcd(-10'20'120'60'-15'1000)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GcdList,The following statement contains a magic number: Assert.That(Fn.Gcd(-10' 20' 120' 60' -15' 1000)' Is.EqualTo(5)' "Gcd(-10'20'120'60'-15'1000)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GcdList,The following statement contains a magic number: Assert.That(Fn.Gcd(-10' 20' 120' 60' -15' 1000)' Is.EqualTo(5)' "Gcd(-10'20'120'60'-15'1000)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GcdList,The following statement contains a magic number: Assert.That(Fn.Gcd(-10' 20' 120' 60' -15' 1000)' Is.EqualTo(5)' "Gcd(-10'20'120'60'-15'1000)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GcdList,The following statement contains a magic number: Assert.That(Fn.Gcd(-10' 20' 120' 60' -15' 1000)' Is.EqualTo(5)' "Gcd(-10'20'120'60'-15'1000)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GcdList,The following statement contains a magic number: Assert.That(Fn.Gcd(-10' 20' 120' 60' -15' 1000)' Is.EqualTo(5)' "Gcd(-10'20'120'60'-15'1000)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GcdList,The following statement contains a magic number: Assert.That(Fn.Gcd(Int64.MaxValue - 1' Int64.MaxValue - 4' Int64.MaxValue - 7)' Is.EqualTo(3)' "Gcd(Int64Max-1'Int64Max-4'Int64Max-7)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GcdList,The following statement contains a magic number: Assert.That(Fn.Gcd(Int64.MaxValue - 1' Int64.MaxValue - 4' Int64.MaxValue - 7)' Is.EqualTo(3)' "Gcd(Int64Max-1'Int64Max-4'Int64Max-7)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GcdList,The following statement contains a magic number: Assert.That(Fn.Gcd(Int64.MaxValue - 1' Int64.MaxValue - 4' Int64.MaxValue - 7)' Is.EqualTo(3)' "Gcd(Int64Max-1'Int64Max-4'Int64Max-7)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GcdList,The following statement contains a magic number: Assert.That(Fn.Gcd(492' -2 * 492' 492 / 4)' Is.EqualTo(123)' "Gcd(492' -984' 123)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GcdList,The following statement contains a magic number: Assert.That(Fn.Gcd(492' -2 * 492' 492 / 4)' Is.EqualTo(123)' "Gcd(492' -984' 123)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GcdList,The following statement contains a magic number: Assert.That(Fn.Gcd(492' -2 * 492' 492 / 4)' Is.EqualTo(123)' "Gcd(492' -984' 123)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GcdList,The following statement contains a magic number: Assert.That(Fn.Gcd(492' -2 * 492' 492 / 4)' Is.EqualTo(123)' "Gcd(492' -984' 123)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GcdList,The following statement contains a magic number: Assert.That(Fn.Gcd(492' -2 * 492' 492 / 4)' Is.EqualTo(123)' "Gcd(492' -984' 123)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GcdList,The following statement contains a magic number: Assert.That(Fn.Gcd(492' -2 * 492' 492 / 4)' Is.EqualTo(123)' "Gcd(492' -984' 123)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Lcm,The following statement contains a magic number: Assert.That(Fn.Lcm(10' 10)' Is.EqualTo(10)' "Lcm(10'10)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Lcm,The following statement contains a magic number: Assert.That(Fn.Lcm(10' 10)' Is.EqualTo(10)' "Lcm(10'10)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Lcm,The following statement contains a magic number: Assert.That(Fn.Lcm(10' 10)' Is.EqualTo(10)' "Lcm(10'10)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Lcm,The following statement contains a magic number: Assert.That(Fn.Lcm(0' 10)' Is.EqualTo(0)' "Lcm(0'10)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Lcm,The following statement contains a magic number: Assert.That(Fn.Lcm(10' 0)' Is.EqualTo(0)' "Lcm(10'0)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Lcm,The following statement contains a magic number: Assert.That(Fn.Lcm(11' 7)' Is.EqualTo(77)' "Lcm(11'7)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Lcm,The following statement contains a magic number: Assert.That(Fn.Lcm(11' 7)' Is.EqualTo(77)' "Lcm(11'7)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Lcm,The following statement contains a magic number: Assert.That(Fn.Lcm(11' 7)' Is.EqualTo(77)' "Lcm(11'7)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Lcm,The following statement contains a magic number: Assert.That(Fn.Lcm(11' 33)' Is.EqualTo(33)' "Lcm(11'33)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Lcm,The following statement contains a magic number: Assert.That(Fn.Lcm(11' 33)' Is.EqualTo(33)' "Lcm(11'33)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Lcm,The following statement contains a magic number: Assert.That(Fn.Lcm(11' 33)' Is.EqualTo(33)' "Lcm(11'33)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Lcm,The following statement contains a magic number: Assert.That(Fn.Lcm(11' 34)' Is.EqualTo(374)' "Lcm(11'34)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Lcm,The following statement contains a magic number: Assert.That(Fn.Lcm(11' 34)' Is.EqualTo(374)' "Lcm(11'34)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Lcm,The following statement contains a magic number: Assert.That(Fn.Lcm(11' 34)' Is.EqualTo(374)' "Lcm(11'34)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Lcm,The following statement contains a magic number: Assert.That(Fn.Lcm(11' -32)' Is.EqualTo(352)' "Lcm(11'-32)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Lcm,The following statement contains a magic number: Assert.That(Fn.Lcm(11' -32)' Is.EqualTo(352)' "Lcm(11'-32)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Lcm,The following statement contains a magic number: Assert.That(Fn.Lcm(11' -32)' Is.EqualTo(352)' "Lcm(11'-32)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(-100)' Is.EqualTo(100)' "Lcm(-100)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(-100)' Is.EqualTo(100)' "Lcm(-100)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(-10' 6' -8)' Is.EqualTo(120)' "Lcm(-10'6'-8)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(-10' 6' -8)' Is.EqualTo(120)' "Lcm(-10'6'-8)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(-10' 6' -8)' Is.EqualTo(120)' "Lcm(-10'6'-8)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(-10' 6' -8)' Is.EqualTo(120)' "Lcm(-10'6'-8)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(-10' 6' -8' 5' 9' 13)' Is.EqualTo(4680)' "Lcm(-10'6'-8'5'9'13)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(-10' 6' -8' 5' 9' 13)' Is.EqualTo(4680)' "Lcm(-10'6'-8'5'9'13)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(-10' 6' -8' 5' 9' 13)' Is.EqualTo(4680)' "Lcm(-10'6'-8'5'9'13)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(-10' 6' -8' 5' 9' 13)' Is.EqualTo(4680)' "Lcm(-10'6'-8'5'9'13)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(-10' 6' -8' 5' 9' 13)' Is.EqualTo(4680)' "Lcm(-10'6'-8'5'9'13)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(-10' 6' -8' 5' 9' 13)' Is.EqualTo(4680)' "Lcm(-10'6'-8'5'9'13)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(-10' 6' -8' 5' 9' 13)' Is.EqualTo(4680)' "Lcm(-10'6'-8'5'9'13)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(-10' 20' 120' 60' -15' 1000)' Is.EqualTo(3000)' "Lcm(-10'20'120'60'-15'1000)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(-10' 20' 120' 60' -15' 1000)' Is.EqualTo(3000)' "Lcm(-10'20'120'60'-15'1000)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(-10' 20' 120' 60' -15' 1000)' Is.EqualTo(3000)' "Lcm(-10'20'120'60'-15'1000)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(-10' 20' 120' 60' -15' 1000)' Is.EqualTo(3000)' "Lcm(-10'20'120'60'-15'1000)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(-10' 20' 120' 60' -15' 1000)' Is.EqualTo(3000)' "Lcm(-10'20'120'60'-15'1000)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(-10' 20' 120' 60' -15' 1000)' Is.EqualTo(3000)' "Lcm(-10'20'120'60'-15'1000)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(-10' 20' 120' 60' -15' 1000)' Is.EqualTo(3000)' "Lcm(-10'20'120'60'-15'1000)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(492' -2 * 492' 492 / 4)' Is.EqualTo(984)' "Lcm(492' -984' 123)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(492' -2 * 492' 492 / 4)' Is.EqualTo(984)' "Lcm(492' -984' 123)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(492' -2 * 492' 492 / 4)' Is.EqualTo(984)' "Lcm(492' -984' 123)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(492' -2 * 492' 492 / 4)' Is.EqualTo(984)' "Lcm(492' -984' 123)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(492' -2 * 492' 492 / 4)' Is.EqualTo(984)' "Lcm(492' -984' 123)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(492' -2 * 492' 492 / 4)' Is.EqualTo(984)' "Lcm(492' -984' 123)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(32' 42' 36' 18)' Is.EqualTo(2016)' "Lcm(32'42'36'18)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(32' 42' 36' 18)' Is.EqualTo(2016)' "Lcm(32'42'36'18)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(32' 42' 36' 18)' Is.EqualTo(2016)' "Lcm(32'42'36'18)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(32' 42' 36' 18)' Is.EqualTo(2016)' "Lcm(32'42'36'18)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(32' 42' 36' 18)' Is.EqualTo(2016)' "Lcm(32'42'36'18)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(32' 42' 36' 18)' Is.EqualTo(2016)' "Lcm(32'42'36'18)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(32' 42' 36' 18)' Is.EqualTo(2016)' "Lcm(32'42'36'18)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(32' 42' 36' 18)' Is.EqualTo(2016)' "Lcm(32'42'36'18)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(32' 42' 36' 18)' Is.EqualTo(2016)' "Lcm(32'42'36'18)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_LcmList,The following statement contains a magic number: Assert.That(Fn.Lcm(32' 42' 36' 18)' Is.EqualTo(2016)' "Lcm(32'42'36'18)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_SpecialPoints,The following statement contains a magic number: Assert.That(Fn.GammaLn(2)' NumericIs.AlmostEqualTo(0.0)' "A2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_SpecialPoints,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.461632145)' NumericIs.AlmostEqualTo(-.1214862905' 1e-9)' "A3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_SpecialPoints,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.461632145)' NumericIs.AlmostEqualTo(-.1214862905' 1e-9)' "A3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_SpecialPoints,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.461632145)' NumericIs.AlmostEqualTo(-.1214862905' 1e-9)' "A3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_SpecialPoints,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.2)' NumericIs.AlmostEqualTo(-0.08537409000331584971970284)' "A4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_SpecialPoints,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.2)' NumericIs.AlmostEqualTo(-0.08537409000331584971970284)' "A4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_SpecialPoints,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.8)' NumericIs.AlmostEqualTo(-0.07108387291437216698800249)' "A5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_SpecialPoints,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.8)' NumericIs.AlmostEqualTo(-0.07108387291437216698800249)' "A5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_SpecialPoints,The following statement contains a magic number: Assert.That(Fn.GammaLn(-2.0)' Is.EqualTo(double.PositiveInfinity)' "A8");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_SpecialPoints,The following statement contains a magic number: Assert.That(Fn.GammaLn(-10.0)' Is.EqualTo(double.PositiveInfinity)' "A9");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_SpecialPoints,The following statement contains a magic number: Assert.That(Fn.GammaLn(-100.0)' Is.EqualTo(double.PositiveInfinity)' "A10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_SpecialPoints,The following statement contains a magic number: Assert.That(Fn.GammaLn(-100.1)' Is.Not.EqualTo(double.PositiveInfinity)' "A11");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_SpecialPoints,The following statement contains a magic number: Assert.That(Fn.GammaLn(-99.9)' Is.Not.EqualTo(double.PositiveInfinity)' "A12");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_SpecialPoints,The following statement contains a magic number: Assert.That(Fn.GammaLn(-100000)' Is.EqualTo(double.PositiveInfinity)' "A13");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_SpecialPoints,The following statement contains a magic number: Assert.That(Fn.GammaLn(Number.Increment(13))' NumericIs.AlmostEqualTo(Fn.GammaLn(13))' "13+");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_SpecialPoints,The following statement contains a magic number: Assert.That(Fn.GammaLn(Number.Increment(13))' NumericIs.AlmostEqualTo(Fn.GammaLn(13))' "13+");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_SpecialPoints,The following statement contains a magic number: Assert.That(Fn.GammaLn(Number.Decrement(13))' NumericIs.AlmostEqualTo(Fn.GammaLn(13))' "13-");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_SpecialPoints,The following statement contains a magic number: Assert.That(Fn.GammaLn(Number.Decrement(13))' NumericIs.AlmostEqualTo(Fn.GammaLn(13))' "13-");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_SpecialPoints,The following statement contains a magic number: Assert.That(Fn.GammaLn(Number.Increment(34))' NumericIs.AlmostEqualTo(Fn.GammaLn(34))' "34+");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_SpecialPoints,The following statement contains a magic number: Assert.That(Fn.GammaLn(Number.Increment(34))' NumericIs.AlmostEqualTo(Fn.GammaLn(34))' "34+");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_SpecialPoints,The following statement contains a magic number: Assert.That(Fn.GammaLn(Number.Decrement(34))' NumericIs.AlmostEqualTo(Fn.GammaLn(34))' "34-");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_SpecialPoints,The following statement contains a magic number: Assert.That(Fn.GammaLn(Number.Decrement(34))' NumericIs.AlmostEqualTo(Fn.GammaLn(34))' "34-");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-1)' NumericIs.AlmostEqualTo(2.252712651734205959869702)' "A1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-1)' NumericIs.AlmostEqualTo(2.252712651734205959869702)' "A1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-2)' NumericIs.AlmostEqualTo(4.599479878042021722513945)' "A2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-2)' NumericIs.AlmostEqualTo(4.599479878042021722513945)' "A2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-3)' NumericIs.AlmostEqualTo(6.907178885383853682512345)' "A3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-3)' NumericIs.AlmostEqualTo(6.907178885383853682512345)' "A3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-4)' NumericIs.AlmostEqualTo(9.210282658633962258448658)' "A4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-4)' NumericIs.AlmostEqualTo(9.210282658633962258448658)' "A4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-5)' NumericIs.AlmostEqualTo(11.51291969289582570742083)' "A5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-5)' NumericIs.AlmostEqualTo(11.51291969289582570742083)' "A5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-6)' NumericIs.AlmostEqualTo(13.81550998074943166920783)' "A6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-6)' NumericIs.AlmostEqualTo(13.81550998074943166920783)' "A6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-7)' NumericIs.AlmostEqualTo(16.11809559323676152264259)' "A7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-7)' NumericIs.AlmostEqualTo(16.11809559323676152264259)' "A7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-8)' NumericIs.AlmostEqualTo(18.42068073818020890537531)' "A8");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-8)' NumericIs.AlmostEqualTo(18.42068073818020890537531)' "A8");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-10)' NumericIs.AlmostEqualTo(23.02585092988273527369799)' "A10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-10)' NumericIs.AlmostEqualTo(23.02585092988273527369799)' "A10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-15)' NumericIs.AlmostEqualTo(34.53877639491068468305421)' "A15");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-15)' NumericIs.AlmostEqualTo(34.53877639491068468305421)' "A15");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-20)' NumericIs.AlmostEqualTo(46.05170185988091368035406)' "A20");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-20)' NumericIs.AlmostEqualTo(46.05170185988091368035406)' "A20");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-50)' NumericIs.AlmostEqualTo(115.1292546497022842008996)' "A50");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-50)' NumericIs.AlmostEqualTo(115.1292546497022842008996)' "A50");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-100)' NumericIs.AlmostEqualTo(230.2585092994045684017991)' "A100");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-100)' NumericIs.AlmostEqualTo(230.2585092994045684017991)' "A100");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-150)' NumericIs.AlmostEqualTo(345.3877639491068526026987)' "A150");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-150)' NumericIs.AlmostEqualTo(345.3877639491068526026987)' "A150");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-200)' NumericIs.AlmostEqualTo(460.5170185988091368035983)' "A200");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-200)' NumericIs.AlmostEqualTo(460.5170185988091368035983)' "A200");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-300)' NumericIs.AlmostEqualTo(690.7755278982137052053974)' "A300");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e-300)' NumericIs.AlmostEqualTo(690.7755278982137052053974)' "A300");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e-1)' NumericIs.AlmostEqualTo(2.252702228029981864727227)' "B1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e-1)' NumericIs.AlmostEqualTo(2.252702228029981864727227)' "B1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e-2)' NumericIs.AlmostEqualTo(4.599469822003483708382914)' "B2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e-2)' NumericIs.AlmostEqualTo(4.599469822003483708382914)' "B2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e-3)' NumericIs.AlmostEqualTo(6.907168879678134113205166)' "B3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e-3)' NumericIs.AlmostEqualTo(6.907168879678134113205166)' "B3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e-5)' NumericIs.AlmostEqualTo(11.51290969288810545253012)' "B5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e-5)' NumericIs.AlmostEqualTo(11.51290969288810545253012)' "B5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e-10)' NumericIs.AlmostEqualTo(23.02584092993273436315149)' "B10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e-10)' NumericIs.AlmostEqualTo(23.02584092993273436315149)' "B10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e-20)' NumericIs.AlmostEqualTo(46.05169185993091334702322)' "B20");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e-20)' NumericIs.AlmostEqualTo(46.05169185993091334702322)' "B20");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e-100)' NumericIs.AlmostEqualTo(230.2584992994545680684683)' "B100");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e-100)' NumericIs.AlmostEqualTo(230.2584992994545680684683)' "B100");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e-300)' NumericIs.AlmostEqualTo(690.7755178982637048720666)' "B300");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e-300)' NumericIs.AlmostEqualTo(690.7755178982637048720666)' "B300");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e-1)' NumericIs.AlmostEqualTo(1.978272496331759309624239)' "C1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e-1)' NumericIs.AlmostEqualTo(1.978272496331759309624239)' "C1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e-2)' NumericIs.AlmostEqualTo(4.335440242151057465250438)' "C2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e-2)' NumericIs.AlmostEqualTo(4.335440242151057465250438)' "C2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e-3)' NumericIs.AlmostEqualTo(6.644642023240026191960253)' "C3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e-3)' NumericIs.AlmostEqualTo(6.644642023240026191960253)' "C3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e-5)' NumericIs.AlmostEqualTo(11.25055369683808969647734)' "C5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e-5)' NumericIs.AlmostEqualTo(11.25055369683808969647734)' "C5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e-10)' NumericIs.AlmostEqualTo(22.76348666539792775172112)' "C10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e-10)' NumericIs.AlmostEqualTo(22.76348666539792775172112)' "C10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e-20)' NumericIs.AlmostEqualTo(45.78933759541342262831683)' "C20");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e-20)' NumericIs.AlmostEqualTo(45.78933759541342262831683)' "C20");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e-100)' NumericIs.AlmostEqualTo(229.9961450349370773497636)' "C100");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e-100)' NumericIs.AlmostEqualTo(229.9961450349370773497636)' "C100");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e-300)' NumericIs.AlmostEqualTo(690.5131636337462141533619)' "C300");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e-300)' NumericIs.AlmostEqualTo(690.5131636337462141533619)' "C300");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+1)' NumericIs.AlmostEqualTo(12.80182748008146961120772)' "D1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+1)' NumericIs.AlmostEqualTo(12.80182748008146961120772)' "D1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+2)' NumericIs.AlmostEqualTo(359.1342053695753987760440)' "D2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+2)' NumericIs.AlmostEqualTo(359.1342053695753987760440)' "D2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+3)' NumericIs.AlmostEqualTo(5905.220423209181211826077)' "D3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+3)' NumericIs.AlmostEqualTo(5905.220423209181211826077)' "D3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+4)' NumericIs.AlmostEqualTo(82099.71749644237727264896)' "D4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+4)' NumericIs.AlmostEqualTo(82099.71749644237727264896)' "D4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+5)' NumericIs.AlmostEqualTo(1.051287708973656894900858e+6)' "D5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+5)' NumericIs.AlmostEqualTo(1.051287708973656894900858e+6)' "D5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+6)' NumericIs.AlmostEqualTo(1.281550456914761165997697e+7)' "D6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+6)' NumericIs.AlmostEqualTo(1.281550456914761165997697e+7)' "D6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+7)' NumericIs.AlmostEqualTo(1.511809493694739139401056e+8)' "D7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+7)' NumericIs.AlmostEqualTo(1.511809493694739139401056e+8)' "D7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+8)' NumericIs.AlmostEqualTo(1.742068066103834709276216e+9)' "D8");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+8)' NumericIs.AlmostEqualTo(1.742068066103834709276216e+9)' "D8");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+10)' NumericIs.AlmostEqualTo(2.202585092888105814700419e+11)' "D10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+10)' NumericIs.AlmostEqualTo(2.202585092888105814700419e+11)' "D10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+15)' NumericIs.AlmostEqualTo(3.353877639491066890982021e+16)' "D15");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+15)' NumericIs.AlmostEqualTo(3.353877639491066890982021e+16)' "D15");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+20)' NumericIs.AlmostEqualTo(4.505170185988091368013876e+21)' "D20");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+20)' NumericIs.AlmostEqualTo(4.505170185988091368013876e+21)' "D20");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+50)' NumericIs.AlmostEqualTo(1.141292546497022842008996e+52)' "D50");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+50)' NumericIs.AlmostEqualTo(1.141292546497022842008996e+52)' "D50");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+100)' NumericIs.AlmostEqualTo(2.292585092994045684017991e+102)' "D100");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+100)' NumericIs.AlmostEqualTo(2.292585092994045684017991e+102)' "D100");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+150)' NumericIs.AlmostEqualTo(3.443877639491068526026987e+152)' "D150");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+150)' NumericIs.AlmostEqualTo(3.443877639491068526026987e+152)' "D150");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+200)' NumericIs.AlmostEqualTo(4.595170185988091368035983e+202)' "D200");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+200)' NumericIs.AlmostEqualTo(4.595170185988091368035983e+202)' "D200");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+300)' NumericIs.AlmostEqualTo(6.897755278982137052053974e+302)' "D300");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1e+300)' NumericIs.AlmostEqualTo(6.897755278982137052053974e+302)' "D300");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e+1)' NumericIs.AlmostEqualTo(12.80205265586620612009742)' "E1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e+1)' NumericIs.AlmostEqualTo(12.80205265586620612009742)' "E1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e+2)' NumericIs.AlmostEqualTo(359.1388055364532033610289)' "E2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e+2)' NumericIs.AlmostEqualTo(359.1388055364532033610289)' "E2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e+3)' NumericIs.AlmostEqualTo(5905.289495811162541447347)' "E3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e+3)' NumericIs.AlmostEqualTo(5905.289495811162541447347)' "E3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e+5)' NumericIs.AlmostEqualTo(1.051299221899121865129278e+6)' "E5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e+5)' NumericIs.AlmostEqualTo(1.051299221899121865129278e+6)' "E5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e+10)' NumericIs.AlmostEqualTo(2.202608118744035688490926e+11)' "E10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e+10)' NumericIs.AlmostEqualTo(2.202608118744035688490926e+11)' "E10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e+20)' NumericIs.AlmostEqualTo(4.505216237694951232260973e+21)' "E20");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e+20)' NumericIs.AlmostEqualTo(4.505216237694951232260973e+21)' "E20");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e+100)' NumericIs.AlmostEqualTo(2.292608118845475622808173e+102)' "E100");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e+100)' NumericIs.AlmostEqualTo(2.292608118845475622808173e+102)' "E100");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e+300)' NumericIs.AlmostEqualTo(6.897824356535426871757837e+302)' "E300");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.00001e+300)' NumericIs.AlmostEqualTo(6.897824356535426871757837e+302)' "E300");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e+1)' NumericIs.AlmostEqualTo(19.98721449566188614951736)' "E1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e+1)' NumericIs.AlmostEqualTo(19.98721449566188614951736)' "E1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e+2)' NumericIs.AlmostEqualTo(501.2652908915792927796609)' "E2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e+2)' NumericIs.AlmostEqualTo(501.2652908915792927796609)' "E2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e+3)' NumericIs.AlmostEqualTo(8018.489349348559232219987)' "E3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e+3)' NumericIs.AlmostEqualTo(8018.489349348559232219987)' "E3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e+5)' NumericIs.AlmostEqualTo(1.400782696121213042830339e+6)' "E5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e+5)' NumericIs.AlmostEqualTo(1.400782696121213042830339e+6)' "E5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e+10)' NumericIs.AlmostEqualTo(2.897467975165781535348074e+11)' "E10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e+10)' NumericIs.AlmostEqualTo(2.897467975165781535348074e+11)' "E10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e+20)' NumericIs.AlmostEqualTo(5.890828596165292615189154e+21)' "E20");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e+20)' NumericIs.AlmostEqualTo(5.890828596165292615189154e+21)' "E20");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e+100)' NumericIs.AlmostEqualTo(2.983771356330336772899850e+102)' "E100");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e+100)' NumericIs.AlmostEqualTo(2.983771356330336772899850e+102)' "E100");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e+300)' NumericIs.AlmostEqualTo(8.970492598114855551346628e+302)' "E300");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_PositiveNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(1.3e+300)' NumericIs.AlmostEqualTo(8.970492598114855551346628e+302)' "E300");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-1)' NumericIs.AlmostEqualTo(2.368961332728788655206708)' "A1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-1)' NumericIs.AlmostEqualTo(2.368961332728788655206708)' "A1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-2)' NumericIs.AlmostEqualTo(4.611024992752801144215290)' "A2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-2)' NumericIs.AlmostEqualTo(4.611024992752801144215290)' "A2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-3)' NumericIs.AlmostEqualTo(6.908333317515028431778011)' "A3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-3)' NumericIs.AlmostEqualTo(6.908333317515028431778011)' "A3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-4)' NumericIs.AlmostEqualTo(9.210398101767743936293700)' "A4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-4)' NumericIs.AlmostEqualTo(9.210398101767743936293700)' "A4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-5)' NumericIs.AlmostEqualTo(11.51293123720912453944932)' "A5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-5)' NumericIs.AlmostEqualTo(11.51293123720912453944932)' "A5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-6)' NumericIs.AlmostEqualTo(13.81551113518076147307492)' "A6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-6)' NumericIs.AlmostEqualTo(13.81551113518076147307492)' "A6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-7)' NumericIs.AlmostEqualTo(16.11809570867989450294996)' "A7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-7)' NumericIs.AlmostEqualTo(16.11809570867989450294996)' "A7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-8)' NumericIs.AlmostEqualTo(18.42068074972452220340596)' "A8");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-8)' NumericIs.AlmostEqualTo(18.42068074972452220340596)' "A8");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-10)' NumericIs.AlmostEqualTo(23.02585092999817840667829)' "A10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-10)' NumericIs.AlmostEqualTo(23.02585092999817840667829)' "A10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-15)' NumericIs.AlmostEqualTo(34.53877639491068583748554)' "A15");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-15)' NumericIs.AlmostEqualTo(34.53877639491068583748554)' "A15");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-20)' NumericIs.AlmostEqualTo(46.05170185988091368036560)' "A20");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-20)' NumericIs.AlmostEqualTo(46.05170185988091368036560)' "A20");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-50)' NumericIs.AlmostEqualTo(115.1292546497022842008996)' "A50");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-50)' NumericIs.AlmostEqualTo(115.1292546497022842008996)' "A50");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-100)' NumericIs.AlmostEqualTo(230.2585092994045684017991)' "A100");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-100)' NumericIs.AlmostEqualTo(230.2585092994045684017991)' "A100");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-150)' NumericIs.AlmostEqualTo(345.3877639491068526026987)' "A150");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-150)' NumericIs.AlmostEqualTo(345.3877639491068526026987)' "A150");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-200)' NumericIs.AlmostEqualTo(460.5170185988091368035983)' "A200");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-200)' NumericIs.AlmostEqualTo(460.5170185988091368035983)' "A200");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-300)' NumericIs.AlmostEqualTo(690.7755278982137052053974)' "A300");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1e-300)' NumericIs.AlmostEqualTo(690.7755278982137052053974)' "A300");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.00001e-1)' NumericIs.AlmostEqualTo(2.368952087706699539440639)' "B1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.00001e-1)' NumericIs.AlmostEqualTo(2.368952087706699539440639)' "B1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.00001e-2)' NumericIs.AlmostEqualTo(4.611015052181439562964888)' "B2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.00001e-2)' NumericIs.AlmostEqualTo(4.611015052181439562964888)' "B2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.00001e-3)' NumericIs.AlmostEqualTo(6.908323323353646201900704)' "B3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.00001e-3)' NumericIs.AlmostEqualTo(6.908323323353646201900704)' "B3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.00001e-5)' NumericIs.AlmostEqualTo(11.51292123731684741756295)' "B5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.00001e-5)' NumericIs.AlmostEqualTo(11.51292123731684741756295)' "B5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.00001e-10)' NumericIs.AlmostEqualTo(23.02584093004817865056312)' "B10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.00001e-10)' NumericIs.AlmostEqualTo(23.02584093004817865056312)' "B10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.00001e-20)' NumericIs.AlmostEqualTo(46.05169185993091334703477)' "B20");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.00001e-20)' NumericIs.AlmostEqualTo(46.05169185993091334703477)' "B20");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.00001e-100)' NumericIs.AlmostEqualTo(230.2584992994545680684683)' "B100");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.00001e-100)' NumericIs.AlmostEqualTo(230.2584992994545680684683)' "B100");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.00001e-300)' NumericIs.AlmostEqualTo(690.7755178982637048720666)' "B300");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.00001e-300)' NumericIs.AlmostEqualTo(690.7755178982637048720666)' "B300");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.3e-1)' NumericIs.AlmostEqualTo(2.130124765217041905198028)' "C1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.3e-1)' NumericIs.AlmostEqualTo(2.130124765217041905198028)' "C1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.3e-2)' NumericIs.AlmostEqualTo(4.350449610205194501037890)' "C2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.3e-2)' NumericIs.AlmostEqualTo(4.350449610205194501037890)' "C2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.3e-3)' NumericIs.AlmostEqualTo(6.646142785729384394910125)' "C3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.3e-3)' NumericIs.AlmostEqualTo(6.646142785729384394910125)' "C3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.3e-5)' NumericIs.AlmostEqualTo(11.25056870444537889694439)' "C5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.3e-5)' NumericIs.AlmostEqualTo(11.25056870444537889694439)' "C5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.3e-10)' NumericIs.AlmostEqualTo(22.76348666554800382459552)' "C10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.3e-10)' NumericIs.AlmostEqualTo(22.76348666554800382459552)' "C10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.3e-20)' NumericIs.AlmostEqualTo(45.78933759541342262833184)' "C20");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.3e-20)' NumericIs.AlmostEqualTo(45.78933759541342262833184)' "C20");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.3e-100)' NumericIs.AlmostEqualTo(229.9961450349370773497636)' "C100");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.3e-100)' NumericIs.AlmostEqualTo(229.9961450349370773497636)' "C100");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.3e-300)' NumericIs.AlmostEqualTo(690.5131636337462141533619)' "C300");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(-1.3e-300)' NumericIs.AlmostEqualTo(690.5131636337462141533619)' "C300");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.2 - 1e+1)' NumericIs.AlmostEqualTo(-12.95985406357513604232074)' "C1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.2 - 1e+1)' NumericIs.AlmostEqualTo(-12.95985406357513604232074)' "C1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.2 - 1e+1)' NumericIs.AlmostEqualTo(-12.95985406357513604232074)' "C1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.2 - 1e+2)' NumericIs.AlmostEqualTo(-361.1414188196566873672899)' "C2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.2 - 1e+2)' NumericIs.AlmostEqualTo(-361.1414188196566873672899)' "C2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.2 - 1e+2)' NumericIs.AlmostEqualTo(-361.1414188196566873672899)' "C2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.2 - 1e+3)' NumericIs.AlmostEqualTo(-5909.070423939538431502831)' "C3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.2 - 1e+3)' NumericIs.AlmostEqualTo(-5909.070423939538431502831)' "C3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.2 - 1e+3)' NumericIs.AlmostEqualTo(-5909.070423939538431502831)' "C3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.2 - 1e+4)' NumericIs.AlmostEqualTo(-82105.40963723920759885737)' "C4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.2 - 1e+4)' NumericIs.AlmostEqualTo(-82105.40963723920759885737)' "C4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.2 - 1e+4)' NumericIs.AlmostEqualTo(-82105.40963723920759885737)' "C4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.2 - 1e+5)' NumericIs.AlmostEqualTo(-1.051295243189728041261483e+6)' "C5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.2 - 1e+5)' NumericIs.AlmostEqualTo(-1.051295243189728041261483e+6)' "C5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.2 - 1e+5)' NumericIs.AlmostEqualTo(-1.051295243189728041261483e+6)' "C5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.2 - 1e+6)' NumericIs.AlmostEqualTo(-1.281551394543247720078214e+7)' "C6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.2 - 1e+6)' NumericIs.AlmostEqualTo(-1.281551394543247720078214e+7)' "C6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.2 - 1e+6)' NumericIs.AlmostEqualTo(-1.281551394543247720078214e+7)' "C6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.2 - 1e+7)' NumericIs.AlmostEqualTo(-1.511809605878269258761394e+8)' "C7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.2 - 1e+7)' NumericIs.AlmostEqualTo(-1.511809605878269258761394e+8)' "C7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.2 - 1e+7)' NumericIs.AlmostEqualTo(-1.511809605878269258761394e+8)' "C7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.2 - 1e+8)' NumericIs.AlmostEqualTo(-1.742068079164255802807487e+9)' "C8");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.2 - 1e+8)' NumericIs.AlmostEqualTo(-1.742068079164255802807487e+9)' "C8");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.2 - 1e+8)' NumericIs.AlmostEqualTo(-1.742068079164255802807487e+9)' "C8");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.9999999 - 1e+1)' NumericIs.AlmostEqualTo(3.316267945701607193755103' 1e-8)' "D1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.9999999 - 1e+1)' NumericIs.AlmostEqualTo(3.316267945701607193755103' 1e-8)' "D1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.9999999 - 1e+1)' NumericIs.AlmostEqualTo(3.316267945701607193755103' 1e-8)' "D1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.9999999 - 1e+1)' NumericIs.AlmostEqualTo(3.316267945701607193755103' 1e-8)' "D1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.9999999 - 1e+2)' NumericIs.AlmostEqualTo(-343.0161101786332478626370' 1e-9)' "D2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.9999999 - 1e+2)' NumericIs.AlmostEqualTo(-343.0161101786332478626370' 1e-9)' "D2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.9999999 - 1e+2)' NumericIs.AlmostEqualTo(-343.0161101786332478626370' 1e-9)' "D2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.9999999 - 1e+2)' NumericIs.AlmostEqualTo(-343.0161101786332478626370' 1e-9)' "D2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.9999999 - 1e+3)' NumericIs.AlmostEqualTo(-5889.102328248948395158494' 1e-10)' "D3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.9999999 - 1e+3)' NumericIs.AlmostEqualTo(-5889.102328248948395158494' 1e-10)' "D3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.9999999 - 1e+3)' NumericIs.AlmostEqualTo(-5889.102328248948395158494' 1e-10)' "D3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.9999999 - 1e+3)' NumericIs.AlmostEqualTo(-5889.102328248948395158494' 1e-10)' "D3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.999 - 1e+4)' NumericIs.AlmostEqualTo(-82092.81894980888167293454' 1e-14)' "D4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.999 - 1e+4)' NumericIs.AlmostEqualTo(-82092.81894980888167293454' 1e-14)' "D4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.999 - 1e+4)' NumericIs.AlmostEqualTo(-82092.81894980888167293454' 1e-14)' "D4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.999 - 1e+4)' NumericIs.AlmostEqualTo(-82092.81894980888167293454' 1e-14)' "D4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.999 - 1e+5)' NumericIs.AlmostEqualTo(-1.051280812729653448117716e+6' 1e-14)' "D5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.999 - 1e+5)' NumericIs.AlmostEqualTo(-1.051280812729653448117716e+6' 1e-14)' "D5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.999 - 1e+5)' NumericIs.AlmostEqualTo(-1.051280812729653448117716e+6' 1e-14)' "D5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.999 - 1e+5)' NumericIs.AlmostEqualTo(-1.051280812729653448117716e+6' 1e-14)' "D5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.999 - 1e+6)' NumericIs.AlmostEqualTo(-1.281549767520619780169610e+7' 1e-14)' "D6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.999 - 1e+6)' NumericIs.AlmostEqualTo(-1.281549767520619780169610e+7' 1e-14)' "D6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.999 - 1e+6)' NumericIs.AlmostEqualTo(-1.281549767520619780169610e+7' 1e-14)' "D6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.999 - 1e+6)' NumericIs.AlmostEqualTo(-1.281549767520619780169610e+7' 1e-14)' "D6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.999 - 1e+7)' NumericIs.AlmostEqualTo(-1.511809424778350856243688e+8)' "D7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.999 - 1e+7)' NumericIs.AlmostEqualTo(-1.511809424778350856243688e+8)' "D7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaLn_NegativeNumbers,The following statement contains a magic number: Assert.That(Fn.GammaLn(0.999 - 1e+7)' NumericIs.AlmostEqualTo(-1.511809424778350856243688e+8)' "D7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(-2.0)' Is.NaN' "A3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(-20.0)' Is.NaN' "A4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(-20.0000000001)' Is.Not.NaN' "A4b");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(0.001)' NumericIs.AlmostEqualTo(999.42377248459546611)' "B1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(0.001)' NumericIs.AlmostEqualTo(999.42377248459546611)' "B1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(0.01)' NumericIs.AlmostEqualTo(99.432585119150603714)' "B2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(0.01)' NumericIs.AlmostEqualTo(99.432585119150603714)' "B2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(0.1)' NumericIs.AlmostEqualTo(9.5135076986687318363)' "B3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(0.1)' NumericIs.AlmostEqualTo(9.5135076986687318363)' "B3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(0.2)' NumericIs.AlmostEqualTo(4.5908437119988030532)' "B4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(0.2)' NumericIs.AlmostEqualTo(4.5908437119988030532)' "B4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(0.4)' NumericIs.AlmostEqualTo(2.2181595437576882231)' "B5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(0.4)' NumericIs.AlmostEqualTo(2.2181595437576882231)' "B5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(0.6)' NumericIs.AlmostEqualTo(1.4891922488128171024)' "B6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(0.6)' NumericIs.AlmostEqualTo(1.4891922488128171024)' "B6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(0.9)' NumericIs.AlmostEqualTo(1.0686287021193193549)' "B7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(0.9)' NumericIs.AlmostEqualTo(1.0686287021193193549)' "B7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(0.999)' NumericIs.AlmostEqualTo(1.0005782056293586480)' "B8");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(0.999)' NumericIs.AlmostEqualTo(1.0005782056293586480)' "B8");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(1.001)' NumericIs.AlmostEqualTo(.99942377248459546611)' "B10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(1.001)' NumericIs.AlmostEqualTo(.99942377248459546611)' "B10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(1.5)' NumericIs.AlmostEqualTo(.88622692545275801365)' "B11");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(1.5)' NumericIs.AlmostEqualTo(.88622692545275801365)' "B11");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(1.9)' NumericIs.AlmostEqualTo(.96176583190738741941)' "B12");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(1.9)' NumericIs.AlmostEqualTo(.96176583190738741941)' "B12");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(2.0)' NumericIs.AlmostEqualTo(1.0)' "B13");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(10.0)' NumericIs.AlmostEqualTo(362880.0)' "B14");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(10.0)' NumericIs.AlmostEqualTo(362880.0)' "B14");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(10.51)' NumericIs.AlmostEqualTo(1159686.4489708177739)' "B15");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(10.51)' NumericIs.AlmostEqualTo(1159686.4489708177739)' "B15");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(100)' NumericIs.AlmostEqualTo(.93326215443944152682e156)' "B16");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(100)' NumericIs.AlmostEqualTo(.93326215443944152682e156)' "B16");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(-0.01)' NumericIs.AlmostEqualTo(-100.58719796441077919' 1e-14)' "B17");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(-0.01)' NumericIs.AlmostEqualTo(-100.58719796441077919' 1e-14)' "B17");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(-0.01)' NumericIs.AlmostEqualTo(-100.58719796441077919' 1e-14)' "B17");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(-0.1)' NumericIs.AlmostEqualTo(-10.686287021193193549)' "B18");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(-0.1)' NumericIs.AlmostEqualTo(-10.686287021193193549)' "B18");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(-0.5)' NumericIs.AlmostEqualTo(-3.5449077018110320546)' "B19");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(-0.5)' NumericIs.AlmostEqualTo(-3.5449077018110320546)' "B19");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(-1.2)' NumericIs.AlmostEqualTo(4.8509571405220973902)' "B20");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(-1.2)' NumericIs.AlmostEqualTo(4.8509571405220973902)' "B20");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(-2.01)' NumericIs.AlmostEqualTo(-49.547903041431840399' 1e-13)' "B21");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(-2.01)' NumericIs.AlmostEqualTo(-49.547903041431840399' 1e-13)' "B21");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(-2.01)' NumericIs.AlmostEqualTo(-49.547903041431840399' 1e-13)' "B21");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(-100.01)' NumericIs.AlmostEqualTo(-.10234011287149294961e-155' 1e-12)' "B22");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(-100.01)' NumericIs.AlmostEqualTo(-.10234011287149294961e-155' 1e-12)' "B22");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Gamma,The following statement contains a magic number: Assert.That(Fn.Gamma(-100.01)' NumericIs.AlmostEqualTo(-.10234011287149294961e-155' 1e-12)' "B22");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularized,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0' 0.5)' NumericIs.AlmostEqualTo((double) 1)' "(0'1/2) -> 1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularized,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0' 0.001)' NumericIs.AlmostEqualTo((double) 1)' "(0'1/1000) -> 1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularized,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.5' 0)' NumericIs.AlmostEqualTo((double) 0)' "(1/2'0) -> 0");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularized,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.001' 0)' NumericIs.AlmostEqualTo((double) 0)' "(1/1000'0) -> 0");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularized,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(1' 1)' NumericIs.AlmostEqualTo(0.63212055882855767840)' "(1'1) -> 1-exp(-1)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularized,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(1' Math.PI)' NumericIs.AlmostEqualTo(0.95678608173622775023)' "(1'pi) -> 1-exp(-pi)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularized,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.5' 1)' NumericIs.AlmostEqualTo(0.84270079294971486934)' "(1/2'1) -> erf(1)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularized,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.5' 1)' NumericIs.AlmostEqualTo(0.84270079294971486934)' "(1/2'1) -> erf(1)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularized,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.5' 0.2)' NumericIs.AlmostEqualTo(0.47291074313446191487)' "(1/2'1/5) -> erf(sqrt(5)/5)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularized,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.5' 0.2)' NumericIs.AlmostEqualTo(0.47291074313446191487)' "(1/2'1/5) -> erf(sqrt(5)/5)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularized,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.5' 0.2)' NumericIs.AlmostEqualTo(0.47291074313446191487)' "(1/2'1/5) -> erf(sqrt(5)/5)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularized,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.5' 0.4)' NumericIs.AlmostEqualTo(0.62890663047730242621)' "(1/2'2/5) -> erf(sqrt(10)/5)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularized,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.5' 0.4)' NumericIs.AlmostEqualTo(0.62890663047730242621)' "(1/2'2/5) -> erf(sqrt(10)/5)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularized,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.5' 0.4)' NumericIs.AlmostEqualTo(0.62890663047730242621)' "(1/2'2/5) -> erf(sqrt(10)/5)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularized,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.5' 0.8)' NumericIs.AlmostEqualTo(0.79409678926793169113)' "(1/2'4/5) -> erf(sqrt(20)/5)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularized,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.5' 0.8)' NumericIs.AlmostEqualTo(0.79409678926793169113)' "(1/2'4/5) -> erf(sqrt(20)/5)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularized,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.5' 0.8)' NumericIs.AlmostEqualTo(0.79409678926793169113)' "(1/2'4/5) -> erf(sqrt(20)/5)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularized,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.25' 0.2)' NumericIs.AlmostEqualTo(0.70985103173698245837)' "(1/4'1/5)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularized,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.25' 0.2)' NumericIs.AlmostEqualTo(0.70985103173698245837)' "(1/4'1/5)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularized,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.25' 0.2)' NumericIs.AlmostEqualTo(0.70985103173698245837)' "(1/4'1/5)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularized,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.5' 20d)' NumericIs.AlmostEqualTo(0.99999999974603714105)' "(1/2'20) -> erf(2*5^(1/2))");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularized,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.5' 20d)' NumericIs.AlmostEqualTo(0.99999999974603714105)' "(1/2'20) -> erf(2*5^(1/2))");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularized,The following statement contains a magic number: Assert.That(Fn.GammaRegularized(0.5' 20d)' NumericIs.AlmostEqualTo(0.99999999974603714105)' "(1/2'20) -> erf(2*5^(1/2))");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0)' NumericIs.AlmostEqualTo((double) 0)' "(1/2'0) -> 0");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.001' 0)' NumericIs.AlmostEqualTo((double) 0)' "(1/1000'0) -> 0");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 1)' Is.EqualTo(double.PositiveInfinity)' "(1/2'1) -> +infty");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.001' 1)' Is.EqualTo(double.PositiveInfinity)' "(1/1000'1) -> +infty");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(1' 1.1)' Is.NaN' "(1'1) -> NaN");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 1.1)' Is.NaN' "(1/2'1) -> NaN");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 1.1)' Is.NaN' "(1/2'1) -> NaN");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.001' 1.1)' Is.NaN' "(1/1000'1) -> NaN");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.001' 1.1)' Is.NaN' "(1/1000'1) -> NaN");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0' 0.001)' Is.NaN' "(0'1/1000) -> NaN");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(1' 0.63212055882855767840)' NumericIs.AlmostEqualTo((double) 1)' "(1'1-exp(-1)) -> 1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(1' 0.95678608173622775023)' NumericIs.AlmostEqualTo(Math.PI)' "(1'1-exp(-pi)) -> pi");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.84270079294971486934)' NumericIs.AlmostEqualTo((double) 1)' "(1/2'erf(1)) -> 1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.84270079294971486934)' NumericIs.AlmostEqualTo((double) 1)' "(1/2'erf(1)) -> 1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.47291074313446191487)' NumericIs.AlmostEqualTo(0.2)' "(1/2'erf(sqrt(1/5))) -> 1/5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.47291074313446191487)' NumericIs.AlmostEqualTo(0.2)' "(1/2'erf(sqrt(1/5))) -> 1/5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.47291074313446191487)' NumericIs.AlmostEqualTo(0.2)' "(1/2'erf(sqrt(1/5))) -> 1/5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.62890663047730242621)' NumericIs.AlmostEqualTo(0.4)' "(1/2'erf(sqrt(2/5))) -> 2/5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.62890663047730242621)' NumericIs.AlmostEqualTo(0.4)' "(1/2'erf(sqrt(2/5))) -> 2/5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.62890663047730242621)' NumericIs.AlmostEqualTo(0.4)' "(1/2'erf(sqrt(2/5))) -> 2/5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.79409678926793169113)' NumericIs.AlmostEqualTo(0.8)' "(1/2'erf(sqrt(8/5))) -> 4/5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.79409678926793169113)' NumericIs.AlmostEqualTo(0.8)' "(1/2'erf(sqrt(8/5))) -> 4/5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.79409678926793169113)' NumericIs.AlmostEqualTo(0.8)' "(1/2'erf(sqrt(8/5))) -> 4/5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.25' 0.70985103173698245837)' NumericIs.AlmostEqualTo(0.2)' "(1/4'?) -> 4/5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.25' 0.70985103173698245837)' NumericIs.AlmostEqualTo(0.2)' "(1/4'?) -> 4/5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.25' 0.70985103173698245837)' NumericIs.AlmostEqualTo(0.2)' "(1/4'?) -> 4/5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.99999225578356895592)' NumericIs.AlmostEqualTo((double) 10' 1e-12)' "(1/2'erf(sqrt(10))) -> 10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.99999225578356895592)' NumericIs.AlmostEqualTo((double) 10' 1e-12)' "(1/2'erf(sqrt(10))) -> 10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.99999225578356895592)' NumericIs.AlmostEqualTo((double) 10' 1e-12)' "(1/2'erf(sqrt(10))) -> 10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.99999225578356895592)' NumericIs.AlmostEqualTo((double) 10' 1e-12)' "(1/2'erf(sqrt(10))) -> 10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.99999999974603714105)' NumericIs.AlmostEqualTo((double) 20' 1e-8)' "(1/2'erf(sqrt(20))) -> 20");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.99999999974603714105)' NumericIs.AlmostEqualTo((double) 20' 1e-8)' "(1/2'erf(sqrt(20))) -> 20");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.99999999974603714105)' NumericIs.AlmostEqualTo((double) 20' 1e-8)' "(1/2'erf(sqrt(20))) -> 20");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.99999999974603714105)' NumericIs.AlmostEqualTo((double) 20' 1e-8)' "(1/2'erf(sqrt(20))) -> 20");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.999)' NumericIs.AlmostEqualTo(5.4137830853313661466)' "(1/2'0.999)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.999)' NumericIs.AlmostEqualTo(5.4137830853313661466)' "(1/2'0.999)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.999)' NumericIs.AlmostEqualTo(5.4137830853313661466)' "(1/2'0.999)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.8)' NumericIs.AlmostEqualTo(0.82118720757490819339)' "(1/2'0.8)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.8)' NumericIs.AlmostEqualTo(0.82118720757490819339)' "(1/2'0.8)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.8)' NumericIs.AlmostEqualTo(0.82118720757490819339)' "(1/2'0.8)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.6)' NumericIs.AlmostEqualTo(0.35416315040039690443)' "(1/2'0.6)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.6)' NumericIs.AlmostEqualTo(0.35416315040039690443)' "(1/2'0.6)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.6)' NumericIs.AlmostEqualTo(0.35416315040039690443)' "(1/2'0.6)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.2)' NumericIs.AlmostEqualTo(0.032092377333650790123)' "(1/2'0.2)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.2)' NumericIs.AlmostEqualTo(0.032092377333650790123)' "(1/2'0.2)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_GammaRegularizedInverse,The following statement contains a magic number: Assert.That(Fn.GammaRegularizedInverse(0.5' 0.2)' NumericIs.AlmostEqualTo(0.032092377333650790123)' "(1/2'0.2)");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(-2.0)' Is.NaN' "A3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(-20.0)' Is.NaN' "A4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(-20.0000000001)' Is.Not.NaN' "A4b");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(0.001)' NumericIs.AlmostEqualTo(-1000.5755719318103005)' "B1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(0.001)' NumericIs.AlmostEqualTo(-1000.5755719318103005)' "B1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(0.01)' NumericIs.AlmostEqualTo(-100.56088545786867450)' "B2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(0.01)' NumericIs.AlmostEqualTo(-100.56088545786867450)' "B2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(0.1)' NumericIs.AlmostEqualTo(-10.423754940411076795)' "B3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(0.1)' NumericIs.AlmostEqualTo(-10.423754940411076795)' "B3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(0.2)' NumericIs.AlmostEqualTo(-5.2890398965921882955)' "B4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(0.2)' NumericIs.AlmostEqualTo(-5.2890398965921882955)' "B4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(0.4)' NumericIs.AlmostEqualTo(-2.5613845445851161457)' "B5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(0.4)' NumericIs.AlmostEqualTo(-2.5613845445851161457)' "B5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(0.6)' NumericIs.AlmostEqualTo(-1.5406192138931904148)' "B6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(0.6)' NumericIs.AlmostEqualTo(-1.5406192138931904148)' "B6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(0.9)' NumericIs.AlmostEqualTo(-.75492694994705139189)' "B7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(0.9)' NumericIs.AlmostEqualTo(-.75492694994705139189)' "B7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(0.999)' NumericIs.AlmostEqualTo(-.57886180210864542646)' "B8");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(0.999)' NumericIs.AlmostEqualTo(-.57886180210864542646)' "B8");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(1.0)' NumericIs.AlmostEqualTo(-.57721566490153286061)' "B9");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(1.001)' NumericIs.AlmostEqualTo(-.57557193181030047147' 1e-14)' "B10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(1.001)' NumericIs.AlmostEqualTo(-.57557193181030047147' 1e-14)' "B10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(1.001)' NumericIs.AlmostEqualTo(-.57557193181030047147' 1e-14)' "B10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(1.5)' NumericIs.AlmostEqualTo(.36489973978576520559e-1' 1e-14)' "B11");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(1.5)' NumericIs.AlmostEqualTo(.36489973978576520559e-1' 1e-14)' "B11");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(1.5)' NumericIs.AlmostEqualTo(.36489973978576520559e-1' 1e-14)' "B11");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(1.9)' NumericIs.AlmostEqualTo(.35618416116405971922)' "B12");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(1.9)' NumericIs.AlmostEqualTo(.35618416116405971922)' "B12");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(2.0)' NumericIs.AlmostEqualTo(.42278433509846713939)' "B13");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(2.0)' NumericIs.AlmostEqualTo(.42278433509846713939)' "B13");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(10.0)' NumericIs.AlmostEqualTo(2.2517525890667211076)' "B14");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(10.0)' NumericIs.AlmostEqualTo(2.2517525890667211076)' "B14");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(10.51)' NumericIs.AlmostEqualTo(2.3039997054324985520)' "B15");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(10.51)' NumericIs.AlmostEqualTo(2.3039997054324985520)' "B15");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(100)' NumericIs.AlmostEqualTo(4.6001618527380874002)' "B16");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(100)' NumericIs.AlmostEqualTo(4.6001618527380874002)' "B16");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(-0.01)' NumericIs.AlmostEqualTo(99.406213695944404856)' "B17");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(-0.01)' NumericIs.AlmostEqualTo(99.406213695944404856)' "B17");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(-0.1)' NumericIs.AlmostEqualTo(9.2450730500529486081)' "B18");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(-0.1)' NumericIs.AlmostEqualTo(9.2450730500529486081)' "B18");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(-0.5)' NumericIs.AlmostEqualTo(.36489973978576520559e-1' 1e-14)' "B19");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(-0.5)' NumericIs.AlmostEqualTo(.36489973978576520559e-1' 1e-14)' "B19");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(-0.5)' NumericIs.AlmostEqualTo(.36489973978576520559e-1' 1e-14)' "B19");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(-1.2)' NumericIs.AlmostEqualTo(4.8683247666271948739)' "B20");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(-1.2)' NumericIs.AlmostEqualTo(4.8683247666271948739)' "B20");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(-2.01)' NumericIs.AlmostEqualTo(100.89382514365634023' 1e-13)' "B21");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(-2.01)' NumericIs.AlmostEqualTo(100.89382514365634023' 1e-13)' "B21");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(-2.01)' NumericIs.AlmostEqualTo(100.89382514365634023' 1e-13)' "B21");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(-100.01)' NumericIs.AlmostEqualTo(104.57736050326787844' 1e-12)' "B22");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(-100.01)' NumericIs.AlmostEqualTo(104.57736050326787844' 1e-12)' "B22");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Digamma,The following statement contains a magic number: Assert.That(Fn.Digamma(-100.01)' NumericIs.AlmostEqualTo(104.57736050326787844' 1e-12)' "B22");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(0.1)' NumericIs.AlmostEqualTo(.11246291601828489220)' "A2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(0.1)' NumericIs.AlmostEqualTo(.11246291601828489220)' "A2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(0.2)' NumericIs.AlmostEqualTo(.22270258921047845414)' "A3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(0.2)' NumericIs.AlmostEqualTo(.22270258921047845414)' "A3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(0.3)' NumericIs.AlmostEqualTo(.32862675945912742764)' "A4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(0.3)' NumericIs.AlmostEqualTo(.32862675945912742764)' "A4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(0.4)' NumericIs.AlmostEqualTo(.42839235504666845510)' "A5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(0.4)' NumericIs.AlmostEqualTo(.42839235504666845510)' "A5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(0.5)' NumericIs.AlmostEqualTo(.52049987781304653768)' "A6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(0.5)' NumericIs.AlmostEqualTo(.52049987781304653768)' "A6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(0.6)' NumericIs.AlmostEqualTo(.60385609084792592256)' "A7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(0.6)' NumericIs.AlmostEqualTo(.60385609084792592256)' "A7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(0.7)' NumericIs.AlmostEqualTo(.67780119383741847298)' "A8");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(0.7)' NumericIs.AlmostEqualTo(.67780119383741847298)' "A8");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(0.8)' NumericIs.AlmostEqualTo(.74210096470766048617)' "A9");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(0.8)' NumericIs.AlmostEqualTo(.74210096470766048617)' "A9");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(0.9)' NumericIs.AlmostEqualTo(.79690821242283212852)' "A10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(0.9)' NumericIs.AlmostEqualTo(.79690821242283212852)' "A10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(1.0)' NumericIs.AlmostEqualTo(.84270079294971486934)' "A11");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(1.1)' NumericIs.AlmostEqualTo(.88020506957408169977)' "A12");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(1.1)' NumericIs.AlmostEqualTo(.88020506957408169977)' "A12");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(1.2)' NumericIs.AlmostEqualTo(.91031397822963538024)' "A13");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(1.2)' NumericIs.AlmostEqualTo(.91031397822963538024)' "A13");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(3.0)' NumericIs.AlmostEqualTo(.99997790950300141456)' "A14");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(3.0)' NumericIs.AlmostEqualTo(.99997790950300141456)' "A14");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(9.0)' NumericIs.AlmostEqualTo(1.0)' "A15");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(100)' NumericIs.AlmostEqualTo(1.0)' "A16");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(-0.3)' NumericIs.AlmostEqualTo(-.32862675945912742764)' "A17");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(-0.3)' NumericIs.AlmostEqualTo(-.32862675945912742764)' "A17");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(-0.8)' NumericIs.AlmostEqualTo(-.74210096470766048617)' "A18");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.Erf(-0.8)' NumericIs.AlmostEqualTo(-.74210096470766048617)' "A18");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.1)' NumericIs.AlmostEqualTo(.88855990494257687016e-1' 1e-9)' "B2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.1)' NumericIs.AlmostEqualTo(.88855990494257687016e-1' 1e-9)' "B2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.1)' NumericIs.AlmostEqualTo(.88855990494257687016e-1' 1e-9)' "B2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.2)' NumericIs.AlmostEqualTo(.17914345462129167649' 1e-8)' "B3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.2)' NumericIs.AlmostEqualTo(.17914345462129167649' 1e-8)' "B3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.2)' NumericIs.AlmostEqualTo(.17914345462129167649' 1e-8)' "B3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.3)' NumericIs.AlmostEqualTo(.27246271472675435562' 1e-9)' "B4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.3)' NumericIs.AlmostEqualTo(.27246271472675435562' 1e-9)' "B4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.3)' NumericIs.AlmostEqualTo(.27246271472675435562' 1e-9)' "B4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.4)' NumericIs.AlmostEqualTo(.37080715859355792906' 1e-8)' "B5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.4)' NumericIs.AlmostEqualTo(.37080715859355792906' 1e-8)' "B5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.4)' NumericIs.AlmostEqualTo(.37080715859355792906' 1e-8)' "B5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.5)' NumericIs.AlmostEqualTo(.47693627620446987338' 1e-9)' "B6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.5)' NumericIs.AlmostEqualTo(.47693627620446987338' 1e-9)' "B6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.5)' NumericIs.AlmostEqualTo(.47693627620446987338' 1e-9)' "B6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.6)' NumericIs.AlmostEqualTo(.59511608144999485002' 1e-8)' "B7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.6)' NumericIs.AlmostEqualTo(.59511608144999485002' 1e-8)' "B7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.6)' NumericIs.AlmostEqualTo(.59511608144999485002' 1e-8)' "B7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.7)' NumericIs.AlmostEqualTo(.73286907795921685222' 1e-8)' "B8");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.7)' NumericIs.AlmostEqualTo(.73286907795921685222' 1e-8)' "B8");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.7)' NumericIs.AlmostEqualTo(.73286907795921685222' 1e-8)' "B8");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.8)' NumericIs.AlmostEqualTo(.90619380243682322007' 1e-8)' "B9");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.8)' NumericIs.AlmostEqualTo(.90619380243682322007' 1e-8)' "B9");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.8)' NumericIs.AlmostEqualTo(.90619380243682322007' 1e-8)' "B9");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.9)' NumericIs.AlmostEqualTo(1.1630871536766740867' 1e-8)' "B10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.9)' NumericIs.AlmostEqualTo(1.1630871536766740867' 1e-8)' "B10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.9)' NumericIs.AlmostEqualTo(1.1630871536766740867' 1e-8)' "B10");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.9999)' NumericIs.AlmostEqualTo(2.7510639057120607961' 1e-8)' "B11");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.9999)' NumericIs.AlmostEqualTo(2.7510639057120607961' 1e-8)' "B11");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.9999)' NumericIs.AlmostEqualTo(2.7510639057120607961' 1e-8)' "B11");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.9999999)' NumericIs.AlmostEqualTo(3.7665625815708380738' 1e-8)' "B12");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.9999999)' NumericIs.AlmostEqualTo(3.7665625815708380738' 1e-8)' "B12");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.9999999)' NumericIs.AlmostEqualTo(3.7665625815708380738' 1e-8)' "B12");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(-0.3)' NumericIs.AlmostEqualTo(-.27246271472675435562' 1e-9)' "B13");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(-0.3)' NumericIs.AlmostEqualTo(-.27246271472675435562' 1e-9)' "B13");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(-0.3)' NumericIs.AlmostEqualTo(-.27246271472675435562' 1e-9)' "B13");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(-0.8)' NumericIs.AlmostEqualTo(-.90619380243682322007' 1e-8)' "B14");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(-0.8)' NumericIs.AlmostEqualTo(-.90619380243682322007' 1e-8)' "B14");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(-0.8)' NumericIs.AlmostEqualTo(-.90619380243682322007' 1e-8)' "B14");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.001)' NumericIs.AlmostEqualTo(.88622715746655210457e-3' 1e-8)' "B15");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.001)' NumericIs.AlmostEqualTo(.88622715746655210457e-3' 1e-8)' "B15");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.001)' NumericIs.AlmostEqualTo(.88622715746655210457e-3' 1e-8)' "B15");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.005)' NumericIs.AlmostEqualTo(.44311636293707267099e-2' 1e-8)' "B16");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.005)' NumericIs.AlmostEqualTo(.44311636293707267099e-2' 1e-8)' "B16");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Erf,The following statement contains a magic number: Assert.That(Fn.ErfInverse(0.005)' NumericIs.AlmostEqualTo(.44311636293707267099e-2' 1e-8)' "B16");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.1' 1.0)' NumericIs.AlmostEqualTo(Fn.Beta(1.0' 0.1))' "A1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.1' 1.0)' NumericIs.AlmostEqualTo(Fn.Beta(1.0' 0.1))' "A1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.1' 10.0)' NumericIs.AlmostEqualTo(Fn.Beta(10.0' 0.1))' "A2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.1' 10.0)' NumericIs.AlmostEqualTo(Fn.Beta(10.0' 0.1))' "A2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.1' 10.0)' NumericIs.AlmostEqualTo(Fn.Beta(10.0' 0.1))' "A2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.1' 10.0)' NumericIs.AlmostEqualTo(Fn.Beta(10.0' 0.1))' "A2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.5' 1.0)' NumericIs.AlmostEqualTo(Fn.Beta(1.0' 0.5))' "A3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.5' 1.0)' NumericIs.AlmostEqualTo(Fn.Beta(1.0' 0.5))' "A3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.5' 10.0)' NumericIs.AlmostEqualTo(Fn.Beta(10.0' 0.5))' "A4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.5' 10.0)' NumericIs.AlmostEqualTo(Fn.Beta(10.0' 0.5))' "A4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.5' 10.0)' NumericIs.AlmostEqualTo(Fn.Beta(10.0' 0.5))' "A4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.5' 10.0)' NumericIs.AlmostEqualTo(Fn.Beta(10.0' 0.5))' "A4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(10.0' 100.0)' NumericIs.AlmostEqualTo(Fn.Beta(100.0' 10.0))' "A1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(10.0' 100.0)' NumericIs.AlmostEqualTo(Fn.Beta(100.0' 10.0))' "A1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(10.0' 100.0)' NumericIs.AlmostEqualTo(Fn.Beta(100.0' 10.0))' "A1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(10.0' 100.0)' NumericIs.AlmostEqualTo(Fn.Beta(100.0' 10.0))' "A1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.1' 0.1)' NumericIs.AlmostEqualTo(19.714639489050161663)' "B1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.1' 0.1)' NumericIs.AlmostEqualTo(19.714639489050161663)' "B1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.1' 0.1)' NumericIs.AlmostEqualTo(19.714639489050161663)' "B1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.1' 0.2)' NumericIs.AlmostEqualTo(14.599371492764829943)' "B2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.1' 0.2)' NumericIs.AlmostEqualTo(14.599371492764829943)' "B2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.1' 0.2)' NumericIs.AlmostEqualTo(14.599371492764829943)' "B2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.1' 0.3)' NumericIs.AlmostEqualTo(12.830598536321300437)' "B3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.1' 0.3)' NumericIs.AlmostEqualTo(12.830598536321300437)' "B3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.1' 0.3)' NumericIs.AlmostEqualTo(12.830598536321300437)' "B3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.1' 1.0)' NumericIs.AlmostEqualTo(10.0)' "B4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.1' 1.0)' NumericIs.AlmostEqualTo(10.0)' "B4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.1' 2.0)' NumericIs.AlmostEqualTo(9.0909090909090909091)' "B5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.1' 2.0)' NumericIs.AlmostEqualTo(9.0909090909090909091)' "B5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.1' 2.0)' NumericIs.AlmostEqualTo(9.0909090909090909091)' "B5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.1' 5.0)' NumericIs.AlmostEqualTo(8.1743590791584497328)' "B6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.1' 5.0)' NumericIs.AlmostEqualTo(8.1743590791584497328)' "B6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.1' 5.0)' NumericIs.AlmostEqualTo(8.1743590791584497328)' "B6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.1' 10.0)' NumericIs.AlmostEqualTo(7.5913800009109903433)' "B7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.1' 10.0)' NumericIs.AlmostEqualTo(7.5913800009109903433)' "B7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.1' 10.0)' NumericIs.AlmostEqualTo(7.5913800009109903433)' "B7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.1' 100.0)' NumericIs.AlmostEqualTo(6.0053229390929389725' 1e-12)' "B8");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.1' 100.0)' NumericIs.AlmostEqualTo(6.0053229390929389725' 1e-12)' "B8");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.1' 100.0)' NumericIs.AlmostEqualTo(6.0053229390929389725' 1e-12)' "B8");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(0.1' 100.0)' NumericIs.AlmostEqualTo(6.0053229390929389725' 1e-12)' "B8");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 0.1)' NumericIs.AlmostEqualTo(6.9076854432998202098' 1e-13)' "C1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 0.1)' NumericIs.AlmostEqualTo(6.9076854432998202098' 1e-13)' "C1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 0.1)' NumericIs.AlmostEqualTo(6.9076854432998202098' 1e-13)' "C1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 0.1)' NumericIs.AlmostEqualTo(6.9076854432998202098' 1e-13)' "C1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 0.2)' NumericIs.AlmostEqualTo(2.4193558279880311532' 1e-14)' "C2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 0.2)' NumericIs.AlmostEqualTo(2.4193558279880311532' 1e-14)' "C2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 0.2)' NumericIs.AlmostEqualTo(2.4193558279880311532' 1e-14)' "C2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 0.2)' NumericIs.AlmostEqualTo(2.4193558279880311532' 1e-14)' "C2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 0.3)' NumericIs.AlmostEqualTo(1.1437887414566949564' 1e-14)' "C3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 0.3)' NumericIs.AlmostEqualTo(1.1437887414566949564' 1e-14)' "C3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 0.3)' NumericIs.AlmostEqualTo(1.1437887414566949564' 1e-14)' "C3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 0.3)' NumericIs.AlmostEqualTo(1.1437887414566949564' 1e-14)' "C3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 1.0)' NumericIs.AlmostEqualTo(.40000000000000000000e-1' 1e-14)' "C4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 1.0)' NumericIs.AlmostEqualTo(.40000000000000000000e-1' 1e-14)' "C4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 1.0)' NumericIs.AlmostEqualTo(.40000000000000000000e-1' 1e-14)' "C4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 2.0)' NumericIs.AlmostEqualTo(.15384615384615384615e-2' 1e-14)' "C5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 2.0)' NumericIs.AlmostEqualTo(.15384615384615384615e-2' 1e-14)' "C5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 2.0)' NumericIs.AlmostEqualTo(.15384615384615384615e-2' 1e-14)' "C5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 2.0)' NumericIs.AlmostEqualTo(.15384615384615384615e-2' 1e-14)' "C5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 5.0)' NumericIs.AlmostEqualTo(.16841396151740979327e-5' 1e-13)' "C6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 5.0)' NumericIs.AlmostEqualTo(.16841396151740979327e-5' 1e-13)' "C6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 5.0)' NumericIs.AlmostEqualTo(.16841396151740979327e-5' 1e-13)' "C6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 5.0)' NumericIs.AlmostEqualTo(.16841396151740979327e-5' 1e-13)' "C6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 10.0)' NumericIs.AlmostEqualTo(.76261281522028757519e-9' 1e-13)' "C7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 10.0)' NumericIs.AlmostEqualTo(.76261281522028757519e-9' 1e-13)' "C7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 10.0)' NumericIs.AlmostEqualTo(.76261281522028757519e-9' 1e-13)' "C7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 10.0)' NumericIs.AlmostEqualTo(.76261281522028757519e-9' 1e-13)' "C7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 100.0)' NumericIs.AlmostEqualTo(.38445319996184968535e-27' 1e-13)' "C8");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 100.0)' NumericIs.AlmostEqualTo(.38445319996184968535e-27' 1e-13)' "C8");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 100.0)' NumericIs.AlmostEqualTo(.38445319996184968535e-27' 1e-13)' "C8");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Beta,The following statement contains a magic number: Assert.That(Fn.Beta(25.0' 100.0)' NumericIs.AlmostEqualTo(.38445319996184968535e-27' 1e-13)' "C8");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.2' 0.2' 0.0)' NumericIs.AlmostEqualTo(0.0)' "A1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.2' 0.2' 0.0)' NumericIs.AlmostEqualTo(0.0)' "A1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.2' 0.2' 0.2)' NumericIs.AlmostEqualTo(.39272216435257082965)' "A2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.2' 0.2' 0.2)' NumericIs.AlmostEqualTo(.39272216435257082965)' "A2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.2' 0.2' 0.2)' NumericIs.AlmostEqualTo(.39272216435257082965)' "A2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.2' 0.2' 0.2)' NumericIs.AlmostEqualTo(.39272216435257082965)' "A2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.2' 0.2' 0.5)' NumericIs.AlmostEqualTo(.50000000000000000000)' "A3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.2' 0.2' 0.5)' NumericIs.AlmostEqualTo(.50000000000000000000)' "A3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.2' 0.2' 0.5)' NumericIs.AlmostEqualTo(.50000000000000000000)' "A3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.2' 0.2' 0.5)' NumericIs.AlmostEqualTo(.50000000000000000000)' "A3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.2' 0.2' 0.8)' NumericIs.AlmostEqualTo(.60727783564742917036)' "A4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.2' 0.2' 0.8)' NumericIs.AlmostEqualTo(.60727783564742917036)' "A4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.2' 0.2' 0.8)' NumericIs.AlmostEqualTo(.60727783564742917036)' "A4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.2' 0.2' 0.8)' NumericIs.AlmostEqualTo(.60727783564742917036)' "A4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.2' 0.2' 1.0)' NumericIs.AlmostEqualTo(1.0000000000000000000)' "A5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.2' 0.2' 1.0)' NumericIs.AlmostEqualTo(1.0000000000000000000)' "A5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.6' 1.2' 0.0)' NumericIs.AlmostEqualTo(0.0)' "B1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.6' 1.2' 0.0)' NumericIs.AlmostEqualTo(0.0)' "B1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.6' 1.2' 0.2)' NumericIs.AlmostEqualTo(.42540331997033591754)' "B2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.6' 1.2' 0.2)' NumericIs.AlmostEqualTo(.42540331997033591754)' "B2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.6' 1.2' 0.2)' NumericIs.AlmostEqualTo(.42540331997033591754)' "B2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.6' 1.2' 0.2)' NumericIs.AlmostEqualTo(.42540331997033591754)' "B2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.6' 1.2' 0.5)' NumericIs.AlmostEqualTo(.71641011564425207256)' "B3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.6' 1.2' 0.5)' NumericIs.AlmostEqualTo(.71641011564425207256)' "B3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.6' 1.2' 0.5)' NumericIs.AlmostEqualTo(.71641011564425207256)' "B3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.6' 1.2' 0.5)' NumericIs.AlmostEqualTo(.71641011564425207256)' "B3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.6' 1.2' 0.8)' NumericIs.AlmostEqualTo(.91373194998181983314)' "B4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.6' 1.2' 0.8)' NumericIs.AlmostEqualTo(.91373194998181983314)' "B4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.6' 1.2' 0.8)' NumericIs.AlmostEqualTo(.91373194998181983314)' "B4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.6' 1.2' 0.8)' NumericIs.AlmostEqualTo(.91373194998181983314)' "B4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.6' 1.2' 1.0)' NumericIs.AlmostEqualTo(1.0000000000000000000)' "B5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(0.6' 1.2' 1.0)' NumericIs.AlmostEqualTo(1.0000000000000000000)' "B5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(7.0' 1.2' 0.0)' NumericIs.AlmostEqualTo(0.0)' "C1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(7.0' 1.2' 0.0)' NumericIs.AlmostEqualTo(0.0)' "C1");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(7.0' 1.2' 0.2)' NumericIs.AlmostEqualTo(.20126888449347947608e-4)' "C2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(7.0' 1.2' 0.2)' NumericIs.AlmostEqualTo(.20126888449347947608e-4)' "C2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(7.0' 1.2' 0.2)' NumericIs.AlmostEqualTo(.20126888449347947608e-4)' "C2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(7.0' 1.2' 0.2)' NumericIs.AlmostEqualTo(.20126888449347947608e-4)' "C2");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(7.0' 1.2' 0.5)' NumericIs.AlmostEqualTo(.11371092280417448678e-1)' "C3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(7.0' 1.2' 0.5)' NumericIs.AlmostEqualTo(.11371092280417448678e-1)' "C3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(7.0' 1.2' 0.5)' NumericIs.AlmostEqualTo(.11371092280417448678e-1)' "C3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(7.0' 1.2' 0.5)' NumericIs.AlmostEqualTo(.11371092280417448678e-1)' "C3");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(7.0' 1.2' 0.7)' NumericIs.AlmostEqualTo(.11102090346884848038' 1e-14)' "C4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(7.0' 1.2' 0.7)' NumericIs.AlmostEqualTo(.11102090346884848038' 1e-14)' "C4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(7.0' 1.2' 0.7)' NumericIs.AlmostEqualTo(.11102090346884848038' 1e-14)' "C4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(7.0' 1.2' 0.7)' NumericIs.AlmostEqualTo(.11102090346884848038' 1e-14)' "C4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(7.0' 1.2' 0.7)' NumericIs.AlmostEqualTo(.11102090346884848038' 1e-14)' "C4");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(7.0' 1.2' 0.8)' NumericIs.AlmostEqualTo(.26774648551269072265' 1e-14)' "C5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(7.0' 1.2' 0.8)' NumericIs.AlmostEqualTo(.26774648551269072265' 1e-14)' "C5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(7.0' 1.2' 0.8)' NumericIs.AlmostEqualTo(.26774648551269072265' 1e-14)' "C5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(7.0' 1.2' 0.8)' NumericIs.AlmostEqualTo(.26774648551269072265' 1e-14)' "C5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(7.0' 1.2' 0.8)' NumericIs.AlmostEqualTo(.26774648551269072265' 1e-14)' "C5");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(7.0' 1.2' 0.9)' NumericIs.AlmostEqualTo(.56477467605979107895)' "C6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(7.0' 1.2' 0.9)' NumericIs.AlmostEqualTo(.56477467605979107895)' "C6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(7.0' 1.2' 0.9)' NumericIs.AlmostEqualTo(.56477467605979107895)' "C6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(7.0' 1.2' 0.9)' NumericIs.AlmostEqualTo(.56477467605979107895)' "C6");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(7.0' 1.2' 0.95)' NumericIs.AlmostEqualTo(.77753405618146275868)' "C7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(7.0' 1.2' 0.95)' NumericIs.AlmostEqualTo(.77753405618146275868)' "C7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(7.0' 1.2' 0.95)' NumericIs.AlmostEqualTo(.77753405618146275868)' "C7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(7.0' 1.2' 0.95)' NumericIs.AlmostEqualTo(.77753405618146275868)' "C7");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(7.0' 1.2' 1.0)' NumericIs.AlmostEqualTo(1.0000000000000000000)' "C8");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_BetaRegularized,The following statement contains a magic number: Assert.That(Fn.BetaRegularized(7.0' 1.2' 1.0)' NumericIs.AlmostEqualTo(1.0000000000000000000)' "C8");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Sinc,The following statement contains a magic number: i < 10
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Factorial,The following statement contains a magic number: i < 32
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Factorial,The following statement contains a magic number: Assert.That(Fn.Factorial(i)' NumericIs.AlmostEqualTo(factorial' 1e-10)' "Factorial: " + i.ToString());
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_Factorial,The following statement contains a magic number: i < 90
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_HarmonicNumber,The following statement contains a magic number: i < 32
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_HarmonicNumber,The following statement contains a magic number: Assert.That(Fn.HarmonicNumber(i)' NumericIs.AlmostEqualTo(sum' 1e-10)' "H" + i.ToString());
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_HarmonicNumber,The following statement contains a magic number: i < 90
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_HarmonicNumber,The following statement contains a magic number: Assert.That(Fn.HarmonicNumber(100000)' NumericIs.AlmostEqualTo(12.090146129863427948' 1e-10)' "H100000");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_HarmonicNumber,The following statement contains a magic number: Assert.That(Fn.HarmonicNumber(100000)' NumericIs.AlmostEqualTo(12.090146129863427948' 1e-10)' "H100000");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_HarmonicNumber,The following statement contains a magic number: Assert.That(Fn.HarmonicNumber(100000)' NumericIs.AlmostEqualTo(12.090146129863427948' 1e-10)' "H100000");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_HarmonicNumber,The following statement contains a magic number: Assert.That(Fn.HarmonicNumber(100000000)' NumericIs.AlmostEqualTo(18.997896413853898325' 1e-10)' "H100000000");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_HarmonicNumber,The following statement contains a magic number: Assert.That(Fn.HarmonicNumber(100000000)' NumericIs.AlmostEqualTo(18.997896413853898325' 1e-10)' "H100000000");
Magic Number,Iridium.Test.SpecialFunctionsTests,SpecialFunctionsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\SpecialFunctionsTests\SpecialFunctionsTest.cs,TestSpecialFunctions_HarmonicNumber,The following statement contains a magic number: Assert.That(Fn.HarmonicNumber(100000000)' NumericIs.AlmostEqualTo(18.997896413853898325' 1e-10)' "H100000000");
Magic Number,Iridium.Test.StatisticsTests,HistogramTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\HistogramTest.cs,TestOptimalDispersion,The following statement contains a magic number: ContinuousUniformDistribution dist = new ContinuousUniformDistribution(0' 10);
Magic Number,Iridium.Test.StatisticsTests,HistogramTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\HistogramTest.cs,TestOptimalDispersion,The following statement contains a magic number: Histogram h = Histogram.OptimalDispersion(10' new List<double>(dist.EnumerateDoubles(1000)));
Magic Number,Iridium.Test.StatisticsTests,HistogramTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\HistogramTest.cs,TestOptimalDispersion,The following statement contains a magic number: Histogram h = Histogram.OptimalDispersion(10' new List<double>(dist.EnumerateDoubles(1000)));
Magic Number,Iridium.Test.StatisticsTests,HistogramTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\HistogramTest.cs,TestOptimalDispersion,The following statement contains a magic number: Assert.That(h.Count' Is.EqualTo(10));
Magic Number,Iridium.Test.StatisticsTests,HistogramTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\HistogramTest.cs,TestOptimalFreedom,The following statement contains a magic number: ContinuousUniformDistribution dist = new ContinuousUniformDistribution(0' 10);
Magic Number,Iridium.Test.StatisticsTests,HistogramTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\HistogramTest.cs,TestOptimalFreedom,The following statement contains a magic number: Histogram h = Histogram.OptimalFreedom(10' new List<double>(dist.EnumerateDoubles(1000)));
Magic Number,Iridium.Test.StatisticsTests,HistogramTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\HistogramTest.cs,TestOptimalFreedom,The following statement contains a magic number: Histogram h = Histogram.OptimalFreedom(10' new List<double>(dist.EnumerateDoubles(1000)));
Magic Number,Iridium.Test.StatisticsTests,HistogramTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\HistogramTest.cs,TestOptimalFreedom,The following statement contains a magic number: Assert.That(h.Count' Is.EqualTo(10));
Magic Number,Iridium.Test.StatisticsTests,HistogramTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\HistogramTest.cs,TestOptimalSquaredFreedom,The following statement contains a magic number: ContinuousUniformDistribution dist = new ContinuousUniformDistribution(0' 10);
Magic Number,Iridium.Test.StatisticsTests,HistogramTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\HistogramTest.cs,TestOptimalSquaredFreedom,The following statement contains a magic number: Histogram h = Histogram.OptimalSquaredFreedom(10' new List<double>(dist.EnumerateDoubles(1000)));
Magic Number,Iridium.Test.StatisticsTests,HistogramTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\HistogramTest.cs,TestOptimalSquaredFreedom,The following statement contains a magic number: Histogram h = Histogram.OptimalSquaredFreedom(10' new List<double>(dist.EnumerateDoubles(1000)));
Magic Number,Iridium.Test.StatisticsTests,HistogramTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\HistogramTest.cs,TestOptimalSquaredFreedom,The following statement contains a magic number: Assert.That(h.GetContainerOf(8).LowerBound' Is.LessThanOrEqualTo(8.0));
Magic Number,Iridium.Test.StatisticsTests,HistogramTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\HistogramTest.cs,TestOptimalSquaredFreedom,The following statement contains a magic number: Assert.That(h.GetContainerOf(8).LowerBound' Is.LessThanOrEqualTo(8.0));
Magic Number,Iridium.Test.StatisticsTests,HistogramTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\HistogramTest.cs,TestOptimalSquaredFreedom,The following statement contains a magic number: Assert.That(h.GetContainerOf(8).UpperBound' Is.GreaterThanOrEqualTo(8.0));
Magic Number,Iridium.Test.StatisticsTests,HistogramTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\HistogramTest.cs,TestOptimalSquaredFreedom,The following statement contains a magic number: Assert.That(h.GetContainerOf(8).UpperBound' Is.GreaterThanOrEqualTo(8.0));
Magic Number,Iridium.Test.StatisticsTests,HistogramTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\HistogramTest.cs,TestOptimalSquaredFreedom,The following statement contains a magic number: Assert.That(h.GetContainerIndexOf(11)' Is.LessThan(0.0));
Magic Number,Iridium.Test.StatisticsTests,HistogramTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\HistogramTest.cs,TestOptimalSquaredFreedom,The following statement contains a magic number: Assert.That(delegate { h.GetContainerOf(11); }' Throws.TypeOf(typeof(ArgumentException)));
Magic Number,Iridium.Test.StatisticsTests,HistogramTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\HistogramTest.cs,TestOptimalSquaredFreedom,The following statement contains a magic number: Assert.That(h.Count' Is.EqualTo(10));
Magic Number,Iridium.Test.StatisticsTests,HistogramTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\HistogramTest.cs,TestOptimalVariance,The following statement contains a magic number: ContinuousUniformDistribution dist = new ContinuousUniformDistribution(0' 10);
Magic Number,Iridium.Test.StatisticsTests,HistogramTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\HistogramTest.cs,TestOptimalVariance,The following statement contains a magic number: Histogram h = Histogram.OptimalVariance(10' new List<double>(dist.EnumerateDoubles(1000)));
Magic Number,Iridium.Test.StatisticsTests,HistogramTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\HistogramTest.cs,TestOptimalVariance,The following statement contains a magic number: Histogram h = Histogram.OptimalVariance(10' new List<double>(dist.EnumerateDoubles(1000)));
Magic Number,Iridium.Test.StatisticsTests,HistogramTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\HistogramTest.cs,TestOptimalVariance,The following statement contains a magic number: Assert.That(h.Count' Is.EqualTo(10));
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestAccumulatorNumericStability,The following statement contains a magic number: i < 10000
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestAccumulatorNumericStability,The following statement contains a magic number: Assert.That(accumulator.Mean' NumericIs.AlmostEqualTo((double) 0' 0.2)' "Mean of (0'1)");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestAccumulatorNumericStability,The following statement contains a magic number: Assert.That(accumulator.Variance' NumericIs.AlmostEqualTo((double) 1' 0.5)' "Variance of (0'1)");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestAccumulatorNumericStability,The following statement contains a magic number: gaussian.SetDistributionParameters(1e+9' 1);
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestAccumulatorNumericStability,The following statement contains a magic number: i < 10000
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestAccumulatorNumericStability,The following statement contains a magic number: Assert.That(accumulator.Mean' NumericIs.AlmostEqualTo(1e+9' 0.2)' "Mean of (1e+9'1)");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestAccumulatorNumericStability,The following statement contains a magic number: Assert.That(accumulator.Mean' NumericIs.AlmostEqualTo(1e+9' 0.2)' "Mean of (1e+9'1)");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestAccumulatorNumericStability,The following statement contains a magic number: Assert.That(accumulator.Variance' NumericIs.AlmostEqualTo((double) 1' 0.5)' "Variance of (1e+9'1)");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestAccumulatorAddRemove,The following statement contains a magic number: i <= 10
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestAccumulatorAddRemove,The following statement contains a magic number: Assert.That(accumulator.Mean' NumericIs.AlmostEqualTo((double) 5)' "A Mean");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestAccumulatorAddRemove,The following statement contains a magic number: Assert.That(accumulator.Variance' NumericIs.AlmostEqualTo((double) 11)' "A Variance");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestAccumulatorAddRemove,The following statement contains a magic number: Assert.That(accumulator.Sum' NumericIs.AlmostEqualTo((double) 55)' "A Sum");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestAccumulatorAddRemove,The following statement contains a magic number: accumulator.Remove(9);
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestAccumulatorAddRemove,The following statement contains a magic number: accumulator.Remove(4);
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestAccumulatorAddRemove,The following statement contains a magic number: Assert.That(accumulator.Mean' NumericIs.AlmostEqualTo(14d / 3)' "B Mean");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestAccumulatorAddRemove,The following statement contains a magic number: Assert.That(accumulator.Mean' NumericIs.AlmostEqualTo(14d / 3)' "B Mean");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestAccumulatorAddRemove,The following statement contains a magic number: Assert.That(accumulator.Variance' NumericIs.AlmostEqualTo(23d / 2)' "B Variance");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestAccumulatorAddRemove,The following statement contains a magic number: Assert.That(accumulator.Variance' NumericIs.AlmostEqualTo(23d / 2)' "B Variance");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestAccumulatorAddRemove,The following statement contains a magic number: Assert.That(accumulator.Sum' NumericIs.AlmostEqualTo((double) 42)' "B Sum");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestAccumulatorAddRemove,The following statement contains a magic number: accumulator.Add(9);
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestAccumulatorAddRemove,The following statement contains a magic number: accumulator.Add(4);
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestAccumulatorAddRemove,The following statement contains a magic number: Assert.That(accumulator.Mean' NumericIs.AlmostEqualTo((double) 5)' "C Mean");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestAccumulatorAddRemove,The following statement contains a magic number: Assert.That(accumulator.Variance' NumericIs.AlmostEqualTo((double) 11)' "C Variance");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestAccumulatorAddRemove,The following statement contains a magic number: Assert.That(accumulator.Sum' NumericIs.AlmostEqualTo((double) 55)' "C Sum");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsMinMax,The following statement contains a magic number: double[] samples = new double[] { -1' 5' 0' -3' 10' -0.5' 4 };
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsMinMax,The following statement contains a magic number: double[] samples = new double[] { -1' 5' 0' -3' 10' -0.5' 4 };
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsMinMax,The following statement contains a magic number: double[] samples = new double[] { -1' 5' 0' -3' 10' -0.5' 4 };
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsMinMax,The following statement contains a magic number: double[] samples = new double[] { -1' 5' 0' -3' 10' -0.5' 4 };
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsMinMax,The following statement contains a magic number: double[] samples = new double[] { -1' 5' 0' -3' 10' -0.5' 4 };
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsMinMax,The following statement contains a magic number: Assert.That(DescriptiveStatistics.Min(samples)' Is.EqualTo(-3)' "Min");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsMinMax,The following statement contains a magic number: Assert.That(DescriptiveStatistics.Max(samples)' Is.EqualTo(10)' "Max");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsMeanVariance,The following statement contains a magic number: NormalDistribution gaussian = new NormalDistribution(1e+9' 2);
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsMeanVariance,The following statement contains a magic number: NormalDistribution gaussian = new NormalDistribution(1e+9' 2);
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsMeanVariance,The following statement contains a magic number: Assert.That(DescriptiveStatistics.Mean(gaussian.EnumerateDoubles(10000))' NumericIs.AlmostEqualTo(1e+9' 0.2)' "Mean of (1e+9'2)");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsMeanVariance,The following statement contains a magic number: Assert.That(DescriptiveStatistics.Mean(gaussian.EnumerateDoubles(10000))' NumericIs.AlmostEqualTo(1e+9' 0.2)' "Mean of (1e+9'2)");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsMeanVariance,The following statement contains a magic number: Assert.That(DescriptiveStatistics.Mean(gaussian.EnumerateDoubles(10000))' NumericIs.AlmostEqualTo(1e+9' 0.2)' "Mean of (1e+9'2)");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsMeanVariance,The following statement contains a magic number: Assert.That(DescriptiveStatistics.Variance(gaussian.EnumerateDoubles(10000))' NumericIs.AlmostEqualTo((double) 4' 0.5)' "Variance of (1e+9'2)");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsMeanVariance,The following statement contains a magic number: Assert.That(DescriptiveStatistics.Variance(gaussian.EnumerateDoubles(10000))' NumericIs.AlmostEqualTo((double) 4' 0.5)' "Variance of (1e+9'2)");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsMeanVariance,The following statement contains a magic number: Assert.That(DescriptiveStatistics.Variance(gaussian.EnumerateDoubles(10000))' NumericIs.AlmostEqualTo((double) 4' 0.5)' "Variance of (1e+9'2)");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsMeanVariance,The following statement contains a magic number: Assert.That(DescriptiveStatistics.StandardDeviation(gaussian.EnumerateDoubles(10000))' NumericIs.AlmostEqualTo((double) 2' 0.5)' "StdDev of (1e+9'2)");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsMeanVariance,The following statement contains a magic number: Assert.That(DescriptiveStatistics.StandardDeviation(gaussian.EnumerateDoubles(10000))' NumericIs.AlmostEqualTo((double) 2' 0.5)' "StdDev of (1e+9'2)");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsMeanVariance,The following statement contains a magic number: Assert.That(DescriptiveStatistics.StandardDeviation(gaussian.EnumerateDoubles(10000))' NumericIs.AlmostEqualTo((double) 2' 0.5)' "StdDev of (1e+9'2)");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsOrderMedian,The following statement contains a magic number: double[] samples = new double[] { -1' 5' 0' -3' 10' -0.5' 4' 1' 6 };
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsOrderMedian,The following statement contains a magic number: double[] samples = new double[] { -1' 5' 0' -3' 10' -0.5' 4' 1' 6 };
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsOrderMedian,The following statement contains a magic number: double[] samples = new double[] { -1' 5' 0' -3' 10' -0.5' 4' 1' 6 };
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsOrderMedian,The following statement contains a magic number: double[] samples = new double[] { -1' 5' 0' -3' 10' -0.5' 4' 1' 6 };
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsOrderMedian,The following statement contains a magic number: double[] samples = new double[] { -1' 5' 0' -3' 10' -0.5' 4' 1' 6 };
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsOrderMedian,The following statement contains a magic number: double[] samples = new double[] { -1' 5' 0' -3' 10' -0.5' 4' 1' 6 };
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsOrderMedian,The following statement contains a magic number: Assert.That(DescriptiveStatistics.OrderStatistic(samples' 1)' Is.EqualTo(-3)' "Order-1");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsOrderMedian,The following statement contains a magic number: Assert.That(DescriptiveStatistics.OrderStatistic(samples' 3)' Is.EqualTo(-0.5)' "Order-3");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsOrderMedian,The following statement contains a magic number: Assert.That(DescriptiveStatistics.OrderStatistic(samples' 3)' Is.EqualTo(-0.5)' "Order-3");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsOrderMedian,The following statement contains a magic number: Assert.That(DescriptiveStatistics.OrderStatistic(samples' 7)' Is.EqualTo(5)' "Order-7");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsOrderMedian,The following statement contains a magic number: Assert.That(DescriptiveStatistics.OrderStatistic(samples' 7)' Is.EqualTo(5)' "Order-7");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsOrderMedian,The following statement contains a magic number: Assert.That(DescriptiveStatistics.OrderStatistic(samples' 9)' Is.EqualTo(10)' "Order-9");
Magic Number,Iridium.Test.StatisticsTests,StatisticsTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\StatisticsTests\StatisticsTest.cs,TestDescriptiveStatisticsOrderMedian,The following statement contains a magic number: Assert.That(DescriptiveStatistics.OrderStatistic(samples' 9)' Is.EqualTo(10)' "Order-9");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,ComplexTestTimeEven,The following statement contains a magic number: i < samples.Length / 2
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,ComplexTestTimeOdd,The following statement contains a magic number: i < samples.Length / 2
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,ComplexTestFreqEven,The following statement contains a magic number: Assert.That(samples[len - 2 - i]' Is.EqualTo(samples[i + 2]).Within(0.00000001)' "Complex Even in Frequency Space: Real Part");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,ComplexTestFreqEven,The following statement contains a magic number: Assert.That(samples[len - 2 - i]' Is.EqualTo(samples[i + 2]).Within(0.00000001)' "Complex Even in Frequency Space: Real Part");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,ComplexTestFreqEven,The following statement contains a magic number: Assert.That(samples[len - 2 - i]' Is.EqualTo(samples[i + 2]).Within(0.00000001)' "Complex Even in Frequency Space: Real Part");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,ComplexTestFreqEven,The following statement contains a magic number: Assert.That(samples[len - 1 - i]' Is.EqualTo(samples[i + 3]).Within(0.00000001)' "Complex Even in Frequency Space: Imaginary Part");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,ComplexTestFreqEven,The following statement contains a magic number: Assert.That(samples[len - 1 - i]' Is.EqualTo(samples[i + 3]).Within(0.00000001)' "Complex Even in Frequency Space: Imaginary Part");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,ComplexTestFreqEven,The following statement contains a magic number: i < samples.Length / 2
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,ComplexTestFreqOdd,The following statement contains a magic number: Assert.That(-samples[len - 2 - i]' Is.EqualTo(samples[i + 2]).Within(0.00000001)' "Complex Odd in Frequency Space: Real Part");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,ComplexTestFreqOdd,The following statement contains a magic number: Assert.That(-samples[len - 2 - i]' Is.EqualTo(samples[i + 2]).Within(0.00000001)' "Complex Odd in Frequency Space: Real Part");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,ComplexTestFreqOdd,The following statement contains a magic number: Assert.That(-samples[len - 2 - i]' Is.EqualTo(samples[i + 2]).Within(0.00000001)' "Complex Odd in Frequency Space: Real Part");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,ComplexTestFreqOdd,The following statement contains a magic number: Assert.That(-samples[len - 1 - i]' Is.EqualTo(samples[i + 3]).Within(0.00000001)' "Complex Odd in Frequency Space: Imaginary Part");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,ComplexTestFreqOdd,The following statement contains a magic number: Assert.That(-samples[len - 1 - i]' Is.EqualTo(samples[i + 3]).Within(0.00000001)' "Complex Odd in Frequency Space: Imaginary Part");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,ComplexTestFreqOdd,The following statement contains a magic number: i < samples.Length / 2
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: const int numSamples = 32;
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: const int length = 2 * numSamples;
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[0 * 2]' NumericIs.AlmostEqualTo(25.128' 0.001)' "MATLAB 1");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[0 * 2]' NumericIs.AlmostEqualTo(25.128' 0.001)' "MATLAB 1");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[0 * 2]' NumericIs.AlmostEqualTo(25.128' 0.001)' "MATLAB 1");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[1 * 2]' NumericIs.AlmostEqualTo(-3.623' 0.001)' "MATLAB 2");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[1 * 2]' NumericIs.AlmostEqualTo(-3.623' 0.001)' "MATLAB 2");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[1 * 2]' NumericIs.AlmostEqualTo(-3.623' 0.001)' "MATLAB 2");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[2 * 2]' NumericIs.AlmostEqualTo(-0.31055' 0.0001)' "MATLAB 3");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[2 * 2]' NumericIs.AlmostEqualTo(-0.31055' 0.0001)' "MATLAB 3");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[2 * 2]' NumericIs.AlmostEqualTo(-0.31055' 0.0001)' "MATLAB 3");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[2 * 2]' NumericIs.AlmostEqualTo(-0.31055' 0.0001)' "MATLAB 3");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[6 * 2]' NumericIs.AlmostEqualTo(-0.050611' 0.00001)' "MATLAB 7");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[6 * 2]' NumericIs.AlmostEqualTo(-0.050611' 0.00001)' "MATLAB 7");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[6 * 2]' NumericIs.AlmostEqualTo(-0.050611' 0.00001)' "MATLAB 7");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[6 * 2]' NumericIs.AlmostEqualTo(-0.050611' 0.00001)' "MATLAB 7");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[7 * 2]' NumericIs.AlmostEqualTo(-0.03882' 0.00001)' "MATLAB 8");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[7 * 2]' NumericIs.AlmostEqualTo(-0.03882' 0.00001)' "MATLAB 8");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[7 * 2]' NumericIs.AlmostEqualTo(-0.03882' 0.00001)' "MATLAB 8");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[7 * 2]' NumericIs.AlmostEqualTo(-0.03882' 0.00001)' "MATLAB 8");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[8 * 2]' NumericIs.AlmostEqualTo(-0.031248' 0.00001)' "MATLAB 9");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[8 * 2]' NumericIs.AlmostEqualTo(-0.031248' 0.00001)' "MATLAB 9");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[8 * 2]' NumericIs.AlmostEqualTo(-0.031248' 0.00001)' "MATLAB 9");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[8 * 2]' NumericIs.AlmostEqualTo(-0.031248' 0.00001)' "MATLAB 9");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[13 * 2]' NumericIs.AlmostEqualTo(-0.017063' 0.0001)' "MATLAB 14");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[13 * 2]' NumericIs.AlmostEqualTo(-0.017063' 0.0001)' "MATLAB 14");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[13 * 2]' NumericIs.AlmostEqualTo(-0.017063' 0.0001)' "MATLAB 14");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[13 * 2]' NumericIs.AlmostEqualTo(-0.017063' 0.0001)' "MATLAB 14");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[14 * 2]' NumericIs.AlmostEqualTo(-0.016243' 0.00001)' "MATLAB 15");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[14 * 2]' NumericIs.AlmostEqualTo(-0.016243' 0.00001)' "MATLAB 15");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[14 * 2]' NumericIs.AlmostEqualTo(-0.016243' 0.00001)' "MATLAB 15");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[14 * 2]' NumericIs.AlmostEqualTo(-0.016243' 0.00001)' "MATLAB 15");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[15 * 2]' NumericIs.AlmostEqualTo(-0.015777' 0.0001)' "MATLAB 16");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[15 * 2]' NumericIs.AlmostEqualTo(-0.015777' 0.0001)' "MATLAB 16");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[15 * 2]' NumericIs.AlmostEqualTo(-0.015777' 0.0001)' "MATLAB 16");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealEven_RealEven,The following statement contains a magic number: Assert.That(data[15 * 2]' NumericIs.AlmostEqualTo(-0.015777' 0.0001)' "MATLAB 16");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: const int numSamples = 32;
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: const int length = 2 * numSamples;
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(0 * 2) + 1]' NumericIs.AlmostEqualTo(25.128' 0.001)' "MATLAB 1");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(0 * 2) + 1]' NumericIs.AlmostEqualTo(25.128' 0.001)' "MATLAB 1");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(0 * 2) + 1]' NumericIs.AlmostEqualTo(25.128' 0.001)' "MATLAB 1");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(1 * 2) + 1]' NumericIs.AlmostEqualTo(-3.623' 0.001)' "MATLAB 2");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(1 * 2) + 1]' NumericIs.AlmostEqualTo(-3.623' 0.001)' "MATLAB 2");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(1 * 2) + 1]' NumericIs.AlmostEqualTo(-3.623' 0.001)' "MATLAB 2");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(2 * 2) + 1]' NumericIs.AlmostEqualTo(-0.31055' 0.0001)' "MATLAB 3");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(2 * 2) + 1]' NumericIs.AlmostEqualTo(-0.31055' 0.0001)' "MATLAB 3");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(2 * 2) + 1]' NumericIs.AlmostEqualTo(-0.31055' 0.0001)' "MATLAB 3");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(2 * 2) + 1]' NumericIs.AlmostEqualTo(-0.31055' 0.0001)' "MATLAB 3");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(6 * 2) + 1]' NumericIs.AlmostEqualTo(-0.050611' 0.00001)' "MATLAB 7");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(6 * 2) + 1]' NumericIs.AlmostEqualTo(-0.050611' 0.00001)' "MATLAB 7");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(6 * 2) + 1]' NumericIs.AlmostEqualTo(-0.050611' 0.00001)' "MATLAB 7");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(6 * 2) + 1]' NumericIs.AlmostEqualTo(-0.050611' 0.00001)' "MATLAB 7");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(7 * 2) + 1]' NumericIs.AlmostEqualTo(-0.03882' 0.00001)' "MATLAB 8");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(7 * 2) + 1]' NumericIs.AlmostEqualTo(-0.03882' 0.00001)' "MATLAB 8");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(7 * 2) + 1]' NumericIs.AlmostEqualTo(-0.03882' 0.00001)' "MATLAB 8");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(7 * 2) + 1]' NumericIs.AlmostEqualTo(-0.03882' 0.00001)' "MATLAB 8");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(8 * 2) + 1]' NumericIs.AlmostEqualTo(-0.031248' 0.00001)' "MATLAB 9");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(8 * 2) + 1]' NumericIs.AlmostEqualTo(-0.031248' 0.00001)' "MATLAB 9");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(8 * 2) + 1]' NumericIs.AlmostEqualTo(-0.031248' 0.00001)' "MATLAB 9");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(8 * 2) + 1]' NumericIs.AlmostEqualTo(-0.031248' 0.00001)' "MATLAB 9");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(13 * 2) + 1]' NumericIs.AlmostEqualTo(-0.017063' 0.0001)' "MATLAB 14");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(13 * 2) + 1]' NumericIs.AlmostEqualTo(-0.017063' 0.0001)' "MATLAB 14");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(13 * 2) + 1]' NumericIs.AlmostEqualTo(-0.017063' 0.0001)' "MATLAB 14");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(13 * 2) + 1]' NumericIs.AlmostEqualTo(-0.017063' 0.0001)' "MATLAB 14");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(14 * 2) + 1]' NumericIs.AlmostEqualTo(-0.016243' 0.00001)' "MATLAB 15");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(14 * 2) + 1]' NumericIs.AlmostEqualTo(-0.016243' 0.00001)' "MATLAB 15");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(14 * 2) + 1]' NumericIs.AlmostEqualTo(-0.016243' 0.00001)' "MATLAB 15");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(14 * 2) + 1]' NumericIs.AlmostEqualTo(-0.016243' 0.00001)' "MATLAB 15");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(15 * 2) + 1]' NumericIs.AlmostEqualTo(-0.015777' 0.0001)' "MATLAB 16");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(15 * 2) + 1]' NumericIs.AlmostEqualTo(-0.015777' 0.0001)' "MATLAB 16");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(15 * 2) + 1]' NumericIs.AlmostEqualTo(-0.015777' 0.0001)' "MATLAB 16");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryEven_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(15 * 2) + 1]' NumericIs.AlmostEqualTo(-0.015777' 0.0001)' "MATLAB 16");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: const int numSamples = 32;
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: const int length = 2 * numSamples;
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(0 * 2) + 1]' NumericIs.AlmostEqualTo((double) 0' 0.001)' "MATLAB 1");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(0 * 2) + 1]' NumericIs.AlmostEqualTo((double) 0' 0.001)' "MATLAB 1");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(1 * 2) + 1]' NumericIs.AlmostEqualTo(7.4953' 0.0001)' "MATLAB 2");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(1 * 2) + 1]' NumericIs.AlmostEqualTo(7.4953' 0.0001)' "MATLAB 2");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(1 * 2) + 1]' NumericIs.AlmostEqualTo(7.4953' 0.0001)' "MATLAB 2");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(2 * 2) + 1]' NumericIs.AlmostEqualTo(2.4733' 0.0001)' "MATLAB 3");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(2 * 2) + 1]' NumericIs.AlmostEqualTo(2.4733' 0.0001)' "MATLAB 3");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(2 * 2) + 1]' NumericIs.AlmostEqualTo(2.4733' 0.0001)' "MATLAB 3");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(2 * 2) + 1]' NumericIs.AlmostEqualTo(2.4733' 0.0001)' "MATLAB 3");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(6 * 2) + 1]' NumericIs.AlmostEqualTo(0.75063' 0.00001)' "MATLAB 7");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(6 * 2) + 1]' NumericIs.AlmostEqualTo(0.75063' 0.00001)' "MATLAB 7");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(6 * 2) + 1]' NumericIs.AlmostEqualTo(0.75063' 0.00001)' "MATLAB 7");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(6 * 2) + 1]' NumericIs.AlmostEqualTo(0.75063' 0.00001)' "MATLAB 7");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(7 * 2) + 1]' NumericIs.AlmostEqualTo(0.61071' 0.00001)' "MATLAB 8");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(7 * 2) + 1]' NumericIs.AlmostEqualTo(0.61071' 0.00001)' "MATLAB 8");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(7 * 2) + 1]' NumericIs.AlmostEqualTo(0.61071' 0.00001)' "MATLAB 8");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(7 * 2) + 1]' NumericIs.AlmostEqualTo(0.61071' 0.00001)' "MATLAB 8");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(8 * 2) + 1]' NumericIs.AlmostEqualTo(0.50097' 0.00001)' "MATLAB 9");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(8 * 2) + 1]' NumericIs.AlmostEqualTo(0.50097' 0.00001)' "MATLAB 9");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(8 * 2) + 1]' NumericIs.AlmostEqualTo(0.50097' 0.00001)' "MATLAB 9");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(8 * 2) + 1]' NumericIs.AlmostEqualTo(0.50097' 0.00001)' "MATLAB 9");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(13 * 2) + 1]' NumericIs.AlmostEqualTo(0.15183' 0.0001)' "MATLAB 14");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(13 * 2) + 1]' NumericIs.AlmostEqualTo(0.15183' 0.0001)' "MATLAB 14");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(13 * 2) + 1]' NumericIs.AlmostEqualTo(0.15183' 0.0001)' "MATLAB 14");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(13 * 2) + 1]' NumericIs.AlmostEqualTo(0.15183' 0.0001)' "MATLAB 14");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(14 * 2) + 1]' NumericIs.AlmostEqualTo(0.099557' 0.00001)' "MATLAB 15");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(14 * 2) + 1]' NumericIs.AlmostEqualTo(0.099557' 0.00001)' "MATLAB 15");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(14 * 2) + 1]' NumericIs.AlmostEqualTo(0.099557' 0.00001)' "MATLAB 15");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(14 * 2) + 1]' NumericIs.AlmostEqualTo(0.099557' 0.00001)' "MATLAB 15");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(15 * 2) + 1]' NumericIs.AlmostEqualTo(0.049294' 0.00001)' "MATLAB 16");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(15 * 2) + 1]' NumericIs.AlmostEqualTo(0.049294' 0.00001)' "MATLAB 16");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(15 * 2) + 1]' NumericIs.AlmostEqualTo(0.049294' 0.00001)' "MATLAB 16");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_RealOdd_ImaginaryEven,The following statement contains a magic number: Assert.That(data[(15 * 2) + 1]' NumericIs.AlmostEqualTo(0.049294' 0.00001)' "MATLAB 16");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: const int numSamples = 32;
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: const int length = 2 * numSamples;
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[0 * 2]' NumericIs.AlmostEqualTo((double) 0' 0.001)' "MATLAB 1");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[0 * 2]' NumericIs.AlmostEqualTo((double) 0' 0.001)' "MATLAB 1");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[1 * 2]' NumericIs.AlmostEqualTo(-7.4953' 0.0001)' "MATLAB 2");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[1 * 2]' NumericIs.AlmostEqualTo(-7.4953' 0.0001)' "MATLAB 2");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[1 * 2]' NumericIs.AlmostEqualTo(-7.4953' 0.0001)' "MATLAB 2");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[2 * 2]' NumericIs.AlmostEqualTo(-2.4733' 0.0001)' "MATLAB 3");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[2 * 2]' NumericIs.AlmostEqualTo(-2.4733' 0.0001)' "MATLAB 3");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[2 * 2]' NumericIs.AlmostEqualTo(-2.4733' 0.0001)' "MATLAB 3");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[2 * 2]' NumericIs.AlmostEqualTo(-2.4733' 0.0001)' "MATLAB 3");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[6 * 2]' NumericIs.AlmostEqualTo(-0.75063' 0.00001)' "MATLAB 7");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[6 * 2]' NumericIs.AlmostEqualTo(-0.75063' 0.00001)' "MATLAB 7");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[6 * 2]' NumericIs.AlmostEqualTo(-0.75063' 0.00001)' "MATLAB 7");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[6 * 2]' NumericIs.AlmostEqualTo(-0.75063' 0.00001)' "MATLAB 7");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[7 * 2]' NumericIs.AlmostEqualTo(-0.61071' 0.00001)' "MATLAB 8");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[7 * 2]' NumericIs.AlmostEqualTo(-0.61071' 0.00001)' "MATLAB 8");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[7 * 2]' NumericIs.AlmostEqualTo(-0.61071' 0.00001)' "MATLAB 8");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[7 * 2]' NumericIs.AlmostEqualTo(-0.61071' 0.00001)' "MATLAB 8");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[8 * 2]' NumericIs.AlmostEqualTo(-0.50097' 0.00001)' "MATLAB 9");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[8 * 2]' NumericIs.AlmostEqualTo(-0.50097' 0.00001)' "MATLAB 9");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[8 * 2]' NumericIs.AlmostEqualTo(-0.50097' 0.00001)' "MATLAB 9");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[8 * 2]' NumericIs.AlmostEqualTo(-0.50097' 0.00001)' "MATLAB 9");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[13 * 2]' NumericIs.AlmostEqualTo(-0.15183' 0.0001)' "MATLAB 14");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[13 * 2]' NumericIs.AlmostEqualTo(-0.15183' 0.0001)' "MATLAB 14");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[13 * 2]' NumericIs.AlmostEqualTo(-0.15183' 0.0001)' "MATLAB 14");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[13 * 2]' NumericIs.AlmostEqualTo(-0.15183' 0.0001)' "MATLAB 14");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[14 * 2]' NumericIs.AlmostEqualTo(-0.099557' 0.00001)' "MATLAB 15");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[14 * 2]' NumericIs.AlmostEqualTo(-0.099557' 0.00001)' "MATLAB 15");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[14 * 2]' NumericIs.AlmostEqualTo(-0.099557' 0.00001)' "MATLAB 15");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[14 * 2]' NumericIs.AlmostEqualTo(-0.099557' 0.00001)' "MATLAB 15");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[15 * 2]' NumericIs.AlmostEqualTo(-0.049294' 0.00001)' "MATLAB 16");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[15 * 2]' NumericIs.AlmostEqualTo(-0.049294' 0.00001)' "MATLAB 16");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[15 * 2]' NumericIs.AlmostEqualTo(-0.049294' 0.00001)' "MATLAB 16");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Symmetry_ImaginaryOdd_RealEven,The following statement contains a magic number: Assert.That(data[15 * 2]' NumericIs.AlmostEqualTo(-0.049294' 0.00001)' "MATLAB 16");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: const int numSamples = 32;
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: const int length = 2 * numSamples;
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[0 * 2]' NumericIs.AlmostEqualTo(25.128' 0.001)' "MATLAB 1");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[0 * 2]' NumericIs.AlmostEqualTo(25.128' 0.001)' "MATLAB 1");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[0 * 2]' NumericIs.AlmostEqualTo(25.128' 0.001)' "MATLAB 1");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[1 * 2]' NumericIs.AlmostEqualTo(-11.118' 0.001)' "MATLAB 2");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[1 * 2]' NumericIs.AlmostEqualTo(-11.118' 0.001)' "MATLAB 2");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[1 * 2]' NumericIs.AlmostEqualTo(-11.118' 0.001)' "MATLAB 2");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[2 * 2]' NumericIs.AlmostEqualTo(-2.7838' 0.0001)' "MATLAB 3");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[2 * 2]' NumericIs.AlmostEqualTo(-2.7838' 0.0001)' "MATLAB 3");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[2 * 2]' NumericIs.AlmostEqualTo(-2.7838' 0.0001)' "MATLAB 3");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[2 * 2]' NumericIs.AlmostEqualTo(-2.7838' 0.0001)' "MATLAB 3");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[6 * 2]' NumericIs.AlmostEqualTo(-0.80124' 0.00001)' "MATLAB 7");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[6 * 2]' NumericIs.AlmostEqualTo(-0.80124' 0.00001)' "MATLAB 7");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[6 * 2]' NumericIs.AlmostEqualTo(-0.80124' 0.00001)' "MATLAB 7");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[6 * 2]' NumericIs.AlmostEqualTo(-0.80124' 0.00001)' "MATLAB 7");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[7 * 2]' NumericIs.AlmostEqualTo(-0.64953' 0.00001)' "MATLAB 8");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[7 * 2]' NumericIs.AlmostEqualTo(-0.64953' 0.00001)' "MATLAB 8");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[7 * 2]' NumericIs.AlmostEqualTo(-0.64953' 0.00001)' "MATLAB 8");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[7 * 2]' NumericIs.AlmostEqualTo(-0.64953' 0.00001)' "MATLAB 8");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[8 * 2]' NumericIs.AlmostEqualTo(-0.53221' 0.00001)' "MATLAB 9");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[8 * 2]' NumericIs.AlmostEqualTo(-0.53221' 0.00001)' "MATLAB 9");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[8 * 2]' NumericIs.AlmostEqualTo(-0.53221' 0.00001)' "MATLAB 9");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[8 * 2]' NumericIs.AlmostEqualTo(-0.53221' 0.00001)' "MATLAB 9");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[13 * 2]' NumericIs.AlmostEqualTo(-0.1689' 0.0001)' "MATLAB 14");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[13 * 2]' NumericIs.AlmostEqualTo(-0.1689' 0.0001)' "MATLAB 14");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[13 * 2]' NumericIs.AlmostEqualTo(-0.1689' 0.0001)' "MATLAB 14");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[13 * 2]' NumericIs.AlmostEqualTo(-0.1689' 0.0001)' "MATLAB 14");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[14 * 2]' NumericIs.AlmostEqualTo(-0.1158' 0.0001)' "MATLAB 15");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[14 * 2]' NumericIs.AlmostEqualTo(-0.1158' 0.0001)' "MATLAB 15");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[14 * 2]' NumericIs.AlmostEqualTo(-0.1158' 0.0001)' "MATLAB 15");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[14 * 2]' NumericIs.AlmostEqualTo(-0.1158' 0.0001)' "MATLAB 15");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[15 * 2]' NumericIs.AlmostEqualTo(-0.065071' 0.00001)' "MATLAB 16");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[15 * 2]' NumericIs.AlmostEqualTo(-0.065071' 0.00001)' "MATLAB 16");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[15 * 2]' NumericIs.AlmostEqualTo(-0.065071' 0.00001)' "MATLAB 16");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[15 * 2]' NumericIs.AlmostEqualTo(-0.065071' 0.00001)' "MATLAB 16");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[20 * 2]' NumericIs.AlmostEqualTo(0.18904' 0.0001)' "MATLAB 21");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[20 * 2]' NumericIs.AlmostEqualTo(0.18904' 0.0001)' "MATLAB 21");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[20 * 2]' NumericIs.AlmostEqualTo(0.18904' 0.0001)' "MATLAB 21");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[20 * 2]' NumericIs.AlmostEqualTo(0.18904' 0.0001)' "MATLAB 21");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[21 * 2]' NumericIs.AlmostEqualTo(0.2475' 0.0001)' "MATLAB 22");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[21 * 2]' NumericIs.AlmostEqualTo(0.2475' 0.0001)' "MATLAB 22");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[21 * 2]' NumericIs.AlmostEqualTo(0.2475' 0.0001)' "MATLAB 22");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[21 * 2]' NumericIs.AlmostEqualTo(0.2475' 0.0001)' "MATLAB 22");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[22 * 2]' NumericIs.AlmostEqualTo(0.31196' 0.00001)' "MATLAB 23");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[22 * 2]' NumericIs.AlmostEqualTo(0.31196' 0.00001)' "MATLAB 23");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[22 * 2]' NumericIs.AlmostEqualTo(0.31196' 0.00001)' "MATLAB 23");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[22 * 2]' NumericIs.AlmostEqualTo(0.31196' 0.00001)' "MATLAB 23");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[29 * 2]' NumericIs.AlmostEqualTo(1.4812' 0.0001)' "MATLAB 30");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[29 * 2]' NumericIs.AlmostEqualTo(1.4812' 0.0001)' "MATLAB 30");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[29 * 2]' NumericIs.AlmostEqualTo(1.4812' 0.0001)' "MATLAB 30");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[29 * 2]' NumericIs.AlmostEqualTo(1.4812' 0.0001)' "MATLAB 30");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[30 * 2]' NumericIs.AlmostEqualTo(2.1627' 0.0001)' "MATLAB 31");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[30 * 2]' NumericIs.AlmostEqualTo(2.1627' 0.0001)' "MATLAB 31");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[30 * 2]' NumericIs.AlmostEqualTo(2.1627' 0.0001)' "MATLAB 31");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[30 * 2]' NumericIs.AlmostEqualTo(2.1627' 0.0001)' "MATLAB 31");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[31 * 2]' NumericIs.AlmostEqualTo(3.8723' 0.0001)' "MATLAB 32");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[31 * 2]' NumericIs.AlmostEqualTo(3.8723' 0.0001)' "MATLAB 32");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[31 * 2]' NumericIs.AlmostEqualTo(3.8723' 0.0001)' "MATLAB 32");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[31 * 2]' NumericIs.AlmostEqualTo(3.8723' 0.0001)' "MATLAB 32");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[i]' NumericIs.AlmostEqualTo(1.0 / ((z * z) + 1.0)' 0.00001)' "Inv: Real: " + i);
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_Inverse_Mix,The following statement contains a magic number: Assert.That(data[i + 1]' NumericIs.AlmostEqualTo(i == 0 ? 0.0 : z / ((z * z) + 1.0)' 0.00001)' "Inv: Imag: " + i);
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: const int numSamples = 32;
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[0]' NumericIs.AlmostEqualTo(25.128' 0.001)' "MATLAB 1 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[0]' NumericIs.AlmostEqualTo(25.128' 0.001)' "MATLAB 1 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[1]' NumericIs.AlmostEqualTo(-3.623' 0.001)' "MATLAB 2 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[1]' NumericIs.AlmostEqualTo(-3.623' 0.001)' "MATLAB 2 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[2]' NumericIs.AlmostEqualTo(-0.31055' 0.0001)' "MATLAB 3 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[2]' NumericIs.AlmostEqualTo(-0.31055' 0.0001)' "MATLAB 3 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[2]' NumericIs.AlmostEqualTo(-0.31055' 0.0001)' "MATLAB 3 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[6]' NumericIs.AlmostEqualTo(-0.050611' 0.00001)' "MATLAB 7 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[6]' NumericIs.AlmostEqualTo(-0.050611' 0.00001)' "MATLAB 7 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[6]' NumericIs.AlmostEqualTo(-0.050611' 0.00001)' "MATLAB 7 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[7]' NumericIs.AlmostEqualTo(-0.03882' 0.00001)' "MATLAB 8 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[7]' NumericIs.AlmostEqualTo(-0.03882' 0.00001)' "MATLAB 8 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[7]' NumericIs.AlmostEqualTo(-0.03882' 0.00001)' "MATLAB 8 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[8]' NumericIs.AlmostEqualTo(-0.031248' 0.00001)' "MATLAB 9 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[8]' NumericIs.AlmostEqualTo(-0.031248' 0.00001)' "MATLAB 9 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[8]' NumericIs.AlmostEqualTo(-0.031248' 0.00001)' "MATLAB 9 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[13]' NumericIs.AlmostEqualTo(-0.017063' 0.0001)' "MATLAB 14 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[13]' NumericIs.AlmostEqualTo(-0.017063' 0.0001)' "MATLAB 14 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[13]' NumericIs.AlmostEqualTo(-0.017063' 0.0001)' "MATLAB 14 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[14]' NumericIs.AlmostEqualTo(-0.016243' 0.00001)' "MATLAB 15 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[14]' NumericIs.AlmostEqualTo(-0.016243' 0.00001)' "MATLAB 15 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[14]' NumericIs.AlmostEqualTo(-0.016243' 0.00001)' "MATLAB 15 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[15]' NumericIs.AlmostEqualTo(-0.015777' 0.0001)' "MATLAB 16 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[15]' NumericIs.AlmostEqualTo(-0.015777' 0.0001)' "MATLAB 16 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[15]' NumericIs.AlmostEqualTo(-0.015777' 0.0001)' "MATLAB 16 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(evenImag[1]' NumericIs.AlmostEqualTo((double) 0' 0.001)' "MATLAB 2i (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(evenImag[7]' NumericIs.AlmostEqualTo((double) 0' 0.001)' "MATLAB 8i (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(evenImag[7]' NumericIs.AlmostEqualTo((double) 0' 0.001)' "MATLAB 8i (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(evenImag[14]' NumericIs.AlmostEqualTo((double) 0' 0.001)' "MATLAB 15i (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(evenImag[14]' NumericIs.AlmostEqualTo((double) 0' 0.001)' "MATLAB 15i (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[0]' NumericIs.AlmostEqualTo((double) 0' 0.001)' "MATLAB 1 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[1]' NumericIs.AlmostEqualTo(7.4953' 0.0001)' "MATLAB 2 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[1]' NumericIs.AlmostEqualTo(7.4953' 0.0001)' "MATLAB 2 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[2]' NumericIs.AlmostEqualTo(2.4733' 0.0001)' "MATLAB 3 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[2]' NumericIs.AlmostEqualTo(2.4733' 0.0001)' "MATLAB 3 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[2]' NumericIs.AlmostEqualTo(2.4733' 0.0001)' "MATLAB 3 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[6]' NumericIs.AlmostEqualTo(0.75063' 0.00001)' "MATLAB 7 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[6]' NumericIs.AlmostEqualTo(0.75063' 0.00001)' "MATLAB 7 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[6]' NumericIs.AlmostEqualTo(0.75063' 0.00001)' "MATLAB 7 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[7]' NumericIs.AlmostEqualTo(0.61071' 0.00001)' "MATLAB 8 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[7]' NumericIs.AlmostEqualTo(0.61071' 0.00001)' "MATLAB 8 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[7]' NumericIs.AlmostEqualTo(0.61071' 0.00001)' "MATLAB 8 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[8]' NumericIs.AlmostEqualTo(0.50097' 0.00001)' "MATLAB 9 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[8]' NumericIs.AlmostEqualTo(0.50097' 0.00001)' "MATLAB 9 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[8]' NumericIs.AlmostEqualTo(0.50097' 0.00001)' "MATLAB 9 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[13]' NumericIs.AlmostEqualTo(0.15183' 0.0001)' "MATLAB 14 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[13]' NumericIs.AlmostEqualTo(0.15183' 0.0001)' "MATLAB 14 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[13]' NumericIs.AlmostEqualTo(0.15183' 0.0001)' "MATLAB 14 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[14]' NumericIs.AlmostEqualTo(0.099557' 0.00001)' "MATLAB 15 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[14]' NumericIs.AlmostEqualTo(0.099557' 0.00001)' "MATLAB 15 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[14]' NumericIs.AlmostEqualTo(0.099557' 0.00001)' "MATLAB 15 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[15]' NumericIs.AlmostEqualTo(0.049294' 0.00001)' "MATLAB 16 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[15]' NumericIs.AlmostEqualTo(0.049294' 0.00001)' "MATLAB 16 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[15]' NumericIs.AlmostEqualTo(0.049294' 0.00001)' "MATLAB 16 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(oddReal[1]' NumericIs.AlmostEqualTo((double) 0' 0.001)' "MATLAB 2r (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(oddReal[7]' NumericIs.AlmostEqualTo((double) 0' 0.001)' "MATLAB 8r (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(oddReal[7]' NumericIs.AlmostEqualTo((double) 0' 0.001)' "MATLAB 8r (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(oddReal[14]' NumericIs.AlmostEqualTo((double) 0' 0.001)' "MATLAB 15r (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_EvenOdd,The following statement contains a magic number: Assert.That(oddReal[14]' NumericIs.AlmostEqualTo((double) 0' 0.001)' "MATLAB 15r (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_Inverse,The following statement contains a magic number: const int numSamples = 32;
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_Inverse,The following statement contains a magic number: Assert.That(dataEven[i]' Is.EqualTo(dataEven2[i]).Within(0.00001)' "Inv: Even: " + i);
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_TwoReal_Inverse,The following statement contains a magic number: Assert.That(dataOdd[i]' Is.EqualTo(dataOdd2[i]).Within(0.00001)' "Inv: Odd: " + i);
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: const int numSamples = 32;
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[0]' NumericIs.AlmostEqualTo(25.128' 0.001)' "MATLAB 1 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[0]' NumericIs.AlmostEqualTo(25.128' 0.001)' "MATLAB 1 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[1]' NumericIs.AlmostEqualTo(-3.623' 0.001)' "MATLAB 2 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[1]' NumericIs.AlmostEqualTo(-3.623' 0.001)' "MATLAB 2 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[2]' NumericIs.AlmostEqualTo(-0.31055' 0.0001)' "MATLAB 3 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[2]' NumericIs.AlmostEqualTo(-0.31055' 0.0001)' "MATLAB 3 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[2]' NumericIs.AlmostEqualTo(-0.31055' 0.0001)' "MATLAB 3 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[6]' NumericIs.AlmostEqualTo(-0.050611' 0.00001)' "MATLAB 7 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[6]' NumericIs.AlmostEqualTo(-0.050611' 0.00001)' "MATLAB 7 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[6]' NumericIs.AlmostEqualTo(-0.050611' 0.00001)' "MATLAB 7 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[7]' NumericIs.AlmostEqualTo(-0.03882' 0.00001)' "MATLAB 8 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[7]' NumericIs.AlmostEqualTo(-0.03882' 0.00001)' "MATLAB 8 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[7]' NumericIs.AlmostEqualTo(-0.03882' 0.00001)' "MATLAB 8 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[8]' NumericIs.AlmostEqualTo(-0.031248' 0.00001)' "MATLAB 9 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[8]' NumericIs.AlmostEqualTo(-0.031248' 0.00001)' "MATLAB 9 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[8]' NumericIs.AlmostEqualTo(-0.031248' 0.00001)' "MATLAB 9 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[13]' NumericIs.AlmostEqualTo(-0.017063' 0.0001)' "MATLAB 14 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[13]' NumericIs.AlmostEqualTo(-0.017063' 0.0001)' "MATLAB 14 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[13]' NumericIs.AlmostEqualTo(-0.017063' 0.0001)' "MATLAB 14 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[14]' NumericIs.AlmostEqualTo(-0.016243' 0.00001)' "MATLAB 15 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[14]' NumericIs.AlmostEqualTo(-0.016243' 0.00001)' "MATLAB 15 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[14]' NumericIs.AlmostEqualTo(-0.016243' 0.00001)' "MATLAB 15 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[15]' NumericIs.AlmostEqualTo(-0.015777' 0.0001)' "MATLAB 16 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[15]' NumericIs.AlmostEqualTo(-0.015777' 0.0001)' "MATLAB 16 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(evenReal[15]' NumericIs.AlmostEqualTo(-0.015777' 0.0001)' "MATLAB 16 (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(evenImag[1]' NumericIs.AlmostEqualTo((double) 0' 0.001)' "MATLAB 2i (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(evenImag[7]' NumericIs.AlmostEqualTo((double) 0' 0.001)' "MATLAB 8i (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(evenImag[7]' NumericIs.AlmostEqualTo((double) 0' 0.001)' "MATLAB 8i (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(evenImag[14]' NumericIs.AlmostEqualTo((double) 0' 0.001)' "MATLAB 15i (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(evenImag[14]' NumericIs.AlmostEqualTo((double) 0' 0.001)' "MATLAB 15i (even)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[0]' NumericIs.AlmostEqualTo((double) 0' 0.001)' "MATLAB 1 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[1]' NumericIs.AlmostEqualTo(7.4953' 0.0001)' "MATLAB 2 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[1]' NumericIs.AlmostEqualTo(7.4953' 0.0001)' "MATLAB 2 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[2]' NumericIs.AlmostEqualTo(2.4733' 0.0001)' "MATLAB 3 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[2]' NumericIs.AlmostEqualTo(2.4733' 0.0001)' "MATLAB 3 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[2]' NumericIs.AlmostEqualTo(2.4733' 0.0001)' "MATLAB 3 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[6]' NumericIs.AlmostEqualTo(0.75063' 0.00001)' "MATLAB 7 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[6]' NumericIs.AlmostEqualTo(0.75063' 0.00001)' "MATLAB 7 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[6]' NumericIs.AlmostEqualTo(0.75063' 0.00001)' "MATLAB 7 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[7]' NumericIs.AlmostEqualTo(0.61071' 0.00001)' "MATLAB 8 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[7]' NumericIs.AlmostEqualTo(0.61071' 0.00001)' "MATLAB 8 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[7]' NumericIs.AlmostEqualTo(0.61071' 0.00001)' "MATLAB 8 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[8]' NumericIs.AlmostEqualTo(0.50097' 0.00001)' "MATLAB 9 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[8]' NumericIs.AlmostEqualTo(0.50097' 0.00001)' "MATLAB 9 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[8]' NumericIs.AlmostEqualTo(0.50097' 0.00001)' "MATLAB 9 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[13]' NumericIs.AlmostEqualTo(0.15183' 0.0001)' "MATLAB 14 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[13]' NumericIs.AlmostEqualTo(0.15183' 0.0001)' "MATLAB 14 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[13]' NumericIs.AlmostEqualTo(0.15183' 0.0001)' "MATLAB 14 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[14]' NumericIs.AlmostEqualTo(0.099557' 0.00001)' "MATLAB 15 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[14]' NumericIs.AlmostEqualTo(0.099557' 0.00001)' "MATLAB 15 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[14]' NumericIs.AlmostEqualTo(0.099557' 0.00001)' "MATLAB 15 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[15]' NumericIs.AlmostEqualTo(0.049294' 0.00001)' "MATLAB 16 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[15]' NumericIs.AlmostEqualTo(0.049294' 0.00001)' "MATLAB 16 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(oddImag[15]' NumericIs.AlmostEqualTo(0.049294' 0.00001)' "MATLAB 16 (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(oddReal[1]' NumericIs.AlmostEqualTo((double) 0' 0.001)' "MATLAB 2r (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(oddReal[7]' NumericIs.AlmostEqualTo((double) 0' 0.001)' "MATLAB 8r (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(oddReal[7]' NumericIs.AlmostEqualTo((double) 0' 0.001)' "MATLAB 8r (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(oddReal[14]' NumericIs.AlmostEqualTo((double) 0' 0.001)' "MATLAB 15r (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_EvenOdd,The following statement contains a magic number: Assert.That(oddReal[14]' NumericIs.AlmostEqualTo((double) 0' 0.001)' "MATLAB 15r (odd)");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_Inverse,The following statement contains a magic number: const int numSamples = 32;
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_Inverse,The following statement contains a magic number: Assert.That(dataEven[i]' Is.EqualTo(dataEven2[i]).Within(0.00001)' "Inv: Even: " + i);
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Real_SingleReal_Inverse,The following statement contains a magic number: Assert.That(dataOdd[i] * half' Is.EqualTo(dataOdd2[i]).Within(0.00001)' "Inv: Odd: " + i);
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: const int numSamples = 32;
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: const int length = 2 * numSamples;
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[0 * 2]' NumericIs.AlmostEqualTo(25.128' 0.001)' "MATLAB 1");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[0 * 2]' NumericIs.AlmostEqualTo(25.128' 0.001)' "MATLAB 1");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[0 * 2]' NumericIs.AlmostEqualTo(25.128' 0.001)' "MATLAB 1");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[1 * 2]' NumericIs.AlmostEqualTo(-11.118' 0.001)' "MATLAB 2");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[1 * 2]' NumericIs.AlmostEqualTo(-11.118' 0.001)' "MATLAB 2");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[1 * 2]' NumericIs.AlmostEqualTo(-11.118' 0.001)' "MATLAB 2");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[2 * 2]' NumericIs.AlmostEqualTo(-2.7838' 0.0001)' "MATLAB 3");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[2 * 2]' NumericIs.AlmostEqualTo(-2.7838' 0.0001)' "MATLAB 3");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[2 * 2]' NumericIs.AlmostEqualTo(-2.7838' 0.0001)' "MATLAB 3");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[2 * 2]' NumericIs.AlmostEqualTo(-2.7838' 0.0001)' "MATLAB 3");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[6 * 2]' NumericIs.AlmostEqualTo(-0.80124' 0.00001)' "MATLAB 7");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[6 * 2]' NumericIs.AlmostEqualTo(-0.80124' 0.00001)' "MATLAB 7");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[6 * 2]' NumericIs.AlmostEqualTo(-0.80124' 0.00001)' "MATLAB 7");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[6 * 2]' NumericIs.AlmostEqualTo(-0.80124' 0.00001)' "MATLAB 7");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[7 * 2]' NumericIs.AlmostEqualTo(-0.64953' 0.00001)' "MATLAB 8");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[7 * 2]' NumericIs.AlmostEqualTo(-0.64953' 0.00001)' "MATLAB 8");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[7 * 2]' NumericIs.AlmostEqualTo(-0.64953' 0.00001)' "MATLAB 8");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[7 * 2]' NumericIs.AlmostEqualTo(-0.64953' 0.00001)' "MATLAB 8");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[8 * 2]' NumericIs.AlmostEqualTo(-0.53221' 0.00001)' "MATLAB 9");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[8 * 2]' NumericIs.AlmostEqualTo(-0.53221' 0.00001)' "MATLAB 9");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[8 * 2]' NumericIs.AlmostEqualTo(-0.53221' 0.00001)' "MATLAB 9");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[8 * 2]' NumericIs.AlmostEqualTo(-0.53221' 0.00001)' "MATLAB 9");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[13 * 2]' NumericIs.AlmostEqualTo(-0.1689' 0.0001)' "MATLAB 14");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[13 * 2]' NumericIs.AlmostEqualTo(-0.1689' 0.0001)' "MATLAB 14");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[13 * 2]' NumericIs.AlmostEqualTo(-0.1689' 0.0001)' "MATLAB 14");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[13 * 2]' NumericIs.AlmostEqualTo(-0.1689' 0.0001)' "MATLAB 14");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[14 * 2]' NumericIs.AlmostEqualTo(-0.1158' 0.0001)' "MATLAB 15");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[14 * 2]' NumericIs.AlmostEqualTo(-0.1158' 0.0001)' "MATLAB 15");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[14 * 2]' NumericIs.AlmostEqualTo(-0.1158' 0.0001)' "MATLAB 15");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[14 * 2]' NumericIs.AlmostEqualTo(-0.1158' 0.0001)' "MATLAB 15");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[15 * 2]' NumericIs.AlmostEqualTo(-0.065071' 0.00001)' "MATLAB 16");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[15 * 2]' NumericIs.AlmostEqualTo(-0.065071' 0.00001)' "MATLAB 16");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[15 * 2]' NumericIs.AlmostEqualTo(-0.065071' 0.00001)' "MATLAB 16");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[15 * 2]' NumericIs.AlmostEqualTo(-0.065071' 0.00001)' "MATLAB 16");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[20 * 2]' NumericIs.AlmostEqualTo(0.18904' 0.0001)' "MATLAB 21");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[20 * 2]' NumericIs.AlmostEqualTo(0.18904' 0.0001)' "MATLAB 21");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[20 * 2]' NumericIs.AlmostEqualTo(0.18904' 0.0001)' "MATLAB 21");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[20 * 2]' NumericIs.AlmostEqualTo(0.18904' 0.0001)' "MATLAB 21");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[21 * 2]' NumericIs.AlmostEqualTo(0.2475' 0.0001)' "MATLAB 22");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[21 * 2]' NumericIs.AlmostEqualTo(0.2475' 0.0001)' "MATLAB 22");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[21 * 2]' NumericIs.AlmostEqualTo(0.2475' 0.0001)' "MATLAB 22");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[21 * 2]' NumericIs.AlmostEqualTo(0.2475' 0.0001)' "MATLAB 22");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[22 * 2]' NumericIs.AlmostEqualTo(0.31196' 0.00001)' "MATLAB 23");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[22 * 2]' NumericIs.AlmostEqualTo(0.31196' 0.00001)' "MATLAB 23");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[22 * 2]' NumericIs.AlmostEqualTo(0.31196' 0.00001)' "MATLAB 23");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[22 * 2]' NumericIs.AlmostEqualTo(0.31196' 0.00001)' "MATLAB 23");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[29 * 2]' NumericIs.AlmostEqualTo(1.4812' 0.0001)' "MATLAB 30");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[29 * 2]' NumericIs.AlmostEqualTo(1.4812' 0.0001)' "MATLAB 30");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[29 * 2]' NumericIs.AlmostEqualTo(1.4812' 0.0001)' "MATLAB 30");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[29 * 2]' NumericIs.AlmostEqualTo(1.4812' 0.0001)' "MATLAB 30");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[30 * 2]' NumericIs.AlmostEqualTo(2.1627' 0.0001)' "MATLAB 31");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[30 * 2]' NumericIs.AlmostEqualTo(2.1627' 0.0001)' "MATLAB 31");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[30 * 2]' NumericIs.AlmostEqualTo(2.1627' 0.0001)' "MATLAB 31");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[30 * 2]' NumericIs.AlmostEqualTo(2.1627' 0.0001)' "MATLAB 31");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[31 * 2]' NumericIs.AlmostEqualTo(3.8723' 0.0001)' "MATLAB 32");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[31 * 2]' NumericIs.AlmostEqualTo(3.8723' 0.0001)' "MATLAB 32");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[31 * 2]' NumericIs.AlmostEqualTo(3.8723' 0.0001)' "MATLAB 32");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[31 * 2]' NumericIs.AlmostEqualTo(3.8723' 0.0001)' "MATLAB 32");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[i]' Is.EqualTo(1.0 / ((z * z) + 1.0)).Within(0.00001)' "Inv: Real: " + i);
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_1D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[i + 1]' Is.EqualTo(i == 0 ? 0.0 : z / ((z * z) + 1.0)).Within(0.00001)' "Inv: Imag: " + i);
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_2D_Inverse_Mix,The following statement contains a magic number: const int numSamples = 4;
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_2D_Inverse_Mix,The following statement contains a magic number: const int length = 2 * numSamples;
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_2D_Inverse_Mix,The following statement contains a magic number: int[] dims = new int[] { 2' 2 };
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_2D_Inverse_Mix,The following statement contains a magic number: int[] dims = new int[] { 2' 2 };
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_2D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[0 * 2]' Is.EqualTo(12)' "MATLAB 1");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_2D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[0 * 2]' Is.EqualTo(12)' "MATLAB 1");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_2D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(0 * 2) + 1]' Is.EqualTo(0)' "MATLAB 1b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_2D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[1 * 2]' Is.EqualTo(-4)' "MATLAB 2");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_2D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[1 * 2]' Is.EqualTo(-4)' "MATLAB 2");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_2D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(1 * 2) + 1]' Is.EqualTo(0)' "MATLAB 2b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_2D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[2 * 2]' Is.EqualTo(-8)' "MATLAB 3");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_2D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[2 * 2]' Is.EqualTo(-8)' "MATLAB 3");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_2D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[2 * 2]' Is.EqualTo(-8)' "MATLAB 3");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_2D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(2 * 2) + 1]' Is.EqualTo(4)' "MATLAB 3b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_2D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(2 * 2) + 1]' Is.EqualTo(4)' "MATLAB 3b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_2D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(2 * 2) + 1]' Is.EqualTo(4)' "MATLAB 3b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_2D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[3 * 2]' Is.EqualTo(0)' "MATLAB 4");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_2D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[3 * 2]' Is.EqualTo(0)' "MATLAB 4");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_2D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(3 * 2) + 1]' Is.EqualTo(-4)' "MATLAB 4b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_2D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(3 * 2) + 1]' Is.EqualTo(-4)' "MATLAB 4b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_2D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(3 * 2) + 1]' Is.EqualTo(-4)' "MATLAB 4b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: int[] dims = new int[] { 2' 4' 8 };
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: int[] dims = new int[] { 2' 4' 8 };
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: int[] dims = new int[] { 2' 4' 8 };
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: const int ntot = 2 * 4 * 8;
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: const int ntot = 2 * 4 * 8;
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: const int ntot = 2 * 4 * 8;
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: const int len = 2 * ntot;
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[0 * 2]' NumericIs.AlmostEqualTo((double) 4032)' "MATLAB 1");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[0 * 2]' NumericIs.AlmostEqualTo((double) 4032)' "MATLAB 1");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(0 * 2) + 1]' NumericIs.AlmostEqualTo((double) 0)' "MATLAB 1b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[1 * 2]' NumericIs.AlmostEqualTo((double) (-64))' "MATLAB 2");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[1 * 2]' NumericIs.AlmostEqualTo((double) (-64))' "MATLAB 2");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(1 * 2) + 1]' NumericIs.AlmostEqualTo(154.51' 1e-5)' "MATLAB 2b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(1 * 2) + 1]' NumericIs.AlmostEqualTo(154.51' 1e-5)' "MATLAB 2b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(1 * 2) + 1]' NumericIs.AlmostEqualTo(154.51' 1e-5)' "MATLAB 2b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[2 * 2]' NumericIs.AlmostEqualTo((double) (-64))' "MATLAB 3");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[2 * 2]' NumericIs.AlmostEqualTo((double) (-64))' "MATLAB 3");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[2 * 2]' NumericIs.AlmostEqualTo((double) (-64))' "MATLAB 3");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(2 * 2) + 1]' NumericIs.AlmostEqualTo((double) 64)' "MATLAB 3b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(2 * 2) + 1]' NumericIs.AlmostEqualTo((double) 64)' "MATLAB 3b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(2 * 2) + 1]' NumericIs.AlmostEqualTo((double) 64)' "MATLAB 3b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[6 * 2]' NumericIs.AlmostEqualTo((double) (-64))' "MATLAB 7");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[6 * 2]' NumericIs.AlmostEqualTo((double) (-64))' "MATLAB 7");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[6 * 2]' NumericIs.AlmostEqualTo((double) (-64))' "MATLAB 7");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(6 * 2) + 1]' NumericIs.AlmostEqualTo((double) (-64))' "MATLAB 7b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(6 * 2) + 1]' NumericIs.AlmostEqualTo((double) (-64))' "MATLAB 7b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(6 * 2) + 1]' NumericIs.AlmostEqualTo((double) (-64))' "MATLAB 7b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[7 * 2]' NumericIs.AlmostEqualTo((double) (-64))' "MATLAB 8");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[7 * 2]' NumericIs.AlmostEqualTo((double) (-64))' "MATLAB 8");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[7 * 2]' NumericIs.AlmostEqualTo((double) (-64))' "MATLAB 8");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(7 * 2) + 1]' NumericIs.AlmostEqualTo(-154.51' 1e-5)' "MATLAB 8b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(7 * 2) + 1]' NumericIs.AlmostEqualTo(-154.51' 1e-5)' "MATLAB 8b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(7 * 2) + 1]' NumericIs.AlmostEqualTo(-154.51' 1e-5)' "MATLAB 8b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(7 * 2) + 1]' NumericIs.AlmostEqualTo(-154.51' 1e-5)' "MATLAB 8b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[8 * 2]' NumericIs.AlmostEqualTo((double) (-512))' "MATLAB 9");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[8 * 2]' NumericIs.AlmostEqualTo((double) (-512))' "MATLAB 9");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[8 * 2]' NumericIs.AlmostEqualTo((double) (-512))' "MATLAB 9");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(8 * 2) + 1]' NumericIs.AlmostEqualTo((double) 512)' "MATLAB 9b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(8 * 2) + 1]' NumericIs.AlmostEqualTo((double) 512)' "MATLAB 9b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(8 * 2) + 1]' NumericIs.AlmostEqualTo((double) 512)' "MATLAB 9b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[9 * 2]' NumericIs.AlmostEqualTo((double) 0)' "MATLAB 10");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[9 * 2]' NumericIs.AlmostEqualTo((double) 0)' "MATLAB 10");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(9 * 2) + 1]' NumericIs.AlmostEqualTo((double) 0)' "MATLAB 10b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(9 * 2) + 1]' NumericIs.AlmostEqualTo((double) 0)' "MATLAB 10b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[15 * 2]' NumericIs.AlmostEqualTo((double) 0)' "MATLAB 16");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[15 * 2]' NumericIs.AlmostEqualTo((double) 0)' "MATLAB 16");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(15 * 2) + 1]' NumericIs.AlmostEqualTo((double) 0)' "MATLAB 16b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(15 * 2) + 1]' NumericIs.AlmostEqualTo((double) 0)' "MATLAB 16b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[16 * 2]' NumericIs.AlmostEqualTo((double) (-512))' "MATLAB 17");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[16 * 2]' NumericIs.AlmostEqualTo((double) (-512))' "MATLAB 17");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[16 * 2]' NumericIs.AlmostEqualTo((double) (-512))' "MATLAB 17");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(16 * 2) + 1]' NumericIs.AlmostEqualTo((double) 0)' "MATLAB 17b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(16 * 2) + 1]' NumericIs.AlmostEqualTo((double) 0)' "MATLAB 17b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[24 * 2]' NumericIs.AlmostEqualTo((double) (-512))' "MATLAB 25");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[24 * 2]' NumericIs.AlmostEqualTo((double) (-512))' "MATLAB 25");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[24 * 2]' NumericIs.AlmostEqualTo((double) (-512))' "MATLAB 25");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(24 * 2) + 1]' NumericIs.AlmostEqualTo((double) (-512))' "MATLAB 25b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(24 * 2) + 1]' NumericIs.AlmostEqualTo((double) (-512))' "MATLAB 25b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(24 * 2) + 1]' NumericIs.AlmostEqualTo((double) (-512))' "MATLAB 25b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[32 * 2]' NumericIs.AlmostEqualTo((double) (-2048))' "MATLAB 33");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[32 * 2]' NumericIs.AlmostEqualTo((double) (-2048))' "MATLAB 33");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[32 * 2]' NumericIs.AlmostEqualTo((double) (-2048))' "MATLAB 33");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(32 * 2) + 1]' NumericIs.AlmostEqualTo((double) 0)' "MATLAB 33b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(32 * 2) + 1]' NumericIs.AlmostEqualTo((double) 0)' "MATLAB 33b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[33 * 2]' NumericIs.AlmostEqualTo((double) 0)' "MATLAB 34");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[33 * 2]' NumericIs.AlmostEqualTo((double) 0)' "MATLAB 34");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(33 * 2) + 1]' NumericIs.AlmostEqualTo((double) 0)' "MATLAB 34b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(33 * 2) + 1]' NumericIs.AlmostEqualTo((double) 0)' "MATLAB 34b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[39 * 2]' NumericIs.AlmostEqualTo((double) 0)' "MATLAB 40");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[39 * 2]' NumericIs.AlmostEqualTo((double) 0)' "MATLAB 40");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(39 * 2) + 1]' NumericIs.AlmostEqualTo((double) 0)' "MATLAB 40b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(39 * 2) + 1]' NumericIs.AlmostEqualTo((double) 0)' "MATLAB 40b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[56 * 2]' NumericIs.AlmostEqualTo((double) 0)' "MATLAB 57");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[56 * 2]' NumericIs.AlmostEqualTo((double) 0)' "MATLAB 57");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(56 * 2) + 1]' NumericIs.AlmostEqualTo((double) 0)' "MATLAB 57b");
Magic Number,Iridium.Test.TransformationsTests,FftTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftTest.cs,Complex_MultiDim_3D_Inverse_Mix,The following statement contains a magic number: Assert.That(data[(56 * 2) + 1]' NumericIs.AlmostEqualTo((double) 0)' "MATLAB 57b");
Magic Number,Iridium.Test.TransformationsTests,FftStressTest,D:\research\architectureSmells\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\TransformationsTests\FftStressTest.cs,FftSingleReal,The following statement contains a magic number: Assert.That(dataEven2[i]' NumericIs.AlmostEqualTo(dataEven[i]' 1e-5)' i.ToString());
