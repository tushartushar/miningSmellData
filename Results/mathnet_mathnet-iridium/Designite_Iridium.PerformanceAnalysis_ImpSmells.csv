Implementation smell,Namespace,Class,File,Method,Description
Long Method,PerformanceAnalysis,Program,C:\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\PerformanceAnalysis\Program.cs,Main,The method has 102 lines of code.
Long Statement,PerformanceAnalysis,Program,C:\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\PerformanceAnalysis\Program.cs,Main,The length of the statement  "            //        Console.WriteLine("  " + sizes[i].ToString() + ": " + (stopwatch.ElapsedMilliseconds / 5).ToString() + " ms"); " is 120.
Long Statement,PerformanceAnalysis,Program,C:\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\PerformanceAnalysis\Program.cs,Main,The length of the statement  "            //        Console.WriteLine("  " + sizes[i].ToString() + ": " + (stopwatch.ElapsedMilliseconds / 5).ToString() + " ms"); " is 120.
Magic Number,PerformanceAnalysis,Program,C:\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\PerformanceAnalysis\Program.cs,Main,The following statement contains a magic number: {                  Console.WriteLine("=== LINEAR ALGEBRA ===");                  Console.WriteLine("Building Samples...");                    int[] sizes = new int[] { 100' 200' 400' 600' 800' 1000 };                  LinearSystemProvider provider = new LinearSystemProvider();                    double[]['] sampleMatrices = new double[sizes.Length]['];                  double[]['] sampleVectors = new double[sizes.Length]['];                  for(int i = 0; i < sizes.Length; i++)                  {                      sampleMatrices[i] = provider.BuildMatrix(sizes[i]);                      sampleVectors[i] = provider.BuildVector(sizes[i]);                  }                  provider = null;                    Console.WriteLine("Warm Up...");                    Matrix maw = Matrix.Create(sampleMatrices[sizes.Length - 1]);                  Matrix mxw = Matrix.Create(sampleVectors[sizes.Length - 1]);                    maw.Solve(mxw);                    Console.WriteLine("Timing...");                    Stopwatch stopwatch = new Stopwatch();                    for(int i = 0; i < sizes.Length; i++)                  {                      Matrix ma = Matrix.Create(sampleMatrices[i]);                      Matrix mx = Matrix.Create(sampleVectors[i]);                      stopwatch.Reset();                        ma.Solve(mx);                      ma.Solve(mx);                        stopwatch.Start();                      ma.Solve(mx);                      ma.Solve(mx);                      ma.Solve(mx);                      ma.Solve(mx);                      ma.Solve(mx);                      stopwatch.Stop();                        Console.WriteLine("  " + sizes[i].ToString() + ": " + (stopwatch.ElapsedMilliseconds / 5).ToString() + " ms");                  }              }
Magic Number,PerformanceAnalysis,Program,C:\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\PerformanceAnalysis\Program.cs,Main,The following statement contains a magic number: {                  Console.WriteLine("=== LINEAR ALGEBRA ===");                  Console.WriteLine("Building Samples...");                    int[] sizes = new int[] { 100' 200' 400' 600' 800' 1000 };                  LinearSystemProvider provider = new LinearSystemProvider();                    double[]['] sampleMatrices = new double[sizes.Length]['];                  double[]['] sampleVectors = new double[sizes.Length]['];                  for(int i = 0; i < sizes.Length; i++)                  {                      sampleMatrices[i] = provider.BuildMatrix(sizes[i]);                      sampleVectors[i] = provider.BuildVector(sizes[i]);                  }                  provider = null;                    Console.WriteLine("Warm Up...");                    Matrix maw = Matrix.Create(sampleMatrices[sizes.Length - 1]);                  Matrix mxw = Matrix.Create(sampleVectors[sizes.Length - 1]);                    maw.Solve(mxw);                    Console.WriteLine("Timing...");                    Stopwatch stopwatch = new Stopwatch();                    for(int i = 0; i < sizes.Length; i++)                  {                      Matrix ma = Matrix.Create(sampleMatrices[i]);                      Matrix mx = Matrix.Create(sampleVectors[i]);                      stopwatch.Reset();                        ma.Solve(mx);                      ma.Solve(mx);                        stopwatch.Start();                      ma.Solve(mx);                      ma.Solve(mx);                      ma.Solve(mx);                      ma.Solve(mx);                      ma.Solve(mx);                      stopwatch.Stop();                        Console.WriteLine("  " + sizes[i].ToString() + ": " + (stopwatch.ElapsedMilliseconds / 5).ToString() + " ms");                  }              }
Magic Number,PerformanceAnalysis,Program,C:\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\PerformanceAnalysis\Program.cs,Main,The following statement contains a magic number: {                  Console.WriteLine("=== LINEAR ALGEBRA ===");                  Console.WriteLine("Building Samples...");                    int[] sizes = new int[] { 100' 200' 400' 600' 800' 1000 };                  LinearSystemProvider provider = new LinearSystemProvider();                    double[]['] sampleMatrices = new double[sizes.Length]['];                  double[]['] sampleVectors = new double[sizes.Length]['];                  for(int i = 0; i < sizes.Length; i++)                  {                      sampleMatrices[i] = provider.BuildMatrix(sizes[i]);                      sampleVectors[i] = provider.BuildVector(sizes[i]);                  }                  provider = null;                    Console.WriteLine("Warm Up...");                    Matrix maw = Matrix.Create(sampleMatrices[sizes.Length - 1]);                  Matrix mxw = Matrix.Create(sampleVectors[sizes.Length - 1]);                    maw.Solve(mxw);                    Console.WriteLine("Timing...");                    Stopwatch stopwatch = new Stopwatch();                    for(int i = 0; i < sizes.Length; i++)                  {                      Matrix ma = Matrix.Create(sampleMatrices[i]);                      Matrix mx = Matrix.Create(sampleVectors[i]);                      stopwatch.Reset();                        ma.Solve(mx);                      ma.Solve(mx);                        stopwatch.Start();                      ma.Solve(mx);                      ma.Solve(mx);                      ma.Solve(mx);                      ma.Solve(mx);                      ma.Solve(mx);                      stopwatch.Stop();                        Console.WriteLine("  " + sizes[i].ToString() + ": " + (stopwatch.ElapsedMilliseconds / 5).ToString() + " ms");                  }              }
Magic Number,PerformanceAnalysis,Program,C:\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\PerformanceAnalysis\Program.cs,Main,The following statement contains a magic number: {                  Console.WriteLine("=== LINEAR ALGEBRA ===");                  Console.WriteLine("Building Samples...");                    int[] sizes = new int[] { 100' 200' 400' 600' 800' 1000 };                  LinearSystemProvider provider = new LinearSystemProvider();                    double[]['] sampleMatrices = new double[sizes.Length]['];                  double[]['] sampleVectors = new double[sizes.Length]['];                  for(int i = 0; i < sizes.Length; i++)                  {                      sampleMatrices[i] = provider.BuildMatrix(sizes[i]);                      sampleVectors[i] = provider.BuildVector(sizes[i]);                  }                  provider = null;                    Console.WriteLine("Warm Up...");                    Matrix maw = Matrix.Create(sampleMatrices[sizes.Length - 1]);                  Matrix mxw = Matrix.Create(sampleVectors[sizes.Length - 1]);                    maw.Solve(mxw);                    Console.WriteLine("Timing...");                    Stopwatch stopwatch = new Stopwatch();                    for(int i = 0; i < sizes.Length; i++)                  {                      Matrix ma = Matrix.Create(sampleMatrices[i]);                      Matrix mx = Matrix.Create(sampleVectors[i]);                      stopwatch.Reset();                        ma.Solve(mx);                      ma.Solve(mx);                        stopwatch.Start();                      ma.Solve(mx);                      ma.Solve(mx);                      ma.Solve(mx);                      ma.Solve(mx);                      ma.Solve(mx);                      stopwatch.Stop();                        Console.WriteLine("  " + sizes[i].ToString() + ": " + (stopwatch.ElapsedMilliseconds / 5).ToString() + " ms");                  }              }
Magic Number,PerformanceAnalysis,Program,C:\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\PerformanceAnalysis\Program.cs,Main,The following statement contains a magic number: {                  Console.WriteLine("=== LINEAR ALGEBRA ===");                  Console.WriteLine("Building Samples...");                    int[] sizes = new int[] { 100' 200' 400' 600' 800' 1000 };                  LinearSystemProvider provider = new LinearSystemProvider();                    double[]['] sampleMatrices = new double[sizes.Length]['];                  double[]['] sampleVectors = new double[sizes.Length]['];                  for(int i = 0; i < sizes.Length; i++)                  {                      sampleMatrices[i] = provider.BuildMatrix(sizes[i]);                      sampleVectors[i] = provider.BuildVector(sizes[i]);                  }                  provider = null;                    Console.WriteLine("Warm Up...");                    Matrix maw = Matrix.Create(sampleMatrices[sizes.Length - 1]);                  Matrix mxw = Matrix.Create(sampleVectors[sizes.Length - 1]);                    maw.Solve(mxw);                    Console.WriteLine("Timing...");                    Stopwatch stopwatch = new Stopwatch();                    for(int i = 0; i < sizes.Length; i++)                  {                      Matrix ma = Matrix.Create(sampleMatrices[i]);                      Matrix mx = Matrix.Create(sampleVectors[i]);                      stopwatch.Reset();                        ma.Solve(mx);                      ma.Solve(mx);                        stopwatch.Start();                      ma.Solve(mx);                      ma.Solve(mx);                      ma.Solve(mx);                      ma.Solve(mx);                      ma.Solve(mx);                      stopwatch.Stop();                        Console.WriteLine("  " + sizes[i].ToString() + ": " + (stopwatch.ElapsedMilliseconds / 5).ToString() + " ms");                  }              }
Magic Number,PerformanceAnalysis,Program,C:\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\PerformanceAnalysis\Program.cs,Main,The following statement contains a magic number: {                  Console.WriteLine("=== LINEAR ALGEBRA ===");                  Console.WriteLine("Building Samples...");                    int[] sizes = new int[] { 100' 200' 400' 600' 800' 1000 };                  LinearSystemProvider provider = new LinearSystemProvider();                    double[]['] sampleMatrices = new double[sizes.Length]['];                  double[]['] sampleVectors = new double[sizes.Length]['];                  for(int i = 0; i < sizes.Length; i++)                  {                      sampleMatrices[i] = provider.BuildMatrix(sizes[i]);                      sampleVectors[i] = provider.BuildVector(sizes[i]);                  }                  provider = null;                    Console.WriteLine("Warm Up...");                    Matrix maw = Matrix.Create(sampleMatrices[sizes.Length - 1]);                  Matrix mxw = Matrix.Create(sampleVectors[sizes.Length - 1]);                    maw.Solve(mxw);                    Console.WriteLine("Timing...");                    Stopwatch stopwatch = new Stopwatch();                    for(int i = 0; i < sizes.Length; i++)                  {                      Matrix ma = Matrix.Create(sampleMatrices[i]);                      Matrix mx = Matrix.Create(sampleVectors[i]);                      stopwatch.Reset();                        ma.Solve(mx);                      ma.Solve(mx);                        stopwatch.Start();                      ma.Solve(mx);                      ma.Solve(mx);                      ma.Solve(mx);                      ma.Solve(mx);                      ma.Solve(mx);                      stopwatch.Stop();                        Console.WriteLine("  " + sizes[i].ToString() + ": " + (stopwatch.ElapsedMilliseconds / 5).ToString() + " ms");                  }              }
Magic Number,PerformanceAnalysis,Program,C:\repos\mathnet_mathnet-iridium\src\test\MathNet.Iridium.Test\PerformanceAnalysis\Program.cs,Main,The following statement contains a magic number: {                  Console.WriteLine("=== LINEAR ALGEBRA ===");                  Console.WriteLine("Building Samples...");                    int[] sizes = new int[] { 100' 200' 400' 600' 800' 1000 };                  LinearSystemProvider provider = new LinearSystemProvider();                    double[]['] sampleMatrices = new double[sizes.Length]['];                  double[]['] sampleVectors = new double[sizes.Length]['];                  for(int i = 0; i < sizes.Length; i++)                  {                      sampleMatrices[i] = provider.BuildMatrix(sizes[i]);                      sampleVectors[i] = provider.BuildVector(sizes[i]);                  }                  provider = null;                    Console.WriteLine("Warm Up...");                    Matrix maw = Matrix.Create(sampleMatrices[sizes.Length - 1]);                  Matrix mxw = Matrix.Create(sampleVectors[sizes.Length - 1]);                    maw.Solve(mxw);                    Console.WriteLine("Timing...");                    Stopwatch stopwatch = new Stopwatch();                    for(int i = 0; i < sizes.Length; i++)                  {                      Matrix ma = Matrix.Create(sampleMatrices[i]);                      Matrix mx = Matrix.Create(sampleVectors[i]);                      stopwatch.Reset();                        ma.Solve(mx);                      ma.Solve(mx);                        stopwatch.Start();                      ma.Solve(mx);                      ma.Solve(mx);                      ma.Solve(mx);                      ma.Solve(mx);                      ma.Solve(mx);                      stopwatch.Stop();                        Console.WriteLine("  " + sizes[i].ToString() + ": " + (stopwatch.ElapsedMilliseconds / 5).ToString() + " ms");                  }              }
