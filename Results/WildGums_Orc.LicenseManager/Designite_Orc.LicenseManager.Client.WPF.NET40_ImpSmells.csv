Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Orc.LicenseManager.ViewModels,NetworkLicenseUsageViewModel,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client.WPF\Orc.LicenseManager.Client.WPF.Shared\ViewModels\NetworkLicenseUsageViewModel.cs,NetworkLicenseUsageViewModel,The method has 5 parameters.
Long Parameter List,Orc.LicenseManager.ViewModels,LicenseViewModel,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client.WPF\Orc.LicenseManager.Client.WPF.Shared\ViewModels\LicenseViewModel.cs,LicenseViewModel,The method has 7 parameters.
Long Statement,Orc.LicenseManager,WindowExtensions,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client.WPF\Orc.LicenseManager.Client.WPF.Shared\Extensions\WindowExtensions.cs,ApplyIconFromApplication,The length of the statement  "					window.Icon = Imaging.CreateBitmapSourceFromHIcon (icon.Handle' new Int32Rect (0' 0' icon.Width' icon.Height)' BitmapSizeOptions.FromEmptyOptions ()); " is 150.
Long Statement,Orc.LicenseManager,EnumerationExtension,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client.WPF\Orc.LicenseManager.Client.WPF.Shared\MarkupExtensions\EnumerationExtension.cs,GetDescription,The length of the statement  "	var descriptionAttribute = EnumType.GetField (enumValue.ToString ()).GetCustomAttributes (typeof(DescriptionAttribute)' false).FirstOrDefault () as DescriptionAttribute; " is 169.
Long Statement,Orc.LicenseManager.ViewModels,LicenseViewModel,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client.WPF\Orc.LicenseManager.Client.WPF.Shared\ViewModels\LicenseViewModel.cs,OnRemoveLicenseExecuteAsync,The length of the statement  "	if (await _messageService.ShowAsync ("Are you sure you want to delete the existing license?"' "Delete existing license?"' MessageButton.YesNo' MessageImage.Question) == MessageResult.Yes) { " is 189.
Long Statement,Orc.LicenseManager.ViewModels,LicenseViewModel,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client.WPF\Orc.LicenseManager.Client.WPF.Shared\ViewModels\LicenseViewModel.cs,SaveAsync,The length of the statement  "		var messageResult = await _messageService.ShowAsync (string.Format ("The license for {0} has been successfully created' would you like to remove license for {1}?"' LicenseMode.ToDescriptionText ()' oppositeLicenseMode.ToDescriptionText ())' "Remove license confirmation"' MessageButton.YesNo); " is 293.
Long Statement,Orc.LicenseManager.ViewModels,LicenseViewModel,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client.WPF\Orc.LicenseManager.Client.WPF.Shared\ViewModels\LicenseViewModel.cs,ApplyLicense,The length of the statement  "			var normalFirstError = _licenseValidationService.ValidateLicense (LicenseInfo.Key).GetBusinessRuleErrors ().FirstOrDefault (); " is 126.
Magic Number,Orc.LicenseManager.ViewModels,NetworkLicenseUsageViewModel,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client.WPF\Orc.LicenseManager.Client.WPF.Shared\ViewModels\NetworkLicenseUsageViewModel.cs,NetworkLicenseUsageViewModel,The following statement contains a magic number: _dispatcherTimer.Interval = TimeSpan.FromSeconds (15);  
Magic Number,Orc.LicenseManager.ViewModels,NetworkLicenseUsageViewModel,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client.WPF\Orc.LicenseManager.Client.WPF.Shared\ViewModels\NetworkLicenseUsageViewModel.cs,UpdateValidationResult,The following statement contains a magic number: if (allowToClose && networkValidationResult.IsValid) {  	Log.Info ("No longer exceeding maximum concurrent users' closing network license validation");  	#pragma  	_dispatcherService.BeginInvoke (() => this.SaveAndCloseViewModelAsync ());  	#pragma  }  
Magic Number,Orc.LicenseManager.ViewModels,NetworkLicenseUsageViewModel,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client.WPF\Orc.LicenseManager.Client.WPF.Shared\ViewModels\NetworkLicenseUsageViewModel.cs,UpdateValidationResult,The following statement contains a magic number: if (allowToClose && networkValidationResult.IsValid) {  	Log.Info ("No longer exceeding maximum concurrent users' closing network license validation");  	#pragma  	_dispatcherService.BeginInvoke (() => this.SaveAndCloseViewModelAsync ());  	#pragma  }  
