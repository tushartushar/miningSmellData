Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Orc.LicenseManager,CryptoHelper,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Helpers\CryptoHelper.cs,Encrypt,Cyclomatic complexity of the method is 11
Complex Method,Orc.LicenseManager,CryptoHelper,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Helpers\CryptoHelper.cs,Decrypt,Cyclomatic complexity of the method is 11
Complex Method,Orc.LicenseManager.Services,LicenseValidationService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\LicenseValidationService.cs,ValidateLicense,Cyclomatic complexity of the method is 8
Complex Method,Orc.LicenseManager.Services,LicenseValidationService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\LicenseValidationService.cs,ValidateLicenseOnServer,Cyclomatic complexity of the method is 15
Complex Method,Orc.LicenseManager.Services,LicenseValidationService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\LicenseValidationService.cs,ValidateXml,Cyclomatic complexity of the method is 16
Complex Method,Orc.LicenseManager.Services,NetworkLicenseService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\NetworkLicenseService.cs,BroadcastMessage,Cyclomatic complexity of the method is 12
Complex Method,Orc.LicenseManager.Services,NetworkLicenseService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\NetworkLicenseService.cs,HandleIncomingRequests,Cyclomatic complexity of the method is 8
Long Parameter List,Orc.LicenseManager.Models,NetworkLicenseUsage,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Models\NetworkLicenseUsage.cs,NetworkLicenseUsage,The method has 5 parameters.
Long Identifier,Orc.LicenseManager.Services,LicenseValidationService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\LicenseValidationService.cs,LicenseValidationService,The length of the parameter machineLicenseValidationService is 31.
Long Identifier,Orc.LicenseManager.Services,LicenseValidationService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\LicenseValidationService.cs,ValidateLicense,The length of the parameter machineLicenseValidationContext is 31.
Long Statement,Orc.LicenseManager,LicenseModeExtensions,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Enums\Extensions\LicenseModeExtensions.cs,ToDescriptionText,The length of the statement  "	var descriptionAttribute = typeof(LicenseMode).GetField (licenseMode.ToString ()).GetCustomAttributes (typeof(DescriptionAttribute)' false).FirstOrDefault () as DescriptionAttribute; " is 182.
Long Statement,Orc.LicenseManager,ExpirationBehaviorBase,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\ExpirationBehaviors\ExpirationBehaviorBase.cs,IsExpired,The length of the statement  "		Log.Debug ("License is trial' checking for absolute expiration date time (trials always prevent usage after expiration date)"); " is 127.
Long Statement,Orc.LicenseManager,CryptoHelper,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Helpers\CryptoHelper.cs,Decrypt,The length of the statement  "	var cipherTextBytes = cipherTextBytesWithSaltAndIv.Skip ((Keysize / 8) * 2).Take (cipherTextBytesWithSaltAndIv.Length - ((Keysize / 8) * 2)).ToArray (); " is 152.
Long Statement,Orc.LicenseManager,NetworkValidationHelper,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Helpers\NetworkValidationHelper.cs,DefaultNetworkLicenseServiceValidationHandler,The length of the statement  "			var message = string.Format ("The current number of usages for {0} is higher than the maximum number of concurrent users allowed based on the current license. Since this computer is the last one using the license' the software has to shut down.\n\nIf you feel that you have not reached the maximum number of usages' please contact support.\n\nThe maximum allowed is {1}' the current usage is {2}."' entryAssembly.Title ()' validationResult.MaximumConcurrentUsers' validationResult.CurrentUsers.Count); " is 501.
Long Statement,Orc.LicenseManager,ILicenseServiceExtensions,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\Extensions\ILicenseServiceExtensions.cs,AnyExistingLicense,The length of the statement  "	return licenseService.LicenseExists (LicenseMode.CurrentUser) || licenseService.LicenseExists (LicenseMode.MachineWide); " is 120.
Long Statement,Orc.LicenseManager.Models,NetworkLicenseUsage,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Models\NetworkLicenseUsage.cs,ToString,The length of the statement  "	return string.Format ("Id: {0} | Ip: {1} | Start time: {2}"' ComputerId' Ip' StartDateTime.ToString ("yyyy-MM-dd HH:mm:ss")); " is 125.
Long Statement,Orc.LicenseManager.Models,NetworkLicenseUsage,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Models\NetworkLicenseUsage.cs,ToNetworkMessage,The length of the statement  "	var message = string.Format ("{1}{0}{2}{0}{3}{0}{4}{0}{5}"' Splitter' ComputerId' LicenseSignature' StartDateTime.ToString (DateTimeFormat)' UserName' Ip); " is 155.
Long Statement,Orc.LicenseManager.Models,NetworkValidationResult,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Models\NetworkValidationResult.cs,ToString,The length of the statement  "	return string.Format ("'{0}' of '{1}' current usages' license is {2}"' CurrentUsers.Count' MaximumConcurrentUsers' IsValid ? "valid" : "invalid"); " is 146.
Long Statement,Orc.LicenseManager.Services,LicenseLocationService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\LicenseLocationService.cs,GetLicenseLocation,The length of the statement  "	return Path.Combine (Catel.IO.Path.GetApplicationDataDirectoryForAllUsers (companyName' productName)' "LicenseInfo.xml"); " is 121.
Long Statement,Orc.LicenseManager.Services,LicenseValidationService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\LicenseValidationService.cs,ValidateLicense,The length of the statement  "		var failureList = licenseObject.Validate ().Signature (_applicationIdService.ApplicationId).AssertValidLicense ().ToList (); " is 124.
Long Statement,Orc.LicenseManager.Services,LicenseValidationService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\LicenseValidationService.cs,ValidateLicense,The length of the statement  "				var businessRuleValidationResult = BusinessRuleValidationResult.CreateErrorWithTag (failure.Message' failure.HowToResolve); " is 123.
Long Statement,Orc.LicenseManager.Services,LicenseValidationService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\LicenseValidationService.cs,ValidateLicense,The length of the statement  "		validationContext.AddBusinessRuleValidationResult (BusinessRuleValidationResult.CreateError ("An unknown error occurred while loading the license' please contact support")); " is 173.
Long Statement,Orc.LicenseManager.Services,LicenseValidationService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\LicenseValidationService.cs,ValidateXml,The length of the statement  "			validationContext.AddBusinessRuleValidationResult (BusinessRuleValidationResult.CreateError ("Please make sure that you pasted the complete license' including the <License> tags")); " is 181.
Long Statement,Orc.LicenseManager.Services,LicenseValidationService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\LicenseValidationService.cs,ValidateXml,The length of the statement  "			validationContext.AddBusinessRuleValidationResult (BusinessRuleValidationResult.CreateError ("License contains no valid data")); " is 128.
Long Statement,Orc.LicenseManager.Services,LicenseValidationService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\LicenseValidationService.cs,ValidateXml,The length of the statement  "					validationContext.AddBusinessRuleValidationResult (BusinessRuleValidationResult.CreateError ("The license is expired")); " is 120.
Long Statement,Orc.LicenseManager.Services,LicenseValidationService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\LicenseValidationService.cs,ValidateXml,The length of the statement  "				validationContext.AddBusinessRuleValidationResult (BusinessRuleValidationResult.CreateError ("The expiration date was not a valid date / tim value")); " is 150.
Long Statement,Orc.LicenseManager.Services,LicenseValidationService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\LicenseValidationService.cs,ValidateXml,The length of the statement  "					validationContext.AddBusinessRuleValidationResult (BusinessRuleValidationResult.CreateError ("Your license only supports versions up to '{0}' while the current version of this product is '{1}'"' licenseVersion' productVersion)); " is 228.
Long Statement,Orc.LicenseManager.Services,LicenseValidationService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\LicenseValidationService.cs,ValidateXml,The length of the statement  "				validationContext.AddBusinessRuleValidationResult (BusinessRuleValidationResult.CreateError ("The version was not a valid version value")); " is 139.
Long Statement,Orc.LicenseManager.Services,LicenseValidationService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\LicenseValidationService.cs,ValidateXml,The length of the statement  "		validationContext.AddBusinessRuleValidationResult (BusinessRuleValidationResult.CreateError ("The license data is not a license")); " is 131.
Long Statement,Orc.LicenseManager.Services,MachineLicenseValidationService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\MachineLicenseValidationService.cs,Validate,The length of the statement  "		var error = string.Format ("{0} values are not equal' not accepting the machine id' maximum threshold is '{1}'"' invalidEntries' Threshold); " is 140.
Long Statement,Orc.LicenseManager.Services,MachineLicenseValidationService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\MachineLicenseValidationService.cs,Validate,The length of the statement  "		var warning = string.Format ("One of the values is not equal' but we have a threshold of {0} so accepting machine id"' Threshold); " is 130.
Long Statement,Orc.LicenseManager.Services,NetworkLicenseService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\NetworkLicenseService.cs,ValidateLicense,The length of the statement  "	Log.Info ("Checking for other licenses' maximum number of concurrent users allowed is '{0}'"' networkValidationResult.MaximumConcurrentUsers); " is 142.
Long Statement,Orc.LicenseManager.Services,NetworkLicenseService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\NetworkLicenseService.cs,ValidateLicense,The length of the statement  "		networkValidationResult.CurrentUsers.AddRange (licenseUsages.GroupBy (x => x.ComputerId).Select (group => group.First ())); " is 123.
Long Statement,Orc.LicenseManager.Services,NetworkLicenseService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\NetworkLicenseService.cs,HandleIncomingRequests,The length of the statement  "					Log.Debug ("Received request from '{0}' on '{1}' to get currently used license"' ipEndPoint.Address' udpClient.Client.LocalEndPoint); " is 133.
Long Statement,Orc.LicenseManager.Services,NetworkLicenseService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\NetworkLicenseService.cs,HandleIncomingRequests,The length of the statement  "					var licenseUsage = new NetworkLicenseUsage (_machineId' ipAddress.ToString ()' _userName' licenseSignature' _startDateTime); " is 124.
Empty Catch Block,Orc.LicenseManager.Services,NetworkLicenseService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\NetworkLicenseService.cs,BroadcastMessage,The method has an empty catch block.
Empty Catch Block,Orc.LicenseManager.Services,NetworkLicenseService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\NetworkLicenseService.cs,HandleIncomingRequests,The method has an empty catch block.
Magic Number,Orc.LicenseManager,CryptoHelper,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Helpers\CryptoHelper.cs,Encrypt,The following statement contains a magic number: using (var password = new Rfc2898DeriveBytes (passPhrase' saltStringBytes' DerivationIterations)) {  	var keyBytes = password.GetBytes (Keysize / 8);  	using (var symmetricKey = new RijndaelManaged ()) {  		symmetricKey.BlockSize = 256;  		symmetricKey.Mode = CipherMode.CBC;  		symmetricKey.Padding = PaddingMode.PKCS7;  		using (var encryptor = symmetricKey.CreateEncryptor (keyBytes' ivStringBytes)) {  			using (var memoryStream = new MemoryStream ()) {  				using (var cryptoStream = new CryptoStream (memoryStream' encryptor' CryptoStreamMode.Write)) {  					cryptoStream.Write (plainTextBytes' 0' plainTextBytes.Length);  					cryptoStream.FlushFinalBlock ();  					// Create the final bytes as a concatenation of the random salt bytes' the random iv bytes and the cipher bytes  					var cipherTextBytes = saltStringBytes;  					cipherTextBytes = cipherTextBytes.Concat (ivStringBytes).ToArray ();  					cipherTextBytes = cipherTextBytes.Concat (memoryStream.ToArray ()).ToArray ();  					return Convert.ToBase64String (cipherTextBytes);  				}  			}  		}  	}  }  
Magic Number,Orc.LicenseManager,CryptoHelper,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Helpers\CryptoHelper.cs,Encrypt,The following statement contains a magic number: using (var password = new Rfc2898DeriveBytes (passPhrase' saltStringBytes' DerivationIterations)) {  	var keyBytes = password.GetBytes (Keysize / 8);  	using (var symmetricKey = new RijndaelManaged ()) {  		symmetricKey.BlockSize = 256;  		symmetricKey.Mode = CipherMode.CBC;  		symmetricKey.Padding = PaddingMode.PKCS7;  		using (var encryptor = symmetricKey.CreateEncryptor (keyBytes' ivStringBytes)) {  			using (var memoryStream = new MemoryStream ()) {  				using (var cryptoStream = new CryptoStream (memoryStream' encryptor' CryptoStreamMode.Write)) {  					cryptoStream.Write (plainTextBytes' 0' plainTextBytes.Length);  					cryptoStream.FlushFinalBlock ();  					// Create the final bytes as a concatenation of the random salt bytes' the random iv bytes and the cipher bytes  					var cipherTextBytes = saltStringBytes;  					cipherTextBytes = cipherTextBytes.Concat (ivStringBytes).ToArray ();  					cipherTextBytes = cipherTextBytes.Concat (memoryStream.ToArray ()).ToArray ();  					return Convert.ToBase64String (cipherTextBytes);  				}  			}  		}  	}  }  
Magic Number,Orc.LicenseManager,CryptoHelper,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Helpers\CryptoHelper.cs,Encrypt,The following statement contains a magic number: using (var symmetricKey = new RijndaelManaged ()) {  	symmetricKey.BlockSize = 256;  	symmetricKey.Mode = CipherMode.CBC;  	symmetricKey.Padding = PaddingMode.PKCS7;  	using (var encryptor = symmetricKey.CreateEncryptor (keyBytes' ivStringBytes)) {  		using (var memoryStream = new MemoryStream ()) {  			using (var cryptoStream = new CryptoStream (memoryStream' encryptor' CryptoStreamMode.Write)) {  				cryptoStream.Write (plainTextBytes' 0' plainTextBytes.Length);  				cryptoStream.FlushFinalBlock ();  				// Create the final bytes as a concatenation of the random salt bytes' the random iv bytes and the cipher bytes  				var cipherTextBytes = saltStringBytes;  				cipherTextBytes = cipherTextBytes.Concat (ivStringBytes).ToArray ();  				cipherTextBytes = cipherTextBytes.Concat (memoryStream.ToArray ()).ToArray ();  				return Convert.ToBase64String (cipherTextBytes);  			}  		}  	}  }  
Magic Number,Orc.LicenseManager,CryptoHelper,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Helpers\CryptoHelper.cs,Encrypt,The following statement contains a magic number: symmetricKey.BlockSize = 256;  
Magic Number,Orc.LicenseManager,CryptoHelper,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Helpers\CryptoHelper.cs,Decrypt,The following statement contains a magic number: using (var password = new Rfc2898DeriveBytes (passPhrase' saltStringBytes' DerivationIterations)) {  	var keyBytes = password.GetBytes (Keysize / 8);  	using (var symmetricKey = new RijndaelManaged ()) {  		symmetricKey.BlockSize = 256;  		symmetricKey.Mode = CipherMode.CBC;  		symmetricKey.Padding = PaddingMode.PKCS7;  		using (var decryptor = symmetricKey.CreateDecryptor (keyBytes' ivStringBytes)) {  			using (var memoryStream = new MemoryStream (cipherTextBytes)) {  				using (var cryptoStream = new CryptoStream (memoryStream' decryptor' CryptoStreamMode.Read)) {  					var plainTextBytes = new byte[cipherTextBytes.Length];  					var decryptedByteCount = cryptoStream.Read (plainTextBytes' 0' plainTextBytes.Length);  					return Encoding.GetString (plainTextBytes' 0' decryptedByteCount);  				}  			}  		}  	}  }  
Magic Number,Orc.LicenseManager,CryptoHelper,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Helpers\CryptoHelper.cs,Decrypt,The following statement contains a magic number: using (var password = new Rfc2898DeriveBytes (passPhrase' saltStringBytes' DerivationIterations)) {  	var keyBytes = password.GetBytes (Keysize / 8);  	using (var symmetricKey = new RijndaelManaged ()) {  		symmetricKey.BlockSize = 256;  		symmetricKey.Mode = CipherMode.CBC;  		symmetricKey.Padding = PaddingMode.PKCS7;  		using (var decryptor = symmetricKey.CreateDecryptor (keyBytes' ivStringBytes)) {  			using (var memoryStream = new MemoryStream (cipherTextBytes)) {  				using (var cryptoStream = new CryptoStream (memoryStream' decryptor' CryptoStreamMode.Read)) {  					var plainTextBytes = new byte[cipherTextBytes.Length];  					var decryptedByteCount = cryptoStream.Read (plainTextBytes' 0' plainTextBytes.Length);  					return Encoding.GetString (plainTextBytes' 0' decryptedByteCount);  				}  			}  		}  	}  }  
Magic Number,Orc.LicenseManager,CryptoHelper,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Helpers\CryptoHelper.cs,Decrypt,The following statement contains a magic number: using (var symmetricKey = new RijndaelManaged ()) {  	symmetricKey.BlockSize = 256;  	symmetricKey.Mode = CipherMode.CBC;  	symmetricKey.Padding = PaddingMode.PKCS7;  	using (var decryptor = symmetricKey.CreateDecryptor (keyBytes' ivStringBytes)) {  		using (var memoryStream = new MemoryStream (cipherTextBytes)) {  			using (var cryptoStream = new CryptoStream (memoryStream' decryptor' CryptoStreamMode.Read)) {  				var plainTextBytes = new byte[cipherTextBytes.Length];  				var decryptedByteCount = cryptoStream.Read (plainTextBytes' 0' plainTextBytes.Length);  				return Encoding.GetString (plainTextBytes' 0' decryptedByteCount);  			}  		}  	}  }  
Magic Number,Orc.LicenseManager,CryptoHelper,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Helpers\CryptoHelper.cs,Decrypt,The following statement contains a magic number: symmetricKey.BlockSize = 256;  
Magic Number,Orc.LicenseManager.Models,NetworkLicenseUsage,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Models\NetworkLicenseUsage.cs,Parse,The following statement contains a magic number: if (splitted.Length < 2) {  	splitted = text.Split (new[] {  		'|'  	}' StringSplitOptions.None);  }  
Magic Number,Orc.LicenseManager.Services,NetworkLicenseService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\NetworkLicenseService.cs,NetworkLicenseService,The following statement contains a magic number: SearchTimeout = TimeSpan.FromSeconds (2);  
Magic Number,Orc.LicenseManager.Services,NetworkLicenseService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\NetworkLicenseService.cs,Initialize,The following statement contains a magic number: if (pollingInterval != default(TimeSpan)) {  	if (pollingInterval < SearchTimeout) {  		Log.Warning ("Polling interval is smaller than SearchTimeout' defaulting to SearchTimeout + 5 seconds");  		pollingInterval = SearchTimeout.Add (TimeSpan.FromSeconds (5));  	}  	Log.Debug ("Starting network polling with an interval of '{0}'"' pollingInterval);  	_pollingTimer.Interval = pollingInterval.TotalMilliseconds;  	_pollingTimer.Elapsed += OnPollingTimerElapsed;  	_pollingTimer.Start ();  }  
Magic Number,Orc.LicenseManager.Services,NetworkLicenseService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\NetworkLicenseService.cs,Initialize,The following statement contains a magic number: if (pollingInterval < SearchTimeout) {  	Log.Warning ("Polling interval is smaller than SearchTimeout' defaulting to SearchTimeout + 5 seconds");  	pollingInterval = SearchTimeout.Add (TimeSpan.FromSeconds (5));  }  
Magic Number,Orc.LicenseManager.Services,NetworkLicenseService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\NetworkLicenseService.cs,Initialize,The following statement contains a magic number: pollingInterval = SearchTimeout.Add (TimeSpan.FromSeconds (5));  
Magic Number,Orc.LicenseManager.Services,NetworkLicenseService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\NetworkLicenseService.cs,ValidateLicense,The following statement contains a magic number: try {  	CreateLicenseListeningSockets ();  	var timeout = SearchTimeout != null ? (int)SearchTimeout.TotalMilliseconds : 2000;  	var licenseUsages = new List<NetworkLicenseUsage> ();  	foreach (var ipAddress in GetIpAddresses ()) {  		var usages = BroadcastMessage (ipAddress' license.Signature' timeout);  		licenseUsages.AddRange (usages);  	}  	networkValidationResult.CurrentUsers.AddRange (licenseUsages.GroupBy (x => x.ComputerId).Select (group => group.First ()));  	Log.Debug ("Found {0}"' networkValidationResult);  	Validated.SafeInvoke (this' new NetworkValidatedEventArgs (networkValidationResult));  }  catch (Exception ex) {  	Log.Error (ex' "Failed to check for maximum number of concurrent users");  }  
Magic Number,Orc.LicenseManager.Services,NetworkLicenseService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\NetworkLicenseService.cs,HandleIncomingRequests,The following statement contains a magic number: try {  	var ipAddress = (ipAddressAsObject != null) ? IPAddress.Parse ((string)ipAddressAsObject) : IPAddress.Any;  	Log.Debug ("Creating listener for ip '{0}'"' ipAddress);  	var udpClient = new UdpClient ();  	udpClient.Client.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.ReuseAddress' true);  	udpClient.ExclusiveAddressUse = false;  	udpClient.EnableBroadcast = true;  	udpClient.Client.Bind (new IPEndPoint (ipAddress' Port));  	var licenseSignature = string.Empty;  	while (true) {  		try {  			if (string.IsNullOrEmpty (licenseSignature)) {  				var currentLicense = _licenseService.CurrentLicense;  				if (currentLicense != null) {  					licenseSignature = currentLicense.Signature;  				}  			}  			if (string.IsNullOrWhiteSpace (licenseSignature)) {  				// No reason to wait for something' wait and continue  				Thread.Sleep (5000);  				continue;  			}  			var ipEndPoint = new IPEndPoint (IPAddress.Any' Port);  			var data = udpClient.Receive (ref ipEndPoint);  			var message = Encoding.ASCII.GetString (data);  			if (string.Equals (message' licenseSignature)) {  				Log.Debug ("Received request from '{0}' on '{1}' to get currently used license"' ipEndPoint.Address' udpClient.Client.LocalEndPoint);  				var licenseUsage = new NetworkLicenseUsage (_machineId' ipAddress.ToString ()' _userName' licenseSignature' _startDateTime);  				var responseMessage = licenseUsage.ToNetworkMessage ();  				var responseBytes = ASCIIEncoding.ASCII.GetBytes (responseMessage);  				udpClient.Send (responseBytes' responseBytes.Length' ipEndPoint);  			}  		}  		catch (SocketException) {  			// Ignore' it's probably the timeout  		}  	}  }  catch (Exception ex) {  	Log.Error (ex' "Failed to handle incoming requests' probably a process is already running on the same port");  }  
Magic Number,Orc.LicenseManager.Services,NetworkLicenseService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\NetworkLicenseService.cs,HandleIncomingRequests,The following statement contains a magic number: while (true) {  	try {  		if (string.IsNullOrEmpty (licenseSignature)) {  			var currentLicense = _licenseService.CurrentLicense;  			if (currentLicense != null) {  				licenseSignature = currentLicense.Signature;  			}  		}  		if (string.IsNullOrWhiteSpace (licenseSignature)) {  			// No reason to wait for something' wait and continue  			Thread.Sleep (5000);  			continue;  		}  		var ipEndPoint = new IPEndPoint (IPAddress.Any' Port);  		var data = udpClient.Receive (ref ipEndPoint);  		var message = Encoding.ASCII.GetString (data);  		if (string.Equals (message' licenseSignature)) {  			Log.Debug ("Received request from '{0}' on '{1}' to get currently used license"' ipEndPoint.Address' udpClient.Client.LocalEndPoint);  			var licenseUsage = new NetworkLicenseUsage (_machineId' ipAddress.ToString ()' _userName' licenseSignature' _startDateTime);  			var responseMessage = licenseUsage.ToNetworkMessage ();  			var responseBytes = ASCIIEncoding.ASCII.GetBytes (responseMessage);  			udpClient.Send (responseBytes' responseBytes.Length' ipEndPoint);  		}  	}  	catch (SocketException) {  		// Ignore' it's probably the timeout  	}  }  
Magic Number,Orc.LicenseManager.Services,NetworkLicenseService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\NetworkLicenseService.cs,HandleIncomingRequests,The following statement contains a magic number: try {  	if (string.IsNullOrEmpty (licenseSignature)) {  		var currentLicense = _licenseService.CurrentLicense;  		if (currentLicense != null) {  			licenseSignature = currentLicense.Signature;  		}  	}  	if (string.IsNullOrWhiteSpace (licenseSignature)) {  		// No reason to wait for something' wait and continue  		Thread.Sleep (5000);  		continue;  	}  	var ipEndPoint = new IPEndPoint (IPAddress.Any' Port);  	var data = udpClient.Receive (ref ipEndPoint);  	var message = Encoding.ASCII.GetString (data);  	if (string.Equals (message' licenseSignature)) {  		Log.Debug ("Received request from '{0}' on '{1}' to get currently used license"' ipEndPoint.Address' udpClient.Client.LocalEndPoint);  		var licenseUsage = new NetworkLicenseUsage (_machineId' ipAddress.ToString ()' _userName' licenseSignature' _startDateTime);  		var responseMessage = licenseUsage.ToNetworkMessage ();  		var responseBytes = ASCIIEncoding.ASCII.GetBytes (responseMessage);  		udpClient.Send (responseBytes' responseBytes.Length' ipEndPoint);  	}  }  catch (SocketException) {  	// Ignore' it's probably the timeout  }  
Magic Number,Orc.LicenseManager.Services,NetworkLicenseService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\NetworkLicenseService.cs,HandleIncomingRequests,The following statement contains a magic number: if (string.IsNullOrWhiteSpace (licenseSignature)) {  	// No reason to wait for something' wait and continue  	Thread.Sleep (5000);  	continue;  }  
Magic Number,Orc.LicenseManager.Services,NetworkLicenseService,C:\repos\WildGums_Orc.LicenseManager\src\Orc.LicenseManager.Client\Orc.LicenseManager.Client.Shared\Services\NetworkLicenseService.cs,HandleIncomingRequests,The following statement contains a magic number: Thread.Sleep (5000);  
