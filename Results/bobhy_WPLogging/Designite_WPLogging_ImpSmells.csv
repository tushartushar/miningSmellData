Implementation smell,Namespace,Class,File,Method,Description
Complex Method,WPLogging,WPLog,C:\repos\bobhy_WPLogging\WPLogging\WPLogging.cs,Listener,Cyclomatic complexity of the method is 12
Complex Method,WPLogging,WPLog,C:\repos\bobhy_WPLogging\WPLogging\WPLogging.cs,LogDirect,Cyclomatic complexity of the method is 13
Long Statement,WPLogging,WPLog,C:\repos\bobhy_WPLogging\WPLogging\WPLogging.cs,OnApplication_Activated,The length of the statement  "	Log (LogLevel.Critical' "OnApplication_Activated{0}"' (ae != null) ? "' IsApplicationInstancePreserved = " + ae.IsApplicationInstancePreserved.ToString () : ""); " is 161.
Long Statement,WPLogging,WPLog,C:\repos\bobhy_WPLogging\WPLogging\WPLogging.cs,OnApplication_Deactivated,The length of the statement  "		Log (LogLevel.Critical' "OnApplication_Deactivated{0}' close WPLog"' (de != null) ? "' deactivated reason = " + de.Reason.ToString () : ""); " is 140.
Long Statement,WPLogging,WPLog,C:\repos\bobhy_WPLogging\WPLogging\WPLogging.cs,OnOnInvoke,The length of the statement  "	Log (LogLevel.Critical' "OnInvoke' Last ran: {0}' last exit reason {1}"' t.LastScheduledTime.ToUniversalTime ()' t.LastExitReason.ToString ()); " is 143.
Long Statement,WPLogging,WPLog,C:\repos\bobhy_WPLogging\WPLogging\WPLogging.cs,Enqueue,The length of the statement  "		throw new InvalidOperationException (String.Format ("Too many pending log entries' background not draining queue. Currently {0}' limit {1}"' retVal' MaxQueuedEntries)); " is 168.
Long Statement,WPLogging,WPLog,C:\repos\bobhy_WPLogging\WPLogging\WPLogging.cs,OpenLogOrWait,The length of the statement  "			CurrentFileName = Path.Combine (CurSettings.LogFolder' string.Format ("{0}{1:yyyyMMdd-HHmmss}{2}"' LogFileNamePrefix' DateTime.UtcNow' LogFileType)); " is 149.
Long Statement,WPLogging,WPLog,C:\repos\bobhy_WPLogging\WPLogging\WPLogging.cs,LogDirect,The length of the statement  "	logLine.AppendFormat ("{0:yyyyMMdd HH:mm:ss.fffffff} {1'6:s} {2'2:d} {3:g}| "' le.time' le.procId.ToString ()' le.threadId' le.severity); " is 137.
Long Statement,WPLogging,WPLog,C:\repos\bobhy_WPLogging\WPLogging\WPLogging.cs,LogDirect,The length of the statement  "			logLine.AppendFormat (": Inner exception {0}: {1}"' le.exception.InnerException.GetType ().ToString ()' le.exception.InnerException.Message); " is 141.
Long Statement,WPLogging,WPLog,C:\repos\bobhy_WPLogging\WPLogging\WPLogging.cs,LogDirect,The length of the statement  "	// if it's a critical exception' log an additional copy of the same line to a separate file for more convenient reporting. " is 122.
Long Statement,WPLogging,WPLog,C:\repos\bobhy_WPLogging\WPLogging\WPLogging.cs,LogDirect,The length of the statement  "				excStr = iso.OpenFile (Path.Combine (CurSettings.LogFolder' ExceptionFileName)' FileMode.Append' FileAccess.Write' FileShare.ReadWrite); " is 136.
Long Statement,WPLogging,WPLog,C:\repos\bobhy_WPLogging\WPLogging\WPLogging.cs,LogDirect,The length of the statement  "				// It's too bad that we lose the recent exceptions' but the odds are if so many exceptions are happening that there's some repeating pattern which we'll shortly repeat. " is 168.
Long Statement,WPLogging,WPLog,C:\repos\bobhy_WPLogging\WPLogging\WPLogging.cs,LogDirect,The length of the statement  "					// didn't do the usual using (var excStr = iso.OpenFile()... specifically so we can assign a different value if we need to wrap the file. " is 137.
Long Statement,WPLogging,WPLog,C:\repos\bobhy_WPLogging\WPLogging\WPLogging.cs,LogDirect,The length of the statement  "					// IsolatedStorageFile doesn't let us sense the size of file without opening it' and FileMode.Append won't let us seek to 0 if the one we did open is too big. " is 158.
Long Statement,WPLogging,WPLog,C:\repos\bobhy_WPLogging\WPLogging\WPLogging.cs,LogDirect,The length of the statement  "					excStr = iso.OpenFile (Path.Combine (CurSettings.LogFolder' ExceptionFileName)' FileMode.Truncate' FileAccess.Write' FileShare.ReadWrite); " is 138.
Long Statement,WPLogging,WPLog,C:\repos\bobhy_WPLogging\WPLogging\WPLogging.cs,LogCleanup,The length of the statement  "	// note: original implementation established a limit on aggregate *size* of logs' but we really have to check the quota on each new file open " is 141.
Long Statement,WPLogging,WPLog,C:\repos\bobhy_WPLogging\WPLogging\WPLogging.cs,LogCleanup,The length of the statement  "	// but that requires *opening* each file so that was ditched in favor of a cheaper implementation.  (could implement timer-based logic?? not deterministic)  " is 155.
Empty Catch Block,WPLogging,WPLog,C:\repos\bobhy_WPLogging\WPLogging\WPLogging.cs,OnApplication_Closing,The method has an empty catch block.
Empty Catch Block,WPLogging,WPLog,C:\repos\bobhy_WPLogging\WPLogging\WPLogging.cs,OnApplication_Deactivated,The method has an empty catch block.
Empty Catch Block,WPLogging,WPLog,C:\repos\bobhy_WPLogging\WPLogging\WPLogging.cs,LogDirect,The method has an empty catch block.
Magic Number,WPLogging,WPLog,C:\repos\bobhy_WPLogging\WPLogging\WPLogging.cs,WPLogging_otherInit,The following statement contains a magic number: _logQueue = new Queue<LogEntry> (10);  
Magic Number,WPLogging,WPLoggingSettings,C:\repos\bobhy_WPLogging\WPLogging\WPLogging.cs,WPLoggingSettings,The following statement contains a magic number: MaxFileSize = 1000000;  
Magic Number,WPLogging,WPLoggingSettings,C:\repos\bobhy_WPLogging\WPLogging\WPLogging.cs,WPLoggingSettings,The following statement contains a magic number: MaxExceptionFileSize = 10000000;  
Magic Number,WPLogging,WPLoggingSettings,C:\repos\bobhy_WPLogging\WPLogging\WPLogging.cs,WPLoggingSettings,The following statement contains a magic number: NumLogFiles = 5;  
Missing Default,WPLogging,WPLog,C:\repos\bobhy_WPLogging\WPLogging\WPLogging.cs,Listener,The following switch statement is missing a default case: switch (curItem.command) {  case LogCommand.Log:  	if (LogDirect (logStream' curItem)) {  		// have filled current log file.  		LogCleanup ();  		// trim the number of logs to quota for the folder  		logStream.Close ();  		CurrentFileName = null;  		// flag to open a new log file.  		goto openNewFile;  		// and do that right now' don't wait for another signal.  	}  	break;  case LogCommand.Quiesce:  	goto serviceExit;  }  
