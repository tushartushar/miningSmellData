Implementation smell,Namespace,Class,File,Method,Description
Long Method,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateDiffGramStruct,The method has 121 lines of code.
Long Method,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,GenerateCore,The method has 134 lines of code.
Long Method,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateCollectionHelperMethods,The method has 122 lines of code.
Complex Method,ImmutableObjectGraph.Generation,StyleCop,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\StyleCop.cs,Sort,Cyclomatic complexity of the method is 8
Long Parameter List,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CodeGen,The method has 5 parameters. Parameters: applyTo' document' progress' options' cancellationToken
Long Parameter List,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,GenerateAsync,The method has 5 parameters. Parameters: applyTo' document' progress' options' cancellationToken
Long Parameter List,ImmutableObjectGraph.Generation,CollectionHelpersGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+CollectionHelpersGen.cs,CreateSingleElementMethod,The method has 6 parameters. Parameters: field' methodName' collectionMutationMethodName' passThroughChildSync' elementParameterName' elementType
Long Identifier,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,,The length of the parameter IdentityFieldOptionalTypeSyntax is 31.
Long Identifier,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,,The length of the parameter RequiredIdentityArgumentFromProperty is 36.
Long Identifier,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,,The length of the parameter CreateDefaultTemplateMethodName is 31.
Long Identifier,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,,The length of the parameter DebuggerBrowsableNeverAttribute is 31.
Long Identifier,ImmutableObjectGraph.Generation,CollectionHelpersGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+CollectionHelpersGen.cs,,The length of the parameter SyncImmediateChildToCurrentVersionMethodName is 44.
Long Identifier,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateComparersClass,The length of the parameter byValueChangedPropertiesDiffGramMethod is 38.
Long Identifier,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,,The length of the parameter ComparersByValueWithDescendentsPropertyName is 43.
Long Identifier,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,,The length of the parameter IRecursiveParentWithChildReplacementType is 40.
Long Identifier,ImmutableObjectGraph.Generation,TypeConversionGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+TypeConversionGen.cs,CreateToDerivedTypeMethod,The length of the parameter thisTypeIsEquivalentToDerivedType is 33.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,GenerateAsync,The length of the statement  "            this.inputDeclarations = this.semanticModel.GetDeclarationsInSpan(TextSpan.FromBounds(0' this.semanticModel.SyntaxTree.Length)' true' this.cancellationToken); " is 158.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,GenerateAsync,The length of the statement  "            partialClass = this.mergedFeatures.Aggregate(partialClass' (acc' feature) => feature.ProcessApplyToClassDeclaration(acc)); " is 122.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreatePropertyForField,The length of the statement  "            var xmldocComment = field.GetLeadingTrivia().FirstOrDefault(t => t.IsKind(SyntaxKind.SingleLineDocumentationCommentTrivia)); " is 124.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreatePropertyForField,The length of the statement  "                        SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' SyntaxFactory.ThisExpression()' SyntaxFactory.IdentifierName(variable.Identifier)))) " is 162.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreatePropertyForField,The length of the statement  "                .WithLeadingTrivia(xmldocComment); // TODO: modify the <summary> to translate "Some description" to "Gets some description." " is 124.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateDefaultInstanceField,The length of the statement  "                             .WithInitializer(SyntaxFactory.EqualsValueClause(SyntaxFactory.InvocationExpression(GetDefaultTemplateMethodName' SyntaxFactory.ArgumentList())))))) " is 148.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateGetDefaultTemplateMethod,The length of the statement  "                                SyntaxFactory.EqualsValueClause(SyntaxFactory.ObjectCreationExpression(NestedTemplateTypeName' SyntaxFactory.ArgumentList()' null))))))' " is 136.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateGetDefaultTemplateMethod,The length of the statement  "                        SyntaxFactory.ArgumentList(SyntaxFactory.SingletonSeparatedList(SyntaxFactory.Argument(null' SyntaxFactory.Token(SyntaxKind.RefKeyword)' templateVarName)))))' " is 158.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateGetDefaultTemplateMethod,The length of the statement  "                                .AddRange(this.applyToMetaType.AllFields.Select(f => SyntaxFactory.Argument(SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' templateVarName' SyntaxFactory.IdentifierName(f.Name.ToPascalCase()))))) " is 226.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateGetDefaultTemplateMethod,The length of the statement  "                                .Add(SyntaxFactory.Argument(SyntaxFactory.NameColon(SkipValidationParameterName)' NoneToken' SyntaxFactory.LiteralExpression(SyntaxKind.TrueLiteralExpression)))))' " is 163.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateGetDefaultTemplateMethod,The length of the statement  "            return SyntaxFactory.MethodDeclaration(SyntaxFactory.IdentifierName(applyTo.Identifier.ValueText)' GetDefaultTemplateMethodName.Identifier) " is 139.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateTemplateStruct,The length of the statement  "                        .WithEndOfDirectiveToken(SyntaxFactory.Token(SyntaxFactory.TriviaList()' SyntaxKind.EndOfDirectiveToken' SyntaxFactory.TriviaList(SyntaxFactory.ElasticCarriageReturnLineFeed))))) " is 178.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateTemplateStruct,The length of the statement  "                        .WithEndOfDirectiveToken(SyntaxFactory.Token(SyntaxFactory.TriviaList()' SyntaxKind.EndOfDirectiveToken' SyntaxFactory.TriviaList(SyntaxFactory.ElasticCarriageReturnLineFeed))))' " is 178.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreatePublicCtors,The length of the statement  "                    .PrependArgument(SyntaxFactory.Argument(SyntaxFactory.InvocationExpression(NewIdentityMethodName' SyntaxFactory.ArgumentList()))) " is 129.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreatePublicCtors,The length of the statement  "                    .AddArguments(SyntaxFactory.Argument(SyntaxFactory.NameColon(SkipValidationParameterName)' SyntaxFactory.Token(SyntaxKind.None)' SyntaxFactory.LiteralExpression(SyntaxKind.FalseLiteralExpression))); " is 198.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreatePublicCtors,The length of the statement  "                    .WithParameterList(this.CreateParameterList(this.applyToMetaType.AllFields' ParameterStyle.Required' usePascalCasing: true)) " is 124.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateNonPublicCtor,The length of the statement  "                    .AddParameters(SyntaxFactory.Parameter(SkipValidationParameterName.Identifier).WithType(SyntaxFactory.PredefinedType(SyntaxFactory.Token(SyntaxKind.BoolKeyword))))) " is 164.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateNonPublicCtor,The length of the statement  "                            .PrependArgument(SyntaxFactory.Argument(SyntaxFactory.NameColon(IdentityParameterName)' NoneToken' IdentityParameterName)) " is 122.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateNonPublicCtor,The length of the statement  "                            .AddArguments(SyntaxFactory.Argument(SyntaxFactory.NameColon(SkipValidationParameterName)' NoneToken' SkipValidationParameterName)))); " is 134.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateWithCoreMethods,The length of the statement  "                                    .AddArguments(SyntaxFactory.Argument(SyntaxFactory.NameColon(IdentityParameterName)' NoneToken' Syntax.OptionalFor(Syntax.ThisDot(IdentityPropertyName)))))))); " is 159.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateWithFactoryMethod,The length of the statement  "            Func<IdentifierNameSyntax' IdentifierNameSyntax' ITypeSymbol' ExpressionSyntax> isChangedByNames = (propertyName' fieldName' fieldType) => " is 138.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateWithFactoryMethod,The length of the statement  "                .WithParameterList(CreateParameterList(this.applyToMetaType.AllFields' ParameterStyle.Optional).AddParameters(OptionalIdentityParameter)) " is 137.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateWithFactoryMethod,The length of the statement  "                                        .PrependArgument(SyntaxFactory.Argument(SyntaxFactory.NameColon(IdentityParameterName)' NoneToken' Syntax.OptionalGetValueOrDefault(SyntaxFactory.IdentifierName(IdentityParameterName.Identifier)' Syntax.ThisDot(IdentityPropertyName)))) " is 235.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateCreateMethods,The length of the statement  "                                    .WithInitializer(SyntaxFactory.EqualsValueClause(Syntax.OptionalFor(SyntaxFactory.InvocationExpression(NewIdentityMethodName' SyntaxFactory.ArgumentList())))))))' " is 162.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateCreateMethods,The length of the statement  "                                    .AddArguments(SyntaxFactory.Argument(SyntaxFactory.NameColon(IdentityParameterName)' NoneToken' IdentityParameterName))))); " is 123.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateCreateMethods,The length of the statement  "                if (this.applyToMetaType.Ancestors.Any(a => !a.TypeSymbol.IsAbstract && a.AllFieldsByGeneration.FirstOrDefault(g => g.Key == fieldsGroup.Key)?.Count() == fieldsGroup.Count())) " is 175.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateNewIdentityMethod,The length of the statement  "            //     return (<#= templateType.RequiredIdentityField.TypeName #>)System.Threading.Interlocked.Increment(ref lastIdentityProduced); " is 131.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,GetFields,The length of the statement  "                .Where(f => f.Declaration.Variables.All(v => !IsFieldIgnored(this.semanticModel.GetDeclaredSymbol(v) as IFieldSymbol))); " is 120.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateParameterList,The length of the statement  "            Func<MetaField' bool> isOptional = f => style == ParameterStyle.Optional || (style == ParameterStyle.OptionalOrRequired && !f.IsRequired); " is 138.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateParameterList,The length of the statement  "                    fields.Select(f => setTypeAndDefault(SyntaxFactory.Parameter((usePascalCasing ? f.NameAsProperty : f.NameAsField).Identifier)' f)))); " is 133.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateArgumentList,The length of the statement  "            Func<MetaField' ArgSource> fieldSource = f => (source == ArgSource.OptionalArgumentOrTemplate && f.IsRequired) ? ArgSource.Argument : source; " is 141.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateArgumentList,The length of the statement  "            Func<MetaField' bool> optionalWrap = f => asOptional != OptionalStyle.None && (asOptional == OptionalStyle.Always || !f.IsRequired); " is 132.
Long Statement,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateArgumentList,The length of the statement  "                        return Syntax.OptionalGetValueOrDefault(name' SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' DefaultInstanceFieldName' propertyName)); " is 165.
Long Statement,ImmutableObjectGraph.Generation,BuilderGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateToBuilderMethod,The length of the statement  "                            SyntaxFactory.ArgumentList(SyntaxFactory.SingletonSeparatedList(SyntaxFactory.Argument(SyntaxFactory.ThisExpression())))' " is 121.
Long Statement,ImmutableObjectGraph.Generation,BuilderGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateMutableFields,The length of the statement  "                        .WithAttributeLists(SyntaxFactory.SingletonList(SyntaxFactory.AttributeList(SyntaxFactory.SingletonSeparatedList(DebuggerBrowsableNeverAttribute))))); " is 150.
Long Statement,ImmutableObjectGraph.Generation,BuilderGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateConstructor,The length of the statement  "                            SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' immutableParameterName' field.NameAsField)))); " is 124.
Long Statement,ImmutableObjectGraph.Generation,BuilderGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateConstructor,The length of the statement  "                        SyntaxFactory.Parameter(immutableParameterName.Identifier).WithType(SyntaxFactory.IdentifierName(this.generator.applyTo.Identifier))) " is 133.
Long Statement,ImmutableObjectGraph.Generation,BuilderGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateMutableProperties,The length of the statement  "                    var optionalFieldNotYetDefined = SyntaxFactory.PrefixUnaryExpression(SyntaxKind.LogicalNotExpression' Syntax.OptionalIsDefined(thisField)); " is 139.
Long Statement,ImmutableObjectGraph.Generation,BuilderGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateOnPropertyChangedMethod,The length of the statement  "                        SyntaxFactory.MemberBindingExpression(SyntaxFactory.IdentifierName(nameof(System.ComponentModel.PropertyChangedEventHandler.Invoke)))' " is 134.
Long Statement,ImmutableObjectGraph.Generation,BuilderGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateOnPropertyChangedMethod,The length of the statement  "                            .WithDefault(SyntaxFactory.EqualsValueClause(SyntaxFactory.LiteralExpression(SyntaxKind.StringLiteralExpression' SyntaxFactory.Literal(string.Empty))))) " is 152.
Long Statement,ImmutableObjectGraph.Generation,BuilderGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateToImmutableMethod,The length of the statement  "                    let thisFieldValue = SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' thisField' SyntaxFactory.IdentifierName(nameof(ImmutableObjectGraph.Optional<int>.Value))) // this.fieldName.Value " is 213.
Long Statement,ImmutableObjectGraph.Generation,BuilderGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateToImmutableMethod,The length of the statement  "                                            SyntaxFactory.ConditionalAccessExpression(thisFieldValue' SyntaxFactory.MemberBindingExpression(ToImmutableMethodName))' " is 120.
Long Statement,ImmutableObjectGraph.Generation,BuilderGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateToImmutableMethod,The length of the statement  "                                        f => SyntaxFactory.Argument(Syntax.OptionalFor(f.IsGeneratedImmutableType ? SyntaxFactory.IdentifierName(f.Name) : Syntax.ThisDot(SyntaxFactory.IdentifierName(f.Name.ToPascalCase()))))))))); " is 190.
Long Statement,ImmutableObjectGraph.Generation,CollectionHelpersGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+CollectionHelpersGen.cs,GenerateCore,The length of the statement  "                    string plural = suffix != null ? (this.generator.PluralService.Singularize(field.Name.ToPascalCase()) + this.generator.PluralService.Pluralize(suffix)) : field.Name.ToPascalCase(); " is 180.
Long Statement,ImmutableObjectGraph.Generation,CollectionHelpersGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+CollectionHelpersGen.cs,AddMethodBody,The length of the statement  "                                    containingMethod.ParameterList.Parameters.Select(p => SyntaxFactory.Argument(SyntaxFactory.IdentifierName(p.Identifier))))))); " is 126.
Long Statement,ImmutableObjectGraph.Generation,CollectionHelpersGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+CollectionHelpersGen.cs,CreateParamsElementArrayParameters,The length of the statement  "                                .AddRankSpecifiers(SyntaxFactory.ArrayRankSpecifier(SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(SyntaxFactory.OmittedArraySizeExpression())))))); " is 156.
Long Statement,ImmutableObjectGraph.Generation,DeepMutationGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeepMutationGen.cs,CreateAddDescendentMethod,The length of the statement  "                        SyntaxFactory.Parameter(valueParameterName.Identifier).WithType(this.generator.applyToMetaType.RecursiveType.TypeSyntax)' " is 121.
Long Statement,ImmutableObjectGraph.Generation,DeepMutationGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeepMutationGen.cs,CreateAddDescendentMethod,The length of the statement  "                        SyntaxFactory.Parameter(parentParameterName.Identifier).WithType(this.generator.applyToMetaType.RecursiveParent.TypeSyntax)) " is 124.
Long Statement,ImmutableObjectGraph.Generation,DeepMutationGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeepMutationGen.cs,CreateAddDescendentMethod,The length of the statement  "                        // return (ProjectElementContainer)RecursiveTypeExtensions.ReplaceDescendent(this' spine' newSpine' spineIncludesDeletedElement: false).Peek(); " is 143.
Long Statement,ImmutableObjectGraph.Generation,DeepMutationGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeepMutationGen.cs,CreateAddDescendentMethod,The length of the statement  "                                                SyntaxFactory.Argument(SyntaxFactory.NameColon("spineIncludesDeletedElement")' NoneToken' SyntaxFactory.LiteralExpression(SyntaxKind.FalseLiteralExpression)))' " is 159.
Long Statement,ImmutableObjectGraph.Generation,DeepMutationGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeepMutationGen.cs,CreateRemoveDescendentMethod,The length of the statement  "                            .AddVariables(SyntaxFactory.VariableDeclarator(spineListVar.Identifier).WithInitializer(SyntaxFactory.EqualsValueClause( " is 120.
Long Statement,ImmutableObjectGraph.Generation,DeepMutationGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeepMutationGen.cs,CreateRemoveDescendentMethod,The length of the statement  "                                                    SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' spineListVar' SyntaxFactory.IdentifierName(nameof(List<int>.Count)))' " is 147.
Long Statement,ImmutableObjectGraph.Generation,DeepMutationGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeepMutationGen.cs,CreateRemoveDescendentMethod,The length of the statement  "                            .AddVariables(SyntaxFactory.VariableDeclarator(newParentVar.Identifier).WithInitializer(SyntaxFactory.EqualsValueClause( " is 120.
Long Statement,ImmutableObjectGraph.Generation,DeepMutationGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeepMutationGen.cs,CreateRemoveDescendentMethod,The length of the statement  "                            SyntaxFactory.InvocationExpression(SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' parentVar' WithMethodName)) " is 140.
Long Statement,ImmutableObjectGraph.Generation,DeepMutationGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeepMutationGen.cs,CreateRemoveDescendentMethod,The length of the statement  "                                            SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' parentVar' this.applyTo.RecursiveField.NameAsProperty)' " is 133.
Long Statement,ImmutableObjectGraph.Generation,DeepMutationGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeepMutationGen.cs,CreateRemoveDescendentMethod,The length of the statement  "                                                            SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' spineListVar' SyntaxFactory.IdentifierName(nameof(List<int>.Count)))' " is 147.
Long Statement,ImmutableObjectGraph.Generation,DeepMutationGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeepMutationGen.cs,CreateRemoveDescendentMethod,The length of the statement  "                                                SyntaxFactory.Argument(SyntaxFactory.NameColon("spineIncludesDeletedElement")' NoneToken' SyntaxFactory.LiteralExpression(SyntaxKind.TrueLiteralExpression)) " is 156.
Long Statement,ImmutableObjectGraph.Generation,DeepMutationGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeepMutationGen.cs,CreateReplaceDescendentSameIdentityMethod,The length of the statement  "                                    SyntaxFactory.Argument(SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' updatedNodeParameter' SyntaxFactory.IdentifierName(nameof(IRecursiveType.Identity)))))))))' " is 192.
Long Statement,ImmutableObjectGraph.Generation,DeepMutationGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeepMutationGen.cs,CreateReplaceDescendentSameIdentityMethod,The length of the statement  "                            SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' spineVar' SyntaxFactory.IdentifierName(nameof(ImmutableStack<int>.IsEmpty)))' " is 155.
Long Statement,ImmutableObjectGraph.Generation,DeepMutationGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeepMutationGen.cs,CreateReplaceDescendentSameIdentityMethod,The length of the statement  "                                        SyntaxFactory.Argument(SyntaxFactory.LiteralExpression(SyntaxKind.StringLiteralExpression' SyntaxFactory.Literal("Old value not found.")))))))' " is 143.
Long Statement,ImmutableObjectGraph.Generation,DeepMutationGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeepMutationGen.cs,CreateReplaceDescendentSameIdentityMethod,The length of the statement  "                        // return (TemplateType)this.ReplaceDescendent(spine' ImmutableStack.Create(updatedNode)' spineIncludesDeletedElement: false).Peek(); " is 133.
Long Statement,ImmutableObjectGraph.Generation,DeepMutationGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeepMutationGen.cs,CreateReplaceDescendentSameIdentityMethod,The length of the statement  "                                                SyntaxFactory.Argument(SyntaxFactory.NameColon("spineIncludesDeletedElement")' NoneToken' SyntaxFactory.LiteralExpression(SyntaxKind.FalseLiteralExpression)) " is 157.
Long Statement,ImmutableObjectGraph.Generation,DeepMutationGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeepMutationGen.cs,CreateReplaceDescendentDifferentIdentityMethod,The length of the statement  "                            SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' spineVar' SyntaxFactory.IdentifierName(nameof(ImmutableStack<int>.IsEmpty)))' " is 155.
Long Statement,ImmutableObjectGraph.Generation,DeepMutationGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeepMutationGen.cs,CreateReplaceDescendentDifferentIdentityMethod,The length of the statement  "                                        SyntaxFactory.Argument(SyntaxFactory.LiteralExpression(SyntaxKind.StringLiteralExpression' SyntaxFactory.Literal("Old value not found.")))))))' " is 143.
Long Statement,ImmutableObjectGraph.Generation,DeepMutationGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeepMutationGen.cs,CreateReplaceDescendentDifferentIdentityMethod,The length of the statement  "                        // return (TemplateType)this.ReplaceDescendent(spine' ImmutableStack.Create(replacement)' spineIncludesDeletedElement: false).Peek(); " is 133.
Long Statement,ImmutableObjectGraph.Generation,DeepMutationGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeepMutationGen.cs,CreateReplaceDescendentDifferentIdentityMethod,The length of the statement  "                                                SyntaxFactory.Argument(SyntaxFactory.NameColon("spineIncludesDeletedElement")' NoneToken' SyntaxFactory.LiteralExpression(SyntaxKind.FalseLiteralExpression)) " is 157.
Long Statement,ImmutableObjectGraph.Generation,DefineWithMethodsPerPropertyGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DefineWithMethodsPerPropertyGen.cs,GenerateCore,The length of the statement  "                                    SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' SyntaxFactory.ThisExpression()' field.NameAsField))' " is 130.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateChangedPropertiesEnum,The length of the statement  "                                    SyntaxFactory.Literal(string.Format(CultureInfo.InvariantCulture' "0x{0:x}"' (ulong)Math.Pow(2' counter))' counter))))); " is 120.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateChangedPropertiesEnum,The length of the statement  "                    .WithBaseList(SyntaxFactory.BaseList(SyntaxFactory.SingletonSeparatedList<BaseTypeSyntax>(SyntaxFactory.SimpleBaseType(enumBaseType)))) " is 135.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateChangedPropertiesEnum,The length of the statement  "                        SyntaxFactory.EnumMemberDeclaration(SyntaxFactory.List<AttributeListSyntax>()' EnumValueNone.Identifier' SyntaxFactory.EqualsValueClause(SyntaxFactory.LiteralExpression(SyntaxKind.NumericLiteralExpression' SyntaxFactory.Literal("0x0"' 0x0))))' " is 243.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateChangedPropertiesEnum,The length of the statement  "                        SyntaxFactory.EnumMemberDeclaration(SyntaxFactory.List<AttributeListSyntax>()' EnumValueType.Identifier' SyntaxFactory.EqualsValueClause(SyntaxFactory.LiteralExpression(SyntaxKind.NumericLiteralExpression' SyntaxFactory.Literal("0x1"' 0x1))))' " is 243.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateChangedPropertiesEnum,The length of the statement  "                        SyntaxFactory.EnumMemberDeclaration(SyntaxFactory.List<AttributeListSyntax>()' EnumValuePositionUnderParent.Identifier' SyntaxFactory.EqualsValueClause(SyntaxFactory.LiteralExpression(SyntaxKind.NumericLiteralExpression' SyntaxFactory.Literal("0x2"' 0x2))))' " is 258.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateChangedPropertiesEnum,The length of the statement  "                        SyntaxFactory.EnumMemberDeclaration(SyntaxFactory.List<AttributeListSyntax>()' EnumValueParent.Identifier' SyntaxFactory.EqualsValueClause(SyntaxFactory.LiteralExpression(SyntaxKind.NumericLiteralExpression' SyntaxFactory.Literal("0x4"' 0x4))))) " is 245.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateDiffGramStruct,The length of the statement  "                            SyntaxFactory.AccessorDeclaration(SyntaxKind.GetAccessorDeclaration).WithSemicolonToken(SyntaxFactory.Token(SyntaxKind.SemicolonToken))' " is 136.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateDiffGramStruct,The length of the statement  "                            SyntaxFactory.AccessorDeclaration(SyntaxKind.SetAccessorDeclaration).WithSemicolonToken(SyntaxFactory.Token(SyntaxKind.SemicolonToken)).AddModifiers(SyntaxFactory.Token(SyntaxKind.PrivateKeyword))); " is 198.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateDiffGramStruct,The length of the statement  "                            .WithInitializer(SyntaxFactory.ConstructorInitializer(SyntaxKind.ThisConstructorInitializer' SyntaxFactory.ArgumentList())) " is 123.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateDiffGramStruct,The length of the statement  "                                SyntaxFactory.ExpressionStatement(SyntaxFactory.AssignmentExpression(SyntaxKind.SimpleAssignmentExpression' Syntax.ThisDot(DiffGramBeforePropertyName)' beforeParam))' " is 166.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateDiffGramStruct,The length of the statement  "                                SyntaxFactory.ExpressionStatement(SyntaxFactory.AssignmentExpression(SyntaxKind.SimpleAssignmentExpression' Syntax.ThisDot(DiffGramAfterPropertyName)' afterParam))' " is 164.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateDiffGramStruct,The length of the statement  "                                SyntaxFactory.ExpressionStatement(SyntaxFactory.AssignmentExpression(SyntaxKind.SimpleAssignmentExpression' Syntax.ThisDot(DiffGramKindPropertyName)' kindParam))' " is 162.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateDiffGramStruct,The length of the statement  "                                SyntaxFactory.ExpressionStatement(SyntaxFactory.AssignmentExpression(SyntaxKind.SimpleAssignmentExpression' Syntax.ThisDot(DiffGramChangesPropertyName)' changesParam))))' " is 170.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateDiffGramStruct,The length of the statement  "                        // public static DiffGram Change(<#= templateType.TypeName #> before' <#= templateType.TypeName #> after' <#= enumTypeName #> changes) " is 134.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateDiffGramStruct,The length of the statement  "                                        SyntaxFactory.Argument(SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' Syntax.GetTypeSyntax(typeof(ChangeKind))' SyntaxFactory.IdentifierName(nameof(ChangeKind.Replaced))))' " is 203.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateDiffGramStruct,The length of the statement  "                                        SyntaxFactory.Argument(SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' Syntax.GetTypeSyntax(typeof(ChangeKind))' SyntaxFactory.IdentifierName(nameof(ChangeKind.Added))))' " is 200.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateDiffGramStruct,The length of the statement  "                                        SyntaxFactory.Argument(SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' Syntax.GetTypeSyntax(typeof(ChangeKind))' SyntaxFactory.IdentifierName(nameof(ChangeKind.Removed))))' " is 202.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateDiffGramStruct,The length of the statement  "                                                        SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' this.changedPropertiesEnumTypeName' field.NameAsProperty)))' " is 138.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateDiffGramStruct,The length of the statement  "                                                SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' this.changedPropertiesEnumTypeName' EnumValueNone)))))) " is 133.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateBoilerplateEnumProperties,The length of the statement  "                    // <#= templateType.TypeName #>ChangedProperties IRecursiveDiffingType<<#= templateType.TypeName #>ChangedProperties' TemplateType.DiffGram>.ParentProperty { " is 157.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateDiffPropertiesExplicitMethod,The length of the statement  "                // <#= templateType.TypeName #>ChangedProperties IRecursiveDiffingType<<#= templateType.TypeName #>ChangedProperties' <#= templateType.TypeName #>.DiffGram>.DiffProperties(IRecursiveType other) { " is 195.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateDiffPropertiesExplicitMethod,The length of the statement  "                return SyntaxFactory.MethodDeclaration(this.changedPropertiesEnumTypeName' nameof(RecursiveDiffingTypeHelper.DiffProperties)) " is 125.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateDiffPropertiesExplicitMethod,The length of the statement  "                    .AddParameterListParameters(SyntaxFactory.Parameter(otherParam.Identifier).WithType(Syntax.GetTypeSyntax(typeof(IRecursiveType)))) " is 130.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateChangeMethod,The length of the statement  "                // <#= templateType.TypeName #>.DiffGram IRecursiveDiffingType<<#= templateType.TypeName #>ChangedProperties' <#= templateType.TypeName #>.DiffGram> " is 148.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateChangeMethod,The length of the statement  "                            SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' this.diffGramTypeSyntax' DiffGramChangeMethodName)) " is 129.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateAddMethod,The length of the statement  "                // <#= templateType.TypeName #>.DiffGram IRecursiveDiffingType<<#= templateType.TypeName #>ChangedProperties' <#= templateType.TypeName #>.DiffGram> " is 148.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateAddMethod,The length of the statement  "                                SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' this.diffGramTypeSyntax' DiffGramAddMethodName)) " is 126.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateRemoveMethod,The length of the statement  "                // <#= templateType.TypeName #>.DiffGram IRecursiveDiffingType<<#= templateType.TypeName #>ChangedProperties' <#= templateType.TypeName #>.DiffGram> " is 148.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateRemoveMethod,The length of the statement  "                                SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' this.diffGramTypeSyntax' DiffGramRemoveMethodName)) " is 129.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateEqualsMethod,The length of the statement  "                //      .Equals(<#= templateType.TypeName #>ChangedProperties first' <#= templateType.TypeName #>ChangedProperties second) { " is 124.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateUnionMethod,The length of the statement  "                // <#= templateType.TypeName #>ChangedProperties IRecursiveDiffingType<<#= templateType.TypeName #>ChangedProperties' <#= templateType.TypeName #>.DiffGram> " is 156.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateUnionMethod,The length of the statement  "                //    .Union(<#= templateType.TypeName #>ChangedProperties first' <#= templateType.TypeName #>ChangedProperties second) { " is 121.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateDiffPropertiesMethod,The length of the statement  "                                SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' this.changedPropertiesEnumTypeName' EnumValueNone)))))' " is 133.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateDiffPropertiesMethod,The length of the statement  "                                                            SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' otherParam' SyntaxFactory.IdentifierName(nameof(GetType)))' " is 137.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateDiffPropertiesMethod,The length of the statement  "                                        SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' this.changedPropertiesEnumTypeName' EnumValueType))))) " is 132.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateComparersClass,The length of the statement  "                Func<TypeSyntax' SyntaxToken' ExpressionSyntax' PropertyDeclarationSyntax> defineProperty = (type' name' returnExpression) => " is 125.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateComparersClass,The length of the statement  "                        SyntaxFactory.QualifiedName(SyntaxFactory.IdentifierName(nameof(ImmutableObjectGraph))' SyntaxFactory.IdentifierName(nameof(ImmutableObjectGraph.Comparers)))' " is 158.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateComparersClass,The length of the statement  "                        // public static System.Collections.Generic.IEqualityComparer<<#= templateType.TypeName #>> <#= templateType.RequiredIdentityField.NamePascalCase #> { " is 150.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateComparersClass,The length of the statement  "                                    SyntaxFactory.QualifiedName(SyntaxFactory.IdentifierName(nameof(ImmutableObjectGraph))' SyntaxFactory.IdentifierName(nameof(ImmutableObjectGraph.Comparers)))' " is 158.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateComparersClass,The length of the statement  "                        //     get { return ImmutableObjectGraph.Comparers.ByValue<<#= templateType.TypeName #>ChangedProperties' DiffGram>(deep: false); } " is 131.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateComparersClass,The length of the statement  "                                SyntaxFactory.Argument(SyntaxFactory.NameColon("deep")' NoneToken' SyntaxFactory.LiteralExpression(SyntaxKind.FalseLiteralExpression))))' " is 137.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateComparersClass,The length of the statement  "                        // /// <summary>Gets an equatable comparer that considers all properties between two instances and their children.</summary> " is 124.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateComparersClass,The length of the statement  "                        //     get { return ImmutableObjectGraph.Comparers.ByValue<<#= templateType.TypeName #>ChangedProperties' DiffGram>(deep: true); } " is 130.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateComparersClass,The length of the statement  "                                SyntaxFactory.Argument(SyntaxFactory.NameColon("deep")' NoneToken' SyntaxFactory.LiteralExpression(SyntaxKind.TrueLiteralExpression)))) " is 135.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateComparersClass,The length of the statement  "                        //// internal static IEqualityComparer<ParentedRecursiveType<RecursiveParent' RecursiveTypeFromFamily> Parented<#= templateType.TypeName #><#= templateType.RequiredIdentityField.NamePascalCase #> { " is 197.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateComparersClass,The length of the statement  "                        ////     get { return ImmutableObjectGraph.Comparers.Parented<<#= templateType.RecursiveParent.TypeName #>' <#= templateType.TypeName #>>(); } " is 142.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateComparersClass,The length of the statement  "                        //    ).WithModifiers(SyntaxFactory.TokenList(SyntaxFactory.Token(SyntaxKind.InternalKeyword)' SyntaxFactory.Token(SyntaxKind.StaticKeyword))) " is 142.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateIfPropertyChangedBlock,The length of the statement  "                            SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' this.changedPropertiesEnumTypeName' field.NameAsProperty)))); " is 139.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateDiffPropertiesOverrideMethod,The length of the statement  "                                    SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' SyntaxFactory.BaseExpression()' DiffPropertiesMethodName)) " is 136.
Long Statement,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateDiffPropertiesOverrideMethod,The length of the statement  "                                SyntaxFactory.BinaryExpression(SyntaxKind.NotEqualsExpression' otherTypedVar' SyntaxFactory.LiteralExpression(SyntaxKind.NullLiteralExpression))' " is 145.
Long Statement,ImmutableObjectGraph.Generation,EnumerableRecursiveParentGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+EnumerableRecursiveParentGen.cs,CreateGetParentMethod,The length of the statement  "                    .AddParameterListParameters(SyntaxFactory.Parameter(descendentParam.Identifier).WithType(this.applyTo.RecursiveType.TypeSyntax)) " is 128.
Long Statement,ImmutableObjectGraph.Generation,EnumerableRecursiveParentGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+EnumerableRecursiveParentGen.cs,ImplementIEnumerableInterfaces,The length of the statement  "                this.baseTypes.Add(SyntaxFactory.SimpleBaseType(Syntax.IEnumerableOf(this.generator.applyToMetaType.RecursiveType.TypeSyntax))); " is 128.
Long Statement,ImmutableObjectGraph.Generation,EnumerableRecursiveParentGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+EnumerableRecursiveParentGen.cs,ImplementRecursiveParentInterface,The length of the statement  "                var irecursiveParentOfT = CreateIRecursiveParentOfTSyntax(GetFullyQualifiedSymbolName(this.generator.applyToMetaType.RecursiveType.TypeSymbol)); " is 144.
Long Statement,ImmutableObjectGraph.Generation,EnumerableRecursiveParentGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+EnumerableRecursiveParentGen.cs,ImplementRecursiveParentInterface,The length of the statement  "                var thisDotChildren = Syntax.ThisDot(SyntaxFactory.IdentifierName(this.generator.applyToMetaType.RecursiveField.Name.ToPascalCase())); " is 134.
Long Statement,ImmutableObjectGraph.Generation,EnumerableRecursiveParentGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+EnumerableRecursiveParentGen.cs,ImplementRecursiveParentInterface,The length of the statement  "                    .WithExplicitInterfaceSpecifier(SyntaxFactory.ExplicitInterfaceSpecifier(Syntax.GetTypeSyntax(typeof(IRecursiveParent)))) " is 121.
Long Statement,ImmutableObjectGraph.Generation,EnumerableRecursiveParentGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+EnumerableRecursiveParentGen.cs,ImplementRecursiveParentInterface,The length of the statement  "                    .AddAttributeLists(SyntaxFactory.AttributeList(SyntaxFactory.SingletonSeparatedList(DebuggerBrowsableNeverAttribute)))); " is 120.
Long Statement,ImmutableObjectGraph.Generation,EnumerableRecursiveParentGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+EnumerableRecursiveParentGen.cs,ImplementRecursiveParentInterface,The length of the statement  "                        SyntaxFactory.GenericName(nameof(ParentedRecursiveType<IRecursiveParent<IRecursiveType>' IRecursiveType>)).AddTypeArgumentListArguments( " is 136.
Long Statement,ImmutableObjectGraph.Generation,EnumerableRecursiveParentGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+EnumerableRecursiveParentGen.cs,ImplementRecursiveParentInterface,The length of the statement  "                    //.WithExplicitInterfaceSpecifier(SyntaxFactory.ExplicitInterfaceSpecifier(Syntax.GetTypeSyntax(typeof(IRecursiveParent)))) " is 123.
Long Statement,ImmutableObjectGraph.Generation,EnumerableRecursiveParentGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+EnumerableRecursiveParentGen.cs,ImplementRecursiveParentInterface,The length of the statement  "                // ParentedRecursiveType<IRecursiveParent<IRecursiveType>' IRecursiveType> IRecursiveParent.GetParentedNode(<#= templateType.RequiredIdentityField.TypeName #> identity) { " is 170.
Long Statement,ImmutableObjectGraph.Generation,EnumerableRecursiveParentGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+EnumerableRecursiveParentGen.cs,ImplementRecursiveParentInterface,The length of the statement  "                    .WithExplicitInterfaceSpecifier(SyntaxFactory.ExplicitInterfaceSpecifier(Syntax.GetTypeSyntax(typeof(IRecursiveParent)))) " is 121.
Long Statement,ImmutableObjectGraph.Generation,EnumerableRecursiveParentGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+EnumerableRecursiveParentGen.cs,ImplementRecursiveParentInterface,The length of the statement  "                                SyntaxFactory.InvocationExpression(Syntax.ThisDot(SyntaxFactory.IdentifierName(nameof(RecursiveTypeExtensions.GetParentedNode)))) " is 129.
Long Statement,ImmutableObjectGraph.Generation,EnumerableRecursiveParentGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+EnumerableRecursiveParentGen.cs,ImplementRecursiveParentInterface,The length of the statement  "                            SyntaxFactory.Argument(SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' parentedVar' SyntaxFactory.IdentifierName(nameof(ParentedRecursiveTypeNonGeneric.Value))))' " is 192.
Long Statement,ImmutableObjectGraph.Generation,EnumerableRecursiveParentGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+EnumerableRecursiveParentGen.cs,ImplementRecursiveParentInterface,The length of the statement  "                            SyntaxFactory.Argument(SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' parentedVar' SyntaxFactory.IdentifierName(nameof(ParentedRecursiveTypeNonGeneric.Parent))))))))); " is 198.
Long Statement,ImmutableObjectGraph.Generation,EnumerableRecursiveParentGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+EnumerableRecursiveParentGen.cs,ImplementRecursiveParentInterface,The length of the statement  "                ////System.Collections.Generic.IReadOnlyCollection<<#= templateType.RecursiveType.TypeName #>> IRecursiveParent<<#= templateType.RecursiveType.TypeName #>>.Children " is 164.
Long Statement,ImmutableObjectGraph.Generation,EnumerableRecursiveParentGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+EnumerableRecursiveParentGen.cs,ImplementRecursiveParentInterface,The length of the statement  "                    .AddAttributeLists(SyntaxFactory.AttributeList(SyntaxFactory.SingletonSeparatedList(DebuggerBrowsableNeverAttribute)))); " is 120.
Long Statement,ImmutableObjectGraph.Generation,EnumerableRecursiveParentGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+EnumerableRecursiveParentGen.cs,ImplementOrderedChildrenInterface,The length of the statement  "                    .WithExplicitInterfaceSpecifier(SyntaxFactory.ExplicitInterfaceSpecifier(SyntaxFactory.IdentifierName(nameof(IRecursiveParentWithOrderedChildren)))) " is 148.
Long Statement,ImmutableObjectGraph.Generation,EnumerableRecursiveParentGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+EnumerableRecursiveParentGen.cs,ImplementOrderedChildrenInterface,The length of the statement  "                    .WithExpressionBody(SyntaxFactory.ArrowExpressionClause(Syntax.ThisDot(SyntaxFactory.IdentifierName(this.generator.applyToMetaType.RecursiveField.Name)))) " is 154.
Long Statement,ImmutableObjectGraph.Generation,EnumerableRecursiveParentGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+EnumerableRecursiveParentGen.cs,ImplementOrderedChildrenInterface,The length of the statement  "                    .AddAttributeLists(SyntaxFactory.AttributeList(SyntaxFactory.SingletonSeparatedList(DebuggerBrowsableNeverAttribute)))); " is 120.
Long Statement,ImmutableObjectGraph.Generation,EnumerableRecursiveParentGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+EnumerableRecursiveParentGen.cs,ImplementOrderedChildrenInterface,The length of the statement  "                    .WithExplicitInterfaceSpecifier(SyntaxFactory.ExplicitInterfaceSpecifier(SyntaxFactory.IdentifierName(nameof(IRecursiveParentWithOrderedChildren)))) " is 148.
Long Statement,ImmutableObjectGraph.Generation,EnumerableRecursiveParentGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+EnumerableRecursiveParentGen.cs,ImplementOrderedChildrenInterface,The length of the statement  "                    .AddParameterListParameters(SyntaxFactory.Parameter(valueParameterName.Identifier).WithType(Syntax.GetTypeSyntax(typeof(IRecursiveType)))) " is 138.
Long Statement,ImmutableObjectGraph.Generation,EnumerableRecursiveParentGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+EnumerableRecursiveParentGen.cs,ImplementSortedChildrenInterface,The length of the statement  "                    .WithExplicitInterfaceSpecifier(SyntaxFactory.ExplicitInterfaceSpecifier(SyntaxFactory.IdentifierName(nameof(IRecursiveParentWithSortedChildren)))) " is 147.
Long Statement,ImmutableObjectGraph.Generation,EnumerableRecursiveParentGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+EnumerableRecursiveParentGen.cs,ImplementSortedChildrenInterface,The length of the statement  "                        // return this.Children.KeyComparer.Compare((<#= templateType.RecursiveType.TypeName #>)first' (<#= templateType.RecursiveType.TypeName #>)second); " is 147.
Long Statement,ImmutableObjectGraph.Generation,EnumerableRecursiveParentGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+EnumerableRecursiveParentGen.cs,ImplementSortedChildrenInterface,The length of the statement  "                                    SyntaxFactory.Argument(SyntaxFactory.CastExpression(this.generator.applyToMetaType.RecursiveType.TypeSyntax' firstParameterName))' " is 130.
Long Statement,ImmutableObjectGraph.Generation,EnumerableRecursiveParentGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+EnumerableRecursiveParentGen.cs,ImplementSortedChildrenInterface,The length of the statement  "                                    SyntaxFactory.Argument(SyntaxFactory.CastExpression(this.generator.applyToMetaType.RecursiveType.TypeSyntax' secondParameterName))))))))); " is 138.
Long Statement,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,ProcessApplyToClassDeclaration,The length of the statement  "                    var alteredCtor = origCtor.AddParameterListParameters(SyntaxFactory.Parameter(LookupTableFieldName.Identifier).WithType(Syntax.OptionalOf(this.lookupTableType))); " is 162.
Long Statement,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,ProcessApplyToClassDeclaration,The length of the statement  "                    // If this type isn't itself the recursive parent then we derive from it. And we must propagate the value to the chained base type. " is 131.
Long Statement,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,ProcessApplyToClassDeclaration,The length of the statement  "                        where instantiatedTypeName == this.applyTo.TypeSyntax.ToString() || instantiatedTypeName == this.applyTo.TypeSymbol.Name " is 120.
Long Statement,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,ProcessApplyToClassDeclaration,The length of the statement  "                        where chained.IsKind(SyntaxKind.ThisConstructorInitializer) && chained.FirstAncestorOrSelf<ConstructorDeclarationSyntax>().Identifier.ValueText == this.applyTo.TypeSymbol.Name " is 175.
Long Statement,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,ProcessApplyToClassDeclaration,The length of the statement  "                                    // (children.IsDefined && children.Value != this.Children) ? default(Optional<ImmutableDictionary<uint' KeyValuePair<RecursiveType' uint>>>) : Optional.For(this.lookupTable); " is 174.
Long Statement,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,GenerateCore,The length of the statement  "                        .AddAttributeLists(SyntaxFactory.AttributeList(SyntaxFactory.SingletonSeparatedList(DebuggerBrowsableNeverAttribute)))); " is 120.
Long Statement,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,GenerateCore,The length of the statement  "                            SyntaxFactory.TypeArgumentList(SyntaxFactory.SingletonSeparatedList<TypeSyntax>(this.applyTo.RecursiveType.TypeSyntax)))); " is 122.
Long Statement,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,GenerateCore,The length of the statement  "                        SyntaxFactory.PropertyDeclaration(inefficiencyLoadType' nameof(IRecursiveParentWithLookupTable<IRecursiveType>.InefficiencyLoad)) " is 129.
Long Statement,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,GenerateCore,The length of the statement  "                        .AddAttributeLists(SyntaxFactory.AttributeList(SyntaxFactory.SingletonSeparatedList(DebuggerBrowsableNeverAttribute)))); " is 120.
Long Statement,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,GenerateCore,The length of the statement  "                        .AddAttributeLists(SyntaxFactory.AttributeList(SyntaxFactory.SingletonSeparatedList(DebuggerBrowsableNeverAttribute)))); " is 120.
Long Statement,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,GenerateCore,The length of the statement  "                    // ImmutableDictionary<IdentityFieldType' KeyValuePair<TRecursiveType' IdentityFieldType>> IRecursiveParentWithLookupTable<TRecursiveType>.LookupTable => this.lookupTable; " is 171.
Long Statement,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,GenerateCore,The length of the statement  "                        .AddAttributeLists(SyntaxFactory.AttributeList(SyntaxFactory.SingletonSeparatedList(DebuggerBrowsableNeverAttribute)))); " is 120.
Long Statement,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,GenerateCore,The length of the statement  "                        // var lookupInitResult = ImmutableObjectGraph.RecursiveTypeExtensions.LookupTable<TRecursiveType' TRecursiveParent>.Initialize(this' lookupTable); " is 147.
Long Statement,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,GenerateCore,The length of the statement  "                            SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' lookupInitResultVarName' SyntaxFactory.IdentifierName(nameof(LookupTableHelper.InitializeLookupResult.InefficiencyLoad)))))' " is 202.
Long Statement,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,GenerateCore,The length of the statement  "                            SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' lookupInitResultVarName' SyntaxFactory.IdentifierName(nameof(LookupTableHelper.InitializeLookupResult.LookupTable))))) " is 196.
Long Statement,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,GenerateCore,The length of the statement  "                    // protected System.Collections.Immutable.ImmutableDictionary<System.UInt32' KeyValuePair<FileSystemEntry' System.UInt32>> lookupTable; " is 135.
Long Statement,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,GenerateCore,The length of the statement  "                        .AddAttributeLists(SyntaxFactory.AttributeList(SyntaxFactory.SingletonSeparatedList(DebuggerBrowsableNeverAttribute)))); " is 120.
Long Statement,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,GenerateCore,The length of the statement  "                        SyntaxFactory.MethodDeclaration(Syntax.ImmutableStackOf(this.applyTo.RecursiveType.TypeSyntax)' GetSpineMethodName.Identifier) " is 126.
Long Statement,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,GenerateCore,The length of the statement  "                            .AddParameterListParameters(SyntaxFactory.Parameter(descendentParameter.Identifier).WithType(this.applyTo.RecursiveType.TypeSyntax)) " is 132.
Long Statement,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,GenerateCore,The length of the statement  "                        SyntaxFactory.MethodDeclaration(Syntax.ImmutableStackOf(this.applyTo.RecursiveType.TypeSyntax)' GetSpineMethodName.Identifier) " is 126.
Long Statement,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,CreateReplaceChildMethod,The length of the statement  "                       SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' receiver' SyntaxFactory.IdentifierName(nameof(ImmutableStack<int>.Peek)))' " is 152.
Long Statement,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,CreateReplaceChildMethod,The length of the statement  "                        SyntaxFactory.Parameter(oldSpineParameter.Identifier).WithType(Syntax.ImmutableStackOf(this.applyTo.RecursiveType.TypeSyntax))' " is 127.
Long Statement,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,CreateReplaceChildMethod,The length of the statement  "                        SyntaxFactory.Parameter(newSpineParameter.Identifier).WithType(Syntax.ImmutableStackOf(this.applyTo.RecursiveType.TypeSyntax))) " is 127.
Long Statement,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,CreateReplaceChildMethod,The length of the statement  "                                .AddVariables(SyntaxFactory.VariableDeclarator(newChildrenVar.Identifier).WithInitializer(SyntaxFactory.EqualsValueClause( " is 122.
Long Statement,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,CreateReplaceChildMethod,The length of the statement  "                                            SyntaxFactory.Argument(SyntaxFactory.NameColon(this.applyTo.RecursiveField.NameAsField)' NoneToken' newChildrenVar))))))' " is 121.
Long Statement,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,CreateReplaceChildMethod,The length of the statement  "                                .AddVariables(SyntaxFactory.VariableDeclarator(lookupTableLazySentinelVar.Identifier).WithInitializer(SyntaxFactory.EqualsValueClause( " is 134.
Long Statement,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,CreateReplaceChildMethod,The length of the statement  "                        // if (newSelf.lookupTable == lookupTableLazySentinel && this.lookupTable != null && this.lookupTable != lookupTableLazySentinel) { " is 131.
Long Statement,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,CreateReplaceChildMethod,The length of the statement  "                                // newSelf.lookupTable = RecursiveTypeExtensions.LookupTable<TRecursiveType' TRecursiveParent>.Fixup(this' ImmutableDeque.Create(newSpine)' ImmutableDeque.Create(oldSpine)); " is 173.
Long Statement,ImmutableObjectGraph.Generation,FastSpineGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+FastSpineGen.cs,GetLookupTableHelperType,The length of the statement  "                        SyntaxFactory.Identifier(nameof(RecursiveTypeExtensions.LookupTable<IRecursiveType' IRecursiveParentWithLookupTable<IRecursiveType>>))' " is 135.
Long Statement,ImmutableObjectGraph.Generation,RecursiveTypeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RecursiveTypeGen.cs,GenerateCore,The length of the statement  "                    .AddAttributeLists(SyntaxFactory.AttributeList(SyntaxFactory.SingletonSeparatedList(DebuggerBrowsableNeverAttribute)))); " is 120.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateWithRootMethod,The length of the statement  "                    .AddParameterListParameters(SyntaxFactory.Parameter(rootParam.Identifier).WithType(this.applyTo.RecursiveParent.TypeSyntax)) " is 124.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateWithRootMethod,The length of the statement  "                                    SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' rootParam' FastSpineGen.GetSpineMethodName)) " is 122.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateWithRootMethod,The length of the statement  "                            SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' spineVar' SyntaxFactory.IdentifierName(nameof(ImmutableStack<int>.IsEmpty)))' " is 155.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateWithRootMethod,The length of the statement  "                                SyntaxFactory.ThrowStatement(SyntaxFactory.ObjectCreationExpression(Syntax.GetTypeSyntax(typeof(ArgumentException))).AddArgumentListArguments( " is 142.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateWithRootMethod,The length of the statement  "                                    SyntaxFactory.Argument(SyntaxFactory.LiteralExpression(SyntaxKind.StringLiteralExpression' SyntaxFactory.Literal("Root does not belong to the same tree.")))))))' " is 161.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateWithRootMethod,The length of the statement  "                        SyntaxFactory.ReturnStatement(SyntaxFactory.ObjectCreationExpression(GetRootedTypeSyntax(this.applyTo)).AddArgumentListArguments( " is 129.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateFields,The length of the statement  "                        SyntaxFactory.FieldDeclaration(SyntaxFactory.VariableDeclaration(Syntax.FuncOf(this.rootedRecursiveType' this.applyTo.RecursiveTypeFromFamily.TypeSyntax)) " is 154.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateFields,The length of the statement  "                                        SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' rParam' SyntaxFactory.IdentifierName(this.applyTo.RecursiveTypeFromFamily.TypeSymbol.Name))))))) " is 174.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateFields,The length of the statement  "                        // private static readonly System.Func<TRecursiveType' TRecursiveParent' RootedRecursiveType> toRooted = (u' r) => new RootedRecursiveType(u' r); " is 145.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateFields,The length of the statement  "                        SyntaxFactory.FieldDeclaration(SyntaxFactory.VariableDeclaration(Syntax.FuncOf(this.applyTo.RecursiveTypeFromFamily.TypeSyntax' this.applyTo.RecursiveParent.TypeSyntax' this.rootedRecursiveType)) " is 195.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateRootedOperators,The length of the statement  "                var publicStaticModifiers = new[] { SyntaxFactory.Token(SyntaxKind.PublicKeyword)' SyntaxFactory.Token(SyntaxKind.StaticKeyword) }; " is 131.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateRootedOperators,The length of the statement  "                    SyntaxFactory.OperatorDeclaration(SyntaxFactory.PredefinedType(SyntaxFactory.Token(SyntaxKind.BoolKeyword))' SyntaxFactory.Token(SyntaxKind.EqualsEqualsToken)) " is 159.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateRootedOperators,The length of the statement  "                    SyntaxFactory.OperatorDeclaration(SyntaxFactory.PredefinedType(SyntaxFactory.Token(SyntaxKind.BoolKeyword))' SyntaxFactory.Token(SyntaxKind.ExclamationEqualsToken)) " is 164.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateParentProperty,The length of the statement  "                return SyntaxFactory.PropertyDeclaration(GetRootedTypeSyntax(this.applyTo.RecursiveParent)' ParentPropertyName.Identifier) " is 122.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateParentProperty,The length of the statement  "                                    SyntaxFactory.BinaryExpression(SyntaxKind.NotEqualsExpression' greenParentVar' SyntaxFactory.LiteralExpression(SyntaxKind.NullLiteralExpression))' " is 146.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateRootProperty,The length of the statement  "                return SyntaxFactory.PropertyDeclaration(GetRootedTypeSyntax(this.applyTo.RecursiveParent)' RootPropertyName.Identifier) " is 120.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateRootProperty,The length of the statement  "                                SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' Syntax.ThisDot(RootFieldName)' AsRootPropertyName)' " is 129.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateIdentityProperty,The length of the statement  "                                SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' Syntax.ThisDot(GreenNodeFieldName)' IdentityPropertyName))))); " is 140.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateIsRootProperty,The length of the statement  "                return SyntaxFactory.PropertyDeclaration(SyntaxFactory.PredefinedType(SyntaxFactory.Token(SyntaxKind.BoolKeyword))' IsRootPropertyName.Identifier) " is 146.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateIsDefaultProperty,The length of the statement  "                return SyntaxFactory.PropertyDeclaration(SyntaxFactory.PredefinedType(SyntaxFactory.Token(SyntaxKind.BoolKeyword))' IsDefaultPropertyName.Identifier) " is 149.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateWithMethod,The length of the statement  "                                    SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' Syntax.ThisDot(GreenNodeFieldName)' WithMethodName)) " is 130.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateEqualsObjectMethod,The length of the statement  "                return SyntaxFactory.MethodDeclaration(SyntaxFactory.PredefinedType(SyntaxFactory.Token(SyntaxKind.BoolKeyword))' nameof(object.Equals)) " is 136.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateEqualsObjectMethod,The length of the statement  "                   .AddParameterListParameters(SyntaxFactory.Parameter(objParam.Identifier).WithType(SyntaxFactory.PredefinedType(SyntaxFactory.Token(SyntaxKind.ObjectKeyword)))) " is 159.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateGetHashCodeMethod,The length of the statement  "                return SyntaxFactory.MethodDeclaration(SyntaxFactory.PredefinedType(SyntaxFactory.Token(SyntaxKind.IntKeyword))' nameof(object.GetHashCode)) " is 140.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateEqualsRootedStructMethod,The length of the statement  "                return SyntaxFactory.MethodDeclaration(SyntaxFactory.PredefinedType(SyntaxFactory.Token(SyntaxKind.BoolKeyword))' nameof(IEquatable<object>.Equals)) " is 148.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateCreateMethod,The length of the statement  "                                    SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' this.applyTo.TypeSyntax' CreateMethodName)) " is 121.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateFindMethod,The length of the statement  "                return SyntaxFactory.MethodDeclaration(GetRootedTypeSyntax(this.applyTo.RecursiveTypeFromFamily)' SyntaxFactory.Identifier(nameof(RecursiveTypeExtensions.Find))) " is 161.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateFindMethod,The length of the statement  "                        SyntaxFactory.ReturnStatement(SyntaxFactory.ObjectCreationExpression(GetRootedTypeSyntax(this.applyTo.RecursiveTypeFromFamily)).AddArgumentListArguments( " is 153.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateFindMethod,The length of the statement  "                                SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' Syntax.ThisDot(GreenNodeFieldName)' SyntaxFactory.IdentifierName(nameof(RecursiveTypeExtensions.Find)))) " is 182.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateTryFindMethod,The length of the statement  "                return SyntaxFactory.MethodDeclaration(SyntaxFactory.PredefinedType(SyntaxFactory.Token(SyntaxKind.BoolKeyword))' SyntaxFactory.Identifier(nameof(RecursiveTypeExtensions.TryFind))) " is 180.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateTryFindMethod,The length of the statement  "                        SyntaxFactory.Parameter(valueParameter.Identifier).WithType(GetRootedTypeSyntax(this.applyTo.RecursiveTypeFromFamily)).AddModifiers(SyntaxFactory.Token(SyntaxKind.OutKeyword))) " is 176.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateTryFindMethod,The length of the statement  "                        SyntaxFactory.LocalDeclarationStatement(SyntaxFactory.VariableDeclaration(this.applyTo.RecursiveTypeFromFamily.TypeSyntax).AddVariables( " is 136.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateTryFindMethod,The length of the statement  "                                SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' Syntax.ThisDot(GreenNodeFieldName)' TryFindMethodName)) " is 133.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateTryFindMethod,The length of the statement  "                                    SyntaxFactory.ObjectCreationExpression(GetRootedTypeSyntax(this.applyTo.RecursiveTypeFromFamily)).AddArgumentListArguments( " is 123.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateGetEnumeratorMethod,The length of the statement  "                return SyntaxFactory.MethodDeclaration(Syntax.IEnumeratorOf(GetRootedTypeSyntax(this.applyTo.RecursiveTypeFromFamily))' nameof(IEnumerable<int>.GetEnumerator)) " is 159.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateParentedNodeMethod,The length of the statement  "                // ParentedRecursiveType<IRecursiveParent<IRecursiveType>' IRecursiveType> IRecursiveParent.GetParentedNode(uint identity) " is 122.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateParentedNodeMethod,The length of the statement  "                    .WithExplicitInterfaceSpecifier(SyntaxFactory.ExplicitInterfaceSpecifier(Syntax.GetTypeSyntax(typeof(IRecursiveParent)))) " is 121.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateParentedNodeMethod,The length of the statement  "                                    SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' Syntax.ThisDot(GreenNodeFieldName)' SyntaxFactory.IdentifierName(nameof(IRecursiveParent.GetParentedNode)))) " is 186.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateParentedNodeMethod,The length of the statement  "                            SyntaxFactory.Argument(SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' resultVar' SyntaxFactory.IdentifierName(nameof(ParentedRecursiveTypeNonGeneric.Value))))' " is 190.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateParentedNodeMethod,The length of the statement  "                            SyntaxFactory.Argument(SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' resultVar' SyntaxFactory.IdentifierName(nameof(ParentedRecursiveTypeNonGeneric.Parent)))))))); " is 195.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateChildrenProperties,The length of the statement  "                    SyntaxFactory.PropertyDeclaration(Syntax.IReadOnlyCollectionOf(Syntax.GetTypeSyntax(typeof(IRecursiveType)))' nameof(IRecursiveParent.Children)) " is 144.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateChildrenProperties,The length of the statement  "                        .WithExplicitInterfaceSpecifier(SyntaxFactory.ExplicitInterfaceSpecifier(Syntax.GetTypeSyntax(typeof(IRecursiveParent)))) " is 121.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateChildrenProperties,The length of the statement  "                    SyntaxFactory.PropertyDeclaration(Syntax.IReadOnlyCollectionOf(this.rootedRecursiveType)' nameof(IRecursiveParent<IRecursiveType>.Children)) " is 140.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateChildrenProperties,The length of the statement  "                        .WithExplicitInterfaceSpecifier(SyntaxFactory.ExplicitInterfaceSpecifier(CreateIRecursiveParentOfTSyntax(this.rootedRecursiveType))) " is 132.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateChildrenProperties,The length of the statement  "                        .WithExpressionBody(SyntaxFactory.ArrowExpressionClause(Syntax.ThisDot(this.applyTo.RecursiveParent.RecursiveField.NameAsProperty))) " is 132.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateAsDerivedProperties,The length of the statement  "                                        SyntaxFactory.BinaryExpression(SyntaxKind.NotEqualsExpression' downcastVar' SyntaxFactory.LiteralExpression(SyntaxKind.NullLiteralExpression))' " is 143.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateAsAncestorProperties,The length of the statement  "                                    SyntaxFactory.BinaryExpression(SyntaxKind.NotEqualsExpression' Syntax.ThisDot(GreenNodeFieldName)' SyntaxFactory.LiteralExpression(SyntaxKind.NullLiteralExpression))' " is 166.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateFieldAccessorProperties,The length of the statement  "                                        SyntaxFactory.PrefixUnaryExpression(SyntaxKind.LogicalNotExpression' Syntax.OptionalIsDefined(Syntax.ThisDot(field.NameAsField)))' " is 130.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateFieldAccessorProperties,The length of the statement  "                                            // this.<#= field.NameCamelCase #> = Optional.For(Adapter.Create(this.greenNode.<#= field.NamePascalCase #>' toRooted' toUnrooted' this.root)); " is 143.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateFieldAccessorProperties,The length of the statement  "                                                            SyntaxFactory.QualifiedName(SyntaxFactory.IdentifierName(nameof(ImmutableObjectGraph))' SyntaxFactory.IdentifierName(nameof(ImmutableObjectGraph.Adapter)))' " is 156.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateFieldAccessorProperties,The length of the statement  "                                                            SyntaxFactory.Argument(SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' Syntax.ThisDot(GreenNodeFieldName)' field.NameAsProperty))' " is 160.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateFieldAccessorProperties,The length of the statement  "                                        SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' Syntax.ThisDot(GreenNodeFieldName)' field.NameAsProperty))))) " is 139.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateNewSpineMethod,The length of the statement  "                                    SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' Syntax.ThisDot(RootFieldName)' SyntaxFactory.IdentifierName(nameof(RecursiveTypeExtensions.ReplaceDescendent)))) " is 190.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateNewSpineMethod,The length of the statement  "                        SyntaxFactory.ReturnStatement(SyntaxFactory.ObjectCreationExpression(GetRootedTypeSyntax(this.applyTo)).AddArgumentListArguments( " is 129.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateWithPropertyMethods,The length of the statement  "                    SyntaxFactory.MethodDeclaration(GetRootedTypeSyntax(this.applyTo)' DefineWithMethodsPerPropertyGen.WithPropertyMethodPrefix + field.NameAsProperty) " is 147.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateToTypeMethods,The length of the statement  "                        .WithParameterList(this.generator.CreateParameterList(targetType.type.GetFieldsBeyond(targetType.CommonAncestor)' ParameterStyle.OptionalOrRequired)) " is 149.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateToTypeMethods,The length of the statement  "                            // var newGreenNode = this.greenNode.To<#= targetType.TypeName #>(<# WriteArguments(familyType.GetFieldsBeyond(commonAncestor)' ArgSource.Argument); #>); " is 153.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateToTypeMethods,The length of the statement  "                                        .WithArgumentList(this.generator.CreateArgumentList(targetType.type.GetFieldsBeyond(targetType.CommonAncestor)' ArgSource.Argument))))))' " is 137.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateDictionaryHelperMethod,The length of the statement  "                    SyntaxFactory.Parameter(CollectionHelpersGen.KeyParameterName.Identifier).WithType(GetFullyQualifiedSymbolName(field.ElementKeyType))); " is 135.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateDictionaryHelperMethod,The length of the statement  "                        SyntaxFactory.Parameter(CollectionHelpersGen.ValueParameterName.Identifier).WithType(GetFullyQualifiedSymbolName(field.ElementValueType))); " is 139.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateCollectionHelperMethodStarter,The length of the statement  "                string plural = suffix != null ? (this.generator.PluralService.Singularize(field.Name.ToPascalCase()) + this.generator.PluralService.Pluralize(suffix)) : field.Name.ToPascalCase(); " is 180.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateCollectionHelperMethodStarter,The length of the statement  "                    : method.AddParameterListParameters(SyntaxFactory.Parameter(parameterName.Identifier).WithType(field.ElementTypeSyntax)); " is 121.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateCollectionHelperMethods,The length of the statement  "                    string plural = suffix != null ? (this.generator.PluralService.Singularize(field.Name.ToPascalCase()) + this.generator.PluralService.Pluralize(suffix)) : field.Name.ToPascalCase(); " is 180.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateCollectionHelperMethods,The length of the statement  "                            var returnType = SyntaxFactory.GenericName(nameof(ParentedRecursiveType<IRecursiveParent<IRecursiveType>' IRecursiveType>)).AddTypeArgumentListArguments( " is 153.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateCollectionHelperMethods,The length of the statement  "                                .AddParameterListParameters(SyntaxFactory.Parameter(valueParam.Identifier).WithType(this.applyTo.RecursiveTypeFromFamily.TypeSyntax)) " is 133.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateCollectionHelperMethods,The length of the statement  "                                                SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' Syntax.ThisDot(GreenNodeFieldName)' SyntaxFactory.IdentifierName("Add" + singular))) " is 162.
Long Statement,ImmutableObjectGraph.Generation,RootedStructGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+RootedStructGen.cs,CreateCollectionHelperMethods,The length of the statement  "                                             SyntaxFactory.ObjectCreationExpression(GetRootedTypeSyntax(this.applyTo.RecursiveTypeFromFamily)).AddArgumentListArguments( " is 123.
Long Statement,ImmutableObjectGraph.Generation,TypeConversionGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+TypeConversionGen.cs,GenerateCore,The length of the statement  "                if (!this.generator.applyToSymbol.IsAbstract && (this.generator.applyToMetaType.HasAncestor || this.generator.applyToMetaType.Descendents.Any())) " is 145.
Long Statement,ImmutableObjectGraph.Generation,TypeConversionGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+TypeConversionGen.cs,CreateCreateWithIdentityMethod,The length of the statement  "                        this.generator.CreateArgumentList(this.generator.applyToMetaType.AllFields' ArgSource.OptionalArgumentOrTemplate' OptionalStyle.Always) " is 135.
Long Statement,ImmutableObjectGraph.Generation,TypeConversionGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+TypeConversionGen.cs,CreateCreateWithIdentityMethod,The length of the statement  "                if (!this.generator.applyToMetaType.LocalFields.Any() && this.generator.applyToMetaType.Ancestors.Any(a => !a.TypeSymbol.IsAbstract)) " is 133.
Long Statement,ImmutableObjectGraph.Generation,TypeConversionGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+TypeConversionGen.cs,CreateToDerivedTypeMethod,The length of the statement  "                    SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' SyntaxFactory.ThisExpression()' SyntaxFactory.IdentifierName("GetType"))' " is 151.
Long Statement,ImmutableObjectGraph.Generation,TypeConversionGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+TypeConversionGen.cs,CreateToDerivedTypeMethod,The length of the statement  "                        SyntaxFactory.BinaryExpression(SyntaxKind.NotEqualsExpression' thatLocal' SyntaxFactory.LiteralExpression(SyntaxKind.NullLiteralExpression))' " is 141.
Long Statement,ImmutableObjectGraph.Generation,TypeConversionGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+TypeConversionGen.cs,CreateToDerivedTypeOverrideMethod,The length of the statement  "                                this.generator.CreateArgumentList(this.generator.applyToMetaType.GetFieldsBeyond(ancestor)' ArgSource.OptionalArgumentOrPropertyExceptWhenRequired' OptionalStyle.WhenNotRequired) " is 178.
Long Statement,ImmutableObjectGraph.Generation,TypeConversionGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+TypeConversionGen.cs,CreateToDerivedTypeOverrideMethod,The length of the statement  "                                    .AddArguments(this.generator.CreateArgumentList(derivedType.GetFieldsBeyond(this.generator.applyToMetaType)' ArgSource.Argument).Arguments.ToArray()))))); " is 154.
Long Statement,ImmutableObjectGraph.Generation,Syntax,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\Syntax.cs,OptionalIsDefined,The length of the statement  "            return SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' optionalOfTExpression' SyntaxFactory.IdentifierName(nameof(ImmutableObjectGraph.Optional<int>.IsDefined))); " is 192.
Long Statement,ImmutableObjectGraph.Generation,Syntax,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\Syntax.cs,OptionalGetValueOrDefault,The length of the statement  "                SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' optionalOfTExpression' SyntaxFactory.IdentifierName(nameof(ImmutableObjectGraph.Optional<int>.GetValueOrDefault)))' " is 193.
Long Statement,ImmutableObjectGraph.Generation,Syntax,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\Syntax.cs,OptionalValue,The length of the statement  "            return SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' optionalOfTExpression' SyntaxFactory.IdentifierName(nameof(ImmutableObjectGraph.Optional<int>.Value))); " is 188.
Long Statement,ImmutableObjectGraph.Generation,Syntax,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\Syntax.cs,GetTypeSyntax,The length of the statement  "            SimpleNameSyntax leafType = SyntaxFactory.IdentifierName(type.IsGenericType ? type.Name.Substring(0' type.Name.IndexOf('`')) : type.Name); " is 138.
Long Statement,ImmutableObjectGraph.Generation,Syntax,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\Syntax.cs,GetTypeSyntax,The length of the statement  "                    SyntaxFactory.TypeArgumentList(Syntax.JoinSyntaxNodes<TypeSyntax>(SyntaxKind.CommaToken' type.GenericTypeArguments.Select(GetTypeSyntax)))); " is 140.
Long Statement,ImmutableObjectGraph.Generation,Syntax,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\Syntax.cs,ChainBinaryExpressions,The length of the statement  "            return expressions.Aggregate((ExpressionSyntax)null' (agg' e) => agg != null ? SyntaxFactory.BinaryExpression(binaryOperator' agg' e) : e); " is 139.
Long Statement,ImmutableObjectGraph.Generation,Syntax,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\Syntax.cs,RequiresNotNull,The length of the statement  "                SyntaxFactory.BinaryExpression(SyntaxKind.EqualsExpression' parameter' SyntaxFactory.LiteralExpression(SyntaxKind.NullLiteralExpression))' " is 138.
Long Statement,ImmutableObjectGraph.Generation,Syntax,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\Syntax.cs,RequiresNotNull,The length of the statement  "                        SyntaxFactory.Argument(SyntaxFactory.LiteralExpression(SyntaxKind.StringLiteralExpression' SyntaxFactory.Literal(parameter.Identifier.ToString())))))); " is 151.
Magic Number,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,HasEqualityOperators,The following statement contains a magic number: var equalityOperators = from method in symbol.GetMembers().OfType<IMethodSymbol>()                                      where method.MethodKind == MethodKind.BuiltinOperator || method.MethodKind == MethodKind.UserDefinedOperator                                      where method.Parameters.Length == 2 && method.Parameters.All(p => p.Type.Equals(symbol))                                      where method.Name == "op_Equality"                                      select method;
Magic Number,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,ReportDiagnostic,The following statement contains a magic number: this.progress.Report(                  Diagnostic.Create(                      id' // id                      string.Empty' // category                      new LocalizableResourceString(id' DiagnosticsStrings.ResourceManager' typeof(DiagnosticsStrings)' formattingArgs)'                      severity'                      severity'                      true'                      severity == DiagnosticSeverity.Warning ? 2 : 0'                      false'                      location: blamedSyntax.GetLocation()));
Magic Number,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateTemplateStruct,The following statement contains a magic number: return SyntaxFactory.StructDeclaration(NestedTemplateTypeName.Identifier)                  .WithMembers(SyntaxFactory.List<MemberDeclarationSyntax>(                      this.applyToMetaType.AllFields.Select(f =>                          SyntaxFactory.FieldDeclaration(SyntaxFactory.VariableDeclaration(                              GetFullyQualifiedSymbolName(f.Type)'                              SyntaxFactory.SingletonSeparatedList(                                  SyntaxFactory.VariableDeclarator(f.Name.ToPascalCase()))))                          .AddModifiers(SyntaxFactory.Token(SyntaxKind.InternalKeyword)))))                  .AddModifiers(SyntaxFactory.Token(SyntaxKind.PrivateKeyword))                  .WithLeadingTrivia(                      SyntaxFactory.ElasticCarriageReturnLineFeed'                      SyntaxFactory.Trivia(                          SyntaxFactory.PragmaWarningDirectiveTrivia(SyntaxFactory.Token(SyntaxKind.DisableKeyword)' true)                          .WithErrorCodes(SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(                              SyntaxFactory.LiteralExpression(SyntaxKind.NumericLiteralExpression' SyntaxFactory.Literal(0649)                                  .WithTrailingTrivia(SyntaxFactory.Space' SyntaxFactory.Comment("// field initialization is optional in user code")))))                          .WithEndOfDirectiveToken(SyntaxFactory.Token(SyntaxFactory.TriviaList()' SyntaxKind.EndOfDirectiveToken' SyntaxFactory.TriviaList(SyntaxFactory.ElasticCarriageReturnLineFeed)))))                  .WithTrailingTrivia(                      SyntaxFactory.Trivia(                          SyntaxFactory.PragmaWarningDirectiveTrivia(SyntaxFactory.Token(SyntaxKind.RestoreKeyword)' true)                          .WithErrorCodes(SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(                              SyntaxFactory.LiteralExpression(SyntaxKind.NumericLiteralExpression' SyntaxFactory.Literal(0649))))                          .WithEndOfDirectiveToken(SyntaxFactory.Token(SyntaxFactory.TriviaList()' SyntaxKind.EndOfDirectiveToken' SyntaxFactory.TriviaList(SyntaxFactory.ElasticCarriageReturnLineFeed))))'                      SyntaxFactory.ElasticCarriageReturnLineFeed);
Magic Number,ImmutableObjectGraph.Generation,CodeGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+BuilderGen.cs,CreateTemplateStruct,The following statement contains a magic number: return SyntaxFactory.StructDeclaration(NestedTemplateTypeName.Identifier)                  .WithMembers(SyntaxFactory.List<MemberDeclarationSyntax>(                      this.applyToMetaType.AllFields.Select(f =>                          SyntaxFactory.FieldDeclaration(SyntaxFactory.VariableDeclaration(                              GetFullyQualifiedSymbolName(f.Type)'                              SyntaxFactory.SingletonSeparatedList(                                  SyntaxFactory.VariableDeclarator(f.Name.ToPascalCase()))))                          .AddModifiers(SyntaxFactory.Token(SyntaxKind.InternalKeyword)))))                  .AddModifiers(SyntaxFactory.Token(SyntaxKind.PrivateKeyword))                  .WithLeadingTrivia(                      SyntaxFactory.ElasticCarriageReturnLineFeed'                      SyntaxFactory.Trivia(                          SyntaxFactory.PragmaWarningDirectiveTrivia(SyntaxFactory.Token(SyntaxKind.DisableKeyword)' true)                          .WithErrorCodes(SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(                              SyntaxFactory.LiteralExpression(SyntaxKind.NumericLiteralExpression' SyntaxFactory.Literal(0649)                                  .WithTrailingTrivia(SyntaxFactory.Space' SyntaxFactory.Comment("// field initialization is optional in user code")))))                          .WithEndOfDirectiveToken(SyntaxFactory.Token(SyntaxFactory.TriviaList()' SyntaxKind.EndOfDirectiveToken' SyntaxFactory.TriviaList(SyntaxFactory.ElasticCarriageReturnLineFeed)))))                  .WithTrailingTrivia(                      SyntaxFactory.Trivia(                          SyntaxFactory.PragmaWarningDirectiveTrivia(SyntaxFactory.Token(SyntaxKind.RestoreKeyword)' true)                          .WithErrorCodes(SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(                              SyntaxFactory.LiteralExpression(SyntaxKind.NumericLiteralExpression' SyntaxFactory.Literal(0649))))                          .WithEndOfDirectiveToken(SyntaxFactory.Token(SyntaxFactory.TriviaList()' SyntaxKind.EndOfDirectiveToken' SyntaxFactory.TriviaList(SyntaxFactory.ElasticCarriageReturnLineFeed))))'                      SyntaxFactory.ElasticCarriageReturnLineFeed);
Magic Number,ImmutableObjectGraph.Generation,DeepMutationGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeepMutationGen.cs,CreateRemoveDescendentMethod,The following statement contains a magic number: return SyntaxFactory.MethodDeclaration(                      this.applyTo.TypeSyntax'                      RemoveDescendentMethodName.Identifier)                      .AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword))                      .AddParameterListParameters(                          SyntaxFactory.Parameter(valueParameter.Identifier).WithType(this.applyTo.RecursiveType.TypeSyntax))                      .WithBody(SyntaxFactory.Block(                          // var spine = this.GetSpine(value);                          SyntaxFactory.LocalDeclarationStatement(SyntaxFactory.VariableDeclaration(varType)                              .AddVariables(SyntaxFactory.VariableDeclarator(spineVar.Identifier).WithInitializer(SyntaxFactory.EqualsValueClause(                                  SyntaxFactory.InvocationExpression(Syntax.ThisDot(FastSpineGen.GetSpineMethodName)).AddArgumentListArguments(                                      SyntaxFactory.Argument(valueParameter))))))'                          // var spineList = spine.ToList();                          SyntaxFactory.LocalDeclarationStatement(SyntaxFactory.VariableDeclaration(varType)                              .AddVariables(SyntaxFactory.VariableDeclarator(spineListVar.Identifier).WithInitializer(SyntaxFactory.EqualsValueClause(                                  Syntax.ToList(spineVar)))))'                          // var parent = (TRecursiveParent)spineList[spineList.Count - 2];                          SyntaxFactory.LocalDeclarationStatement(SyntaxFactory.VariableDeclaration(varType)                              .AddVariables(SyntaxFactory.VariableDeclarator(parentVar.Identifier).WithInitializer(SyntaxFactory.EqualsValueClause(                                  SyntaxFactory.CastExpression(                                      this.applyTo.RecursiveParent.TypeSyntax'                                      SyntaxFactory.ElementAccessExpression(                                          spineListVar'                                          SyntaxFactory.BracketedArgumentList(                                              SyntaxFactory.SingletonSeparatedList(                                                  SyntaxFactory.Argument(SyntaxFactory.BinaryExpression(                                                      SyntaxKind.SubtractExpression'                                                      SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' spineListVar' SyntaxFactory.IdentifierName(nameof(List<int>.Count)))'                                                      SyntaxFactory.LiteralExpression(SyntaxKind.NumericLiteralExpression' SyntaxFactory.Literal(2))))))))))))'                          // var newParent = parent.With(children: parent.Children.Remove(spineList[spineList.Count - 1]));                          SyntaxFactory.LocalDeclarationStatement(SyntaxFactory.VariableDeclaration(varType)                              .AddVariables(SyntaxFactory.VariableDeclarator(newParentVar.Identifier).WithInitializer(SyntaxFactory.EqualsValueClause(                              SyntaxFactory.InvocationExpression(SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' parentVar' WithMethodName))                                  .AddArgumentListArguments(                                  SyntaxFactory.Argument(                                      SyntaxFactory.NameColon(this.applyTo.RecursiveField.NameAsField)'                                      NoneToken'                                      SyntaxFactory.InvocationExpression( // parent.Children.Remove(...)                                          SyntaxFactory.MemberAccessExpression( // parent.Children.Remove                                              SyntaxKind.SimpleMemberAccessExpression'                                              SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' parentVar' this.applyTo.RecursiveField.NameAsProperty)'                                              SyntaxFactory.IdentifierName(nameof(List<int>.Remove))))                                          .AddArgumentListArguments(                                              SyntaxFactory.Argument(SyntaxFactory.ElementAccessExpression( // spineList[spineList.Count - 1]                                                  spineListVar'                                                  SyntaxFactory.BracketedArgumentList(SyntaxFactory.SingletonSeparatedList(                                                      SyntaxFactory.Argument( // spineList.Count - 1                                                          SyntaxFactory.BinaryExpression(                                                              SyntaxKind.SubtractExpression'                                                              SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression' spineListVar' SyntaxFactory.IdentifierName(nameof(List<int>.Count)))'                                                              SyntaxFactory.LiteralExpression(SyntaxKind.NumericLiteralExpression' SyntaxFactory.Literal(1)))))))))))))))'                          // var newSpine = System.Collections.Immutable.ImmutableStack.Create<TRecursiveType>(newParent);                          SyntaxFactory.LocalDeclarationStatement(SyntaxFactory.VariableDeclaration(varType)                              .AddVariables(SyntaxFactory.VariableDeclarator(newSpineVar.Identifier).WithInitializer(SyntaxFactory.EqualsValueClause(                                  SyntaxFactory.InvocationExpression(Syntax.CreateImmutableStack(this.applyTo.RecursiveType.TypeSyntax))                                      .AddArgumentListArguments(SyntaxFactory.Argument(newParentVar))))))'                          // return (TRecursiveParent)this.ReplaceDescendent(spine' newSpine' spineIncludesDeletedElement: true).Peek();                          SyntaxFactory.ReturnStatement(                              SyntaxFactory.CastExpression(                                  this.applyTo.RecursiveParent.TypeSyntax'                                  SyntaxFactory.InvocationExpression(                                      SyntaxFactory.MemberAccessExpression(                                          SyntaxKind.SimpleMemberAccessExpression'                                          SyntaxFactory.InvocationExpression(Syntax.ThisDot(ReplaceDescendentMethodName))                                              .AddArgumentListArguments(                                                  SyntaxFactory.Argument(spineVar)'                                                  SyntaxFactory.Argument(newSpineVar)'                                                  SyntaxFactory.Argument(SyntaxFactory.NameColon("spineIncludesDeletedElement")' NoneToken' SyntaxFactory.LiteralExpression(SyntaxKind.TrueLiteralExpression))                                              )'                                          SyntaxFactory.IdentifierName(nameof(ImmutableStack<int>.Peek)))'                                      SyntaxFactory.ArgumentList())))));
Magic Number,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateChangedPropertiesEnum,The following statement contains a magic number: int fieldsCount = 4 + fields.Count();
Magic Number,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateChangedPropertiesEnum,The following statement contains a magic number: int counter = 3;
Magic Number,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateChangedPropertiesEnum,The following statement contains a magic number: foreach (var field in fields)                  {                      fieldEnumValues.Add(                          SyntaxFactory.EnumMemberDeclaration(                              SyntaxFactory.List<AttributeListSyntax>()'                              SyntaxFactory.Identifier(field.Key)'                              SyntaxFactory.EqualsValueClause(                                  SyntaxFactory.LiteralExpression(                                      SyntaxKind.NumericLiteralExpression'                                      SyntaxFactory.Literal(string.Format(CultureInfo.InvariantCulture' "0x{0:x}"' (ulong)Math.Pow(2' counter))' counter)))));                      counter++;                  }
Magic Number,ImmutableObjectGraph.Generation,DeltaGen,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen+DeltaGen.cs,CreateChangedPropertiesEnum,The following statement contains a magic number: TypeSyntax enumBaseType = SyntaxFactory.PredefinedType(SyntaxFactory.Token(                      fieldsCount > 32                          ? SyntaxKind.ULongKeyword                          : SyntaxKind.UIntKeyword));
Magic Number,ImmutableObjectGraph.Generation,MetaField,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\CodeGen.cs,GetDictionaryType,The following statement contains a magic number: if (namedType != null)                  {                      if (namedType.IsGenericType && namedType.TypeArguments.Length == 2)                      {                          var collectionType = namedType.AllInterfaces.FirstOrDefault(i => i.Name == nameof(IImmutableDictionary<int' int>));                          if (collectionType != null)                          {                              return collectionType;                          }                      }                  }
Magic Number,ImmutableObjectGraph.Generation,StyleCop,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\StyleCop.cs,GetMemberDeclarationVisibilityOrder,The following statement contains a magic number: if (modifiers.HasValue)              {                  bool isPublic = member.HasModifier(SyntaxKind.PublicKeyword);                  bool isProtected = member.HasModifier(SyntaxKind.ProtectedKeyword);                  bool isInternal = member.HasModifier(SyntaxKind.InternalKeyword);                  bool isPrivate = member.HasModifier(SyntaxKind.PrivateKeyword);                  if (isPublic)                  {                      return 0;                  }                  else if (isProtected && isInternal)                  {                      return 1;                  }                  else if (isInternal)                  {                      return 2;                  }                  else if (isProtected)                  {                      return 3;                  }                  else if (isPrivate)                  {                      return 4;                  }                  else // assume private-level                  {                      return 4;                  }              }
Magic Number,ImmutableObjectGraph.Generation,StyleCop,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\StyleCop.cs,GetMemberDeclarationVisibilityOrder,The following statement contains a magic number: if (modifiers.HasValue)              {                  bool isPublic = member.HasModifier(SyntaxKind.PublicKeyword);                  bool isProtected = member.HasModifier(SyntaxKind.ProtectedKeyword);                  bool isInternal = member.HasModifier(SyntaxKind.InternalKeyword);                  bool isPrivate = member.HasModifier(SyntaxKind.PrivateKeyword);                  if (isPublic)                  {                      return 0;                  }                  else if (isProtected && isInternal)                  {                      return 1;                  }                  else if (isInternal)                  {                      return 2;                  }                  else if (isProtected)                  {                      return 3;                  }                  else if (isPrivate)                  {                      return 4;                  }                  else // assume private-level                  {                      return 4;                  }              }
Magic Number,ImmutableObjectGraph.Generation,StyleCop,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\StyleCop.cs,GetMemberDeclarationVisibilityOrder,The following statement contains a magic number: if (modifiers.HasValue)              {                  bool isPublic = member.HasModifier(SyntaxKind.PublicKeyword);                  bool isProtected = member.HasModifier(SyntaxKind.ProtectedKeyword);                  bool isInternal = member.HasModifier(SyntaxKind.InternalKeyword);                  bool isPrivate = member.HasModifier(SyntaxKind.PrivateKeyword);                  if (isPublic)                  {                      return 0;                  }                  else if (isProtected && isInternal)                  {                      return 1;                  }                  else if (isInternal)                  {                      return 2;                  }                  else if (isProtected)                  {                      return 3;                  }                  else if (isPrivate)                  {                      return 4;                  }                  else // assume private-level                  {                      return 4;                  }              }
Magic Number,ImmutableObjectGraph.Generation,StyleCop,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\StyleCop.cs,GetMemberDeclarationVisibilityOrder,The following statement contains a magic number: if (modifiers.HasValue)              {                  bool isPublic = member.HasModifier(SyntaxKind.PublicKeyword);                  bool isProtected = member.HasModifier(SyntaxKind.ProtectedKeyword);                  bool isInternal = member.HasModifier(SyntaxKind.InternalKeyword);                  bool isPrivate = member.HasModifier(SyntaxKind.PrivateKeyword);                  if (isPublic)                  {                      return 0;                  }                  else if (isProtected && isInternal)                  {                      return 1;                  }                  else if (isInternal)                  {                      return 2;                  }                  else if (isProtected)                  {                      return 3;                  }                  else if (isPrivate)                  {                      return 4;                  }                  else // assume private-level                  {                      return 4;                  }              }
Magic Number,ImmutableObjectGraph.Generation,Syntax,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\Syntax.cs,JoinSyntaxNodes,The following statement contains a magic number: switch (nodes.Count)              {                  case 0:                      return SyntaxFactory.NodeOrTokenList();                  case 1:                      return SyntaxFactory.NodeOrTokenList(nodes[0]);                  default:                      var nodesOrTokens = new SyntaxNodeOrToken[(nodes.Count * 2) - 1];                      nodesOrTokens[0] = nodes[0];                      for (int i = 1; i < nodes.Count; i++)                      {                          int targetIndex = i * 2;                          nodesOrTokens[targetIndex - 1] = separatingToken;                          nodesOrTokens[targetIndex] = nodes[i];                      }                        return SyntaxFactory.NodeOrTokenList(nodesOrTokens);              }
Magic Number,ImmutableObjectGraph.Generation,Syntax,C:\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph.Generation\Syntax.cs,JoinSyntaxNodes,The following statement contains a magic number: switch (nodes.Count)              {                  case 0:                      return SyntaxFactory.NodeOrTokenList();                  case 1:                      return SyntaxFactory.NodeOrTokenList(nodes[0]);                  default:                      var nodesOrTokens = new SyntaxNodeOrToken[(nodes.Count * 2) - 1];                      nodesOrTokens[0] = nodes[0];                      for (int i = 1; i < nodes.Count; i++)                      {                          int targetIndex = i * 2;                          nodesOrTokens[targetIndex - 1] = separatingToken;                          nodesOrTokens[targetIndex] = nodes[i];                      }                        return SyntaxFactory.NodeOrTokenList(nodesOrTokens);              }
