Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ImmutableObjectGraph,RecursiveTypeExtensions,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,TryFind,Cyclomatic complexity of the method is 8
Complex Method,ImmutableObjectGraph,RecursiveTypeExtensions,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,GetParentedNode,Cyclomatic complexity of the method is 8
Complex Method,ImmutableObjectGraph,RecursiveTypeExtensions,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,GetSpine,Cyclomatic complexity of the method is 8
Complex Method,ImmutableObjectGraph,RecursiveTypeExtensions,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,ChangesSince,Cyclomatic complexity of the method is 14
Complex Method,ImmutableObjectGraph,RecursiveTypeExtensions,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,DiffProperties,Cyclomatic complexity of the method is 8
Complex Method,ImmutableObjectGraph,LookupTable<TRecursiveType;TRecursiveParent>,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,Initialize,Cyclomatic complexity of the method is 8
Complex Method,ImmutableObjectGraph,LookupTable<TRecursiveType;TRecursiveParent>,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,Fixup,Cyclomatic complexity of the method is 13
Long Statement,ImmutableObjectGraph,Comparers,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\Comparers.cs,ByValue,The length of the statement  "			return deep ? ValueEqualityComparer<TPropertiesEnum' TDiffGram>.Deep : ValueEqualityComparer<TPropertiesEnum' TDiffGram>.Shallow; " is 129.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,GetParentedNode,The length of the statement  "                    return new ParentedRecursiveType<TRecursiveParent' TRecursiveType>((TRecursiveType)nodeLookupResult.Key' (TRecursiveParent)parentReference); " is 140.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,GetParentedNode,The length of the statement  "                            return new ParentedRecursiveType<TRecursiveParent' TRecursiveType>((TRecursiveType)childResult.Value' (TRecursiveParent)childResult.Parent); " is 140.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,GetSelfAndDescendentsWithParents,The length of the statement  "                        foreach (var descendent in childAsParent.GetSelfAndDescendentsWithParents<TRecursiveParent' TRecursiveType>(rootAsParent)) " is 122.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,ChangesSince,The length of the statement  "            var before = new HashSet<ParentedRecursiveType<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>>(Comparers.Parented<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>()); " is 310.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,ChangesSince,The length of the statement  "            var after = new HashSet<ParentedRecursiveType<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>>(Comparers.Parented<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>()); " is 309.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,ChangesSince,The length of the statement  "                before.UnionWith(priorVersionAsParent.GetSelfAndDescendentsWithParents<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>()); " is 194.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,ChangesSince,The length of the statement  "                after.UnionWith(currentAsParent.GetSelfAndDescendentsWithParents<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>()); " is 188.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,ChangesSince,The length of the statement  "            var added = new HashSet<ParentedRecursiveType<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>>(Comparers.Parented<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>()); " is 309.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,ChangesSince,The length of the statement  "            var removed = new HashSet<ParentedRecursiveType<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>>(Comparers.Parented<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>()); " is 311.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,ChangesSince,The length of the statement  "            var changed = new Dictionary<ParentedRecursiveType<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' ParentedRecursiveType<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>>(Comparers.Parented<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>()); " is 457.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,ChangesSince,The length of the statement  "                    ParentedRecursiveType<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>> fromAfter; " is 152.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,ChangesSince,The length of the statement  "                        fromAfter = new ParentedRecursiveType<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>( " is 158.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,ChangesSince,The length of the statement  "                        fromAfter = new ParentedRecursiveType<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>( " is 158.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,ChangesSince,The length of the statement  "                    if (!object.ReferenceEquals(fromBefore.Value' fromAfter.Value) || fromBefore.Parent.Identity != fromAfter.Parent.Identity) " is 122.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,ChangesSince,The length of the statement  "            history.AddRange(removed.Where(r => !descendentsOfAddOrRemove.Contains(r.Value)).Select(r => currentAsRecursiveType.Remove(r.Value))); " is 134.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,ChangesSince,The length of the statement  "            history.AddRange(added.Where(a => !descendentsOfAddOrRemove.Contains(a.Value)).Select(a => currentAsRecursiveType.Add(a.Value))); " is 129.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,DiffProperties,The length of the statement  "            if ((self.Parent == null ^ other.Parent == null) || (self.Parent != null && other.Parent != null && self.Parent.Identity != other.Parent.Identity)) " is 147.
Long Statement,ImmutableObjectGraph,LookupTable<TRecursiveType;TRecursiveParent>,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,CreateLookupTable,The length of the statement  "                var table = System.Collections.Immutable.ImmutableDictionary.Create<IdentityFieldType' KeyValuePair<TRecursiveType' IdentityFieldType>>().ToBuilder(); " is 150.
Long Statement,ImmutableObjectGraph,LookupTable<TRecursiveType;TRecursiveParent>,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,Fixup,The length of the statement  "                    (updatedSpine.Count > 1 && oldSpine.Count > 1 && System.Object.ReferenceEquals(updatedSpine.PeekHead()' oldSpine.PeekHead()))) " is 126.
Long Statement,ImmutableObjectGraph,LookupTable<TRecursiveType;TRecursiveParent>,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,Fixup,The length of the statement  "                    // Remove and add rather than use the Set method' since the old and new node are equal (in identity) therefore the map class will " is 129.
Long Statement,ImmutableObjectGraph,LookupTable<TRecursiveType;TRecursiveParent>,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,ValidateInternalIntegrity,The length of the statement  "                    Assumes.False(actualCount != expectedCount' "Expected {0} entries in lookup table but found {1}."' expectedCount' actualCount); " is 127.
Long Statement,ImmutableObjectGraph.Adapters,ImmutableListRootAdapter<TUnrooted;TRooted;TRoot>,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\Adapters\ImmutableListRootAdapter.cs,Wrap,The length of the statement  "				: new ImmutableListRootAdapter<TUnrooted' TRooted' TRoot>(underlyingCollection' this.root' this.unroot' this.rootObject); " is 121.
Long Statement,ImmutableObjectGraph.Adapters,ImmutableSetRootAdapter<TUnrooted;TRooted;TRoot>,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\Adapters\ImmutableSetRootAdapter.cs,Wrap,The length of the statement  "				: new ImmutableSetRootAdapter<TUnrooted' TRooted' TRoot>(underlyingCollection' this.root' this.unroot' this.rootObject); " is 120.
Complex Conditional,ImmutableObjectGraph,RecursiveTypeExtensions,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,DiffProperties,The conditional expression  "(self.Parent == null ^ other.Parent == null) || (self.Parent != null && other.Parent != null && self.Parent.Identity != other.Parent.Identity)"  is complex.
Complex Conditional,ImmutableObjectGraph,LookupTable<TRecursiveType;TRecursiveParent>,D:\research\architectureSmells\repos\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,Fixup,The conditional expression  "(updatedSpine.IsEmpty && oldSpine.IsEmpty) ||                      (updatedSpine.Count > 1 && oldSpine.Count > 1 && System.Object.ReferenceEquals(updatedSpine.PeekHead()' oldSpine.PeekHead()))"  is complex.
