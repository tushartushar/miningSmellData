Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ImmutableObjectGraph,RecursiveTypeExtensions,F:\newReposMay17\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,TryFind,Cyclomatic complexity of the method is 8
Complex Method,ImmutableObjectGraph,RecursiveTypeExtensions,F:\newReposMay17\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,GetParentedNode,Cyclomatic complexity of the method is 8
Complex Method,ImmutableObjectGraph,RecursiveTypeExtensions,F:\newReposMay17\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,GetSpine,Cyclomatic complexity of the method is 9
Complex Method,ImmutableObjectGraph,RecursiveTypeExtensions,F:\newReposMay17\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,ChangesSince,Cyclomatic complexity of the method is 14
Complex Method,ImmutableObjectGraph,RecursiveTypeExtensions,F:\newReposMay17\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,DiffProperties,Cyclomatic complexity of the method is 8
Long Statement,ImmutableObjectGraph,Adapter,F:\newReposMay17\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\Adapter.cs,Create,The length of the statement  "	return new ImmutableListRootAdapter<TUnrooted' TRooted' TRoot> (underlyingCollection' toRooted' toUnrooted' rootObject); " is 120.
Long Statement,ImmutableObjectGraph,Comparers,F:\newReposMay17\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\Comparers.cs,ByValue,The length of the statement  "	return deep ? ValueEqualityComparer<TPropertiesEnum' TDiffGram>.Deep : ValueEqualityComparer<TPropertiesEnum' TDiffGram>.Shallow; " is 129.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,F:\newReposMay17\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,GetParentedNode,The length of the statement  "			return new ParentedRecursiveType<TRecursiveParent' TRecursiveType> ((TRecursiveType)nodeLookupResult.Key' (TRecursiveParent)parentReference); " is 141.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,F:\newReposMay17\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,GetParentedNode,The length of the statement  "					return new ParentedRecursiveType<TRecursiveParent' TRecursiveType> ((TRecursiveType)childResult.Value' (TRecursiveParent)childResult.Parent); " is 141.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,F:\newReposMay17\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,GetSelfAndDescendentsWithParents,The length of the statement  "				foreach (var descendent in childAsParent.GetSelfAndDescendentsWithParents<TRecursiveParent' TRecursiveType> (rootAsParent)) { " is 125.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,F:\newReposMay17\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,ChangesSince,The length of the statement  "	var before = new HashSet<ParentedRecursiveType<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>> (Comparers.Parented<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>> ()); " is 312.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,F:\newReposMay17\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,ChangesSince,The length of the statement  "	var after = new HashSet<ParentedRecursiveType<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>> (Comparers.Parented<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>> ()); " is 311.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,F:\newReposMay17\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,ChangesSince,The length of the statement  "		before.UnionWith (priorVersionAsParent.GetSelfAndDescendentsWithParents<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>> ()); " is 196.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,F:\newReposMay17\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,ChangesSince,The length of the statement  "		after.UnionWith (currentAsParent.GetSelfAndDescendentsWithParents<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>> ()); " is 190.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,F:\newReposMay17\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,ChangesSince,The length of the statement  "	var added = new HashSet<ParentedRecursiveType<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>> (Comparers.Parented<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>> ()); " is 311.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,F:\newReposMay17\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,ChangesSince,The length of the statement  "	var removed = new HashSet<ParentedRecursiveType<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>> (Comparers.Parented<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>> ()); " is 313.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,F:\newReposMay17\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,ChangesSince,The length of the statement  "	var changed = new Dictionary<ParentedRecursiveType<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' ParentedRecursiveType<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>> (Comparers.Parented<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>> ()); " is 459.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,F:\newReposMay17\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,ChangesSince,The length of the statement  "			ParentedRecursiveType<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>> fromAfter; " is 152.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,F:\newReposMay17\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,ChangesSince,The length of the statement  "				fromAfter = new ParentedRecursiveType<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>> ((IRecursiveDiffingType<TPropertiesEnum' TDiffGram>)parent.Value' (IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>)parent.Parent); " is 308.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,F:\newReposMay17\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,ChangesSince,The length of the statement  "				fromAfter = new ParentedRecursiveType<IRecursiveParent<IRecursiveDiffingType<TPropertiesEnum' TDiffGram>>' IRecursiveDiffingType<TPropertiesEnum' TDiffGram>> (fromBefore.Value.Identity == current.Identity ? (IRecursiveDiffingType<TPropertiesEnum' TDiffGram>)current : null); " is 274.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,F:\newReposMay17\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,ChangesSince,The length of the statement  "			if (!object.ReferenceEquals (fromBefore.Value' fromAfter.Value) || fromBefore.Parent.Identity != fromAfter.Parent.Identity) { " is 125.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,F:\newReposMay17\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,ChangesSince,The length of the statement  "	history.AddRange (removed.Where (r => !descendentsOfAddOrRemove.Contains (r.Value)).Select (r => currentAsRecursiveType.Remove (r.Value))); " is 139.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,F:\newReposMay17\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,ChangesSince,The length of the statement  "	history.AddRange (added.Where (a => !descendentsOfAddOrRemove.Contains (a.Value)).Select (a => currentAsRecursiveType.Add (a.Value))); " is 134.
Long Statement,ImmutableObjectGraph,RecursiveTypeExtensions,F:\newReposMay17\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,DiffProperties,The length of the statement  "	if ((self.Parent == null ^ other.Parent == null) || (self.Parent != null && other.Parent != null && self.Parent.Identity != other.Parent.Identity)) { " is 149.
Long Statement,ImmutableObjectGraph.Adapters,ImmutableListRootAdapter,F:\newReposMay17\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\Adapters\ImmutableListRootAdapter.cs,Wrap,The length of the statement  "	return this.underlyingCollection == underlyingCollection ? this : new ImmutableListRootAdapter<TUnrooted' TRooted' TRoot> (underlyingCollection' this.root' this.unroot' this.rootObject); " is 186.
Long Statement,ImmutableObjectGraph.Adapters,ImmutableSetRootAdapter,F:\newReposMay17\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\Adapters\ImmutableSetRootAdapter.cs,Wrap,The length of the statement  "	return this.underlyingCollection == underlyingCollection ? this : new ImmutableSetRootAdapter<TUnrooted' TRooted' TRoot> (underlyingCollection' this.root' this.unroot' this.rootObject); " is 185.
Complex Conditional,ImmutableObjectGraph,RecursiveTypeExtensions,F:\newReposMay17\AArnott_ImmutableObjectGraph\src\ImmutableObjectGraph\RecursiveTypeExtensions.cs,DiffProperties,The conditional expression  "(self.Parent == null ^ other.Parent == null) || (self.Parent != null && other.Parent != null && self.Parent.Identity != other.Parent.Identity)"  is complex.
