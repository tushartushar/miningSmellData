Implementation smell,Namespace,Class,File,Method,Description
Long Method,CameraControl.Devices.Canon,CanonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,getEvent,The method has 111 lines of code.
Long Method,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReadDeviceProperties,The method has 149 lines of code.
Long Method,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetEvent,The method has 102 lines of code.
Long Method,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The method has 109 lines of code.
Long Method,CameraControl.Devices.Others,WiaCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\WiaCameraDevice.cs,Init,The method has 217 lines of code.
Long Method,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,GetEvent,The method has 103 lines of code.
Complex Method,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,GetObjects,Cyclomatic complexity of the method is 8
Complex Method,CameraControl.Devices,CameraDeviceManager,C:\repos\dukus_digiCamControl\CameraControl.Devices\CameraDeviceManager.cs,ConnectDevices,Cyclomatic complexity of the method is 10
Complex Method,CameraControl.Devices,CameraDeviceManager,C:\repos\dukus_digiCamControl\CameraControl.Devices\CameraDeviceManager.cs,ConnectToCamera,Cyclomatic complexity of the method is 8
Complex Method,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,Cyclomatic complexity of the method is 15
Complex Method,CameraControl.Devices.Classes,PropertyValue<T>,C:\repos\dukus_digiCamControl\CameraControl.Devices\Classes\PropertyValue.cs,SetValue,Cyclomatic complexity of the method is 11
Complex Method,CameraControl.Devices.Others,WiaCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\WiaCameraDevice.cs,Init,Cyclomatic complexity of the method is 28
Complex Method,PanonoTest,PanonoCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\PanonoCamera.cs,Ws_OnMessage,Cyclomatic complexity of the method is 11
Complex Method,SonyCameraCommunication,CameraDiscovery,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\CameraDiscovery.cs,UDPSocketSetup,Cyclomatic complexity of the method is 10
Complex Method,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,GetEvent,Cyclomatic complexity of the method is 15
Complex Method,CameraControl.Devices.Wifi,PanonoDiscovery,C:\repos\dukus_digiCamControl\CameraControl.Devices\Wifi\PanonoDiscovery.cs,UDPSocketSetup,Cyclomatic complexity of the method is 13
Long Parameter List,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,ExecuteWithNoData,The method has 6 parameters. Parameters: code' param1' param2' param3' loop' counter
Long Parameter List,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,ExecuteReadDataEx,The method has 5 parameters. Parameters: code' param1' param2' loop' counter
Long Parameter List,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,ExecuteReadDataEx,The method has 6 parameters. Parameters: code' param1' param2' param3' loop' counter
Long Parameter List,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,SetProperty,The method has 5 parameters. Parameters: code' data' param1' param2' param3
Long Identifier,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,,The length of the parameter CONST_Event_ObjectAddedInSdram is 30.
Long Identifier,CameraControl.Devices.Canon,CanonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,,The length of the parameter CONST_CMD_CANON_EOS_RemoteRelease is 33.
Long Identifier,CameraControl.Devices.Canon,CanonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,,The length of the parameter CONST_CMD_CANON_EOS_SetEventMode is 32.
Long Identifier,CameraControl.Devices.Canon,CanonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,,The length of the parameter CONST_CMD_CANON_EOS_SetRemoteMode is 33.
Long Identifier,CameraControl.Devices.Canon,CanonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,,The length of the parameter CONST_CMD_CANON_EOS_GetViewFinderData is 37.
Long Identifier,CameraControl.Devices.Canon,CanonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,,The length of the parameter CONST_CMD_CANON_EOS_GetObjectInfo is 33.
Long Identifier,CameraControl.Devices.Canon,CanonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,,The length of the parameter CONST_CMD_CANON_EOS_SetDevicePropValueEx is 40.
Long Identifier,CameraControl.Devices.Canon,CanonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,,The length of the parameter CONST_CMD_CANON_EOS_RequestDevicePropValue is 42.
Long Identifier,CameraControl.Devices.Canon,CanonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,,The length of the parameter CONST_Event_CANON_EOS_PropValueChanged is 38.
Long Identifier,CameraControl.Devices.Canon,CanonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,,The length of the parameter CONST_Event_CANON_EOS_ObjectAddedEx is 35.
Long Identifier,CameraControl.Devices.Classes,Conts,C:\repos\dukus_digiCamControl\CameraControl.Devices\Classes\Conts.cs,,The length of the parameter CONST_PROP_ExposureCompensation is 31.
Long Identifier,CameraControl.Devices.Classes,Conts,C:\repos\dukus_digiCamControl\CameraControl.Devices\Classes\Conts.cs,,The length of the parameter CONST_PROP_ExposureMeteringMode is 31.
Long Identifier,CameraControl.Devices.Classes,ErrorCodes,C:\repos\dukus_digiCamControl\CameraControl.Devices\Classes\ErrorCodes.cs,,The length of the parameter WIA_ERROR_DEVICE_COMMUNICATION is 30.
Long Identifier,CameraControl.Devices.Classes,ErrorCodes,C:\repos\dukus_digiCamControl\CameraControl.Devices\Classes\ErrorCodes.cs,,The length of the parameter WIA_ERROR_INCORRECT_HARDWARE_SETTING is 36.
Long Identifier,CameraControl.Devices.Classes,ErrorCodes,C:\repos\dukus_digiCamControl\CameraControl.Devices\Classes\ErrorCodes.cs,,The length of the parameter WIA_ERROR_INVALID_DRIVER_RESPONSE is 33.
Long Identifier,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,,The length of the parameter CONST_CMD_InitiateCaptureRecInMedia is 35.
Long Identifier,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,,The length of the parameter CONST_CMD_AfAndCaptureRecInSdram is 32.
Long Identifier,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,,The length of the parameter CONST_CMD_InitiateCaptureRecInSdram is 35.
Long Identifier,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,,The length of the parameter CONST_PROP_ExposureProgramMode is 30.
Long Identifier,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,,The length of the parameter CONST_PROP_ExposureBiasCompensation is 35.
Long Identifier,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,,The length of the parameter CONST_PROP_MovieExposureBiasCompensation is 40.
Long Identifier,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,,The length of the parameter CONST_PROP_LiveViewImageZoomRatio is 33.
Long Identifier,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,,The length of the parameter CONST_PROP_ExposureMeteringMode is 31.
Long Identifier,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,,The length of the parameter CONST_PROP_ExposureIndicateStatus is 33.
Long Identifier,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,,The length of the parameter CONST_PROP_RawCompressionBitMode is 32.
Long Identifier,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,,The length of the parameter CONST_PROP_WbTuneFluorescentType is 32.
Long Identifier,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,,The length of the parameter CONST_Event_CaptureCompleteRecInSdram is 37.
Long Statement,CameraControl.Devices,BaseCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseCameraDevice.cs,ToStringCameraData,The length of the statement  "                c.Append(String.Format("\n\tCapabilities ({0} present of {1}):"' Capabilities.Count' Enum.GetValues(typeof(CapabilityEnum)).Length)); " is 133.
Long Statement,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The length of the statement  "                        deviceInfo.AvaiableProperties.Add(new XmlPropertyDescriptor() { Code = BitConverter.ToUInt16(vendor_res.Data' index) }); " is 120.
Long Statement,CameraControl.Devices,CameraDeviceManager,C:\repos\dukus_digiCamControl\CameraControl.Devices\CameraDeviceManager.cs,InitCanon,The length of the statement  "                if ((exception.InnerException != null) && (exception.InnerException.Message != null) && (exception.InnerException.Message.Contains("EDSDK.dll"))) " is 145.
Long Statement,CameraControl.Devices,CameraDeviceManager,C:\repos\dukus_digiCamControl\CameraControl.Devices\CameraDeviceManager.cs,InitCanon,The length of the statement  "                        MessageBoxResult result = MessageBox.Show("Canon EOS camera library' EDSDK.dll is missing\nInstall it after downloading from Canon's site\n\nDo you want to close this application?\n\n(You can try to continue' but it probably will not not work)"' "Critical Error"' MessageBoxButton.YesNo' MessageBoxImage.Question); " is 314.
Long Statement,CameraControl.Devices,CameraDeviceManager,C:\repos\dukus_digiCamControl\CameraControl.Devices\CameraDeviceManager.cs,InitCanon,The length of the statement  "                        Console.WriteLine("\n**CRITICAL ERROR**\n\nCanon EOS camera library' EDSDK.dll is missing\nInstall it after downloading from Canon's site\n"); " is 142.
Long Statement,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitCompression,The length of the statement  "            CompressionSetting.AddValues("Large Fine JPEG"' (int) new EosImageQuality(){PrimaryCompressLevel = EosCompressLevel.Fine'PrimaryImageFormat = EosImageFormat.Jpeg'PrimaryImageSize = EosImageSize.Large'SecondaryCompressLevel = EosCompressLevel.Unknown'SecondaryImageFormat = EosImageFormat.Unknown' SecondaryImageSize = EosImageSize.Unknown}.ToBitMask()); " is 353.
Long Statement,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitCompression,The length of the statement  "            CompressionSetting.AddValues("Large Normal JPEG"' (int)new EosImageQuality() { PrimaryCompressLevel = EosCompressLevel.Normal' PrimaryImageFormat = EosImageFormat.Jpeg' PrimaryImageSize = EosImageSize.Large' SecondaryCompressLevel = EosCompressLevel.Unknown' SecondaryImageFormat = EosImageFormat.Unknown' SecondaryImageSize = EosImageSize.Unknown }.ToBitMask()); " is 363.
Long Statement,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitCompression,The length of the statement  "            CompressionSetting.AddValues("Medium Fine JPEG"' (int)new EosImageQuality() { PrimaryCompressLevel = EosCompressLevel.Fine' PrimaryImageFormat = EosImageFormat.Jpeg' PrimaryImageSize = EosImageSize.Middle' SecondaryCompressLevel = EosCompressLevel.Unknown' SecondaryImageFormat = EosImageFormat.Unknown' SecondaryImageSize = EosImageSize.Unknown }.ToBitMask()); " is 361.
Long Statement,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitCompression,The length of the statement  "            CompressionSetting.AddValues("Medium Normal JPEG"' (int)new EosImageQuality() { PrimaryCompressLevel = EosCompressLevel.Normal' PrimaryImageFormat = EosImageFormat.Jpeg' PrimaryImageSize = EosImageSize.Middle' SecondaryCompressLevel = EosCompressLevel.Unknown' SecondaryImageFormat = EosImageFormat.Unknown' SecondaryImageSize = EosImageSize.Unknown }.ToBitMask()); " is 365.
Long Statement,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitCompression,The length of the statement  "            CompressionSetting.AddValues("Small Fine JPEG"' (int)new EosImageQuality() { PrimaryCompressLevel = EosCompressLevel.Fine' PrimaryImageFormat = EosImageFormat.Jpeg' PrimaryImageSize = EosImageSize.Small2' SecondaryCompressLevel = EosCompressLevel.Unknown' SecondaryImageFormat = EosImageFormat.Unknown' SecondaryImageSize = EosImageSize.Unknown }.ToBitMask()); " is 360.
Long Statement,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitCompression,The length of the statement  "            CompressionSetting.AddValues("Small Normal JPEG"' (int)new EosImageQuality() { PrimaryCompressLevel = EosCompressLevel.Normal' PrimaryImageFormat = EosImageFormat.Jpeg' PrimaryImageSize = EosImageSize.Small2' SecondaryCompressLevel = EosCompressLevel.Unknown' SecondaryImageFormat = EosImageFormat.Unknown' SecondaryImageSize = EosImageSize.Unknown }.ToBitMask()); " is 364.
Long Statement,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitCompression,The length of the statement  "            CompressionSetting.AddValues("Smaller JPEG"' (int)new EosImageQuality() { PrimaryCompressLevel = EosCompressLevel.Fine' PrimaryImageFormat = EosImageFormat.Jpeg' PrimaryImageSize = EosImageSize.Small3' SecondaryCompressLevel = EosCompressLevel.Unknown' SecondaryImageFormat = EosImageFormat.Unknown' SecondaryImageSize = EosImageSize.Unknown }.ToBitMask()); " is 357.
Long Statement,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitCompression,The length of the statement  "            CompressionSetting.AddValues("Tiny JPEG"' (int)new EosImageQuality() { PrimaryCompressLevel = EosCompressLevel.Fine' PrimaryImageFormat = EosImageFormat.Jpeg' PrimaryImageSize = EosImageSize.Small4' SecondaryCompressLevel = EosCompressLevel.Unknown' SecondaryImageFormat = EosImageFormat.Unknown' SecondaryImageSize = EosImageSize.Unknown }.ToBitMask()); " is 354.
Long Statement,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitCompression,The length of the statement  "            CompressionSetting.AddValues("RAW + Large Fine JPEG"' (int)new EosImageQuality() {PrimaryImageFormat =EosImageFormat.Cr2'PrimaryCompressLevel = EosCompressLevel.Lossless' PrimaryImageSize = EosImageSize.Large' SecondaryImageSize =EosImageSize.Large'SecondaryCompressLevel = EosCompressLevel.Fine' SecondaryImageFormat = EosImageFormat.Jpeg }.ToBitMask()); " is 355.
Long Statement,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitCompression,The length of the statement  "            CompressionSetting.AddValues("RAW"' (int)new EosImageQuality() { PrimaryImageFormat = EosImageFormat.Cr2' PrimaryCompressLevel = EosCompressLevel.Lossless' PrimaryImageSize = EosImageSize.Large' SecondaryCompressLevel = EosCompressLevel.Unknown' SecondaryImageFormat = EosImageFormat.Unknown' SecondaryImageSize = EosImageSize.Unknown}.ToBitMask()); " is 349.
Long Statement,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,PressButton,The length of the statement  "            ErrorCodes.GetCanonException(Camera.SendCommand(Edsdk.CameraCommand_PressShutterButton' (int)Edsdk.EdsShutterButton.CameraCommand_ShutterButton_Completely)); " is 157.
Long Statement,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,PressHalfButton,The length of the statement  "            ErrorCodes.GetCanonException(Camera.SendCommand(Edsdk.CameraCommand_PressShutterButton' (int)Edsdk.EdsShutterButton.CameraCommand_ShutterButton_Halfway)); " is 154.
Long Statement,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,CapturePhotoNoAf,The length of the statement  "                ErrorCodes.GetCanonException(Camera.SendCommand(Edsdk.CameraCommand_PressShutterButton' (int)Edsdk.EdsShutterButton.CameraCommand_ShutterButton_Completely_NonAF)); " is 163.
Long Statement,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,ToStringCameraData,The length of the statement  "                c.AppendFormat("\n\tBattery...............{0'3}%' quality {1}' (note base class value is this + 20)"' Camera.BatteryLevel' Camera.BatteryQuality); " is 146.
Long Statement,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitIso,The length of the statement  "                        MovieIsoNumber.AddValues(_isoTable.ContainsKey(val) ? _isoTable[val] : val.ToString(CultureInfo.InvariantCulture)' val); " is 120.
Long Statement,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReadDeviceProperties,The length of the statement  "                            foreach (PropertyValue<long> advancedProperty in AdvancedProperties.Where(advancedProperty => advancedProperty.Code == prop)) " is 125.
Long Statement,CameraControl.Devices.Others,OscCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\OscCamera.cs,InitIso,The length of the statement  "                //"{\"name\":\"camera.getOptions\"'\"state\":\"done\"'\"results\":{\"options\":{\"iso\":100'\"isoSupport\":[100'125'160'200'250'320'400'500'640'800'1000'1250'1600]}}}"; " is 168.
Long Statement,CameraControl.Devices.Others,OscCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\OscCamera.cs,InitExposureCompensation,The length of the statement  "//                    "{\"name\":\"camera.getOptions\"'\"state\":\"done\"'\"results\":{\"options\":{\"exposureCompensation\":0.0'\"exposureCompensationSupport\":[-2.0'-1.7'-1.3'-1.0'-0.7'-0.3'0.0'0.3'0.7'1.0'1.3'1.7'2.0]}}}"; " is 225.
Long Statement,CameraControl.Devices.Others,OscCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\OscCamera.cs,GetSessionId,The length of the statement  "            //response = "{\"name\":\"camera.startSession\"'\"state\":\"done\"'\"results\":{ \"sessionId\":\"SID_0001\"'\"timeout\":180}}"; " is 127.
Long Statement,CameraControl.Devices.Others,YiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,TransferFileThumb,The length of the statement  "            HttpHelper.DownLoadFileByWebRequest(String.Format("http://{0}/DCIM/100MEDIA/{1}?type=screen"' Protocol.Ip' o)' filename' " is 120.
Long Statement,SonyCameraCommunication,CameraDiscovery,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\CameraDiscovery.cs,UDPSocketSetup,The length of the statement  "                udpSocket.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.AddMembership' new MulticastOption(multicastEndpoint.Address' IPAddress.Any)); " is 143.
Long Statement,SonyCameraCommunication,CameraDiscovery,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\CameraDiscovery.cs,UDPSocketSetup,The length of the statement  "                    udpSocket.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.MulticastInterface' (int)IPAddress.HostToNetworkOrder(p.Index)); " is 129.
Long Statement,SonyCameraCommunication,CameraDiscovery,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\CameraDiscovery.cs,MSearch,The length of the statement  "            string searchString = "M-SEARCH * HTTP/1.1\r\nHOST:239.255.255.250:1900\r\nMAN:\"ssdp:discover\"\r\nMX:1\r\nST:urn:schemas-sony-com:service:ScalarWebAPI:1\r\n\r\n"; " is 164.
Long Statement,CameraControl.Devices.TransferProtocol.PtpIp,EndDataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\EndDataPacket.cs,Read,The length of the statement  "                numBytes += s.Read(Data' numBytes' (int)(Header.Length - 8 - 4 - numBytes));// payload.Read(Payload' numBytes' Header.PayloadLength - numBytes); " is 144.
Long Statement,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpClient,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpClient.cs,ReadInt,The length of the statement  "            return _inerStream.ReadByte() | (_inerStream.ReadByte() << 8) | (_inerStream.ReadByte() << 16) | (_inerStream.ReadByte() << 24); " is 128.
Complex Conditional,CameraControl.Devices,CameraDeviceManager,C:\repos\dukus_digiCamControl\CameraControl.Devices\CameraDeviceManager.cs,ConnectToCamera,The conditional expression  "(devInfo.Type == WiaDeviceType.CameraDeviceType || devInfo.Type == WiaDeviceType.VideoDeviceType)                      && (nativeDriver == null || DisableNativeDrivers || noDriversDetected) && retries < 3"  is complex.
Complex Conditional,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The conditional expression  "Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !NormalShutterSpeed.Values.Contains("Bulb")"  is complex.
Complex Conditional,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The conditional expression  "Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !MovieShutterSpeed.Values.Contains("Bulb")"  is complex.
Empty Catch Block,CameraControl.Devices,BaseCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseCameraDevice.cs,ToStringCameraData,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,GetObjects,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetLiveViewImage,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Canon,CanonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,_timer_Elapsed,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Canon,CanonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,getEvent,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Classes,AsyncObservableCollection<T>,C:\repos\dukus_digiCamControl\CameraControl.Devices\Classes\AsyncObservableCollection.cs,RaiseCollectionChanged,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Classes,AsyncObservableCollection<T>,C:\repos\dukus_digiCamControl\CameraControl.Devices\Classes\AsyncObservableCollection.cs,OnCollectionChanged,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,_timer_Elapsed,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitAutoIsoHight,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitPictControl,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitMode,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitCompressionSetting,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureMeteringMode,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetEvent,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetEvent,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonD60,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD60.cs,InitCompressionSetting,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonD80,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD80.cs,InitCompressionSetting,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Others,WiaCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\WiaCameraDevice.cs,ExposureMeteringMode_ValueChanged,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Others,WiaCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\WiaCameraDevice.cs,CompressionSetting_ValueChanged,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Others,WiaCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\WiaCameraDevice.cs,ExposureCompensation_ValueChanged,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Others,WiaCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\WiaCameraDevice.cs,WhiteBalance_ValueChanged,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Others,WiaCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\WiaCameraDevice.cs,ShutterSpeed_ValueChanged,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Others,WiaCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\WiaCameraDevice.cs,IsoNumber_ValueChanged,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Others,WiaCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\WiaCameraDevice.cs,FNumber_ValueChanged,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Others,YiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,Protocol_DataReceiverd,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Others,YiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,GetObjects,The method has an empty catch block.
Empty Catch Block,PanonoTest,PanonoCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\PanonoCamera.cs,Ws_OnMessage,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,InitMode,The method has an empty catch block.
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,GetObjects,The following statement contains a magic number: for (int i = 0; i < objCount; i++)              {                  DeviceObject deviceObject = new DeviceObject();                  uint handle = BitConverter.ToUInt32(response.Data' 4 * i + 4);                  deviceObject.Handle = handle;                  MTPDataResponse objectdata = ExecuteReadDataEx(CONST_CMD_GetObjectInfo' handle);                  if (objectdata.Data != null)                  {                      uint objFormat = BitConverter.ToUInt16(objectdata.Data' 4);                      if (objFormat == 0x3000 || objFormat == 0x3801 || objFormat == 0x3800)                      {                          deviceObject.FileName = Encoding.Unicode.GetString(objectdata.Data' 53' 12 * 2);                          if (deviceObject.FileName.Contains("\0"))                              deviceObject.FileName = deviceObject.FileName.Split('\0')[0];                          try                          {                              string datesrt = Encoding.Unicode.GetString(objectdata.Data' 53 + (12 * 2) + 3' 30);                              //datesrt = datesrt.Replace("T"' "");                              DateTime date = DateTime.MinValue;                              if (DateTime.TryParseExact(datesrt' "yyyyMMddTHHmmss"' CultureInfo.InvariantCulture'                                                         DateTimeStyles.None' out date))                              {                                  deviceObject.FileDate = date;                              }                          }                          catch (Exception)                          {                          }                            if (loadThumbs)                          {                              MTPDataResponse thumbdata = ExecuteReadDataEx(CONST_CMD_GetThumb' handle);                              deviceObject.ThumbData = thumbdata.Data;                          }                          res.Add(deviceObject);                      }                  }              }
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,GetObjects,The following statement contains a magic number: for (int i = 0; i < objCount; i++)              {                  DeviceObject deviceObject = new DeviceObject();                  uint handle = BitConverter.ToUInt32(response.Data' 4 * i + 4);                  deviceObject.Handle = handle;                  MTPDataResponse objectdata = ExecuteReadDataEx(CONST_CMD_GetObjectInfo' handle);                  if (objectdata.Data != null)                  {                      uint objFormat = BitConverter.ToUInt16(objectdata.Data' 4);                      if (objFormat == 0x3000 || objFormat == 0x3801 || objFormat == 0x3800)                      {                          deviceObject.FileName = Encoding.Unicode.GetString(objectdata.Data' 53' 12 * 2);                          if (deviceObject.FileName.Contains("\0"))                              deviceObject.FileName = deviceObject.FileName.Split('\0')[0];                          try                          {                              string datesrt = Encoding.Unicode.GetString(objectdata.Data' 53 + (12 * 2) + 3' 30);                              //datesrt = datesrt.Replace("T"' "");                              DateTime date = DateTime.MinValue;                              if (DateTime.TryParseExact(datesrt' "yyyyMMddTHHmmss"' CultureInfo.InvariantCulture'                                                         DateTimeStyles.None' out date))                              {                                  deviceObject.FileDate = date;                              }                          }                          catch (Exception)                          {                          }                            if (loadThumbs)                          {                              MTPDataResponse thumbdata = ExecuteReadDataEx(CONST_CMD_GetThumb' handle);                              deviceObject.ThumbData = thumbdata.Data;                          }                          res.Add(deviceObject);                      }                  }              }
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,GetObjects,The following statement contains a magic number: for (int i = 0; i < objCount; i++)              {                  DeviceObject deviceObject = new DeviceObject();                  uint handle = BitConverter.ToUInt32(response.Data' 4 * i + 4);                  deviceObject.Handle = handle;                  MTPDataResponse objectdata = ExecuteReadDataEx(CONST_CMD_GetObjectInfo' handle);                  if (objectdata.Data != null)                  {                      uint objFormat = BitConverter.ToUInt16(objectdata.Data' 4);                      if (objFormat == 0x3000 || objFormat == 0x3801 || objFormat == 0x3800)                      {                          deviceObject.FileName = Encoding.Unicode.GetString(objectdata.Data' 53' 12 * 2);                          if (deviceObject.FileName.Contains("\0"))                              deviceObject.FileName = deviceObject.FileName.Split('\0')[0];                          try                          {                              string datesrt = Encoding.Unicode.GetString(objectdata.Data' 53 + (12 * 2) + 3' 30);                              //datesrt = datesrt.Replace("T"' "");                              DateTime date = DateTime.MinValue;                              if (DateTime.TryParseExact(datesrt' "yyyyMMddTHHmmss"' CultureInfo.InvariantCulture'                                                         DateTimeStyles.None' out date))                              {                                  deviceObject.FileDate = date;                              }                          }                          catch (Exception)                          {                          }                            if (loadThumbs)                          {                              MTPDataResponse thumbdata = ExecuteReadDataEx(CONST_CMD_GetThumb' handle);                              deviceObject.ThumbData = thumbdata.Data;                          }                          res.Add(deviceObject);                      }                  }              }
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,GetObjects,The following statement contains a magic number: for (int i = 0; i < objCount; i++)              {                  DeviceObject deviceObject = new DeviceObject();                  uint handle = BitConverter.ToUInt32(response.Data' 4 * i + 4);                  deviceObject.Handle = handle;                  MTPDataResponse objectdata = ExecuteReadDataEx(CONST_CMD_GetObjectInfo' handle);                  if (objectdata.Data != null)                  {                      uint objFormat = BitConverter.ToUInt16(objectdata.Data' 4);                      if (objFormat == 0x3000 || objFormat == 0x3801 || objFormat == 0x3800)                      {                          deviceObject.FileName = Encoding.Unicode.GetString(objectdata.Data' 53' 12 * 2);                          if (deviceObject.FileName.Contains("\0"))                              deviceObject.FileName = deviceObject.FileName.Split('\0')[0];                          try                          {                              string datesrt = Encoding.Unicode.GetString(objectdata.Data' 53 + (12 * 2) + 3' 30);                              //datesrt = datesrt.Replace("T"' "");                              DateTime date = DateTime.MinValue;                              if (DateTime.TryParseExact(datesrt' "yyyyMMddTHHmmss"' CultureInfo.InvariantCulture'                                                         DateTimeStyles.None' out date))                              {                                  deviceObject.FileDate = date;                              }                          }                          catch (Exception)                          {                          }                            if (loadThumbs)                          {                              MTPDataResponse thumbdata = ExecuteReadDataEx(CONST_CMD_GetThumb' handle);                              deviceObject.ThumbData = thumbdata.Data;                          }                          res.Add(deviceObject);                      }                  }              }
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,GetObjects,The following statement contains a magic number: for (int i = 0; i < objCount; i++)              {                  DeviceObject deviceObject = new DeviceObject();                  uint handle = BitConverter.ToUInt32(response.Data' 4 * i + 4);                  deviceObject.Handle = handle;                  MTPDataResponse objectdata = ExecuteReadDataEx(CONST_CMD_GetObjectInfo' handle);                  if (objectdata.Data != null)                  {                      uint objFormat = BitConverter.ToUInt16(objectdata.Data' 4);                      if (objFormat == 0x3000 || objFormat == 0x3801 || objFormat == 0x3800)                      {                          deviceObject.FileName = Encoding.Unicode.GetString(objectdata.Data' 53' 12 * 2);                          if (deviceObject.FileName.Contains("\0"))                              deviceObject.FileName = deviceObject.FileName.Split('\0')[0];                          try                          {                              string datesrt = Encoding.Unicode.GetString(objectdata.Data' 53 + (12 * 2) + 3' 30);                              //datesrt = datesrt.Replace("T"' "");                              DateTime date = DateTime.MinValue;                              if (DateTime.TryParseExact(datesrt' "yyyyMMddTHHmmss"' CultureInfo.InvariantCulture'                                                         DateTimeStyles.None' out date))                              {                                  deviceObject.FileDate = date;                              }                          }                          catch (Exception)                          {                          }                            if (loadThumbs)                          {                              MTPDataResponse thumbdata = ExecuteReadDataEx(CONST_CMD_GetThumb' handle);                              deviceObject.ThumbData = thumbdata.Data;                          }                          res.Add(deviceObject);                      }                  }              }
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,GetObjects,The following statement contains a magic number: for (int i = 0; i < objCount; i++)              {                  DeviceObject deviceObject = new DeviceObject();                  uint handle = BitConverter.ToUInt32(response.Data' 4 * i + 4);                  deviceObject.Handle = handle;                  MTPDataResponse objectdata = ExecuteReadDataEx(CONST_CMD_GetObjectInfo' handle);                  if (objectdata.Data != null)                  {                      uint objFormat = BitConverter.ToUInt16(objectdata.Data' 4);                      if (objFormat == 0x3000 || objFormat == 0x3801 || objFormat == 0x3800)                      {                          deviceObject.FileName = Encoding.Unicode.GetString(objectdata.Data' 53' 12 * 2);                          if (deviceObject.FileName.Contains("\0"))                              deviceObject.FileName = deviceObject.FileName.Split('\0')[0];                          try                          {                              string datesrt = Encoding.Unicode.GetString(objectdata.Data' 53 + (12 * 2) + 3' 30);                              //datesrt = datesrt.Replace("T"' "");                              DateTime date = DateTime.MinValue;                              if (DateTime.TryParseExact(datesrt' "yyyyMMddTHHmmss"' CultureInfo.InvariantCulture'                                                         DateTimeStyles.None' out date))                              {                                  deviceObject.FileDate = date;                              }                          }                          catch (Exception)                          {                          }                            if (loadThumbs)                          {                              MTPDataResponse thumbdata = ExecuteReadDataEx(CONST_CMD_GetThumb' handle);                              deviceObject.ThumbData = thumbdata.Data;                          }                          res.Add(deviceObject);                      }                  }              }
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,GetObjects,The following statement contains a magic number: for (int i = 0; i < objCount; i++)              {                  DeviceObject deviceObject = new DeviceObject();                  uint handle = BitConverter.ToUInt32(response.Data' 4 * i + 4);                  deviceObject.Handle = handle;                  MTPDataResponse objectdata = ExecuteReadDataEx(CONST_CMD_GetObjectInfo' handle);                  if (objectdata.Data != null)                  {                      uint objFormat = BitConverter.ToUInt16(objectdata.Data' 4);                      if (objFormat == 0x3000 || objFormat == 0x3801 || objFormat == 0x3800)                      {                          deviceObject.FileName = Encoding.Unicode.GetString(objectdata.Data' 53' 12 * 2);                          if (deviceObject.FileName.Contains("\0"))                              deviceObject.FileName = deviceObject.FileName.Split('\0')[0];                          try                          {                              string datesrt = Encoding.Unicode.GetString(objectdata.Data' 53 + (12 * 2) + 3' 30);                              //datesrt = datesrt.Replace("T"' "");                              DateTime date = DateTime.MinValue;                              if (DateTime.TryParseExact(datesrt' "yyyyMMddTHHmmss"' CultureInfo.InvariantCulture'                                                         DateTimeStyles.None' out date))                              {                                  deviceObject.FileDate = date;                              }                          }                          catch (Exception)                          {                          }                            if (loadThumbs)                          {                              MTPDataResponse thumbdata = ExecuteReadDataEx(CONST_CMD_GetThumb' handle);                              deviceObject.ThumbData = thumbdata.Data;                          }                          res.Add(deviceObject);                      }                  }              }
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,GetObjects,The following statement contains a magic number: for (int i = 0; i < objCount; i++)              {                  DeviceObject deviceObject = new DeviceObject();                  uint handle = BitConverter.ToUInt32(response.Data' 4 * i + 4);                  deviceObject.Handle = handle;                  MTPDataResponse objectdata = ExecuteReadDataEx(CONST_CMD_GetObjectInfo' handle);                  if (objectdata.Data != null)                  {                      uint objFormat = BitConverter.ToUInt16(objectdata.Data' 4);                      if (objFormat == 0x3000 || objFormat == 0x3801 || objFormat == 0x3800)                      {                          deviceObject.FileName = Encoding.Unicode.GetString(objectdata.Data' 53' 12 * 2);                          if (deviceObject.FileName.Contains("\0"))                              deviceObject.FileName = deviceObject.FileName.Split('\0')[0];                          try                          {                              string datesrt = Encoding.Unicode.GetString(objectdata.Data' 53 + (12 * 2) + 3' 30);                              //datesrt = datesrt.Replace("T"' "");                              DateTime date = DateTime.MinValue;                              if (DateTime.TryParseExact(datesrt' "yyyyMMddTHHmmss"' CultureInfo.InvariantCulture'                                                         DateTimeStyles.None' out date))                              {                                  deviceObject.FileDate = date;                              }                          }                          catch (Exception)                          {                          }                            if (loadThumbs)                          {                              MTPDataResponse thumbdata = ExecuteReadDataEx(CONST_CMD_GetThumb' handle);                              deviceObject.ThumbData = thumbdata.Data;                          }                          res.Add(deviceObject);                      }                  }              }
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,GetObjects,The following statement contains a magic number: for (int i = 0; i < objCount; i++)              {                  DeviceObject deviceObject = new DeviceObject();                  uint handle = BitConverter.ToUInt32(response.Data' 4 * i + 4);                  deviceObject.Handle = handle;                  MTPDataResponse objectdata = ExecuteReadDataEx(CONST_CMD_GetObjectInfo' handle);                  if (objectdata.Data != null)                  {                      uint objFormat = BitConverter.ToUInt16(objectdata.Data' 4);                      if (objFormat == 0x3000 || objFormat == 0x3801 || objFormat == 0x3800)                      {                          deviceObject.FileName = Encoding.Unicode.GetString(objectdata.Data' 53' 12 * 2);                          if (deviceObject.FileName.Contains("\0"))                              deviceObject.FileName = deviceObject.FileName.Split('\0')[0];                          try                          {                              string datesrt = Encoding.Unicode.GetString(objectdata.Data' 53 + (12 * 2) + 3' 30);                              //datesrt = datesrt.Replace("T"' "");                              DateTime date = DateTime.MinValue;                              if (DateTime.TryParseExact(datesrt' "yyyyMMddTHHmmss"' CultureInfo.InvariantCulture'                                                         DateTimeStyles.None' out date))                              {                                  deviceObject.FileDate = date;                              }                          }                          catch (Exception)                          {                          }                            if (loadThumbs)                          {                              MTPDataResponse thumbdata = ExecuteReadDataEx(CONST_CMD_GetThumb' handle);                              deviceObject.ThumbData = thumbdata.Data;                          }                          res.Add(deviceObject);                      }                  }              }
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,GetObjects,The following statement contains a magic number: for (int i = 0; i < objCount; i++)              {                  DeviceObject deviceObject = new DeviceObject();                  uint handle = BitConverter.ToUInt32(response.Data' 4 * i + 4);                  deviceObject.Handle = handle;                  MTPDataResponse objectdata = ExecuteReadDataEx(CONST_CMD_GetObjectInfo' handle);                  if (objectdata.Data != null)                  {                      uint objFormat = BitConverter.ToUInt16(objectdata.Data' 4);                      if (objFormat == 0x3000 || objFormat == 0x3801 || objFormat == 0x3800)                      {                          deviceObject.FileName = Encoding.Unicode.GetString(objectdata.Data' 53' 12 * 2);                          if (deviceObject.FileName.Contains("\0"))                              deviceObject.FileName = deviceObject.FileName.Split('\0')[0];                          try                          {                              string datesrt = Encoding.Unicode.GetString(objectdata.Data' 53 + (12 * 2) + 3' 30);                              //datesrt = datesrt.Replace("T"' "");                              DateTime date = DateTime.MinValue;                              if (DateTime.TryParseExact(datesrt' "yyyyMMddTHHmmss"' CultureInfo.InvariantCulture'                                                         DateTimeStyles.None' out date))                              {                                  deviceObject.FileDate = date;                              }                          }                          catch (Exception)                          {                          }                            if (loadThumbs)                          {                              MTPDataResponse thumbdata = ExecuteReadDataEx(CONST_CMD_GetThumb' handle);                              deviceObject.ThumbData = thumbdata.Data;                          }                          res.Add(deviceObject);                      }                  }              }
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,GetObjects,The following statement contains a magic number: for (int i = 0; i < objCount; i++)              {                  DeviceObject deviceObject = new DeviceObject();                  uint handle = BitConverter.ToUInt32(response.Data' 4 * i + 4);                  deviceObject.Handle = handle;                  MTPDataResponse objectdata = ExecuteReadDataEx(CONST_CMD_GetObjectInfo' handle);                  if (objectdata.Data != null)                  {                      uint objFormat = BitConverter.ToUInt16(objectdata.Data' 4);                      if (objFormat == 0x3000 || objFormat == 0x3801 || objFormat == 0x3800)                      {                          deviceObject.FileName = Encoding.Unicode.GetString(objectdata.Data' 53' 12 * 2);                          if (deviceObject.FileName.Contains("\0"))                              deviceObject.FileName = deviceObject.FileName.Split('\0')[0];                          try                          {                              string datesrt = Encoding.Unicode.GetString(objectdata.Data' 53 + (12 * 2) + 3' 30);                              //datesrt = datesrt.Replace("T"' "");                              DateTime date = DateTime.MinValue;                              if (DateTime.TryParseExact(datesrt' "yyyyMMddTHHmmss"' CultureInfo.InvariantCulture'                                                         DateTimeStyles.None' out date))                              {                                  deviceObject.FileDate = date;                              }                          }                          catch (Exception)                          {                          }                            if (loadThumbs)                          {                              MTPDataResponse thumbdata = ExecuteReadDataEx(CONST_CMD_GetThumb' handle);                              deviceObject.ThumbData = thumbdata.Data;                          }                          res.Add(deviceObject);                      }                  }              }
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,TransferFile,The following statement contains a magic number: lock (Locker)              {                    string s = o as string;                  if (s != null)                  {                      ((StillImageDevice)StillImageDevice).SaveFile(s' stream);                      return;                  }                  int retryes = TransferRetries;                  _timer.Stop();                  MTPDataResponse result = new MTPDataResponse();                  //=================== managed file write                  do                  {                      try                      {                          //using (MemoryStream mStream = new MemoryStream())                          //{                                result = StillImageDevice.ExecuteReadBigData(CONST_CMD_GetObject' stream'                                  (total' current) =>                                  {                                      double i = (double) current / total;                                      TransferProgress =                                          Convert.ToUInt32(i * 100);                                  }' Convert.ToUInt32(o));                              //if (result != null && result.Data != null)                              //{                              //    stream.Write(result.Data' 0' result.Data.Length);                              //}                              //stream.Write(mStream.ToArray()' 0' (int)mStream.Length);                              break;                          //}                      }                      catch (COMException)                      {                          Log.Error("Transfer error code retrying " + result.ErrorCode.ToString("X"));                          Thread.Sleep(200);                          retryes--;                      }                    } while (retryes > 0);                    //==================================================================                  //=================== direct file write                  //StillImageDevice.ExecuteReadBigDataWriteToFile(CONST_CMD_GetObject'                  //                                                     Convert.ToInt32(o)' -1'                  //                                                     (total' current) =>                  //                                                     {                  //                                                       double i = (double)current / total;                  //                                                       TransferProgress =                  //                                                         Convert.ToUInt32(i * 100);                    //                                                     }' filename);                    //==================================================================                  _timer.Start();                  TransferProgress = 0;              }
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,TransferFile,The following statement contains a magic number: lock (Locker)              {                    string s = o as string;                  if (s != null)                  {                      ((StillImageDevice)StillImageDevice).SaveFile(s' stream);                      return;                  }                  int retryes = TransferRetries;                  _timer.Stop();                  MTPDataResponse result = new MTPDataResponse();                  //=================== managed file write                  do                  {                      try                      {                          //using (MemoryStream mStream = new MemoryStream())                          //{                                result = StillImageDevice.ExecuteReadBigData(CONST_CMD_GetObject' stream'                                  (total' current) =>                                  {                                      double i = (double) current / total;                                      TransferProgress =                                          Convert.ToUInt32(i * 100);                                  }' Convert.ToUInt32(o));                              //if (result != null && result.Data != null)                              //{                              //    stream.Write(result.Data' 0' result.Data.Length);                              //}                              //stream.Write(mStream.ToArray()' 0' (int)mStream.Length);                              break;                          //}                      }                      catch (COMException)                      {                          Log.Error("Transfer error code retrying " + result.ErrorCode.ToString("X"));                          Thread.Sleep(200);                          retryes--;                      }                    } while (retryes > 0);                    //==================================================================                  //=================== direct file write                  //StillImageDevice.ExecuteReadBigDataWriteToFile(CONST_CMD_GetObject'                  //                                                     Convert.ToInt32(o)' -1'                  //                                                     (total' current) =>                  //                                                     {                  //                                                       double i = (double)current / total;                  //                                                       TransferProgress =                  //                                                         Convert.ToUInt32(i * 100);                    //                                                     }' filename);                    //==================================================================                  _timer.Start();                  TransferProgress = 0;              }
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,FormatStorage,The following statement contains a magic number: if (response.Data.Length > 4)              {                  int objCount = BitConverter.ToInt32(response.Data' 0);                  for (int i = 0; i < objCount; i++)                  {                      uint handle = BitConverter.ToUInt32(response.Data' 4 * i + 4);                      ErrorCodes.GetException(ExecuteWithNoData(CONST_CMD_FormatStore' handle));                  }              }
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,FormatStorage,The following statement contains a magic number: if (response.Data.Length > 4)              {                  int objCount = BitConverter.ToInt32(response.Data' 0);                  for (int i = 0; i < objCount; i++)                  {                      uint handle = BitConverter.ToUInt32(response.Data' 4 * i + 4);                      ErrorCodes.GetException(ExecuteWithNoData(CONST_CMD_FormatStore' handle));                  }              }
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,FormatStorage,The following statement contains a magic number: if (response.Data.Length > 4)              {                  int objCount = BitConverter.ToInt32(response.Data' 0);                  for (int i = 0; i < objCount; i++)                  {                      uint handle = BitConverter.ToUInt32(response.Data' 4 * i + 4);                      ErrorCodes.GetException(ExecuteWithNoData(CONST_CMD_FormatStore' handle));                  }              }
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,SetProperty,The following statement contains a magic number: do              {                  if (retrynum > 5)                  {                      return;                  }                  try                  {                      retry = false;                      uint resp = StillImageDevice.ExecuteWriteData(code' data' param1);                      if (resp != 0 || resp != ErrorCodes.MTP_OK)                      {                          //Console.WriteLine("Retry ...." + resp.ToString("X"));                          if (resp == ErrorCodes.MTP_Device_Busy || resp == 0x800700AA)                          {                              Thread.Sleep(50);                              retry = true;                              retrynum++;                          }                          else                          {                              ErrorCodes.GetException(resp);                          }                      }                  }                  catch (Exception exception)                  {                      Log.Debug("Error set property :" + param1.ToString("X")' exception);                  }              } while (retry);
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,SetProperty,The following statement contains a magic number: do              {                  if (retrynum > 5)                  {                      return;                  }                  try                  {                      retry = false;                      uint resp = StillImageDevice.ExecuteWriteData(code' data' param1);                      if (resp != 0 || resp != ErrorCodes.MTP_OK)                      {                          //Console.WriteLine("Retry ...." + resp.ToString("X"));                          if (resp == ErrorCodes.MTP_Device_Busy || resp == 0x800700AA)                          {                              Thread.Sleep(50);                              retry = true;                              retrynum++;                          }                          else                          {                              ErrorCodes.GetException(resp);                          }                      }                  }                  catch (Exception exception)                  {                      Log.Debug("Error set property :" + param1.ToString("X")' exception);                  }              } while (retry);
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,SetProperty,The following statement contains a magic number: do              {                  if (retrynum > 5)                  {                      return;                  }                  try                  {                      retry = false;                      uint resp = StillImageDevice.ExecuteWriteData(code' data' param1' param2);                      if (resp != 0 || resp != ErrorCodes.MTP_OK)                      {                          //Console.WriteLine("Retry ...." + resp.ToString("X"));                          if (resp == ErrorCodes.MTP_Device_Busy || resp == 0x800700AA)                          {                              Thread.Sleep(50);                              retry = true;                              retrynum++;                          }                          else                          {                              ErrorCodes.GetException(resp);                          }                      }                  }                  catch (Exception exception)                  {                      Log.Debug("Error set property :" + param1.ToString("X")' exception);                  }              } while (retry);
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,SetProperty,The following statement contains a magic number: do              {                  if (retrynum > 5)                  {                      return;                  }                  try                  {                      retry = false;                      uint resp = StillImageDevice.ExecuteWriteData(code' data' param1' param2);                      if (resp != 0 || resp != ErrorCodes.MTP_OK)                      {                          //Console.WriteLine("Retry ...." + resp.ToString("X"));                          if (resp == ErrorCodes.MTP_Device_Busy || resp == 0x800700AA)                          {                              Thread.Sleep(50);                              retry = true;                              retrynum++;                          }                          else                          {                              ErrorCodes.GetException(resp);                          }                      }                  }                  catch (Exception exception)                  {                      Log.Debug("Error set property :" + param1.ToString("X")' exception);                  }              } while (retry);
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,SetProperty,The following statement contains a magic number: do              {                  if (retrynum > 5)                  {                      return;                  }                  try                  {                      retry = false;                      uint resp = StillImageDevice.ExecuteWriteData(code' data' param1' param2' param3);                      if (resp != 0 || resp != ErrorCodes.MTP_OK)                      {                          //Console.WriteLine("Retry ...." + resp.ToString("X"));                          if (resp == ErrorCodes.MTP_Device_Busy || resp == 0x800700AA)                          {                              Thread.Sleep(100);                              retry = true;                              retrynum++;                          }                          else                          {                              ErrorCodes.GetException(resp);                          }                      }                  }                  catch (Exception exception)                  {                      Log.Debug("Error set property :" + param1.ToString("X")' exception);                  }              } while (retry);
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,SetProperty,The following statement contains a magic number: do              {                  if (retrynum > 5)                  {                      return;                  }                  try                  {                      retry = false;                      uint resp = StillImageDevice.ExecuteWriteData(code' data' param1' param2' param3);                      if (resp != 0 || resp != ErrorCodes.MTP_OK)                      {                          //Console.WriteLine("Retry ...." + resp.ToString("X"));                          if (resp == ErrorCodes.MTP_Device_Busy || resp == 0x800700AA)                          {                              Thread.Sleep(100);                              retry = true;                              retrynum++;                          }                          else                          {                              ErrorCodes.GetException(resp);                          }                      }                  }                  catch (Exception exception)                  {                      Log.Debug("Error set property :" + param1.ToString("X")' exception);                  }              } while (retry);
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,ToInt16,The following statement contains a magic number: int i = (short)(value[startIndex] << 8 | value[startIndex + 1]);
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,ToUInt16,The following statement contains a magic number: uint i = (uint)(value[startIndex] << 8 | value[startIndex + 1]);
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,ToInt32,The following statement contains a magic number: int i = (value[startIndex] << 24 | value[startIndex + 1] << 16 | value[startIndex + 2] << 8 | value[startIndex + 3]);
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,ToInt32,The following statement contains a magic number: int i = (value[startIndex] << 24 | value[startIndex + 1] << 16 | value[startIndex + 2] << 8 | value[startIndex + 3]);
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,ToInt32,The following statement contains a magic number: int i = (value[startIndex] << 24 | value[startIndex + 1] << 16 | value[startIndex + 2] << 8 | value[startIndex + 3]);
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,ToInt32,The following statement contains a magic number: int i = (value[startIndex] << 24 | value[startIndex + 1] << 16 | value[startIndex + 2] << 8 | value[startIndex + 3]);
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,ToInt32,The following statement contains a magic number: int i = (value[startIndex] << 24 | value[startIndex + 1] << 16 | value[startIndex + 2] << 8 | value[startIndex + 3]);
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,ToDeciaml,The following statement contains a magic number: int d = ToUInt16(value' startIndex + 2);
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The following statement contains a magic number: int index = 2 + 4 + 2;
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The following statement contains a magic number: int index = 2 + 4 + 2;
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The following statement contains a magic number: int index = 2 + 4 + 2;
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The following statement contains a magic number: index += vendorDescCount * 2;
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The following statement contains a magic number: index += 3;
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The following statement contains a magic number: for (int i = 0; i < comandsCount; i++)              {                  index += 2;                  deviceInfo.AvaiableCommands.Add(new XmlCommandDescriptor() { Code = BitConverter.ToUInt16(res.Data' index) });              }
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The following statement contains a magic number: for (int i = 0; i < eventcount; i++)              {                  index += 2;                  deviceInfo.AvaiableEvents.Add(new XmlEventDescriptor() { Code = BitConverter.ToUInt16(res.Data' index) });              }
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The following statement contains a magic number: for (int i = 0; i < propertycount; i++)              {                  index += 2;                  deviceInfo.AvaiableProperties.Add(new XmlPropertyDescriptor() { Code = BitConverter.ToUInt16(res.Data' index) });              }
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The following statement contains a magic number: try              {                  MTPDataResponse vendor_res = ExecuteReadDataEx(0x90CA);                  if (vendor_res.Data.Length > 0)                  {                      index = 0;                      propertycount = vendor_res.Data[index];                      index += 2;                      for (int i = 0; i < propertycount; i++)                      {                          index += 2;                          deviceInfo.AvaiableProperties.Add(new XmlPropertyDescriptor() { Code = BitConverter.ToUInt16(vendor_res.Data' index) });                      }                  }              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices,BaseMTPCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The following statement contains a magic number: try              {                  MTPDataResponse vendor_res = ExecuteReadDataEx(0x90CA);                  if (vendor_res.Data.Length > 0)                  {                      index = 0;                      propertycount = vendor_res.Data[index];                      index += 2;                      for (int i = 0; i < propertycount; i++)                      {                          index += 2;                          deviceInfo.AvaiableProperties.Add(new XmlPropertyDescriptor() { Code = BitConverter.ToUInt16(vendor_res.Data' index) });                      }                  }              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices,CameraDeviceManager,C:\repos\dukus_digiCamControl\CameraControl.Devices\CameraDeviceManager.cs,ConnectToServer,The following statement contains a magic number: if (type == 0)              {                  int port = 15740;                  string ip = s;                  if (s.Contains(":"))                  {                      ip = s.Split(':')[0];                      int.TryParse(s.Split(':')[1]' out port);                  }                  ConnectDevicesPtpIp(ip' port);              }
Magic Number,CameraControl.Devices,CameraDeviceManager,C:\repos\dukus_digiCamControl\CameraControl.Devices\CameraDeviceManager.cs,ConnectToServer,The following statement contains a magic number: if (type == 1)              {                  int port = 4757;                  string ip = s;                  if (s.Contains(":"))                  {                      ip = s.Split(':')[0];                      int.TryParse(s.Split(':')[1]' out port);                  }                  ConnectDevicesDDServer(ip' port);              }
Magic Number,CameraControl.Devices,CameraDeviceManager,C:\repos\dukus_digiCamControl\CameraControl.Devices\CameraDeviceManager.cs,ConnectDevicesPtpIp,The following statement contains a magic number: try              {                  _connectionInProgress = true;                  _deviceEnumerator.RemoveDisconnected();                    PtpIpClient client = new PtpIpClient();                  if (!client.Open(ip' 15740))                      throw new Exception("No server was found!");                  PtpIpProtocol protocol = new PtpIpProtocol(client);                  protocol.ExecuteWithNoData(0x1002' 1);                    if (GetNativeDriver(protocol.Model) != null)                  {                      ICameraDevice cameraDevice;                      DeviceDescriptor descriptor = new DeviceDescriptor { WpdId = "ptpip" };                      cameraDevice = (ICameraDevice)Activator.CreateInstance(GetNativeDriver(protocol.Model));                      descriptor.StillImageDevice = protocol;                        //cameraDevice.SerialNumber = StaticHelper.GetSerial(portableDevice.DeviceId);                      cameraDevice.Init(descriptor);                      ConnectedDevices.Add(cameraDevice);                      NewCameraConnected(cameraDevice);                        descriptor.CameraDevice = cameraDevice;                      _deviceEnumerator.Add(descriptor);                  }                  else                  {                      throw new Exception("Not Supported device " + protocol.Model);                  }              }              finally              {                  _connectionInProgress = false;              }
Magic Number,CameraControl.Devices,CameraDeviceManager,C:\repos\dukus_digiCamControl\CameraControl.Devices\CameraDeviceManager.cs,ConnectToCamera,The following statement contains a magic number: foreach (IDeviceInfo devInfo in new DeviceManager().DeviceInfos)              {                  // Look for CameraDeviceType devices                  string model = devInfo.Properties["Name"].get_Value();                  // skip canon cameras                   //if (!string.IsNullOrEmpty(model) && model.Contains("Canon"))                  //    continue;                  if (getDeviceDescription(model) != null)                      continue;                    var nativeDriver = GetNativeDriver(model);                  ret = nativeDriver != null;                    if ((devInfo.Type == WiaDeviceType.CameraDeviceType || devInfo.Type == WiaDeviceType.VideoDeviceType)                      && (nativeDriver == null || DisableNativeDrivers || noDriversDetected) && retries < 3)                  {                      do                      {                          Log.Debug("Wia Camera Found: " + model);                          try                          {                              GetWiaIDevice(devInfo);                              retries = 4;                              ret = true;                          }                          catch (Exception exception)                          {                              Log.Error("Unable to connect to the camera"' exception);                              retries++;                              if (retries < 3)                              {                                  Log.Debug("Retrying");                                  StaticHelper.Instance.SystemMessage = "Unable to connect to the camera. Retrying";                              }                              else                              {                                  StaticHelper.Instance.SystemMessage =                                      "Unable to connect to the camera. Please reconnect your camera !";                              }                              Thread.Sleep(1000);                          }                      } while (retries < 3);                  }              }
Magic Number,CameraControl.Devices,CameraDeviceManager,C:\repos\dukus_digiCamControl\CameraControl.Devices\CameraDeviceManager.cs,ConnectToCamera,The following statement contains a magic number: foreach (IDeviceInfo devInfo in new DeviceManager().DeviceInfos)              {                  // Look for CameraDeviceType devices                  string model = devInfo.Properties["Name"].get_Value();                  // skip canon cameras                   //if (!string.IsNullOrEmpty(model) && model.Contains("Canon"))                  //    continue;                  if (getDeviceDescription(model) != null)                      continue;                    var nativeDriver = GetNativeDriver(model);                  ret = nativeDriver != null;                    if ((devInfo.Type == WiaDeviceType.CameraDeviceType || devInfo.Type == WiaDeviceType.VideoDeviceType)                      && (nativeDriver == null || DisableNativeDrivers || noDriversDetected) && retries < 3)                  {                      do                      {                          Log.Debug("Wia Camera Found: " + model);                          try                          {                              GetWiaIDevice(devInfo);                              retries = 4;                              ret = true;                          }                          catch (Exception exception)                          {                              Log.Error("Unable to connect to the camera"' exception);                              retries++;                              if (retries < 3)                              {                                  Log.Debug("Retrying");                                  StaticHelper.Instance.SystemMessage = "Unable to connect to the camera. Retrying";                              }                              else                              {                                  StaticHelper.Instance.SystemMessage =                                      "Unable to connect to the camera. Please reconnect your camera !";                              }                              Thread.Sleep(1000);                          }                      } while (retries < 3);                  }              }
Magic Number,CameraControl.Devices,CameraDeviceManager,C:\repos\dukus_digiCamControl\CameraControl.Devices\CameraDeviceManager.cs,ConnectToCamera,The following statement contains a magic number: foreach (IDeviceInfo devInfo in new DeviceManager().DeviceInfos)              {                  // Look for CameraDeviceType devices                  string model = devInfo.Properties["Name"].get_Value();                  // skip canon cameras                   //if (!string.IsNullOrEmpty(model) && model.Contains("Canon"))                  //    continue;                  if (getDeviceDescription(model) != null)                      continue;                    var nativeDriver = GetNativeDriver(model);                  ret = nativeDriver != null;                    if ((devInfo.Type == WiaDeviceType.CameraDeviceType || devInfo.Type == WiaDeviceType.VideoDeviceType)                      && (nativeDriver == null || DisableNativeDrivers || noDriversDetected) && retries < 3)                  {                      do                      {                          Log.Debug("Wia Camera Found: " + model);                          try                          {                              GetWiaIDevice(devInfo);                              retries = 4;                              ret = true;                          }                          catch (Exception exception)                          {                              Log.Error("Unable to connect to the camera"' exception);                              retries++;                              if (retries < 3)                              {                                  Log.Debug("Retrying");                                  StaticHelper.Instance.SystemMessage = "Unable to connect to the camera. Retrying";                              }                              else                              {                                  StaticHelper.Instance.SystemMessage =                                      "Unable to connect to the camera. Please reconnect your camera !";                              }                              Thread.Sleep(1000);                          }                      } while (retries < 3);                  }              }
Magic Number,CameraControl.Devices,CameraDeviceManager,C:\repos\dukus_digiCamControl\CameraControl.Devices\CameraDeviceManager.cs,ConnectToCamera,The following statement contains a magic number: foreach (IDeviceInfo devInfo in new DeviceManager().DeviceInfos)              {                  // Look for CameraDeviceType devices                  string model = devInfo.Properties["Name"].get_Value();                  // skip canon cameras                   //if (!string.IsNullOrEmpty(model) && model.Contains("Canon"))                  //    continue;                  if (getDeviceDescription(model) != null)                      continue;                    var nativeDriver = GetNativeDriver(model);                  ret = nativeDriver != null;                    if ((devInfo.Type == WiaDeviceType.CameraDeviceType || devInfo.Type == WiaDeviceType.VideoDeviceType)                      && (nativeDriver == null || DisableNativeDrivers || noDriversDetected) && retries < 3)                  {                      do                      {                          Log.Debug("Wia Camera Found: " + model);                          try                          {                              GetWiaIDevice(devInfo);                              retries = 4;                              ret = true;                          }                          catch (Exception exception)                          {                              Log.Error("Unable to connect to the camera"' exception);                              retries++;                              if (retries < 3)                              {                                  Log.Debug("Retrying");                                  StaticHelper.Instance.SystemMessage = "Unable to connect to the camera. Retrying";                              }                              else                              {                                  StaticHelper.Instance.SystemMessage =                                      "Unable to connect to the camera. Please reconnect your camera !";                              }                              Thread.Sleep(1000);                          }                      } while (retries < 3);                  }              }
Magic Number,CameraControl.Devices,CameraDeviceManager,C:\repos\dukus_digiCamControl\CameraControl.Devices\CameraDeviceManager.cs,ConnectToCamera,The following statement contains a magic number: foreach (IDeviceInfo devInfo in new DeviceManager().DeviceInfos)              {                  // Look for CameraDeviceType devices                  string model = devInfo.Properties["Name"].get_Value();                  // skip canon cameras                   //if (!string.IsNullOrEmpty(model) && model.Contains("Canon"))                  //    continue;                  if (getDeviceDescription(model) != null)                      continue;                    var nativeDriver = GetNativeDriver(model);                  ret = nativeDriver != null;                    if ((devInfo.Type == WiaDeviceType.CameraDeviceType || devInfo.Type == WiaDeviceType.VideoDeviceType)                      && (nativeDriver == null || DisableNativeDrivers || noDriversDetected) && retries < 3)                  {                      do                      {                          Log.Debug("Wia Camera Found: " + model);                          try                          {                              GetWiaIDevice(devInfo);                              retries = 4;                              ret = true;                          }                          catch (Exception exception)                          {                              Log.Error("Unable to connect to the camera"' exception);                              retries++;                              if (retries < 3)                              {                                  Log.Debug("Retrying");                                  StaticHelper.Instance.SystemMessage = "Unable to connect to the camera. Retrying";                              }                              else                              {                                  StaticHelper.Instance.SystemMessage =                                      "Unable to connect to the camera. Please reconnect your camera !";                              }                              Thread.Sleep(1000);                          }                      } while (retries < 3);                  }              }
Magic Number,CameraControl.Devices,StaticHelper,C:\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetSerial,The following statement contains a magic number: if (pnpstring.Contains("#"))              {                  string[] s = pnpstring.Split('#');                  if (s.Length > 2)                  {                      ret = s[2];                  }              }
Magic Number,CameraControl.Devices,StaticHelper,C:\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetSerial,The following statement contains a magic number: if (pnpstring.Contains("#"))              {                  string[] s = pnpstring.Split('#');                  if (s.Length > 2)                  {                      ret = s[2];                  }              }
Magic Number,CameraControl.Devices,StaticHelper,C:\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,C:\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,C:\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,C:\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,C:\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,C:\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,C:\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,C:\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,C:\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,C:\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,C:\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,C:\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,C:\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,C:\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,C:\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,C:\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,C:\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetValue,The following statement contains a magic number: switch (dataLength)              {                  case 1:                      val = result.Data[index];                      break;                  case 2:                      val = BitConverter.ToUInt16(result.Data' index);                      break;                  case 4:                      val = BitConverter.ToUInt32(result.Data' index);                      break;                  default:                      val = (long) BitConverter.ToUInt64(result.Data' index);                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,C:\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetValue,The following statement contains a magic number: switch (dataLength)              {                  case 1:                      val = result.Data[index];                      break;                  case 2:                      val = BitConverter.ToUInt16(result.Data' index);                      break;                  case 4:                      val = BitConverter.ToUInt32(result.Data' index);                      break;                  default:                      val = (long) BitConverter.ToUInt64(result.Data' index);                      break;              }
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,Init,The following statement contains a magic number: try              {                  PreventShutDown = true;                  IsBusy = true;                  Camera = camera;                  Camera.IsErrorTolerantMode = false;                  DeviceName = Camera.DeviceDescription;                  PortName = camera.PortName;                  Manufacturer = "Canon Inc.";                  Camera.SetEventHandlers();                  Camera.EnsureOpenSession();                  Camera.Error += _camera_Error;                  Camera.Shutdown += _camera_Shutdown;                  Camera.LiveViewPaused += Camera_LiveViewPaused;                  Camera.LiveViewUpdate += Camera_LiveViewUpdate;                  Camera.PictureTaken += Camera_PictureTaken;                  Capabilities.Add(CapabilityEnum.Bulb);                  Capabilities.Add(CapabilityEnum.LiveView);                  Capabilities.Add(CapabilityEnum.CaptureInRam);                  Capabilities.Add(CapabilityEnum.RecordMovie);                  Capabilities.Add(CapabilityEnum.SimpleManualFocus);                  IsConnected = true;                  LoadProperties();                  Thread thread = new Thread(() =>                  {                      Thread.Sleep(200);                      OnCameraInitDone();                  });                  thread.Start();                  _shutdownTimer.Elapsed += _shutdownTimer_Elapsed;                  return true;              }              catch (Exception exception)              {                  Log.Error("Error initialize EOS camera object "' exception);                  return false;              }
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,_shutdownTimer_Elapsed,The following statement contains a magic number: if (Monitor.TryEnter(Locker' 10))              {                  try                  {                      Camera_WillShutdown(null' null);                  }                  finally                  {                      Monitor.Exit(Locker);                  }              }
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,LoadProperties,The following statement contains a magic number: Battery = (int) Camera.BatteryLevel + 20;
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: if (rr.Contains(2))                  res.AddValues("Video"' 2);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: if (rr.Contains(2))                  res.AddValues("Video"' 2);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: if (rr.Contains(4))                  res.AddValues("High-Speed Continuous Shooting"' 4);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: if (rr.Contains(4))                  res.AddValues("High-Speed Continuous Shooting"' 4);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: if (rr.Contains(5))                  res.AddValues("Low-Speed Continuous Shooting"' 5);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: if (rr.Contains(5))                  res.AddValues("Low-Speed Continuous Shooting"' 5);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: if (rr.Contains(6))                  res.AddValues("Silent single shooting"' 6);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: if (rr.Contains(6))                  res.AddValues("Silent single shooting"' 6);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: if (rr.Contains(7))                  res.AddValues("10-Sec Self-Timer plus continuous shots"' 7);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: if (rr.Contains(7))                  res.AddValues("10-Sec Self-Timer plus continuous shots"' 7);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: if (rr.Contains(10))                  res.AddValues("10-Sec Self-Timer"' 10);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: if (rr.Contains(10))                  res.AddValues("10-Sec Self-Timer"' 10);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: if (rr.Contains(11))                  res.AddValues("2-Sec Self-Timer"' 11);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: if (rr.Contains(11))                  res.AddValues("2-Sec Self-Timer"' 11);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: if (rr.Contains(12))                  res.AddValues("14fps super high speed"' 12);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: if (rr.Contains(12))                  res.AddValues("14fps super high speed"' 12);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: if (rr.Contains(13))                  res.AddValues("Silent single shooting"' 13);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: if (rr.Contains(13))                  res.AddValues("Silent single shooting"' 13);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: if (rr.Contains(14))                  res.AddValues("Silent contin shooting"' 14);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: if (rr.Contains(14))                  res.AddValues("Silent contin shooting"' 14);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: if (rr.Contains(15))                  res.AddValues("Silent HS continuous"' 15);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: if (rr.Contains(15))                  res.AddValues("Silent HS continuous"' 15);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: if (rr.Contains(16))                  res.AddValues("Silent LS continuous"' 16);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: if (rr.Contains(16))                  res.AddValues("Silent LS continuous"' 16);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitBracket,The following statement contains a magic number: res.AddValues("ISO bracket"' 2);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitBracket,The following statement contains a magic number: res.AddValues("WB bracket"' 3);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitBracket,The following statement contains a magic number: res.AddValues("FE bracket"' 4);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitOther,The following statement contains a magic number: LiveViewImageZoomRatio.AddValues("5x"' 5);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,Camera_PropertyChanged,The following statement contains a magic number: lock (Locker)              {                    try                  {                      // Log.Debug("Property changed " + e.PropertyId.ToString("X"));                      switch (e.PropertyId)                      {                          case Edsdk.PropID_ExposureCompensation:                              ExposureCompensation.SetValue((int) Camera.GetProperty(Edsdk.PropID_ExposureCompensation)'                                  false);                              break;                          case Edsdk.PropID_AEMode:                              ReInitFNumber(true);                              ReInitShutterSpeed();                              Mode.SetValue((uint)Camera.GetProperty(Edsdk.PropID_AEMode)' false);                              break;                          case Edsdk.PropID_WhiteBalance:                              WhiteBalance.SetValue(Camera.GetProperty(Edsdk.PropID_WhiteBalance)' false);                              break;                          case Edsdk.PropID_ISOSpeed:                              IsoNumber.SetValue(Camera.GetProperty(Edsdk.PropID_ISOSpeed)' false);                              break;                          case Edsdk.PropID_Tv:                              ShutterSpeed.SetValue(Camera.GetProperty(Edsdk.PropID_Tv)' false);                              break;                          case Edsdk.PropID_Av:                              FNumber.SetValue((int) Camera.GetProperty(Edsdk.PropID_Av)' false);                              break;                          case Edsdk.PropID_MeteringMode:                              ExposureMeteringMode.SetValue((int) Camera.GetProperty(Edsdk.PropID_MeteringMode)' false);                              break;                          case Edsdk.PropID_AFMode:                              FocusMode.SetValue((int) Camera.GetProperty(Edsdk.PropID_AFMode)' false);                              break;                          case Edsdk.PropID_ImageQuality:                              int i = (int) Camera.GetProperty(Edsdk.PropID_ImageQuality);                              CompressionSetting.SetValue((int) Camera.ImageQuality.ToBitMask()' false);                              break;                          case Edsdk.PropID_BatteryLevel:                              Battery = (int) Camera.BatteryLevel + 20;                              break;                          case Edsdk.PropID_AEBracketType:                              int ae = (int)Camera.GetProperty(Edsdk.PropID_AEBracketType);                              //ResetShutterButton();                              break;                          case Edsdk.PropID_Bracket:                              int br = (int)Camera.GetProperty(Edsdk.PropID_Bracket);                              //ResetShutterButton();                              break;                            case Edsdk.PropID_FocusInfo:                              //ResetShutterButton();                              break;                      }                      foreach (                          PropertyValue<long> advancedProperty in                              AdvancedProperties.Where(advancedProperty => advancedProperty.Code == e.PropertyId))                      {                          advancedProperty.SetValue((long) Camera.GetProperty(advancedProperty.Code)' false);                      }                  }                  catch (Exception exception)                  {                      Log.Error("Error set property " + e.PropertyId.ToString("X")' exception);                  }              }
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,Focus,The following statement contains a magic number: lock (Locker)              {                  ResetShutterButton();                  if (_liveViewImageData != null)                  {                      x -= (_liveViewImageData.ZommBounds.Width/2);                      y -= (_liveViewImageData.ZommBounds.Height/2);                  }                  if (x < 0)                      x = 0;                  if (y < 0)                      y = 0;                  Camera.LiveViewqueue.Enqueue(                      () =>                          Camera.SetPropertyIntegerArrayData(Edsdk.PropID_Evf_ZoomPosition'                              new uint[] {(uint) x' (uint) y}));              }
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,Focus,The following statement contains a magic number: lock (Locker)              {                  ResetShutterButton();                  if (_liveViewImageData != null)                  {                      x -= (_liveViewImageData.ZommBounds.Width/2);                      y -= (_liveViewImageData.ZommBounds.Height/2);                  }                  if (x < 0)                      x = 0;                  if (y < 0)                      y = 0;                  Camera.LiveViewqueue.Enqueue(                      () =>                          Camera.SetPropertyIntegerArrayData(Edsdk.PropID_Evf_ZoomPosition'                              new uint[] {(uint) x' (uint) y}));              }
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetLiveViewImage,The following statement contains a magic number: if (Monitor.TryEnter(Locker' 10))                  {                      try                      {                          if (Camera == null)                              return viewData;                          Camera.DownloadEvf();                          if (_liveViewImageData != null)                          {                              //DeviceReady();                              viewData.HaveFocusData = true;                              viewData.ImageDataPosition = 0;                              viewData.ImageData = _liveViewImageData.ImageData;                              viewData.ImageHeight = _liveViewImageData.ImageSize.Height;                              viewData.ImageWidth = _liveViewImageData.ImageSize.Width;                              viewData.LiveViewImageHeight = 100;                              viewData.LiveViewImageWidth = 100;                              viewData.FocusX = _liveViewImageData.ZommBounds.X +                                                (_liveViewImageData.ZommBounds.Width / 2);                              viewData.FocusY = _liveViewImageData.ZommBounds.Y +                                                (_liveViewImageData.ZommBounds.Height / 2);                              viewData.FocusFrameXSize = _liveViewImageData.ZommBounds.Width;                              viewData.FocusFrameYSize = _liveViewImageData.ZommBounds.Height;                              viewData.MovieIsRecording = _recording;                          }                      }                      catch (Exception)                      {                          //Log.Error("Error get live view image "' e);                      }                      finally                      {                          Monitor.Exit(Locker);                      }                  }
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetLiveViewImage,The following statement contains a magic number: if (Monitor.TryEnter(Locker' 10))                  {                      try                      {                          if (Camera == null)                              return viewData;                          Camera.DownloadEvf();                          if (_liveViewImageData != null)                          {                              //DeviceReady();                              viewData.HaveFocusData = true;                              viewData.ImageDataPosition = 0;                              viewData.ImageData = _liveViewImageData.ImageData;                              viewData.ImageHeight = _liveViewImageData.ImageSize.Height;                              viewData.ImageWidth = _liveViewImageData.ImageSize.Width;                              viewData.LiveViewImageHeight = 100;                              viewData.LiveViewImageWidth = 100;                              viewData.FocusX = _liveViewImageData.ZommBounds.X +                                                (_liveViewImageData.ZommBounds.Width / 2);                              viewData.FocusY = _liveViewImageData.ZommBounds.Y +                                                (_liveViewImageData.ZommBounds.Height / 2);                              viewData.FocusFrameXSize = _liveViewImageData.ZommBounds.Width;                              viewData.FocusFrameYSize = _liveViewImageData.ZommBounds.Height;                              viewData.MovieIsRecording = _recording;                          }                      }                      catch (Exception)                      {                          //Log.Error("Error get live view image "' e);                      }                      finally                      {                          Monitor.Exit(Locker);                      }                  }
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetLiveViewImage,The following statement contains a magic number: if (Monitor.TryEnter(Locker' 10))                  {                      try                      {                          if (Camera == null)                              return viewData;                          Camera.DownloadEvf();                          if (_liveViewImageData != null)                          {                              //DeviceReady();                              viewData.HaveFocusData = true;                              viewData.ImageDataPosition = 0;                              viewData.ImageData = _liveViewImageData.ImageData;                              viewData.ImageHeight = _liveViewImageData.ImageSize.Height;                              viewData.ImageWidth = _liveViewImageData.ImageSize.Width;                              viewData.LiveViewImageHeight = 100;                              viewData.LiveViewImageWidth = 100;                              viewData.FocusX = _liveViewImageData.ZommBounds.X +                                                (_liveViewImageData.ZommBounds.Width / 2);                              viewData.FocusY = _liveViewImageData.ZommBounds.Y +                                                (_liveViewImageData.ZommBounds.Height / 2);                              viewData.FocusFrameXSize = _liveViewImageData.ZommBounds.Width;                              viewData.FocusFrameYSize = _liveViewImageData.ZommBounds.Height;                              viewData.MovieIsRecording = _recording;                          }                      }                      catch (Exception)                      {                          //Log.Error("Error get live view image "' e);                      }                      finally                      {                          Monitor.Exit(Locker);                      }                  }
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetLiveViewImage,The following statement contains a magic number: if (Monitor.TryEnter(Locker' 10))                  {                      try                      {                          if (Camera == null)                              return viewData;                          Camera.DownloadEvf();                          if (_liveViewImageData != null)                          {                              //DeviceReady();                              viewData.HaveFocusData = true;                              viewData.ImageDataPosition = 0;                              viewData.ImageData = _liveViewImageData.ImageData;                              viewData.ImageHeight = _liveViewImageData.ImageSize.Height;                              viewData.ImageWidth = _liveViewImageData.ImageSize.Width;                              viewData.LiveViewImageHeight = 100;                              viewData.LiveViewImageWidth = 100;                              viewData.FocusX = _liveViewImageData.ZommBounds.X +                                                (_liveViewImageData.ZommBounds.Width / 2);                              viewData.FocusY = _liveViewImageData.ZommBounds.Y +                                                (_liveViewImageData.ZommBounds.Height / 2);                              viewData.FocusFrameXSize = _liveViewImageData.ZommBounds.Width;                              viewData.FocusFrameYSize = _liveViewImageData.ZommBounds.Height;                              viewData.MovieIsRecording = _recording;                          }                      }                      catch (Exception)                      {                          //Log.Error("Error get live view image "' e);                      }                      finally                      {                          Monitor.Exit(Locker);                      }                  }
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetLiveViewImage,The following statement contains a magic number: if (Monitor.TryEnter(Locker' 10))                  {                      try                      {                          if (Camera == null)                              return viewData;                          Camera.DownloadEvf();                          if (_liveViewImageData != null)                          {                              //DeviceReady();                              viewData.HaveFocusData = true;                              viewData.ImageDataPosition = 0;                              viewData.ImageData = _liveViewImageData.ImageData;                              viewData.ImageHeight = _liveViewImageData.ImageSize.Height;                              viewData.ImageWidth = _liveViewImageData.ImageSize.Width;                              viewData.LiveViewImageHeight = 100;                              viewData.LiveViewImageWidth = 100;                              viewData.FocusX = _liveViewImageData.ZommBounds.X +                                                (_liveViewImageData.ZommBounds.Width / 2);                              viewData.FocusY = _liveViewImageData.ZommBounds.Y +                                                (_liveViewImageData.ZommBounds.Height / 2);                              viewData.FocusFrameXSize = _liveViewImageData.ZommBounds.Width;                              viewData.FocusFrameYSize = _liveViewImageData.ZommBounds.Height;                              viewData.MovieIsRecording = _recording;                          }                      }                      catch (Exception)                      {                          //Log.Error("Error get live view image "' e);                      }                      finally                      {                          Monitor.Exit(Locker);                      }                  }
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      break;                  case OperationEnum.RecordMovie:                      if (Camera.GetProperty(Edsdk.PropID_Record) == 4)                          return "LabelRecordInProgres";                      if (Camera.LiveViewDevice==EosLiveViewDevice.None)                          return "LabelWrongLiveViewType";                      break;                  case OperationEnum.AutoFocus:                      break;                  case OperationEnum.ManualFocus:                      break;                  case OperationEnum.LiveView:                      break;                  default:                      throw new ArgumentOutOfRangeException("operationEnum"' operationEnum' null);              }
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetImage,The following statement contains a magic number: int Stride = ((outputSize.width*3) + 3) & ~3;
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetImage,The following statement contains a magic number: int Stride = ((outputSize.width*3) + 3) & ~3;
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetImage,The following statement contains a magic number: int Stride = ((outputSize.width*3) + 3) & ~3;
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetImage,The following statement contains a magic number: if (outputSize.width%4 == 0)              {                  for (int t = 0; t < bufferSize; t += 3)                  {                      temp = buffer[t];                      buffer[t] = buffer[t + 2];                      buffer[t + 2] = temp;                  }              }              else              {                  int Padding = Stride - (outputSize.width*3);                  for (int y = outputSize.height - 1; y > -1; y--)                  {                      int RowStart = (outputSize.width*3)*y;                      int TargetStart = Stride*y;                        Array.Copy(buffer' RowStart' buffer' TargetStart' outputSize.width*3);                        for (int t = TargetStart; t < TargetStart + (outputSize.width*3); t += 3)                      {                          temp = buffer[t];                          buffer[t] = buffer[t + 2];                          buffer[t + 2] = temp;                      }                  }              }
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetImage,The following statement contains a magic number: if (outputSize.width%4 == 0)              {                  for (int t = 0; t < bufferSize; t += 3)                  {                      temp = buffer[t];                      buffer[t] = buffer[t + 2];                      buffer[t + 2] = temp;                  }              }              else              {                  int Padding = Stride - (outputSize.width*3);                  for (int y = outputSize.height - 1; y > -1; y--)                  {                      int RowStart = (outputSize.width*3)*y;                      int TargetStart = Stride*y;                        Array.Copy(buffer' RowStart' buffer' TargetStart' outputSize.width*3);                        for (int t = TargetStart; t < TargetStart + (outputSize.width*3); t += 3)                      {                          temp = buffer[t];                          buffer[t] = buffer[t + 2];                          buffer[t + 2] = temp;                      }                  }              }
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetImage,The following statement contains a magic number: if (outputSize.width%4 == 0)              {                  for (int t = 0; t < bufferSize; t += 3)                  {                      temp = buffer[t];                      buffer[t] = buffer[t + 2];                      buffer[t + 2] = temp;                  }              }              else              {                  int Padding = Stride - (outputSize.width*3);                  for (int y = outputSize.height - 1; y > -1; y--)                  {                      int RowStart = (outputSize.width*3)*y;                      int TargetStart = Stride*y;                        Array.Copy(buffer' RowStart' buffer' TargetStart' outputSize.width*3);                        for (int t = TargetStart; t < TargetStart + (outputSize.width*3); t += 3)                      {                          temp = buffer[t];                          buffer[t] = buffer[t + 2];                          buffer[t + 2] = temp;                      }                  }              }
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetImage,The following statement contains a magic number: if (outputSize.width%4 == 0)              {                  for (int t = 0; t < bufferSize; t += 3)                  {                      temp = buffer[t];                      buffer[t] = buffer[t + 2];                      buffer[t + 2] = temp;                  }              }              else              {                  int Padding = Stride - (outputSize.width*3);                  for (int y = outputSize.height - 1; y > -1; y--)                  {                      int RowStart = (outputSize.width*3)*y;                      int TargetStart = Stride*y;                        Array.Copy(buffer' RowStart' buffer' TargetStart' outputSize.width*3);                        for (int t = TargetStart; t < TargetStart + (outputSize.width*3); t += 3)                      {                          temp = buffer[t];                          buffer[t] = buffer[t + 2];                          buffer[t + 2] = temp;                      }                  }              }
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetImage,The following statement contains a magic number: if (outputSize.width%4 == 0)              {                  for (int t = 0; t < bufferSize; t += 3)                  {                      temp = buffer[t];                      buffer[t] = buffer[t + 2];                      buffer[t + 2] = temp;                  }              }              else              {                  int Padding = Stride - (outputSize.width*3);                  for (int y = outputSize.height - 1; y > -1; y--)                  {                      int RowStart = (outputSize.width*3)*y;                      int TargetStart = Stride*y;                        Array.Copy(buffer' RowStart' buffer' TargetStart' outputSize.width*3);                        for (int t = TargetStart; t < TargetStart + (outputSize.width*3); t += 3)                      {                          temp = buffer[t];                          buffer[t] = buffer[t + 2];                          buffer[t + 2] = temp;                      }                  }              }
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetImage,The following statement contains a magic number: if (outputSize.width%4 == 0)              {                  for (int t = 0; t < bufferSize; t += 3)                  {                      temp = buffer[t];                      buffer[t] = buffer[t + 2];                      buffer[t + 2] = temp;                  }              }              else              {                  int Padding = Stride - (outputSize.width*3);                  for (int y = outputSize.height - 1; y > -1; y--)                  {                      int RowStart = (outputSize.width*3)*y;                      int TargetStart = Stride*y;                        Array.Copy(buffer' RowStart' buffer' TargetStart' outputSize.width*3);                        for (int t = TargetStart; t < TargetStart + (outputSize.width*3); t += 3)                      {                          temp = buffer[t];                          buffer[t] = buffer[t + 2];                          buffer[t + 2] = temp;                      }                  }              }
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetImage,The following statement contains a magic number: if (outputSize.width%4 == 0)              {                  for (int t = 0; t < bufferSize; t += 3)                  {                      temp = buffer[t];                      buffer[t] = buffer[t + 2];                      buffer[t + 2] = temp;                  }              }              else              {                  int Padding = Stride - (outputSize.width*3);                  for (int y = outputSize.height - 1; y > -1; y--)                  {                      int RowStart = (outputSize.width*3)*y;                      int TargetStart = Stride*y;                        Array.Copy(buffer' RowStart' buffer' TargetStart' outputSize.width*3);                        for (int t = TargetStart; t < TargetStart + (outputSize.width*3); t += 3)                      {                          temp = buffer[t];                          buffer[t] = buffer[t + 2];                          buffer[t + 2] = temp;                      }                  }              }
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetImage,The following statement contains a magic number: if (outputSize.width%4 == 0)              {                  for (int t = 0; t < bufferSize; t += 3)                  {                      temp = buffer[t];                      buffer[t] = buffer[t + 2];                      buffer[t + 2] = temp;                  }              }              else              {                  int Padding = Stride - (outputSize.width*3);                  for (int y = outputSize.height - 1; y > -1; y--)                  {                      int RowStart = (outputSize.width*3)*y;                      int TargetStart = Stride*y;                        Array.Copy(buffer' RowStart' buffer' TargetStart' outputSize.width*3);                        for (int t = TargetStart; t < TargetStart + (outputSize.width*3); t += 3)                      {                          temp = buffer[t];                          buffer[t] = buffer[t + 2];                          buffer[t + 2] = temp;                      }                  }              }
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetImage,The following statement contains a magic number: if (outputSize.width%4 == 0)              {                  for (int t = 0; t < bufferSize; t += 3)                  {                      temp = buffer[t];                      buffer[t] = buffer[t + 2];                      buffer[t + 2] = temp;                  }              }              else              {                  int Padding = Stride - (outputSize.width*3);                  for (int y = outputSize.height - 1; y > -1; y--)                  {                      int RowStart = (outputSize.width*3)*y;                      int TargetStart = Stride*y;                        Array.Copy(buffer' RowStart' buffer' TargetStart' outputSize.width*3);                        for (int t = TargetStart; t < TargetStart + (outputSize.width*3); t += 3)                      {                          temp = buffer[t];                          buffer[t] = buffer[t + 2];                          buffer[t + 2] = temp;                      }                  }              }
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetImage,The following statement contains a magic number: if (outputSize.width%4 == 0)              {                  for (int t = 0; t < bufferSize; t += 3)                  {                      temp = buffer[t];                      buffer[t] = buffer[t + 2];                      buffer[t + 2] = temp;                  }              }              else              {                  int Padding = Stride - (outputSize.width*3);                  for (int y = outputSize.height - 1; y > -1; y--)                  {                      int RowStart = (outputSize.width*3)*y;                      int TargetStart = Stride*y;                        Array.Copy(buffer' RowStart' buffer' TargetStart' outputSize.width*3);                        for (int t = TargetStart; t < TargetStart + (outputSize.width*3); t += 3)                      {                          temp = buffer[t];                          buffer[t] = buffer[t + 2];                          buffer[t + 2] = temp;                      }                  }              }
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetImage,The following statement contains a magic number: if (outputSize.width%4 == 0)              {                  for (int t = 0; t < bufferSize; t += 3)                  {                      temp = buffer[t];                      buffer[t] = buffer[t + 2];                      buffer[t + 2] = temp;                  }              }              else              {                  int Padding = Stride - (outputSize.width*3);                  for (int y = outputSize.height - 1; y > -1; y--)                  {                      int RowStart = (outputSize.width*3)*y;                      int TargetStart = Stride*y;                        Array.Copy(buffer' RowStart' buffer' TargetStart' outputSize.width*3);                        for (int t = TargetStart; t < TargetStart + (outputSize.width*3); t += 3)                      {                          temp = buffer[t];                          buffer[t] = buffer[t + 2];                          buffer[t + 2] = temp;                      }                  }              }
Magic Number,CameraControl.Devices.Canon,CanonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,getEvent,The following statement contains a magic number: try              {                  if (_eventIsbusy)                      return;                  _eventIsbusy = true;                  //DeviceReady();                  MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_CANON_EOS_GetEvent);                    if (response.Data == null)                  {                      Log.Debug("Get event error :" + response.ErrorCode.ToString("X"));                      return;                  }                  int eventCount = BitConverter.ToInt16(response.Data' 0);                  Log.Debug("Number of events " + eventCount);                  if (eventCount > 0)                  {                      Console.WriteLine("Event queue length " + eventCount);                      for (int i = 0; i < eventCount; i++)                      {                          try                          {                              uint eventCode = BitConverter.ToUInt16(response.Data' 6*i + 2);                              ushort eventParam = BitConverter.ToUInt16(response.Data' 6*i + 4);                              int longeventParam = BitConverter.ToInt32(response.Data' 6*i + 4);                              switch (eventCode)                              {                                  case CONST_Event_CANON_EOS_PropValueChanged:                                      Log.Debug("EOS property changed " + eventParam.ToString("X"));                                      //ReadDeviceProperties(eventParam);                                      break;                                  case CONST_Event_CANON_EOS_ObjectAddedEx:                                  case CONST_Event_ObjectAddedInSdram:                                  case CONST_Event_ObjectAdded:                                      {                                          try                                          {                                              MTPDataResponse objectdata =                                                  ExecuteReadDataEx(CONST_CMD_CANON_EOS_GetObjectInfo'                                                                    (uint) longeventParam);                                              string filename = "DSC_0000.JPG";                                              if (objectdata.Data != null)                                              {                                                  filename = Encoding.Unicode.GetString(objectdata.Data' 53' 12*2);                                                  if (filename.Contains("\0"))                                                      filename = filename.Split('\0')[0];                                              }                                              else                                              {                                                  Log.Error("Error getting file name");                                              }                                              Log.Debug("File transfer " + filename);                                              PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                                                                                {                                                                                    WiaImageItem = null'                                                                                    EventArgs =                                                                                        new PortableDeviceEventArgs(new PortableDeviceEventType                                                                                                                        ()                                                                                                                        {                                                                                                                            ObjectHandle                                                                                                                                =                                                                                                                                (                                                                                                                                uint                                                                                                                                )                                                                                                                                longeventParam                                                                                                                        })'                                                                                    CameraDevice = this'                                                                                    FileName = filename'                                                                                    Handle = (uint) longeventParam                                                                                };                                              OnPhotoCapture(this' args);                                          }                                          catch (Exception exception)                                          {                                              Log.Error("Object added error"' exception);                                          }                                      }                                      break;                                      //case CONST_Event_CaptureComplete:                                      //case CONST_Event_CaptureCompleteRecInSdram:                                      //    {                                      //        OnCaptureCompleted(this' new EventArgs());                                      //    }                                      //    break;                                      //case CONST_Event_ObsoleteEvent:                                      //    break;                                  default:                                      //Console.WriteLine("Unknown event code " + eventCode.ToString("X"));                                      Log.Debug("Unknown event code :" + eventCode.ToString("X") + "|" +                                                longeventParam.ToString("X"));                                      break;                              }                          }                          catch (Exception exception)                          {                              Log.Error("Event queue processing error "' exception);                          }                      }                  }              }              catch (InvalidComObjectException)              {                  return;              }              catch (Exception)              {                  //Log.Error("Event exception "' exception);              }
Magic Number,CameraControl.Devices.Canon,CanonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,getEvent,The following statement contains a magic number: try              {                  if (_eventIsbusy)                      return;                  _eventIsbusy = true;                  //DeviceReady();                  MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_CANON_EOS_GetEvent);                    if (response.Data == null)                  {                      Log.Debug("Get event error :" + response.ErrorCode.ToString("X"));                      return;                  }                  int eventCount = BitConverter.ToInt16(response.Data' 0);                  Log.Debug("Number of events " + eventCount);                  if (eventCount > 0)                  {                      Console.WriteLine("Event queue length " + eventCount);                      for (int i = 0; i < eventCount; i++)                      {                          try                          {                              uint eventCode = BitConverter.ToUInt16(response.Data' 6*i + 2);                              ushort eventParam = BitConverter.ToUInt16(response.Data' 6*i + 4);                              int longeventParam = BitConverter.ToInt32(response.Data' 6*i + 4);                              switch (eventCode)                              {                                  case CONST_Event_CANON_EOS_PropValueChanged:                                      Log.Debug("EOS property changed " + eventParam.ToString("X"));                                      //ReadDeviceProperties(eventParam);                                      break;                                  case CONST_Event_CANON_EOS_ObjectAddedEx:                                  case CONST_Event_ObjectAddedInSdram:                                  case CONST_Event_ObjectAdded:                                      {                                          try                                          {                                              MTPDataResponse objectdata =                                                  ExecuteReadDataEx(CONST_CMD_CANON_EOS_GetObjectInfo'                                                                    (uint) longeventParam);                                              string filename = "DSC_0000.JPG";                                              if (objectdata.Data != null)                                              {                                                  filename = Encoding.Unicode.GetString(objectdata.Data' 53' 12*2);                                                  if (filename.Contains("\0"))                                                      filename = filename.Split('\0')[0];                                              }                                              else                                              {                                                  Log.Error("Error getting file name");                                              }                                              Log.Debug("File transfer " + filename);                                              PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                                                                                {                                                                                    WiaImageItem = null'                                                                                    EventArgs =                                                                                        new PortableDeviceEventArgs(new PortableDeviceEventType                                                                                                                        ()                                                                                                                        {                                                                                                                            ObjectHandle                                                                                                                                =                                                                                                                                (                                                                                                                                uint                                                                                                                                )                                                                                                                                longeventParam                                                                                                                        })'                                                                                    CameraDevice = this'                                                                                    FileName = filename'                                                                                    Handle = (uint) longeventParam                                                                                };                                              OnPhotoCapture(this' args);                                          }                                          catch (Exception exception)                                          {                                              Log.Error("Object added error"' exception);                                          }                                      }                                      break;                                      //case CONST_Event_CaptureComplete:                                      //case CONST_Event_CaptureCompleteRecInSdram:                                      //    {                                      //        OnCaptureCompleted(this' new EventArgs());                                      //    }                                      //    break;                                      //case CONST_Event_ObsoleteEvent:                                      //    break;                                  default:                                      //Console.WriteLine("Unknown event code " + eventCode.ToString("X"));                                      Log.Debug("Unknown event code :" + eventCode.ToString("X") + "|" +                                                longeventParam.ToString("X"));                                      break;                              }                          }                          catch (Exception exception)                          {                              Log.Error("Event queue processing error "' exception);                          }                      }                  }              }              catch (InvalidComObjectException)              {                  return;              }              catch (Exception)              {                  //Log.Error("Event exception "' exception);              }
Magic Number,CameraControl.Devices.Canon,CanonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,getEvent,The following statement contains a magic number: try              {                  if (_eventIsbusy)                      return;                  _eventIsbusy = true;                  //DeviceReady();                  MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_CANON_EOS_GetEvent);                    if (response.Data == null)                  {                      Log.Debug("Get event error :" + response.ErrorCode.ToString("X"));                      return;                  }                  int eventCount = BitConverter.ToInt16(response.Data' 0);                  Log.Debug("Number of events " + eventCount);                  if (eventCount > 0)                  {                      Console.WriteLine("Event queue length " + eventCount);                      for (int i = 0; i < eventCount; i++)                      {                          try                          {                              uint eventCode = BitConverter.ToUInt16(response.Data' 6*i + 2);                              ushort eventParam = BitConverter.ToUInt16(response.Data' 6*i + 4);                              int longeventParam = BitConverter.ToInt32(response.Data' 6*i + 4);                              switch (eventCode)                              {                                  case CONST_Event_CANON_EOS_PropValueChanged:                                      Log.Debug("EOS property changed " + eventParam.ToString("X"));                                      //ReadDeviceProperties(eventParam);                                      break;                                  case CONST_Event_CANON_EOS_ObjectAddedEx:                                  case CONST_Event_ObjectAddedInSdram:                                  case CONST_Event_ObjectAdded:                                      {                                          try                                          {                                              MTPDataResponse objectdata =                                                  ExecuteReadDataEx(CONST_CMD_CANON_EOS_GetObjectInfo'                                                                    (uint) longeventParam);                                              string filename = "DSC_0000.JPG";                                              if (objectdata.Data != null)                                              {                                                  filename = Encoding.Unicode.GetString(objectdata.Data' 53' 12*2);                                                  if (filename.Contains("\0"))                                                      filename = filename.Split('\0')[0];                                              }                                              else                                              {                                                  Log.Error("Error getting file name");                                              }                                              Log.Debug("File transfer " + filename);                                              PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                                                                                {                                                                                    WiaImageItem = null'                                                                                    EventArgs =                                                                                        new PortableDeviceEventArgs(new PortableDeviceEventType                                                                                                                        ()                                                                                                                        {                                                                                                                            ObjectHandle                                                                                                                                =                                                                                                                                (                                                                                                                                uint                                                                                                                                )                                                                                                                                longeventParam                                                                                                                        })'                                                                                    CameraDevice = this'                                                                                    FileName = filename'                                                                                    Handle = (uint) longeventParam                                                                                };                                              OnPhotoCapture(this' args);                                          }                                          catch (Exception exception)                                          {                                              Log.Error("Object added error"' exception);                                          }                                      }                                      break;                                      //case CONST_Event_CaptureComplete:                                      //case CONST_Event_CaptureCompleteRecInSdram:                                      //    {                                      //        OnCaptureCompleted(this' new EventArgs());                                      //    }                                      //    break;                                      //case CONST_Event_ObsoleteEvent:                                      //    break;                                  default:                                      //Console.WriteLine("Unknown event code " + eventCode.ToString("X"));                                      Log.Debug("Unknown event code :" + eventCode.ToString("X") + "|" +                                                longeventParam.ToString("X"));                                      break;                              }                          }                          catch (Exception exception)                          {                              Log.Error("Event queue processing error "' exception);                          }                      }                  }              }              catch (InvalidComObjectException)              {                  return;              }              catch (Exception)              {                  //Log.Error("Event exception "' exception);              }
Magic Number,CameraControl.Devices.Canon,CanonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,getEvent,The following statement contains a magic number: try              {                  if (_eventIsbusy)                      return;                  _eventIsbusy = true;                  //DeviceReady();                  MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_CANON_EOS_GetEvent);                    if (response.Data == null)                  {                      Log.Debug("Get event error :" + response.ErrorCode.ToString("X"));                      return;                  }                  int eventCount = BitConverter.ToInt16(response.Data' 0);                  Log.Debug("Number of events " + eventCount);                  if (eventCount > 0)                  {                      Console.WriteLine("Event queue length " + eventCount);                      for (int i = 0; i < eventCount; i++)                      {                          try                          {                              uint eventCode = BitConverter.ToUInt16(response.Data' 6*i + 2);                              ushort eventParam = BitConverter.ToUInt16(response.Data' 6*i + 4);                              int longeventParam = BitConverter.ToInt32(response.Data' 6*i + 4);                              switch (eventCode)                              {                                  case CONST_Event_CANON_EOS_PropValueChanged:                                      Log.Debug("EOS property changed " + eventParam.ToString("X"));                                      //ReadDeviceProperties(eventParam);                                      break;                                  case CONST_Event_CANON_EOS_ObjectAddedEx:                                  case CONST_Event_ObjectAddedInSdram:                                  case CONST_Event_ObjectAdded:                                      {                                          try                                          {                                              MTPDataResponse objectdata =                                                  ExecuteReadDataEx(CONST_CMD_CANON_EOS_GetObjectInfo'                                                                    (uint) longeventParam);                                              string filename = "DSC_0000.JPG";                                              if (objectdata.Data != null)                                              {                                                  filename = Encoding.Unicode.GetString(objectdata.Data' 53' 12*2);                                                  if (filename.Contains("\0"))                                                      filename = filename.Split('\0')[0];                                              }                                              else                                              {                                                  Log.Error("Error getting file name");                                              }                                              Log.Debug("File transfer " + filename);                                              PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                                                                                {                                                                                    WiaImageItem = null'                                                                                    EventArgs =                                                                                        new PortableDeviceEventArgs(new PortableDeviceEventType                                                                                                                        ()                                                                                                                        {                                                                                                                            ObjectHandle                                                                                                                                =                                                                                                                                (                                                                                                                                uint                                                                                                                                )                                                                                                                                longeventParam                                                                                                                        })'                                                                                    CameraDevice = this'                                                                                    FileName = filename'                                                                                    Handle = (uint) longeventParam                                                                                };                                              OnPhotoCapture(this' args);                                          }                                          catch (Exception exception)                                          {                                              Log.Error("Object added error"' exception);                                          }                                      }                                      break;                                      //case CONST_Event_CaptureComplete:                                      //case CONST_Event_CaptureCompleteRecInSdram:                                      //    {                                      //        OnCaptureCompleted(this' new EventArgs());                                      //    }                                      //    break;                                      //case CONST_Event_ObsoleteEvent:                                      //    break;                                  default:                                      //Console.WriteLine("Unknown event code " + eventCode.ToString("X"));                                      Log.Debug("Unknown event code :" + eventCode.ToString("X") + "|" +                                                longeventParam.ToString("X"));                                      break;                              }                          }                          catch (Exception exception)                          {                              Log.Error("Event queue processing error "' exception);                          }                      }                  }              }              catch (InvalidComObjectException)              {                  return;              }              catch (Exception)              {                  //Log.Error("Event exception "' exception);              }
Magic Number,CameraControl.Devices.Canon,CanonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,getEvent,The following statement contains a magic number: try              {                  if (_eventIsbusy)                      return;                  _eventIsbusy = true;                  //DeviceReady();                  MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_CANON_EOS_GetEvent);                    if (response.Data == null)                  {                      Log.Debug("Get event error :" + response.ErrorCode.ToString("X"));                      return;                  }                  int eventCount = BitConverter.ToInt16(response.Data' 0);                  Log.Debug("Number of events " + eventCount);                  if (eventCount > 0)                  {                      Console.WriteLine("Event queue length " + eventCount);                      for (int i = 0; i < eventCount; i++)                      {                          try                          {                              uint eventCode = BitConverter.ToUInt16(response.Data' 6*i + 2);                              ushort eventParam = BitConverter.ToUInt16(response.Data' 6*i + 4);                              int longeventParam = BitConverter.ToInt32(response.Data' 6*i + 4);                              switch (eventCode)                              {                                  case CONST_Event_CANON_EOS_PropValueChanged:                                      Log.Debug("EOS property changed " + eventParam.ToString("X"));                                      //ReadDeviceProperties(eventParam);                                      break;                                  case CONST_Event_CANON_EOS_ObjectAddedEx:                                  case CONST_Event_ObjectAddedInSdram:                                  case CONST_Event_ObjectAdded:                                      {                                          try                                          {                                              MTPDataResponse objectdata =                                                  ExecuteReadDataEx(CONST_CMD_CANON_EOS_GetObjectInfo'                                                                    (uint) longeventParam);                                              string filename = "DSC_0000.JPG";                                              if (objectdata.Data != null)                                              {                                                  filename = Encoding.Unicode.GetString(objectdata.Data' 53' 12*2);                                                  if (filename.Contains("\0"))                                                      filename = filename.Split('\0')[0];                                              }                                              else                                              {                                                  Log.Error("Error getting file name");                                              }                                              Log.Debug("File transfer " + filename);                                              PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                                                                                {                                                                                    WiaImageItem = null'                                                                                    EventArgs =                                                                                        new PortableDeviceEventArgs(new PortableDeviceEventType                                                                                                                        ()                                                                                                                        {                                                                                                                            ObjectHandle                                                                                                                                =                                                                                                                                (                                                                                                                                uint                                                                                                                                )                                                                                                                                longeventParam                                                                                                                        })'                                                                                    CameraDevice = this'                                                                                    FileName = filename'                                                                                    Handle = (uint) longeventParam                                                                                };                                              OnPhotoCapture(this' args);                                          }                                          catch (Exception exception)                                          {                                              Log.Error("Object added error"' exception);                                          }                                      }                                      break;                                      //case CONST_Event_CaptureComplete:                                      //case CONST_Event_CaptureCompleteRecInSdram:                                      //    {                                      //        OnCaptureCompleted(this' new EventArgs());                                      //    }                                      //    break;                                      //case CONST_Event_ObsoleteEvent:                                      //    break;                                  default:                                      //Console.WriteLine("Unknown event code " + eventCode.ToString("X"));                                      Log.Debug("Unknown event code :" + eventCode.ToString("X") + "|" +                                                longeventParam.ToString("X"));                                      break;                              }                          }                          catch (Exception exception)                          {                              Log.Error("Event queue processing error "' exception);                          }                      }                  }              }              catch (InvalidComObjectException)              {                  return;              }              catch (Exception)              {                  //Log.Error("Event exception "' exception);              }
Magic Number,CameraControl.Devices.Canon,CanonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,getEvent,The following statement contains a magic number: try              {                  if (_eventIsbusy)                      return;                  _eventIsbusy = true;                  //DeviceReady();                  MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_CANON_EOS_GetEvent);                    if (response.Data == null)                  {                      Log.Debug("Get event error :" + response.ErrorCode.ToString("X"));                      return;                  }                  int eventCount = BitConverter.ToInt16(response.Data' 0);                  Log.Debug("Number of events " + eventCount);                  if (eventCount > 0)                  {                      Console.WriteLine("Event queue length " + eventCount);                      for (int i = 0; i < eventCount; i++)                      {                          try                          {                              uint eventCode = BitConverter.ToUInt16(response.Data' 6*i + 2);                              ushort eventParam = BitConverter.ToUInt16(response.Data' 6*i + 4);                              int longeventParam = BitConverter.ToInt32(response.Data' 6*i + 4);                              switch (eventCode)                              {                                  case CONST_Event_CANON_EOS_PropValueChanged:                                      Log.Debug("EOS property changed " + eventParam.ToString("X"));                                      //ReadDeviceProperties(eventParam);                                      break;                                  case CONST_Event_CANON_EOS_ObjectAddedEx:                                  case CONST_Event_ObjectAddedInSdram:                                  case CONST_Event_ObjectAdded:                                      {                                          try                                          {                                              MTPDataResponse objectdata =                                                  ExecuteReadDataEx(CONST_CMD_CANON_EOS_GetObjectInfo'                                                                    (uint) longeventParam);                                              string filename = "DSC_0000.JPG";                                              if (objectdata.Data != null)                                              {                                                  filename = Encoding.Unicode.GetString(objectdata.Data' 53' 12*2);                                                  if (filename.Contains("\0"))                                                      filename = filename.Split('\0')[0];                                              }                                              else                                              {                                                  Log.Error("Error getting file name");                                              }                                              Log.Debug("File transfer " + filename);                                              PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                                                                                {                                                                                    WiaImageItem = null'                                                                                    EventArgs =                                                                                        new PortableDeviceEventArgs(new PortableDeviceEventType                                                                                                                        ()                                                                                                                        {                                                                                                                            ObjectHandle                                                                                                                                =                                                                                                                                (                                                                                                                                uint                                                                                                                                )                                                                                                                                longeventParam                                                                                                                        })'                                                                                    CameraDevice = this'                                                                                    FileName = filename'                                                                                    Handle = (uint) longeventParam                                                                                };                                              OnPhotoCapture(this' args);                                          }                                          catch (Exception exception)                                          {                                              Log.Error("Object added error"' exception);                                          }                                      }                                      break;                                      //case CONST_Event_CaptureComplete:                                      //case CONST_Event_CaptureCompleteRecInSdram:                                      //    {                                      //        OnCaptureCompleted(this' new EventArgs());                                      //    }                                      //    break;                                      //case CONST_Event_ObsoleteEvent:                                      //    break;                                  default:                                      //Console.WriteLine("Unknown event code " + eventCode.ToString("X"));                                      Log.Debug("Unknown event code :" + eventCode.ToString("X") + "|" +                                                longeventParam.ToString("X"));                                      break;                              }                          }                          catch (Exception exception)                          {                              Log.Error("Event queue processing error "' exception);                          }                      }                  }              }              catch (InvalidComObjectException)              {                  return;              }              catch (Exception)              {                  //Log.Error("Event exception "' exception);              }
Magic Number,CameraControl.Devices.Canon,CanonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,getEvent,The following statement contains a magic number: try              {                  if (_eventIsbusy)                      return;                  _eventIsbusy = true;                  //DeviceReady();                  MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_CANON_EOS_GetEvent);                    if (response.Data == null)                  {                      Log.Debug("Get event error :" + response.ErrorCode.ToString("X"));                      return;                  }                  int eventCount = BitConverter.ToInt16(response.Data' 0);                  Log.Debug("Number of events " + eventCount);                  if (eventCount > 0)                  {                      Console.WriteLine("Event queue length " + eventCount);                      for (int i = 0; i < eventCount; i++)                      {                          try                          {                              uint eventCode = BitConverter.ToUInt16(response.Data' 6*i + 2);                              ushort eventParam = BitConverter.ToUInt16(response.Data' 6*i + 4);                              int longeventParam = BitConverter.ToInt32(response.Data' 6*i + 4);                              switch (eventCode)                              {                                  case CONST_Event_CANON_EOS_PropValueChanged:                                      Log.Debug("EOS property changed " + eventParam.ToString("X"));                                      //ReadDeviceProperties(eventParam);                                      break;                                  case CONST_Event_CANON_EOS_ObjectAddedEx:                                  case CONST_Event_ObjectAddedInSdram:                                  case CONST_Event_ObjectAdded:                                      {                                          try                                          {                                              MTPDataResponse objectdata =                                                  ExecuteReadDataEx(CONST_CMD_CANON_EOS_GetObjectInfo'                                                                    (uint) longeventParam);                                              string filename = "DSC_0000.JPG";                                              if (objectdata.Data != null)                                              {                                                  filename = Encoding.Unicode.GetString(objectdata.Data' 53' 12*2);                                                  if (filename.Contains("\0"))                                                      filename = filename.Split('\0')[0];                                              }                                              else                                              {                                                  Log.Error("Error getting file name");                                              }                                              Log.Debug("File transfer " + filename);                                              PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                                                                                {                                                                                    WiaImageItem = null'                                                                                    EventArgs =                                                                                        new PortableDeviceEventArgs(new PortableDeviceEventType                                                                                                                        ()                                                                                                                        {                                                                                                                            ObjectHandle                                                                                                                                =                                                                                                                                (                                                                                                                                uint                                                                                                                                )                                                                                                                                longeventParam                                                                                                                        })'                                                                                    CameraDevice = this'                                                                                    FileName = filename'                                                                                    Handle = (uint) longeventParam                                                                                };                                              OnPhotoCapture(this' args);                                          }                                          catch (Exception exception)                                          {                                              Log.Error("Object added error"' exception);                                          }                                      }                                      break;                                      //case CONST_Event_CaptureComplete:                                      //case CONST_Event_CaptureCompleteRecInSdram:                                      //    {                                      //        OnCaptureCompleted(this' new EventArgs());                                      //    }                                      //    break;                                      //case CONST_Event_ObsoleteEvent:                                      //    break;                                  default:                                      //Console.WriteLine("Unknown event code " + eventCode.ToString("X"));                                      Log.Debug("Unknown event code :" + eventCode.ToString("X") + "|" +                                                longeventParam.ToString("X"));                                      break;                              }                          }                          catch (Exception exception)                          {                              Log.Error("Event queue processing error "' exception);                          }                      }                  }              }              catch (InvalidComObjectException)              {                  return;              }              catch (Exception)              {                  //Log.Error("Event exception "' exception);              }
Magic Number,CameraControl.Devices.Canon,CanonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,getEvent,The following statement contains a magic number: try              {                  if (_eventIsbusy)                      return;                  _eventIsbusy = true;                  //DeviceReady();                  MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_CANON_EOS_GetEvent);                    if (response.Data == null)                  {                      Log.Debug("Get event error :" + response.ErrorCode.ToString("X"));                      return;                  }                  int eventCount = BitConverter.ToInt16(response.Data' 0);                  Log.Debug("Number of events " + eventCount);                  if (eventCount > 0)                  {                      Console.WriteLine("Event queue length " + eventCount);                      for (int i = 0; i < eventCount; i++)                      {                          try                          {                              uint eventCode = BitConverter.ToUInt16(response.Data' 6*i + 2);                              ushort eventParam = BitConverter.ToUInt16(response.Data' 6*i + 4);                              int longeventParam = BitConverter.ToInt32(response.Data' 6*i + 4);                              switch (eventCode)                              {                                  case CONST_Event_CANON_EOS_PropValueChanged:                                      Log.Debug("EOS property changed " + eventParam.ToString("X"));                                      //ReadDeviceProperties(eventParam);                                      break;                                  case CONST_Event_CANON_EOS_ObjectAddedEx:                                  case CONST_Event_ObjectAddedInSdram:                                  case CONST_Event_ObjectAdded:                                      {                                          try                                          {                                              MTPDataResponse objectdata =                                                  ExecuteReadDataEx(CONST_CMD_CANON_EOS_GetObjectInfo'                                                                    (uint) longeventParam);                                              string filename = "DSC_0000.JPG";                                              if (objectdata.Data != null)                                              {                                                  filename = Encoding.Unicode.GetString(objectdata.Data' 53' 12*2);                                                  if (filename.Contains("\0"))                                                      filename = filename.Split('\0')[0];                                              }                                              else                                              {                                                  Log.Error("Error getting file name");                                              }                                              Log.Debug("File transfer " + filename);                                              PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                                                                                {                                                                                    WiaImageItem = null'                                                                                    EventArgs =                                                                                        new PortableDeviceEventArgs(new PortableDeviceEventType                                                                                                                        ()                                                                                                                        {                                                                                                                            ObjectHandle                                                                                                                                =                                                                                                                                (                                                                                                                                uint                                                                                                                                )                                                                                                                                longeventParam                                                                                                                        })'                                                                                    CameraDevice = this'                                                                                    FileName = filename'                                                                                    Handle = (uint) longeventParam                                                                                };                                              OnPhotoCapture(this' args);                                          }                                          catch (Exception exception)                                          {                                              Log.Error("Object added error"' exception);                                          }                                      }                                      break;                                      //case CONST_Event_CaptureComplete:                                      //case CONST_Event_CaptureCompleteRecInSdram:                                      //    {                                      //        OnCaptureCompleted(this' new EventArgs());                                      //    }                                      //    break;                                      //case CONST_Event_ObsoleteEvent:                                      //    break;                                  default:                                      //Console.WriteLine("Unknown event code " + eventCode.ToString("X"));                                      Log.Debug("Unknown event code :" + eventCode.ToString("X") + "|" +                                                longeventParam.ToString("X"));                                      break;                              }                          }                          catch (Exception exception)                          {                              Log.Error("Event queue processing error "' exception);                          }                      }                  }              }              catch (InvalidComObjectException)              {                  return;              }              catch (Exception)              {                  //Log.Error("Event exception "' exception);              }
Magic Number,CameraControl.Devices.Canon,CanonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,getEvent,The following statement contains a magic number: try              {                  if (_eventIsbusy)                      return;                  _eventIsbusy = true;                  //DeviceReady();                  MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_CANON_EOS_GetEvent);                    if (response.Data == null)                  {                      Log.Debug("Get event error :" + response.ErrorCode.ToString("X"));                      return;                  }                  int eventCount = BitConverter.ToInt16(response.Data' 0);                  Log.Debug("Number of events " + eventCount);                  if (eventCount > 0)                  {                      Console.WriteLine("Event queue length " + eventCount);                      for (int i = 0; i < eventCount; i++)                      {                          try                          {                              uint eventCode = BitConverter.ToUInt16(response.Data' 6*i + 2);                              ushort eventParam = BitConverter.ToUInt16(response.Data' 6*i + 4);                              int longeventParam = BitConverter.ToInt32(response.Data' 6*i + 4);                              switch (eventCode)                              {                                  case CONST_Event_CANON_EOS_PropValueChanged:                                      Log.Debug("EOS property changed " + eventParam.ToString("X"));                                      //ReadDeviceProperties(eventParam);                                      break;                                  case CONST_Event_CANON_EOS_ObjectAddedEx:                                  case CONST_Event_ObjectAddedInSdram:                                  case CONST_Event_ObjectAdded:                                      {                                          try                                          {                                              MTPDataResponse objectdata =                                                  ExecuteReadDataEx(CONST_CMD_CANON_EOS_GetObjectInfo'                                                                    (uint) longeventParam);                                              string filename = "DSC_0000.JPG";                                              if (objectdata.Data != null)                                              {                                                  filename = Encoding.Unicode.GetString(objectdata.Data' 53' 12*2);                                                  if (filename.Contains("\0"))                                                      filename = filename.Split('\0')[0];                                              }                                              else                                              {                                                  Log.Error("Error getting file name");                                              }                                              Log.Debug("File transfer " + filename);                                              PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                                                                                {                                                                                    WiaImageItem = null'                                                                                    EventArgs =                                                                                        new PortableDeviceEventArgs(new PortableDeviceEventType                                                                                                                        ()                                                                                                                        {                                                                                                                            ObjectHandle                                                                                                                                =                                                                                                                                (                                                                                                                                uint                                                                                                                                )                                                                                                                                longeventParam                                                                                                                        })'                                                                                    CameraDevice = this'                                                                                    FileName = filename'                                                                                    Handle = (uint) longeventParam                                                                                };                                              OnPhotoCapture(this' args);                                          }                                          catch (Exception exception)                                          {                                              Log.Error("Object added error"' exception);                                          }                                      }                                      break;                                      //case CONST_Event_CaptureComplete:                                      //case CONST_Event_CaptureCompleteRecInSdram:                                      //    {                                      //        OnCaptureCompleted(this' new EventArgs());                                      //    }                                      //    break;                                      //case CONST_Event_ObsoleteEvent:                                      //    break;                                  default:                                      //Console.WriteLine("Unknown event code " + eventCode.ToString("X"));                                      Log.Debug("Unknown event code :" + eventCode.ToString("X") + "|" +                                                longeventParam.ToString("X"));                                      break;                              }                          }                          catch (Exception exception)                          {                              Log.Error("Event queue processing error "' exception);                          }                      }                  }              }              catch (InvalidComObjectException)              {                  return;              }              catch (Exception)              {                  //Log.Error("Event exception "' exception);              }
Magic Number,CameraControl.Devices.Canon,CanonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,GetLiveViewImage,The following statement contains a magic number: if (Monitor.TryEnter(Locker' 10))              {                  try                  {                      //DeviceReady();                      viewData.HaveFocusData = false;                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_CANON_EOS_GetViewFinderData' 0x00100000);                      ErrorCodes.GetException(response.ErrorCode);                      if (response.Data == null)                      {                          _timer.Start();                          return null;                      }                      viewData.ImageDataPosition = 0;                      viewData.ImageData = response.Data;                  }                  catch (Exception e)                  {                      Log.Error("Error get live view image "' e);                  }                  finally                  {                      Monitor.Exit(Locker);                  }              }
Magic Number,CameraControl.Devices.Canon,CanonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,StartLiveView,The following statement contains a magic number: SetProperty(CONST_CMD_CANON_EOS_SetDevicePropValueEx' BitConverter.GetBytes(2)'                          CONST_PROP_EOS_LiveView);
Magic Number,CameraControl.Devices.Canon,CanonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,StartLiveView,The following statement contains a magic number: SetEOSProperty(CONST_PROP_EOS_LiveView' (uint) 2);
Magic Number,CameraControl.Devices.Canon,CanonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,SetEOSProperty,The following statement contains a magic number: do              {                  if (retrynum > 5)                  {                      return;                  }                  try                  {                      retry = false;                      uint resp = ExecuteWithNoData(CONST_CMD_CANON_EOS_SetDevicePropValueEx' 0x0000000C' (int) prop'                                                    (int) val);                        if (resp != 0 || resp != ErrorCodes.MTP_OK)                      {                          //Console.WriteLine("Retry ...." + resp.ToString("X"));                          if (resp == ErrorCodes.MTP_Device_Busy || resp == 0x800700AA)                          {                              Thread.Sleep(100);                              retry = true;                              retrynum++;                          }                          else                          {                              ErrorCodes.GetException(resp);                          }                      }                  }                  catch (Exception exception)                  {                      Log.Debug("Error EOS set property :" + prop.ToString("X")' exception);                  }              } while (retry);
Magic Number,CameraControl.Devices.Canon,CanonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,SetEOSProperty,The following statement contains a magic number: do              {                  if (retrynum > 5)                  {                      return;                  }                  try                  {                      retry = false;                      uint resp = ExecuteWithNoData(CONST_CMD_CANON_EOS_SetDevicePropValueEx' 0x0000000C' (int) prop'                                                    (int) val);                        if (resp != 0 || resp != ErrorCodes.MTP_OK)                      {                          //Console.WriteLine("Retry ...." + resp.ToString("X"));                          if (resp == ErrorCodes.MTP_Device_Busy || resp == 0x800700AA)                          {                              Thread.Sleep(100);                              retry = true;                              retrynum++;                          }                          else                          {                              ErrorCodes.GetException(resp);                          }                      }                  }                  catch (Exception exception)                  {                      Log.Debug("Error EOS set property :" + prop.ToString("X")' exception);                  }              } while (retry);
Magic Number,CameraControl.Devices.Classes,DelayedDelegate,C:\repos\dukus_digiCamControl\CameraControl.Devices\Classes\DelayedDelegate.cs,DelayedDelegate,The following statement contains a magic number: runDelegates.Interval = 250;
Magic Number,CameraControl.Devices.Classes,HttpHelper,C:\repos\dukus_digiCamControl\CameraControl.Devices\Classes\HttpHelper.cs,DownLoadFileByWebRequest,The following statement contains a magic number: try              {                  HttpWebRequest request = null;                  HttpWebResponse response = null;                  request = (HttpWebRequest)WebRequest.Create(urlAddress);                  request.Timeout = 30000;  //8000 Not work                   response = (HttpWebResponse)request.GetResponse();                  Stream s = response.GetResponseStream();                  if (File.Exists(filePath))                  {                      File.Delete(filePath);                  }                    FileStream os = new FileStream(filePath' FileMode.OpenOrCreate' FileAccess.Write);                  byte[] buff = new byte[102400];                  int c = 0;                  int totalsize = 0;                  while ((c = s.Read(buff' 0' 102400)) > 0)                  {                      os.Write(buff' 0' c);                      os.Flush();                      totalsize += c;                      if (size > 0)                      {                          device.TransferProgress = (uint)(totalsize/(double)size*100.0);                      }                      else                      {                          device.TransferProgress += 1;                      }                                        }                  os.Close();                  s.Close();                  device.TransferProgress = 100;              }              catch(Exception ex)              {                  Log.Error("Error download file"' ex);              }              finally              {              }
Magic Number,CameraControl.Devices.Classes,HttpHelper,C:\repos\dukus_digiCamControl\CameraControl.Devices\Classes\HttpHelper.cs,DownLoadFileByWebRequest,The following statement contains a magic number: try              {                  HttpWebRequest request = null;                  HttpWebResponse response = null;                  request = (HttpWebRequest)WebRequest.Create(urlAddress);                  request.Timeout = 30000;  //8000 Not work                   response = (HttpWebResponse)request.GetResponse();                  Stream s = response.GetResponseStream();                  if (File.Exists(filePath))                  {                      File.Delete(filePath);                  }                    FileStream os = new FileStream(filePath' FileMode.OpenOrCreate' FileAccess.Write);                  byte[] buff = new byte[102400];                  int c = 0;                  int totalsize = 0;                  while ((c = s.Read(buff' 0' 102400)) > 0)                  {                      os.Write(buff' 0' c);                      os.Flush();                      totalsize += c;                      if (size > 0)                      {                          device.TransferProgress = (uint)(totalsize/(double)size*100.0);                      }                      else                      {                          device.TransferProgress += 1;                      }                                        }                  os.Close();                  s.Close();                  device.TransferProgress = 100;              }              catch(Exception ex)              {                  Log.Error("Error download file"' ex);              }              finally              {              }
Magic Number,CameraControl.Devices.Classes,HttpHelper,C:\repos\dukus_digiCamControl\CameraControl.Devices\Classes\HttpHelper.cs,DownLoadFileByWebRequest,The following statement contains a magic number: try              {                  HttpWebRequest request = null;                  HttpWebResponse response = null;                  request = (HttpWebRequest)WebRequest.Create(urlAddress);                  request.Timeout = 30000;  //8000 Not work                   response = (HttpWebResponse)request.GetResponse();                  Stream s = response.GetResponseStream();                  if (File.Exists(filePath))                  {                      File.Delete(filePath);                  }                    FileStream os = new FileStream(filePath' FileMode.OpenOrCreate' FileAccess.Write);                  byte[] buff = new byte[102400];                  int c = 0;                  int totalsize = 0;                  while ((c = s.Read(buff' 0' 102400)) > 0)                  {                      os.Write(buff' 0' c);                      os.Flush();                      totalsize += c;                      if (size > 0)                      {                          device.TransferProgress = (uint)(totalsize/(double)size*100.0);                      }                      else                      {                          device.TransferProgress += 1;                      }                                        }                  os.Close();                  s.Close();                  device.TransferProgress = 100;              }              catch(Exception ex)              {                  Log.Error("Error download file"' ex);              }              finally              {              }
Magic Number,CameraControl.Devices.Classes,HttpHelper,C:\repos\dukus_digiCamControl\CameraControl.Devices\Classes\HttpHelper.cs,DownLoadFileByWebRequest,The following statement contains a magic number: try              {                  HttpWebRequest request = null;                  HttpWebResponse response = null;                  request = (HttpWebRequest)WebRequest.Create(urlAddress);                  request.Timeout = 30000;  //8000 Not work                   response = (HttpWebResponse)request.GetResponse();                  Stream s = response.GetResponseStream();                  if (File.Exists(filePath))                  {                      File.Delete(filePath);                  }                    FileStream os = new FileStream(filePath' FileMode.OpenOrCreate' FileAccess.Write);                  byte[] buff = new byte[102400];                  int c = 0;                  int totalsize = 0;                  while ((c = s.Read(buff' 0' 102400)) > 0)                  {                      os.Write(buff' 0' c);                      os.Flush();                      totalsize += c;                      if (size > 0)                      {                          device.TransferProgress = (uint)(totalsize/(double)size*100.0);                      }                      else                      {                          device.TransferProgress += 1;                      }                                        }                  os.Close();                  s.Close();                  device.TransferProgress = 100;              }              catch(Exception ex)              {                  Log.Error("Error download file"' ex);              }              finally              {              }
Magic Number,CameraControl.Devices.Classes,HttpHelper,C:\repos\dukus_digiCamControl\CameraControl.Devices\Classes\HttpHelper.cs,DownLoadFileByWebRequest,The following statement contains a magic number: try              {                  HttpWebRequest request = null;                  HttpWebResponse response = null;                  request = (HttpWebRequest)WebRequest.Create(urlAddress);                  request.Timeout = 30000;  //8000 Not work                   response = (HttpWebResponse)request.GetResponse();                  Stream s = response.GetResponseStream();                  if (File.Exists(filePath))                  {                      File.Delete(filePath);                  }                    FileStream os = new FileStream(filePath' FileMode.OpenOrCreate' FileAccess.Write);                  byte[] buff = new byte[102400];                  int c = 0;                  int totalsize = 0;                  while ((c = s.Read(buff' 0' 102400)) > 0)                  {                      os.Write(buff' 0' c);                      os.Flush();                      totalsize += c;                      if (size > 0)                      {                          device.TransferProgress = (uint)(totalsize/(double)size*100.0);                      }                      else                      {                          device.TransferProgress += 1;                      }                                        }                  os.Close();                  s.Close();                  device.TransferProgress = 100;              }              catch(Exception ex)              {                  Log.Error("Error download file"' ex);              }              finally              {              }
Magic Number,CameraControl.Devices.Classes,PropertyValue<T>,C:\repos\dukus_digiCamControl\CameraControl.Devices\Classes\PropertyValue.cs,OnValueChanged,The following statement contains a magic number: thread.Join(200);
Magic Number,CameraControl.Devices.Classes,PropertyValue<T>,C:\repos\dukus_digiCamControl\CameraControl.Devices\Classes\PropertyValue.cs,OnValueChangedThread,The following statement contains a magic number: lock (_syncRoot)              {                  object[] objparams = obj as object[];                  bool retry;                  int retrynum = 5;                  do                  {                      retry = false;                      try                      {                          object sender = objparams[0];                          string key = objparams[1] as string;                          T val = (T)objparams[2];                          ValueChanged(sender' key' val);                      }                      catch (DeviceException exception)                      {                          if ((exception.ErrorCode == ErrorCodes.ERROR_BUSY ||                               exception.ErrorCode == ErrorCodes.MTP_Device_Busy) && retrynum > 0)                          {                              retrynum--;                              retry = true;                              Thread.Sleep(100);                          }                      }                  } while (retry);              }
Magic Number,CameraControl.Devices.Classes,PropertyValue<T>,C:\repos\dukus_digiCamControl\CameraControl.Devices\Classes\PropertyValue.cs,OnValueChangedThread,The following statement contains a magic number: lock (_syncRoot)              {                  object[] objparams = obj as object[];                  bool retry;                  int retrynum = 5;                  do                  {                      retry = false;                      try                      {                          object sender = objparams[0];                          string key = objparams[1] as string;                          T val = (T)objparams[2];                          ValueChanged(sender' key' val);                      }                      catch (DeviceException exception)                      {                          if ((exception.ErrorCode == ErrorCodes.ERROR_BUSY ||                               exception.ErrorCode == ErrorCodes.MTP_Device_Busy) && retrynum > 0)                          {                              retrynum--;                              retry = true;                              Thread.Sleep(100);                          }                      }                  } while (retry);              }
Magic Number,CameraControl.Devices.Classes,PropertyValue<T>,C:\repos\dukus_digiCamControl\CameraControl.Devices\Classes\PropertyValue.cs,OnValueChangedThread,The following statement contains a magic number: lock (_syncRoot)              {                  object[] objparams = obj as object[];                  bool retry;                  int retrynum = 5;                  do                  {                      retry = false;                      try                      {                          object sender = objparams[0];                          string key = objparams[1] as string;                          T val = (T)objparams[2];                          ValueChanged(sender' key' val);                      }                      catch (DeviceException exception)                      {                          if ((exception.ErrorCode == ErrorCodes.ERROR_BUSY ||                               exception.ErrorCode == ErrorCodes.MTP_Device_Busy) && retrynum > 0)                          {                              retrynum--;                              retry = true;                              Thread.Sleep(100);                          }                      }                  } while (retry);              }
Magic Number,CameraControl.Devices.Classes,PropertyValue<T>,C:\repos\dukus_digiCamControl\CameraControl.Devices\Classes\PropertyValue.cs,SetValue,The following statement contains a magic number: if (typeof(T) == typeof(long) && ba.Length == 2 && SubType == typeof(UInt16))              {                  long val = BitConverter.ToUInt16(ba' 0);                  SetValue((T)((object)val));                  return;              }
Magic Number,CameraControl.Devices.Classes,PropertyValue<T>,C:\repos\dukus_digiCamControl\CameraControl.Devices\Classes\PropertyValue.cs,SetValue,The following statement contains a magic number: if (typeof(T) == typeof(long) && ba.Length == 2)              {                  long val = BitConverter.ToInt16(ba' 0);                  SetValue((T)((object)val));                  return;              }
Magic Number,CameraControl.Devices.Classes,PropertyValue<T>,C:\repos\dukus_digiCamControl\CameraControl.Devices\Classes\PropertyValue.cs,SetValue,The following statement contains a magic number: if (typeof(T) == typeof(long) && ba.Length == 4)              {                  long val = BitConverter.ToUInt32(ba' 0);                  SetValue((T)((object)val));                  return;              }
Magic Number,CameraControl.Devices.Custom,CustomDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Custom\CustomDevice.cs,Init,The following statement contains a magic number: foreach (var property in description.Properties)              {                  if (!string.IsNullOrEmpty(property.Name))                  {                      try                      {                          MTPDataResponse result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' property.Code);                            ErrorCodes.GetException(result.ErrorCode);                          uint dataType = BitConverter.ToUInt16(result.Data' 2);                          int dataLength = StaticHelper.GetDataLength(dataType);                            var value = new PropertyValue<long> { Code = property.Code' Name = property.Name };                          foreach (var propertyValue in property.Values)                          {                              value.AddValues(propertyValue.Name' propertyValue.Value);                          }                          value.ValueChanged += value_ValueChanged;                                                    AdvancedProperties.Add(value);                      }                      catch (Exception ex)                      {                          Log.Error("Error ger property "' ex);                      }                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonD500,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,InitCompressionSetting,The following statement contains a magic number: _csTable = new Dictionary<int' string>()              {                  {0' "JPEG (BASIC)"}'                  {1' "JPEG (BASIC*)"}'                  {2' "JPEG (NORMAL)"}'                  {3' "JPEG (NORMAL*)"}'                  {4' "JPEG (FINE)"}'                  {5' "JPEG (FINE*)"}'                  {6' "TIFF (RGB)"}'                  {7' "RAW"}'                  {8' "RAW + JPEG (BASIC)"}'                  {9' "RAW + JPEG (BASIC*)"}'                  {10' "RAW + JPEG (NORMAL)"}'                  {11' "RAW + JPEG (NORMAL*)"}'                  {12' "RAW + JPEG (FINE)"}'                  {13' "RAW + JPEG (FINE*)"}              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,InitCompressionSetting,The following statement contains a magic number: _csTable = new Dictionary<int' string>()              {                  {0' "JPEG (BASIC)"}'                  {1' "JPEG (BASIC*)"}'                  {2' "JPEG (NORMAL)"}'                  {3' "JPEG (NORMAL*)"}'                  {4' "JPEG (FINE)"}'                  {5' "JPEG (FINE*)"}'                  {6' "TIFF (RGB)"}'                  {7' "RAW"}'                  {8' "RAW + JPEG (BASIC)"}'                  {9' "RAW + JPEG (BASIC*)"}'                  {10' "RAW + JPEG (NORMAL)"}'                  {11' "RAW + JPEG (NORMAL*)"}'                  {12' "RAW + JPEG (FINE)"}'                  {13' "RAW + JPEG (FINE*)"}              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,InitCompressionSetting,The following statement contains a magic number: _csTable = new Dictionary<int' string>()              {                  {0' "JPEG (BASIC)"}'                  {1' "JPEG (BASIC*)"}'                  {2' "JPEG (NORMAL)"}'                  {3' "JPEG (NORMAL*)"}'                  {4' "JPEG (FINE)"}'                  {5' "JPEG (FINE*)"}'                  {6' "TIFF (RGB)"}'                  {7' "RAW"}'                  {8' "RAW + JPEG (BASIC)"}'                  {9' "RAW + JPEG (BASIC*)"}'                  {10' "RAW + JPEG (NORMAL)"}'                  {11' "RAW + JPEG (NORMAL*)"}'                  {12' "RAW + JPEG (FINE)"}'                  {13' "RAW + JPEG (FINE*)"}              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,InitCompressionSetting,The following statement contains a magic number: _csTable = new Dictionary<int' string>()              {                  {0' "JPEG (BASIC)"}'                  {1' "JPEG (BASIC*)"}'                  {2' "JPEG (NORMAL)"}'                  {3' "JPEG (NORMAL*)"}'                  {4' "JPEG (FINE)"}'                  {5' "JPEG (FINE*)"}'                  {6' "TIFF (RGB)"}'                  {7' "RAW"}'                  {8' "RAW + JPEG (BASIC)"}'                  {9' "RAW + JPEG (BASIC*)"}'                  {10' "RAW + JPEG (NORMAL)"}'                  {11' "RAW + JPEG (NORMAL*)"}'                  {12' "RAW + JPEG (FINE)"}'                  {13' "RAW + JPEG (FINE*)"}              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,InitCompressionSetting,The following statement contains a magic number: _csTable = new Dictionary<int' string>()              {                  {0' "JPEG (BASIC)"}'                  {1' "JPEG (BASIC*)"}'                  {2' "JPEG (NORMAL)"}'                  {3' "JPEG (NORMAL*)"}'                  {4' "JPEG (FINE)"}'                  {5' "JPEG (FINE*)"}'                  {6' "TIFF (RGB)"}'                  {7' "RAW"}'                  {8' "RAW + JPEG (BASIC)"}'                  {9' "RAW + JPEG (BASIC*)"}'                  {10' "RAW + JPEG (NORMAL)"}'                  {11' "RAW + JPEG (NORMAL*)"}'                  {12' "RAW + JPEG (FINE)"}'                  {13' "RAW + JPEG (FINE*)"}              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,InitCompressionSetting,The following statement contains a magic number: _csTable = new Dictionary<int' string>()              {                  {0' "JPEG (BASIC)"}'                  {1' "JPEG (BASIC*)"}'                  {2' "JPEG (NORMAL)"}'                  {3' "JPEG (NORMAL*)"}'                  {4' "JPEG (FINE)"}'                  {5' "JPEG (FINE*)"}'                  {6' "TIFF (RGB)"}'                  {7' "RAW"}'                  {8' "RAW + JPEG (BASIC)"}'                  {9' "RAW + JPEG (BASIC*)"}'                  {10' "RAW + JPEG (NORMAL)"}'                  {11' "RAW + JPEG (NORMAL*)"}'                  {12' "RAW + JPEG (FINE)"}'                  {13' "RAW + JPEG (FINE*)"}              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,InitCompressionSetting,The following statement contains a magic number: _csTable = new Dictionary<int' string>()              {                  {0' "JPEG (BASIC)"}'                  {1' "JPEG (BASIC*)"}'                  {2' "JPEG (NORMAL)"}'                  {3' "JPEG (NORMAL*)"}'                  {4' "JPEG (FINE)"}'                  {5' "JPEG (FINE*)"}'                  {6' "TIFF (RGB)"}'                  {7' "RAW"}'                  {8' "RAW + JPEG (BASIC)"}'                  {9' "RAW + JPEG (BASIC*)"}'                  {10' "RAW + JPEG (NORMAL)"}'                  {11' "RAW + JPEG (NORMAL*)"}'                  {12' "RAW + JPEG (FINE)"}'                  {13' "RAW + JPEG (FINE*)"}              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,InitCompressionSetting,The following statement contains a magic number: _csTable = new Dictionary<int' string>()              {                  {0' "JPEG (BASIC)"}'                  {1' "JPEG (BASIC*)"}'                  {2' "JPEG (NORMAL)"}'                  {3' "JPEG (NORMAL*)"}'                  {4' "JPEG (FINE)"}'                  {5' "JPEG (FINE*)"}'                  {6' "TIFF (RGB)"}'                  {7' "RAW"}'                  {8' "RAW + JPEG (BASIC)"}'                  {9' "RAW + JPEG (BASIC*)"}'                  {10' "RAW + JPEG (NORMAL)"}'                  {11' "RAW + JPEG (NORMAL*)"}'                  {12' "RAW + JPEG (FINE)"}'                  {13' "RAW + JPEG (FINE*)"}              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,InitCompressionSetting,The following statement contains a magic number: _csTable = new Dictionary<int' string>()              {                  {0' "JPEG (BASIC)"}'                  {1' "JPEG (BASIC*)"}'                  {2' "JPEG (NORMAL)"}'                  {3' "JPEG (NORMAL*)"}'                  {4' "JPEG (FINE)"}'                  {5' "JPEG (FINE*)"}'                  {6' "TIFF (RGB)"}'                  {7' "RAW"}'                  {8' "RAW + JPEG (BASIC)"}'                  {9' "RAW + JPEG (BASIC*)"}'                  {10' "RAW + JPEG (NORMAL)"}'                  {11' "RAW + JPEG (NORMAL*)"}'                  {12' "RAW + JPEG (FINE)"}'                  {13' "RAW + JPEG (FINE*)"}              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,InitCompressionSetting,The following statement contains a magic number: _csTable = new Dictionary<int' string>()              {                  {0' "JPEG (BASIC)"}'                  {1' "JPEG (BASIC*)"}'                  {2' "JPEG (NORMAL)"}'                  {3' "JPEG (NORMAL*)"}'                  {4' "JPEG (FINE)"}'                  {5' "JPEG (FINE*)"}'                  {6' "TIFF (RGB)"}'                  {7' "RAW"}'                  {8' "RAW + JPEG (BASIC)"}'                  {9' "RAW + JPEG (BASIC*)"}'                  {10' "RAW + JPEG (NORMAL)"}'                  {11' "RAW + JPEG (NORMAL*)"}'                  {12' "RAW + JPEG (FINE)"}'                  {13' "RAW + JPEG (FINE*)"}              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,InitCompressionSetting,The following statement contains a magic number: _csTable = new Dictionary<int' string>()              {                  {0' "JPEG (BASIC)"}'                  {1' "JPEG (BASIC*)"}'                  {2' "JPEG (NORMAL)"}'                  {3' "JPEG (NORMAL*)"}'                  {4' "JPEG (FINE)"}'                  {5' "JPEG (FINE*)"}'                  {6' "TIFF (RGB)"}'                  {7' "RAW"}'                  {8' "RAW + JPEG (BASIC)"}'                  {9' "RAW + JPEG (BASIC*)"}'                  {10' "RAW + JPEG (NORMAL)"}'                  {11' "RAW + JPEG (NORMAL*)"}'                  {12' "RAW + JPEG (FINE)"}'                  {13' "RAW + JPEG (FINE*)"}              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,InitCompressionSetting,The following statement contains a magic number: _csTable = new Dictionary<int' string>()              {                  {0' "JPEG (BASIC)"}'                  {1' "JPEG (BASIC*)"}'                  {2' "JPEG (NORMAL)"}'                  {3' "JPEG (NORMAL*)"}'                  {4' "JPEG (FINE)"}'                  {5' "JPEG (FINE*)"}'                  {6' "TIFF (RGB)"}'                  {7' "RAW"}'                  {8' "RAW + JPEG (BASIC)"}'                  {9' "RAW + JPEG (BASIC*)"}'                  {10' "RAW + JPEG (NORMAL)"}'                  {11' "RAW + JPEG (NORMAL*)"}'                  {12' "RAW + JPEG (FINE)"}'                  {13' "RAW + JPEG (FINE*)"}              };
Magic Number,CameraControl.Devices.Nikon,NikonD600,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,InitExposureDelay,The following statement contains a magic number: res.AddValues("3 sec"' 3);
Magic Number,CameraControl.Devices.Nikon,NikonD600,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,InitExposureDelay,The following statement contains a magic number: res.AddValues("2 sec"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LiveViewImageWidth = ToInt16(result' 8);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LiveViewImageHeight = ToInt16(result' 10);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.ImageWidth = ToInt16(result' 12);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.ImageHeight = ToInt16(result' 14);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusFrameXSize = ToInt16(result' 24);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusFrameYSize = ToInt16(result' 26);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusX = ToInt16(result' 28);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusY = ToInt16(result' 30);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.Focused = result[48] != 1;
Magic Number,CameraControl.Devices.Nikon,NikonD7100,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.MovieIsRecording = result[68] == 1;
Magic Number,CameraControl.Devices.Nikon,NikonD7100,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.MovieTimeRemain = ToDeciaml(result' 64);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: if (result[37] == 1)                  viewData.Rotation = -90;
Magic Number,CameraControl.Devices.Nikon,NikonD7100,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: if (result[37] == 1)                  viewData.Rotation = -90;
Magic Number,CameraControl.Devices.Nikon,NikonD7100,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: if (result[37] == 2)                  viewData.Rotation = 90;
Magic Number,CameraControl.Devices.Nikon,NikonD7100,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: if (result[37] == 2)                  viewData.Rotation = 90;
Magic Number,CameraControl.Devices.Nikon,NikonD7100,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: if (result[37] == 2)                  viewData.Rotation = 90;
Magic Number,CameraControl.Devices.Nikon,NikonD7100,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LevelAngleRolling = ToInt16(result' 52);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundL = (int)(result[352] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundL = (int)(result[352] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundL = (int)(result[352] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundR = (int)(result[353] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundR = (int)(result[353] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundR = (int)(result[353] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundL = (int)(result[354] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundL = (int)(result[354] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundL = (int)(result[354] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundR = (int)(result[355] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundR = (int)(result[355] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundR = (int)(result[355] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SlowDownEventTimer,The following statement contains a magic number: _timer.Interval = 1000/10;
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SlowDownEventTimer,The following statement contains a magic number: _timer.Interval = 1000/10;
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SpeedUpEventTimer,The following statement contains a magic number: _timer.Interval = 1000/10;
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SpeedUpEventTimer,The following statement contains a magic number: _timer.Interval = 1000/10;
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetPictureControl,The following statement contains a magic number: if (result.Data != null && result.Data.Length > 30)              {                  control.IsLoaded = true;                  control.ItemNumber = slotnum;                  control.Monocrome = result.Data[1] == 1;                  control.CustomFlag = result.Data[2];                  string name = Encoding.ASCII.GetString(result.Data' 3' 20);                  control.RegistrationName = name.Contains("\0") ? name.Split('\0')[0] : name;                  if (!control.Monocrome)                  {                      control.QuickAdjustFlag = result.Data[23];                      control.QuickAdjust = (sbyte) result.Data[24];                      control.Saturation = (sbyte) result.Data[25];                      control.Hue = (sbyte) result.Data[26];                  }                  else                  {                      control.FilterEffects = result.Data[23];                      control.Toning = result.Data[24];                      control.ToningDensity = result.Data[25];                      //control.Hue = result.Data[27];                  }                  control.Sharpening = (sbyte) result.Data[27];                  control.Contrast = (sbyte) result.Data[28];                  control.Brightness = (sbyte) result.Data[29];                  control.CustomCurveFlag = result.Data[30];                  if (control.CustomCurveFlag == 1)                      result.Data.CopyTo(control.CustomCurveData' 31);              }              else              {                  return null;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetPictureControl,The following statement contains a magic number: if (result.Data != null && result.Data.Length > 30)              {                  control.IsLoaded = true;                  control.ItemNumber = slotnum;                  control.Monocrome = result.Data[1] == 1;                  control.CustomFlag = result.Data[2];                  string name = Encoding.ASCII.GetString(result.Data' 3' 20);                  control.RegistrationName = name.Contains("\0") ? name.Split('\0')[0] : name;                  if (!control.Monocrome)                  {                      control.QuickAdjustFlag = result.Data[23];                      control.QuickAdjust = (sbyte) result.Data[24];                      control.Saturation = (sbyte) result.Data[25];                      control.Hue = (sbyte) result.Data[26];                  }                  else                  {                      control.FilterEffects = result.Data[23];                      control.Toning = result.Data[24];                      control.ToningDensity = result.Data[25];                      //control.Hue = result.Data[27];                  }                  control.Sharpening = (sbyte) result.Data[27];                  control.Contrast = (sbyte) result.Data[28];                  control.Brightness = (sbyte) result.Data[29];                  control.CustomCurveFlag = result.Data[30];                  if (control.CustomCurveFlag == 1)                      result.Data.CopyTo(control.CustomCurveData' 31);              }              else              {                  return null;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetPictureControl,The following statement contains a magic number: if (result.Data != null && result.Data.Length > 30)              {                  control.IsLoaded = true;                  control.ItemNumber = slotnum;                  control.Monocrome = result.Data[1] == 1;                  control.CustomFlag = result.Data[2];                  string name = Encoding.ASCII.GetString(result.Data' 3' 20);                  control.RegistrationName = name.Contains("\0") ? name.Split('\0')[0] : name;                  if (!control.Monocrome)                  {                      control.QuickAdjustFlag = result.Data[23];                      control.QuickAdjust = (sbyte) result.Data[24];                      control.Saturation = (sbyte) result.Data[25];                      control.Hue = (sbyte) result.Data[26];                  }                  else                  {                      control.FilterEffects = result.Data[23];                      control.Toning = result.Data[24];                      control.ToningDensity = result.Data[25];                      //control.Hue = result.Data[27];                  }                  control.Sharpening = (sbyte) result.Data[27];                  control.Contrast = (sbyte) result.Data[28];                  control.Brightness = (sbyte) result.Data[29];                  control.CustomCurveFlag = result.Data[30];                  if (control.CustomCurveFlag == 1)                      result.Data.CopyTo(control.CustomCurveData' 31);              }              else              {                  return null;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetPictureControl,The following statement contains a magic number: if (result.Data != null && result.Data.Length > 30)              {                  control.IsLoaded = true;                  control.ItemNumber = slotnum;                  control.Monocrome = result.Data[1] == 1;                  control.CustomFlag = result.Data[2];                  string name = Encoding.ASCII.GetString(result.Data' 3' 20);                  control.RegistrationName = name.Contains("\0") ? name.Split('\0')[0] : name;                  if (!control.Monocrome)                  {                      control.QuickAdjustFlag = result.Data[23];                      control.QuickAdjust = (sbyte) result.Data[24];                      control.Saturation = (sbyte) result.Data[25];                      control.Hue = (sbyte) result.Data[26];                  }                  else                  {                      control.FilterEffects = result.Data[23];                      control.Toning = result.Data[24];                      control.ToningDensity = result.Data[25];                      //control.Hue = result.Data[27];                  }                  control.Sharpening = (sbyte) result.Data[27];                  control.Contrast = (sbyte) result.Data[28];                  control.Brightness = (sbyte) result.Data[29];                  control.CustomCurveFlag = result.Data[30];                  if (control.CustomCurveFlag == 1)                      result.Data.CopyTo(control.CustomCurveData' 31);              }              else              {                  return null;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetPictureControl,The following statement contains a magic number: if (result.Data != null && result.Data.Length > 30)              {                  control.IsLoaded = true;                  control.ItemNumber = slotnum;                  control.Monocrome = result.Data[1] == 1;                  control.CustomFlag = result.Data[2];                  string name = Encoding.ASCII.GetString(result.Data' 3' 20);                  control.RegistrationName = name.Contains("\0") ? name.Split('\0')[0] : name;                  if (!control.Monocrome)                  {                      control.QuickAdjustFlag = result.Data[23];                      control.QuickAdjust = (sbyte) result.Data[24];                      control.Saturation = (sbyte) result.Data[25];                      control.Hue = (sbyte) result.Data[26];                  }                  else                  {                      control.FilterEffects = result.Data[23];                      control.Toning = result.Data[24];                      control.ToningDensity = result.Data[25];                      //control.Hue = result.Data[27];                  }                  control.Sharpening = (sbyte) result.Data[27];                  control.Contrast = (sbyte) result.Data[28];                  control.Brightness = (sbyte) result.Data[29];                  control.CustomCurveFlag = result.Data[30];                  if (control.CustomCurveFlag == 1)                      result.Data.CopyTo(control.CustomCurveData' 31);              }              else              {                  return null;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetPictureControl,The following statement contains a magic number: if (result.Data != null && result.Data.Length > 30)              {                  control.IsLoaded = true;                  control.ItemNumber = slotnum;                  control.Monocrome = result.Data[1] == 1;                  control.CustomFlag = result.Data[2];                  string name = Encoding.ASCII.GetString(result.Data' 3' 20);                  control.RegistrationName = name.Contains("\0") ? name.Split('\0')[0] : name;                  if (!control.Monocrome)                  {                      control.QuickAdjustFlag = result.Data[23];                      control.QuickAdjust = (sbyte) result.Data[24];                      control.Saturation = (sbyte) result.Data[25];                      control.Hue = (sbyte) result.Data[26];                  }                  else                  {                      control.FilterEffects = result.Data[23];                      control.Toning = result.Data[24];                      control.ToningDensity = result.Data[25];                      //control.Hue = result.Data[27];                  }                  control.Sharpening = (sbyte) result.Data[27];                  control.Contrast = (sbyte) result.Data[28];                  control.Brightness = (sbyte) result.Data[29];                  control.CustomCurveFlag = result.Data[30];                  if (control.CustomCurveFlag == 1)                      result.Data.CopyTo(control.CustomCurveData' 31);              }              else              {                  return null;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetPictureControl,The following statement contains a magic number: if (result.Data != null && result.Data.Length > 30)              {                  control.IsLoaded = true;                  control.ItemNumber = slotnum;                  control.Monocrome = result.Data[1] == 1;                  control.CustomFlag = result.Data[2];                  string name = Encoding.ASCII.GetString(result.Data' 3' 20);                  control.RegistrationName = name.Contains("\0") ? name.Split('\0')[0] : name;                  if (!control.Monocrome)                  {                      control.QuickAdjustFlag = result.Data[23];                      control.QuickAdjust = (sbyte) result.Data[24];                      control.Saturation = (sbyte) result.Data[25];                      control.Hue = (sbyte) result.Data[26];                  }                  else                  {                      control.FilterEffects = result.Data[23];                      control.Toning = result.Data[24];                      control.ToningDensity = result.Data[25];                      //control.Hue = result.Data[27];                  }                  control.Sharpening = (sbyte) result.Data[27];                  control.Contrast = (sbyte) result.Data[28];                  control.Brightness = (sbyte) result.Data[29];                  control.CustomCurveFlag = result.Data[30];                  if (control.CustomCurveFlag == 1)                      result.Data.CopyTo(control.CustomCurveData' 31);              }              else              {                  return null;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetPictureControl,The following statement contains a magic number: if (result.Data != null && result.Data.Length > 30)              {                  control.IsLoaded = true;                  control.ItemNumber = slotnum;                  control.Monocrome = result.Data[1] == 1;                  control.CustomFlag = result.Data[2];                  string name = Encoding.ASCII.GetString(result.Data' 3' 20);                  control.RegistrationName = name.Contains("\0") ? name.Split('\0')[0] : name;                  if (!control.Monocrome)                  {                      control.QuickAdjustFlag = result.Data[23];                      control.QuickAdjust = (sbyte) result.Data[24];                      control.Saturation = (sbyte) result.Data[25];                      control.Hue = (sbyte) result.Data[26];                  }                  else                  {                      control.FilterEffects = result.Data[23];                      control.Toning = result.Data[24];                      control.ToningDensity = result.Data[25];                      //control.Hue = result.Data[27];                  }                  control.Sharpening = (sbyte) result.Data[27];                  control.Contrast = (sbyte) result.Data[28];                  control.Brightness = (sbyte) result.Data[29];                  control.CustomCurveFlag = result.Data[30];                  if (control.CustomCurveFlag == 1)                      result.Data.CopyTo(control.CustomCurveData' 31);              }              else              {                  return null;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetPictureControl,The following statement contains a magic number: if (result.Data != null && result.Data.Length > 30)              {                  control.IsLoaded = true;                  control.ItemNumber = slotnum;                  control.Monocrome = result.Data[1] == 1;                  control.CustomFlag = result.Data[2];                  string name = Encoding.ASCII.GetString(result.Data' 3' 20);                  control.RegistrationName = name.Contains("\0") ? name.Split('\0')[0] : name;                  if (!control.Monocrome)                  {                      control.QuickAdjustFlag = result.Data[23];                      control.QuickAdjust = (sbyte) result.Data[24];                      control.Saturation = (sbyte) result.Data[25];                      control.Hue = (sbyte) result.Data[26];                  }                  else                  {                      control.FilterEffects = result.Data[23];                      control.Toning = result.Data[24];                      control.ToningDensity = result.Data[25];                      //control.Hue = result.Data[27];                  }                  control.Sharpening = (sbyte) result.Data[27];                  control.Contrast = (sbyte) result.Data[28];                  control.Brightness = (sbyte) result.Data[29];                  control.CustomCurveFlag = result.Data[30];                  if (control.CustomCurveFlag == 1)                      result.Data.CopyTo(control.CustomCurveData' 31);              }              else              {                  return null;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetPictureControl,The following statement contains a magic number: if (result.Data != null && result.Data.Length > 30)              {                  control.IsLoaded = true;                  control.ItemNumber = slotnum;                  control.Monocrome = result.Data[1] == 1;                  control.CustomFlag = result.Data[2];                  string name = Encoding.ASCII.GetString(result.Data' 3' 20);                  control.RegistrationName = name.Contains("\0") ? name.Split('\0')[0] : name;                  if (!control.Monocrome)                  {                      control.QuickAdjustFlag = result.Data[23];                      control.QuickAdjust = (sbyte) result.Data[24];                      control.Saturation = (sbyte) result.Data[25];                      control.Hue = (sbyte) result.Data[26];                  }                  else                  {                      control.FilterEffects = result.Data[23];                      control.Toning = result.Data[24];                      control.ToningDensity = result.Data[25];                      //control.Hue = result.Data[27];                  }                  control.Sharpening = (sbyte) result.Data[27];                  control.Contrast = (sbyte) result.Data[28];                  control.Brightness = (sbyte) result.Data[29];                  control.CustomCurveFlag = result.Data[30];                  if (control.CustomCurveFlag == 1)                      result.Data.CopyTo(control.CustomCurveData' 31);              }              else              {                  return null;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetPictureControl,The following statement contains a magic number: if (result.Data != null && result.Data.Length > 30)              {                  control.IsLoaded = true;                  control.ItemNumber = slotnum;                  control.Monocrome = result.Data[1] == 1;                  control.CustomFlag = result.Data[2];                  string name = Encoding.ASCII.GetString(result.Data' 3' 20);                  control.RegistrationName = name.Contains("\0") ? name.Split('\0')[0] : name;                  if (!control.Monocrome)                  {                      control.QuickAdjustFlag = result.Data[23];                      control.QuickAdjust = (sbyte) result.Data[24];                      control.Saturation = (sbyte) result.Data[25];                      control.Hue = (sbyte) result.Data[26];                  }                  else                  {                      control.FilterEffects = result.Data[23];                      control.Toning = result.Data[24];                      control.ToningDensity = result.Data[25];                      //control.Hue = result.Data[27];                  }                  control.Sharpening = (sbyte) result.Data[27];                  control.Contrast = (sbyte) result.Data[28];                  control.Brightness = (sbyte) result.Data[29];                  control.CustomCurveFlag = result.Data[30];                  if (control.CustomCurveFlag == 1)                      result.Data.CopyTo(control.CustomCurveData' 31);              }              else              {                  return null;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetPictureControl,The following statement contains a magic number: if (result.Data != null && result.Data.Length > 30)              {                  control.IsLoaded = true;                  control.ItemNumber = slotnum;                  control.Monocrome = result.Data[1] == 1;                  control.CustomFlag = result.Data[2];                  string name = Encoding.ASCII.GetString(result.Data' 3' 20);                  control.RegistrationName = name.Contains("\0") ? name.Split('\0')[0] : name;                  if (!control.Monocrome)                  {                      control.QuickAdjustFlag = result.Data[23];                      control.QuickAdjust = (sbyte) result.Data[24];                      control.Saturation = (sbyte) result.Data[25];                      control.Hue = (sbyte) result.Data[26];                  }                  else                  {                      control.FilterEffects = result.Data[23];                      control.Toning = result.Data[24];                      control.ToningDensity = result.Data[25];                      //control.Hue = result.Data[27];                  }                  control.Sharpening = (sbyte) result.Data[27];                  control.Contrast = (sbyte) result.Data[28];                  control.Brightness = (sbyte) result.Data[29];                  control.CustomCurveFlag = result.Data[30];                  if (control.CustomCurveFlag == 1)                      result.Data.CopyTo(control.CustomCurveData' 31);              }              else              {                  return null;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetPictureControl,The following statement contains a magic number: if (result.Data != null && result.Data.Length > 30)              {                  control.IsLoaded = true;                  control.ItemNumber = slotnum;                  control.Monocrome = result.Data[1] == 1;                  control.CustomFlag = result.Data[2];                  string name = Encoding.ASCII.GetString(result.Data' 3' 20);                  control.RegistrationName = name.Contains("\0") ? name.Split('\0')[0] : name;                  if (!control.Monocrome)                  {                      control.QuickAdjustFlag = result.Data[23];                      control.QuickAdjust = (sbyte) result.Data[24];                      control.Saturation = (sbyte) result.Data[25];                      control.Hue = (sbyte) result.Data[26];                  }                  else                  {                      control.FilterEffects = result.Data[23];                      control.Toning = result.Data[24];                      control.ToningDensity = result.Data[25];                      //control.Hue = result.Data[27];                  }                  control.Sharpening = (sbyte) result.Data[27];                  control.Contrast = (sbyte) result.Data[28];                  control.Brightness = (sbyte) result.Data[29];                  control.CustomCurveFlag = result.Data[30];                  if (control.CustomCurveFlag == 1)                      result.Data.CopyTo(control.CustomCurveData' 31);              }              else              {                  return null;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetPictureControl,The following statement contains a magic number: if (result.Data != null && result.Data.Length > 30)              {                  control.IsLoaded = true;                  control.ItemNumber = slotnum;                  control.Monocrome = result.Data[1] == 1;                  control.CustomFlag = result.Data[2];                  string name = Encoding.ASCII.GetString(result.Data' 3' 20);                  control.RegistrationName = name.Contains("\0") ? name.Split('\0')[0] : name;                  if (!control.Monocrome)                  {                      control.QuickAdjustFlag = result.Data[23];                      control.QuickAdjust = (sbyte) result.Data[24];                      control.Saturation = (sbyte) result.Data[25];                      control.Hue = (sbyte) result.Data[26];                  }                  else                  {                      control.FilterEffects = result.Data[23];                      control.Toning = result.Data[24];                      control.ToningDensity = result.Data[25];                      //control.Hue = result.Data[27];                  }                  control.Sharpening = (sbyte) result.Data[27];                  control.Contrast = (sbyte) result.Data[28];                  control.Brightness = (sbyte) result.Data[29];                  control.CustomCurveFlag = result.Data[30];                  if (control.CustomCurveFlag == 1)                      result.Data.CopyTo(control.CustomCurveData' 31);              }              else              {                  return null;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetPictureControl,The following statement contains a magic number: if (result.Data != null && result.Data.Length > 30)              {                  control.IsLoaded = true;                  control.ItemNumber = slotnum;                  control.Monocrome = result.Data[1] == 1;                  control.CustomFlag = result.Data[2];                  string name = Encoding.ASCII.GetString(result.Data' 3' 20);                  control.RegistrationName = name.Contains("\0") ? name.Split('\0')[0] : name;                  if (!control.Monocrome)                  {                      control.QuickAdjustFlag = result.Data[23];                      control.QuickAdjust = (sbyte) result.Data[24];                      control.Saturation = (sbyte) result.Data[25];                      control.Hue = (sbyte) result.Data[26];                  }                  else                  {                      control.FilterEffects = result.Data[23];                      control.Toning = result.Data[24];                      control.ToningDensity = result.Data[25];                      //control.Hue = result.Data[27];                  }                  control.Sharpening = (sbyte) result.Data[27];                  control.Contrast = (sbyte) result.Data[28];                  control.Brightness = (sbyte) result.Data[29];                  control.CustomCurveFlag = result.Data[30];                  if (control.CustomCurveFlag == 1)                      result.Data.CopyTo(control.CustomCurveData' 31);              }              else              {                  return null;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetPictureControl,The following statement contains a magic number: if (result.Data != null && result.Data.Length > 30)              {                  control.IsLoaded = true;                  control.ItemNumber = slotnum;                  control.Monocrome = result.Data[1] == 1;                  control.CustomFlag = result.Data[2];                  string name = Encoding.ASCII.GetString(result.Data' 3' 20);                  control.RegistrationName = name.Contains("\0") ? name.Split('\0')[0] : name;                  if (!control.Monocrome)                  {                      control.QuickAdjustFlag = result.Data[23];                      control.QuickAdjust = (sbyte) result.Data[24];                      control.Saturation = (sbyte) result.Data[25];                      control.Hue = (sbyte) result.Data[26];                  }                  else                  {                      control.FilterEffects = result.Data[23];                      control.Toning = result.Data[24];                      control.ToningDensity = result.Data[25];                      //control.Hue = result.Data[27];                  }                  control.Sharpening = (sbyte) result.Data[27];                  control.Contrast = (sbyte) result.Data[28];                  control.Brightness = (sbyte) result.Data[29];                  control.CustomCurveFlag = result.Data[30];                  if (control.CustomCurveFlag == 1)                      result.Data.CopyTo(control.CustomCurveData' 31);              }              else              {                  return null;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,Init,The following statement contains a magic number: try              {                  IsBusy = true;                  Capabilities.Add(CapabilityEnum.CaptureInRam);                  Capabilities.Add(CapabilityEnum.CaptureNoAf);                  StillImageDevice = deviceDescriptor.StillImageDevice;                  // check if is mtp device                   StillImageDevice imageDevice = StillImageDevice as StillImageDevice;                  if (imageDevice != null)                      imageDevice.DeviceEvent += _stillImageDevice_DeviceEvent;                  HaveLiveView = true;                  DeviceReady();                  DeviceName = StillImageDevice.Model;                  Manufacturer = StillImageDevice.Manufacturer;                  IsConnected = true;                  CaptureInSdRam = true;                  PropertyChanged += NikonBase_PropertyChanged;                  var ser = StillImageDevice.SerialNumber;                  Log.Debug("Serial number" + ser ?? "");                  if (ser != null && ser.Length >= 7)                  {                      SerialNumber = ser.Substring(0' 7);                      // there in some cases the leading zero order differs                      if (SerialNumber == "0000000")                      {                          SerialNumber =  ser.Substring(ser.Length-7'7);                          }                  }                  // load advanced properties in a separated thread to speed up camera connection                  var thread = new Thread(LoadProperties) {Priority = ThreadPriority.Lowest};                  thread.Start();              }              catch (Exception exception)              {                  Log.Error("Error initialize device"' exception);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,Init,The following statement contains a magic number: try              {                  IsBusy = true;                  Capabilities.Add(CapabilityEnum.CaptureInRam);                  Capabilities.Add(CapabilityEnum.CaptureNoAf);                  StillImageDevice = deviceDescriptor.StillImageDevice;                  // check if is mtp device                   StillImageDevice imageDevice = StillImageDevice as StillImageDevice;                  if (imageDevice != null)                      imageDevice.DeviceEvent += _stillImageDevice_DeviceEvent;                  HaveLiveView = true;                  DeviceReady();                  DeviceName = StillImageDevice.Model;                  Manufacturer = StillImageDevice.Manufacturer;                  IsConnected = true;                  CaptureInSdRam = true;                  PropertyChanged += NikonBase_PropertyChanged;                  var ser = StillImageDevice.SerialNumber;                  Log.Debug("Serial number" + ser ?? "");                  if (ser != null && ser.Length >= 7)                  {                      SerialNumber = ser.Substring(0' 7);                      // there in some cases the leading zero order differs                      if (SerialNumber == "0000000")                      {                          SerialNumber =  ser.Substring(ser.Length-7'7);                          }                  }                  // load advanced properties in a separated thread to speed up camera connection                  var thread = new Thread(LoadProperties) {Priority = ThreadPriority.Lowest};                  thread.Start();              }              catch (Exception exception)              {                  Log.Error("Error initialize device"' exception);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,Init,The following statement contains a magic number: try              {                  IsBusy = true;                  Capabilities.Add(CapabilityEnum.CaptureInRam);                  Capabilities.Add(CapabilityEnum.CaptureNoAf);                  StillImageDevice = deviceDescriptor.StillImageDevice;                  // check if is mtp device                   StillImageDevice imageDevice = StillImageDevice as StillImageDevice;                  if (imageDevice != null)                      imageDevice.DeviceEvent += _stillImageDevice_DeviceEvent;                  HaveLiveView = true;                  DeviceReady();                  DeviceName = StillImageDevice.Model;                  Manufacturer = StillImageDevice.Manufacturer;                  IsConnected = true;                  CaptureInSdRam = true;                  PropertyChanged += NikonBase_PropertyChanged;                  var ser = StillImageDevice.SerialNumber;                  Log.Debug("Serial number" + ser ?? "");                  if (ser != null && ser.Length >= 7)                  {                      SerialNumber = ser.Substring(0' 7);                      // there in some cases the leading zero order differs                      if (SerialNumber == "0000000")                      {                          SerialNumber =  ser.Substring(ser.Length-7'7);                          }                  }                  // load advanced properties in a separated thread to speed up camera connection                  var thread = new Thread(LoadProperties) {Priority = ThreadPriority.Lowest};                  thread.Start();              }              catch (Exception exception)              {                  Log.Error("Error initialize device"' exception);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,Init,The following statement contains a magic number: try              {                  IsBusy = true;                  Capabilities.Add(CapabilityEnum.CaptureInRam);                  Capabilities.Add(CapabilityEnum.CaptureNoAf);                  StillImageDevice = deviceDescriptor.StillImageDevice;                  // check if is mtp device                   StillImageDevice imageDevice = StillImageDevice as StillImageDevice;                  if (imageDevice != null)                      imageDevice.DeviceEvent += _stillImageDevice_DeviceEvent;                  HaveLiveView = true;                  DeviceReady();                  DeviceName = StillImageDevice.Model;                  Manufacturer = StillImageDevice.Manufacturer;                  IsConnected = true;                  CaptureInSdRam = true;                  PropertyChanged += NikonBase_PropertyChanged;                  var ser = StillImageDevice.SerialNumber;                  Log.Debug("Serial number" + ser ?? "");                  if (ser != null && ser.Length >= 7)                  {                      SerialNumber = ser.Substring(0' 7);                      // there in some cases the leading zero order differs                      if (SerialNumber == "0000000")                      {                          SerialNumber =  ser.Substring(ser.Length-7'7);                          }                  }                  // load advanced properties in a separated thread to speed up camera connection                  var thread = new Thread(LoadProperties) {Priority = ThreadPriority.Lowest};                  thread.Start();              }              catch (Exception exception)              {                  Log.Error("Error initialize device"' exception);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ActiveSlot,The following statement contains a magic number: res.AddValues("SD slot"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ActiveSlot,The following statement contains a magic number: res.AddValues("CF slot & SD slot"' 3);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,FlashSyncSpeed,The following statement contains a magic number: res.AddValues("1/250 sec."' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,FlashSyncSpeed,The following statement contains a magic number: res.AddValues("1/200 sec."' 3);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,FlashSyncSpeed,The following statement contains a magic number: res.AddValues("1/160 sec."' 4);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,FlashSyncSpeed,The following statement contains a magic number: res.AddValues("1/125 sec."' 5);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,FlashSyncSpeed,The following statement contains a magic number: res.AddValues("1/100 sec."' 6);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,FlashSyncSpeed,The following statement contains a magic number: res.AddValues("1/80 sec."' 7);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,FlashSyncSpeed,The following statement contains a magic number: res.AddValues("1/60 sec."' 8);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,HDRSmoothing,The following statement contains a magic number: res.AddValues("Low"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,HDRSmoothing,The following statement contains a magic number: res.AddValues("Auto"' 3);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,HDRSmoothing,The following statement contains a magic number: res.AddValues("Extra high"' 4);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,HDREv,The following statement contains a magic number: res.AddValues("2 EV"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,HDREv,The following statement contains a magic number: res.AddValues("3 EV"' 3);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,HDRMode,The following statement contains a magic number: res.AddValues("ON (sequence)"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ActiveDLighting,The following statement contains a magic number: res.AddValues("Normal"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ActiveDLighting,The following statement contains a magic number: res.AddValues("Low"' 3);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ActiveDLighting,The following statement contains a magic number: res.AddValues("Not performed"' 4);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ActiveDLighting,The following statement contains a magic number: res.AddValues("Auto"' 5);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,CaptureAreaCrop,The following statement contains a magic number: res.AddValues("5:4 (30x24)"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,CaptureAreaCrop,The following statement contains a magic number: res.AddValues("1.2x (30x20)"' 3);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,FlashCompensation,The following statement contains a magic number: for (decimal i = -18; i <= 18; i++)              {                  if (i > 0)                      res.AddValues("+"+Decimal.Round(i/6' 1).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"))' (long) i);                  else                      res.AddValues(Decimal.Round(i / 6' 1).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"))' (long)i);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,FlashCompensation,The following statement contains a magic number: for (decimal i = -18; i <= 18; i++)              {                  if (i > 0)                      res.AddValues("+"+Decimal.Round(i/6' 1).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"))' (long) i);                  else                      res.AddValues(Decimal.Round(i / 6' 1).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"))' (long)i);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,FlashCompensation,The following statement contains a magic number: for (decimal i = -18; i <= 18; i++)              {                  if (i > 0)                      res.AddValues("+"+Decimal.Round(i/6' 1).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"))' (long) i);                  else                      res.AddValues(Decimal.Round(i / 6' 1).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"))' (long)i);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,FlashCompensation,The following statement contains a magic number: for (decimal i = -18; i <= 18; i++)              {                  if (i > 0)                      res.AddValues("+"+Decimal.Round(i/6' 1).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"))' (long) i);                  else                      res.AddValues(Decimal.Round(i / 6' 1).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"))' (long)i);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,CenterWeightedExRange,The following statement contains a magic number: res.AddValues("10 mm"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,CenterWeightedExRange,The following statement contains a magic number: res.AddValues("10 mm"' 3);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,CenterWeightedExRange,The following statement contains a magic number: res.AddValues("Average on the entire screen"' 4);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitAutoIsoHight,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 1;                  res.Name = "ISO Auto High Limit";                  res.SubType = typeof (byte);                  res.Code = CONST_PROP_ISOAutoHighLimit;                  res.ValueChanged +=                      (sender' key' val) =>                          SetProperty(CONST_CMD_SetDevicePropValue' new[] { (byte)val }' res.Code);                    var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                      CONST_PROP_ISOAutoHighLimit);                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2*datasize) + 5];                  byte defval = result.Data[datasize + 5];                    foreach (KeyValuePair<byte' string> pair in _autoIsoTable)                  {                      res.AddValues(pair.Value' pair.Key);                  }                  res.ReloadValues();                  res.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitAutoIsoHight,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 1;                  res.Name = "ISO Auto High Limit";                  res.SubType = typeof (byte);                  res.Code = CONST_PROP_ISOAutoHighLimit;                  res.ValueChanged +=                      (sender' key' val) =>                          SetProperty(CONST_CMD_SetDevicePropValue' new[] { (byte)val }' res.Code);                    var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                      CONST_PROP_ISOAutoHighLimit);                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2*datasize) + 5];                  byte defval = result.Data[datasize + 5];                    foreach (KeyValuePair<byte' string> pair in _autoIsoTable)                  {                      res.AddValues(pair.Value' pair.Key);                  }                  res.ReloadValues();                  res.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitAutoIsoHight,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 1;                  res.Name = "ISO Auto High Limit";                  res.SubType = typeof (byte);                  res.Code = CONST_PROP_ISOAutoHighLimit;                  res.ValueChanged +=                      (sender' key' val) =>                          SetProperty(CONST_CMD_SetDevicePropValue' new[] { (byte)val }' res.Code);                    var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                      CONST_PROP_ISOAutoHighLimit);                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2*datasize) + 5];                  byte defval = result.Data[datasize + 5];                    foreach (KeyValuePair<byte' string> pair in _autoIsoTable)                  {                      res.AddValues(pair.Value' pair.Key);                  }                  res.ReloadValues();                  res.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitAutoIsoHight,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 1;                  res.Name = "ISO Auto High Limit";                  res.SubType = typeof (byte);                  res.Code = CONST_PROP_ISOAutoHighLimit;                  res.ValueChanged +=                      (sender' key' val) =>                          SetProperty(CONST_CMD_SetDevicePropValue' new[] { (byte)val }' res.Code);                    var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                      CONST_PROP_ISOAutoHighLimit);                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2*datasize) + 5];                  byte defval = result.Data[datasize + 5];                    foreach (KeyValuePair<byte' string> pair in _autoIsoTable)                  {                      res.AddValues(pair.Value' pair.Key);                  }                  res.ReloadValues();                  res.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbTuneFluorescentType,The following statement contains a magic number: PropertyValue<long> res = new PropertyValue<long>()                                            {                                                Name = "Fluorescent light type"'                                                IsEnabled = WhiteBalance.NumericValue == 5'                                                Code = CONST_PROP_WbTuneFluorescentType'                                                SubType = typeof (byte)'                                                DisableIfWrongValue = false                                            };
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbTuneFluorescentType,The following statement contains a magic number: res.AddValues("Warm white fluorescent lamp"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbTuneFluorescentType,The following statement contains a magic number: res.AddValues("White fluorescent lamp"' 3);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbTuneFluorescentType,The following statement contains a magic number: res.AddValues("Day white fluorescent lamp"' 4);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbTuneFluorescentType,The following statement contains a magic number: res.AddValues("Daylight fluorescent lamp"' 5);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbTuneFluorescentType,The following statement contains a magic number: res.AddValues("High color-temperature mercury lamp"' 6);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: PropertyValue<long> res = new PropertyValue<long>()              {                  Name = "Temperature"'                  IsEnabled = WhiteBalance.NumericValue == 32786'                  Code = CONST_PROP_WbColorTemp'                  SubType = typeof (byte)'                  DisableIfWrongValue = false              };
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("2630 K"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("2700 K"' 3);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("2780 K"' 4);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("2860 K"' 5);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("2940 K"' 6);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("3030 K"' 7);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("3130 K"' 8);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("3230 K"' 9);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("3330 K"' 10);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("3450 K"' 11);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("3570 K"' 12);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("3700 K"' 13);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("3850 K"' 14);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("4000 K"' 15);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("4170 K"' 16);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("4350 K"' 17);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("4550 K"' 18);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("4760 K"' 19);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("5000 K"' 20);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("5260 K"' 21);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("5560 K"' 22);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("5880 K"' 23);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("6250 K"' 24);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("6670 K"' 25);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("7140 K"' 26);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("7690 K"' 27);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("8330 K"' 28);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("9090 K"' 29);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("10000 K"' 30);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitPictControl,The following statement contains a magic number: res.AddValues("Neutral"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitPictControl,The following statement contains a magic number: res.AddValues("Vivid"' 3);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitPictControl,The following statement contains a magic number: res.AddValues("Monochrome"' 4);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitPictControl,The following statement contains a magic number: res.AddValues("Portrait"' 5);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitPictControl,The following statement contains a magic number: res.AddValues("Landscape"' 6);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitPictControl,The following statement contains a magic number: try              {                  for (byte i = 201; i < 210; i++)                  {                      PictureControl control = GetPictureControl(i);                      if (control != null && (control.IsLoaded && !string.IsNullOrWhiteSpace(control.RegistrationName)))                          res.AddValues(control.RegistrationName' i);                      else                          res.AddValues("Custom picture control " + (i - 200)' i);                  }              }              catch (Exception)              {                                }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitPictControl,The following statement contains a magic number: try              {                  for (byte i = 201; i < 210; i++)                  {                      PictureControl control = GetPictureControl(i);                      if (control != null && (control.IsLoaded && !string.IsNullOrWhiteSpace(control.RegistrationName)))                          res.AddValues(control.RegistrationName' i);                      else                          res.AddValues("Custom picture control " + (i - 200)' i);                  }              }              catch (Exception)              {                                }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitPictControl,The following statement contains a magic number: try              {                  for (byte i = 201; i < 210; i++)                  {                      PictureControl control = GetPictureControl(i);                      if (control != null && (control.IsLoaded && !string.IsNullOrWhiteSpace(control.RegistrationName)))                          res.AddValues(control.RegistrationName' i);                      else                          res.AddValues("Custom picture control " + (i - 200)' i);                  }              }              catch (Exception)              {                                }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitImageSize,The following statement contains a magic number: if (result.Data != null && result.Data.Length > 112)              {                  res.AddValues(Encoding.Unicode.GetString(result.Data' 51' 20)' 0);                  res.AddValues(Encoding.Unicode.GetString(result.Data' 72' 20)' 0);                  res.AddValues(Encoding.Unicode.GetString(result.Data' 93' 20)' 0);                  res.SetValue(Encoding.Unicode.GetString(result.Data' 27' 20)' false);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitImageSize,The following statement contains a magic number: if (result.Data != null && result.Data.Length > 112)              {                  res.AddValues(Encoding.Unicode.GetString(result.Data' 51' 20)' 0);                  res.AddValues(Encoding.Unicode.GetString(result.Data' 72' 20)' 0);                  res.AddValues(Encoding.Unicode.GetString(result.Data' 93' 20)' 0);                  res.SetValue(Encoding.Unicode.GetString(result.Data' 27' 20)' false);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitImageSize,The following statement contains a magic number: if (result.Data != null && result.Data.Length > 112)              {                  res.AddValues(Encoding.Unicode.GetString(result.Data' 51' 20)' 0);                  res.AddValues(Encoding.Unicode.GetString(result.Data' 72' 20)' 0);                  res.AddValues(Encoding.Unicode.GetString(result.Data' 93' 20)' 0);                  res.SetValue(Encoding.Unicode.GetString(result.Data' 27' 20)' false);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitImageSize,The following statement contains a magic number: if (result.Data != null && result.Data.Length > 112)              {                  res.AddValues(Encoding.Unicode.GetString(result.Data' 51' 20)' 0);                  res.AddValues(Encoding.Unicode.GetString(result.Data' 72' 20)' 0);                  res.AddValues(Encoding.Unicode.GetString(result.Data' 93' 20)' 0);                  res.SetValue(Encoding.Unicode.GetString(result.Data' 27' 20)' false);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitImageSize,The following statement contains a magic number: if (result.Data != null && result.Data.Length > 112)              {                  res.AddValues(Encoding.Unicode.GetString(result.Data' 51' 20)' 0);                  res.AddValues(Encoding.Unicode.GetString(result.Data' 72' 20)' 0);                  res.AddValues(Encoding.Unicode.GetString(result.Data' 93' 20)' 0);                  res.SetValue(Encoding.Unicode.GetString(result.Data' 27' 20)' false);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitImageSize,The following statement contains a magic number: if (result.Data != null && result.Data.Length > 112)              {                  res.AddValues(Encoding.Unicode.GetString(result.Data' 51' 20)' 0);                  res.AddValues(Encoding.Unicode.GetString(result.Data' 72' 20)' 0);                  res.AddValues(Encoding.Unicode.GetString(result.Data' 93' 20)' 0);                  res.SetValue(Encoding.Unicode.GetString(result.Data' 27' 20)' false);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitImageSize,The following statement contains a magic number: if (result.Data != null && result.Data.Length > 112)              {                  res.AddValues(Encoding.Unicode.GetString(result.Data' 51' 20)' 0);                  res.AddValues(Encoding.Unicode.GetString(result.Data' 72' 20)' 0);                  res.AddValues(Encoding.Unicode.GetString(result.Data' 93' 20)' 0);                  res.SetValue(Encoding.Unicode.GetString(result.Data' 27' 20)' false);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitImageSize,The following statement contains a magic number: if (result.Data != null && result.Data.Length > 112)              {                  res.AddValues(Encoding.Unicode.GetString(result.Data' 51' 20)' 0);                  res.AddValues(Encoding.Unicode.GetString(result.Data' 72' 20)' 0);                  res.AddValues(Encoding.Unicode.GetString(result.Data' 93' 20)' 0);                  res.SetValue(Encoding.Unicode.GetString(result.Data' 27' 20)' false);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitImageSize,The following statement contains a magic number: if (result.Data != null && result.Data.Length > 112)              {                  res.AddValues(Encoding.Unicode.GetString(result.Data' 51' 20)' 0);                  res.AddValues(Encoding.Unicode.GetString(result.Data' 72' 20)' 0);                  res.AddValues(Encoding.Unicode.GetString(result.Data' 93' 20)' 0);                  res.SetValue(Encoding.Unicode.GetString(result.Data' 27' 20)' false);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ImageSize_ValueChanged,The following statement contains a magic number: List<byte> vals = new List<byte>() {10};
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitRawQuality,The following statement contains a magic number: res.AddValues("Uncompressed RAW"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitBurstNumber,The following statement contains a magic number: for (int i = 1; i < 100; i++)              {                  res.AddValues(i.ToString()' i);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitNRHiIso,The following statement contains a magic number: res.AddValues("Normal"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitNRHiIso,The following statement contains a magic number: res.AddValues("High"' 3);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitOther,The following statement contains a magic number: LiveViewImageZoomRatio.AddValues("33%"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitOther,The following statement contains a magic number: LiveViewImageZoomRatio.AddValues("50%"' 3);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitOther,The following statement contains a magic number: LiveViewImageZoomRatio.AddValues("66%"' 4);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitOther,The following statement contains a magic number: LiveViewImageZoomRatio.AddValues("100%"' 5);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitOther,The following statement contains a magic number: LiveViewImageZoomRatio.AddValues("200%"' 6);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitIso,The following statement contains a magic number: lock (Locker)              {                  NormalIsoNumber = new PropertyValue<long>();                  NormalIsoNumber.Name = "IsoNumber";                  NormalIsoNumber.SubType = typeof (int);                  NormalIsoNumber.ValueChanged += IsoNumber_ValueChanged;                  NormalIsoNumber.Clear();                  try                  {                      DeviceReady();                      MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_ExposureIndex);                      //IsoNumber.IsEnabled = result.Data[4] == 1;                      UInt16 defval = BitConverter.ToUInt16(result.Data' 7);                      for (int i = 0; i < result.Data.Length - 12; i += 2)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' 12 + i);                          NormalIsoNumber.AddValues(_isoTable.ContainsKey(val) ? _isoTable[val] : val.ToString()' val);                      }                      NormalIsoNumber.ReloadValues();                      NormalIsoNumber.SetValue(defval' false);                      IsoNumber = NormalIsoNumber;                  }                  catch (Exception)                  {                      NormalIsoNumber.IsEnabled = false;                  }                    MovieIsoNumber = new PropertyValue<long>();                  MovieIsoNumber.Name = "IsoNumber";                  MovieIsoNumber.SubType = typeof (int);                  MovieIsoNumber.ValueChanged += MovieIsoNumber_ValueChanged;                  MovieIsoNumber.Clear();                  try                  {                      MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieExposureIndex);                      //IsoNumber.IsEnabled = result.Data[4] == 1;                      UInt16 defval = BitConverter.ToUInt16(result.Data' 7);                      for (int i = 0; i < result.Data.Length - 12; i += 2)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' 12 + i);                          MovieIsoNumber.AddValues(_isoTable.ContainsKey(val) ? _isoTable[val] : val.ToString(CultureInfo.InvariantCulture)' val);                      }                      MovieIsoNumber.ReloadValues();                      MovieIsoNumber.SetValue(defval' false);                  }                  catch (Exception)                  {                      MovieIsoNumber.IsEnabled = false;                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitIso,The following statement contains a magic number: lock (Locker)              {                  NormalIsoNumber = new PropertyValue<long>();                  NormalIsoNumber.Name = "IsoNumber";                  NormalIsoNumber.SubType = typeof (int);                  NormalIsoNumber.ValueChanged += IsoNumber_ValueChanged;                  NormalIsoNumber.Clear();                  try                  {                      DeviceReady();                      MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_ExposureIndex);                      //IsoNumber.IsEnabled = result.Data[4] == 1;                      UInt16 defval = BitConverter.ToUInt16(result.Data' 7);                      for (int i = 0; i < result.Data.Length - 12; i += 2)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' 12 + i);                          NormalIsoNumber.AddValues(_isoTable.ContainsKey(val) ? _isoTable[val] : val.ToString()' val);                      }                      NormalIsoNumber.ReloadValues();                      NormalIsoNumber.SetValue(defval' false);                      IsoNumber = NormalIsoNumber;                  }                  catch (Exception)                  {                      NormalIsoNumber.IsEnabled = false;                  }                    MovieIsoNumber = new PropertyValue<long>();                  MovieIsoNumber.Name = "IsoNumber";                  MovieIsoNumber.SubType = typeof (int);                  MovieIsoNumber.ValueChanged += MovieIsoNumber_ValueChanged;                  MovieIsoNumber.Clear();                  try                  {                      MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieExposureIndex);                      //IsoNumber.IsEnabled = result.Data[4] == 1;                      UInt16 defval = BitConverter.ToUInt16(result.Data' 7);                      for (int i = 0; i < result.Data.Length - 12; i += 2)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' 12 + i);                          MovieIsoNumber.AddValues(_isoTable.ContainsKey(val) ? _isoTable[val] : val.ToString(CultureInfo.InvariantCulture)' val);                      }                      MovieIsoNumber.ReloadValues();                      MovieIsoNumber.SetValue(defval' false);                  }                  catch (Exception)                  {                      MovieIsoNumber.IsEnabled = false;                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitIso,The following statement contains a magic number: lock (Locker)              {                  NormalIsoNumber = new PropertyValue<long>();                  NormalIsoNumber.Name = "IsoNumber";                  NormalIsoNumber.SubType = typeof (int);                  NormalIsoNumber.ValueChanged += IsoNumber_ValueChanged;                  NormalIsoNumber.Clear();                  try                  {                      DeviceReady();                      MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_ExposureIndex);                      //IsoNumber.IsEnabled = result.Data[4] == 1;                      UInt16 defval = BitConverter.ToUInt16(result.Data' 7);                      for (int i = 0; i < result.Data.Length - 12; i += 2)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' 12 + i);                          NormalIsoNumber.AddValues(_isoTable.ContainsKey(val) ? _isoTable[val] : val.ToString()' val);                      }                      NormalIsoNumber.ReloadValues();                      NormalIsoNumber.SetValue(defval' false);                      IsoNumber = NormalIsoNumber;                  }                  catch (Exception)                  {                      NormalIsoNumber.IsEnabled = false;                  }                    MovieIsoNumber = new PropertyValue<long>();                  MovieIsoNumber.Name = "IsoNumber";                  MovieIsoNumber.SubType = typeof (int);                  MovieIsoNumber.ValueChanged += MovieIsoNumber_ValueChanged;                  MovieIsoNumber.Clear();                  try                  {                      MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieExposureIndex);                      //IsoNumber.IsEnabled = result.Data[4] == 1;                      UInt16 defval = BitConverter.ToUInt16(result.Data' 7);                      for (int i = 0; i < result.Data.Length - 12; i += 2)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' 12 + i);                          MovieIsoNumber.AddValues(_isoTable.ContainsKey(val) ? _isoTable[val] : val.ToString(CultureInfo.InvariantCulture)' val);                      }                      MovieIsoNumber.ReloadValues();                      MovieIsoNumber.SetValue(defval' false);                  }                  catch (Exception)                  {                      MovieIsoNumber.IsEnabled = false;                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitIso,The following statement contains a magic number: lock (Locker)              {                  NormalIsoNumber = new PropertyValue<long>();                  NormalIsoNumber.Name = "IsoNumber";                  NormalIsoNumber.SubType = typeof (int);                  NormalIsoNumber.ValueChanged += IsoNumber_ValueChanged;                  NormalIsoNumber.Clear();                  try                  {                      DeviceReady();                      MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_ExposureIndex);                      //IsoNumber.IsEnabled = result.Data[4] == 1;                      UInt16 defval = BitConverter.ToUInt16(result.Data' 7);                      for (int i = 0; i < result.Data.Length - 12; i += 2)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' 12 + i);                          NormalIsoNumber.AddValues(_isoTable.ContainsKey(val) ? _isoTable[val] : val.ToString()' val);                      }                      NormalIsoNumber.ReloadValues();                      NormalIsoNumber.SetValue(defval' false);                      IsoNumber = NormalIsoNumber;                  }                  catch (Exception)                  {                      NormalIsoNumber.IsEnabled = false;                  }                    MovieIsoNumber = new PropertyValue<long>();                  MovieIsoNumber.Name = "IsoNumber";                  MovieIsoNumber.SubType = typeof (int);                  MovieIsoNumber.ValueChanged += MovieIsoNumber_ValueChanged;                  MovieIsoNumber.Clear();                  try                  {                      MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieExposureIndex);                      //IsoNumber.IsEnabled = result.Data[4] == 1;                      UInt16 defval = BitConverter.ToUInt16(result.Data' 7);                      for (int i = 0; i < result.Data.Length - 12; i += 2)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' 12 + i);                          MovieIsoNumber.AddValues(_isoTable.ContainsKey(val) ? _isoTable[val] : val.ToString(CultureInfo.InvariantCulture)' val);                      }                      MovieIsoNumber.ReloadValues();                      MovieIsoNumber.SetValue(defval' false);                  }                  catch (Exception)                  {                      MovieIsoNumber.IsEnabled = false;                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitIso,The following statement contains a magic number: lock (Locker)              {                  NormalIsoNumber = new PropertyValue<long>();                  NormalIsoNumber.Name = "IsoNumber";                  NormalIsoNumber.SubType = typeof (int);                  NormalIsoNumber.ValueChanged += IsoNumber_ValueChanged;                  NormalIsoNumber.Clear();                  try                  {                      DeviceReady();                      MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_ExposureIndex);                      //IsoNumber.IsEnabled = result.Data[4] == 1;                      UInt16 defval = BitConverter.ToUInt16(result.Data' 7);                      for (int i = 0; i < result.Data.Length - 12; i += 2)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' 12 + i);                          NormalIsoNumber.AddValues(_isoTable.ContainsKey(val) ? _isoTable[val] : val.ToString()' val);                      }                      NormalIsoNumber.ReloadValues();                      NormalIsoNumber.SetValue(defval' false);                      IsoNumber = NormalIsoNumber;                  }                  catch (Exception)                  {                      NormalIsoNumber.IsEnabled = false;                  }                    MovieIsoNumber = new PropertyValue<long>();                  MovieIsoNumber.Name = "IsoNumber";                  MovieIsoNumber.SubType = typeof (int);                  MovieIsoNumber.ValueChanged += MovieIsoNumber_ValueChanged;                  MovieIsoNumber.Clear();                  try                  {                      MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieExposureIndex);                      //IsoNumber.IsEnabled = result.Data[4] == 1;                      UInt16 defval = BitConverter.ToUInt16(result.Data' 7);                      for (int i = 0; i < result.Data.Length - 12; i += 2)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' 12 + i);                          MovieIsoNumber.AddValues(_isoTable.ContainsKey(val) ? _isoTable[val] : val.ToString(CultureInfo.InvariantCulture)' val);                      }                      MovieIsoNumber.ReloadValues();                      MovieIsoNumber.SetValue(defval' false);                  }                  catch (Exception)                  {                      MovieIsoNumber.IsEnabled = false;                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitIso,The following statement contains a magic number: lock (Locker)              {                  NormalIsoNumber = new PropertyValue<long>();                  NormalIsoNumber.Name = "IsoNumber";                  NormalIsoNumber.SubType = typeof (int);                  NormalIsoNumber.ValueChanged += IsoNumber_ValueChanged;                  NormalIsoNumber.Clear();                  try                  {                      DeviceReady();                      MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_ExposureIndex);                      //IsoNumber.IsEnabled = result.Data[4] == 1;                      UInt16 defval = BitConverter.ToUInt16(result.Data' 7);                      for (int i = 0; i < result.Data.Length - 12; i += 2)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' 12 + i);                          NormalIsoNumber.AddValues(_isoTable.ContainsKey(val) ? _isoTable[val] : val.ToString()' val);                      }                      NormalIsoNumber.ReloadValues();                      NormalIsoNumber.SetValue(defval' false);                      IsoNumber = NormalIsoNumber;                  }                  catch (Exception)                  {                      NormalIsoNumber.IsEnabled = false;                  }                    MovieIsoNumber = new PropertyValue<long>();                  MovieIsoNumber.Name = "IsoNumber";                  MovieIsoNumber.SubType = typeof (int);                  MovieIsoNumber.ValueChanged += MovieIsoNumber_ValueChanged;                  MovieIsoNumber.Clear();                  try                  {                      MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieExposureIndex);                      //IsoNumber.IsEnabled = result.Data[4] == 1;                      UInt16 defval = BitConverter.ToUInt16(result.Data' 7);                      for (int i = 0; i < result.Data.Length - 12; i += 2)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' 12 + i);                          MovieIsoNumber.AddValues(_isoTable.ContainsKey(val) ? _isoTable[val] : val.ToString(CultureInfo.InvariantCulture)' val);                      }                      MovieIsoNumber.ReloadValues();                      MovieIsoNumber.SetValue(defval' false);                  }                  catch (Exception)                  {                      MovieIsoNumber.IsEnabled = false;                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitIso,The following statement contains a magic number: lock (Locker)              {                  NormalIsoNumber = new PropertyValue<long>();                  NormalIsoNumber.Name = "IsoNumber";                  NormalIsoNumber.SubType = typeof (int);                  NormalIsoNumber.ValueChanged += IsoNumber_ValueChanged;                  NormalIsoNumber.Clear();                  try                  {                      DeviceReady();                      MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_ExposureIndex);                      //IsoNumber.IsEnabled = result.Data[4] == 1;                      UInt16 defval = BitConverter.ToUInt16(result.Data' 7);                      for (int i = 0; i < result.Data.Length - 12; i += 2)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' 12 + i);                          NormalIsoNumber.AddValues(_isoTable.ContainsKey(val) ? _isoTable[val] : val.ToString()' val);                      }                      NormalIsoNumber.ReloadValues();                      NormalIsoNumber.SetValue(defval' false);                      IsoNumber = NormalIsoNumber;                  }                  catch (Exception)                  {                      NormalIsoNumber.IsEnabled = false;                  }                    MovieIsoNumber = new PropertyValue<long>();                  MovieIsoNumber.Name = "IsoNumber";                  MovieIsoNumber.SubType = typeof (int);                  MovieIsoNumber.ValueChanged += MovieIsoNumber_ValueChanged;                  MovieIsoNumber.Clear();                  try                  {                      MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieExposureIndex);                      //IsoNumber.IsEnabled = result.Data[4] == 1;                      UInt16 defval = BitConverter.ToUInt16(result.Data' 7);                      for (int i = 0; i < result.Data.Length - 12; i += 2)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' 12 + i);                          MovieIsoNumber.AddValues(_isoTable.ContainsKey(val) ? _isoTable[val] : val.ToString(CultureInfo.InvariantCulture)' val);                      }                      MovieIsoNumber.ReloadValues();                      MovieIsoNumber.SetValue(defval' false);                  }                  catch (Exception)                  {                      MovieIsoNumber.IsEnabled = false;                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitIso,The following statement contains a magic number: lock (Locker)              {                  NormalIsoNumber = new PropertyValue<long>();                  NormalIsoNumber.Name = "IsoNumber";                  NormalIsoNumber.SubType = typeof (int);                  NormalIsoNumber.ValueChanged += IsoNumber_ValueChanged;                  NormalIsoNumber.Clear();                  try                  {                      DeviceReady();                      MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_ExposureIndex);                      //IsoNumber.IsEnabled = result.Data[4] == 1;                      UInt16 defval = BitConverter.ToUInt16(result.Data' 7);                      for (int i = 0; i < result.Data.Length - 12; i += 2)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' 12 + i);                          NormalIsoNumber.AddValues(_isoTable.ContainsKey(val) ? _isoTable[val] : val.ToString()' val);                      }                      NormalIsoNumber.ReloadValues();                      NormalIsoNumber.SetValue(defval' false);                      IsoNumber = NormalIsoNumber;                  }                  catch (Exception)                  {                      NormalIsoNumber.IsEnabled = false;                  }                    MovieIsoNumber = new PropertyValue<long>();                  MovieIsoNumber.Name = "IsoNumber";                  MovieIsoNumber.SubType = typeof (int);                  MovieIsoNumber.ValueChanged += MovieIsoNumber_ValueChanged;                  MovieIsoNumber.Clear();                  try                  {                      MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieExposureIndex);                      //IsoNumber.IsEnabled = result.Data[4] == 1;                      UInt16 defval = BitConverter.ToUInt16(result.Data' 7);                      for (int i = 0; i < result.Data.Length - 12; i += 2)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' 12 + i);                          MovieIsoNumber.AddValues(_isoTable.ContainsKey(val) ? _isoTable[val] : val.ToString(CultureInfo.InvariantCulture)' val);                      }                      MovieIsoNumber.ReloadValues();                      MovieIsoNumber.SetValue(defval' false);                  }                  catch (Exception)                  {                      MovieIsoNumber.IsEnabled = false;                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: lock (Locker)              {                  DeviceReady();                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_ExposureTime);                      if (result.Data == null)                          return;                      NormalShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          NormalShutterSpeed.AddValues(_shutterTable.ContainsKey(val) ? _shutterTable[val] : val.ToString()' val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !NormalShutterSpeed.Values.Contains("Bulb"))                          NormalShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                      NormalShutterSpeed.ReloadValues();                      NormalShutterSpeed.SetValue(defval' false);                      ShutterSpeed = NormalShutterSpeed;                  }                  catch (Exception)                  {                  }                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_MovieShutterSpeed);                      if (result.Data == null || result.Data.Length==0)                          return;                      MovieShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          MovieShutterSpeed.AddValues("1/" + (val-0x10000)'val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !MovieShutterSpeed.Values.Contains("Bulb"))                          MovieShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                        MovieShutterSpeed.SetValue(defval' false);                  }                  catch (Exception)                  {                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: lock (Locker)              {                  DeviceReady();                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_ExposureTime);                      if (result.Data == null)                          return;                      NormalShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          NormalShutterSpeed.AddValues(_shutterTable.ContainsKey(val) ? _shutterTable[val] : val.ToString()' val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !NormalShutterSpeed.Values.Contains("Bulb"))                          NormalShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                      NormalShutterSpeed.ReloadValues();                      NormalShutterSpeed.SetValue(defval' false);                      ShutterSpeed = NormalShutterSpeed;                  }                  catch (Exception)                  {                  }                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_MovieShutterSpeed);                      if (result.Data == null || result.Data.Length==0)                          return;                      MovieShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          MovieShutterSpeed.AddValues("1/" + (val-0x10000)'val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !MovieShutterSpeed.Values.Contains("Bulb"))                          MovieShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                        MovieShutterSpeed.SetValue(defval' false);                  }                  catch (Exception)                  {                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: lock (Locker)              {                  DeviceReady();                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_ExposureTime);                      if (result.Data == null)                          return;                      NormalShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          NormalShutterSpeed.AddValues(_shutterTable.ContainsKey(val) ? _shutterTable[val] : val.ToString()' val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !NormalShutterSpeed.Values.Contains("Bulb"))                          NormalShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                      NormalShutterSpeed.ReloadValues();                      NormalShutterSpeed.SetValue(defval' false);                      ShutterSpeed = NormalShutterSpeed;                  }                  catch (Exception)                  {                  }                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_MovieShutterSpeed);                      if (result.Data == null || result.Data.Length==0)                          return;                      MovieShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          MovieShutterSpeed.AddValues("1/" + (val-0x10000)'val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !MovieShutterSpeed.Values.Contains("Bulb"))                          MovieShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                        MovieShutterSpeed.SetValue(defval' false);                  }                  catch (Exception)                  {                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: lock (Locker)              {                  DeviceReady();                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_ExposureTime);                      if (result.Data == null)                          return;                      NormalShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          NormalShutterSpeed.AddValues(_shutterTable.ContainsKey(val) ? _shutterTable[val] : val.ToString()' val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !NormalShutterSpeed.Values.Contains("Bulb"))                          NormalShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                      NormalShutterSpeed.ReloadValues();                      NormalShutterSpeed.SetValue(defval' false);                      ShutterSpeed = NormalShutterSpeed;                  }                  catch (Exception)                  {                  }                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_MovieShutterSpeed);                      if (result.Data == null || result.Data.Length==0)                          return;                      MovieShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          MovieShutterSpeed.AddValues("1/" + (val-0x10000)'val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !MovieShutterSpeed.Values.Contains("Bulb"))                          MovieShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                        MovieShutterSpeed.SetValue(defval' false);                  }                  catch (Exception)                  {                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: lock (Locker)              {                  DeviceReady();                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_ExposureTime);                      if (result.Data == null)                          return;                      NormalShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          NormalShutterSpeed.AddValues(_shutterTable.ContainsKey(val) ? _shutterTable[val] : val.ToString()' val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !NormalShutterSpeed.Values.Contains("Bulb"))                          NormalShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                      NormalShutterSpeed.ReloadValues();                      NormalShutterSpeed.SetValue(defval' false);                      ShutterSpeed = NormalShutterSpeed;                  }                  catch (Exception)                  {                  }                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_MovieShutterSpeed);                      if (result.Data == null || result.Data.Length==0)                          return;                      MovieShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          MovieShutterSpeed.AddValues("1/" + (val-0x10000)'val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !MovieShutterSpeed.Values.Contains("Bulb"))                          MovieShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                        MovieShutterSpeed.SetValue(defval' false);                  }                  catch (Exception)                  {                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: lock (Locker)              {                  DeviceReady();                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_ExposureTime);                      if (result.Data == null)                          return;                      NormalShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          NormalShutterSpeed.AddValues(_shutterTable.ContainsKey(val) ? _shutterTable[val] : val.ToString()' val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !NormalShutterSpeed.Values.Contains("Bulb"))                          NormalShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                      NormalShutterSpeed.ReloadValues();                      NormalShutterSpeed.SetValue(defval' false);                      ShutterSpeed = NormalShutterSpeed;                  }                  catch (Exception)                  {                  }                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_MovieShutterSpeed);                      if (result.Data == null || result.Data.Length==0)                          return;                      MovieShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          MovieShutterSpeed.AddValues("1/" + (val-0x10000)'val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !MovieShutterSpeed.Values.Contains("Bulb"))                          MovieShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                        MovieShutterSpeed.SetValue(defval' false);                  }                  catch (Exception)                  {                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: lock (Locker)              {                  DeviceReady();                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_ExposureTime);                      if (result.Data == null)                          return;                      NormalShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          NormalShutterSpeed.AddValues(_shutterTable.ContainsKey(val) ? _shutterTable[val] : val.ToString()' val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !NormalShutterSpeed.Values.Contains("Bulb"))                          NormalShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                      NormalShutterSpeed.ReloadValues();                      NormalShutterSpeed.SetValue(defval' false);                      ShutterSpeed = NormalShutterSpeed;                  }                  catch (Exception)                  {                  }                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_MovieShutterSpeed);                      if (result.Data == null || result.Data.Length==0)                          return;                      MovieShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          MovieShutterSpeed.AddValues("1/" + (val-0x10000)'val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !MovieShutterSpeed.Values.Contains("Bulb"))                          MovieShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                        MovieShutterSpeed.SetValue(defval' false);                  }                  catch (Exception)                  {                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: lock (Locker)              {                  DeviceReady();                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_ExposureTime);                      if (result.Data == null)                          return;                      NormalShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          NormalShutterSpeed.AddValues(_shutterTable.ContainsKey(val) ? _shutterTable[val] : val.ToString()' val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !NormalShutterSpeed.Values.Contains("Bulb"))                          NormalShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                      NormalShutterSpeed.ReloadValues();                      NormalShutterSpeed.SetValue(defval' false);                      ShutterSpeed = NormalShutterSpeed;                  }                  catch (Exception)                  {                  }                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_MovieShutterSpeed);                      if (result.Data == null || result.Data.Length==0)                          return;                      MovieShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          MovieShutterSpeed.AddValues("1/" + (val-0x10000)'val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !MovieShutterSpeed.Values.Contains("Bulb"))                          MovieShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                        MovieShutterSpeed.SetValue(defval' false);                  }                  catch (Exception)                  {                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: lock (Locker)              {                  DeviceReady();                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_ExposureTime);                      if (result.Data == null)                          return;                      NormalShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          NormalShutterSpeed.AddValues(_shutterTable.ContainsKey(val) ? _shutterTable[val] : val.ToString()' val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !NormalShutterSpeed.Values.Contains("Bulb"))                          NormalShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                      NormalShutterSpeed.ReloadValues();                      NormalShutterSpeed.SetValue(defval' false);                      ShutterSpeed = NormalShutterSpeed;                  }                  catch (Exception)                  {                  }                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_MovieShutterSpeed);                      if (result.Data == null || result.Data.Length==0)                          return;                      MovieShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          MovieShutterSpeed.AddValues("1/" + (val-0x10000)'val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !MovieShutterSpeed.Values.Contains("Bulb"))                          MovieShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                        MovieShutterSpeed.SetValue(defval' false);                  }                  catch (Exception)                  {                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: lock (Locker)              {                  DeviceReady();                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_ExposureTime);                      if (result.Data == null)                          return;                      NormalShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          NormalShutterSpeed.AddValues(_shutterTable.ContainsKey(val) ? _shutterTable[val] : val.ToString()' val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !NormalShutterSpeed.Values.Contains("Bulb"))                          NormalShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                      NormalShutterSpeed.ReloadValues();                      NormalShutterSpeed.SetValue(defval' false);                      ShutterSpeed = NormalShutterSpeed;                  }                  catch (Exception)                  {                  }                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_MovieShutterSpeed);                      if (result.Data == null || result.Data.Length==0)                          return;                      MovieShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          MovieShutterSpeed.AddValues("1/" + (val-0x10000)'val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !MovieShutterSpeed.Values.Contains("Bulb"))                          MovieShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                        MovieShutterSpeed.SetValue(defval' false);                  }                  catch (Exception)                  {                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: lock (Locker)              {                  DeviceReady();                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_ExposureTime);                      if (result.Data == null)                          return;                      NormalShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          NormalShutterSpeed.AddValues(_shutterTable.ContainsKey(val) ? _shutterTable[val] : val.ToString()' val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !NormalShutterSpeed.Values.Contains("Bulb"))                          NormalShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                      NormalShutterSpeed.ReloadValues();                      NormalShutterSpeed.SetValue(defval' false);                      ShutterSpeed = NormalShutterSpeed;                  }                  catch (Exception)                  {                  }                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_MovieShutterSpeed);                      if (result.Data == null || result.Data.Length==0)                          return;                      MovieShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          MovieShutterSpeed.AddValues("1/" + (val-0x10000)'val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !MovieShutterSpeed.Values.Contains("Bulb"))                          MovieShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                        MovieShutterSpeed.SetValue(defval' false);                  }                  catch (Exception)                  {                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: lock (Locker)              {                  DeviceReady();                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_ExposureTime);                      if (result.Data == null)                          return;                      NormalShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          NormalShutterSpeed.AddValues(_shutterTable.ContainsKey(val) ? _shutterTable[val] : val.ToString()' val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !NormalShutterSpeed.Values.Contains("Bulb"))                          NormalShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                      NormalShutterSpeed.ReloadValues();                      NormalShutterSpeed.SetValue(defval' false);                      ShutterSpeed = NormalShutterSpeed;                  }                  catch (Exception)                  {                  }                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_MovieShutterSpeed);                      if (result.Data == null || result.Data.Length==0)                          return;                      MovieShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          MovieShutterSpeed.AddValues("1/" + (val-0x10000)'val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !MovieShutterSpeed.Values.Contains("Bulb"))                          MovieShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                        MovieShutterSpeed.SetValue(defval' false);                  }                  catch (Exception)                  {                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: lock (Locker)              {                  DeviceReady();                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_ExposureTime);                      if (result.Data == null)                          return;                      NormalShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          NormalShutterSpeed.AddValues(_shutterTable.ContainsKey(val) ? _shutterTable[val] : val.ToString()' val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !NormalShutterSpeed.Values.Contains("Bulb"))                          NormalShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                      NormalShutterSpeed.ReloadValues();                      NormalShutterSpeed.SetValue(defval' false);                      ShutterSpeed = NormalShutterSpeed;                  }                  catch (Exception)                  {                  }                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_MovieShutterSpeed);                      if (result.Data == null || result.Data.Length==0)                          return;                      MovieShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          MovieShutterSpeed.AddValues("1/" + (val-0x10000)'val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !MovieShutterSpeed.Values.Contains("Bulb"))                          MovieShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                        MovieShutterSpeed.SetValue(defval' false);                  }                  catch (Exception)                  {                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: lock (Locker)              {                  DeviceReady();                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_ExposureTime);                      if (result.Data == null)                          return;                      NormalShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          NormalShutterSpeed.AddValues(_shutterTable.ContainsKey(val) ? _shutterTable[val] : val.ToString()' val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !NormalShutterSpeed.Values.Contains("Bulb"))                          NormalShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                      NormalShutterSpeed.ReloadValues();                      NormalShutterSpeed.SetValue(defval' false);                      ShutterSpeed = NormalShutterSpeed;                  }                  catch (Exception)                  {                  }                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_MovieShutterSpeed);                      if (result.Data == null || result.Data.Length==0)                          return;                      MovieShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          MovieShutterSpeed.AddValues("1/" + (val-0x10000)'val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !MovieShutterSpeed.Values.Contains("Bulb"))                          MovieShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                        MovieShutterSpeed.SetValue(defval' false);                  }                  catch (Exception)                  {                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: lock (Locker)              {                  DeviceReady();                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_ExposureTime);                      if (result.Data == null)                          return;                      NormalShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          NormalShutterSpeed.AddValues(_shutterTable.ContainsKey(val) ? _shutterTable[val] : val.ToString()' val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !NormalShutterSpeed.Values.Contains("Bulb"))                          NormalShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                      NormalShutterSpeed.ReloadValues();                      NormalShutterSpeed.SetValue(defval' false);                      ShutterSpeed = NormalShutterSpeed;                  }                  catch (Exception)                  {                  }                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_MovieShutterSpeed);                      if (result.Data == null || result.Data.Length==0)                          return;                      MovieShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          MovieShutterSpeed.AddValues("1/" + (val-0x10000)'val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !MovieShutterSpeed.Values.Contains("Bulb"))                          MovieShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                        MovieShutterSpeed.SetValue(defval' false);                  }                  catch (Exception)                  {                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: lock (Locker)              {                  DeviceReady();                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_ExposureTime);                      if (result.Data == null)                          return;                      NormalShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          NormalShutterSpeed.AddValues(_shutterTable.ContainsKey(val) ? _shutterTable[val] : val.ToString()' val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !NormalShutterSpeed.Values.Contains("Bulb"))                          NormalShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                      NormalShutterSpeed.ReloadValues();                      NormalShutterSpeed.SetValue(defval' false);                      ShutterSpeed = NormalShutterSpeed;                  }                  catch (Exception)                  {                  }                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_MovieShutterSpeed);                      if (result.Data == null || result.Data.Length==0)                          return;                      MovieShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          MovieShutterSpeed.AddValues("1/" + (val-0x10000)'val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !MovieShutterSpeed.Values.Contains("Bulb"))                          MovieShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                        MovieShutterSpeed.SetValue(defval' false);                  }                  catch (Exception)                  {                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: lock (Locker)              {                  DeviceReady();                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_ExposureTime);                      if (result.Data == null)                          return;                      NormalShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          NormalShutterSpeed.AddValues(_shutterTable.ContainsKey(val) ? _shutterTable[val] : val.ToString()' val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !NormalShutterSpeed.Values.Contains("Bulb"))                          NormalShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                      NormalShutterSpeed.ReloadValues();                      NormalShutterSpeed.SetValue(defval' false);                      ShutterSpeed = NormalShutterSpeed;                  }                  catch (Exception)                  {                  }                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_MovieShutterSpeed);                      if (result.Data == null || result.Data.Length==0)                          return;                      MovieShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          MovieShutterSpeed.AddValues("1/" + (val-0x10000)'val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !MovieShutterSpeed.Values.Contains("Bulb"))                          MovieShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                        MovieShutterSpeed.SetValue(defval' false);                  }                  catch (Exception)                  {                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: lock (Locker)              {                  DeviceReady();                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_ExposureTime);                      if (result.Data == null)                          return;                      NormalShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          NormalShutterSpeed.AddValues(_shutterTable.ContainsKey(val) ? _shutterTable[val] : val.ToString()' val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !NormalShutterSpeed.Values.Contains("Bulb"))                          NormalShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                      NormalShutterSpeed.ReloadValues();                      NormalShutterSpeed.SetValue(defval' false);                      ShutterSpeed = NormalShutterSpeed;                  }                  catch (Exception)                  {                  }                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_MovieShutterSpeed);                      if (result.Data == null || result.Data.Length==0)                          return;                      MovieShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          MovieShutterSpeed.AddValues("1/" + (val-0x10000)'val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !MovieShutterSpeed.Values.Contains("Bulb"))                          MovieShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                        MovieShutterSpeed.SetValue(defval' false);                  }                  catch (Exception)                  {                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: lock (Locker)              {                  DeviceReady();                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_ExposureTime);                      if (result.Data == null)                          return;                      NormalShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          NormalShutterSpeed.AddValues(_shutterTable.ContainsKey(val) ? _shutterTable[val] : val.ToString()' val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !NormalShutterSpeed.Values.Contains("Bulb"))                          NormalShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                      NormalShutterSpeed.ReloadValues();                      NormalShutterSpeed.SetValue(defval' false);                      ShutterSpeed = NormalShutterSpeed;                  }                  catch (Exception)                  {                  }                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_MovieShutterSpeed);                      if (result.Data == null || result.Data.Length==0)                          return;                      MovieShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          MovieShutterSpeed.AddValues("1/" + (val-0x10000)'val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !MovieShutterSpeed.Values.Contains("Bulb"))                          MovieShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                        MovieShutterSpeed.SetValue(defval' false);                  }                  catch (Exception)                  {                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: lock (Locker)              {                  DeviceReady();                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_ExposureTime);                      if (result.Data == null)                          return;                      NormalShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          NormalShutterSpeed.AddValues(_shutterTable.ContainsKey(val) ? _shutterTable[val] : val.ToString()' val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !NormalShutterSpeed.Values.Contains("Bulb"))                          NormalShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                      NormalShutterSpeed.ReloadValues();                      NormalShutterSpeed.SetValue(defval' false);                      ShutterSpeed = NormalShutterSpeed;                  }                  catch (Exception)                  {                  }                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_MovieShutterSpeed);                      if (result.Data == null || result.Data.Length==0)                          return;                      MovieShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          MovieShutterSpeed.AddValues("1/" + (val-0x10000)'val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !MovieShutterSpeed.Values.Contains("Bulb"))                          MovieShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                        MovieShutterSpeed.SetValue(defval' false);                  }                  catch (Exception)                  {                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: lock (Locker)              {                  DeviceReady();                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_ExposureTime);                      if (result.Data == null)                          return;                      NormalShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          NormalShutterSpeed.AddValues(_shutterTable.ContainsKey(val) ? _shutterTable[val] : val.ToString()' val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !NormalShutterSpeed.Values.Contains("Bulb"))                          NormalShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                      NormalShutterSpeed.ReloadValues();                      NormalShutterSpeed.SetValue(defval' false);                      ShutterSpeed = NormalShutterSpeed;                  }                  catch (Exception)                  {                  }                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_MovieShutterSpeed);                      if (result.Data == null || result.Data.Length==0)                          return;                      MovieShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          MovieShutterSpeed.AddValues("1/" + (val-0x10000)'val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !MovieShutterSpeed.Values.Contains("Bulb"))                          MovieShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                        MovieShutterSpeed.SetValue(defval' false);                  }                  catch (Exception)                  {                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: lock (Locker)              {                  DeviceReady();                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_ExposureTime);                      if (result.Data == null)                          return;                      NormalShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          NormalShutterSpeed.AddValues(_shutterTable.ContainsKey(val) ? _shutterTable[val] : val.ToString()' val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !NormalShutterSpeed.Values.Contains("Bulb"))                          NormalShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                      NormalShutterSpeed.ReloadValues();                      NormalShutterSpeed.SetValue(defval' false);                      ShutterSpeed = NormalShutterSpeed;                  }                  catch (Exception)                  {                  }                  try                  {                      byte datasize = 4;                      var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                       CONST_PROP_MovieShutterSpeed);                      if (result.Data == null || result.Data.Length==0)                          return;                      MovieShutterSpeed.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);                          MovieShutterSpeed.AddValues("1/" + (val-0x10000)'val);                      }                      // force to add Bulb mode for some cameras which not support it                      if (Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !MovieShutterSpeed.Values.Contains("Bulb"))                          MovieShutterSpeed.AddValues("Bulb"' 0xFFFFFFFF);                        MovieShutterSpeed.SetValue(defval' false);                  }                  catch (Exception)                  {                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitMode,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  Mode = new PropertyValue<long>();                  Mode.SubType = typeof(uint);                  Mode.Name = "Mode";                  Mode.IsEnabled = false;                  Mode.ValueChanged += Mode_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_ExposureProgramMode);                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                      Mode.AddValues(_exposureModeTable.ContainsKey(val) ? _exposureModeTable[val] : val.ToString()' val);                  }                  Mode.ReloadValues();                  Mode.SetValue(defval);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitMode,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  Mode = new PropertyValue<long>();                  Mode.SubType = typeof(uint);                  Mode.Name = "Mode";                  Mode.IsEnabled = false;                  Mode.ValueChanged += Mode_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_ExposureProgramMode);                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                      Mode.AddValues(_exposureModeTable.ContainsKey(val) ? _exposureModeTable[val] : val.ToString()' val);                  }                  Mode.ReloadValues();                  Mode.SetValue(defval);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitMode,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  Mode = new PropertyValue<long>();                  Mode.SubType = typeof(uint);                  Mode.Name = "Mode";                  Mode.IsEnabled = false;                  Mode.ValueChanged += Mode_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_ExposureProgramMode);                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                      Mode.AddValues(_exposureModeTable.ContainsKey(val) ? _exposureModeTable[val] : val.ToString()' val);                  }                  Mode.ReloadValues();                  Mode.SetValue(defval);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitMode,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  Mode = new PropertyValue<long>();                  Mode.SubType = typeof(uint);                  Mode.Name = "Mode";                  Mode.IsEnabled = false;                  Mode.ValueChanged += Mode_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_ExposureProgramMode);                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                      Mode.AddValues(_exposureModeTable.ContainsKey(val) ? _exposureModeTable[val] : val.ToString()' val);                  }                  Mode.ReloadValues();                  Mode.SetValue(defval);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitMode,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  Mode = new PropertyValue<long>();                  Mode.SubType = typeof(uint);                  Mode.Name = "Mode";                  Mode.IsEnabled = false;                  Mode.ValueChanged += Mode_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_ExposureProgramMode);                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                      Mode.AddValues(_exposureModeTable.ContainsKey(val) ? _exposureModeTable[val] : val.ToString()' val);                  }                  Mode.ReloadValues();                  Mode.SetValue(defval);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitMode,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  Mode = new PropertyValue<long>();                  Mode.SubType = typeof(uint);                  Mode.Name = "Mode";                  Mode.IsEnabled = false;                  Mode.ValueChanged += Mode_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_ExposureProgramMode);                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                      Mode.AddValues(_exposureModeTable.ContainsKey(val) ? _exposureModeTable[val] : val.ToString()' val);                  }                  Mode.ReloadValues();                  Mode.SetValue(defval);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitMode,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  Mode = new PropertyValue<long>();                  Mode.SubType = typeof(uint);                  Mode.Name = "Mode";                  Mode.IsEnabled = false;                  Mode.ValueChanged += Mode_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_ExposureProgramMode);                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                      Mode.AddValues(_exposureModeTable.ContainsKey(val) ? _exposureModeTable[val] : val.ToString()' val);                  }                  Mode.ReloadValues();                  Mode.SetValue(defval);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitMode,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  Mode = new PropertyValue<long>();                  Mode.SubType = typeof(uint);                  Mode.Name = "Mode";                  Mode.IsEnabled = false;                  Mode.ValueChanged += Mode_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_ExposureProgramMode);                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                      Mode.AddValues(_exposureModeTable.ContainsKey(val) ? _exposureModeTable[val] : val.ToString()' val);                  }                  Mode.ReloadValues();                  Mode.SetValue(defval);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitMode,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  Mode = new PropertyValue<long>();                  Mode.SubType = typeof(uint);                  Mode.Name = "Mode";                  Mode.IsEnabled = false;                  Mode.ValueChanged += Mode_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_ExposureProgramMode);                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                      Mode.AddValues(_exposureModeTable.ContainsKey(val) ? _exposureModeTable[val] : val.ToString()' val);                  }                  Mode.ReloadValues();                  Mode.SetValue(defval);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitMode,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  Mode = new PropertyValue<long>();                  Mode.SubType = typeof(uint);                  Mode.Name = "Mode";                  Mode.IsEnabled = false;                  Mode.ValueChanged += Mode_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_ExposureProgramMode);                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                      Mode.AddValues(_exposureModeTable.ContainsKey(val) ? _exposureModeTable[val] : val.ToString()' val);                  }                  Mode.ReloadValues();                  Mode.SetValue(defval);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitMode,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  Mode = new PropertyValue<long>();                  Mode.SubType = typeof(uint);                  Mode.Name = "Mode";                  Mode.IsEnabled = false;                  Mode.ValueChanged += Mode_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_ExposureProgramMode);                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                      Mode.AddValues(_exposureModeTable.ContainsKey(val) ? _exposureModeTable[val] : val.ToString()' val);                  }                  Mode.ReloadValues();                  Mode.SetValue(defval);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: try              {                  DeviceReady();                  const byte datasize = 2;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_Fnumber);                  if (result.Data != null)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      NormalFNumber.Clear();                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          string s =  (val/100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          NormalFNumber.AddValues(s' val);                      }                      NormalFNumber.ReloadValues();                      NormalFNumber.SetValue(defval' trigervaluchange);                      FNumber = NormalFNumber;                  }                  else                  {                                        }                  result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieFnumber);                  if (result.Data != null && result.Data.Length > 0)                  {                      MovieFNumber.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                          string s = (val / 100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          MovieFNumber.AddValues(s' val);                      }                      MovieFNumber.ReloadValues();                      MovieFNumber.SetValue(defval' trigervaluchange);                  }              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: try              {                  DeviceReady();                  const byte datasize = 2;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_Fnumber);                  if (result.Data != null)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      NormalFNumber.Clear();                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          string s =  (val/100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          NormalFNumber.AddValues(s' val);                      }                      NormalFNumber.ReloadValues();                      NormalFNumber.SetValue(defval' trigervaluchange);                      FNumber = NormalFNumber;                  }                  else                  {                                        }                  result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieFnumber);                  if (result.Data != null && result.Data.Length > 0)                  {                      MovieFNumber.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                          string s = (val / 100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          MovieFNumber.AddValues(s' val);                      }                      MovieFNumber.ReloadValues();                      MovieFNumber.SetValue(defval' trigervaluchange);                  }              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: try              {                  DeviceReady();                  const byte datasize = 2;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_Fnumber);                  if (result.Data != null)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      NormalFNumber.Clear();                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          string s =  (val/100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          NormalFNumber.AddValues(s' val);                      }                      NormalFNumber.ReloadValues();                      NormalFNumber.SetValue(defval' trigervaluchange);                      FNumber = NormalFNumber;                  }                  else                  {                                        }                  result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieFnumber);                  if (result.Data != null && result.Data.Length > 0)                  {                      MovieFNumber.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                          string s = (val / 100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          MovieFNumber.AddValues(s' val);                      }                      MovieFNumber.ReloadValues();                      MovieFNumber.SetValue(defval' trigervaluchange);                  }              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: try              {                  DeviceReady();                  const byte datasize = 2;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_Fnumber);                  if (result.Data != null)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      NormalFNumber.Clear();                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          string s =  (val/100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          NormalFNumber.AddValues(s' val);                      }                      NormalFNumber.ReloadValues();                      NormalFNumber.SetValue(defval' trigervaluchange);                      FNumber = NormalFNumber;                  }                  else                  {                                        }                  result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieFnumber);                  if (result.Data != null && result.Data.Length > 0)                  {                      MovieFNumber.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                          string s = (val / 100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          MovieFNumber.AddValues(s' val);                      }                      MovieFNumber.ReloadValues();                      MovieFNumber.SetValue(defval' trigervaluchange);                  }              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: try              {                  DeviceReady();                  const byte datasize = 2;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_Fnumber);                  if (result.Data != null)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      NormalFNumber.Clear();                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          string s =  (val/100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          NormalFNumber.AddValues(s' val);                      }                      NormalFNumber.ReloadValues();                      NormalFNumber.SetValue(defval' trigervaluchange);                      FNumber = NormalFNumber;                  }                  else                  {                                        }                  result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieFnumber);                  if (result.Data != null && result.Data.Length > 0)                  {                      MovieFNumber.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                          string s = (val / 100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          MovieFNumber.AddValues(s' val);                      }                      MovieFNumber.ReloadValues();                      MovieFNumber.SetValue(defval' trigervaluchange);                  }              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: try              {                  DeviceReady();                  const byte datasize = 2;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_Fnumber);                  if (result.Data != null)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      NormalFNumber.Clear();                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          string s =  (val/100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          NormalFNumber.AddValues(s' val);                      }                      NormalFNumber.ReloadValues();                      NormalFNumber.SetValue(defval' trigervaluchange);                      FNumber = NormalFNumber;                  }                  else                  {                                        }                  result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieFnumber);                  if (result.Data != null && result.Data.Length > 0)                  {                      MovieFNumber.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                          string s = (val / 100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          MovieFNumber.AddValues(s' val);                      }                      MovieFNumber.ReloadValues();                      MovieFNumber.SetValue(defval' trigervaluchange);                  }              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: try              {                  DeviceReady();                  const byte datasize = 2;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_Fnumber);                  if (result.Data != null)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      NormalFNumber.Clear();                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          string s =  (val/100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          NormalFNumber.AddValues(s' val);                      }                      NormalFNumber.ReloadValues();                      NormalFNumber.SetValue(defval' trigervaluchange);                      FNumber = NormalFNumber;                  }                  else                  {                                        }                  result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieFnumber);                  if (result.Data != null && result.Data.Length > 0)                  {                      MovieFNumber.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                          string s = (val / 100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          MovieFNumber.AddValues(s' val);                      }                      MovieFNumber.ReloadValues();                      MovieFNumber.SetValue(defval' trigervaluchange);                  }              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: try              {                  DeviceReady();                  const byte datasize = 2;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_Fnumber);                  if (result.Data != null)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      NormalFNumber.Clear();                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          string s =  (val/100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          NormalFNumber.AddValues(s' val);                      }                      NormalFNumber.ReloadValues();                      NormalFNumber.SetValue(defval' trigervaluchange);                      FNumber = NormalFNumber;                  }                  else                  {                                        }                  result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieFnumber);                  if (result.Data != null && result.Data.Length > 0)                  {                      MovieFNumber.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                          string s = (val / 100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          MovieFNumber.AddValues(s' val);                      }                      MovieFNumber.ReloadValues();                      MovieFNumber.SetValue(defval' trigervaluchange);                  }              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: try              {                  DeviceReady();                  const byte datasize = 2;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_Fnumber);                  if (result.Data != null)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      NormalFNumber.Clear();                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          string s =  (val/100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          NormalFNumber.AddValues(s' val);                      }                      NormalFNumber.ReloadValues();                      NormalFNumber.SetValue(defval' trigervaluchange);                      FNumber = NormalFNumber;                  }                  else                  {                                        }                  result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieFnumber);                  if (result.Data != null && result.Data.Length > 0)                  {                      MovieFNumber.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                          string s = (val / 100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          MovieFNumber.AddValues(s' val);                      }                      MovieFNumber.ReloadValues();                      MovieFNumber.SetValue(defval' trigervaluchange);                  }              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: try              {                  DeviceReady();                  const byte datasize = 2;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_Fnumber);                  if (result.Data != null)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      NormalFNumber.Clear();                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          string s =  (val/100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          NormalFNumber.AddValues(s' val);                      }                      NormalFNumber.ReloadValues();                      NormalFNumber.SetValue(defval' trigervaluchange);                      FNumber = NormalFNumber;                  }                  else                  {                                        }                  result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieFnumber);                  if (result.Data != null && result.Data.Length > 0)                  {                      MovieFNumber.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                          string s = (val / 100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          MovieFNumber.AddValues(s' val);                      }                      MovieFNumber.ReloadValues();                      MovieFNumber.SetValue(defval' trigervaluchange);                  }              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: try              {                  DeviceReady();                  const byte datasize = 2;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_Fnumber);                  if (result.Data != null)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      NormalFNumber.Clear();                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          string s =  (val/100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          NormalFNumber.AddValues(s' val);                      }                      NormalFNumber.ReloadValues();                      NormalFNumber.SetValue(defval' trigervaluchange);                      FNumber = NormalFNumber;                  }                  else                  {                                        }                  result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieFnumber);                  if (result.Data != null && result.Data.Length > 0)                  {                      MovieFNumber.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                          string s = (val / 100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          MovieFNumber.AddValues(s' val);                      }                      MovieFNumber.ReloadValues();                      MovieFNumber.SetValue(defval' trigervaluchange);                  }              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: try              {                  DeviceReady();                  const byte datasize = 2;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_Fnumber);                  if (result.Data != null)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      NormalFNumber.Clear();                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          string s =  (val/100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          NormalFNumber.AddValues(s' val);                      }                      NormalFNumber.ReloadValues();                      NormalFNumber.SetValue(defval' trigervaluchange);                      FNumber = NormalFNumber;                  }                  else                  {                                        }                  result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieFnumber);                  if (result.Data != null && result.Data.Length > 0)                  {                      MovieFNumber.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                          string s = (val / 100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          MovieFNumber.AddValues(s' val);                      }                      MovieFNumber.ReloadValues();                      MovieFNumber.SetValue(defval' trigervaluchange);                  }              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: try              {                  DeviceReady();                  const byte datasize = 2;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_Fnumber);                  if (result.Data != null)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      NormalFNumber.Clear();                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          string s =  (val/100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          NormalFNumber.AddValues(s' val);                      }                      NormalFNumber.ReloadValues();                      NormalFNumber.SetValue(defval' trigervaluchange);                      FNumber = NormalFNumber;                  }                  else                  {                                        }                  result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieFnumber);                  if (result.Data != null && result.Data.Length > 0)                  {                      MovieFNumber.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                          string s = (val / 100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          MovieFNumber.AddValues(s' val);                      }                      MovieFNumber.ReloadValues();                      MovieFNumber.SetValue(defval' trigervaluchange);                  }              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: try              {                  DeviceReady();                  const byte datasize = 2;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_Fnumber);                  if (result.Data != null)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      NormalFNumber.Clear();                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          string s =  (val/100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          NormalFNumber.AddValues(s' val);                      }                      NormalFNumber.ReloadValues();                      NormalFNumber.SetValue(defval' trigervaluchange);                      FNumber = NormalFNumber;                  }                  else                  {                                        }                  result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieFnumber);                  if (result.Data != null && result.Data.Length > 0)                  {                      MovieFNumber.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                          string s = (val / 100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          MovieFNumber.AddValues(s' val);                      }                      MovieFNumber.ReloadValues();                      MovieFNumber.SetValue(defval' trigervaluchange);                  }              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: try              {                  DeviceReady();                  const byte datasize = 2;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_Fnumber);                  if (result.Data != null)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      NormalFNumber.Clear();                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          string s =  (val/100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          NormalFNumber.AddValues(s' val);                      }                      NormalFNumber.ReloadValues();                      NormalFNumber.SetValue(defval' trigervaluchange);                      FNumber = NormalFNumber;                  }                  else                  {                                        }                  result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieFnumber);                  if (result.Data != null && result.Data.Length > 0)                  {                      MovieFNumber.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                          string s = (val / 100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          MovieFNumber.AddValues(s' val);                      }                      MovieFNumber.ReloadValues();                      MovieFNumber.SetValue(defval' trigervaluchange);                  }              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: try              {                  DeviceReady();                  const byte datasize = 2;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_Fnumber);                  if (result.Data != null)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      NormalFNumber.Clear();                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          string s =  (val/100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          NormalFNumber.AddValues(s' val);                      }                      NormalFNumber.ReloadValues();                      NormalFNumber.SetValue(defval' trigervaluchange);                      FNumber = NormalFNumber;                  }                  else                  {                                        }                  result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieFnumber);                  if (result.Data != null && result.Data.Length > 0)                  {                      MovieFNumber.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                          string s = (val / 100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          MovieFNumber.AddValues(s' val);                      }                      MovieFNumber.ReloadValues();                      MovieFNumber.SetValue(defval' trigervaluchange);                  }              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: try              {                  DeviceReady();                  const byte datasize = 2;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_Fnumber);                  if (result.Data != null)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      NormalFNumber.Clear();                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          string s =  (val/100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          NormalFNumber.AddValues(s' val);                      }                      NormalFNumber.ReloadValues();                      NormalFNumber.SetValue(defval' trigervaluchange);                      FNumber = NormalFNumber;                  }                  else                  {                                        }                  result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieFnumber);                  if (result.Data != null && result.Data.Length > 0)                  {                      MovieFNumber.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                          string s = (val / 100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          MovieFNumber.AddValues(s' val);                      }                      MovieFNumber.ReloadValues();                      MovieFNumber.SetValue(defval' trigervaluchange);                  }              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: try              {                  DeviceReady();                  const byte datasize = 2;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_Fnumber);                  if (result.Data != null)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      NormalFNumber.Clear();                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          string s =  (val/100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          NormalFNumber.AddValues(s' val);                      }                      NormalFNumber.ReloadValues();                      NormalFNumber.SetValue(defval' trigervaluchange);                      FNumber = NormalFNumber;                  }                  else                  {                                        }                  result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieFnumber);                  if (result.Data != null && result.Data.Length > 0)                  {                      MovieFNumber.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                          string s = (val / 100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          MovieFNumber.AddValues(s' val);                      }                      MovieFNumber.ReloadValues();                      MovieFNumber.SetValue(defval' trigervaluchange);                  }              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: try              {                  DeviceReady();                  const byte datasize = 2;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_Fnumber);                  if (result.Data != null)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      NormalFNumber.Clear();                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          string s =  (val/100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          NormalFNumber.AddValues(s' val);                      }                      NormalFNumber.ReloadValues();                      NormalFNumber.SetValue(defval' trigervaluchange);                      FNumber = NormalFNumber;                  }                  else                  {                                        }                  result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieFnumber);                  if (result.Data != null && result.Data.Length > 0)                  {                      MovieFNumber.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                          string s = (val / 100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          MovieFNumber.AddValues(s' val);                      }                      MovieFNumber.ReloadValues();                      MovieFNumber.SetValue(defval' trigervaluchange);                  }              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: try              {                  DeviceReady();                  const byte datasize = 2;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_Fnumber);                  if (result.Data != null)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      NormalFNumber.Clear();                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          string s =  (val/100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          NormalFNumber.AddValues(s' val);                      }                      NormalFNumber.ReloadValues();                      NormalFNumber.SetValue(defval' trigervaluchange);                      FNumber = NormalFNumber;                  }                  else                  {                                        }                  result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieFnumber);                  if (result.Data != null && result.Data.Length > 0)                  {                      MovieFNumber.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                          string s = (val / 100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          MovieFNumber.AddValues(s' val);                      }                      MovieFNumber.ReloadValues();                      MovieFNumber.SetValue(defval' trigervaluchange);                  }              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: try              {                  DeviceReady();                  const byte datasize = 2;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_Fnumber);                  if (result.Data != null)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      NormalFNumber.Clear();                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          string s =  (val/100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          NormalFNumber.AddValues(s' val);                      }                      NormalFNumber.ReloadValues();                      NormalFNumber.SetValue(defval' trigervaluchange);                      FNumber = NormalFNumber;                  }                  else                  {                                        }                  result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieFnumber);                  if (result.Data != null && result.Data.Length > 0)                  {                      MovieFNumber.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                          string s = (val / 100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          MovieFNumber.AddValues(s' val);                      }                      MovieFNumber.ReloadValues();                      MovieFNumber.SetValue(defval' trigervaluchange);                  }              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: try              {                  DeviceReady();                  const byte datasize = 2;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_Fnumber);                  if (result.Data != null)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      NormalFNumber.Clear();                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          string s =  (val/100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          NormalFNumber.AddValues(s' val);                      }                      NormalFNumber.ReloadValues();                      NormalFNumber.SetValue(defval' trigervaluchange);                      FNumber = NormalFNumber;                  }                  else                  {                                        }                  result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieFnumber);                  if (result.Data != null && result.Data.Length > 0)                  {                      MovieFNumber.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                          string s = (val / 100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          MovieFNumber.AddValues(s' val);                      }                      MovieFNumber.ReloadValues();                      MovieFNumber.SetValue(defval' trigervaluchange);                  }              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: try              {                  DeviceReady();                  const byte datasize = 2;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_Fnumber);                  if (result.Data != null)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      NormalFNumber.Clear();                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          string s =  (val/100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          NormalFNumber.AddValues(s' val);                      }                      NormalFNumber.ReloadValues();                      NormalFNumber.SetValue(defval' trigervaluchange);                      FNumber = NormalFNumber;                  }                  else                  {                                        }                  result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc' CONST_PROP_MovieFnumber);                  if (result.Data != null && result.Data.Length > 0)                  {                      MovieFNumber.Clear();                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2 * datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                          string s = (val / 100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                          MovieFNumber.AddValues(s' val);                      }                      MovieFNumber.ReloadValues();                      MovieFNumber.SetValue(defval' trigervaluchange);                  }              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWhiteBalance,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  WhiteBalance = new PropertyValue<long>();                  WhiteBalance.Name = "WhiteBalance";                  WhiteBalance.ValueChanged += WhiteBalance_ValueChanged;                  var result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_WhiteBalance);                  if (result.Data != null && result.Data.Length > 0)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          WhiteBalance.AddValues(_wbTable.ContainsKey(val) ? _wbTable[val] : val.ToString()' val);                      }                      WhiteBalance.ReloadValues();                      WhiteBalance.SetValue(defval' false);                  }                  else                  {                  }              }              catch (Exception ex)              {                  Log.Error("Error init white balance"' ex);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWhiteBalance,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  WhiteBalance = new PropertyValue<long>();                  WhiteBalance.Name = "WhiteBalance";                  WhiteBalance.ValueChanged += WhiteBalance_ValueChanged;                  var result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_WhiteBalance);                  if (result.Data != null && result.Data.Length > 0)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          WhiteBalance.AddValues(_wbTable.ContainsKey(val) ? _wbTable[val] : val.ToString()' val);                      }                      WhiteBalance.ReloadValues();                      WhiteBalance.SetValue(defval' false);                  }                  else                  {                  }              }              catch (Exception ex)              {                  Log.Error("Error init white balance"' ex);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWhiteBalance,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  WhiteBalance = new PropertyValue<long>();                  WhiteBalance.Name = "WhiteBalance";                  WhiteBalance.ValueChanged += WhiteBalance_ValueChanged;                  var result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_WhiteBalance);                  if (result.Data != null && result.Data.Length > 0)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          WhiteBalance.AddValues(_wbTable.ContainsKey(val) ? _wbTable[val] : val.ToString()' val);                      }                      WhiteBalance.ReloadValues();                      WhiteBalance.SetValue(defval' false);                  }                  else                  {                  }              }              catch (Exception ex)              {                  Log.Error("Error init white balance"' ex);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWhiteBalance,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  WhiteBalance = new PropertyValue<long>();                  WhiteBalance.Name = "WhiteBalance";                  WhiteBalance.ValueChanged += WhiteBalance_ValueChanged;                  var result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_WhiteBalance);                  if (result.Data != null && result.Data.Length > 0)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          WhiteBalance.AddValues(_wbTable.ContainsKey(val) ? _wbTable[val] : val.ToString()' val);                      }                      WhiteBalance.ReloadValues();                      WhiteBalance.SetValue(defval' false);                  }                  else                  {                  }              }              catch (Exception ex)              {                  Log.Error("Error init white balance"' ex);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWhiteBalance,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  WhiteBalance = new PropertyValue<long>();                  WhiteBalance.Name = "WhiteBalance";                  WhiteBalance.ValueChanged += WhiteBalance_ValueChanged;                  var result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_WhiteBalance);                  if (result.Data != null && result.Data.Length > 0)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          WhiteBalance.AddValues(_wbTable.ContainsKey(val) ? _wbTable[val] : val.ToString()' val);                      }                      WhiteBalance.ReloadValues();                      WhiteBalance.SetValue(defval' false);                  }                  else                  {                  }              }              catch (Exception ex)              {                  Log.Error("Error init white balance"' ex);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWhiteBalance,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  WhiteBalance = new PropertyValue<long>();                  WhiteBalance.Name = "WhiteBalance";                  WhiteBalance.ValueChanged += WhiteBalance_ValueChanged;                  var result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_WhiteBalance);                  if (result.Data != null && result.Data.Length > 0)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          WhiteBalance.AddValues(_wbTable.ContainsKey(val) ? _wbTable[val] : val.ToString()' val);                      }                      WhiteBalance.ReloadValues();                      WhiteBalance.SetValue(defval' false);                  }                  else                  {                  }              }              catch (Exception ex)              {                  Log.Error("Error init white balance"' ex);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWhiteBalance,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  WhiteBalance = new PropertyValue<long>();                  WhiteBalance.Name = "WhiteBalance";                  WhiteBalance.ValueChanged += WhiteBalance_ValueChanged;                  var result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_WhiteBalance);                  if (result.Data != null && result.Data.Length > 0)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          WhiteBalance.AddValues(_wbTable.ContainsKey(val) ? _wbTable[val] : val.ToString()' val);                      }                      WhiteBalance.ReloadValues();                      WhiteBalance.SetValue(defval' false);                  }                  else                  {                  }              }              catch (Exception ex)              {                  Log.Error("Error init white balance"' ex);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWhiteBalance,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  WhiteBalance = new PropertyValue<long>();                  WhiteBalance.Name = "WhiteBalance";                  WhiteBalance.ValueChanged += WhiteBalance_ValueChanged;                  var result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_WhiteBalance);                  if (result.Data != null && result.Data.Length > 0)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          WhiteBalance.AddValues(_wbTable.ContainsKey(val) ? _wbTable[val] : val.ToString()' val);                      }                      WhiteBalance.ReloadValues();                      WhiteBalance.SetValue(defval' false);                  }                  else                  {                  }              }              catch (Exception ex)              {                  Log.Error("Error init white balance"' ex);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWhiteBalance,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  WhiteBalance = new PropertyValue<long>();                  WhiteBalance.Name = "WhiteBalance";                  WhiteBalance.ValueChanged += WhiteBalance_ValueChanged;                  var result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_WhiteBalance);                  if (result.Data != null && result.Data.Length > 0)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          WhiteBalance.AddValues(_wbTable.ContainsKey(val) ? _wbTable[val] : val.ToString()' val);                      }                      WhiteBalance.ReloadValues();                      WhiteBalance.SetValue(defval' false);                  }                  else                  {                  }              }              catch (Exception ex)              {                  Log.Error("Error init white balance"' ex);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWhiteBalance,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  WhiteBalance = new PropertyValue<long>();                  WhiteBalance.Name = "WhiteBalance";                  WhiteBalance.ValueChanged += WhiteBalance_ValueChanged;                  var result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_WhiteBalance);                  if (result.Data != null && result.Data.Length > 0)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          WhiteBalance.AddValues(_wbTable.ContainsKey(val) ? _wbTable[val] : val.ToString()' val);                      }                      WhiteBalance.ReloadValues();                      WhiteBalance.SetValue(defval' false);                  }                  else                  {                  }              }              catch (Exception ex)              {                  Log.Error("Error init white balance"' ex);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWhiteBalance,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  WhiteBalance = new PropertyValue<long>();                  WhiteBalance.Name = "WhiteBalance";                  WhiteBalance.ValueChanged += WhiteBalance_ValueChanged;                  var result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_WhiteBalance);                  if (result.Data != null && result.Data.Length > 0)                  {                      int type = BitConverter.ToInt16(result.Data' 2);                      byte formFlag = result.Data[(2*datasize) + 5];                      UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                      for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                      {                          UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                          WhiteBalance.AddValues(_wbTable.ContainsKey(val) ? _wbTable[val] : val.ToString()' val);                      }                      WhiteBalance.ReloadValues();                      WhiteBalance.SetValue(defval' false);                  }                  else                  {                  }              }              catch (Exception ex)              {                  Log.Error("Error init white balance"' ex);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,WhiteBalance_ValueChanged,The following statement contains a magic number: if (AdvancedProperties.Count > 13)                  AdvancedProperties[13].IsEnabled = val == 5;
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,WhiteBalance_ValueChanged,The following statement contains a magic number: if (AdvancedProperties.Count > 13)                  AdvancedProperties[13].IsEnabled = val == 5;
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,WhiteBalance_ValueChanged,The following statement contains a magic number: if (AdvancedProperties.Count > 13)                  AdvancedProperties[13].IsEnabled = val == 5;
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,WhiteBalance_ValueChanged,The following statement contains a magic number: if (AdvancedProperties.Count > 14)                  AdvancedProperties[14].IsEnabled = val == 32786;
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,WhiteBalance_ValueChanged,The following statement contains a magic number: if (AdvancedProperties.Count > 14)                  AdvancedProperties[14].IsEnabled = val == 32786;
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,WhiteBalance_ValueChanged,The following statement contains a magic number: if (AdvancedProperties.Count > 14)                  AdvancedProperties[14].IsEnabled = val == 32786;
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  NormalExposureCompensation = new PropertyValue<long>();                  NormalExposureCompensation.SubType = typeof(int);                  NormalExposureCompensation.Name = "ExposureCompensation";                  NormalExposureCompensation.ValueChanged += ExposureCompensation_ValueChanged;                  MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc'                                                             CONST_PROP_ExposureBiasCompensation);                  Int16 defval = BitConverter.ToInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                  {                      Int16 val = BitConverter.ToInt16(result.Data' ((2*datasize) + 6 + 2) + i);                      decimal d = val;                      string s = Decimal.Round(d/1000' 1).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                      if (d > 0)                          s = "+" + s;                      NormalExposureCompensation.AddValues(s' val);                  }                  NormalExposureCompensation.ReloadValues();                  NormalExposureCompensation.SetValue(defval' false);                  ExposureCompensation = NormalExposureCompensation;              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  NormalExposureCompensation = new PropertyValue<long>();                  NormalExposureCompensation.SubType = typeof(int);                  NormalExposureCompensation.Name = "ExposureCompensation";                  NormalExposureCompensation.ValueChanged += ExposureCompensation_ValueChanged;                  MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc'                                                             CONST_PROP_ExposureBiasCompensation);                  Int16 defval = BitConverter.ToInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                  {                      Int16 val = BitConverter.ToInt16(result.Data' ((2*datasize) + 6 + 2) + i);                      decimal d = val;                      string s = Decimal.Round(d/1000' 1).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                      if (d > 0)                          s = "+" + s;                      NormalExposureCompensation.AddValues(s' val);                  }                  NormalExposureCompensation.ReloadValues();                  NormalExposureCompensation.SetValue(defval' false);                  ExposureCompensation = NormalExposureCompensation;              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  NormalExposureCompensation = new PropertyValue<long>();                  NormalExposureCompensation.SubType = typeof(int);                  NormalExposureCompensation.Name = "ExposureCompensation";                  NormalExposureCompensation.ValueChanged += ExposureCompensation_ValueChanged;                  MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc'                                                             CONST_PROP_ExposureBiasCompensation);                  Int16 defval = BitConverter.ToInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                  {                      Int16 val = BitConverter.ToInt16(result.Data' ((2*datasize) + 6 + 2) + i);                      decimal d = val;                      string s = Decimal.Round(d/1000' 1).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                      if (d > 0)                          s = "+" + s;                      NormalExposureCompensation.AddValues(s' val);                  }                  NormalExposureCompensation.ReloadValues();                  NormalExposureCompensation.SetValue(defval' false);                  ExposureCompensation = NormalExposureCompensation;              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  NormalExposureCompensation = new PropertyValue<long>();                  NormalExposureCompensation.SubType = typeof(int);                  NormalExposureCompensation.Name = "ExposureCompensation";                  NormalExposureCompensation.ValueChanged += ExposureCompensation_ValueChanged;                  MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc'                                                             CONST_PROP_ExposureBiasCompensation);                  Int16 defval = BitConverter.ToInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                  {                      Int16 val = BitConverter.ToInt16(result.Data' ((2*datasize) + 6 + 2) + i);                      decimal d = val;                      string s = Decimal.Round(d/1000' 1).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                      if (d > 0)                          s = "+" + s;                      NormalExposureCompensation.AddValues(s' val);                  }                  NormalExposureCompensation.ReloadValues();                  NormalExposureCompensation.SetValue(defval' false);                  ExposureCompensation = NormalExposureCompensation;              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  NormalExposureCompensation = new PropertyValue<long>();                  NormalExposureCompensation.SubType = typeof(int);                  NormalExposureCompensation.Name = "ExposureCompensation";                  NormalExposureCompensation.ValueChanged += ExposureCompensation_ValueChanged;                  MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc'                                                             CONST_PROP_ExposureBiasCompensation);                  Int16 defval = BitConverter.ToInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                  {                      Int16 val = BitConverter.ToInt16(result.Data' ((2*datasize) + 6 + 2) + i);                      decimal d = val;                      string s = Decimal.Round(d/1000' 1).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                      if (d > 0)                          s = "+" + s;                      NormalExposureCompensation.AddValues(s' val);                  }                  NormalExposureCompensation.ReloadValues();                  NormalExposureCompensation.SetValue(defval' false);                  ExposureCompensation = NormalExposureCompensation;              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  NormalExposureCompensation = new PropertyValue<long>();                  NormalExposureCompensation.SubType = typeof(int);                  NormalExposureCompensation.Name = "ExposureCompensation";                  NormalExposureCompensation.ValueChanged += ExposureCompensation_ValueChanged;                  MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc'                                                             CONST_PROP_ExposureBiasCompensation);                  Int16 defval = BitConverter.ToInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                  {                      Int16 val = BitConverter.ToInt16(result.Data' ((2*datasize) + 6 + 2) + i);                      decimal d = val;                      string s = Decimal.Round(d/1000' 1).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                      if (d > 0)                          s = "+" + s;                      NormalExposureCompensation.AddValues(s' val);                  }                  NormalExposureCompensation.ReloadValues();                  NormalExposureCompensation.SetValue(defval' false);                  ExposureCompensation = NormalExposureCompensation;              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  NormalExposureCompensation = new PropertyValue<long>();                  NormalExposureCompensation.SubType = typeof(int);                  NormalExposureCompensation.Name = "ExposureCompensation";                  NormalExposureCompensation.ValueChanged += ExposureCompensation_ValueChanged;                  MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc'                                                             CONST_PROP_ExposureBiasCompensation);                  Int16 defval = BitConverter.ToInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                  {                      Int16 val = BitConverter.ToInt16(result.Data' ((2*datasize) + 6 + 2) + i);                      decimal d = val;                      string s = Decimal.Round(d/1000' 1).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                      if (d > 0)                          s = "+" + s;                      NormalExposureCompensation.AddValues(s' val);                  }                  NormalExposureCompensation.ReloadValues();                  NormalExposureCompensation.SetValue(defval' false);                  ExposureCompensation = NormalExposureCompensation;              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  NormalExposureCompensation = new PropertyValue<long>();                  NormalExposureCompensation.SubType = typeof(int);                  NormalExposureCompensation.Name = "ExposureCompensation";                  NormalExposureCompensation.ValueChanged += ExposureCompensation_ValueChanged;                  MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc'                                                             CONST_PROP_ExposureBiasCompensation);                  Int16 defval = BitConverter.ToInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                  {                      Int16 val = BitConverter.ToInt16(result.Data' ((2*datasize) + 6 + 2) + i);                      decimal d = val;                      string s = Decimal.Round(d/1000' 1).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                      if (d > 0)                          s = "+" + s;                      NormalExposureCompensation.AddValues(s' val);                  }                  NormalExposureCompensation.ReloadValues();                  NormalExposureCompensation.SetValue(defval' false);                  ExposureCompensation = NormalExposureCompensation;              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  NormalExposureCompensation = new PropertyValue<long>();                  NormalExposureCompensation.SubType = typeof(int);                  NormalExposureCompensation.Name = "ExposureCompensation";                  NormalExposureCompensation.ValueChanged += ExposureCompensation_ValueChanged;                  MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc'                                                             CONST_PROP_ExposureBiasCompensation);                  Int16 defval = BitConverter.ToInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                  {                      Int16 val = BitConverter.ToInt16(result.Data' ((2*datasize) + 6 + 2) + i);                      decimal d = val;                      string s = Decimal.Round(d/1000' 1).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                      if (d > 0)                          s = "+" + s;                      NormalExposureCompensation.AddValues(s' val);                  }                  NormalExposureCompensation.ReloadValues();                  NormalExposureCompensation.SetValue(defval' false);                  ExposureCompensation = NormalExposureCompensation;              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  MovieExposureCompensation = new PropertyValue<long>();                  MovieExposureCompensation.SubType = typeof(int);                  MovieExposureCompensation.Name = "ExposureCompensation";                  MovieExposureCompensation.ValueChanged += MovieExposureCompensation_ValueChanged;                  MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc'                                                             CONST_PROP_MovieExposureBiasCompensation);                  Int16 defval = BitConverter.ToInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      Int16 val = BitConverter.ToInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                      decimal d = val;                      string s = Decimal.Round(d / 1000' 1).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                      if (d > 0)                          s = "+" + s;                      MovieExposureCompensation.AddValues(s' val);                  }                  MovieExposureCompensation.ReloadValues();                  MovieExposureCompensation.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  MovieExposureCompensation = new PropertyValue<long>();                  MovieExposureCompensation.SubType = typeof(int);                  MovieExposureCompensation.Name = "ExposureCompensation";                  MovieExposureCompensation.ValueChanged += MovieExposureCompensation_ValueChanged;                  MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc'                                                             CONST_PROP_MovieExposureBiasCompensation);                  Int16 defval = BitConverter.ToInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      Int16 val = BitConverter.ToInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                      decimal d = val;                      string s = Decimal.Round(d / 1000' 1).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                      if (d > 0)                          s = "+" + s;                      MovieExposureCompensation.AddValues(s' val);                  }                  MovieExposureCompensation.ReloadValues();                  MovieExposureCompensation.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  MovieExposureCompensation = new PropertyValue<long>();                  MovieExposureCompensation.SubType = typeof(int);                  MovieExposureCompensation.Name = "ExposureCompensation";                  MovieExposureCompensation.ValueChanged += MovieExposureCompensation_ValueChanged;                  MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc'                                                             CONST_PROP_MovieExposureBiasCompensation);                  Int16 defval = BitConverter.ToInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      Int16 val = BitConverter.ToInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                      decimal d = val;                      string s = Decimal.Round(d / 1000' 1).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                      if (d > 0)                          s = "+" + s;                      MovieExposureCompensation.AddValues(s' val);                  }                  MovieExposureCompensation.ReloadValues();                  MovieExposureCompensation.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  MovieExposureCompensation = new PropertyValue<long>();                  MovieExposureCompensation.SubType = typeof(int);                  MovieExposureCompensation.Name = "ExposureCompensation";                  MovieExposureCompensation.ValueChanged += MovieExposureCompensation_ValueChanged;                  MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc'                                                             CONST_PROP_MovieExposureBiasCompensation);                  Int16 defval = BitConverter.ToInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      Int16 val = BitConverter.ToInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                      decimal d = val;                      string s = Decimal.Round(d / 1000' 1).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                      if (d > 0)                          s = "+" + s;                      MovieExposureCompensation.AddValues(s' val);                  }                  MovieExposureCompensation.ReloadValues();                  MovieExposureCompensation.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  MovieExposureCompensation = new PropertyValue<long>();                  MovieExposureCompensation.SubType = typeof(int);                  MovieExposureCompensation.Name = "ExposureCompensation";                  MovieExposureCompensation.ValueChanged += MovieExposureCompensation_ValueChanged;                  MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc'                                                             CONST_PROP_MovieExposureBiasCompensation);                  Int16 defval = BitConverter.ToInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      Int16 val = BitConverter.ToInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                      decimal d = val;                      string s = Decimal.Round(d / 1000' 1).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                      if (d > 0)                          s = "+" + s;                      MovieExposureCompensation.AddValues(s' val);                  }                  MovieExposureCompensation.ReloadValues();                  MovieExposureCompensation.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  MovieExposureCompensation = new PropertyValue<long>();                  MovieExposureCompensation.SubType = typeof(int);                  MovieExposureCompensation.Name = "ExposureCompensation";                  MovieExposureCompensation.ValueChanged += MovieExposureCompensation_ValueChanged;                  MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc'                                                             CONST_PROP_MovieExposureBiasCompensation);                  Int16 defval = BitConverter.ToInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      Int16 val = BitConverter.ToInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                      decimal d = val;                      string s = Decimal.Round(d / 1000' 1).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                      if (d > 0)                          s = "+" + s;                      MovieExposureCompensation.AddValues(s' val);                  }                  MovieExposureCompensation.ReloadValues();                  MovieExposureCompensation.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  MovieExposureCompensation = new PropertyValue<long>();                  MovieExposureCompensation.SubType = typeof(int);                  MovieExposureCompensation.Name = "ExposureCompensation";                  MovieExposureCompensation.ValueChanged += MovieExposureCompensation_ValueChanged;                  MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc'                                                             CONST_PROP_MovieExposureBiasCompensation);                  Int16 defval = BitConverter.ToInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      Int16 val = BitConverter.ToInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                      decimal d = val;                      string s = Decimal.Round(d / 1000' 1).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                      if (d > 0)                          s = "+" + s;                      MovieExposureCompensation.AddValues(s' val);                  }                  MovieExposureCompensation.ReloadValues();                  MovieExposureCompensation.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  MovieExposureCompensation = new PropertyValue<long>();                  MovieExposureCompensation.SubType = typeof(int);                  MovieExposureCompensation.Name = "ExposureCompensation";                  MovieExposureCompensation.ValueChanged += MovieExposureCompensation_ValueChanged;                  MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc'                                                             CONST_PROP_MovieExposureBiasCompensation);                  Int16 defval = BitConverter.ToInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      Int16 val = BitConverter.ToInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                      decimal d = val;                      string s = Decimal.Round(d / 1000' 1).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                      if (d > 0)                          s = "+" + s;                      MovieExposureCompensation.AddValues(s' val);                  }                  MovieExposureCompensation.ReloadValues();                  MovieExposureCompensation.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  MovieExposureCompensation = new PropertyValue<long>();                  MovieExposureCompensation.SubType = typeof(int);                  MovieExposureCompensation.Name = "ExposureCompensation";                  MovieExposureCompensation.ValueChanged += MovieExposureCompensation_ValueChanged;                  MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc'                                                             CONST_PROP_MovieExposureBiasCompensation);                  Int16 defval = BitConverter.ToInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      Int16 val = BitConverter.ToInt16(result.Data' ((2 * datasize) + 6 + 2) + i);                      decimal d = val;                      string s = Decimal.Round(d / 1000' 1).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));                      if (d > 0)                          s = "+" + s;                      MovieExposureCompensation.AddValues(s' val);                  }                  MovieExposureCompensation.ReloadValues();                  MovieExposureCompensation.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitCompressionSetting,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 1;                  CompressionSetting = new PropertyValue<long>();                  CompressionSetting.SubType = typeof(int);                  CompressionSetting.Name = "CompressionSetting ";                  CompressionSetting.ValueChanged += CompressionSetting_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_CompressionSetting);                  if(result.Data.Length==0)                      return;                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  byte defval = result.Data[datasize + 5];                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      byte val = result.Data[((2 * datasize) + 6 + 2) + i];                      CompressionSetting.AddValues(_csTable.ContainsKey(val) ? _csTable[val] : val.ToString()' val);                  }                  CompressionSetting.ReloadValues();                  CompressionSetting.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitCompressionSetting,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 1;                  CompressionSetting = new PropertyValue<long>();                  CompressionSetting.SubType = typeof(int);                  CompressionSetting.Name = "CompressionSetting ";                  CompressionSetting.ValueChanged += CompressionSetting_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_CompressionSetting);                  if(result.Data.Length==0)                      return;                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  byte defval = result.Data[datasize + 5];                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      byte val = result.Data[((2 * datasize) + 6 + 2) + i];                      CompressionSetting.AddValues(_csTable.ContainsKey(val) ? _csTable[val] : val.ToString()' val);                  }                  CompressionSetting.ReloadValues();                  CompressionSetting.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitCompressionSetting,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 1;                  CompressionSetting = new PropertyValue<long>();                  CompressionSetting.SubType = typeof(int);                  CompressionSetting.Name = "CompressionSetting ";                  CompressionSetting.ValueChanged += CompressionSetting_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_CompressionSetting);                  if(result.Data.Length==0)                      return;                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  byte defval = result.Data[datasize + 5];                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      byte val = result.Data[((2 * datasize) + 6 + 2) + i];                      CompressionSetting.AddValues(_csTable.ContainsKey(val) ? _csTable[val] : val.ToString()' val);                  }                  CompressionSetting.ReloadValues();                  CompressionSetting.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitCompressionSetting,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 1;                  CompressionSetting = new PropertyValue<long>();                  CompressionSetting.SubType = typeof(int);                  CompressionSetting.Name = "CompressionSetting ";                  CompressionSetting.ValueChanged += CompressionSetting_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_CompressionSetting);                  if(result.Data.Length==0)                      return;                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  byte defval = result.Data[datasize + 5];                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      byte val = result.Data[((2 * datasize) + 6 + 2) + i];                      CompressionSetting.AddValues(_csTable.ContainsKey(val) ? _csTable[val] : val.ToString()' val);                  }                  CompressionSetting.ReloadValues();                  CompressionSetting.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitCompressionSetting,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 1;                  CompressionSetting = new PropertyValue<long>();                  CompressionSetting.SubType = typeof(int);                  CompressionSetting.Name = "CompressionSetting ";                  CompressionSetting.ValueChanged += CompressionSetting_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_CompressionSetting);                  if(result.Data.Length==0)                      return;                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  byte defval = result.Data[datasize + 5];                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      byte val = result.Data[((2 * datasize) + 6 + 2) + i];                      CompressionSetting.AddValues(_csTable.ContainsKey(val) ? _csTable[val] : val.ToString()' val);                  }                  CompressionSetting.ReloadValues();                  CompressionSetting.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitCompressionSetting,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 1;                  CompressionSetting = new PropertyValue<long>();                  CompressionSetting.SubType = typeof(int);                  CompressionSetting.Name = "CompressionSetting ";                  CompressionSetting.ValueChanged += CompressionSetting_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_CompressionSetting);                  if(result.Data.Length==0)                      return;                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  byte defval = result.Data[datasize + 5];                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      byte val = result.Data[((2 * datasize) + 6 + 2) + i];                      CompressionSetting.AddValues(_csTable.ContainsKey(val) ? _csTable[val] : val.ToString()' val);                  }                  CompressionSetting.ReloadValues();                  CompressionSetting.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitCompressionSetting,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 1;                  CompressionSetting = new PropertyValue<long>();                  CompressionSetting.SubType = typeof(int);                  CompressionSetting.Name = "CompressionSetting ";                  CompressionSetting.ValueChanged += CompressionSetting_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_CompressionSetting);                  if(result.Data.Length==0)                      return;                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  byte defval = result.Data[datasize + 5];                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      byte val = result.Data[((2 * datasize) + 6 + 2) + i];                      CompressionSetting.AddValues(_csTable.ContainsKey(val) ? _csTable[val] : val.ToString()' val);                  }                  CompressionSetting.ReloadValues();                  CompressionSetting.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitCompressionSetting,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 1;                  CompressionSetting = new PropertyValue<long>();                  CompressionSetting.SubType = typeof(int);                  CompressionSetting.Name = "CompressionSetting ";                  CompressionSetting.ValueChanged += CompressionSetting_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_CompressionSetting);                  if(result.Data.Length==0)                      return;                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  byte defval = result.Data[datasize + 5];                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      byte val = result.Data[((2 * datasize) + 6 + 2) + i];                      CompressionSetting.AddValues(_csTable.ContainsKey(val) ? _csTable[val] : val.ToString()' val);                  }                  CompressionSetting.ReloadValues();                  CompressionSetting.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitCompressionSetting,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 1;                  CompressionSetting = new PropertyValue<long>();                  CompressionSetting.SubType = typeof(int);                  CompressionSetting.Name = "CompressionSetting ";                  CompressionSetting.ValueChanged += CompressionSetting_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_CompressionSetting);                  if(result.Data.Length==0)                      return;                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  byte defval = result.Data[datasize + 5];                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      byte val = result.Data[((2 * datasize) + 6 + 2) + i];                      CompressionSetting.AddValues(_csTable.ContainsKey(val) ? _csTable[val] : val.ToString()' val);                  }                  CompressionSetting.ReloadValues();                  CompressionSetting.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitCompressionSetting,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 1;                  CompressionSetting = new PropertyValue<long>();                  CompressionSetting.SubType = typeof(int);                  CompressionSetting.Name = "CompressionSetting ";                  CompressionSetting.ValueChanged += CompressionSetting_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_CompressionSetting);                  if(result.Data.Length==0)                      return;                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  byte defval = result.Data[datasize + 5];                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      byte val = result.Data[((2 * datasize) + 6 + 2) + i];                      CompressionSetting.AddValues(_csTable.ContainsKey(val) ? _csTable[val] : val.ToString()' val);                  }                  CompressionSetting.ReloadValues();                  CompressionSetting.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureMeteringMode,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  ExposureMeteringMode = new PropertyValue<long>();                  ExposureMeteringMode.SubType = typeof(int);                  ExposureMeteringMode.Name = "ExposureMeteringMode";                  ExposureMeteringMode.ValueChanged += ExposureMeteringMode_ValueChanged;                  MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_ExposureMeteringMode);                  UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                  {                      UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                      ExposureMeteringMode.AddValues(_emmTable.ContainsKey(val) ? _emmTable[val] : val.ToString()' val);                  }                  ExposureMeteringMode.ReloadValues();                  ExposureMeteringMode.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureMeteringMode,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  ExposureMeteringMode = new PropertyValue<long>();                  ExposureMeteringMode.SubType = typeof(int);                  ExposureMeteringMode.Name = "ExposureMeteringMode";                  ExposureMeteringMode.ValueChanged += ExposureMeteringMode_ValueChanged;                  MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_ExposureMeteringMode);                  UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                  {                      UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                      ExposureMeteringMode.AddValues(_emmTable.ContainsKey(val) ? _emmTable[val] : val.ToString()' val);                  }                  ExposureMeteringMode.ReloadValues();                  ExposureMeteringMode.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureMeteringMode,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  ExposureMeteringMode = new PropertyValue<long>();                  ExposureMeteringMode.SubType = typeof(int);                  ExposureMeteringMode.Name = "ExposureMeteringMode";                  ExposureMeteringMode.ValueChanged += ExposureMeteringMode_ValueChanged;                  MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_ExposureMeteringMode);                  UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                  {                      UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                      ExposureMeteringMode.AddValues(_emmTable.ContainsKey(val) ? _emmTable[val] : val.ToString()' val);                  }                  ExposureMeteringMode.ReloadValues();                  ExposureMeteringMode.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureMeteringMode,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  ExposureMeteringMode = new PropertyValue<long>();                  ExposureMeteringMode.SubType = typeof(int);                  ExposureMeteringMode.Name = "ExposureMeteringMode";                  ExposureMeteringMode.ValueChanged += ExposureMeteringMode_ValueChanged;                  MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_ExposureMeteringMode);                  UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                  {                      UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                      ExposureMeteringMode.AddValues(_emmTable.ContainsKey(val) ? _emmTable[val] : val.ToString()' val);                  }                  ExposureMeteringMode.ReloadValues();                  ExposureMeteringMode.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureMeteringMode,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  ExposureMeteringMode = new PropertyValue<long>();                  ExposureMeteringMode.SubType = typeof(int);                  ExposureMeteringMode.Name = "ExposureMeteringMode";                  ExposureMeteringMode.ValueChanged += ExposureMeteringMode_ValueChanged;                  MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_ExposureMeteringMode);                  UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                  {                      UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                      ExposureMeteringMode.AddValues(_emmTable.ContainsKey(val) ? _emmTable[val] : val.ToString()' val);                  }                  ExposureMeteringMode.ReloadValues();                  ExposureMeteringMode.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureMeteringMode,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  ExposureMeteringMode = new PropertyValue<long>();                  ExposureMeteringMode.SubType = typeof(int);                  ExposureMeteringMode.Name = "ExposureMeteringMode";                  ExposureMeteringMode.ValueChanged += ExposureMeteringMode_ValueChanged;                  MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_ExposureMeteringMode);                  UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                  {                      UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                      ExposureMeteringMode.AddValues(_emmTable.ContainsKey(val) ? _emmTable[val] : val.ToString()' val);                  }                  ExposureMeteringMode.ReloadValues();                  ExposureMeteringMode.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureMeteringMode,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  ExposureMeteringMode = new PropertyValue<long>();                  ExposureMeteringMode.SubType = typeof(int);                  ExposureMeteringMode.Name = "ExposureMeteringMode";                  ExposureMeteringMode.ValueChanged += ExposureMeteringMode_ValueChanged;                  MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_ExposureMeteringMode);                  UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                  {                      UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                      ExposureMeteringMode.AddValues(_emmTable.ContainsKey(val) ? _emmTable[val] : val.ToString()' val);                  }                  ExposureMeteringMode.ReloadValues();                  ExposureMeteringMode.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureMeteringMode,The following statement contains a magic number: try              {                  DeviceReady();                  byte datasize = 2;                  ExposureMeteringMode = new PropertyValue<long>();                  ExposureMeteringMode.SubType = typeof(int);                  ExposureMeteringMode.Name = "ExposureMeteringMode";                  ExposureMeteringMode.ValueChanged += ExposureMeteringMode_ValueChanged;                  MTPDataResponse result = ExecuteReadDataEx(CONST_CMD_GetDevicePropDesc' CONST_PROP_ExposureMeteringMode);                  UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);                  for (int i = 0; i < result.Data.Length - ((2*datasize) + 6 + 2); i += datasize)                  {                      UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);                      ExposureMeteringMode.AddValues(_emmTable.ContainsKey(val) ? _emmTable[val] : val.ToString()' val);                  }                  ExposureMeteringMode.ReloadValues();                  ExposureMeteringMode.SetValue(defval' false);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitFocusMode,The following statement contains a magic number: try              {                  Log.Debug("InitFocusMode 1");                  DeviceReady();                  NormalFocusMode = new PropertyValue<long>();                  NormalFocusMode.Name = "FocusMode";                  NormalFocusMode.Code = CONST_PROP_AFModeSelect;                  NormalFocusMode.IsEnabled = true;                  NormalFocusMode.AddValues("AF-S"' 0);                  NormalFocusMode.AddValues("AF-C"' 1);                  NormalFocusMode.AddValues("AF-A"' 2);                  NormalFocusMode.AddValues("MF (hard)"' 3);                  NormalFocusMode.AddValues("MF (soft)"' 4);                  NormalFocusMode.ReloadValues();                  NormalFocusMode.ValueChanged += NormalFocusMode_ValueChanged;                  FocusMode = NormalFocusMode;                  ReadDeviceProperties(NormalFocusMode.Code);                  Log.Debug("InitFocusMode 2");                  LiveViewFocusMode = new PropertyValue<long>();                  LiveViewFocusMode.Name = "FocusMode";                  LiveViewFocusMode.Code = CONST_PROP_AfModeAtLiveView;                  LiveViewFocusMode.IsEnabled = true;                  LiveViewFocusMode.AddValues("AF-S"' 0);                  LiveViewFocusMode.AddValues("AF-F"' 2);                  LiveViewFocusMode.AddValues("MF (hard)"' 3);                  LiveViewFocusMode.AddValues("MF (soft)"' 4);                  LiveViewFocusMode.ReloadValues();                  LiveViewFocusMode.ValueChanged += LiveViewFocusMode_ValueChanged;                  ReadDeviceProperties(LiveViewFocusMode.Code);                  Log.Debug("InitFocusMode 3");              }              catch (Exception exception)              {                  Log.Error("Unable to init focus mode property"' exception);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitFocusMode,The following statement contains a magic number: try              {                  Log.Debug("InitFocusMode 1");                  DeviceReady();                  NormalFocusMode = new PropertyValue<long>();                  NormalFocusMode.Name = "FocusMode";                  NormalFocusMode.Code = CONST_PROP_AFModeSelect;                  NormalFocusMode.IsEnabled = true;                  NormalFocusMode.AddValues("AF-S"' 0);                  NormalFocusMode.AddValues("AF-C"' 1);                  NormalFocusMode.AddValues("AF-A"' 2);                  NormalFocusMode.AddValues("MF (hard)"' 3);                  NormalFocusMode.AddValues("MF (soft)"' 4);                  NormalFocusMode.ReloadValues();                  NormalFocusMode.ValueChanged += NormalFocusMode_ValueChanged;                  FocusMode = NormalFocusMode;                  ReadDeviceProperties(NormalFocusMode.Code);                  Log.Debug("InitFocusMode 2");                  LiveViewFocusMode = new PropertyValue<long>();                  LiveViewFocusMode.Name = "FocusMode";                  LiveViewFocusMode.Code = CONST_PROP_AfModeAtLiveView;                  LiveViewFocusMode.IsEnabled = true;                  LiveViewFocusMode.AddValues("AF-S"' 0);                  LiveViewFocusMode.AddValues("AF-F"' 2);                  LiveViewFocusMode.AddValues("MF (hard)"' 3);                  LiveViewFocusMode.AddValues("MF (soft)"' 4);                  LiveViewFocusMode.ReloadValues();                  LiveViewFocusMode.ValueChanged += LiveViewFocusMode_ValueChanged;                  ReadDeviceProperties(LiveViewFocusMode.Code);                  Log.Debug("InitFocusMode 3");              }              catch (Exception exception)              {                  Log.Error("Unable to init focus mode property"' exception);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitFocusMode,The following statement contains a magic number: try              {                  Log.Debug("InitFocusMode 1");                  DeviceReady();                  NormalFocusMode = new PropertyValue<long>();                  NormalFocusMode.Name = "FocusMode";                  NormalFocusMode.Code = CONST_PROP_AFModeSelect;                  NormalFocusMode.IsEnabled = true;                  NormalFocusMode.AddValues("AF-S"' 0);                  NormalFocusMode.AddValues("AF-C"' 1);                  NormalFocusMode.AddValues("AF-A"' 2);                  NormalFocusMode.AddValues("MF (hard)"' 3);                  NormalFocusMode.AddValues("MF (soft)"' 4);                  NormalFocusMode.ReloadValues();                  NormalFocusMode.ValueChanged += NormalFocusMode_ValueChanged;                  FocusMode = NormalFocusMode;                  ReadDeviceProperties(NormalFocusMode.Code);                  Log.Debug("InitFocusMode 2");                  LiveViewFocusMode = new PropertyValue<long>();                  LiveViewFocusMode.Name = "FocusMode";                  LiveViewFocusMode.Code = CONST_PROP_AfModeAtLiveView;                  LiveViewFocusMode.IsEnabled = true;                  LiveViewFocusMode.AddValues("AF-S"' 0);                  LiveViewFocusMode.AddValues("AF-F"' 2);                  LiveViewFocusMode.AddValues("MF (hard)"' 3);                  LiveViewFocusMode.AddValues("MF (soft)"' 4);                  LiveViewFocusMode.ReloadValues();                  LiveViewFocusMode.ValueChanged += LiveViewFocusMode_ValueChanged;                  ReadDeviceProperties(LiveViewFocusMode.Code);                  Log.Debug("InitFocusMode 3");              }              catch (Exception exception)              {                  Log.Error("Unable to init focus mode property"' exception);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitFocusMode,The following statement contains a magic number: try              {                  Log.Debug("InitFocusMode 1");                  DeviceReady();                  NormalFocusMode = new PropertyValue<long>();                  NormalFocusMode.Name = "FocusMode";                  NormalFocusMode.Code = CONST_PROP_AFModeSelect;                  NormalFocusMode.IsEnabled = true;                  NormalFocusMode.AddValues("AF-S"' 0);                  NormalFocusMode.AddValues("AF-C"' 1);                  NormalFocusMode.AddValues("AF-A"' 2);                  NormalFocusMode.AddValues("MF (hard)"' 3);                  NormalFocusMode.AddValues("MF (soft)"' 4);                  NormalFocusMode.ReloadValues();                  NormalFocusMode.ValueChanged += NormalFocusMode_ValueChanged;                  FocusMode = NormalFocusMode;                  ReadDeviceProperties(NormalFocusMode.Code);                  Log.Debug("InitFocusMode 2");                  LiveViewFocusMode = new PropertyValue<long>();                  LiveViewFocusMode.Name = "FocusMode";                  LiveViewFocusMode.Code = CONST_PROP_AfModeAtLiveView;                  LiveViewFocusMode.IsEnabled = true;                  LiveViewFocusMode.AddValues("AF-S"' 0);                  LiveViewFocusMode.AddValues("AF-F"' 2);                  LiveViewFocusMode.AddValues("MF (hard)"' 3);                  LiveViewFocusMode.AddValues("MF (soft)"' 4);                  LiveViewFocusMode.ReloadValues();                  LiveViewFocusMode.ValueChanged += LiveViewFocusMode_ValueChanged;                  ReadDeviceProperties(LiveViewFocusMode.Code);                  Log.Debug("InitFocusMode 3");              }              catch (Exception exception)              {                  Log.Error("Unable to init focus mode property"' exception);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitFocusMode,The following statement contains a magic number: try              {                  Log.Debug("InitFocusMode 1");                  DeviceReady();                  NormalFocusMode = new PropertyValue<long>();                  NormalFocusMode.Name = "FocusMode";                  NormalFocusMode.Code = CONST_PROP_AFModeSelect;                  NormalFocusMode.IsEnabled = true;                  NormalFocusMode.AddValues("AF-S"' 0);                  NormalFocusMode.AddValues("AF-C"' 1);                  NormalFocusMode.AddValues("AF-A"' 2);                  NormalFocusMode.AddValues("MF (hard)"' 3);                  NormalFocusMode.AddValues("MF (soft)"' 4);                  NormalFocusMode.ReloadValues();                  NormalFocusMode.ValueChanged += NormalFocusMode_ValueChanged;                  FocusMode = NormalFocusMode;                  ReadDeviceProperties(NormalFocusMode.Code);                  Log.Debug("InitFocusMode 2");                  LiveViewFocusMode = new PropertyValue<long>();                  LiveViewFocusMode.Name = "FocusMode";                  LiveViewFocusMode.Code = CONST_PROP_AfModeAtLiveView;                  LiveViewFocusMode.IsEnabled = true;                  LiveViewFocusMode.AddValues("AF-S"' 0);                  LiveViewFocusMode.AddValues("AF-F"' 2);                  LiveViewFocusMode.AddValues("MF (hard)"' 3);                  LiveViewFocusMode.AddValues("MF (soft)"' 4);                  LiveViewFocusMode.ReloadValues();                  LiveViewFocusMode.ValueChanged += LiveViewFocusMode_ValueChanged;                  ReadDeviceProperties(LiveViewFocusMode.Code);                  Log.Debug("InitFocusMode 3");              }              catch (Exception exception)              {                  Log.Error("Unable to init focus mode property"' exception);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitFocusMode,The following statement contains a magic number: try              {                  Log.Debug("InitFocusMode 1");                  DeviceReady();                  NormalFocusMode = new PropertyValue<long>();                  NormalFocusMode.Name = "FocusMode";                  NormalFocusMode.Code = CONST_PROP_AFModeSelect;                  NormalFocusMode.IsEnabled = true;                  NormalFocusMode.AddValues("AF-S"' 0);                  NormalFocusMode.AddValues("AF-C"' 1);                  NormalFocusMode.AddValues("AF-A"' 2);                  NormalFocusMode.AddValues("MF (hard)"' 3);                  NormalFocusMode.AddValues("MF (soft)"' 4);                  NormalFocusMode.ReloadValues();                  NormalFocusMode.ValueChanged += NormalFocusMode_ValueChanged;                  FocusMode = NormalFocusMode;                  ReadDeviceProperties(NormalFocusMode.Code);                  Log.Debug("InitFocusMode 2");                  LiveViewFocusMode = new PropertyValue<long>();                  LiveViewFocusMode.Name = "FocusMode";                  LiveViewFocusMode.Code = CONST_PROP_AfModeAtLiveView;                  LiveViewFocusMode.IsEnabled = true;                  LiveViewFocusMode.AddValues("AF-S"' 0);                  LiveViewFocusMode.AddValues("AF-F"' 2);                  LiveViewFocusMode.AddValues("MF (hard)"' 3);                  LiveViewFocusMode.AddValues("MF (soft)"' 4);                  LiveViewFocusMode.ReloadValues();                  LiveViewFocusMode.ValueChanged += LiveViewFocusMode_ValueChanged;                  ReadDeviceProperties(LiveViewFocusMode.Code);                  Log.Debug("InitFocusMode 3");              }              catch (Exception exception)              {                  Log.Error("Unable to init focus mode property"' exception);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetLiveViewImage,The following statement contains a magic number: if (Monitor.TryEnter(Locker' 10))              {                  try                  {                      //DeviceReady();                      viewData.HaveFocusData = true;                        const int headerSize = 384;                        var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetLiveViewImage);                      if (result.ErrorCode == ErrorCodes.MTP_Not_LiveView)                      {                          _timer.Start();                          viewData.IsLiveViewRunning = false;                          viewData.ImageData = null;                          return viewData;                                             }                      if (result.Data == null || result.Data.Length <= headerSize)                      {                          _timer.Start();                          viewData.ImageData = null;                          return viewData;                      }                      int cbBytesRead = result.Data.Length;                      GetAdditionalLiveViewData(viewData' result.Data);                      viewData.ImageDataPosition = 384;                      viewData.ImageData = result.Data;                  }                  finally                  {                      Monitor.Exit(Locker);                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetLiveViewImage,The following statement contains a magic number: if (Monitor.TryEnter(Locker' 10))              {                  try                  {                      //DeviceReady();                      viewData.HaveFocusData = true;                        const int headerSize = 384;                        var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetLiveViewImage);                      if (result.ErrorCode == ErrorCodes.MTP_Not_LiveView)                      {                          _timer.Start();                          viewData.IsLiveViewRunning = false;                          viewData.ImageData = null;                          return viewData;                                             }                      if (result.Data == null || result.Data.Length <= headerSize)                      {                          _timer.Start();                          viewData.ImageData = null;                          return viewData;                      }                      int cbBytesRead = result.Data.Length;                      GetAdditionalLiveViewData(viewData' result.Data);                      viewData.ImageDataPosition = 384;                      viewData.ImageData = result.Data;                  }                  finally                  {                      Monitor.Exit(Locker);                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetLiveViewImage,The following statement contains a magic number: if (Monitor.TryEnter(Locker' 10))              {                  try                  {                      //DeviceReady();                      viewData.HaveFocusData = true;                        const int headerSize = 384;                        var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetLiveViewImage);                      if (result.ErrorCode == ErrorCodes.MTP_Not_LiveView)                      {                          _timer.Start();                          viewData.IsLiveViewRunning = false;                          viewData.ImageData = null;                          return viewData;                                             }                      if (result.Data == null || result.Data.Length <= headerSize)                      {                          _timer.Start();                          viewData.ImageData = null;                          return viewData;                      }                      int cbBytesRead = result.Data.Length;                      GetAdditionalLiveViewData(viewData' result.Data);                      viewData.ImageDataPosition = 384;                      viewData.ImageData = result.Data;                  }                  finally                  {                      Monitor.Exit(Locker);                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LiveViewImageHeight = ToInt16(result' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.ImageWidth = ToInt16(result' 4);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.ImageHeight = ToInt16(result' 6);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusFrameXSize = ToInt16(result' 16);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusFrameYSize = ToInt16(result' 18);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusX = ToInt16(result' 20);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusY = ToInt16(result' 22);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.MovieTimeRemain = ToDeciaml(result' 56);
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.Focused = result[40] != 1;
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetAdditionalLiveViewData,The following statement contains a magic number: if (result[29] == 1)                  viewData.Rotation = -90;
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetAdditionalLiveViewData,The following statement contains a magic number: if (result[29] == 1)                  viewData.Rotation = -90;
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetAdditionalLiveViewData,The following statement contains a magic number: if (result[29] == 2)                  viewData.Rotation = 90;
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetAdditionalLiveViewData,The following statement contains a magic number: if (result[29] == 2)                  viewData.Rotation = 90;
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetAdditionalLiveViewData,The following statement contains a magic number: if (result[29] == 2)                  viewData.Rotation = 90;
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.MovieIsRecording = result[60] == 1;
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,CapturePhotoNoAf,The following statement contains a magic number: lock (Locker)              {                  MTPDataResponse val = null;                  byte oldval = 0;                  try                  {                      IsBusy = true;                      DeviceReady();                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewStatus);                      //ErrorCodes.GetException(response.ErrorCode);                      // test if live view is on                       if (response.Data != null && response.Data.Length > 0 && response.Data[0] > 0)                      {                          if (CaptureInSdRam)                          {                              ErrorCodes.GetException(ExecuteWithNoData(CONST_CMD_InitiateCaptureRecInSdram' 0xFFFFFFFF));                              return;                          }                          else                          {                              ErrorCodes.GetException(ExecuteWithNoData(CONST_CMD_InitiateCaptureRecInMedia' 0xFFFFFFFF' 0x0000));                              return;                          }                          StopLiveView();                      }                        val = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AFModeSelect );                      if (val.Data != null && val.Data.Length > 0)                          oldval = val.Data[0];                      SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 4}' CONST_PROP_AFModeSelect);                      DeviceReady();                      ErrorCodes.GetException(CaptureInSdRam                                                  ? ExecuteWithNoData(CONST_CMD_InitiateCaptureRecInSdram' 0xFFFFFFFF)                                                  : ExecuteWithNoData(CONST_CMD_InitiateCapture));                      //DeviceReady();                  }                  catch                  {                      IsBusy = false;                      throw;                  }                  finally                  {                      //IsBusy = false;                      if (val != null && (val.Data != null && val.Data.Length > 0))                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {oldval}' CONST_PROP_AFModeSelect);                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReadDeviceProperties,The following statement contains a magic number: try                  {                      HaveLiveView = true;                      switch (prop)                      {                          case CONST_PROP_Fnumber:                              //FNumber.SetValue(_stillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_Fnumber));                              ReInitFNumber(false);                              break;                          case CONST_PROP_MovieFnumber:                              //FNumber.SetValue(_stillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_Fnumber));                              ReInitFNumber(false);                              break;                          case CONST_PROP_ExposureIndex:                              NormalIsoNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                  CONST_PROP_ExposureIndex)' false);                              break;                          case CONST_PROP_MovieExposureIndex:                              MovieFNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                  CONST_PROP_MovieExposureIndex)' false);                              break;                          case CONST_PROP_ExposureTime:                              NormalShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                     CONST_PROP_ExposureTime)' false);                              break;                          case CONST_PROP_MovieShutterSpeed:                              MovieShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                     CONST_PROP_MovieShutterSpeed)' false);                              break;                          case CONST_PROP_WhiteBalance:                              WhiteBalance.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                     CONST_PROP_WhiteBalance)' false);                              break;                          case CONST_PROP_ExposureProgramMode:                              Mode.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                             CONST_PROP_ExposureProgramMode)' true);                              break;                          case CONST_PROP_ExposureBiasCompensation:                              NormalExposureCompensation.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                             CONST_PROP_ExposureBiasCompensation)'                                                            false);                              break;                          case CONST_PROP_MovieExposureBiasCompensation:                              MovieExposureCompensation.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                             CONST_PROP_MovieExposureBiasCompensation)'                                                            false);                              break;                            case CONST_PROP_CompressionSetting:                              CompressionSetting.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                           CONST_PROP_CompressionSetting)'                                                          false);                              break;                          case CONST_PROP_ExposureMeteringMode:                              ExposureMeteringMode.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                             CONST_PROP_ExposureMeteringMode)'                                                            false);                              break;                          case CONST_PROP_AFModeSelect:                              NormalFocusMode.SetValue(                                  StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AFModeSelect)'                                  false);                              NormalFocusMode.IsEnabled = NormalFocusMode.NumericValue != 3;                              break;                          case CONST_PROP_AfModeAtLiveView:                              LiveViewFocusMode.SetValue(                                  StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AfModeAtLiveView)'                                  false);                              LiveViewFocusMode.IsEnabled = LiveViewFocusMode.NumericValue != 3;                              break;                          case CONST_PROP_BatteryLevel:                              {                                  var data = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_BatteryLevel);                                  if (data.Data != null && data.Data.Length > 0)                                      Battery = data.Data[0];                              }                              break;                          case CONST_PROP_ExposureIndicateStatus:                              {                                  var data =                                      StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                       CONST_PROP_ExposureIndicateStatus);                                  if (data.Data != null && data.Data.Length > 0)                                  {                                      sbyte i =                                          unchecked(                                              (sbyte)data.Data[0]);                                      ExposureStatus = Convert.ToInt32(i);                                  }                              }                              break;                          case CONST_PROP_LiveViewStatus:                          {                              MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewStatus);                              if (response.Data != null && response.Data.Length > 0 )                              {                                  LiveViewOn = response.Data[0] == 1;                              }                              else                              {                                  LiveViewOn = false;                              }                              break;                          }                          case CONST_PROP_LiveViewSelector:                          {                              MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewSelector);                              if (response.Data != null && response.Data.Length > 0)                              {                                  LiveViewMovieOn = response.Data[0] == 1;                              }                              else                              {                                  LiveViewMovieOn = false;                              }                              break;                          }                          default:                              // imrovements from: http://digicamcontrol.com/forum/testingbug-reports/buglet-nikonbasecs                              foreach (PropertyValue<long> advancedProperty in AdvancedProperties.Where(advancedProperty => advancedProperty.Code == prop))                              {                                  if (advancedProperty.Name == "Image Size")                                  {                                      var val = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                          advancedProperty.Code);                                      if (val.Data != null && val.Data.Length > 0)                                      {                                          advancedProperty.SetValue(                                              Encoding.Unicode.GetString(val.Data' 1' 20)' false);                                      }                                  }                                  else                                  {                                      advancedProperty.SetValue(                                          StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                              advancedProperty.Code)' false);                                  }                              }                              break;                      }                  }                  catch (Exception ex)                  {                      Log.Error("ReadDeviceProperties error"' ex);                  }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReadDeviceProperties,The following statement contains a magic number: try                  {                      HaveLiveView = true;                      switch (prop)                      {                          case CONST_PROP_Fnumber:                              //FNumber.SetValue(_stillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_Fnumber));                              ReInitFNumber(false);                              break;                          case CONST_PROP_MovieFnumber:                              //FNumber.SetValue(_stillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_Fnumber));                              ReInitFNumber(false);                              break;                          case CONST_PROP_ExposureIndex:                              NormalIsoNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                  CONST_PROP_ExposureIndex)' false);                              break;                          case CONST_PROP_MovieExposureIndex:                              MovieFNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                  CONST_PROP_MovieExposureIndex)' false);                              break;                          case CONST_PROP_ExposureTime:                              NormalShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                     CONST_PROP_ExposureTime)' false);                              break;                          case CONST_PROP_MovieShutterSpeed:                              MovieShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                     CONST_PROP_MovieShutterSpeed)' false);                              break;                          case CONST_PROP_WhiteBalance:                              WhiteBalance.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                     CONST_PROP_WhiteBalance)' false);                              break;                          case CONST_PROP_ExposureProgramMode:                              Mode.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                             CONST_PROP_ExposureProgramMode)' true);                              break;                          case CONST_PROP_ExposureBiasCompensation:                              NormalExposureCompensation.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                             CONST_PROP_ExposureBiasCompensation)'                                                            false);                              break;                          case CONST_PROP_MovieExposureBiasCompensation:                              MovieExposureCompensation.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                             CONST_PROP_MovieExposureBiasCompensation)'                                                            false);                              break;                            case CONST_PROP_CompressionSetting:                              CompressionSetting.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                           CONST_PROP_CompressionSetting)'                                                          false);                              break;                          case CONST_PROP_ExposureMeteringMode:                              ExposureMeteringMode.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                             CONST_PROP_ExposureMeteringMode)'                                                            false);                              break;                          case CONST_PROP_AFModeSelect:                              NormalFocusMode.SetValue(                                  StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AFModeSelect)'                                  false);                              NormalFocusMode.IsEnabled = NormalFocusMode.NumericValue != 3;                              break;                          case CONST_PROP_AfModeAtLiveView:                              LiveViewFocusMode.SetValue(                                  StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AfModeAtLiveView)'                                  false);                              LiveViewFocusMode.IsEnabled = LiveViewFocusMode.NumericValue != 3;                              break;                          case CONST_PROP_BatteryLevel:                              {                                  var data = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_BatteryLevel);                                  if (data.Data != null && data.Data.Length > 0)                                      Battery = data.Data[0];                              }                              break;                          case CONST_PROP_ExposureIndicateStatus:                              {                                  var data =                                      StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                       CONST_PROP_ExposureIndicateStatus);                                  if (data.Data != null && data.Data.Length > 0)                                  {                                      sbyte i =                                          unchecked(                                              (sbyte)data.Data[0]);                                      ExposureStatus = Convert.ToInt32(i);                                  }                              }                              break;                          case CONST_PROP_LiveViewStatus:                          {                              MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewStatus);                              if (response.Data != null && response.Data.Length > 0 )                              {                                  LiveViewOn = response.Data[0] == 1;                              }                              else                              {                                  LiveViewOn = false;                              }                              break;                          }                          case CONST_PROP_LiveViewSelector:                          {                              MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewSelector);                              if (response.Data != null && response.Data.Length > 0)                              {                                  LiveViewMovieOn = response.Data[0] == 1;                              }                              else                              {                                  LiveViewMovieOn = false;                              }                              break;                          }                          default:                              // imrovements from: http://digicamcontrol.com/forum/testingbug-reports/buglet-nikonbasecs                              foreach (PropertyValue<long> advancedProperty in AdvancedProperties.Where(advancedProperty => advancedProperty.Code == prop))                              {                                  if (advancedProperty.Name == "Image Size")                                  {                                      var val = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                          advancedProperty.Code);                                      if (val.Data != null && val.Data.Length > 0)                                      {                                          advancedProperty.SetValue(                                              Encoding.Unicode.GetString(val.Data' 1' 20)' false);                                      }                                  }                                  else                                  {                                      advancedProperty.SetValue(                                          StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                              advancedProperty.Code)' false);                                  }                              }                              break;                      }                  }                  catch (Exception ex)                  {                      Log.Error("ReadDeviceProperties error"' ex);                  }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReadDeviceProperties,The following statement contains a magic number: try                  {                      HaveLiveView = true;                      switch (prop)                      {                          case CONST_PROP_Fnumber:                              //FNumber.SetValue(_stillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_Fnumber));                              ReInitFNumber(false);                              break;                          case CONST_PROP_MovieFnumber:                              //FNumber.SetValue(_stillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_Fnumber));                              ReInitFNumber(false);                              break;                          case CONST_PROP_ExposureIndex:                              NormalIsoNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                  CONST_PROP_ExposureIndex)' false);                              break;                          case CONST_PROP_MovieExposureIndex:                              MovieFNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                  CONST_PROP_MovieExposureIndex)' false);                              break;                          case CONST_PROP_ExposureTime:                              NormalShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                     CONST_PROP_ExposureTime)' false);                              break;                          case CONST_PROP_MovieShutterSpeed:                              MovieShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                     CONST_PROP_MovieShutterSpeed)' false);                              break;                          case CONST_PROP_WhiteBalance:                              WhiteBalance.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                     CONST_PROP_WhiteBalance)' false);                              break;                          case CONST_PROP_ExposureProgramMode:                              Mode.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                             CONST_PROP_ExposureProgramMode)' true);                              break;                          case CONST_PROP_ExposureBiasCompensation:                              NormalExposureCompensation.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                             CONST_PROP_ExposureBiasCompensation)'                                                            false);                              break;                          case CONST_PROP_MovieExposureBiasCompensation:                              MovieExposureCompensation.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                             CONST_PROP_MovieExposureBiasCompensation)'                                                            false);                              break;                            case CONST_PROP_CompressionSetting:                              CompressionSetting.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                           CONST_PROP_CompressionSetting)'                                                          false);                              break;                          case CONST_PROP_ExposureMeteringMode:                              ExposureMeteringMode.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                             CONST_PROP_ExposureMeteringMode)'                                                            false);                              break;                          case CONST_PROP_AFModeSelect:                              NormalFocusMode.SetValue(                                  StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AFModeSelect)'                                  false);                              NormalFocusMode.IsEnabled = NormalFocusMode.NumericValue != 3;                              break;                          case CONST_PROP_AfModeAtLiveView:                              LiveViewFocusMode.SetValue(                                  StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AfModeAtLiveView)'                                  false);                              LiveViewFocusMode.IsEnabled = LiveViewFocusMode.NumericValue != 3;                              break;                          case CONST_PROP_BatteryLevel:                              {                                  var data = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_BatteryLevel);                                  if (data.Data != null && data.Data.Length > 0)                                      Battery = data.Data[0];                              }                              break;                          case CONST_PROP_ExposureIndicateStatus:                              {                                  var data =                                      StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                       CONST_PROP_ExposureIndicateStatus);                                  if (data.Data != null && data.Data.Length > 0)                                  {                                      sbyte i =                                          unchecked(                                              (sbyte)data.Data[0]);                                      ExposureStatus = Convert.ToInt32(i);                                  }                              }                              break;                          case CONST_PROP_LiveViewStatus:                          {                              MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewStatus);                              if (response.Data != null && response.Data.Length > 0 )                              {                                  LiveViewOn = response.Data[0] == 1;                              }                              else                              {                                  LiveViewOn = false;                              }                              break;                          }                          case CONST_PROP_LiveViewSelector:                          {                              MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewSelector);                              if (response.Data != null && response.Data.Length > 0)                              {                                  LiveViewMovieOn = response.Data[0] == 1;                              }                              else                              {                                  LiveViewMovieOn = false;                              }                              break;                          }                          default:                              // imrovements from: http://digicamcontrol.com/forum/testingbug-reports/buglet-nikonbasecs                              foreach (PropertyValue<long> advancedProperty in AdvancedProperties.Where(advancedProperty => advancedProperty.Code == prop))                              {                                  if (advancedProperty.Name == "Image Size")                                  {                                      var val = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                          advancedProperty.Code);                                      if (val.Data != null && val.Data.Length > 0)                                      {                                          advancedProperty.SetValue(                                              Encoding.Unicode.GetString(val.Data' 1' 20)' false);                                      }                                  }                                  else                                  {                                      advancedProperty.SetValue(                                          StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                              advancedProperty.Code)' false);                                  }                              }                              break;                      }                  }                  catch (Exception ex)                  {                      Log.Error("ReadDeviceProperties error"' ex);                  }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SetCameraField,The following statement contains a magic number: switch (cameraFieldType)              {                  case CameraFieldType.Comment:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0}' 0xD091);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD090);                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 1}' 0xD091);                      }                      break;                  case CameraFieldType.Artist:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD072);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD072);                      }                        break;                  case CameraFieldType.Copyright:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD073);                      }                      else                      {                          comment = comment.Length > 53 ? comment.Substring(0' 53) : comment.PadRight(53);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(54);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD073);                      }                      break;                  default:                      //throw new ArgumentOutOfRangeException("cameraFieldType");                      break;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SetCameraField,The following statement contains a magic number: switch (cameraFieldType)              {                  case CameraFieldType.Comment:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0}' 0xD091);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD090);                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 1}' 0xD091);                      }                      break;                  case CameraFieldType.Artist:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD072);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD072);                      }                        break;                  case CameraFieldType.Copyright:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD073);                      }                      else                      {                          comment = comment.Length > 53 ? comment.Substring(0' 53) : comment.PadRight(53);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(54);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD073);                      }                      break;                  default:                      //throw new ArgumentOutOfRangeException("cameraFieldType");                      break;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SetCameraField,The following statement contains a magic number: switch (cameraFieldType)              {                  case CameraFieldType.Comment:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0}' 0xD091);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD090);                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 1}' 0xD091);                      }                      break;                  case CameraFieldType.Artist:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD072);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD072);                      }                        break;                  case CameraFieldType.Copyright:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD073);                      }                      else                      {                          comment = comment.Length > 53 ? comment.Substring(0' 53) : comment.PadRight(53);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(54);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD073);                      }                      break;                  default:                      //throw new ArgumentOutOfRangeException("cameraFieldType");                      break;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SetCameraField,The following statement contains a magic number: switch (cameraFieldType)              {                  case CameraFieldType.Comment:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0}' 0xD091);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD090);                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 1}' 0xD091);                      }                      break;                  case CameraFieldType.Artist:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD072);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD072);                      }                        break;                  case CameraFieldType.Copyright:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD073);                      }                      else                      {                          comment = comment.Length > 53 ? comment.Substring(0' 53) : comment.PadRight(53);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(54);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD073);                      }                      break;                  default:                      //throw new ArgumentOutOfRangeException("cameraFieldType");                      break;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SetCameraField,The following statement contains a magic number: switch (cameraFieldType)              {                  case CameraFieldType.Comment:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0}' 0xD091);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD090);                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 1}' 0xD091);                      }                      break;                  case CameraFieldType.Artist:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD072);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD072);                      }                        break;                  case CameraFieldType.Copyright:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD073);                      }                      else                      {                          comment = comment.Length > 53 ? comment.Substring(0' 53) : comment.PadRight(53);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(54);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD073);                      }                      break;                  default:                      //throw new ArgumentOutOfRangeException("cameraFieldType");                      break;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SetCameraField,The following statement contains a magic number: switch (cameraFieldType)              {                  case CameraFieldType.Comment:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0}' 0xD091);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD090);                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 1}' 0xD091);                      }                      break;                  case CameraFieldType.Artist:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD072);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD072);                      }                        break;                  case CameraFieldType.Copyright:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD073);                      }                      else                      {                          comment = comment.Length > 53 ? comment.Substring(0' 53) : comment.PadRight(53);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(54);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD073);                      }                      break;                  default:                      //throw new ArgumentOutOfRangeException("cameraFieldType");                      break;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SetCameraField,The following statement contains a magic number: switch (cameraFieldType)              {                  case CameraFieldType.Comment:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0}' 0xD091);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD090);                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 1}' 0xD091);                      }                      break;                  case CameraFieldType.Artist:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD072);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD072);                      }                        break;                  case CameraFieldType.Copyright:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD073);                      }                      else                      {                          comment = comment.Length > 53 ? comment.Substring(0' 53) : comment.PadRight(53);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(54);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD073);                      }                      break;                  default:                      //throw new ArgumentOutOfRangeException("cameraFieldType");                      break;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SetCameraField,The following statement contains a magic number: switch (cameraFieldType)              {                  case CameraFieldType.Comment:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0}' 0xD091);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD090);                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 1}' 0xD091);                      }                      break;                  case CameraFieldType.Artist:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD072);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD072);                      }                        break;                  case CameraFieldType.Copyright:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD073);                      }                      else                      {                          comment = comment.Length > 53 ? comment.Substring(0' 53) : comment.PadRight(53);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(54);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD073);                      }                      break;                  default:                      //throw new ArgumentOutOfRangeException("cameraFieldType");                      break;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SetCameraField,The following statement contains a magic number: switch (cameraFieldType)              {                  case CameraFieldType.Comment:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0}' 0xD091);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD090);                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 1}' 0xD091);                      }                      break;                  case CameraFieldType.Artist:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD072);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD072);                      }                        break;                  case CameraFieldType.Copyright:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD073);                      }                      else                      {                          comment = comment.Length > 53 ? comment.Substring(0' 53) : comment.PadRight(53);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(54);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD073);                      }                      break;                  default:                      //throw new ArgumentOutOfRangeException("cameraFieldType");                      break;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SetCameraField,The following statement contains a magic number: switch (cameraFieldType)              {                  case CameraFieldType.Comment:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0}' 0xD091);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD090);                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 1}' 0xD091);                      }                      break;                  case CameraFieldType.Artist:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD072);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD072);                      }                        break;                  case CameraFieldType.Copyright:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD073);                      }                      else                      {                          comment = comment.Length > 53 ? comment.Substring(0' 53) : comment.PadRight(53);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(54);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD073);                      }                      break;                  default:                      //throw new ArgumentOutOfRangeException("cameraFieldType");                      break;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SetCameraField,The following statement contains a magic number: switch (cameraFieldType)              {                  case CameraFieldType.Comment:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0}' 0xD091);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD090);                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 1}' 0xD091);                      }                      break;                  case CameraFieldType.Artist:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD072);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD072);                      }                        break;                  case CameraFieldType.Copyright:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD073);                      }                      else                      {                          comment = comment.Length > 53 ? comment.Substring(0' 53) : comment.PadRight(53);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(54);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD073);                      }                      break;                  default:                      //throw new ArgumentOutOfRangeException("cameraFieldType");                      break;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SetCameraField,The following statement contains a magic number: switch (cameraFieldType)              {                  case CameraFieldType.Comment:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0}' 0xD091);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD090);                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 1}' 0xD091);                      }                      break;                  case CameraFieldType.Artist:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD072);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD072);                      }                        break;                  case CameraFieldType.Copyright:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD073);                      }                      else                      {                          comment = comment.Length > 53 ? comment.Substring(0' 53) : comment.PadRight(53);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(54);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD073);                      }                      break;                  default:                      //throw new ArgumentOutOfRangeException("cameraFieldType");                      break;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetEvent,The following statement contains a magic number: try              {                  if (_eventIsbusy)                      return;                  _eventIsbusy = true;                  //DeviceReady();                  MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetEvent);                    if (response.Data == null || response.Data.Length == 0)                  {                      Log.Debug("Get event error :" + response.ErrorCode.ToString("X"));                      _eventIsbusy = false;                      return;                  }                  int eventCount = BitConverter.ToInt16(response.Data' 0);                  if (eventCount > 0)                  {                      for (int i = 0; i < eventCount; i++)                      {                          try                          {                              uint eventCode = BitConverter.ToUInt16(response.Data' 6*i + 2);                              ushort eventParam = BitConverter.ToUInt16(response.Data' 6*i + 4);                              int longeventParam = BitConverter.ToInt32(response.Data' 6*i + 4);                              switch (eventCode)                              {                                  case CONST_Event_DevicePropChanged:                                      ReadDeviceProperties(eventParam);                                      break;                                  case CONST_Event_ObjectAddedInSdram:                                  case CONST_Event_ObjectAdded:                                      {                                          Log.Debug("CONST_Event_ObjectAddedInSdram" + eventCode.ToString("X"));                                          MTPDataResponse objectdata = ExecuteReadDataEx(CONST_CMD_GetObjectInfo'                                                                                         (uint) longeventParam);                                          string filename = "DSC_0000.JPG";                                          if (objectdata.Data != null)                                          {                                              filename = Encoding.Unicode.GetString(objectdata.Data' 53' 12*2);                                              if (filename.Contains("\0"))                                                  filename = filename.Split('\0')[0];                                          }                                          else                                          {                                              Log.Error("Error getting file name");                                          }                                          Log.Debug("File name" + filename);                                          PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                                                                            {                                                                                WiaImageItem = null'                                                                                EventArgs =                                                                                    new PortableDeviceEventArgs(new PortableDeviceEventType                                                                                                                    ()                                                                                                                    {                                                                                                                        ObjectHandle                                                                                                                            =                                                                                                                            (                                                                                                                            uint                                                                                                                            )                                                                                                                            longeventParam                                                                                                                    })'                                                                                CameraDevice = this'                                                                                FileName = filename'                                                                                Handle = (uint) longeventParam                                                                            };                                          OnPhotoCapture(this' args);                                      }                                      break;                                  case CONST_Event_CaptureComplete:                                  case CONST_Event_CaptureCompleteRecInSdram:                                      {                                          SlowDownEventTimer();                                          OnCaptureCompleted(this' new EventArgs());                                      }                                      break;                                  case CONST_Event_ObsoleteEvent:                                      break;                                  default:                                      //Console.WriteLine("Unknown event code " + eventCode.ToString("X"));                                      Log.Debug("Unknown event code :" + eventCode.ToString("X") + "|" +                                                longeventParam.ToString("X"));                                      break;                              }                          }                          catch (Exception exception)                          {                              Log.Error("Event queue processing error "' exception);                          }                      }                  }              }              catch (InvalidComObjectException)              {                  //return;              }              catch (Exception)              {                  //Log.Error("Event exception "' exception);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetEvent,The following statement contains a magic number: try              {                  if (_eventIsbusy)                      return;                  _eventIsbusy = true;                  //DeviceReady();                  MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetEvent);                    if (response.Data == null || response.Data.Length == 0)                  {                      Log.Debug("Get event error :" + response.ErrorCode.ToString("X"));                      _eventIsbusy = false;                      return;                  }                  int eventCount = BitConverter.ToInt16(response.Data' 0);                  if (eventCount > 0)                  {                      for (int i = 0; i < eventCount; i++)                      {                          try                          {                              uint eventCode = BitConverter.ToUInt16(response.Data' 6*i + 2);                              ushort eventParam = BitConverter.ToUInt16(response.Data' 6*i + 4);                              int longeventParam = BitConverter.ToInt32(response.Data' 6*i + 4);                              switch (eventCode)                              {                                  case CONST_Event_DevicePropChanged:                                      ReadDeviceProperties(eventParam);                                      break;                                  case CONST_Event_ObjectAddedInSdram:                                  case CONST_Event_ObjectAdded:                                      {                                          Log.Debug("CONST_Event_ObjectAddedInSdram" + eventCode.ToString("X"));                                          MTPDataResponse objectdata = ExecuteReadDataEx(CONST_CMD_GetObjectInfo'                                                                                         (uint) longeventParam);                                          string filename = "DSC_0000.JPG";                                          if (objectdata.Data != null)                                          {                                              filename = Encoding.Unicode.GetString(objectdata.Data' 53' 12*2);                                              if (filename.Contains("\0"))                                                  filename = filename.Split('\0')[0];                                          }                                          else                                          {                                              Log.Error("Error getting file name");                                          }                                          Log.Debug("File name" + filename);                                          PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                                                                            {                                                                                WiaImageItem = null'                                                                                EventArgs =                                                                                    new PortableDeviceEventArgs(new PortableDeviceEventType                                                                                                                    ()                                                                                                                    {                                                                                                                        ObjectHandle                                                                                                                            =                                                                                                                            (                                                                                                                            uint                                                                                                                            )                                                                                                                            longeventParam                                                                                                                    })'                                                                                CameraDevice = this'                                                                                FileName = filename'                                                                                Handle = (uint) longeventParam                                                                            };                                          OnPhotoCapture(this' args);                                      }                                      break;                                  case CONST_Event_CaptureComplete:                                  case CONST_Event_CaptureCompleteRecInSdram:                                      {                                          SlowDownEventTimer();                                          OnCaptureCompleted(this' new EventArgs());                                      }                                      break;                                  case CONST_Event_ObsoleteEvent:                                      break;                                  default:                                      //Console.WriteLine("Unknown event code " + eventCode.ToString("X"));                                      Log.Debug("Unknown event code :" + eventCode.ToString("X") + "|" +                                                longeventParam.ToString("X"));                                      break;                              }                          }                          catch (Exception exception)                          {                              Log.Error("Event queue processing error "' exception);                          }                      }                  }              }              catch (InvalidComObjectException)              {                  //return;              }              catch (Exception)              {                  //Log.Error("Event exception "' exception);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetEvent,The following statement contains a magic number: try              {                  if (_eventIsbusy)                      return;                  _eventIsbusy = true;                  //DeviceReady();                  MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetEvent);                    if (response.Data == null || response.Data.Length == 0)                  {                      Log.Debug("Get event error :" + response.ErrorCode.ToString("X"));                      _eventIsbusy = false;                      return;                  }                  int eventCount = BitConverter.ToInt16(response.Data' 0);                  if (eventCount > 0)                  {                      for (int i = 0; i < eventCount; i++)                      {                          try                          {                              uint eventCode = BitConverter.ToUInt16(response.Data' 6*i + 2);                              ushort eventParam = BitConverter.ToUInt16(response.Data' 6*i + 4);                              int longeventParam = BitConverter.ToInt32(response.Data' 6*i + 4);                              switch (eventCode)                              {                                  case CONST_Event_DevicePropChanged:                                      ReadDeviceProperties(eventParam);                                      break;                                  case CONST_Event_ObjectAddedInSdram:                                  case CONST_Event_ObjectAdded:                                      {                                          Log.Debug("CONST_Event_ObjectAddedInSdram" + eventCode.ToString("X"));                                          MTPDataResponse objectdata = ExecuteReadDataEx(CONST_CMD_GetObjectInfo'                                                                                         (uint) longeventParam);                                          string filename = "DSC_0000.JPG";                                          if (objectdata.Data != null)                                          {                                              filename = Encoding.Unicode.GetString(objectdata.Data' 53' 12*2);                                              if (filename.Contains("\0"))                                                  filename = filename.Split('\0')[0];                                          }                                          else                                          {                                              Log.Error("Error getting file name");                                          }                                          Log.Debug("File name" + filename);                                          PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                                                                            {                                                                                WiaImageItem = null'                                                                                EventArgs =                                                                                    new PortableDeviceEventArgs(new PortableDeviceEventType                                                                                                                    ()                                                                                                                    {                                                                                                                        ObjectHandle                                                                                                                            =                                                                                                                            (                                                                                                                            uint                                                                                                                            )                                                                                                                            longeventParam                                                                                                                    })'                                                                                CameraDevice = this'                                                                                FileName = filename'                                                                                Handle = (uint) longeventParam                                                                            };                                          OnPhotoCapture(this' args);                                      }                                      break;                                  case CONST_Event_CaptureComplete:                                  case CONST_Event_CaptureCompleteRecInSdram:                                      {                                          SlowDownEventTimer();                                          OnCaptureCompleted(this' new EventArgs());                                      }                                      break;                                  case CONST_Event_ObsoleteEvent:                                      break;                                  default:                                      //Console.WriteLine("Unknown event code " + eventCode.ToString("X"));                                      Log.Debug("Unknown event code :" + eventCode.ToString("X") + "|" +                                                longeventParam.ToString("X"));                                      break;                              }                          }                          catch (Exception exception)                          {                              Log.Error("Event queue processing error "' exception);                          }                      }                  }              }              catch (InvalidComObjectException)              {                  //return;              }              catch (Exception)              {                  //Log.Error("Event exception "' exception);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetEvent,The following statement contains a magic number: try              {                  if (_eventIsbusy)                      return;                  _eventIsbusy = true;                  //DeviceReady();                  MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetEvent);                    if (response.Data == null || response.Data.Length == 0)                  {                      Log.Debug("Get event error :" + response.ErrorCode.ToString("X"));                      _eventIsbusy = false;                      return;                  }                  int eventCount = BitConverter.ToInt16(response.Data' 0);                  if (eventCount > 0)                  {                      for (int i = 0; i < eventCount; i++)                      {                          try                          {                              uint eventCode = BitConverter.ToUInt16(response.Data' 6*i + 2);                              ushort eventParam = BitConverter.ToUInt16(response.Data' 6*i + 4);                              int longeventParam = BitConverter.ToInt32(response.Data' 6*i + 4);                              switch (eventCode)                              {                                  case CONST_Event_DevicePropChanged:                                      ReadDeviceProperties(eventParam);                                      break;                                  case CONST_Event_ObjectAddedInSdram:                                  case CONST_Event_ObjectAdded:                                      {                                          Log.Debug("CONST_Event_ObjectAddedInSdram" + eventCode.ToString("X"));                                          MTPDataResponse objectdata = ExecuteReadDataEx(CONST_CMD_GetObjectInfo'                                                                                         (uint) longeventParam);                                          string filename = "DSC_0000.JPG";                                          if (objectdata.Data != null)                                          {                                              filename = Encoding.Unicode.GetString(objectdata.Data' 53' 12*2);                                              if (filename.Contains("\0"))                                                  filename = filename.Split('\0')[0];                                          }                                          else                                          {                                              Log.Error("Error getting file name");                                          }                                          Log.Debug("File name" + filename);                                          PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                                                                            {                                                                                WiaImageItem = null'                                                                                EventArgs =                                                                                    new PortableDeviceEventArgs(new PortableDeviceEventType                                                                                                                    ()                                                                                                                    {                                                                                                                        ObjectHandle                                                                                                                            =                                                                                                                            (                                                                                                                            uint                                                                                                                            )                                                                                                                            longeventParam                                                                                                                    })'                                                                                CameraDevice = this'                                                                                FileName = filename'                                                                                Handle = (uint) longeventParam                                                                            };                                          OnPhotoCapture(this' args);                                      }                                      break;                                  case CONST_Event_CaptureComplete:                                  case CONST_Event_CaptureCompleteRecInSdram:                                      {                                          SlowDownEventTimer();                                          OnCaptureCompleted(this' new EventArgs());                                      }                                      break;                                  case CONST_Event_ObsoleteEvent:                                      break;                                  default:                                      //Console.WriteLine("Unknown event code " + eventCode.ToString("X"));                                      Log.Debug("Unknown event code :" + eventCode.ToString("X") + "|" +                                                longeventParam.ToString("X"));                                      break;                              }                          }                          catch (Exception exception)                          {                              Log.Error("Event queue processing error "' exception);                          }                      }                  }              }              catch (InvalidComObjectException)              {                  //return;              }              catch (Exception)              {                  //Log.Error("Event exception "' exception);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetEvent,The following statement contains a magic number: try              {                  if (_eventIsbusy)                      return;                  _eventIsbusy = true;                  //DeviceReady();                  MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetEvent);                    if (response.Data == null || response.Data.Length == 0)                  {                      Log.Debug("Get event error :" + response.ErrorCode.ToString("X"));                      _eventIsbusy = false;                      return;                  }                  int eventCount = BitConverter.ToInt16(response.Data' 0);                  if (eventCount > 0)                  {                      for (int i = 0; i < eventCount; i++)                      {                          try                          {                              uint eventCode = BitConverter.ToUInt16(response.Data' 6*i + 2);                              ushort eventParam = BitConverter.ToUInt16(response.Data' 6*i + 4);                              int longeventParam = BitConverter.ToInt32(response.Data' 6*i + 4);                              switch (eventCode)                              {                                  case CONST_Event_DevicePropChanged:                                      ReadDeviceProperties(eventParam);                                      break;                                  case CONST_Event_ObjectAddedInSdram:                                  case CONST_Event_ObjectAdded:                                      {                                          Log.Debug("CONST_Event_ObjectAddedInSdram" + eventCode.ToString("X"));                                          MTPDataResponse objectdata = ExecuteReadDataEx(CONST_CMD_GetObjectInfo'                                                                                         (uint) longeventParam);                                          string filename = "DSC_0000.JPG";                                          if (objectdata.Data != null)                                          {                                              filename = Encoding.Unicode.GetString(objectdata.Data' 53' 12*2);                                              if (filename.Contains("\0"))                                                  filename = filename.Split('\0')[0];                                          }                                          else                                          {                                              Log.Error("Error getting file name");                                          }                                          Log.Debug("File name" + filename);                                          PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                                                                            {                                                                                WiaImageItem = null'                                                                                EventArgs =                                                                                    new PortableDeviceEventArgs(new PortableDeviceEventType                                                                                                                    ()                                                                                                                    {                                                                                                                        ObjectHandle                                                                                                                            =                                                                                                                            (                                                                                                                            uint                                                                                                                            )                                                                                                                            longeventParam                                                                                                                    })'                                                                                CameraDevice = this'                                                                                FileName = filename'                                                                                Handle = (uint) longeventParam                                                                            };                                          OnPhotoCapture(this' args);                                      }                                      break;                                  case CONST_Event_CaptureComplete:                                  case CONST_Event_CaptureCompleteRecInSdram:                                      {                                          SlowDownEventTimer();                                          OnCaptureCompleted(this' new EventArgs());                                      }                                      break;                                  case CONST_Event_ObsoleteEvent:                                      break;                                  default:                                      //Console.WriteLine("Unknown event code " + eventCode.ToString("X"));                                      Log.Debug("Unknown event code :" + eventCode.ToString("X") + "|" +                                                longeventParam.ToString("X"));                                      break;                              }                          }                          catch (Exception exception)                          {                              Log.Error("Event queue processing error "' exception);                          }                      }                  }              }              catch (InvalidComObjectException)              {                  //return;              }              catch (Exception)              {                  //Log.Error("Event exception "' exception);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetEvent,The following statement contains a magic number: try              {                  if (_eventIsbusy)                      return;                  _eventIsbusy = true;                  //DeviceReady();                  MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetEvent);                    if (response.Data == null || response.Data.Length == 0)                  {                      Log.Debug("Get event error :" + response.ErrorCode.ToString("X"));                      _eventIsbusy = false;                      return;                  }                  int eventCount = BitConverter.ToInt16(response.Data' 0);                  if (eventCount > 0)                  {                      for (int i = 0; i < eventCount; i++)                      {                          try                          {                              uint eventCode = BitConverter.ToUInt16(response.Data' 6*i + 2);                              ushort eventParam = BitConverter.ToUInt16(response.Data' 6*i + 4);                              int longeventParam = BitConverter.ToInt32(response.Data' 6*i + 4);                              switch (eventCode)                              {                                  case CONST_Event_DevicePropChanged:                                      ReadDeviceProperties(eventParam);                                      break;                                  case CONST_Event_ObjectAddedInSdram:                                  case CONST_Event_ObjectAdded:                                      {                                          Log.Debug("CONST_Event_ObjectAddedInSdram" + eventCode.ToString("X"));                                          MTPDataResponse objectdata = ExecuteReadDataEx(CONST_CMD_GetObjectInfo'                                                                                         (uint) longeventParam);                                          string filename = "DSC_0000.JPG";                                          if (objectdata.Data != null)                                          {                                              filename = Encoding.Unicode.GetString(objectdata.Data' 53' 12*2);                                              if (filename.Contains("\0"))                                                  filename = filename.Split('\0')[0];                                          }                                          else                                          {                                              Log.Error("Error getting file name");                                          }                                          Log.Debug("File name" + filename);                                          PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                                                                            {                                                                                WiaImageItem = null'                                                                                EventArgs =                                                                                    new PortableDeviceEventArgs(new PortableDeviceEventType                                                                                                                    ()                                                                                                                    {                                                                                                                        ObjectHandle                                                                                                                            =                                                                                                                            (                                                                                                                            uint                                                                                                                            )                                                                                                                            longeventParam                                                                                                                    })'                                                                                CameraDevice = this'                                                                                FileName = filename'                                                                                Handle = (uint) longeventParam                                                                            };                                          OnPhotoCapture(this' args);                                      }                                      break;                                  case CONST_Event_CaptureComplete:                                  case CONST_Event_CaptureCompleteRecInSdram:                                      {                                          SlowDownEventTimer();                                          OnCaptureCompleted(this' new EventArgs());                                      }                                      break;                                  case CONST_Event_ObsoleteEvent:                                      break;                                  default:                                      //Console.WriteLine("Unknown event code " + eventCode.ToString("X"));                                      Log.Debug("Unknown event code :" + eventCode.ToString("X") + "|" +                                                longeventParam.ToString("X"));                                      break;                              }                          }                          catch (Exception exception)                          {                              Log.Error("Event queue processing error "' exception);                          }                      }                  }              }              catch (InvalidComObjectException)              {                  //return;              }              catch (Exception)              {                  //Log.Error("Event exception "' exception);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetEvent,The following statement contains a magic number: try              {                  if (_eventIsbusy)                      return;                  _eventIsbusy = true;                  //DeviceReady();                  MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetEvent);                    if (response.Data == null || response.Data.Length == 0)                  {                      Log.Debug("Get event error :" + response.ErrorCode.ToString("X"));                      _eventIsbusy = false;                      return;                  }                  int eventCount = BitConverter.ToInt16(response.Data' 0);                  if (eventCount > 0)                  {                      for (int i = 0; i < eventCount; i++)                      {                          try                          {                              uint eventCode = BitConverter.ToUInt16(response.Data' 6*i + 2);                              ushort eventParam = BitConverter.ToUInt16(response.Data' 6*i + 4);                              int longeventParam = BitConverter.ToInt32(response.Data' 6*i + 4);                              switch (eventCode)                              {                                  case CONST_Event_DevicePropChanged:                                      ReadDeviceProperties(eventParam);                                      break;                                  case CONST_Event_ObjectAddedInSdram:                                  case CONST_Event_ObjectAdded:                                      {                                          Log.Debug("CONST_Event_ObjectAddedInSdram" + eventCode.ToString("X"));                                          MTPDataResponse objectdata = ExecuteReadDataEx(CONST_CMD_GetObjectInfo'                                                                                         (uint) longeventParam);                                          string filename = "DSC_0000.JPG";                                          if (objectdata.Data != null)                                          {                                              filename = Encoding.Unicode.GetString(objectdata.Data' 53' 12*2);                                              if (filename.Contains("\0"))                                                  filename = filename.Split('\0')[0];                                          }                                          else                                          {                                              Log.Error("Error getting file name");                                          }                                          Log.Debug("File name" + filename);                                          PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                                                                            {                                                                                WiaImageItem = null'                                                                                EventArgs =                                                                                    new PortableDeviceEventArgs(new PortableDeviceEventType                                                                                                                    ()                                                                                                                    {                                                                                                                        ObjectHandle                                                                                                                            =                                                                                                                            (                                                                                                                            uint                                                                                                                            )                                                                                                                            longeventParam                                                                                                                    })'                                                                                CameraDevice = this'                                                                                FileName = filename'                                                                                Handle = (uint) longeventParam                                                                            };                                          OnPhotoCapture(this' args);                                      }                                      break;                                  case CONST_Event_CaptureComplete:                                  case CONST_Event_CaptureCompleteRecInSdram:                                      {                                          SlowDownEventTimer();                                          OnCaptureCompleted(this' new EventArgs());                                      }                                      break;                                  case CONST_Event_ObsoleteEvent:                                      break;                                  default:                                      //Console.WriteLine("Unknown event code " + eventCode.ToString("X"));                                      Log.Debug("Unknown event code :" + eventCode.ToString("X") + "|" +                                                longeventParam.ToString("X"));                                      break;                              }                          }                          catch (Exception exception)                          {                              Log.Error("Event queue processing error "' exception);                          }                      }                  }              }              catch (InvalidComObjectException)              {                  //return;              }              catch (Exception)              {                  //Log.Error("Event exception "' exception);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetEvent,The following statement contains a magic number: try              {                  if (_eventIsbusy)                      return;                  _eventIsbusy = true;                  //DeviceReady();                  MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetEvent);                    if (response.Data == null || response.Data.Length == 0)                  {                      Log.Debug("Get event error :" + response.ErrorCode.ToString("X"));                      _eventIsbusy = false;                      return;                  }                  int eventCount = BitConverter.ToInt16(response.Data' 0);                  if (eventCount > 0)                  {                      for (int i = 0; i < eventCount; i++)                      {                          try                          {                              uint eventCode = BitConverter.ToUInt16(response.Data' 6*i + 2);                              ushort eventParam = BitConverter.ToUInt16(response.Data' 6*i + 4);                              int longeventParam = BitConverter.ToInt32(response.Data' 6*i + 4);                              switch (eventCode)                              {                                  case CONST_Event_DevicePropChanged:                                      ReadDeviceProperties(eventParam);                                      break;                                  case CONST_Event_ObjectAddedInSdram:                                  case CONST_Event_ObjectAdded:                                      {                                          Log.Debug("CONST_Event_ObjectAddedInSdram" + eventCode.ToString("X"));                                          MTPDataResponse objectdata = ExecuteReadDataEx(CONST_CMD_GetObjectInfo'                                                                                         (uint) longeventParam);                                          string filename = "DSC_0000.JPG";                                          if (objectdata.Data != null)                                          {                                              filename = Encoding.Unicode.GetString(objectdata.Data' 53' 12*2);                                              if (filename.Contains("\0"))                                                  filename = filename.Split('\0')[0];                                          }                                          else                                          {                                              Log.Error("Error getting file name");                                          }                                          Log.Debug("File name" + filename);                                          PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                                                                            {                                                                                WiaImageItem = null'                                                                                EventArgs =                                                                                    new PortableDeviceEventArgs(new PortableDeviceEventType                                                                                                                    ()                                                                                                                    {                                                                                                                        ObjectHandle                                                                                                                            =                                                                                                                            (                                                                                                                            uint                                                                                                                            )                                                                                                                            longeventParam                                                                                                                    })'                                                                                CameraDevice = this'                                                                                FileName = filename'                                                                                Handle = (uint) longeventParam                                                                            };                                          OnPhotoCapture(this' args);                                      }                                      break;                                  case CONST_Event_CaptureComplete:                                  case CONST_Event_CaptureCompleteRecInSdram:                                      {                                          SlowDownEventTimer();                                          OnCaptureCompleted(this' new EventArgs());                                      }                                      break;                                  case CONST_Event_ObsoleteEvent:                                      break;                                  default:                                      //Console.WriteLine("Unknown event code " + eventCode.ToString("X"));                                      Log.Debug("Unknown event code :" + eventCode.ToString("X") + "|" +                                                longeventParam.ToString("X"));                                      break;                              }                          }                          catch (Exception exception)                          {                              Log.Error("Event queue processing error "' exception);                          }                      }                  }              }              catch (InvalidComObjectException)              {                  //return;              }              catch (Exception)              {                  //Log.Error("Event exception "' exception);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetEvent,The following statement contains a magic number: try              {                  if (_eventIsbusy)                      return;                  _eventIsbusy = true;                  //DeviceReady();                  MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetEvent);                    if (response.Data == null || response.Data.Length == 0)                  {                      Log.Debug("Get event error :" + response.ErrorCode.ToString("X"));                      _eventIsbusy = false;                      return;                  }                  int eventCount = BitConverter.ToInt16(response.Data' 0);                  if (eventCount > 0)                  {                      for (int i = 0; i < eventCount; i++)                      {                          try                          {                              uint eventCode = BitConverter.ToUInt16(response.Data' 6*i + 2);                              ushort eventParam = BitConverter.ToUInt16(response.Data' 6*i + 4);                              int longeventParam = BitConverter.ToInt32(response.Data' 6*i + 4);                              switch (eventCode)                              {                                  case CONST_Event_DevicePropChanged:                                      ReadDeviceProperties(eventParam);                                      break;                                  case CONST_Event_ObjectAddedInSdram:                                  case CONST_Event_ObjectAdded:                                      {                                          Log.Debug("CONST_Event_ObjectAddedInSdram" + eventCode.ToString("X"));                                          MTPDataResponse objectdata = ExecuteReadDataEx(CONST_CMD_GetObjectInfo'                                                                                         (uint) longeventParam);                                          string filename = "DSC_0000.JPG";                                          if (objectdata.Data != null)                                          {                                              filename = Encoding.Unicode.GetString(objectdata.Data' 53' 12*2);                                              if (filename.Contains("\0"))                                                  filename = filename.Split('\0')[0];                                          }                                          else                                          {                                              Log.Error("Error getting file name");                                          }                                          Log.Debug("File name" + filename);                                          PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                                                                            {                                                                                WiaImageItem = null'                                                                                EventArgs =                                                                                    new PortableDeviceEventArgs(new PortableDeviceEventType                                                                                                                    ()                                                                                                                    {                                                                                                                        ObjectHandle                                                                                                                            =                                                                                                                            (                                                                                                                            uint                                                                                                                            )                                                                                                                            longeventParam                                                                                                                    })'                                                                                CameraDevice = this'                                                                                FileName = filename'                                                                                Handle = (uint) longeventParam                                                                            };                                          OnPhotoCapture(this' args);                                      }                                      break;                                  case CONST_Event_CaptureComplete:                                  case CONST_Event_CaptureCompleteRecInSdram:                                      {                                          SlowDownEventTimer();                                          OnCaptureCompleted(this' new EventArgs());                                      }                                      break;                                  case CONST_Event_ObsoleteEvent:                                      break;                                  default:                                      //Console.WriteLine("Unknown event code " + eventCode.ToString("X"));                                      Log.Debug("Unknown event code :" + eventCode.ToString("X") + "|" +                                                longeventParam.ToString("X"));                                      break;                              }                          }                          catch (Exception exception)                          {                              Log.Error("Event queue processing error "' exception);                          }                      }                  }              }              catch (InvalidComObjectException)              {                  //return;              }              catch (Exception)              {                  //Log.Error("Event exception "' exception);              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,DeviceReady,The following statement contains a magic number: while (true)              {                  if (retrynum > 50)                      return;                  ulong cod = (ulong)ExecuteWithNoData(CONST_CMD_DeviceReady);                  if (cod != 0 && cod != ErrorCodes.MTP_OK)                  {                      if (cod == ErrorCodes.MTP_Device_Busy || cod == 0x800700AA)                      {                         Console.WriteLine("Device not ready");                          Thread.Sleep(5);                          retrynum++;                      }                      else                      {                         Console.WriteLine("Device ready code #0" + cod.ToString("X"));                      }                  }                  return;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,DeviceReady,The following statement contains a magic number: while (true)              {                  if (retrynum > 50)                      return;                  ulong cod = (ulong)ExecuteWithNoData(CONST_CMD_DeviceReady);                  if (cod != 0 && cod != ErrorCodes.MTP_OK)                  {                      if (cod == ErrorCodes.MTP_Device_Busy || cod == 0x800700AA)                      {                         Console.WriteLine("Device not ready");                          Thread.Sleep(5);                          retrynum++;                      }                      else                      {                         Console.WriteLine("Device ready code #0" + cod.ToString("X"));                      }                  }                  return;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,TransferFileThumb,The following statement contains a magic number: lock (Locker)              {                    using (var fs = File.Open(filename' FileMode.Create))                  {                      MTPDataResponse result = StillImageDevice.ExecuteReadBigData(CONST_CMD_GetLargeThumb'fs'                          (total' current) =>                          {                              double i = (double) current/total;                              TransferProgress =                                  Convert.ToUInt32(i*100);                          }' Convert.ToUInt32(o));                      if (result.Data != null)                          fs.Write(result.Data' 0' result.Data.Length);                  }                  _timer.Start();                  TransferProgress = 0;              }
Magic Number,CameraControl.Devices.Nikon,NikonD300,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD300.cs,CapturePhotoNoAf,The following statement contains a magic number: lock (Locker)              {                  MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewStatus );                  ErrorCodes.GetException(response.ErrorCode);                  // test if live view is on                   if (response.Data != null && response.Data.Length > 0 && response.Data[0] > 0)                  {                      if (CaptureInSdRam)                      {                          DeviceReady();                          ErrorCodes.GetException(StillImageDevice.ExecuteWithNoData(CONST_CMD_InitiateCaptureRecInSdram'                                                                                     0xFFFFFFFF));                          return;                      }                      StopLiveView();                  }                    DeviceReady();                  byte oldval = 0;                  var val = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AFModeSelect );                  if (val.Data != null && val.Data.Length > 0)                      oldval = val.Data[0];                  SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 4}' CONST_PROP_AFModeSelect);                  DeviceReady();                  ErrorCodes.GetException(StillImageDevice.ExecuteWithNoData(CONST_CMD_InitiateCapture));                  if (val.Data != null && val.Data.Length > 0)                      SetProperty(CONST_CMD_SetDevicePropValue' new[] {oldval}' CONST_PROP_AFModeSelect);              }
Magic Number,CameraControl.Devices.Nikon,NikonD3200,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD3200.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LiveViewImageWidth = ToInt16(result' 8);
Magic Number,CameraControl.Devices.Nikon,NikonD3200,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD3200.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LiveViewImageHeight = ToInt16(result' 10);
Magic Number,CameraControl.Devices.Nikon,NikonD3200,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD3200.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.ImageWidth = ToInt16(result' 12);
Magic Number,CameraControl.Devices.Nikon,NikonD3200,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD3200.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.ImageHeight = ToInt16(result' 14);
Magic Number,CameraControl.Devices.Nikon,NikonD3200,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD3200.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusFrameXSize = 800;
Magic Number,CameraControl.Devices.Nikon,NikonD3200,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD3200.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusFrameYSize = 800;
Magic Number,CameraControl.Devices.Nikon,NikonD3200,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD3200.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusX = ToInt16(result' 20);
Magic Number,CameraControl.Devices.Nikon,NikonD3200,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD3200.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusY = ToInt16(result' 22);
Magic Number,CameraControl.Devices.Nikon,NikonD3200,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD3200.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.Focused = result[40] != 1;
Magic Number,CameraControl.Devices.Nikon,NikonD3X,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD3X.cs,GetLiveViewImage,The following statement contains a magic number: const int headerSize = 64;
Magic Number,CameraControl.Devices.Nikon,NikonD60,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD60.cs,InitCompressionSetting,The following statement contains a magic number: try              {                  byte datasize = 1;                  CompressionSetting = new PropertyValue<long>();                  CompressionSetting.ValueChanged += CompressionSetting_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_CompressionSetting);                  byte defval = result.Data[datasize + 5];                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      byte val = result.Data[((2 * datasize) + 6 + 2) + i];                      CompressionSetting.AddValues(_csTable.ContainsKey(val) ? _csTable[val] : val.ToString()' val);                  }                  CompressionSetting.ReloadValues();                  CompressionSetting.SetValue(defval);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonD60,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD60.cs,InitCompressionSetting,The following statement contains a magic number: try              {                  byte datasize = 1;                  CompressionSetting = new PropertyValue<long>();                  CompressionSetting.ValueChanged += CompressionSetting_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_CompressionSetting);                  byte defval = result.Data[datasize + 5];                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      byte val = result.Data[((2 * datasize) + 6 + 2) + i];                      CompressionSetting.AddValues(_csTable.ContainsKey(val) ? _csTable[val] : val.ToString()' val);                  }                  CompressionSetting.ReloadValues();                  CompressionSetting.SetValue(defval);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonD60,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD60.cs,InitCompressionSetting,The following statement contains a magic number: try              {                  byte datasize = 1;                  CompressionSetting = new PropertyValue<long>();                  CompressionSetting.ValueChanged += CompressionSetting_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_CompressionSetting);                  byte defval = result.Data[datasize + 5];                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      byte val = result.Data[((2 * datasize) + 6 + 2) + i];                      CompressionSetting.AddValues(_csTable.ContainsKey(val) ? _csTable[val] : val.ToString()' val);                  }                  CompressionSetting.ReloadValues();                  CompressionSetting.SetValue(defval);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonD60,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD60.cs,InitCompressionSetting,The following statement contains a magic number: try              {                  byte datasize = 1;                  CompressionSetting = new PropertyValue<long>();                  CompressionSetting.ValueChanged += CompressionSetting_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_CompressionSetting);                  byte defval = result.Data[datasize + 5];                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      byte val = result.Data[((2 * datasize) + 6 + 2) + i];                      CompressionSetting.AddValues(_csTable.ContainsKey(val) ? _csTable[val] : val.ToString()' val);                  }                  CompressionSetting.ReloadValues();                  CompressionSetting.SetValue(defval);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonD60,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD60.cs,InitCompressionSetting,The following statement contains a magic number: try              {                  byte datasize = 1;                  CompressionSetting = new PropertyValue<long>();                  CompressionSetting.ValueChanged += CompressionSetting_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_CompressionSetting);                  byte defval = result.Data[datasize + 5];                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      byte val = result.Data[((2 * datasize) + 6 + 2) + i];                      CompressionSetting.AddValues(_csTable.ContainsKey(val) ? _csTable[val] : val.ToString()' val);                  }                  CompressionSetting.ReloadValues();                  CompressionSetting.SetValue(defval);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonD60,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD60.cs,InitCompressionSetting,The following statement contains a magic number: try              {                  byte datasize = 1;                  CompressionSetting = new PropertyValue<long>();                  CompressionSetting.ValueChanged += CompressionSetting_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_CompressionSetting);                  byte defval = result.Data[datasize + 5];                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      byte val = result.Data[((2 * datasize) + 6 + 2) + i];                      CompressionSetting.AddValues(_csTable.ContainsKey(val) ? _csTable[val] : val.ToString()' val);                  }                  CompressionSetting.ReloadValues();                  CompressionSetting.SetValue(defval);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonD60,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD60.cs,InitCompressionSetting,The following statement contains a magic number: try              {                  byte datasize = 1;                  CompressionSetting = new PropertyValue<long>();                  CompressionSetting.ValueChanged += CompressionSetting_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_CompressionSetting);                  byte defval = result.Data[datasize + 5];                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      byte val = result.Data[((2 * datasize) + 6 + 2) + i];                      CompressionSetting.AddValues(_csTable.ContainsKey(val) ? _csTable[val] : val.ToString()' val);                  }                  CompressionSetting.ReloadValues();                  CompressionSetting.SetValue(defval);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetLiveViewImage,The following statement contains a magic number: if (Monitor.TryEnter(Locker' 10))              {                  try                  {                      //DeviceReady();                      viewData.HaveFocusData = true;                        const int headerSize = 384;                        var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetLiveViewImage);                      if (result.ErrorCode == ErrorCodes.MTP_Not_LiveView)                      {                          _timer.Start();                          viewData.IsLiveViewRunning = false;                          viewData.ImageData = null;                          return viewData;                      }                      if (result.Data == null || result.Data.Length <= headerSize)                          return null;                      GetAdditionalLiveViewData(viewData' result.Data);                      viewData.ImageDataPosition = headerSize;                      viewData.ImageData = result.Data;                  }                  finally                  {                      Monitor.Exit(Locker);                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetLiveViewImage,The following statement contains a magic number: if (Monitor.TryEnter(Locker' 10))              {                  try                  {                      //DeviceReady();                      viewData.HaveFocusData = true;                        const int headerSize = 384;                        var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetLiveViewImage);                      if (result.ErrorCode == ErrorCodes.MTP_Not_LiveView)                      {                          _timer.Start();                          viewData.IsLiveViewRunning = false;                          viewData.ImageData = null;                          return viewData;                      }                      if (result.Data == null || result.Data.Length <= headerSize)                          return null;                      GetAdditionalLiveViewData(viewData' result.Data);                      viewData.ImageDataPosition = headerSize;                      viewData.ImageData = result.Data;                  }                  finally                  {                      Monitor.Exit(Locker);                  }              }
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LiveViewImageWidth = ToInt16(result' 8);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LiveViewImageHeight = ToInt16(result' 10);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.ImageWidth = ToInt16(result' 12);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.ImageHeight = ToInt16(result' 14);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusFrameXSize = ToInt16(result' 24);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusFrameYSize = ToInt16(result' 26);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusX = ToInt16(result' 28);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusY = ToInt16(result' 30);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.Focused = result[48] != 1;
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.MovieIsRecording = result[68] == 1;
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.MovieTimeRemain = ToDeciaml(result' 64);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: if (result[37] == 1)                  viewData.Rotation = -90;
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: if (result[37] == 1)                  viewData.Rotation = -90;
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: if (result[37] == 2)                  viewData.Rotation = 90;
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: if (result[37] == 2)                  viewData.Rotation = 90;
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: if (result[37] == 2)                  viewData.Rotation = 90;
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LevelAngleRolling = ToInt16(result' 52);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LevelAnglePitching = ToInt16(result' 56);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LevelAngleYawing = ToInt16(result' 60);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundL = (int)(result[352] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundL = (int)(result[352] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundL = (int)(result[352] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundR = (int)(result[353] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundR = (int)(result[353] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundR = (int)(result[353] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundL = (int)(result[354] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundL = (int)(result[354] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundL = (int)(result[354] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundR = (int)(result[355] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundR = (int)(result[355] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundR = (int)(result[355] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,InitExposureDelay,The following statement contains a magic number: res.AddValues("1 sec"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,InitExposureDelay,The following statement contains a magic number: res.AddValues("OFF"' 3);
Magic Number,CameraControl.Devices.Nikon,NikonD700,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD700.cs,GetLiveViewImage,The following statement contains a magic number: const int headerSize = 64;
Magic Number,CameraControl.Devices.Nikon,NikonD80,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD80.cs,InitCompressionSetting,The following statement contains a magic number: try              {                  byte datasize = 1;                  CompressionSetting = new PropertyValue<long>();                  CompressionSetting.ValueChanged += CompressionSetting_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_CompressionSetting);                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  byte defval = result.Data[datasize + 5];                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      byte val = result.Data[((2 * datasize) + 6 + 2) + i];                      CompressionSetting.AddValues(_csTable.ContainsKey(val) ? _csTable[val] : val.ToString()' val);                  }                  CompressionSetting.ReloadValues();                  CompressionSetting.SetValue(defval);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonD80,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD80.cs,InitCompressionSetting,The following statement contains a magic number: try              {                  byte datasize = 1;                  CompressionSetting = new PropertyValue<long>();                  CompressionSetting.ValueChanged += CompressionSetting_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_CompressionSetting);                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  byte defval = result.Data[datasize + 5];                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      byte val = result.Data[((2 * datasize) + 6 + 2) + i];                      CompressionSetting.AddValues(_csTable.ContainsKey(val) ? _csTable[val] : val.ToString()' val);                  }                  CompressionSetting.ReloadValues();                  CompressionSetting.SetValue(defval);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonD80,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD80.cs,InitCompressionSetting,The following statement contains a magic number: try              {                  byte datasize = 1;                  CompressionSetting = new PropertyValue<long>();                  CompressionSetting.ValueChanged += CompressionSetting_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_CompressionSetting);                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  byte defval = result.Data[datasize + 5];                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      byte val = result.Data[((2 * datasize) + 6 + 2) + i];                      CompressionSetting.AddValues(_csTable.ContainsKey(val) ? _csTable[val] : val.ToString()' val);                  }                  CompressionSetting.ReloadValues();                  CompressionSetting.SetValue(defval);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonD80,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD80.cs,InitCompressionSetting,The following statement contains a magic number: try              {                  byte datasize = 1;                  CompressionSetting = new PropertyValue<long>();                  CompressionSetting.ValueChanged += CompressionSetting_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_CompressionSetting);                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  byte defval = result.Data[datasize + 5];                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      byte val = result.Data[((2 * datasize) + 6 + 2) + i];                      CompressionSetting.AddValues(_csTable.ContainsKey(val) ? _csTable[val] : val.ToString()' val);                  }                  CompressionSetting.ReloadValues();                  CompressionSetting.SetValue(defval);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonD80,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD80.cs,InitCompressionSetting,The following statement contains a magic number: try              {                  byte datasize = 1;                  CompressionSetting = new PropertyValue<long>();                  CompressionSetting.ValueChanged += CompressionSetting_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_CompressionSetting);                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  byte defval = result.Data[datasize + 5];                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      byte val = result.Data[((2 * datasize) + 6 + 2) + i];                      CompressionSetting.AddValues(_csTable.ContainsKey(val) ? _csTable[val] : val.ToString()' val);                  }                  CompressionSetting.ReloadValues();                  CompressionSetting.SetValue(defval);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonD80,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD80.cs,InitCompressionSetting,The following statement contains a magic number: try              {                  byte datasize = 1;                  CompressionSetting = new PropertyValue<long>();                  CompressionSetting.ValueChanged += CompressionSetting_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_CompressionSetting);                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  byte defval = result.Data[datasize + 5];                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      byte val = result.Data[((2 * datasize) + 6 + 2) + i];                      CompressionSetting.AddValues(_csTable.ContainsKey(val) ? _csTable[val] : val.ToString()' val);                  }                  CompressionSetting.ReloadValues();                  CompressionSetting.SetValue(defval);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonD80,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD80.cs,InitCompressionSetting,The following statement contains a magic number: try              {                  byte datasize = 1;                  CompressionSetting = new PropertyValue<long>();                  CompressionSetting.ValueChanged += CompressionSetting_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_CompressionSetting);                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  byte defval = result.Data[datasize + 5];                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      byte val = result.Data[((2 * datasize) + 6 + 2) + i];                      CompressionSetting.AddValues(_csTable.ContainsKey(val) ? _csTable[val] : val.ToString()' val);                  }                  CompressionSetting.ReloadValues();                  CompressionSetting.SetValue(defval);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonD80,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD80.cs,InitCompressionSetting,The following statement contains a magic number: try              {                  byte datasize = 1;                  CompressionSetting = new PropertyValue<long>();                  CompressionSetting.ValueChanged += CompressionSetting_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_CompressionSetting);                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  byte defval = result.Data[datasize + 5];                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      byte val = result.Data[((2 * datasize) + 6 + 2) + i];                      CompressionSetting.AddValues(_csTable.ContainsKey(val) ? _csTable[val] : val.ToString()' val);                  }                  CompressionSetting.ReloadValues();                  CompressionSetting.SetValue(defval);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonD80,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD80.cs,InitCompressionSetting,The following statement contains a magic number: try              {                  byte datasize = 1;                  CompressionSetting = new PropertyValue<long>();                  CompressionSetting.ValueChanged += CompressionSetting_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_CompressionSetting);                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  byte defval = result.Data[datasize + 5];                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      byte val = result.Data[((2 * datasize) + 6 + 2) + i];                      CompressionSetting.AddValues(_csTable.ContainsKey(val) ? _csTable[val] : val.ToString()' val);                  }                  CompressionSetting.ReloadValues();                  CompressionSetting.SetValue(defval);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonD80,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD80.cs,InitCompressionSetting,The following statement contains a magic number: try              {                  byte datasize = 1;                  CompressionSetting = new PropertyValue<long>();                  CompressionSetting.ValueChanged += CompressionSetting_ValueChanged;                  var result = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropDesc'                                                                   CONST_PROP_CompressionSetting);                  int type = BitConverter.ToInt16(result.Data' 2);                  byte formFlag = result.Data[(2 * datasize) + 5];                  byte defval = result.Data[datasize + 5];                  for (int i = 0; i < result.Data.Length - ((2 * datasize) + 6 + 2); i += datasize)                  {                      byte val = result.Data[((2 * datasize) + 6 + 2) + i];                      CompressionSetting.AddValues(_csTable.ContainsKey(val) ? _csTable[val] : val.ToString()' val);                  }                  CompressionSetting.ReloadValues();                  CompressionSetting.SetValue(defval);              }              catch (Exception)              {              }
Magic Number,CameraControl.Devices.Nikon,NikonD80,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD80.cs,CapturePhotoNoAf,The following statement contains a magic number: lock (Locker)              {                  byte oldval = 0;                  var val = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AFModeSelect);                  if (val.Data != null && val.Data.Length > 0)                      oldval = val.Data[0];                    ErrorCodes.GetException(StillImageDevice.ExecuteWriteData(CONST_CMD_SetDevicePropValue' new[] {(byte) 4}'                                                                            CONST_PROP_AFModeSelect));                  ErrorCodes.GetException(StillImageDevice.ExecuteWithNoData(CONST_CMD_InitiateCapture));                  if (val.Data != null && val.Data.Length > 0)                      ErrorCodes.GetException(StillImageDevice.ExecuteWriteData(CONST_CMD_SetDevicePropValue'                                                                                new[] {oldval}'                                                                                CONST_PROP_AFModeSelect));              }
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()                                                             {                                                                 {0' "200"}'                                                                 {1' "250"}'                                                               //  {2' "280"}'                                                                 {3' "320"}'                                                                 {4' "400"}'                                                                 {5' "500"}'                                                               //  {6' "560"}'                                                                 {7' "640"}'                                                                 {8' "800"}'                                                                 {9' "1000"}'                                                              //   {10' "1100"}'                                                                 {11' "1250"}'                                                                 {12' "1600"}'                                                                 {13' "2000"}'                                                               //  {14' "2200"}'                                                                 {15' "2500"}'                                                                 {16' "3200"}'                                                                 {17' "4000"}'                                                                 {18' "4500"}'                                                                 {19' "5000"}'                                                                 {20' "6400"}'                                                                 {21' "Hi 0.3"}'                                                            //     {22' "Hi 0.5"}'                                                                 {23' "Hi 0.7"}'                                                                 {24' "Hi 1"}'                                                                 {25' "Hi 2"}'                                                             };
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()                                                             {                                                                 {0' "200"}'                                                                 {1' "250"}'                                                               //  {2' "280"}'                                                                 {3' "320"}'                                                                 {4' "400"}'                                                                 {5' "500"}'                                                               //  {6' "560"}'                                                                 {7' "640"}'                                                                 {8' "800"}'                                                                 {9' "1000"}'                                                              //   {10' "1100"}'                                                                 {11' "1250"}'                                                                 {12' "1600"}'                                                                 {13' "2000"}'                                                               //  {14' "2200"}'                                                                 {15' "2500"}'                                                                 {16' "3200"}'                                                                 {17' "4000"}'                                                                 {18' "4500"}'                                                                 {19' "5000"}'                                                                 {20' "6400"}'                                                                 {21' "Hi 0.3"}'                                                            //     {22' "Hi 0.5"}'                                                                 {23' "Hi 0.7"}'                                                                 {24' "Hi 1"}'                                                                 {25' "Hi 2"}'                                                             };
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()                                                             {                                                                 {0' "200"}'                                                                 {1' "250"}'                                                               //  {2' "280"}'                                                                 {3' "320"}'                                                                 {4' "400"}'                                                                 {5' "500"}'                                                               //  {6' "560"}'                                                                 {7' "640"}'                                                                 {8' "800"}'                                                                 {9' "1000"}'                                                              //   {10' "1100"}'                                                                 {11' "1250"}'                                                                 {12' "1600"}'                                                                 {13' "2000"}'                                                               //  {14' "2200"}'                                                                 {15' "2500"}'                                                                 {16' "3200"}'                                                                 {17' "4000"}'                                                                 {18' "4500"}'                                                                 {19' "5000"}'                                                                 {20' "6400"}'                                                                 {21' "Hi 0.3"}'                                                            //     {22' "Hi 0.5"}'                                                                 {23' "Hi 0.7"}'                                                                 {24' "Hi 1"}'                                                                 {25' "Hi 2"}'                                                             };
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()                                                             {                                                                 {0' "200"}'                                                                 {1' "250"}'                                                               //  {2' "280"}'                                                                 {3' "320"}'                                                                 {4' "400"}'                                                                 {5' "500"}'                                                               //  {6' "560"}'                                                                 {7' "640"}'                                                                 {8' "800"}'                                                                 {9' "1000"}'                                                              //   {10' "1100"}'                                                                 {11' "1250"}'                                                                 {12' "1600"}'                                                                 {13' "2000"}'                                                               //  {14' "2200"}'                                                                 {15' "2500"}'                                                                 {16' "3200"}'                                                                 {17' "4000"}'                                                                 {18' "4500"}'                                                                 {19' "5000"}'                                                                 {20' "6400"}'                                                                 {21' "Hi 0.3"}'                                                            //     {22' "Hi 0.5"}'                                                                 {23' "Hi 0.7"}'                                                                 {24' "Hi 1"}'                                                                 {25' "Hi 2"}'                                                             };
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()                                                             {                                                                 {0' "200"}'                                                                 {1' "250"}'                                                               //  {2' "280"}'                                                                 {3' "320"}'                                                                 {4' "400"}'                                                                 {5' "500"}'                                                               //  {6' "560"}'                                                                 {7' "640"}'                                                                 {8' "800"}'                                                                 {9' "1000"}'                                                              //   {10' "1100"}'                                                                 {11' "1250"}'                                                                 {12' "1600"}'                                                                 {13' "2000"}'                                                               //  {14' "2200"}'                                                                 {15' "2500"}'                                                                 {16' "3200"}'                                                                 {17' "4000"}'                                                                 {18' "4500"}'                                                                 {19' "5000"}'                                                                 {20' "6400"}'                                                                 {21' "Hi 0.3"}'                                                            //     {22' "Hi 0.5"}'                                                                 {23' "Hi 0.7"}'                                                                 {24' "Hi 1"}'                                                                 {25' "Hi 2"}'                                                             };
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()                                                             {                                                                 {0' "200"}'                                                                 {1' "250"}'                                                               //  {2' "280"}'                                                                 {3' "320"}'                                                                 {4' "400"}'                                                                 {5' "500"}'                                                               //  {6' "560"}'                                                                 {7' "640"}'                                                                 {8' "800"}'                                                                 {9' "1000"}'                                                              //   {10' "1100"}'                                                                 {11' "1250"}'                                                                 {12' "1600"}'                                                                 {13' "2000"}'                                                               //  {14' "2200"}'                                                                 {15' "2500"}'                                                                 {16' "3200"}'                                                                 {17' "4000"}'                                                                 {18' "4500"}'                                                                 {19' "5000"}'                                                                 {20' "6400"}'                                                                 {21' "Hi 0.3"}'                                                            //     {22' "Hi 0.5"}'                                                                 {23' "Hi 0.7"}'                                                                 {24' "Hi 1"}'                                                                 {25' "Hi 2"}'                                                             };
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()                                                             {                                                                 {0' "200"}'                                                                 {1' "250"}'                                                               //  {2' "280"}'                                                                 {3' "320"}'                                                                 {4' "400"}'                                                                 {5' "500"}'                                                               //  {6' "560"}'                                                                 {7' "640"}'                                                                 {8' "800"}'                                                                 {9' "1000"}'                                                              //   {10' "1100"}'                                                                 {11' "1250"}'                                                                 {12' "1600"}'                                                                 {13' "2000"}'                                                               //  {14' "2200"}'                                                                 {15' "2500"}'                                                                 {16' "3200"}'                                                                 {17' "4000"}'                                                                 {18' "4500"}'                                                                 {19' "5000"}'                                                                 {20' "6400"}'                                                                 {21' "Hi 0.3"}'                                                            //     {22' "Hi 0.5"}'                                                                 {23' "Hi 0.7"}'                                                                 {24' "Hi 1"}'                                                                 {25' "Hi 2"}'                                                             };
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()                                                             {                                                                 {0' "200"}'                                                                 {1' "250"}'                                                               //  {2' "280"}'                                                                 {3' "320"}'                                                                 {4' "400"}'                                                                 {5' "500"}'                                                               //  {6' "560"}'                                                                 {7' "640"}'                                                                 {8' "800"}'                                                                 {9' "1000"}'                                                              //   {10' "1100"}'                                                                 {11' "1250"}'                                                                 {12' "1600"}'                                                                 {13' "2000"}'                                                               //  {14' "2200"}'                                                                 {15' "2500"}'                                                                 {16' "3200"}'                                                                 {17' "4000"}'                                                                 {18' "4500"}'                                                                 {19' "5000"}'                                                                 {20' "6400"}'                                                                 {21' "Hi 0.3"}'                                                            //     {22' "Hi 0.5"}'                                                                 {23' "Hi 0.7"}'                                                                 {24' "Hi 1"}'                                                                 {25' "Hi 2"}'                                                             };
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()                                                             {                                                                 {0' "200"}'                                                                 {1' "250"}'                                                               //  {2' "280"}'                                                                 {3' "320"}'                                                                 {4' "400"}'                                                                 {5' "500"}'                                                               //  {6' "560"}'                                                                 {7' "640"}'                                                                 {8' "800"}'                                                                 {9' "1000"}'                                                              //   {10' "1100"}'                                                                 {11' "1250"}'                                                                 {12' "1600"}'                                                                 {13' "2000"}'                                                               //  {14' "2200"}'                                                                 {15' "2500"}'                                                                 {16' "3200"}'                                                                 {17' "4000"}'                                                                 {18' "4500"}'                                                                 {19' "5000"}'                                                                 {20' "6400"}'                                                                 {21' "Hi 0.3"}'                                                            //     {22' "Hi 0.5"}'                                                                 {23' "Hi 0.7"}'                                                                 {24' "Hi 1"}'                                                                 {25' "Hi 2"}'                                                             };
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()                                                             {                                                                 {0' "200"}'                                                                 {1' "250"}'                                                               //  {2' "280"}'                                                                 {3' "320"}'                                                                 {4' "400"}'                                                                 {5' "500"}'                                                               //  {6' "560"}'                                                                 {7' "640"}'                                                                 {8' "800"}'                                                                 {9' "1000"}'                                                              //   {10' "1100"}'                                                                 {11' "1250"}'                                                                 {12' "1600"}'                                                                 {13' "2000"}'                                                               //  {14' "2200"}'                                                                 {15' "2500"}'                                                                 {16' "3200"}'                                                                 {17' "4000"}'                                                                 {18' "4500"}'                                                                 {19' "5000"}'                                                                 {20' "6400"}'                                                                 {21' "Hi 0.3"}'                                                            //     {22' "Hi 0.5"}'                                                                 {23' "Hi 0.7"}'                                                                 {24' "Hi 1"}'                                                                 {25' "Hi 2"}'                                                             };
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()                                                             {                                                                 {0' "200"}'                                                                 {1' "250"}'                                                               //  {2' "280"}'                                                                 {3' "320"}'                                                                 {4' "400"}'                                                                 {5' "500"}'                                                               //  {6' "560"}'                                                                 {7' "640"}'                                                                 {8' "800"}'                                                                 {9' "1000"}'                                                              //   {10' "1100"}'                                                                 {11' "1250"}'                                                                 {12' "1600"}'                                                                 {13' "2000"}'                                                               //  {14' "2200"}'                                                                 {15' "2500"}'                                                                 {16' "3200"}'                                                                 {17' "4000"}'                                                                 {18' "4500"}'                                                                 {19' "5000"}'                                                                 {20' "6400"}'                                                                 {21' "Hi 0.3"}'                                                            //     {22' "Hi 0.5"}'                                                                 {23' "Hi 0.7"}'                                                                 {24' "Hi 1"}'                                                                 {25' "Hi 2"}'                                                             };
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()                                                             {                                                                 {0' "200"}'                                                                 {1' "250"}'                                                               //  {2' "280"}'                                                                 {3' "320"}'                                                                 {4' "400"}'                                                                 {5' "500"}'                                                               //  {6' "560"}'                                                                 {7' "640"}'                                                                 {8' "800"}'                                                                 {9' "1000"}'                                                              //   {10' "1100"}'                                                                 {11' "1250"}'                                                                 {12' "1600"}'                                                                 {13' "2000"}'                                                               //  {14' "2200"}'                                                                 {15' "2500"}'                                                                 {16' "3200"}'                                                                 {17' "4000"}'                                                                 {18' "4500"}'                                                                 {19' "5000"}'                                                                 {20' "6400"}'                                                                 {21' "Hi 0.3"}'                                                            //     {22' "Hi 0.5"}'                                                                 {23' "Hi 0.7"}'                                                                 {24' "Hi 1"}'                                                                 {25' "Hi 2"}'                                                             };
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()                                                             {                                                                 {0' "200"}'                                                                 {1' "250"}'                                                               //  {2' "280"}'                                                                 {3' "320"}'                                                                 {4' "400"}'                                                                 {5' "500"}'                                                               //  {6' "560"}'                                                                 {7' "640"}'                                                                 {8' "800"}'                                                                 {9' "1000"}'                                                              //   {10' "1100"}'                                                                 {11' "1250"}'                                                                 {12' "1600"}'                                                                 {13' "2000"}'                                                               //  {14' "2200"}'                                                                 {15' "2500"}'                                                                 {16' "3200"}'                                                                 {17' "4000"}'                                                                 {18' "4500"}'                                                                 {19' "5000"}'                                                                 {20' "6400"}'                                                                 {21' "Hi 0.3"}'                                                            //     {22' "Hi 0.5"}'                                                                 {23' "Hi 0.7"}'                                                                 {24' "Hi 1"}'                                                                 {25' "Hi 2"}'                                                             };
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()                                                             {                                                                 {0' "200"}'                                                                 {1' "250"}'                                                               //  {2' "280"}'                                                                 {3' "320"}'                                                                 {4' "400"}'                                                                 {5' "500"}'                                                               //  {6' "560"}'                                                                 {7' "640"}'                                                                 {8' "800"}'                                                                 {9' "1000"}'                                                              //   {10' "1100"}'                                                                 {11' "1250"}'                                                                 {12' "1600"}'                                                                 {13' "2000"}'                                                               //  {14' "2200"}'                                                                 {15' "2500"}'                                                                 {16' "3200"}'                                                                 {17' "4000"}'                                                                 {18' "4500"}'                                                                 {19' "5000"}'                                                                 {20' "6400"}'                                                                 {21' "Hi 0.3"}'                                                            //     {22' "Hi 0.5"}'                                                                 {23' "Hi 0.7"}'                                                                 {24' "Hi 1"}'                                                                 {25' "Hi 2"}'                                                             };
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()                                                             {                                                                 {0' "200"}'                                                                 {1' "250"}'                                                               //  {2' "280"}'                                                                 {3' "320"}'                                                                 {4' "400"}'                                                                 {5' "500"}'                                                               //  {6' "560"}'                                                                 {7' "640"}'                                                                 {8' "800"}'                                                                 {9' "1000"}'                                                              //   {10' "1100"}'                                                                 {11' "1250"}'                                                                 {12' "1600"}'                                                                 {13' "2000"}'                                                               //  {14' "2200"}'                                                                 {15' "2500"}'                                                                 {16' "3200"}'                                                                 {17' "4000"}'                                                                 {18' "4500"}'                                                                 {19' "5000"}'                                                                 {20' "6400"}'                                                                 {21' "Hi 0.3"}'                                                            //     {22' "Hi 0.5"}'                                                                 {23' "Hi 0.7"}'                                                                 {24' "Hi 1"}'                                                                 {25' "Hi 2"}'                                                             };
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()                                                             {                                                                 {0' "200"}'                                                                 {1' "250"}'                                                               //  {2' "280"}'                                                                 {3' "320"}'                                                                 {4' "400"}'                                                                 {5' "500"}'                                                               //  {6' "560"}'                                                                 {7' "640"}'                                                                 {8' "800"}'                                                                 {9' "1000"}'                                                              //   {10' "1100"}'                                                                 {11' "1250"}'                                                                 {12' "1600"}'                                                                 {13' "2000"}'                                                               //  {14' "2200"}'                                                                 {15' "2500"}'                                                                 {16' "3200"}'                                                                 {17' "4000"}'                                                                 {18' "4500"}'                                                                 {19' "5000"}'                                                                 {20' "6400"}'                                                                 {21' "Hi 0.3"}'                                                            //     {22' "Hi 0.5"}'                                                                 {23' "Hi 0.7"}'                                                                 {24' "Hi 1"}'                                                                 {25' "Hi 2"}'                                                             };
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()                                                             {                                                                 {0' "200"}'                                                                 {1' "250"}'                                                               //  {2' "280"}'                                                                 {3' "320"}'                                                                 {4' "400"}'                                                                 {5' "500"}'                                                               //  {6' "560"}'                                                                 {7' "640"}'                                                                 {8' "800"}'                                                                 {9' "1000"}'                                                              //   {10' "1100"}'                                                                 {11' "1250"}'                                                                 {12' "1600"}'                                                                 {13' "2000"}'                                                               //  {14' "2200"}'                                                                 {15' "2500"}'                                                                 {16' "3200"}'                                                                 {17' "4000"}'                                                                 {18' "4500"}'                                                                 {19' "5000"}'                                                                 {20' "6400"}'                                                                 {21' "Hi 0.3"}'                                                            //     {22' "Hi 0.5"}'                                                                 {23' "Hi 0.7"}'                                                                 {24' "Hi 1"}'                                                                 {25' "Hi 2"}'                                                             };
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()                                                             {                                                                 {0' "200"}'                                                                 {1' "250"}'                                                               //  {2' "280"}'                                                                 {3' "320"}'                                                                 {4' "400"}'                                                                 {5' "500"}'                                                               //  {6' "560"}'                                                                 {7' "640"}'                                                                 {8' "800"}'                                                                 {9' "1000"}'                                                              //   {10' "1100"}'                                                                 {11' "1250"}'                                                                 {12' "1600"}'                                                                 {13' "2000"}'                                                               //  {14' "2200"}'                                                                 {15' "2500"}'                                                                 {16' "3200"}'                                                                 {17' "4000"}'                                                                 {18' "4500"}'                                                                 {19' "5000"}'                                                                 {20' "6400"}'                                                                 {21' "Hi 0.3"}'                                                            //     {22' "Hi 0.5"}'                                                                 {23' "Hi 0.7"}'                                                                 {24' "Hi 1"}'                                                                 {25' "Hi 2"}'                                                             };
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()                                                             {                                                                 {0' "200"}'                                                                 {1' "250"}'                                                               //  {2' "280"}'                                                                 {3' "320"}'                                                                 {4' "400"}'                                                                 {5' "500"}'                                                               //  {6' "560"}'                                                                 {7' "640"}'                                                                 {8' "800"}'                                                                 {9' "1000"}'                                                              //   {10' "1100"}'                                                                 {11' "1250"}'                                                                 {12' "1600"}'                                                                 {13' "2000"}'                                                               //  {14' "2200"}'                                                                 {15' "2500"}'                                                                 {16' "3200"}'                                                                 {17' "4000"}'                                                                 {18' "4500"}'                                                                 {19' "5000"}'                                                                 {20' "6400"}'                                                                 {21' "Hi 0.3"}'                                                            //     {22' "Hi 0.5"}'                                                                 {23' "Hi 0.7"}'                                                                 {24' "Hi 1"}'                                                                 {25' "Hi 2"}'                                                             };
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LiveViewImageWidth = ToInt16(result' 8);
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LiveViewImageHeight = ToInt16(result' 10);
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.ImageWidth = ToInt16(result' 12);
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.ImageHeight = ToInt16(result' 14);
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusFrameXSize = ToInt16(result' 16);
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusFrameYSize = ToInt16(result' 18);
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusX = ToInt16(result' 20);
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusY = ToInt16(result' 22);
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.Focused = result[40] != 1;
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.MovieIsRecording = result[60] == 1;
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.MovieTimeRemain = ToDeciaml(result' 56);
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: if (result[29] == 1)                  viewData.Rotation = -90;
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: if (result[29] == 1)                  viewData.Rotation = -90;
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: if (result[29] == 2)                  viewData.Rotation = 90;
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: if (result[29] == 2)                  viewData.Rotation = 90;
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: if (result[29] == 2)                  viewData.Rotation = 90;
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LevelAngleRolling = ToInt16(result' 44);
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LevelAnglePitching = ToInt16(result' 48);
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LevelAngleYawing = ToInt16(result' 52);
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundL = (int)(result[344] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundL = (int)(result[344] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundL = (int)(result[344] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundR = (int)(result[345] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundR = (int)(result[345] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundR = (int)(result[345] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundL = (int)(result[346] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundL = (int)(result[346] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundL = (int)(result[346] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundR = (int)(result[347] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundR = (int)(result[347] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundR = (int)(result[347] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,InitExposureDelay,The following statement contains a magic number: res.AddValues("1 sec"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonD800,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,InitExposureDelay,The following statement contains a magic number: res.AddValues("OFF"' 3);
Magic Number,CameraControl.Devices.Nikon,NikonD90,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD90.cs,GetLiveViewImage,The following statement contains a magic number: const int headerSize = 128;
Magic Number,CameraControl.Devices.Nikon,NikonD90,C:\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD90.cs,CapturePhotoNoAf,The following statement contains a magic number: lock (Locker)              {                  try                  {                      IsBusy = true;                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewStatus);                      ErrorCodes.GetException(response.ErrorCode);                      // test if live view is on                       if (response.Data != null && response.Data.Length > 0 && response.Data[0] > 0)                      {                          if (CaptureInSdRam)                          {                              DeviceReady();                              ErrorCodes.GetException(ExecuteWithNoData(CONST_CMD_InitiateCaptureRecInSdram' 0xFFFFFFFF));                              return;                          }                          StopLiveView();                      }                      // the focus mode can be sett only in host mode                      LockCamera();                      byte oldval = 0;                      var val = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AFModeSelect);                      if (val.Data != null && val.Data.Length > 0)                          oldval = val.Data[0];                        SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 4}' CONST_PROP_AFModeSelect);                        ErrorCodes.GetException(CaptureInSdRam                                                  ? ExecuteWithNoData(CONST_CMD_InitiateCaptureRecInSdram' 0xFFFFFFFF)                                                  : ExecuteWithNoData(CONST_CMD_InitiateCapture));                        if (val.Data != null && val.Data.Length > 0)                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {oldval}' CONST_PROP_AFModeSelect);                        UnLockCamera();                  }                  catch (Exception)                  {                      IsBusy = false;                      throw;                  }                    //if (live != null && live.Length > 0 && live[0] == 1)                  //  StartLiveView();              }
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,FakeCameraDevice,The following statement contains a magic number: CompressionSetting.AddValues("new"' 2);
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,FakeCameraDevice,The following statement contains a magic number: Battery = 100;
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,FakeCameraDevice,The following statement contains a magic number: IsoNumber.AddValues("100"' 100);
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,FakeCameraDevice,The following statement contains a magic number: IsoNumber.AddValues("200"' 200);
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,FakeCameraDevice,The following statement contains a magic number: IsoNumber.AddValues("300"' 300);
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,FakeCameraDevice,The following statement contains a magic number: val.AddValues("Val 2"' 2);
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,FakeCameraDevice,The following statement contains a magic number: val.AddValues("Val 3"' 3);
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,StartLiveView,The following statement contains a magic number: _liveViewData.FocusFrameXSize = 100;
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,StartLiveView,The following statement contains a magic number: _liveViewData.FocusFrameYSize = 100;
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,StartLiveView,The following statement contains a magic number: _liveViewData.LiveViewImageHeight = 639;
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,StartLiveView,The following statement contains a magic number: _liveViewData.LiveViewImageWidth = 639;
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,StartLiveView,The following statement contains a magic number: _liveViewData.ImageWidth = 639;
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,StartLiveView,The following statement contains a magic number: _liveViewData.ImageHeight = 639;
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,StartLiveView,The following statement contains a magic number: _liveViewData.FocusX = 639/2;
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,StartLiveView,The following statement contains a magic number: _liveViewData.FocusX = 639/2;
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,StartLiveView,The following statement contains a magic number: _liveViewData.FocusY = 639 / 2;
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,StartLiveView,The following statement contains a magic number: _liveViewData.FocusY = 639 / 2;
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,GetLiveViewImage,The following statement contains a magic number: if (_liveViewData.SoundL > 99)                  _liveViewData.SoundL = 0;
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,GetLiveViewImage,The following statement contains a magic number: if (_liveViewData.SoundR > 99)                  _liveViewData.SoundR = 0;
Magic Number,CameraControl.Devices.Others,OscCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\OscCamera.cs,InitMode,The following statement contains a magic number: try              {                  string property = "exposureProgram";                  var response = GetProperty(property);                  var json = Initialize(response);                  var val = json["results"]["options"][property].Value<uint>();                  //var vals = json["results"]["options"][property + "Support"].Values<string>();                 // Mode.AddValues("Manual program"' 1);                  Mode.AddValues("Auto"' 2);                 // Mode.AddValues("Shutter priority program"' 4);                  Mode.AddValues("ISO priority program"' 9);                    Mode.ReloadValues();                  Mode.ValueChanged += (o' s' i) =>                  {                      SetProperty(property' i);                      InitIso();                  };                  Mode.SetValue(val);               }              catch (Exception ex)              {                  Log.Debug("Unable to get exposureProgram"' ex);                }
Magic Number,CameraControl.Devices.Others,OscCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\OscCamera.cs,InitMode,The following statement contains a magic number: try              {                  string property = "exposureProgram";                  var response = GetProperty(property);                  var json = Initialize(response);                  var val = json["results"]["options"][property].Value<uint>();                  //var vals = json["results"]["options"][property + "Support"].Values<string>();                 // Mode.AddValues("Manual program"' 1);                  Mode.AddValues("Auto"' 2);                 // Mode.AddValues("Shutter priority program"' 4);                  Mode.AddValues("ISO priority program"' 9);                    Mode.ReloadValues();                  Mode.ValueChanged += (o' s' i) =>                  {                      SetProperty(property' i);                      InitIso();                  };                  Mode.SetValue(val);               }              catch (Exception ex)              {                  Log.Debug("Unable to get exposureProgram"' ex);                }
Magic Number,CameraControl.Devices.Others,OscCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\OscCamera.cs,CapturePhoto,The following statement contains a magic number: do              {                  var jsonStatus = Initialize(GetStatus(id));                  if (jsonStatus["state"].Value<string>() == "done")                  {                      url = jsonStatus["results"]["fileUri"].Value<string>();                  }                  else                  {                      Thread.Sleep(150);                  }              } while (string.IsNullOrEmpty(url));
Magic Number,CameraControl.Devices.Others,WiaCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\WiaCameraDevice.cs,Init,The following statement contains a magic number: try              {                  try                  {                      Property apertureProperty = Device.Properties[Conts.CONST_PROP_F_Number];                      if (apertureProperty != null)                      {                          foreach (var subTypeValue in apertureProperty.SubTypeValues)                          {                              double d = (int) subTypeValue;                              string s = (d/100).ToString("0.0");                              FNumber.AddValues(s' (int) d);                              FNumber.ReloadValues();                              if ((int) subTypeValue == (int) apertureProperty.get_Value())                                  FNumber.SetValue((int) d);                          }                      }                  }                  catch (COMException)                  {                      FNumber.IsEnabled = false;                  }                    try                  {                      Property isoProperty = Device.Properties[Conts.CONST_PROP_ISO_Number];                      if (isoProperty != null)                      {                          foreach (var subTypeValue in isoProperty.SubTypeValues)                          {                              IsoNumber.AddValues(subTypeValue.ToString()' (int) subTypeValue);                              IsoNumber.ReloadValues();                              if ((int) subTypeValue == (int) isoProperty.get_Value())                                  IsoNumber.SetValue((int) subTypeValue);                          }                      }                  }                  catch (COMException)                  {                      IsoNumber.IsEnabled = false;                  }                    try                  {                      Property shutterProperty = Device.Properties[Conts.CONST_PROP_Exposure_Time];                      if (shutterProperty != null)                      {                          foreach (int subTypeValue in shutterProperty.SubTypeValues)                          {                              if (ShutterTable.ContainsKey((int) subTypeValue))                                  ShutterSpeed.AddValues(ShutterTable[(int) subTypeValue]' (int) subTypeValue);                          }                          ShutterSpeed.ReloadValues();                          ShutterSpeed.SetValue(shutterProperty.get_Value());                      }                  }                  catch (COMException)                  {                      ShutterSpeed.IsEnabled = false;                  }                    try                  {                      Property wbProperty = Device.Properties[Conts.CONST_PROP_WhiteBalance];                      if (wbProperty != null)                      {                          foreach (var subTypeValue in wbProperty.SubTypeValues)                          {                              if (WbTable.ContainsKey((int) subTypeValue))                                  WhiteBalance.AddValues(WbTable[(int) subTypeValue]' (int) subTypeValue);                          }                          WhiteBalance.ReloadValues();                          WhiteBalance.SetValue(wbProperty.get_Value());                      }                  }                  catch (COMException)                  {                      WhiteBalance.IsEnabled = false;                  }                    try                  {                      Property modeProperty = Device.Properties[Conts.CONST_PROP_ExposureMode];                      if (modeProperty != null)                      {                          foreach (var subTypeValue in modeProperty.SubTypeValues)                          {                              if (ExposureModeTable.ContainsKey((int) subTypeValue))                                  Mode.AddValues(ExposureModeTable[(int) subTypeValue]' Convert.ToUInt32(subTypeValue));                          }                          Mode.ReloadValues();                          Mode.SetValue(Convert.ToUInt32(modeProperty.get_Value()));                      }                      Mode.IsEnabled = false;                  }                  catch (COMException)                  {                      Mode.IsEnabled = false;                  }                    try                  {                      Property ecProperty = Device.Properties[Conts.CONST_PROP_ExposureCompensation];                      if (ecProperty != null)                      {                          foreach (var subTypeValue in ecProperty.SubTypeValues)                          {                              decimal d = (int) subTypeValue;                              string s = decimal.Round(d/1000' 1).ToString();                              if (d > 0)                                  s = "+" + s;                              ExposureCompensation.AddValues(s' (int) subTypeValue);                          }                          ExposureCompensation.ReloadValues();                          ExposureCompensation.SetValue(ecProperty.get_Value());                      }                  }                  catch (COMException)                  {                      ExposureCompensation.IsEnabled = false;                  }                    try                  {                      Property csProperty = Device.Properties[Conts.CONST_PROP_CompressionSetting];                      if (csProperty != null)                      {                          foreach (var subTypeValue in csProperty.SubTypeValues)                          {                              if (CSTable.ContainsKey((int) subTypeValue))                                  CompressionSetting.AddValues(CSTable[(int) subTypeValue]' (int) subTypeValue);                          }                          CompressionSetting.ReloadValues();                          CompressionSetting.SetValue(csProperty.get_Value());                      }                  }                  catch (COMException)                  {                      CompressionSetting.IsEnabled = false;                  }                    try                  {                      Property emmProperty = Device.Properties[Conts.CONST_PROP_ExposureMeteringMode];                      if (emmProperty != null)                      {                          foreach (var subTypeValue in emmProperty.SubTypeValues)                          {                              if (EMMTable.ContainsKey((int) subTypeValue))                                  ExposureMeteringMode.AddValues(EMMTable[(int) subTypeValue]' (int) subTypeValue);                          }                          ExposureMeteringMode.ReloadValues();                          ExposureMeteringMode.SetValue(emmProperty.get_Value());                      }                  }                  catch (COMException)                  {                      CompressionSetting.IsEnabled = false;                  }                    try                  {                      Property fmProperty = Device.Properties[Conts.CONST_PROP_FocusMode];                      if (fmProperty != null)                      {                          foreach (int subTypeValue in fmProperty.SubTypeValues)                          {                              uint subval = Convert.ToUInt16(subTypeValue);                              if (FMTable.ContainsKey(subval))                                  FocusMode.AddValues(FMTable[subval]' subval);                          }                          FocusMode.ReloadValues();                          FocusMode.SetValue(Convert.ToUInt16((int) fmProperty.get_Value()));                      }                  }                  catch (COMException)                  {                      FocusMode.IsEnabled = false;                  }                    try                  {                      Battery = Device.Properties[Conts.CONST_PROP_BatteryStatus].get_Value();                  }                  catch (COMException)                  {                      Battery = 0;                  }                  IsConnected = true;              }              catch (Exception exception)              {                  Log.Error(exception);                  IsConnected = false;              }
Magic Number,CameraControl.Devices.Others,WiaCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\WiaCameraDevice.cs,Init,The following statement contains a magic number: try              {                  try                  {                      Property apertureProperty = Device.Properties[Conts.CONST_PROP_F_Number];                      if (apertureProperty != null)                      {                          foreach (var subTypeValue in apertureProperty.SubTypeValues)                          {                              double d = (int) subTypeValue;                              string s = (d/100).ToString("0.0");                              FNumber.AddValues(s' (int) d);                              FNumber.ReloadValues();                              if ((int) subTypeValue == (int) apertureProperty.get_Value())                                  FNumber.SetValue((int) d);                          }                      }                  }                  catch (COMException)                  {                      FNumber.IsEnabled = false;                  }                    try                  {                      Property isoProperty = Device.Properties[Conts.CONST_PROP_ISO_Number];                      if (isoProperty != null)                      {                          foreach (var subTypeValue in isoProperty.SubTypeValues)                          {                              IsoNumber.AddValues(subTypeValue.ToString()' (int) subTypeValue);                              IsoNumber.ReloadValues();                              if ((int) subTypeValue == (int) isoProperty.get_Value())                                  IsoNumber.SetValue((int) subTypeValue);                          }                      }                  }                  catch (COMException)                  {                      IsoNumber.IsEnabled = false;                  }                    try                  {                      Property shutterProperty = Device.Properties[Conts.CONST_PROP_Exposure_Time];                      if (shutterProperty != null)                      {                          foreach (int subTypeValue in shutterProperty.SubTypeValues)                          {                              if (ShutterTable.ContainsKey((int) subTypeValue))                                  ShutterSpeed.AddValues(ShutterTable[(int) subTypeValue]' (int) subTypeValue);                          }                          ShutterSpeed.ReloadValues();                          ShutterSpeed.SetValue(shutterProperty.get_Value());                      }                  }                  catch (COMException)                  {                      ShutterSpeed.IsEnabled = false;                  }                    try                  {                      Property wbProperty = Device.Properties[Conts.CONST_PROP_WhiteBalance];                      if (wbProperty != null)                      {                          foreach (var subTypeValue in wbProperty.SubTypeValues)                          {                              if (WbTable.ContainsKey((int) subTypeValue))                                  WhiteBalance.AddValues(WbTable[(int) subTypeValue]' (int) subTypeValue);                          }                          WhiteBalance.ReloadValues();                          WhiteBalance.SetValue(wbProperty.get_Value());                      }                  }                  catch (COMException)                  {                      WhiteBalance.IsEnabled = false;                  }                    try                  {                      Property modeProperty = Device.Properties[Conts.CONST_PROP_ExposureMode];                      if (modeProperty != null)                      {                          foreach (var subTypeValue in modeProperty.SubTypeValues)                          {                              if (ExposureModeTable.ContainsKey((int) subTypeValue))                                  Mode.AddValues(ExposureModeTable[(int) subTypeValue]' Convert.ToUInt32(subTypeValue));                          }                          Mode.ReloadValues();                          Mode.SetValue(Convert.ToUInt32(modeProperty.get_Value()));                      }                      Mode.IsEnabled = false;                  }                  catch (COMException)                  {                      Mode.IsEnabled = false;                  }                    try                  {                      Property ecProperty = Device.Properties[Conts.CONST_PROP_ExposureCompensation];                      if (ecProperty != null)                      {                          foreach (var subTypeValue in ecProperty.SubTypeValues)                          {                              decimal d = (int) subTypeValue;                              string s = decimal.Round(d/1000' 1).ToString();                              if (d > 0)                                  s = "+" + s;                              ExposureCompensation.AddValues(s' (int) subTypeValue);                          }                          ExposureCompensation.ReloadValues();                          ExposureCompensation.SetValue(ecProperty.get_Value());                      }                  }                  catch (COMException)                  {                      ExposureCompensation.IsEnabled = false;                  }                    try                  {                      Property csProperty = Device.Properties[Conts.CONST_PROP_CompressionSetting];                      if (csProperty != null)                      {                          foreach (var subTypeValue in csProperty.SubTypeValues)                          {                              if (CSTable.ContainsKey((int) subTypeValue))                                  CompressionSetting.AddValues(CSTable[(int) subTypeValue]' (int) subTypeValue);                          }                          CompressionSetting.ReloadValues();                          CompressionSetting.SetValue(csProperty.get_Value());                      }                  }                  catch (COMException)                  {                      CompressionSetting.IsEnabled = false;                  }                    try                  {                      Property emmProperty = Device.Properties[Conts.CONST_PROP_ExposureMeteringMode];                      if (emmProperty != null)                      {                          foreach (var subTypeValue in emmProperty.SubTypeValues)                          {                              if (EMMTable.ContainsKey((int) subTypeValue))                                  ExposureMeteringMode.AddValues(EMMTable[(int) subTypeValue]' (int) subTypeValue);                          }                          ExposureMeteringMode.ReloadValues();                          ExposureMeteringMode.SetValue(emmProperty.get_Value());                      }                  }                  catch (COMException)                  {                      CompressionSetting.IsEnabled = false;                  }                    try                  {                      Property fmProperty = Device.Properties[Conts.CONST_PROP_FocusMode];                      if (fmProperty != null)                      {                          foreach (int subTypeValue in fmProperty.SubTypeValues)                          {                              uint subval = Convert.ToUInt16(subTypeValue);                              if (FMTable.ContainsKey(subval))                                  FocusMode.AddValues(FMTable[subval]' subval);                          }                          FocusMode.ReloadValues();                          FocusMode.SetValue(Convert.ToUInt16((int) fmProperty.get_Value()));                      }                  }                  catch (COMException)                  {                      FocusMode.IsEnabled = false;                  }                    try                  {                      Battery = Device.Properties[Conts.CONST_PROP_BatteryStatus].get_Value();                  }                  catch (COMException)                  {                      Battery = 0;                  }                  IsConnected = true;              }              catch (Exception exception)              {                  Log.Error(exception);                  IsConnected = false;              }
Magic Number,CameraControl.Devices.Others,WiaCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\WiaCameraDevice.cs,ConnectToWiaDevice,The following statement contains a magic number: if (deviceDescriptor.WiaDevice == null)              {                  Thread.Sleep(500);                  try                  {                      deviceDescriptor.WiaDevice = deviceDescriptor.WiaDeviceInfo.Connect();                      deviceDescriptor.CameraDevice = this;                      Thread.Sleep(250);                  }                  catch (COMException e)                  {                      if ((uint) e.ErrorCode == ErrorCodes.WIA_ERROR_BUSY && retries_left > 0)                      {                          int retry_in_secs = 2*(7 - retries_left);                          Thread.Sleep(1000*retry_in_secs);                          Log.Debug("Connection to wia failed' Retrying to connect in " + retry_in_secs + " seconds");                          ConnectToWiaDevice(deviceDescriptor' retries_left - 1);                      }                      else                      {                          Log.Error("Could not connect to wia device."' e);                          throw e;                      }                  }              }
Magic Number,CameraControl.Devices.Others,WiaCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\WiaCameraDevice.cs,ConnectToWiaDevice,The following statement contains a magic number: if (deviceDescriptor.WiaDevice == null)              {                  Thread.Sleep(500);                  try                  {                      deviceDescriptor.WiaDevice = deviceDescriptor.WiaDeviceInfo.Connect();                      deviceDescriptor.CameraDevice = this;                      Thread.Sleep(250);                  }                  catch (COMException e)                  {                      if ((uint) e.ErrorCode == ErrorCodes.WIA_ERROR_BUSY && retries_left > 0)                      {                          int retry_in_secs = 2*(7 - retries_left);                          Thread.Sleep(1000*retry_in_secs);                          Log.Debug("Connection to wia failed' Retrying to connect in " + retry_in_secs + " seconds");                          ConnectToWiaDevice(deviceDescriptor' retries_left - 1);                      }                      else                      {                          Log.Error("Could not connect to wia device."' e);                          throw e;                      }                  }              }
Magic Number,CameraControl.Devices.Others,WiaCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\WiaCameraDevice.cs,ConnectToWiaDevice,The following statement contains a magic number: if (deviceDescriptor.WiaDevice == null)              {                  Thread.Sleep(500);                  try                  {                      deviceDescriptor.WiaDevice = deviceDescriptor.WiaDeviceInfo.Connect();                      deviceDescriptor.CameraDevice = this;                      Thread.Sleep(250);                  }                  catch (COMException e)                  {                      if ((uint) e.ErrorCode == ErrorCodes.WIA_ERROR_BUSY && retries_left > 0)                      {                          int retry_in_secs = 2*(7 - retries_left);                          Thread.Sleep(1000*retry_in_secs);                          Log.Debug("Connection to wia failed' Retrying to connect in " + retry_in_secs + " seconds");                          ConnectToWiaDevice(deviceDescriptor' retries_left - 1);                      }                      else                      {                          Log.Error("Could not connect to wia device."' e);                          throw e;                      }                  }              }
Magic Number,CameraControl.Devices.Others,WiaCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\WiaCameraDevice.cs,ConnectToWiaDevice,The following statement contains a magic number: if (deviceDescriptor.WiaDevice == null)              {                  Thread.Sleep(500);                  try                  {                      deviceDescriptor.WiaDevice = deviceDescriptor.WiaDeviceInfo.Connect();                      deviceDescriptor.CameraDevice = this;                      Thread.Sleep(250);                  }                  catch (COMException e)                  {                      if ((uint) e.ErrorCode == ErrorCodes.WIA_ERROR_BUSY && retries_left > 0)                      {                          int retry_in_secs = 2*(7 - retries_left);                          Thread.Sleep(1000*retry_in_secs);                          Log.Debug("Connection to wia failed' Retrying to connect in " + retry_in_secs + " seconds");                          ConnectToWiaDevice(deviceDescriptor' retries_left - 1);                      }                      else                      {                          Log.Error("Could not connect to wia device."' e);                          throw e;                      }                  }              }
Magic Number,CameraControl.Devices.Others,WiaCameraDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\WiaCameraDevice.cs,ConnectToWiaDevice,The following statement contains a magic number: if (deviceDescriptor.WiaDevice == null)              {                  Thread.Sleep(500);                  try                  {                      deviceDescriptor.WiaDevice = deviceDescriptor.WiaDeviceInfo.Connect();                      deviceDescriptor.CameraDevice = this;                      Thread.Sleep(250);                  }                  catch (COMException e)                  {                      if ((uint) e.ErrorCode == ErrorCodes.WIA_ERROR_BUSY && retries_left > 0)                      {                          int retry_in_secs = 2*(7 - retries_left);                          Thread.Sleep(1000*retry_in_secs);                          Log.Debug("Connection to wia failed' Retrying to connect in " + retry_in_secs + " seconds");                          ConnectToWiaDevice(deviceDescriptor' retries_left - 1);                      }                      else                      {                          Log.Error("Could not connect to wia device."' e);                          throw e;                      }                  }              }
Magic Number,CameraControl.Devices.Others,YiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,Init,The following statement contains a magic number: Mode.AddValues("Delayed"' 2);
Magic Number,CameraControl.Devices.Others,YiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,Init,The following statement contains a magic number: SendCommand(3);
Magic Number,CameraControl.Devices.Others,YiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,Init,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,CameraControl.Devices.Others,YiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,LoadProperties,The following statement contains a magic number: try              {                  IsoNumber = new PropertyValue<long> {Available = false};                  FNumber = new PropertyValue<long> {Available = false};                  ExposureCompensation = new PropertyValue<long> {Available = false};                  FocusMode = new PropertyValue<long> {Available = false};                  ShutterSpeed = new PropertyValue<long> {Available = false};                  WhiteBalance = new PropertyValue<long> {Available = false};                    Properties.Add(AddNames("photo_size"' "Photo size"));                  Properties.Add(AddNames("precise_selftime"' "Capture delay"));                  Properties.Add(AddNames("burst_capture_number"' "Burst capture number"));                  Properties.Add(AddNames("auto_low_light"' "Auto low light"));                                    AdvancedProperties.Add(AddNames("video_resolution"' "Video resolution"));                  AdvancedProperties.Add(AddNames("led_mode"' "Led mode"));                  AdvancedProperties.Add(AddNames("auto_power_off"' "Auto power off"));                  AdvancedProperties.Add(AddNames("loop_record"' "Loop record"));                  AdvancedProperties.Add(AddNames("warp_enable"' "Lens correction"));                  AdvancedProperties.Add(AddNames("buzzer_ring"' "Find device"));                    CompressionSetting.ValueChanged +=                      (sender' key' val) => { Protocol.SendValue(CompressionSetting.Tag' key); };                  SendCommand(9' CompressionSetting.Tag);                    Mode.ValueChanged += Mode_ValueChanged;                  SendCommand(9' Mode.Tag);                    ExposureMeteringMode.ValueChanged +=                      (sender' key' val) => { Protocol.SendValue(ExposureMeteringMode.Tag' key); };                  SendCommand(9' ExposureMeteringMode.Tag);                    foreach (var property in Properties)                  {                      SendCommand(9' property.Tag);                  }                  foreach (var property in AdvancedProperties)                  {                      SendCommand(9' property.Tag);                  }              }              catch (Exception ex)              {                  Log.Error("Unable to load data"' ex);              }
Magic Number,CameraControl.Devices.Others,YiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,LoadProperties,The following statement contains a magic number: try              {                  IsoNumber = new PropertyValue<long> {Available = false};                  FNumber = new PropertyValue<long> {Available = false};                  ExposureCompensation = new PropertyValue<long> {Available = false};                  FocusMode = new PropertyValue<long> {Available = false};                  ShutterSpeed = new PropertyValue<long> {Available = false};                  WhiteBalance = new PropertyValue<long> {Available = false};                    Properties.Add(AddNames("photo_size"' "Photo size"));                  Properties.Add(AddNames("precise_selftime"' "Capture delay"));                  Properties.Add(AddNames("burst_capture_number"' "Burst capture number"));                  Properties.Add(AddNames("auto_low_light"' "Auto low light"));                                    AdvancedProperties.Add(AddNames("video_resolution"' "Video resolution"));                  AdvancedProperties.Add(AddNames("led_mode"' "Led mode"));                  AdvancedProperties.Add(AddNames("auto_power_off"' "Auto power off"));                  AdvancedProperties.Add(AddNames("loop_record"' "Loop record"));                  AdvancedProperties.Add(AddNames("warp_enable"' "Lens correction"));                  AdvancedProperties.Add(AddNames("buzzer_ring"' "Find device"));                    CompressionSetting.ValueChanged +=                      (sender' key' val) => { Protocol.SendValue(CompressionSetting.Tag' key); };                  SendCommand(9' CompressionSetting.Tag);                    Mode.ValueChanged += Mode_ValueChanged;                  SendCommand(9' Mode.Tag);                    ExposureMeteringMode.ValueChanged +=                      (sender' key' val) => { Protocol.SendValue(ExposureMeteringMode.Tag' key); };                  SendCommand(9' ExposureMeteringMode.Tag);                    foreach (var property in Properties)                  {                      SendCommand(9' property.Tag);                  }                  foreach (var property in AdvancedProperties)                  {                      SendCommand(9' property.Tag);                  }              }              catch (Exception ex)              {                  Log.Error("Unable to load data"' ex);              }
Magic Number,CameraControl.Devices.Others,YiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,LoadProperties,The following statement contains a magic number: try              {                  IsoNumber = new PropertyValue<long> {Available = false};                  FNumber = new PropertyValue<long> {Available = false};                  ExposureCompensation = new PropertyValue<long> {Available = false};                  FocusMode = new PropertyValue<long> {Available = false};                  ShutterSpeed = new PropertyValue<long> {Available = false};                  WhiteBalance = new PropertyValue<long> {Available = false};                    Properties.Add(AddNames("photo_size"' "Photo size"));                  Properties.Add(AddNames("precise_selftime"' "Capture delay"));                  Properties.Add(AddNames("burst_capture_number"' "Burst capture number"));                  Properties.Add(AddNames("auto_low_light"' "Auto low light"));                                    AdvancedProperties.Add(AddNames("video_resolution"' "Video resolution"));                  AdvancedProperties.Add(AddNames("led_mode"' "Led mode"));                  AdvancedProperties.Add(AddNames("auto_power_off"' "Auto power off"));                  AdvancedProperties.Add(AddNames("loop_record"' "Loop record"));                  AdvancedProperties.Add(AddNames("warp_enable"' "Lens correction"));                  AdvancedProperties.Add(AddNames("buzzer_ring"' "Find device"));                    CompressionSetting.ValueChanged +=                      (sender' key' val) => { Protocol.SendValue(CompressionSetting.Tag' key); };                  SendCommand(9' CompressionSetting.Tag);                    Mode.ValueChanged += Mode_ValueChanged;                  SendCommand(9' Mode.Tag);                    ExposureMeteringMode.ValueChanged +=                      (sender' key' val) => { Protocol.SendValue(ExposureMeteringMode.Tag' key); };                  SendCommand(9' ExposureMeteringMode.Tag);                    foreach (var property in Properties)                  {                      SendCommand(9' property.Tag);                  }                  foreach (var property in AdvancedProperties)                  {                      SendCommand(9' property.Tag);                  }              }              catch (Exception ex)              {                  Log.Error("Unable to load data"' ex);              }
Magic Number,CameraControl.Devices.Others,YiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,LoadProperties,The following statement contains a magic number: try              {                  IsoNumber = new PropertyValue<long> {Available = false};                  FNumber = new PropertyValue<long> {Available = false};                  ExposureCompensation = new PropertyValue<long> {Available = false};                  FocusMode = new PropertyValue<long> {Available = false};                  ShutterSpeed = new PropertyValue<long> {Available = false};                  WhiteBalance = new PropertyValue<long> {Available = false};                    Properties.Add(AddNames("photo_size"' "Photo size"));                  Properties.Add(AddNames("precise_selftime"' "Capture delay"));                  Properties.Add(AddNames("burst_capture_number"' "Burst capture number"));                  Properties.Add(AddNames("auto_low_light"' "Auto low light"));                                    AdvancedProperties.Add(AddNames("video_resolution"' "Video resolution"));                  AdvancedProperties.Add(AddNames("led_mode"' "Led mode"));                  AdvancedProperties.Add(AddNames("auto_power_off"' "Auto power off"));                  AdvancedProperties.Add(AddNames("loop_record"' "Loop record"));                  AdvancedProperties.Add(AddNames("warp_enable"' "Lens correction"));                  AdvancedProperties.Add(AddNames("buzzer_ring"' "Find device"));                    CompressionSetting.ValueChanged +=                      (sender' key' val) => { Protocol.SendValue(CompressionSetting.Tag' key); };                  SendCommand(9' CompressionSetting.Tag);                    Mode.ValueChanged += Mode_ValueChanged;                  SendCommand(9' Mode.Tag);                    ExposureMeteringMode.ValueChanged +=                      (sender' key' val) => { Protocol.SendValue(ExposureMeteringMode.Tag' key); };                  SendCommand(9' ExposureMeteringMode.Tag);                    foreach (var property in Properties)                  {                      SendCommand(9' property.Tag);                  }                  foreach (var property in AdvancedProperties)                  {                      SendCommand(9' property.Tag);                  }              }              catch (Exception ex)              {                  Log.Error("Unable to load data"' ex);              }
Magic Number,CameraControl.Devices.Others,YiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,LoadProperties,The following statement contains a magic number: try              {                  IsoNumber = new PropertyValue<long> {Available = false};                  FNumber = new PropertyValue<long> {Available = false};                  ExposureCompensation = new PropertyValue<long> {Available = false};                  FocusMode = new PropertyValue<long> {Available = false};                  ShutterSpeed = new PropertyValue<long> {Available = false};                  WhiteBalance = new PropertyValue<long> {Available = false};                    Properties.Add(AddNames("photo_size"' "Photo size"));                  Properties.Add(AddNames("precise_selftime"' "Capture delay"));                  Properties.Add(AddNames("burst_capture_number"' "Burst capture number"));                  Properties.Add(AddNames("auto_low_light"' "Auto low light"));                                    AdvancedProperties.Add(AddNames("video_resolution"' "Video resolution"));                  AdvancedProperties.Add(AddNames("led_mode"' "Led mode"));                  AdvancedProperties.Add(AddNames("auto_power_off"' "Auto power off"));                  AdvancedProperties.Add(AddNames("loop_record"' "Loop record"));                  AdvancedProperties.Add(AddNames("warp_enable"' "Lens correction"));                  AdvancedProperties.Add(AddNames("buzzer_ring"' "Find device"));                    CompressionSetting.ValueChanged +=                      (sender' key' val) => { Protocol.SendValue(CompressionSetting.Tag' key); };                  SendCommand(9' CompressionSetting.Tag);                    Mode.ValueChanged += Mode_ValueChanged;                  SendCommand(9' Mode.Tag);                    ExposureMeteringMode.ValueChanged +=                      (sender' key' val) => { Protocol.SendValue(ExposureMeteringMode.Tag' key); };                  SendCommand(9' ExposureMeteringMode.Tag);                    foreach (var property in Properties)                  {                      SendCommand(9' property.Tag);                  }                  foreach (var property in AdvancedProperties)                  {                      SendCommand(9' property.Tag);                  }              }              catch (Exception ex)              {                  Log.Error("Unable to load data"' ex);              }
Magic Number,CameraControl.Devices.Others,YiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,Mode_ValueChanged,The following statement contains a magic number: switch (val)              {                  case 0:                      Protocol.SendValue("capture_mode"' "precise quality");                      break;                  case 1:                      Protocol.SendValue("capture_mode"' "burst quality");                      break;                  case 2:                      Protocol.SendValue("capture_mode"' "precise self quality");                      break;                  case 3:                      Protocol.SendValue("capture_mode"' "precise quality cont.");                      break;              }
Magic Number,CameraControl.Devices.Others,YiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,Mode_ValueChanged,The following statement contains a magic number: switch (val)              {                  case 0:                      Protocol.SendValue("capture_mode"' "precise quality");                      break;                  case 1:                      Protocol.SendValue("capture_mode"' "burst quality");                      break;                  case 2:                      Protocol.SendValue("capture_mode"' "precise self quality");                      break;                  case 3:                      Protocol.SendValue("capture_mode"' "precise quality cont.");                      break;              }
Magic Number,CameraControl.Devices.Others,YiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,SendCommand,The following statement contains a magic number: _resetEvent.WaitOne(500);
Magic Number,CameraControl.Devices.Others,YiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,SendCommand,The following statement contains a magic number: _resetEvent.WaitOne(1000);
Magic Number,CameraControl.Devices.Others,YiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,GetObjects,The following statement contains a magic number: SendCommand(1283' "\\/var\\/www\\/DCIM\\/100MEDIA/");
Magic Number,CameraControl.Devices.Others,YiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,GetObjects,The following statement contains a magic number: SendCommand(1282' " -D -S");
Magic Number,CameraControl.Devices.Others,YiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,GetObjects,The following statement contains a magic number: _listingEvent.WaitOne(2500);
Magic Number,CameraControl.Devices.Others,YiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,CapturePhoto,The following statement contains a magic number: if (Mode.NumericValue == 3)                  _timelapse_running = !_timelapse_running;              else                  _timelapse_running = false;
Magic Number,CameraControl.Devices.Others,YiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,CapturePhoto,The following statement contains a magic number: Protocol.SendCommand(_timelapse_running ? 770 : 769);
Magic Number,CameraControl.Devices.Others,YiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,CapturePhoto,The following statement contains a magic number: Protocol.SendCommand(_timelapse_running ? 770 : 769);
Magic Number,CameraControl.Devices.Others,YiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,StartRecordMovie,The following statement contains a magic number: Protocol.SendCommand(513);
Magic Number,CameraControl.Devices.Others,YiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,StopRecordMovie,The following statement contains a magic number: Protocol.SendCommand(514);
Magic Number,CameraControl.Devices.Others,YiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,DeleteObject,The following statement contains a magic number: SendCommand(1283' "\\/var\\/www\\/DCIM\\/100MEDIA/");
Magic Number,CameraControl.Devices.Others,YiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,DeleteObject,The following statement contains a magic number: SendCommand(1281' (string) deviceObject.Handle);
Magic Number,CameraControl.Devices.Others,YiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,SetProperty,The following statement contains a magic number: switch (prop)              {                  case "battery":                      int i;                      if (int.TryParse(val' out i))                          Battery = i;                      break;                  case "photo_quality":                      CompressionSetting.Value = val;                      break;                  case "capture_mode":                      switch (val)                      {                          case "precise quality":                              Mode.SetValue(0);                              break;                          case "burst quality":                              Mode.SetValue(1);                              break;                          case "precise self quality":                              Mode.SetValue(2);                              break;                          case "precise quality cont.":                              Mode.SetValue(3);                              break;                      }                      break;                  case "meter_mode":                      ExposureMeteringMode.Value = val;                      break;                  default:                      foreach (var property in Properties)                      {                          if (property.Tag == prop)                              property.Value = val;                      }                      foreach (var property in AdvancedProperties)                      {                          if (property.Tag == prop)                              property.Value = val;                      }                      break;              }
Magic Number,CameraControl.Devices.Others,YiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,SetProperty,The following statement contains a magic number: switch (prop)              {                  case "battery":                      int i;                      if (int.TryParse(val' out i))                          Battery = i;                      break;                  case "photo_quality":                      CompressionSetting.Value = val;                      break;                  case "capture_mode":                      switch (val)                      {                          case "precise quality":                              Mode.SetValue(0);                              break;                          case "burst quality":                              Mode.SetValue(1);                              break;                          case "precise self quality":                              Mode.SetValue(2);                              break;                          case "precise quality cont.":                              Mode.SetValue(3);                              break;                      }                      break;                  case "meter_mode":                      ExposureMeteringMode.Value = val;                      break;                  default:                      foreach (var property in Properties)                      {                          if (property.Tag == prop)                              property.Value = val;                      }                      foreach (var property in AdvancedProperties)                      {                          if (property.Tag == prop)                              property.Value = val;                      }                      break;              }
Magic Number,CameraControl.Devices.Others,YiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,StartLiveView,The following statement contains a magic number: Protocol.SendCommand(259' "none_force");
Magic Number,PanonoTest,PanonoCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\PanonoCamera.cs,Init,The following statement contains a magic number: _ws.WaitTime = new TimeSpan(0' 0' 4);
Magic Number,PanonoTest,PanonoCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\PanonoCamera.cs,InitIso,The following statement contains a magic number: IsoNumber.AddValues("50"' 50);
Magic Number,PanonoTest,PanonoCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\PanonoCamera.cs,InitIso,The following statement contains a magic number: IsoNumber.AddValues("100"' 100);
Magic Number,PanonoTest,PanonoCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\PanonoCamera.cs,InitIso,The following statement contains a magic number: IsoNumber.AddValues("200"' 200);
Magic Number,PanonoTest,PanonoCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\PanonoCamera.cs,InitIso,The following statement contains a magic number: IsoNumber.AddValues("400"' 400);
Magic Number,PanonoTest,PanonoCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\PanonoCamera.cs,InitIso,The following statement contains a magic number: IsoNumber.AddValues("800"' 800);
Magic Number,PanonoTest,PanonoCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\PanonoCamera.cs,InitIso,The following statement contains a magic number: IsoNumber.AddValues("1600"' 1600);
Magic Number,PanonoTest,PanonoCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\PanonoCamera.cs,TransferFile,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,PanonoTest,PanonoCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\PanonoCamera.cs,TransferFileThumb,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,PanonoTest,PanonoCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\PanonoCamera.cs,GetId,The following statement contains a magic number: if (request_id > 1000000000)              {                  request_id = 0;              }
Magic Number,SonyCameraCommunication,CameraDiscovery,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\CameraDiscovery.cs,UDPSocketSetup,The following statement contains a magic number: try              {                  udpSocket.SetSocketOption(SocketOptionLevel.Socket' SocketOptionName.ReuseAddress' true);                  //udpSocket.Bind(localEndPoint);                  udpSocket.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.AddMembership' new MulticastOption(multicastEndpoint.Address' IPAddress.Any));                  udpSocket.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.MulticastTimeToLive' 2);                  udpSocket.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.MulticastLoopback' true);                    NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces();                  foreach (NetworkInterface adapter in nics)                  {                      IPInterfaceProperties ip_properties = adapter.GetIPProperties();                      if (!adapter.GetIPProperties().MulticastAddresses.Any())                          continue; // most of VPN adapters will be skipped                      if (!adapter.SupportsMulticast)                          continue; // multicast is meaningless for this type of connection                      if (OperationalStatus.Up != adapter.OperationalStatus)                          continue; // this adapter is off or not connected                      if (adapter.NetworkInterfaceType != NetworkInterfaceType.Wireless80211)                          continue;                        IPv4InterfaceProperties p = adapter.GetIPProperties().GetIPv4Properties();                      if (null == p)                          continue; // IPv4 is not configured on this adapter                        foreach (UnicastIPAddressInformation ip in adapter.GetIPProperties().UnicastAddresses)                      {                          if (ip.Address.AddressFamily == AddressFamily.InterNetwork)                          {                              udpSocket.Bind(new IPEndPoint(ip.Address' 60000));                              binded = true;                              break;                          }                      }                        // now we have adapter index as p.Index' let put it to socket option                      udpSocket.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.MulticastInterface' (int)IPAddress.HostToNetworkOrder(p.Index));                  }                                    if(!binded)                      throw new Exception("Camea not connected !");                  return true;              }              catch (Exception exc)              {                  return false;              }
Magic Number,SonyCameraCommunication,CameraDiscovery,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\CameraDiscovery.cs,UDPSocketSetup,The following statement contains a magic number: try              {                  udpSocket.SetSocketOption(SocketOptionLevel.Socket' SocketOptionName.ReuseAddress' true);                  //udpSocket.Bind(localEndPoint);                  udpSocket.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.AddMembership' new MulticastOption(multicastEndpoint.Address' IPAddress.Any));                  udpSocket.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.MulticastTimeToLive' 2);                  udpSocket.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.MulticastLoopback' true);                    NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces();                  foreach (NetworkInterface adapter in nics)                  {                      IPInterfaceProperties ip_properties = adapter.GetIPProperties();                      if (!adapter.GetIPProperties().MulticastAddresses.Any())                          continue; // most of VPN adapters will be skipped                      if (!adapter.SupportsMulticast)                          continue; // multicast is meaningless for this type of connection                      if (OperationalStatus.Up != adapter.OperationalStatus)                          continue; // this adapter is off or not connected                      if (adapter.NetworkInterfaceType != NetworkInterfaceType.Wireless80211)                          continue;                        IPv4InterfaceProperties p = adapter.GetIPProperties().GetIPv4Properties();                      if (null == p)                          continue; // IPv4 is not configured on this adapter                        foreach (UnicastIPAddressInformation ip in adapter.GetIPProperties().UnicastAddresses)                      {                          if (ip.Address.AddressFamily == AddressFamily.InterNetwork)                          {                              udpSocket.Bind(new IPEndPoint(ip.Address' 60000));                              binded = true;                              break;                          }                      }                        // now we have adapter index as p.Index' let put it to socket option                      udpSocket.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.MulticastInterface' (int)IPAddress.HostToNetworkOrder(p.Index));                  }                                    if(!binded)                      throw new Exception("Camea not connected !");                  return true;              }              catch (Exception exc)              {                  return false;              }
Magic Number,SonyCameraCommunication,CameraDiscovery,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\CameraDiscovery.cs,MSearch,The following statement contains a magic number: byte[] receiveBuffer = new byte[64000];
Magic Number,SonyCameraCommunication,CameraDiscovery,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\CameraDiscovery.cs,MSearch,The following statement contains a magic number: while (true)              {                  try                  {                      udpSocket.SendTo(Encoding.UTF8.GetBytes(searchString)' SocketFlags.None' multicastEndpoint);                      if (udpSocket.Available > 0)                      {                          receivedBytes = udpSocket.Receive(receiveBuffer' SocketFlags.None);                            if (receivedBytes > 0)                          {                              response = Encoding.UTF8.GetString(receiveBuffer' 0' receivedBytes);                              return true;                          }                      }                  }                  catch (Exception exc)                  {                      return false;                  }                  if ((DateTime.Now - starTime).TotalSeconds > 4000)                  {                      return false;                  }                  Thread.Sleep(150);              }
Magic Number,SonyCameraCommunication,CameraDiscovery,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\CameraDiscovery.cs,MSearch,The following statement contains a magic number: while (true)              {                  try                  {                      udpSocket.SendTo(Encoding.UTF8.GetBytes(searchString)' SocketFlags.None' multicastEndpoint);                      if (udpSocket.Available > 0)                      {                          receivedBytes = udpSocket.Receive(receiveBuffer' SocketFlags.None);                            if (receivedBytes > 0)                          {                              response = Encoding.UTF8.GetString(receiveBuffer' 0' receivedBytes);                              return true;                          }                      }                  }                  catch (Exception exc)                  {                      return false;                  }                  if ((DateTime.Now - starTime).TotalSeconds > 4000)                  {                      return false;                  }                  Thread.Sleep(150);              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,Init,The following statement contains a magic number: for (int i = 0; i < 101; i++)              {                  LiveViewImageZoomRatio.AddValues(i.ToString()' i);              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,LiveViewImageZoomRatio_ValueChanged,The following statement contains a magic number: if (val > _lastZoomPos)              {                  //ExecuteMethod("actZoom"' "out"' "1shot");                  ExecuteMethod("actZoom"' "out"' dif < 25 ? "1shot" : "start");              }              else              {                  //ExecuteMethod("actZoom"' "in"' "1shot");                  ExecuteMethod("actZoom"' "in"' dif < 25 ? "1shot" : "start");              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,LiveViewImageZoomRatio_ValueChanged,The following statement contains a magic number: if (val > _lastZoomPos)              {                  //ExecuteMethod("actZoom"' "out"' "1shot");                  ExecuteMethod("actZoom"' "out"' dif < 25 ? "1shot" : "start");              }              else              {                  //ExecuteMethod("actZoom"' "in"' "1shot");                  ExecuteMethod("actZoom"' "in"' dif < 25 ? "1shot" : "start");              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,InitProps,The following statement contains a magic number: Thread.Sleep(3500);
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,GetEvent,The following statement contains a magic number: try              {                  var jString = Post(CreateJson("getEvent"'"1.0"'false));                  var json = Initialize(jString);                  var jResult = json["result"] as JArray;                    if (jResult == null) return;                  var elem = jResult[2];                  if (elem.HasValues)                  {                      LiveViewImageZoomRatio.SetValue(elem.Value<int>("zoomPositionCurrentBox").ToString()' false);                  }                  elem = jResult[5];                  if (elem.HasValues)                  {                      foreach (var obj in elem.Children())                      {                          foreach (var u in obj["takePictureUrl"].Values<string>())                          {                              var url = u;                              if (url.Contains("?"))                                  url = url.Split('?')[0];                              PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                              {                                  WiaImageItem = null'                                  EventArgs = new PortableDeviceEventArgs()'                                  CameraDevice = this'                                  FileName = url.Replace('/'' '\\')'                                  Handle = url                              };                              OnPhotoCapture(this' args);                          }                      }                  }                    elem = jResult[18];                  if (elem.HasValues)                  {                      SetCapability(Mode' new Capability<string>                      {                          Current = elem.Value<string>("currentExposureMode")'                          Candidates = elem["exposureModeCandidates"].Values<string>().ToList()                      });                  }                    elem = jResult[27];                  if (elem.HasValues)                  {                      SetCapability(FNumber' new Capability<string>                      {                          Current = elem.Value<string>("currentFNumber")'                          Candidates = elem["fNumberCandidates"].Values<string>().ToList()                      });                  }                  elem = jResult[28];                  if (elem.HasValues)                  {                      SetCapability(FocusMode' new Capability<string>                      {                          Current = elem.Value<string>("currentFocusMode")'                          Candidates = elem["focusModeCandidates"].Values<string>().ToList()                      });                  }                    elem = jResult[29];                  if (elem.HasValues)                  {                      SetCapability(IsoNumber' new Capability<string>                      {                          Current = elem.Value<string>("currentIsoSpeedRate")'                          Candidates = elem["isoSpeedRateCandidates"].Values<string>().ToList()                      });                  }                  elem = jResult[32];                  if (elem.HasValues)                  {                      SetCapability(ShutterSpeed' new Capability<string>                      {                          Current = elem.Value<string>("currentShutterSpeed")'                          Candidates = elem["shutterSpeedCandidates"].Values<string>().ToList()                      });                  }                  elem = jResult[33];                  if (elem.HasValues)                  {                      WhiteBalance.SetValue(elem.Value<string>("currentWhiteBalanceMode")' false);                  }                  if (jResult.Count > 36) // GetEvent version 1.2                  {                      elem = jResult[37];                      if (elem.HasValues)                      {                          SetCapability(CompressionSetting' new Capability<string>                          {                              Current = elem.Value<string>("stillQuality")'                              Candidates = elem["candidate"].Values<string>().ToList()                          });                      }                  }              }              catch (Exception ex)              {                  Log.Debug("Sony get error "' ex);              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,GetEvent,The following statement contains a magic number: try              {                  var jString = Post(CreateJson("getEvent"'"1.0"'false));                  var json = Initialize(jString);                  var jResult = json["result"] as JArray;                    if (jResult == null) return;                  var elem = jResult[2];                  if (elem.HasValues)                  {                      LiveViewImageZoomRatio.SetValue(elem.Value<int>("zoomPositionCurrentBox").ToString()' false);                  }                  elem = jResult[5];                  if (elem.HasValues)                  {                      foreach (var obj in elem.Children())                      {                          foreach (var u in obj["takePictureUrl"].Values<string>())                          {                              var url = u;                              if (url.Contains("?"))                                  url = url.Split('?')[0];                              PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                              {                                  WiaImageItem = null'                                  EventArgs = new PortableDeviceEventArgs()'                                  CameraDevice = this'                                  FileName = url.Replace('/'' '\\')'                                  Handle = url                              };                              OnPhotoCapture(this' args);                          }                      }                  }                    elem = jResult[18];                  if (elem.HasValues)                  {                      SetCapability(Mode' new Capability<string>                      {                          Current = elem.Value<string>("currentExposureMode")'                          Candidates = elem["exposureModeCandidates"].Values<string>().ToList()                      });                  }                    elem = jResult[27];                  if (elem.HasValues)                  {                      SetCapability(FNumber' new Capability<string>                      {                          Current = elem.Value<string>("currentFNumber")'                          Candidates = elem["fNumberCandidates"].Values<string>().ToList()                      });                  }                  elem = jResult[28];                  if (elem.HasValues)                  {                      SetCapability(FocusMode' new Capability<string>                      {                          Current = elem.Value<string>("currentFocusMode")'                          Candidates = elem["focusModeCandidates"].Values<string>().ToList()                      });                  }                    elem = jResult[29];                  if (elem.HasValues)                  {                      SetCapability(IsoNumber' new Capability<string>                      {                          Current = elem.Value<string>("currentIsoSpeedRate")'                          Candidates = elem["isoSpeedRateCandidates"].Values<string>().ToList()                      });                  }                  elem = jResult[32];                  if (elem.HasValues)                  {                      SetCapability(ShutterSpeed' new Capability<string>                      {                          Current = elem.Value<string>("currentShutterSpeed")'                          Candidates = elem["shutterSpeedCandidates"].Values<string>().ToList()                      });                  }                  elem = jResult[33];                  if (elem.HasValues)                  {                      WhiteBalance.SetValue(elem.Value<string>("currentWhiteBalanceMode")' false);                  }                  if (jResult.Count > 36) // GetEvent version 1.2                  {                      elem = jResult[37];                      if (elem.HasValues)                      {                          SetCapability(CompressionSetting' new Capability<string>                          {                              Current = elem.Value<string>("stillQuality")'                              Candidates = elem["candidate"].Values<string>().ToList()                          });                      }                  }              }              catch (Exception ex)              {                  Log.Debug("Sony get error "' ex);              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,GetEvent,The following statement contains a magic number: try              {                  var jString = Post(CreateJson("getEvent"'"1.0"'false));                  var json = Initialize(jString);                  var jResult = json["result"] as JArray;                    if (jResult == null) return;                  var elem = jResult[2];                  if (elem.HasValues)                  {                      LiveViewImageZoomRatio.SetValue(elem.Value<int>("zoomPositionCurrentBox").ToString()' false);                  }                  elem = jResult[5];                  if (elem.HasValues)                  {                      foreach (var obj in elem.Children())                      {                          foreach (var u in obj["takePictureUrl"].Values<string>())                          {                              var url = u;                              if (url.Contains("?"))                                  url = url.Split('?')[0];                              PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                              {                                  WiaImageItem = null'                                  EventArgs = new PortableDeviceEventArgs()'                                  CameraDevice = this'                                  FileName = url.Replace('/'' '\\')'                                  Handle = url                              };                              OnPhotoCapture(this' args);                          }                      }                  }                    elem = jResult[18];                  if (elem.HasValues)                  {                      SetCapability(Mode' new Capability<string>                      {                          Current = elem.Value<string>("currentExposureMode")'                          Candidates = elem["exposureModeCandidates"].Values<string>().ToList()                      });                  }                    elem = jResult[27];                  if (elem.HasValues)                  {                      SetCapability(FNumber' new Capability<string>                      {                          Current = elem.Value<string>("currentFNumber")'                          Candidates = elem["fNumberCandidates"].Values<string>().ToList()                      });                  }                  elem = jResult[28];                  if (elem.HasValues)                  {                      SetCapability(FocusMode' new Capability<string>                      {                          Current = elem.Value<string>("currentFocusMode")'                          Candidates = elem["focusModeCandidates"].Values<string>().ToList()                      });                  }                    elem = jResult[29];                  if (elem.HasValues)                  {                      SetCapability(IsoNumber' new Capability<string>                      {                          Current = elem.Value<string>("currentIsoSpeedRate")'                          Candidates = elem["isoSpeedRateCandidates"].Values<string>().ToList()                      });                  }                  elem = jResult[32];                  if (elem.HasValues)                  {                      SetCapability(ShutterSpeed' new Capability<string>                      {                          Current = elem.Value<string>("currentShutterSpeed")'                          Candidates = elem["shutterSpeedCandidates"].Values<string>().ToList()                      });                  }                  elem = jResult[33];                  if (elem.HasValues)                  {                      WhiteBalance.SetValue(elem.Value<string>("currentWhiteBalanceMode")' false);                  }                  if (jResult.Count > 36) // GetEvent version 1.2                  {                      elem = jResult[37];                      if (elem.HasValues)                      {                          SetCapability(CompressionSetting' new Capability<string>                          {                              Current = elem.Value<string>("stillQuality")'                              Candidates = elem["candidate"].Values<string>().ToList()                          });                      }                  }              }              catch (Exception ex)              {                  Log.Debug("Sony get error "' ex);              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,GetEvent,The following statement contains a magic number: try              {                  var jString = Post(CreateJson("getEvent"'"1.0"'false));                  var json = Initialize(jString);                  var jResult = json["result"] as JArray;                    if (jResult == null) return;                  var elem = jResult[2];                  if (elem.HasValues)                  {                      LiveViewImageZoomRatio.SetValue(elem.Value<int>("zoomPositionCurrentBox").ToString()' false);                  }                  elem = jResult[5];                  if (elem.HasValues)                  {                      foreach (var obj in elem.Children())                      {                          foreach (var u in obj["takePictureUrl"].Values<string>())                          {                              var url = u;                              if (url.Contains("?"))                                  url = url.Split('?')[0];                              PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                              {                                  WiaImageItem = null'                                  EventArgs = new PortableDeviceEventArgs()'                                  CameraDevice = this'                                  FileName = url.Replace('/'' '\\')'                                  Handle = url                              };                              OnPhotoCapture(this' args);                          }                      }                  }                    elem = jResult[18];                  if (elem.HasValues)                  {                      SetCapability(Mode' new Capability<string>                      {                          Current = elem.Value<string>("currentExposureMode")'                          Candidates = elem["exposureModeCandidates"].Values<string>().ToList()                      });                  }                    elem = jResult[27];                  if (elem.HasValues)                  {                      SetCapability(FNumber' new Capability<string>                      {                          Current = elem.Value<string>("currentFNumber")'                          Candidates = elem["fNumberCandidates"].Values<string>().ToList()                      });                  }                  elem = jResult[28];                  if (elem.HasValues)                  {                      SetCapability(FocusMode' new Capability<string>                      {                          Current = elem.Value<string>("currentFocusMode")'                          Candidates = elem["focusModeCandidates"].Values<string>().ToList()                      });                  }                    elem = jResult[29];                  if (elem.HasValues)                  {                      SetCapability(IsoNumber' new Capability<string>                      {                          Current = elem.Value<string>("currentIsoSpeedRate")'                          Candidates = elem["isoSpeedRateCandidates"].Values<string>().ToList()                      });                  }                  elem = jResult[32];                  if (elem.HasValues)                  {                      SetCapability(ShutterSpeed' new Capability<string>                      {                          Current = elem.Value<string>("currentShutterSpeed")'                          Candidates = elem["shutterSpeedCandidates"].Values<string>().ToList()                      });                  }                  elem = jResult[33];                  if (elem.HasValues)                  {                      WhiteBalance.SetValue(elem.Value<string>("currentWhiteBalanceMode")' false);                  }                  if (jResult.Count > 36) // GetEvent version 1.2                  {                      elem = jResult[37];                      if (elem.HasValues)                      {                          SetCapability(CompressionSetting' new Capability<string>                          {                              Current = elem.Value<string>("stillQuality")'                              Candidates = elem["candidate"].Values<string>().ToList()                          });                      }                  }              }              catch (Exception ex)              {                  Log.Debug("Sony get error "' ex);              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,GetEvent,The following statement contains a magic number: try              {                  var jString = Post(CreateJson("getEvent"'"1.0"'false));                  var json = Initialize(jString);                  var jResult = json["result"] as JArray;                    if (jResult == null) return;                  var elem = jResult[2];                  if (elem.HasValues)                  {                      LiveViewImageZoomRatio.SetValue(elem.Value<int>("zoomPositionCurrentBox").ToString()' false);                  }                  elem = jResult[5];                  if (elem.HasValues)                  {                      foreach (var obj in elem.Children())                      {                          foreach (var u in obj["takePictureUrl"].Values<string>())                          {                              var url = u;                              if (url.Contains("?"))                                  url = url.Split('?')[0];                              PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                              {                                  WiaImageItem = null'                                  EventArgs = new PortableDeviceEventArgs()'                                  CameraDevice = this'                                  FileName = url.Replace('/'' '\\')'                                  Handle = url                              };                              OnPhotoCapture(this' args);                          }                      }                  }                    elem = jResult[18];                  if (elem.HasValues)                  {                      SetCapability(Mode' new Capability<string>                      {                          Current = elem.Value<string>("currentExposureMode")'                          Candidates = elem["exposureModeCandidates"].Values<string>().ToList()                      });                  }                    elem = jResult[27];                  if (elem.HasValues)                  {                      SetCapability(FNumber' new Capability<string>                      {                          Current = elem.Value<string>("currentFNumber")'                          Candidates = elem["fNumberCandidates"].Values<string>().ToList()                      });                  }                  elem = jResult[28];                  if (elem.HasValues)                  {                      SetCapability(FocusMode' new Capability<string>                      {                          Current = elem.Value<string>("currentFocusMode")'                          Candidates = elem["focusModeCandidates"].Values<string>().ToList()                      });                  }                    elem = jResult[29];                  if (elem.HasValues)                  {                      SetCapability(IsoNumber' new Capability<string>                      {                          Current = elem.Value<string>("currentIsoSpeedRate")'                          Candidates = elem["isoSpeedRateCandidates"].Values<string>().ToList()                      });                  }                  elem = jResult[32];                  if (elem.HasValues)                  {                      SetCapability(ShutterSpeed' new Capability<string>                      {                          Current = elem.Value<string>("currentShutterSpeed")'                          Candidates = elem["shutterSpeedCandidates"].Values<string>().ToList()                      });                  }                  elem = jResult[33];                  if (elem.HasValues)                  {                      WhiteBalance.SetValue(elem.Value<string>("currentWhiteBalanceMode")' false);                  }                  if (jResult.Count > 36) // GetEvent version 1.2                  {                      elem = jResult[37];                      if (elem.HasValues)                      {                          SetCapability(CompressionSetting' new Capability<string>                          {                              Current = elem.Value<string>("stillQuality")'                              Candidates = elem["candidate"].Values<string>().ToList()                          });                      }                  }              }              catch (Exception ex)              {                  Log.Debug("Sony get error "' ex);              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,GetEvent,The following statement contains a magic number: try              {                  var jString = Post(CreateJson("getEvent"'"1.0"'false));                  var json = Initialize(jString);                  var jResult = json["result"] as JArray;                    if (jResult == null) return;                  var elem = jResult[2];                  if (elem.HasValues)                  {                      LiveViewImageZoomRatio.SetValue(elem.Value<int>("zoomPositionCurrentBox").ToString()' false);                  }                  elem = jResult[5];                  if (elem.HasValues)                  {                      foreach (var obj in elem.Children())                      {                          foreach (var u in obj["takePictureUrl"].Values<string>())                          {                              var url = u;                              if (url.Contains("?"))                                  url = url.Split('?')[0];                              PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                              {                                  WiaImageItem = null'                                  EventArgs = new PortableDeviceEventArgs()'                                  CameraDevice = this'                                  FileName = url.Replace('/'' '\\')'                                  Handle = url                              };                              OnPhotoCapture(this' args);                          }                      }                  }                    elem = jResult[18];                  if (elem.HasValues)                  {                      SetCapability(Mode' new Capability<string>                      {                          Current = elem.Value<string>("currentExposureMode")'                          Candidates = elem["exposureModeCandidates"].Values<string>().ToList()                      });                  }                    elem = jResult[27];                  if (elem.HasValues)                  {                      SetCapability(FNumber' new Capability<string>                      {                          Current = elem.Value<string>("currentFNumber")'                          Candidates = elem["fNumberCandidates"].Values<string>().ToList()                      });                  }                  elem = jResult[28];                  if (elem.HasValues)                  {                      SetCapability(FocusMode' new Capability<string>                      {                          Current = elem.Value<string>("currentFocusMode")'                          Candidates = elem["focusModeCandidates"].Values<string>().ToList()                      });                  }                    elem = jResult[29];                  if (elem.HasValues)                  {                      SetCapability(IsoNumber' new Capability<string>                      {                          Current = elem.Value<string>("currentIsoSpeedRate")'                          Candidates = elem["isoSpeedRateCandidates"].Values<string>().ToList()                      });                  }                  elem = jResult[32];                  if (elem.HasValues)                  {                      SetCapability(ShutterSpeed' new Capability<string>                      {                          Current = elem.Value<string>("currentShutterSpeed")'                          Candidates = elem["shutterSpeedCandidates"].Values<string>().ToList()                      });                  }                  elem = jResult[33];                  if (elem.HasValues)                  {                      WhiteBalance.SetValue(elem.Value<string>("currentWhiteBalanceMode")' false);                  }                  if (jResult.Count > 36) // GetEvent version 1.2                  {                      elem = jResult[37];                      if (elem.HasValues)                      {                          SetCapability(CompressionSetting' new Capability<string>                          {                              Current = elem.Value<string>("stillQuality")'                              Candidates = elem["candidate"].Values<string>().ToList()                          });                      }                  }              }              catch (Exception ex)              {                  Log.Debug("Sony get error "' ex);              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,GetEvent,The following statement contains a magic number: try              {                  var jString = Post(CreateJson("getEvent"'"1.0"'false));                  var json = Initialize(jString);                  var jResult = json["result"] as JArray;                    if (jResult == null) return;                  var elem = jResult[2];                  if (elem.HasValues)                  {                      LiveViewImageZoomRatio.SetValue(elem.Value<int>("zoomPositionCurrentBox").ToString()' false);                  }                  elem = jResult[5];                  if (elem.HasValues)                  {                      foreach (var obj in elem.Children())                      {                          foreach (var u in obj["takePictureUrl"].Values<string>())                          {                              var url = u;                              if (url.Contains("?"))                                  url = url.Split('?')[0];                              PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                              {                                  WiaImageItem = null'                                  EventArgs = new PortableDeviceEventArgs()'                                  CameraDevice = this'                                  FileName = url.Replace('/'' '\\')'                                  Handle = url                              };                              OnPhotoCapture(this' args);                          }                      }                  }                    elem = jResult[18];                  if (elem.HasValues)                  {                      SetCapability(Mode' new Capability<string>                      {                          Current = elem.Value<string>("currentExposureMode")'                          Candidates = elem["exposureModeCandidates"].Values<string>().ToList()                      });                  }                    elem = jResult[27];                  if (elem.HasValues)                  {                      SetCapability(FNumber' new Capability<string>                      {                          Current = elem.Value<string>("currentFNumber")'                          Candidates = elem["fNumberCandidates"].Values<string>().ToList()                      });                  }                  elem = jResult[28];                  if (elem.HasValues)                  {                      SetCapability(FocusMode' new Capability<string>                      {                          Current = elem.Value<string>("currentFocusMode")'                          Candidates = elem["focusModeCandidates"].Values<string>().ToList()                      });                  }                    elem = jResult[29];                  if (elem.HasValues)                  {                      SetCapability(IsoNumber' new Capability<string>                      {                          Current = elem.Value<string>("currentIsoSpeedRate")'                          Candidates = elem["isoSpeedRateCandidates"].Values<string>().ToList()                      });                  }                  elem = jResult[32];                  if (elem.HasValues)                  {                      SetCapability(ShutterSpeed' new Capability<string>                      {                          Current = elem.Value<string>("currentShutterSpeed")'                          Candidates = elem["shutterSpeedCandidates"].Values<string>().ToList()                      });                  }                  elem = jResult[33];                  if (elem.HasValues)                  {                      WhiteBalance.SetValue(elem.Value<string>("currentWhiteBalanceMode")' false);                  }                  if (jResult.Count > 36) // GetEvent version 1.2                  {                      elem = jResult[37];                      if (elem.HasValues)                      {                          SetCapability(CompressionSetting' new Capability<string>                          {                              Current = elem.Value<string>("stillQuality")'                              Candidates = elem["candidate"].Values<string>().ToList()                          });                      }                  }              }              catch (Exception ex)              {                  Log.Debug("Sony get error "' ex);              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,GetEvent,The following statement contains a magic number: try              {                  var jString = Post(CreateJson("getEvent"'"1.0"'false));                  var json = Initialize(jString);                  var jResult = json["result"] as JArray;                    if (jResult == null) return;                  var elem = jResult[2];                  if (elem.HasValues)                  {                      LiveViewImageZoomRatio.SetValue(elem.Value<int>("zoomPositionCurrentBox").ToString()' false);                  }                  elem = jResult[5];                  if (elem.HasValues)                  {                      foreach (var obj in elem.Children())                      {                          foreach (var u in obj["takePictureUrl"].Values<string>())                          {                              var url = u;                              if (url.Contains("?"))                                  url = url.Split('?')[0];                              PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                              {                                  WiaImageItem = null'                                  EventArgs = new PortableDeviceEventArgs()'                                  CameraDevice = this'                                  FileName = url.Replace('/'' '\\')'                                  Handle = url                              };                              OnPhotoCapture(this' args);                          }                      }                  }                    elem = jResult[18];                  if (elem.HasValues)                  {                      SetCapability(Mode' new Capability<string>                      {                          Current = elem.Value<string>("currentExposureMode")'                          Candidates = elem["exposureModeCandidates"].Values<string>().ToList()                      });                  }                    elem = jResult[27];                  if (elem.HasValues)                  {                      SetCapability(FNumber' new Capability<string>                      {                          Current = elem.Value<string>("currentFNumber")'                          Candidates = elem["fNumberCandidates"].Values<string>().ToList()                      });                  }                  elem = jResult[28];                  if (elem.HasValues)                  {                      SetCapability(FocusMode' new Capability<string>                      {                          Current = elem.Value<string>("currentFocusMode")'                          Candidates = elem["focusModeCandidates"].Values<string>().ToList()                      });                  }                    elem = jResult[29];                  if (elem.HasValues)                  {                      SetCapability(IsoNumber' new Capability<string>                      {                          Current = elem.Value<string>("currentIsoSpeedRate")'                          Candidates = elem["isoSpeedRateCandidates"].Values<string>().ToList()                      });                  }                  elem = jResult[32];                  if (elem.HasValues)                  {                      SetCapability(ShutterSpeed' new Capability<string>                      {                          Current = elem.Value<string>("currentShutterSpeed")'                          Candidates = elem["shutterSpeedCandidates"].Values<string>().ToList()                      });                  }                  elem = jResult[33];                  if (elem.HasValues)                  {                      WhiteBalance.SetValue(elem.Value<string>("currentWhiteBalanceMode")' false);                  }                  if (jResult.Count > 36) // GetEvent version 1.2                  {                      elem = jResult[37];                      if (elem.HasValues)                      {                          SetCapability(CompressionSetting' new Capability<string>                          {                              Current = elem.Value<string>("stillQuality")'                              Candidates = elem["candidate"].Values<string>().ToList()                          });                      }                  }              }              catch (Exception ex)              {                  Log.Debug("Sony get error "' ex);              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,GetEvent,The following statement contains a magic number: try              {                  var jString = Post(CreateJson("getEvent"'"1.0"'false));                  var json = Initialize(jString);                  var jResult = json["result"] as JArray;                    if (jResult == null) return;                  var elem = jResult[2];                  if (elem.HasValues)                  {                      LiveViewImageZoomRatio.SetValue(elem.Value<int>("zoomPositionCurrentBox").ToString()' false);                  }                  elem = jResult[5];                  if (elem.HasValues)                  {                      foreach (var obj in elem.Children())                      {                          foreach (var u in obj["takePictureUrl"].Values<string>())                          {                              var url = u;                              if (url.Contains("?"))                                  url = url.Split('?')[0];                              PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                              {                                  WiaImageItem = null'                                  EventArgs = new PortableDeviceEventArgs()'                                  CameraDevice = this'                                  FileName = url.Replace('/'' '\\')'                                  Handle = url                              };                              OnPhotoCapture(this' args);                          }                      }                  }                    elem = jResult[18];                  if (elem.HasValues)                  {                      SetCapability(Mode' new Capability<string>                      {                          Current = elem.Value<string>("currentExposureMode")'                          Candidates = elem["exposureModeCandidates"].Values<string>().ToList()                      });                  }                    elem = jResult[27];                  if (elem.HasValues)                  {                      SetCapability(FNumber' new Capability<string>                      {                          Current = elem.Value<string>("currentFNumber")'                          Candidates = elem["fNumberCandidates"].Values<string>().ToList()                      });                  }                  elem = jResult[28];                  if (elem.HasValues)                  {                      SetCapability(FocusMode' new Capability<string>                      {                          Current = elem.Value<string>("currentFocusMode")'                          Candidates = elem["focusModeCandidates"].Values<string>().ToList()                      });                  }                    elem = jResult[29];                  if (elem.HasValues)                  {                      SetCapability(IsoNumber' new Capability<string>                      {                          Current = elem.Value<string>("currentIsoSpeedRate")'                          Candidates = elem["isoSpeedRateCandidates"].Values<string>().ToList()                      });                  }                  elem = jResult[32];                  if (elem.HasValues)                  {                      SetCapability(ShutterSpeed' new Capability<string>                      {                          Current = elem.Value<string>("currentShutterSpeed")'                          Candidates = elem["shutterSpeedCandidates"].Values<string>().ToList()                      });                  }                  elem = jResult[33];                  if (elem.HasValues)                  {                      WhiteBalance.SetValue(elem.Value<string>("currentWhiteBalanceMode")' false);                  }                  if (jResult.Count > 36) // GetEvent version 1.2                  {                      elem = jResult[37];                      if (elem.HasValues)                      {                          SetCapability(CompressionSetting' new Capability<string>                          {                              Current = elem.Value<string>("stillQuality")'                              Candidates = elem["candidate"].Values<string>().ToList()                          });                      }                  }              }              catch (Exception ex)              {                  Log.Debug("Sony get error "' ex);              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,GetEvent,The following statement contains a magic number: try              {                  var jString = Post(CreateJson("getEvent"'"1.0"'false));                  var json = Initialize(jString);                  var jResult = json["result"] as JArray;                    if (jResult == null) return;                  var elem = jResult[2];                  if (elem.HasValues)                  {                      LiveViewImageZoomRatio.SetValue(elem.Value<int>("zoomPositionCurrentBox").ToString()' false);                  }                  elem = jResult[5];                  if (elem.HasValues)                  {                      foreach (var obj in elem.Children())                      {                          foreach (var u in obj["takePictureUrl"].Values<string>())                          {                              var url = u;                              if (url.Contains("?"))                                  url = url.Split('?')[0];                              PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                              {                                  WiaImageItem = null'                                  EventArgs = new PortableDeviceEventArgs()'                                  CameraDevice = this'                                  FileName = url.Replace('/'' '\\')'                                  Handle = url                              };                              OnPhotoCapture(this' args);                          }                      }                  }                    elem = jResult[18];                  if (elem.HasValues)                  {                      SetCapability(Mode' new Capability<string>                      {                          Current = elem.Value<string>("currentExposureMode")'                          Candidates = elem["exposureModeCandidates"].Values<string>().ToList()                      });                  }                    elem = jResult[27];                  if (elem.HasValues)                  {                      SetCapability(FNumber' new Capability<string>                      {                          Current = elem.Value<string>("currentFNumber")'                          Candidates = elem["fNumberCandidates"].Values<string>().ToList()                      });                  }                  elem = jResult[28];                  if (elem.HasValues)                  {                      SetCapability(FocusMode' new Capability<string>                      {                          Current = elem.Value<string>("currentFocusMode")'                          Candidates = elem["focusModeCandidates"].Values<string>().ToList()                      });                  }                    elem = jResult[29];                  if (elem.HasValues)                  {                      SetCapability(IsoNumber' new Capability<string>                      {                          Current = elem.Value<string>("currentIsoSpeedRate")'                          Candidates = elem["isoSpeedRateCandidates"].Values<string>().ToList()                      });                  }                  elem = jResult[32];                  if (elem.HasValues)                  {                      SetCapability(ShutterSpeed' new Capability<string>                      {                          Current = elem.Value<string>("currentShutterSpeed")'                          Candidates = elem["shutterSpeedCandidates"].Values<string>().ToList()                      });                  }                  elem = jResult[33];                  if (elem.HasValues)                  {                      WhiteBalance.SetValue(elem.Value<string>("currentWhiteBalanceMode")' false);                  }                  if (jResult.Count > 36) // GetEvent version 1.2                  {                      elem = jResult[37];                      if (elem.HasValues)                      {                          SetCapability(CompressionSetting' new Capability<string>                          {                              Current = elem.Value<string>("stillQuality")'                              Candidates = elem["candidate"].Values<string>().ToList()                          });                      }                  }              }              catch (Exception ex)              {                  Log.Debug("Sony get error "' ex);              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,CapturePhoto,The following statement contains a magic number: while (true)              {                  try                  {                      urls = AsPrimitiveList<string>(firstRun ? Post(CreateJson("actTakePicture")) : Post(CreateJson("awaitTakePicture")));                      break;                  }                  catch (DeviceException exception)                  {                      if (exception.ErrorCode == 40403)                      {                          firstRun = false;                                              }                      else                      {                          IsBusy = false;                          Log.Error("Sony capture error "' exception);                          throw;                      }                  }                  catch(Exception ex)                  {                      IsBusy = false;                      Log.Error("Sony capture error "' ex);                      throw;                  }              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,GetID,The following statement contains a magic number: if (request_id > 1000000000)              {                  request_id = 0;              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: try              {                  HttpWebResponse resp = (HttpWebResponse)req.EndGetResponse(asyncResult);                  Stream s = resp.GetResponseStream();                      while (true)                  {                      CommonHeader heder = new CommonHeader();                      //ByteArrayToStructure(s' ref heder);                      var buff = ReadBytes(s' 8);                      heder.StartByte = buff[0];                      heder.Type = buff[1];                      heder.SequenceNo = BitConverter.ToInt16(buff'2); ;                      heder.TimeStamp = BitConverter.ToInt32(buff' 4); ;                      PayloadHeader playload = new PayloadHeader();                      //ByteArrayToStructure(s' ref playload);                      buff = ReadBytes(s' 128);                        playload.StartCode = BitConverter.ToInt32(buff' 0);                      playload.JpgDataSize = BitConverter.ToUInt16(new byte[] { buff[6]' buff[5]' buff[4]' 0 }' 0);                      playload.PadingSize = buff[7];                        if (((CommonHeader) heder).Type == 0x02)                      {                          if (playload.JpgDataSize > 0)                          {                              var data = ReadBytes(s' playload.JpgDataSize);                              _liveViewData.FocusX = BitConverter.ToInt16(new byte[] { data[1]' data[0]}' 0);                              _liveViewData.FocusY = BitConverter.ToInt16(new byte[] { data[3]' data[2] }' 0); ;                              _liveViewData.FocusFrameXSize = BitConverter.ToInt16(new byte[] { data[5]' data[4] }' 0) - _liveViewData.FocusX;                              _liveViewData.FocusFrameYSize = BitConverter.ToInt16(new byte[] { data[7]' data[6] }' 0) - _liveViewData.FocusY ;                              _liveViewData.HaveFocusData = true;                              _liveViewData.Focused = data[9] != 0;                              _liveViewData.ImageWidth = 10000;                              _liveViewData.ImageHeight = 10000;                              _liveViewData.IsLiveViewRunning = true;                              Console.WriteLine(playload.JpgDataSize);                          }                      }                      else                      {                          _liveViewData.ImageData = ReadBytes(s' playload.JpgDataSize);                      }                        if (playload.PadingSize > 0)                          ReadBytes(s' playload.PadingSize);                      if (_shoulStopLiveView)                          break;                  }                  resp.Close();              }              catch (Exception ex)              {                  Log.Error("Unable to download stream "' ex);              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: try              {                  HttpWebResponse resp = (HttpWebResponse)req.EndGetResponse(asyncResult);                  Stream s = resp.GetResponseStream();                      while (true)                  {                      CommonHeader heder = new CommonHeader();                      //ByteArrayToStructure(s' ref heder);                      var buff = ReadBytes(s' 8);                      heder.StartByte = buff[0];                      heder.Type = buff[1];                      heder.SequenceNo = BitConverter.ToInt16(buff'2); ;                      heder.TimeStamp = BitConverter.ToInt32(buff' 4); ;                      PayloadHeader playload = new PayloadHeader();                      //ByteArrayToStructure(s' ref playload);                      buff = ReadBytes(s' 128);                        playload.StartCode = BitConverter.ToInt32(buff' 0);                      playload.JpgDataSize = BitConverter.ToUInt16(new byte[] { buff[6]' buff[5]' buff[4]' 0 }' 0);                      playload.PadingSize = buff[7];                        if (((CommonHeader) heder).Type == 0x02)                      {                          if (playload.JpgDataSize > 0)                          {                              var data = ReadBytes(s' playload.JpgDataSize);                              _liveViewData.FocusX = BitConverter.ToInt16(new byte[] { data[1]' data[0]}' 0);                              _liveViewData.FocusY = BitConverter.ToInt16(new byte[] { data[3]' data[2] }' 0); ;                              _liveViewData.FocusFrameXSize = BitConverter.ToInt16(new byte[] { data[5]' data[4] }' 0) - _liveViewData.FocusX;                              _liveViewData.FocusFrameYSize = BitConverter.ToInt16(new byte[] { data[7]' data[6] }' 0) - _liveViewData.FocusY ;                              _liveViewData.HaveFocusData = true;                              _liveViewData.Focused = data[9] != 0;                              _liveViewData.ImageWidth = 10000;                              _liveViewData.ImageHeight = 10000;                              _liveViewData.IsLiveViewRunning = true;                              Console.WriteLine(playload.JpgDataSize);                          }                      }                      else                      {                          _liveViewData.ImageData = ReadBytes(s' playload.JpgDataSize);                      }                        if (playload.PadingSize > 0)                          ReadBytes(s' playload.PadingSize);                      if (_shoulStopLiveView)                          break;                  }                  resp.Close();              }              catch (Exception ex)              {                  Log.Error("Unable to download stream "' ex);              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: try              {                  HttpWebResponse resp = (HttpWebResponse)req.EndGetResponse(asyncResult);                  Stream s = resp.GetResponseStream();                      while (true)                  {                      CommonHeader heder = new CommonHeader();                      //ByteArrayToStructure(s' ref heder);                      var buff = ReadBytes(s' 8);                      heder.StartByte = buff[0];                      heder.Type = buff[1];                      heder.SequenceNo = BitConverter.ToInt16(buff'2); ;                      heder.TimeStamp = BitConverter.ToInt32(buff' 4); ;                      PayloadHeader playload = new PayloadHeader();                      //ByteArrayToStructure(s' ref playload);                      buff = ReadBytes(s' 128);                        playload.StartCode = BitConverter.ToInt32(buff' 0);                      playload.JpgDataSize = BitConverter.ToUInt16(new byte[] { buff[6]' buff[5]' buff[4]' 0 }' 0);                      playload.PadingSize = buff[7];                        if (((CommonHeader) heder).Type == 0x02)                      {                          if (playload.JpgDataSize > 0)                          {                              var data = ReadBytes(s' playload.JpgDataSize);                              _liveViewData.FocusX = BitConverter.ToInt16(new byte[] { data[1]' data[0]}' 0);                              _liveViewData.FocusY = BitConverter.ToInt16(new byte[] { data[3]' data[2] }' 0); ;                              _liveViewData.FocusFrameXSize = BitConverter.ToInt16(new byte[] { data[5]' data[4] }' 0) - _liveViewData.FocusX;                              _liveViewData.FocusFrameYSize = BitConverter.ToInt16(new byte[] { data[7]' data[6] }' 0) - _liveViewData.FocusY ;                              _liveViewData.HaveFocusData = true;                              _liveViewData.Focused = data[9] != 0;                              _liveViewData.ImageWidth = 10000;                              _liveViewData.ImageHeight = 10000;                              _liveViewData.IsLiveViewRunning = true;                              Console.WriteLine(playload.JpgDataSize);                          }                      }                      else                      {                          _liveViewData.ImageData = ReadBytes(s' playload.JpgDataSize);                      }                        if (playload.PadingSize > 0)                          ReadBytes(s' playload.PadingSize);                      if (_shoulStopLiveView)                          break;                  }                  resp.Close();              }              catch (Exception ex)              {                  Log.Error("Unable to download stream "' ex);              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: try              {                  HttpWebResponse resp = (HttpWebResponse)req.EndGetResponse(asyncResult);                  Stream s = resp.GetResponseStream();                      while (true)                  {                      CommonHeader heder = new CommonHeader();                      //ByteArrayToStructure(s' ref heder);                      var buff = ReadBytes(s' 8);                      heder.StartByte = buff[0];                      heder.Type = buff[1];                      heder.SequenceNo = BitConverter.ToInt16(buff'2); ;                      heder.TimeStamp = BitConverter.ToInt32(buff' 4); ;                      PayloadHeader playload = new PayloadHeader();                      //ByteArrayToStructure(s' ref playload);                      buff = ReadBytes(s' 128);                        playload.StartCode = BitConverter.ToInt32(buff' 0);                      playload.JpgDataSize = BitConverter.ToUInt16(new byte[] { buff[6]' buff[5]' buff[4]' 0 }' 0);                      playload.PadingSize = buff[7];                        if (((CommonHeader) heder).Type == 0x02)                      {                          if (playload.JpgDataSize > 0)                          {                              var data = ReadBytes(s' playload.JpgDataSize);                              _liveViewData.FocusX = BitConverter.ToInt16(new byte[] { data[1]' data[0]}' 0);                              _liveViewData.FocusY = BitConverter.ToInt16(new byte[] { data[3]' data[2] }' 0); ;                              _liveViewData.FocusFrameXSize = BitConverter.ToInt16(new byte[] { data[5]' data[4] }' 0) - _liveViewData.FocusX;                              _liveViewData.FocusFrameYSize = BitConverter.ToInt16(new byte[] { data[7]' data[6] }' 0) - _liveViewData.FocusY ;                              _liveViewData.HaveFocusData = true;                              _liveViewData.Focused = data[9] != 0;                              _liveViewData.ImageWidth = 10000;                              _liveViewData.ImageHeight = 10000;                              _liveViewData.IsLiveViewRunning = true;                              Console.WriteLine(playload.JpgDataSize);                          }                      }                      else                      {                          _liveViewData.ImageData = ReadBytes(s' playload.JpgDataSize);                      }                        if (playload.PadingSize > 0)                          ReadBytes(s' playload.PadingSize);                      if (_shoulStopLiveView)                          break;                  }                  resp.Close();              }              catch (Exception ex)              {                  Log.Error("Unable to download stream "' ex);              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: try              {                  HttpWebResponse resp = (HttpWebResponse)req.EndGetResponse(asyncResult);                  Stream s = resp.GetResponseStream();                      while (true)                  {                      CommonHeader heder = new CommonHeader();                      //ByteArrayToStructure(s' ref heder);                      var buff = ReadBytes(s' 8);                      heder.StartByte = buff[0];                      heder.Type = buff[1];                      heder.SequenceNo = BitConverter.ToInt16(buff'2); ;                      heder.TimeStamp = BitConverter.ToInt32(buff' 4); ;                      PayloadHeader playload = new PayloadHeader();                      //ByteArrayToStructure(s' ref playload);                      buff = ReadBytes(s' 128);                        playload.StartCode = BitConverter.ToInt32(buff' 0);                      playload.JpgDataSize = BitConverter.ToUInt16(new byte[] { buff[6]' buff[5]' buff[4]' 0 }' 0);                      playload.PadingSize = buff[7];                        if (((CommonHeader) heder).Type == 0x02)                      {                          if (playload.JpgDataSize > 0)                          {                              var data = ReadBytes(s' playload.JpgDataSize);                              _liveViewData.FocusX = BitConverter.ToInt16(new byte[] { data[1]' data[0]}' 0);                              _liveViewData.FocusY = BitConverter.ToInt16(new byte[] { data[3]' data[2] }' 0); ;                              _liveViewData.FocusFrameXSize = BitConverter.ToInt16(new byte[] { data[5]' data[4] }' 0) - _liveViewData.FocusX;                              _liveViewData.FocusFrameYSize = BitConverter.ToInt16(new byte[] { data[7]' data[6] }' 0) - _liveViewData.FocusY ;                              _liveViewData.HaveFocusData = true;                              _liveViewData.Focused = data[9] != 0;                              _liveViewData.ImageWidth = 10000;                              _liveViewData.ImageHeight = 10000;                              _liveViewData.IsLiveViewRunning = true;                              Console.WriteLine(playload.JpgDataSize);                          }                      }                      else                      {                          _liveViewData.ImageData = ReadBytes(s' playload.JpgDataSize);                      }                        if (playload.PadingSize > 0)                          ReadBytes(s' playload.PadingSize);                      if (_shoulStopLiveView)                          break;                  }                  resp.Close();              }              catch (Exception ex)              {                  Log.Error("Unable to download stream "' ex);              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: try              {                  HttpWebResponse resp = (HttpWebResponse)req.EndGetResponse(asyncResult);                  Stream s = resp.GetResponseStream();                      while (true)                  {                      CommonHeader heder = new CommonHeader();                      //ByteArrayToStructure(s' ref heder);                      var buff = ReadBytes(s' 8);                      heder.StartByte = buff[0];                      heder.Type = buff[1];                      heder.SequenceNo = BitConverter.ToInt16(buff'2); ;                      heder.TimeStamp = BitConverter.ToInt32(buff' 4); ;                      PayloadHeader playload = new PayloadHeader();                      //ByteArrayToStructure(s' ref playload);                      buff = ReadBytes(s' 128);                        playload.StartCode = BitConverter.ToInt32(buff' 0);                      playload.JpgDataSize = BitConverter.ToUInt16(new byte[] { buff[6]' buff[5]' buff[4]' 0 }' 0);                      playload.PadingSize = buff[7];                        if (((CommonHeader) heder).Type == 0x02)                      {                          if (playload.JpgDataSize > 0)                          {                              var data = ReadBytes(s' playload.JpgDataSize);                              _liveViewData.FocusX = BitConverter.ToInt16(new byte[] { data[1]' data[0]}' 0);                              _liveViewData.FocusY = BitConverter.ToInt16(new byte[] { data[3]' data[2] }' 0); ;                              _liveViewData.FocusFrameXSize = BitConverter.ToInt16(new byte[] { data[5]' data[4] }' 0) - _liveViewData.FocusX;                              _liveViewData.FocusFrameYSize = BitConverter.ToInt16(new byte[] { data[7]' data[6] }' 0) - _liveViewData.FocusY ;                              _liveViewData.HaveFocusData = true;                              _liveViewData.Focused = data[9] != 0;                              _liveViewData.ImageWidth = 10000;                              _liveViewData.ImageHeight = 10000;                              _liveViewData.IsLiveViewRunning = true;                              Console.WriteLine(playload.JpgDataSize);                          }                      }                      else                      {                          _liveViewData.ImageData = ReadBytes(s' playload.JpgDataSize);                      }                        if (playload.PadingSize > 0)                          ReadBytes(s' playload.PadingSize);                      if (_shoulStopLiveView)                          break;                  }                  resp.Close();              }              catch (Exception ex)              {                  Log.Error("Unable to download stream "' ex);              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: try              {                  HttpWebResponse resp = (HttpWebResponse)req.EndGetResponse(asyncResult);                  Stream s = resp.GetResponseStream();                      while (true)                  {                      CommonHeader heder = new CommonHeader();                      //ByteArrayToStructure(s' ref heder);                      var buff = ReadBytes(s' 8);                      heder.StartByte = buff[0];                      heder.Type = buff[1];                      heder.SequenceNo = BitConverter.ToInt16(buff'2); ;                      heder.TimeStamp = BitConverter.ToInt32(buff' 4); ;                      PayloadHeader playload = new PayloadHeader();                      //ByteArrayToStructure(s' ref playload);                      buff = ReadBytes(s' 128);                        playload.StartCode = BitConverter.ToInt32(buff' 0);                      playload.JpgDataSize = BitConverter.ToUInt16(new byte[] { buff[6]' buff[5]' buff[4]' 0 }' 0);                      playload.PadingSize = buff[7];                        if (((CommonHeader) heder).Type == 0x02)                      {                          if (playload.JpgDataSize > 0)                          {                              var data = ReadBytes(s' playload.JpgDataSize);                              _liveViewData.FocusX = BitConverter.ToInt16(new byte[] { data[1]' data[0]}' 0);                              _liveViewData.FocusY = BitConverter.ToInt16(new byte[] { data[3]' data[2] }' 0); ;                              _liveViewData.FocusFrameXSize = BitConverter.ToInt16(new byte[] { data[5]' data[4] }' 0) - _liveViewData.FocusX;                              _liveViewData.FocusFrameYSize = BitConverter.ToInt16(new byte[] { data[7]' data[6] }' 0) - _liveViewData.FocusY ;                              _liveViewData.HaveFocusData = true;                              _liveViewData.Focused = data[9] != 0;                              _liveViewData.ImageWidth = 10000;                              _liveViewData.ImageHeight = 10000;                              _liveViewData.IsLiveViewRunning = true;                              Console.WriteLine(playload.JpgDataSize);                          }                      }                      else                      {                          _liveViewData.ImageData = ReadBytes(s' playload.JpgDataSize);                      }                        if (playload.PadingSize > 0)                          ReadBytes(s' playload.PadingSize);                      if (_shoulStopLiveView)                          break;                  }                  resp.Close();              }              catch (Exception ex)              {                  Log.Error("Unable to download stream "' ex);              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: try              {                  HttpWebResponse resp = (HttpWebResponse)req.EndGetResponse(asyncResult);                  Stream s = resp.GetResponseStream();                      while (true)                  {                      CommonHeader heder = new CommonHeader();                      //ByteArrayToStructure(s' ref heder);                      var buff = ReadBytes(s' 8);                      heder.StartByte = buff[0];                      heder.Type = buff[1];                      heder.SequenceNo = BitConverter.ToInt16(buff'2); ;                      heder.TimeStamp = BitConverter.ToInt32(buff' 4); ;                      PayloadHeader playload = new PayloadHeader();                      //ByteArrayToStructure(s' ref playload);                      buff = ReadBytes(s' 128);                        playload.StartCode = BitConverter.ToInt32(buff' 0);                      playload.JpgDataSize = BitConverter.ToUInt16(new byte[] { buff[6]' buff[5]' buff[4]' 0 }' 0);                      playload.PadingSize = buff[7];                        if (((CommonHeader) heder).Type == 0x02)                      {                          if (playload.JpgDataSize > 0)                          {                              var data = ReadBytes(s' playload.JpgDataSize);                              _liveViewData.FocusX = BitConverter.ToInt16(new byte[] { data[1]' data[0]}' 0);                              _liveViewData.FocusY = BitConverter.ToInt16(new byte[] { data[3]' data[2] }' 0); ;                              _liveViewData.FocusFrameXSize = BitConverter.ToInt16(new byte[] { data[5]' data[4] }' 0) - _liveViewData.FocusX;                              _liveViewData.FocusFrameYSize = BitConverter.ToInt16(new byte[] { data[7]' data[6] }' 0) - _liveViewData.FocusY ;                              _liveViewData.HaveFocusData = true;                              _liveViewData.Focused = data[9] != 0;                              _liveViewData.ImageWidth = 10000;                              _liveViewData.ImageHeight = 10000;                              _liveViewData.IsLiveViewRunning = true;                              Console.WriteLine(playload.JpgDataSize);                          }                      }                      else                      {                          _liveViewData.ImageData = ReadBytes(s' playload.JpgDataSize);                      }                        if (playload.PadingSize > 0)                          ReadBytes(s' playload.PadingSize);                      if (_shoulStopLiveView)                          break;                  }                  resp.Close();              }              catch (Exception ex)              {                  Log.Error("Unable to download stream "' ex);              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: try              {                  HttpWebResponse resp = (HttpWebResponse)req.EndGetResponse(asyncResult);                  Stream s = resp.GetResponseStream();                      while (true)                  {                      CommonHeader heder = new CommonHeader();                      //ByteArrayToStructure(s' ref heder);                      var buff = ReadBytes(s' 8);                      heder.StartByte = buff[0];                      heder.Type = buff[1];                      heder.SequenceNo = BitConverter.ToInt16(buff'2); ;                      heder.TimeStamp = BitConverter.ToInt32(buff' 4); ;                      PayloadHeader playload = new PayloadHeader();                      //ByteArrayToStructure(s' ref playload);                      buff = ReadBytes(s' 128);                        playload.StartCode = BitConverter.ToInt32(buff' 0);                      playload.JpgDataSize = BitConverter.ToUInt16(new byte[] { buff[6]' buff[5]' buff[4]' 0 }' 0);                      playload.PadingSize = buff[7];                        if (((CommonHeader) heder).Type == 0x02)                      {                          if (playload.JpgDataSize > 0)                          {                              var data = ReadBytes(s' playload.JpgDataSize);                              _liveViewData.FocusX = BitConverter.ToInt16(new byte[] { data[1]' data[0]}' 0);                              _liveViewData.FocusY = BitConverter.ToInt16(new byte[] { data[3]' data[2] }' 0); ;                              _liveViewData.FocusFrameXSize = BitConverter.ToInt16(new byte[] { data[5]' data[4] }' 0) - _liveViewData.FocusX;                              _liveViewData.FocusFrameYSize = BitConverter.ToInt16(new byte[] { data[7]' data[6] }' 0) - _liveViewData.FocusY ;                              _liveViewData.HaveFocusData = true;                              _liveViewData.Focused = data[9] != 0;                              _liveViewData.ImageWidth = 10000;                              _liveViewData.ImageHeight = 10000;                              _liveViewData.IsLiveViewRunning = true;                              Console.WriteLine(playload.JpgDataSize);                          }                      }                      else                      {                          _liveViewData.ImageData = ReadBytes(s' playload.JpgDataSize);                      }                        if (playload.PadingSize > 0)                          ReadBytes(s' playload.PadingSize);                      if (_shoulStopLiveView)                          break;                  }                  resp.Close();              }              catch (Exception ex)              {                  Log.Error("Unable to download stream "' ex);              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: try              {                  HttpWebResponse resp = (HttpWebResponse)req.EndGetResponse(asyncResult);                  Stream s = resp.GetResponseStream();                      while (true)                  {                      CommonHeader heder = new CommonHeader();                      //ByteArrayToStructure(s' ref heder);                      var buff = ReadBytes(s' 8);                      heder.StartByte = buff[0];                      heder.Type = buff[1];                      heder.SequenceNo = BitConverter.ToInt16(buff'2); ;                      heder.TimeStamp = BitConverter.ToInt32(buff' 4); ;                      PayloadHeader playload = new PayloadHeader();                      //ByteArrayToStructure(s' ref playload);                      buff = ReadBytes(s' 128);                        playload.StartCode = BitConverter.ToInt32(buff' 0);                      playload.JpgDataSize = BitConverter.ToUInt16(new byte[] { buff[6]' buff[5]' buff[4]' 0 }' 0);                      playload.PadingSize = buff[7];                        if (((CommonHeader) heder).Type == 0x02)                      {                          if (playload.JpgDataSize > 0)                          {                              var data = ReadBytes(s' playload.JpgDataSize);                              _liveViewData.FocusX = BitConverter.ToInt16(new byte[] { data[1]' data[0]}' 0);                              _liveViewData.FocusY = BitConverter.ToInt16(new byte[] { data[3]' data[2] }' 0); ;                              _liveViewData.FocusFrameXSize = BitConverter.ToInt16(new byte[] { data[5]' data[4] }' 0) - _liveViewData.FocusX;                              _liveViewData.FocusFrameYSize = BitConverter.ToInt16(new byte[] { data[7]' data[6] }' 0) - _liveViewData.FocusY ;                              _liveViewData.HaveFocusData = true;                              _liveViewData.Focused = data[9] != 0;                              _liveViewData.ImageWidth = 10000;                              _liveViewData.ImageHeight = 10000;                              _liveViewData.IsLiveViewRunning = true;                              Console.WriteLine(playload.JpgDataSize);                          }                      }                      else                      {                          _liveViewData.ImageData = ReadBytes(s' playload.JpgDataSize);                      }                        if (playload.PadingSize > 0)                          ReadBytes(s' playload.PadingSize);                      if (_shoulStopLiveView)                          break;                  }                  resp.Close();              }              catch (Exception ex)              {                  Log.Error("Unable to download stream "' ex);              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: try              {                  HttpWebResponse resp = (HttpWebResponse)req.EndGetResponse(asyncResult);                  Stream s = resp.GetResponseStream();                      while (true)                  {                      CommonHeader heder = new CommonHeader();                      //ByteArrayToStructure(s' ref heder);                      var buff = ReadBytes(s' 8);                      heder.StartByte = buff[0];                      heder.Type = buff[1];                      heder.SequenceNo = BitConverter.ToInt16(buff'2); ;                      heder.TimeStamp = BitConverter.ToInt32(buff' 4); ;                      PayloadHeader playload = new PayloadHeader();                      //ByteArrayToStructure(s' ref playload);                      buff = ReadBytes(s' 128);                        playload.StartCode = BitConverter.ToInt32(buff' 0);                      playload.JpgDataSize = BitConverter.ToUInt16(new byte[] { buff[6]' buff[5]' buff[4]' 0 }' 0);                      playload.PadingSize = buff[7];                        if (((CommonHeader) heder).Type == 0x02)                      {                          if (playload.JpgDataSize > 0)                          {                              var data = ReadBytes(s' playload.JpgDataSize);                              _liveViewData.FocusX = BitConverter.ToInt16(new byte[] { data[1]' data[0]}' 0);                              _liveViewData.FocusY = BitConverter.ToInt16(new byte[] { data[3]' data[2] }' 0); ;                              _liveViewData.FocusFrameXSize = BitConverter.ToInt16(new byte[] { data[5]' data[4] }' 0) - _liveViewData.FocusX;                              _liveViewData.FocusFrameYSize = BitConverter.ToInt16(new byte[] { data[7]' data[6] }' 0) - _liveViewData.FocusY ;                              _liveViewData.HaveFocusData = true;                              _liveViewData.Focused = data[9] != 0;                              _liveViewData.ImageWidth = 10000;                              _liveViewData.ImageHeight = 10000;                              _liveViewData.IsLiveViewRunning = true;                              Console.WriteLine(playload.JpgDataSize);                          }                      }                      else                      {                          _liveViewData.ImageData = ReadBytes(s' playload.JpgDataSize);                      }                        if (playload.PadingSize > 0)                          ReadBytes(s' playload.PadingSize);                      if (_shoulStopLiveView)                          break;                  }                  resp.Close();              }              catch (Exception ex)              {                  Log.Error("Unable to download stream "' ex);              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: try              {                  HttpWebResponse resp = (HttpWebResponse)req.EndGetResponse(asyncResult);                  Stream s = resp.GetResponseStream();                      while (true)                  {                      CommonHeader heder = new CommonHeader();                      //ByteArrayToStructure(s' ref heder);                      var buff = ReadBytes(s' 8);                      heder.StartByte = buff[0];                      heder.Type = buff[1];                      heder.SequenceNo = BitConverter.ToInt16(buff'2); ;                      heder.TimeStamp = BitConverter.ToInt32(buff' 4); ;                      PayloadHeader playload = new PayloadHeader();                      //ByteArrayToStructure(s' ref playload);                      buff = ReadBytes(s' 128);                        playload.StartCode = BitConverter.ToInt32(buff' 0);                      playload.JpgDataSize = BitConverter.ToUInt16(new byte[] { buff[6]' buff[5]' buff[4]' 0 }' 0);                      playload.PadingSize = buff[7];                        if (((CommonHeader) heder).Type == 0x02)                      {                          if (playload.JpgDataSize > 0)                          {                              var data = ReadBytes(s' playload.JpgDataSize);                              _liveViewData.FocusX = BitConverter.ToInt16(new byte[] { data[1]' data[0]}' 0);                              _liveViewData.FocusY = BitConverter.ToInt16(new byte[] { data[3]' data[2] }' 0); ;                              _liveViewData.FocusFrameXSize = BitConverter.ToInt16(new byte[] { data[5]' data[4] }' 0) - _liveViewData.FocusX;                              _liveViewData.FocusFrameYSize = BitConverter.ToInt16(new byte[] { data[7]' data[6] }' 0) - _liveViewData.FocusY ;                              _liveViewData.HaveFocusData = true;                              _liveViewData.Focused = data[9] != 0;                              _liveViewData.ImageWidth = 10000;                              _liveViewData.ImageHeight = 10000;                              _liveViewData.IsLiveViewRunning = true;                              Console.WriteLine(playload.JpgDataSize);                          }                      }                      else                      {                          _liveViewData.ImageData = ReadBytes(s' playload.JpgDataSize);                      }                        if (playload.PadingSize > 0)                          ReadBytes(s' playload.PadingSize);                      if (_shoulStopLiveView)                          break;                  }                  resp.Close();              }              catch (Exception ex)              {                  Log.Error("Unable to download stream "' ex);              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: try              {                  HttpWebResponse resp = (HttpWebResponse)req.EndGetResponse(asyncResult);                  Stream s = resp.GetResponseStream();                      while (true)                  {                      CommonHeader heder = new CommonHeader();                      //ByteArrayToStructure(s' ref heder);                      var buff = ReadBytes(s' 8);                      heder.StartByte = buff[0];                      heder.Type = buff[1];                      heder.SequenceNo = BitConverter.ToInt16(buff'2); ;                      heder.TimeStamp = BitConverter.ToInt32(buff' 4); ;                      PayloadHeader playload = new PayloadHeader();                      //ByteArrayToStructure(s' ref playload);                      buff = ReadBytes(s' 128);                        playload.StartCode = BitConverter.ToInt32(buff' 0);                      playload.JpgDataSize = BitConverter.ToUInt16(new byte[] { buff[6]' buff[5]' buff[4]' 0 }' 0);                      playload.PadingSize = buff[7];                        if (((CommonHeader) heder).Type == 0x02)                      {                          if (playload.JpgDataSize > 0)                          {                              var data = ReadBytes(s' playload.JpgDataSize);                              _liveViewData.FocusX = BitConverter.ToInt16(new byte[] { data[1]' data[0]}' 0);                              _liveViewData.FocusY = BitConverter.ToInt16(new byte[] { data[3]' data[2] }' 0); ;                              _liveViewData.FocusFrameXSize = BitConverter.ToInt16(new byte[] { data[5]' data[4] }' 0) - _liveViewData.FocusX;                              _liveViewData.FocusFrameYSize = BitConverter.ToInt16(new byte[] { data[7]' data[6] }' 0) - _liveViewData.FocusY ;                              _liveViewData.HaveFocusData = true;                              _liveViewData.Focused = data[9] != 0;                              _liveViewData.ImageWidth = 10000;                              _liveViewData.ImageHeight = 10000;                              _liveViewData.IsLiveViewRunning = true;                              Console.WriteLine(playload.JpgDataSize);                          }                      }                      else                      {                          _liveViewData.ImageData = ReadBytes(s' playload.JpgDataSize);                      }                        if (playload.PadingSize > 0)                          ReadBytes(s' playload.PadingSize);                      if (_shoulStopLiveView)                          break;                  }                  resp.Close();              }              catch (Exception ex)              {                  Log.Error("Unable to download stream "' ex);              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: try              {                  HttpWebResponse resp = (HttpWebResponse)req.EndGetResponse(asyncResult);                  Stream s = resp.GetResponseStream();                      while (true)                  {                      CommonHeader heder = new CommonHeader();                      //ByteArrayToStructure(s' ref heder);                      var buff = ReadBytes(s' 8);                      heder.StartByte = buff[0];                      heder.Type = buff[1];                      heder.SequenceNo = BitConverter.ToInt16(buff'2); ;                      heder.TimeStamp = BitConverter.ToInt32(buff' 4); ;                      PayloadHeader playload = new PayloadHeader();                      //ByteArrayToStructure(s' ref playload);                      buff = ReadBytes(s' 128);                        playload.StartCode = BitConverter.ToInt32(buff' 0);                      playload.JpgDataSize = BitConverter.ToUInt16(new byte[] { buff[6]' buff[5]' buff[4]' 0 }' 0);                      playload.PadingSize = buff[7];                        if (((CommonHeader) heder).Type == 0x02)                      {                          if (playload.JpgDataSize > 0)                          {                              var data = ReadBytes(s' playload.JpgDataSize);                              _liveViewData.FocusX = BitConverter.ToInt16(new byte[] { data[1]' data[0]}' 0);                              _liveViewData.FocusY = BitConverter.ToInt16(new byte[] { data[3]' data[2] }' 0); ;                              _liveViewData.FocusFrameXSize = BitConverter.ToInt16(new byte[] { data[5]' data[4] }' 0) - _liveViewData.FocusX;                              _liveViewData.FocusFrameYSize = BitConverter.ToInt16(new byte[] { data[7]' data[6] }' 0) - _liveViewData.FocusY ;                              _liveViewData.HaveFocusData = true;                              _liveViewData.Focused = data[9] != 0;                              _liveViewData.ImageWidth = 10000;                              _liveViewData.ImageHeight = 10000;                              _liveViewData.IsLiveViewRunning = true;                              Console.WriteLine(playload.JpgDataSize);                          }                      }                      else                      {                          _liveViewData.ImageData = ReadBytes(s' playload.JpgDataSize);                      }                        if (playload.PadingSize > 0)                          ReadBytes(s' playload.PadingSize);                      if (_shoulStopLiveView)                          break;                  }                  resp.Close();              }              catch (Exception ex)              {                  Log.Error("Unable to download stream "' ex);              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: try              {                  HttpWebResponse resp = (HttpWebResponse)req.EndGetResponse(asyncResult);                  Stream s = resp.GetResponseStream();                      while (true)                  {                      CommonHeader heder = new CommonHeader();                      //ByteArrayToStructure(s' ref heder);                      var buff = ReadBytes(s' 8);                      heder.StartByte = buff[0];                      heder.Type = buff[1];                      heder.SequenceNo = BitConverter.ToInt16(buff'2); ;                      heder.TimeStamp = BitConverter.ToInt32(buff' 4); ;                      PayloadHeader playload = new PayloadHeader();                      //ByteArrayToStructure(s' ref playload);                      buff = ReadBytes(s' 128);                        playload.StartCode = BitConverter.ToInt32(buff' 0);                      playload.JpgDataSize = BitConverter.ToUInt16(new byte[] { buff[6]' buff[5]' buff[4]' 0 }' 0);                      playload.PadingSize = buff[7];                        if (((CommonHeader) heder).Type == 0x02)                      {                          if (playload.JpgDataSize > 0)                          {                              var data = ReadBytes(s' playload.JpgDataSize);                              _liveViewData.FocusX = BitConverter.ToInt16(new byte[] { data[1]' data[0]}' 0);                              _liveViewData.FocusY = BitConverter.ToInt16(new byte[] { data[3]' data[2] }' 0); ;                              _liveViewData.FocusFrameXSize = BitConverter.ToInt16(new byte[] { data[5]' data[4] }' 0) - _liveViewData.FocusX;                              _liveViewData.FocusFrameYSize = BitConverter.ToInt16(new byte[] { data[7]' data[6] }' 0) - _liveViewData.FocusY ;                              _liveViewData.HaveFocusData = true;                              _liveViewData.Focused = data[9] != 0;                              _liveViewData.ImageWidth = 10000;                              _liveViewData.ImageHeight = 10000;                              _liveViewData.IsLiveViewRunning = true;                              Console.WriteLine(playload.JpgDataSize);                          }                      }                      else                      {                          _liveViewData.ImageData = ReadBytes(s' playload.JpgDataSize);                      }                        if (playload.PadingSize > 0)                          ReadBytes(s' playload.PadingSize);                      if (_shoulStopLiveView)                          break;                  }                  resp.Close();              }              catch (Exception ex)              {                  Log.Error("Unable to download stream "' ex);              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: try              {                  HttpWebResponse resp = (HttpWebResponse)req.EndGetResponse(asyncResult);                  Stream s = resp.GetResponseStream();                      while (true)                  {                      CommonHeader heder = new CommonHeader();                      //ByteArrayToStructure(s' ref heder);                      var buff = ReadBytes(s' 8);                      heder.StartByte = buff[0];                      heder.Type = buff[1];                      heder.SequenceNo = BitConverter.ToInt16(buff'2); ;                      heder.TimeStamp = BitConverter.ToInt32(buff' 4); ;                      PayloadHeader playload = new PayloadHeader();                      //ByteArrayToStructure(s' ref playload);                      buff = ReadBytes(s' 128);                        playload.StartCode = BitConverter.ToInt32(buff' 0);                      playload.JpgDataSize = BitConverter.ToUInt16(new byte[] { buff[6]' buff[5]' buff[4]' 0 }' 0);                      playload.PadingSize = buff[7];                        if (((CommonHeader) heder).Type == 0x02)                      {                          if (playload.JpgDataSize > 0)                          {                              var data = ReadBytes(s' playload.JpgDataSize);                              _liveViewData.FocusX = BitConverter.ToInt16(new byte[] { data[1]' data[0]}' 0);                              _liveViewData.FocusY = BitConverter.ToInt16(new byte[] { data[3]' data[2] }' 0); ;                              _liveViewData.FocusFrameXSize = BitConverter.ToInt16(new byte[] { data[5]' data[4] }' 0) - _liveViewData.FocusX;                              _liveViewData.FocusFrameYSize = BitConverter.ToInt16(new byte[] { data[7]' data[6] }' 0) - _liveViewData.FocusY ;                              _liveViewData.HaveFocusData = true;                              _liveViewData.Focused = data[9] != 0;                              _liveViewData.ImageWidth = 10000;                              _liveViewData.ImageHeight = 10000;                              _liveViewData.IsLiveViewRunning = true;                              Console.WriteLine(playload.JpgDataSize);                          }                      }                      else                      {                          _liveViewData.ImageData = ReadBytes(s' playload.JpgDataSize);                      }                        if (playload.PadingSize > 0)                          ReadBytes(s' playload.PadingSize);                      if (_shoulStopLiveView)                          break;                  }                  resp.Close();              }              catch (Exception ex)              {                  Log.Error("Unable to download stream "' ex);              }
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: try              {                  HttpWebResponse resp = (HttpWebResponse)req.EndGetResponse(asyncResult);                  Stream s = resp.GetResponseStream();                      while (true)                  {                      CommonHeader heder = new CommonHeader();                      //ByteArrayToStructure(s' ref heder);                      var buff = ReadBytes(s' 8);                      heder.StartByte = buff[0];                      heder.Type = buff[1];                      heder.SequenceNo = BitConverter.ToInt16(buff'2); ;                      heder.TimeStamp = BitConverter.ToInt32(buff' 4); ;                      PayloadHeader playload = new PayloadHeader();                      //ByteArrayToStructure(s' ref playload);                      buff = ReadBytes(s' 128);                        playload.StartCode = BitConverter.ToInt32(buff' 0);                      playload.JpgDataSize = BitConverter.ToUInt16(new byte[] { buff[6]' buff[5]' buff[4]' 0 }' 0);                      playload.PadingSize = buff[7];                        if (((CommonHeader) heder).Type == 0x02)                      {                          if (playload.JpgDataSize > 0)                          {                              var data = ReadBytes(s' playload.JpgDataSize);                              _liveViewData.FocusX = BitConverter.ToInt16(new byte[] { data[1]' data[0]}' 0);                              _liveViewData.FocusY = BitConverter.ToInt16(new byte[] { data[3]' data[2] }' 0); ;                              _liveViewData.FocusFrameXSize = BitConverter.ToInt16(new byte[] { data[5]' data[4] }' 0) - _liveViewData.FocusX;                              _liveViewData.FocusFrameYSize = BitConverter.ToInt16(new byte[] { data[7]' data[6] }' 0) - _liveViewData.FocusY ;                              _liveViewData.HaveFocusData = true;                              _liveViewData.Focused = data[9] != 0;                              _liveViewData.ImageWidth = 10000;                              _liveViewData.ImageHeight = 10000;                              _liveViewData.IsLiveViewRunning = true;                              Console.WriteLine(playload.JpgDataSize);                          }                      }                      else                      {                          _liveViewData.ImageData = ReadBytes(s' playload.JpgDataSize);                      }                        if (playload.PadingSize > 0)                          ReadBytes(s' playload.PadingSize);                      if (_shoulStopLiveView)                          break;                  }                  resp.Close();              }              catch (Exception ex)              {                  Log.Error("Unable to download stream "' ex);              }
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,ExecuteReadBigData,The following statement contains a magic number: lock (_syncRoot)              {                  ReconnectIfNeeded();                  DataBlockContainer data;                  var res = new MTPDataResponse();                  _client.Write(new CommandBlockContainer((int)code' parameters));                  int len = _client.ReadInt();                  Container resp = _client.ReadContainer(callback);                  if (resp.Header.Length >= len - 4)                  {                      return new MTPDataResponse() { ErrorCode = (uint)resp.Header.Code };                  }                    data = (DataBlockContainer)resp;                  resp = _client.ReadContainer();                  return new MTPDataResponse() { Data = data.Payload' ErrorCode = (uint)data.Header.Code };              }
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,ExecuteReadData,The following statement contains a magic number: lock (_syncRoot)              {                  ReconnectIfNeeded();                  DataBlockContainer data;                  var res = new MTPDataResponse();                  _client.Write(new CommandBlockContainer((int) code' parameters));                  int len = _client.ReadInt();                  Container resp = _client.ReadContainer();                  if (resp.Header.Length >= len - 4)                  {                      return new MTPDataResponse() {ErrorCode = (uint) resp.Header.Code};                  }                    data = (DataBlockContainer) resp;                  resp = _client.ReadContainer();                  return new MTPDataResponse() {Data = data.Payload' ErrorCode = (uint) data.Header.Code};              }
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,ExecuteWithNoData,The following statement contains a magic number: lock (_syncRoot)              {                  ReconnectIfNeeded();                  _client.Write(new CommandBlockContainer((int) code' parameters));                  int len = _client.ReadInt();                  Container resp = _client.ReadContainer();                  if (resp.Header.Length >= len - 4)                  {                      return (uint) resp.Header.Code;                  }                    resp = _client.ReadContainer();                  return (uint) resp.Header.Code;              }
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,ExecuteWriteData,The following statement contains a magic number: lock (_syncRoot)              {                  ReconnectIfNeeded();                  _client.Write(new CommandBlockContainer((int)code' parameters)' new DataBlockContainer((int)code' data));                  int len = _client.ReadInt();                  Container resp = _client.ReadContainer();                  if (resp.Header.Length >= len - 4)                  {                      return (uint)resp.Header.Code;                  }                    resp = _client.ReadContainer();                  return (uint)resp.Header.Code;              }
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: int index = 2 + 4 + 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: int index = 2 + 4 + 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: int index = 2 + 4 + 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += vendorDescCount * 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 3;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: for (int i = 0; i < comandsCount; i++)              {                  index += 2;              }
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: for (int i = 0; i < eventcount; i++)              {                  index += 2;              }
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: for (int i = 0; i < propertycount; i++)              {                  index += 2;              }
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: for (int i = 0; i < formatscount; i++)              {                  index += 2;              }
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: for (int i = 0; i < imageformatscount; i++)              {                  index += 2;              }
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: int strlen1 = res.Data[index]*2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: Manufacturer = Encoding.Unicode.GetString(res.Data' index' strlen1-2);
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: int strlen2 = res.Data[index] * 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: Model = Encoding.Unicode.GetString(res.Data' index' strlen2-2);
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: int strlen3 = res.Data[index] * 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: int strlen4 = res.Data[index] * 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: SerialNumber = Encoding.Unicode.GetString(res.Data' index' strlen4-2);
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: int index = 2 + 4 + 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: int index = 2 + 4 + 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: int index = 2 + 4 + 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += vendorDescCount * 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 3;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: for (int i = 0; i < comandsCount; i++)              {                  index += 2;              }
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: for (int i = 0; i < eventcount; i++)              {                  index += 2;              }
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: for (int i = 0; i < propertycount; i++)              {                  index += 2;              }
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: for (int i = 0; i < formatscount; i++)              {                  index += 2;              }
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: for (int i = 0; i < imageformatscount; i++)              {                  index += 2;              }
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: int strlen1 = res.Data[index] * 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: Manufacturer = Encoding.Unicode.GetString(res.Data' index' strlen1 - 2);
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: int strlen2 = res.Data[index] * 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: Model = Encoding.Unicode.GetString(res.Data' index' strlen2 - 2);
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: int strlen3 = res.Data[index] * 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: int strlen4 = res.Data[index] * 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: SerialNumber = Encoding.Unicode.GetString(res.Data' index' strlen4 - 2);
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,ExecuteWriteData,The following statement contains a magic number: lock (_locker)              {                  var cmd = new CmdRequest(code'2) {Parameters = parameters};                  _client.Write(cmd);                  _client.Write(new StartDataPacket() {Data = data' TransactionID = cmd.TransactionID});                    var res1 = _client.Read();                    var response = res1 as CmdResponse;                  if (response != null)                  {                      return (uint) response.Code;                  }              }
Magic Number,CameraControl.Devices.TransferProtocol,YiCameraProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\YiCameraProtocol.cs,Connect,The following statement contains a magic number: if (m_sock != null && m_sock.Connected)              {                  m_sock.Shutdown(SocketShutdown.Both);                  Thread.Sleep(10);                  m_sock.Close();              }
Magic Number,CameraControl.Devices.TransferProtocol,YiCameraProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\YiCameraProtocol.cs,Connect,The following statement contains a magic number: while (!m_sock.Connected)              {                  Thread.Sleep(50);                  if ((DateTime.Now - t).TotalMilliseconds > 3000)                      throw new Exception("Connection timeout.");              }
Magic Number,CameraControl.Devices.TransferProtocol,YiCameraProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\YiCameraProtocol.cs,Connect,The following statement contains a magic number: while (!m_sock.Connected)              {                  Thread.Sleep(50);                  if ((DateTime.Now - t).TotalMilliseconds > 3000)                      throw new Exception("Connection timeout.");              }
Magic Number,CameraControl.Devices.TransferProtocol,YiCameraProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\YiCameraProtocol.cs,Connect,The following statement contains a magic number: SendCommand(257);
Magic Number,CameraControl.Devices.TransferProtocol,YiCameraProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\YiCameraProtocol.cs,Connect,The following statement contains a magic number: while (string.IsNullOrEmpty(Token))              {                  Thread.Sleep(50);                  if ((DateTime.Now - t).TotalMilliseconds > 3000)                      throw new Exception("Unable to get token.");                }
Magic Number,CameraControl.Devices.TransferProtocol,YiCameraProtocol,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\YiCameraProtocol.cs,Connect,The following statement contains a magic number: while (string.IsNullOrEmpty(Token))              {                  Thread.Sleep(50);                  if ((DateTime.Now - t).TotalMilliseconds > 3000)                      throw new Exception("Unable to get token.");                }
Magic Number,ddserverTest,ResponseBlockContainer,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ResponseBlockContainer.cs,readParameters,The following statement contains a magic number: if ((pLength%4) != 0)                  throw new InvalidContainerException("Response payload length must by multiplier of 4");
Magic Number,ddserverTest,ResponseBlockContainer,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ResponseBlockContainer.cs,readParameters,The following statement contains a magic number: if (pLength > 20)                  throw new InvalidContainerException("Response datasets may have at most five parameters");
Magic Number,ddserverTest,ResponseBlockContainer,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ResponseBlockContainer.cs,readParameters,The following statement contains a magic number: Parameters = new uint[pLength/4];
Magic Number,ddserverTest,ResponseBlockContainer,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ResponseBlockContainer.cs,readParameters,The following statement contains a magic number: while (i < Parameters.Length)              {                  Parameters[i++] =                      (uint)                      (stream.ReadByte() | (stream.ReadByte() << 8) | (stream.ReadByte() << 16) |                       (stream.ReadByte() << 24));              }
Magic Number,ddserverTest,ResponseBlockContainer,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ResponseBlockContainer.cs,readParameters,The following statement contains a magic number: while (i < Parameters.Length)              {                  Parameters[i++] =                      (uint)                      (stream.ReadByte() | (stream.ReadByte() << 8) | (stream.ReadByte() << 16) |                       (stream.ReadByte() << 24));              }
Magic Number,ddserverTest,ResponseBlockContainer,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ResponseBlockContainer.cs,readParameters,The following statement contains a magic number: while (i < Parameters.Length)              {                  Parameters[i++] =                      (uint)                      (stream.ReadByte() | (stream.ReadByte() << 8) | (stream.ReadByte() << 16) |                       (stream.ReadByte() << 24));              }
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ContainerHeader,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ContainerHeader.cs,ContainerHeader,The following statement contains a magic number: Length = readByte(stream) | (readByte(stream) << 8) | (readByte(stream) << 16) | (readByte(stream) << 24);
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ContainerHeader,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ContainerHeader.cs,ContainerHeader,The following statement contains a magic number: Length = readByte(stream) | (readByte(stream) << 8) | (readByte(stream) << 16) | (readByte(stream) << 24);
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ContainerHeader,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ContainerHeader.cs,ContainerHeader,The following statement contains a magic number: Length = readByte(stream) | (readByte(stream) << 8) | (readByte(stream) << 16) | (readByte(stream) << 24);
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ContainerHeader,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ContainerHeader.cs,ContainerHeader,The following statement contains a magic number: Code = readByte(stream) | (readByte(stream) << 8);
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ContainerHeader,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ContainerHeader.cs,ContainerHeader,The following statement contains a magic number: TransactionID = readByte(stream) | (readByte(stream) << 8) | (readByte(stream) << 16) |                              (readByte(stream) << 24);
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ContainerHeader,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ContainerHeader.cs,ContainerHeader,The following statement contains a magic number: TransactionID = readByte(stream) | (readByte(stream) << 8) | (readByte(stream) << 16) |                              (readByte(stream) << 24);
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ContainerHeader,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ContainerHeader.cs,ContainerHeader,The following statement contains a magic number: TransactionID = readByte(stream) | (readByte(stream) << 8) | (readByte(stream) << 16) |                              (readByte(stream) << 24);
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ContainerHeader,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ContainerHeader.cs,Write,The following statement contains a magic number: s.WriteByte((byte) (0xff & (Length >> 8)));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ContainerHeader,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ContainerHeader.cs,Write,The following statement contains a magic number: s.WriteByte((byte) (0xff & (Length >> 16)));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ContainerHeader,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ContainerHeader.cs,Write,The following statement contains a magic number: s.WriteByte((byte) (0xff & (Length >> 24)));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ContainerHeader,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ContainerHeader.cs,Write,The following statement contains a magic number: s.WriteByte((byte) (0xff & (Code >> 8)));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ContainerHeader,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ContainerHeader.cs,Write,The following statement contains a magic number: s.WriteByte((byte) (0xff & (TransactionID >> 8)));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ContainerHeader,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ContainerHeader.cs,Write,The following statement contains a magic number: s.WriteByte((byte) (0xff & (TransactionID >> 16)));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ContainerHeader,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ContainerHeader.cs,Write,The following statement contains a magic number: s.WriteByte((byte) (0xff & (TransactionID >> 24)));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,ReadInt,The following statement contains a magic number: return _inerStream.ReadByte() | (_inerStream.ReadByte() << 8) | (_inerStream.ReadByte() << 16) |                     (_inerStream.ReadByte() << 24);
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,ReadInt,The following statement contains a magic number: return _inerStream.ReadByte() | (_inerStream.ReadByte() << 8) | (_inerStream.ReadByte() << 16) |                     (_inerStream.ReadByte() << 24);
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,ReadInt,The following statement contains a magic number: return _inerStream.ReadByte() | (_inerStream.ReadByte() << 8) | (_inerStream.ReadByte() << 16) |                     (_inerStream.ReadByte() << 24);
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,ReadPacket,The following statement contains a magic number: var buff = new byte[length - 4];
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,ReadPacket,The following statement contains a magic number: _inerStream.Read(buff' 0' length - 4);
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,Write,The following statement contains a magic number: using (var ms = new MemoryStream())              {                  int totalsize = container.Header.Length + 4;                  ms.WriteByte((byte)(0xff & totalsize));                  ms.WriteByte((byte)(0xff & (totalsize >> 8)));                  ms.WriteByte((byte)(0xff & (totalsize >> 16)));                  ms.WriteByte((byte)(0xff & (totalsize >> 24)));                  container.Write(ms);                  _inerStream.Write(ms.ToArray()' 0' (int) ms.Length);              }
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,Write,The following statement contains a magic number: using (var ms = new MemoryStream())              {                  int totalsize = container.Header.Length + 4;                  ms.WriteByte((byte)(0xff & totalsize));                  ms.WriteByte((byte)(0xff & (totalsize >> 8)));                  ms.WriteByte((byte)(0xff & (totalsize >> 16)));                  ms.WriteByte((byte)(0xff & (totalsize >> 24)));                  container.Write(ms);                  _inerStream.Write(ms.ToArray()' 0' (int) ms.Length);              }
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,Write,The following statement contains a magic number: using (var ms = new MemoryStream())              {                  int totalsize = container.Header.Length + 4;                  ms.WriteByte((byte)(0xff & totalsize));                  ms.WriteByte((byte)(0xff & (totalsize >> 8)));                  ms.WriteByte((byte)(0xff & (totalsize >> 16)));                  ms.WriteByte((byte)(0xff & (totalsize >> 24)));                  container.Write(ms);                  _inerStream.Write(ms.ToArray()' 0' (int) ms.Length);              }
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,Write,The following statement contains a magic number: using (var ms = new MemoryStream())              {                  int totalsize = container.Header.Length + 4;                  ms.WriteByte((byte)(0xff & totalsize));                  ms.WriteByte((byte)(0xff & (totalsize >> 8)));                  ms.WriteByte((byte)(0xff & (totalsize >> 16)));                  ms.WriteByte((byte)(0xff & (totalsize >> 24)));                  container.Write(ms);                  _inerStream.Write(ms.ToArray()' 0' (int) ms.Length);              }
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,Write,The following statement contains a magic number: using (var ms = new MemoryStream())              {                  int totalsize = container1.Header.Length + container2.Header.Length + 4;                  ms.WriteByte((byte)(0xff & totalsize));                  ms.WriteByte((byte)(0xff & (totalsize >> 8)));                  ms.WriteByte((byte)(0xff & (totalsize >> 16)));                  ms.WriteByte((byte)(0xff & (totalsize >> 24)));                  container1.Write(ms);                  container2.Write(ms);                  _inerStream.Write(ms.ToArray()' 0' (int)ms.Length);                  _inerStream.Flush();              }
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,Write,The following statement contains a magic number: using (var ms = new MemoryStream())              {                  int totalsize = container1.Header.Length + container2.Header.Length + 4;                  ms.WriteByte((byte)(0xff & totalsize));                  ms.WriteByte((byte)(0xff & (totalsize >> 8)));                  ms.WriteByte((byte)(0xff & (totalsize >> 16)));                  ms.WriteByte((byte)(0xff & (totalsize >> 24)));                  container1.Write(ms);                  container2.Write(ms);                  _inerStream.Write(ms.ToArray()' 0' (int)ms.Length);                  _inerStream.Flush();              }
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,Write,The following statement contains a magic number: using (var ms = new MemoryStream())              {                  int totalsize = container1.Header.Length + container2.Header.Length + 4;                  ms.WriteByte((byte)(0xff & totalsize));                  ms.WriteByte((byte)(0xff & (totalsize >> 8)));                  ms.WriteByte((byte)(0xff & (totalsize >> 16)));                  ms.WriteByte((byte)(0xff & (totalsize >> 24)));                  container1.Write(ms);                  container2.Write(ms);                  _inerStream.Write(ms.ToArray()' 0' (int)ms.Length);                  _inerStream.Flush();              }
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,Write,The following statement contains a magic number: using (var ms = new MemoryStream())              {                  int totalsize = container1.Header.Length + container2.Header.Length + 4;                  ms.WriteByte((byte)(0xff & totalsize));                  ms.WriteByte((byte)(0xff & (totalsize >> 8)));                  ms.WriteByte((byte)(0xff & (totalsize >> 16)));                  ms.WriteByte((byte)(0xff & (totalsize >> 24)));                  container1.Write(ms);                  container2.Write(ms);                  _inerStream.Write(ms.ToArray()' 0' (int)ms.Length);                  _inerStream.Flush();              }
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,GetDevices,The following statement contains a magic number: Write(new CommandBlockContainer(0002));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,GetDevices,The following statement contains a magic number: var buff = new byte[6];
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,GetDevices,The following statement contains a magic number: _inerStream.Read(buff' 0' 4);
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,GetDevices,The following statement contains a magic number: int totallegth = buff[3];
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,GetDevices,The following statement contains a magic number: if (dataBlockContainer != null)              {                  int index = 0;                  int devcount = (dataBlockContainer.Payload[index] | (dataBlockContainer.Payload[index + 1] << 8));                  for (int i = 0; i < devcount; i++)                  {                      res.Add(new DdServerDevice(dataBlockContainer.Payload' index + 2));                  }                  Container cc = ReadContainer();                  _inerStream.Read(buff' 0' 4);              }
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,GetDevices,The following statement contains a magic number: if (dataBlockContainer != null)              {                  int index = 0;                  int devcount = (dataBlockContainer.Payload[index] | (dataBlockContainer.Payload[index + 1] << 8));                  for (int i = 0; i < devcount; i++)                  {                      res.Add(new DdServerDevice(dataBlockContainer.Payload' index + 2));                  }                  Container cc = ReadContainer();                  _inerStream.Read(buff' 0' 4);              }
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,GetDevices,The following statement contains a magic number: if (dataBlockContainer != null)              {                  int index = 0;                  int devcount = (dataBlockContainer.Payload[index] | (dataBlockContainer.Payload[index + 1] << 8));                  for (int i = 0; i < devcount; i++)                  {                      res.Add(new DdServerDevice(dataBlockContainer.Payload' index + 2));                  }                  Container cc = ReadContainer();                  _inerStream.Read(buff' 0' 4);              }
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdServerDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdServerDevice.cs,DdServerDevice,The following statement contains a magic number: VendorId = (data[index] | (data[index + 1] << 8));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdServerDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdServerDevice.cs,DdServerDevice,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdServerDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdServerDevice.cs,DdServerDevice,The following statement contains a magic number: ProductId = (data[index] | (data[index + 1] << 8));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdServerDevice,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdServerDevice.cs,DdServerDevice,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ParameterContainer,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ParameterContainer.cs,WritePayload,The following statement contains a magic number: if (payloadLength > 0)              {                  for (int i = 0; i < Parameters.Length; i++)                  {                      s.WriteByte((byte) (0xff & Parameters[i]));                      s.WriteByte((byte) (0xff & (Parameters[i] >> 8)));                      s.WriteByte((byte) (0xff & (Parameters[i] >> 16)));                      s.WriteByte((byte) (0xff & (Parameters[i] >> 24)));                  }              }
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ParameterContainer,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ParameterContainer.cs,WritePayload,The following statement contains a magic number: if (payloadLength > 0)              {                  for (int i = 0; i < Parameters.Length; i++)                  {                      s.WriteByte((byte) (0xff & Parameters[i]));                      s.WriteByte((byte) (0xff & (Parameters[i] >> 8)));                      s.WriteByte((byte) (0xff & (Parameters[i] >> 16)));                      s.WriteByte((byte) (0xff & (Parameters[i] >> 24)));                  }              }
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ParameterContainer,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ParameterContainer.cs,WritePayload,The following statement contains a magic number: if (payloadLength > 0)              {                  for (int i = 0; i < Parameters.Length; i++)                  {                      s.WriteByte((byte) (0xff & Parameters[i]));                      s.WriteByte((byte) (0xff & (Parameters[i] >> 8)));                      s.WriteByte((byte) (0xff & (Parameters[i] >> 16)));                      s.WriteByte((byte) (0xff & (Parameters[i] >> 24)));                  }              }
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,BaseCmd,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\BaseCmd.cs,WriteInt,The following statement contains a magic number: s.WriteByte((byte)(0xff & (val >> 8)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,BaseCmd,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\BaseCmd.cs,WriteInt,The following statement contains a magic number: s.WriteByte((byte)(0xff & (val >> 16)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,BaseCmd,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\BaseCmd.cs,WriteInt,The following statement contains a magic number: s.WriteByte((byte)(0xff & (val >> 24)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdRequest,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdRequest.cs,Write,The following statement contains a magic number: Header.Length = (uint) (8 + 4 + 2 + 4 + (Parameters != null ? (Parameters.Length*4) : 0));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdRequest,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdRequest.cs,Write,The following statement contains a magic number: Header.Length = (uint) (8 + 4 + 2 + 4 + (Parameters != null ? (Parameters.Length*4) : 0));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdRequest,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdRequest.cs,Write,The following statement contains a magic number: Header.Length = (uint) (8 + 4 + 2 + 4 + (Parameters != null ? (Parameters.Length*4) : 0));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdRequest,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdRequest.cs,Write,The following statement contains a magic number: Header.Length = (uint) (8 + 4 + 2 + 4 + (Parameters != null ? (Parameters.Length*4) : 0));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdRequest,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdRequest.cs,Write,The following statement contains a magic number: Header.Length = (uint) (8 + 4 + 2 + 4 + (Parameters != null ? (Parameters.Length*4) : 0));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdRequest,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdRequest.cs,Write,The following statement contains a magic number: s.WriteByte((byte) (0xff & (this.Code >> 8)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdRequest,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdRequest.cs,Read,The following statement contains a magic number: this.Code = (uint) (readByte(s) | (readByte(s) << 8));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdRequest,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdRequest.cs,Read,The following statement contains a magic number: this.TransactionID = (uint) (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdRequest,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdRequest.cs,Read,The following statement contains a magic number: this.TransactionID = (uint) (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdRequest,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdRequest.cs,Read,The following statement contains a magic number: this.TransactionID = (uint) (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdRequest,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdRequest.cs,Read,The following statement contains a magic number: s.Read(b' 0' (int) (Header.Length - (8 + 2 + 4)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdRequest,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdRequest.cs,Read,The following statement contains a magic number: s.Read(b' 0' (int) (Header.Length - (8 + 2 + 4)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdRequest,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdRequest.cs,Read,The following statement contains a magic number: s.Read(b' 0' (int) (Header.Length - (8 + 2 + 4)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdResponse,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdResponse.cs,Read,The following statement contains a magic number: this.Code = readByte(s) | (readByte(s) << 8);
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdResponse,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdResponse.cs,Read,The following statement contains a magic number: this.TransactionID = (uint) (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdResponse,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdResponse.cs,Read,The following statement contains a magic number: this.TransactionID = (uint) (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdResponse,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdResponse.cs,Read,The following statement contains a magic number: this.TransactionID = (uint) (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdResponse,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdResponse.cs,Read,The following statement contains a magic number: if (Header.Length > 14)              {                  List<uint> vals = new List<uint>();                  for (int i = 0; i < Header.Length - (8 + 2 + 4)/4; i++)                  {                      vals.Add((uint) (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24)));                  }                  Parameters = vals.ToArray();              }
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdResponse,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdResponse.cs,Read,The following statement contains a magic number: if (Header.Length > 14)              {                  List<uint> vals = new List<uint>();                  for (int i = 0; i < Header.Length - (8 + 2 + 4)/4; i++)                  {                      vals.Add((uint) (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24)));                  }                  Parameters = vals.ToArray();              }
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdResponse,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdResponse.cs,Read,The following statement contains a magic number: if (Header.Length > 14)              {                  List<uint> vals = new List<uint>();                  for (int i = 0; i < Header.Length - (8 + 2 + 4)/4; i++)                  {                      vals.Add((uint) (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24)));                  }                  Parameters = vals.ToArray();              }
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdResponse,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdResponse.cs,Read,The following statement contains a magic number: if (Header.Length > 14)              {                  List<uint> vals = new List<uint>();                  for (int i = 0; i < Header.Length - (8 + 2 + 4)/4; i++)                  {                      vals.Add((uint) (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24)));                  }                  Parameters = vals.ToArray();              }
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdResponse,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdResponse.cs,Read,The following statement contains a magic number: if (Header.Length > 14)              {                  List<uint> vals = new List<uint>();                  for (int i = 0; i < Header.Length - (8 + 2 + 4)/4; i++)                  {                      vals.Add((uint) (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24)));                  }                  Parameters = vals.ToArray();              }
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdResponse,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdResponse.cs,Read,The following statement contains a magic number: if (Header.Length > 14)              {                  List<uint> vals = new List<uint>();                  for (int i = 0; i < Header.Length - (8 + 2 + 4)/4; i++)                  {                      vals.Add((uint) (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24)));                  }                  Parameters = vals.ToArray();              }
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdResponse,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdResponse.cs,Read,The following statement contains a magic number: if (Header.Length > 14)              {                  List<uint> vals = new List<uint>();                  for (int i = 0; i < Header.Length - (8 + 2 + 4)/4; i++)                  {                      vals.Add((uint) (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24)));                  }                  Parameters = vals.ToArray();              }
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdResponse,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdResponse.cs,Read,The following statement contains a magic number: if (Header.Length > 14)              {                  List<uint> vals = new List<uint>();                  for (int i = 0; i < Header.Length - (8 + 2 + 4)/4; i++)                  {                      vals.Add((uint) (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24)));                  }                  Parameters = vals.ToArray();              }
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,DataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\DataPacket.cs,Read,The following statement contains a magic number: TransactionID = (uint)(readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,DataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\DataPacket.cs,Read,The following statement contains a magic number: TransactionID = (uint)(readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,DataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\DataPacket.cs,Read,The following statement contains a magic number: TransactionID = (uint)(readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,DataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\DataPacket.cs,Read,The following statement contains a magic number: Data = new byte[Header.Length - 8 - 4];
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,DataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\DataPacket.cs,Read,The following statement contains a magic number: Data = new byte[Header.Length - 8 - 4];
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,DataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\DataPacket.cs,Read,The following statement contains a magic number: s.Read(Data' 0' (int) (Header.Length - 8 - 4));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,DataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\DataPacket.cs,Read,The following statement contains a magic number: s.Read(Data' 0' (int) (Header.Length - 8 - 4));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,EndDataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\EndDataPacket.cs,Read,The following statement contains a magic number: this.TransactionID = (uint)(readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,EndDataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\EndDataPacket.cs,Read,The following statement contains a magic number: this.TransactionID = (uint)(readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,EndDataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\EndDataPacket.cs,Read,The following statement contains a magic number: this.TransactionID = (uint)(readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,EndDataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\EndDataPacket.cs,Read,The following statement contains a magic number: Data = new byte[Header.Length - 8 - 4];
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,EndDataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\EndDataPacket.cs,Read,The following statement contains a magic number: Data = new byte[Header.Length - 8 - 4];
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,EndDataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\EndDataPacket.cs,Read,The following statement contains a magic number: while (numBytes != Header.Length-8-4)              {                  numBytes += s.Read(Data' numBytes' (int)(Header.Length - 8 - 4 - numBytes));// payload.Read(Payload' numBytes' Header.PayloadLength - numBytes);                  if (callback != null)                      callback((int) Header.Length' numBytes);              }
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,EndDataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\EndDataPacket.cs,Read,The following statement contains a magic number: while (numBytes != Header.Length-8-4)              {                  numBytes += s.Read(Data' numBytes' (int)(Header.Length - 8 - 4 - numBytes));// payload.Read(Payload' numBytes' Header.PayloadLength - numBytes);                  if (callback != null)                      callback((int) Header.Length' numBytes);              }
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,EndDataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\EndDataPacket.cs,Read,The following statement contains a magic number: while (numBytes != Header.Length-8-4)              {                  numBytes += s.Read(Data' numBytes' (int)(Header.Length - 8 - 4 - numBytes));// payload.Read(Payload' numBytes' Header.PayloadLength - numBytes);                  if (callback != null)                      callback((int) Header.Length' numBytes);              }
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,EndDataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\EndDataPacket.cs,Read,The following statement contains a magic number: while (numBytes != Header.Length-8-4)              {                  numBytes += s.Read(Data' numBytes' (int)(Header.Length - 8 - 4 - numBytes));// payload.Read(Payload' numBytes' Header.PayloadLength - numBytes);                  if (callback != null)                      callback((int) Header.Length' numBytes);              }
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,InitCommandAck,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\InitCommandAck.cs,Read,The following statement contains a magic number: SessionId = (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,InitCommandAck,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\InitCommandAck.cs,Read,The following statement contains a magic number: SessionId = (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,InitCommandAck,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\InitCommandAck.cs,Read,The following statement contains a magic number: SessionId = (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,InitCommandAck,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\InitCommandAck.cs,Read,The following statement contains a magic number: s.Read(b' 0' (int) (Header.Length - (8 + 4)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,InitCommandAck,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\InitCommandAck.cs,Read,The following statement contains a magic number: s.Read(b' 0' (int) (Header.Length - (8 + 4)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,InitCommandRequest,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\InitCommandRequest.cs,Write,The following statement contains a magic number: Header.Length = (uint) (8 + 16 + ((Name.Length + 1)*2)+4);
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,InitCommandRequest,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\InitCommandRequest.cs,Write,The following statement contains a magic number: Header.Length = (uint) (8 + 16 + ((Name.Length + 1)*2)+4);
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,InitCommandRequest,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\InitCommandRequest.cs,Write,The following statement contains a magic number: Header.Length = (uint) (8 + 16 + ((Name.Length + 1)*2)+4);
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,InitCommandRequest,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\InitCommandRequest.cs,Write,The following statement contains a magic number: Header.Length = (uint) (8 + 16 + ((Name.Length + 1)*2)+4);
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,InitCommandRequest,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\InitCommandRequest.cs,Write,The following statement contains a magic number: s.Write(Guid.ToByteArray()' 0' 16);
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,InitCommandRequest,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\InitCommandRequest.cs,Write,The following statement contains a magic number: s.Write(Encoding.Unicode.GetBytes(Name)' 0' Name.Length*2);
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,InitEventRequest,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\InitEventRequest.cs,InitEventRequest,The following statement contains a magic number: Header.Length = 8 + 4;
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,InitEventRequest,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\InitEventRequest.cs,InitEventRequest,The following statement contains a magic number: Header.Length = 8 + 4;
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpClient,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpClient.cs,Open,The following statement contains a magic number: try              {                  var header = new PtpIpHeader();                    _client = new TcpClient();                  //_client.SendTimeout = 0;                  //_client.ReceiveTimeout = 0;                  _client.Connect(ip' port);                  _inerStream = _client.GetStream();                    Write(new InitCommandRequest());                  InitCommandAck res = (InitCommandAck)Read();                    _eventclient = new TcpClient();                  _eventclient.Connect(ip' port);                    _eventinerStream = _eventclient.GetStream();                    WriteEvent(new InitEventRequest(res.SessionId));                  header.Read(_eventinerStream);                    header.Length = 8;                  header.Type = (uint) PtpIpContainerType.Ping;                  WriteEvent(header);                                   header.Read(_eventinerStream);                }              catch (Exception e)              {                  Log.Error(e);                  return false;              }
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpClient,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpClient.cs,ReadInt,The following statement contains a magic number: return _inerStream.ReadByte() | (_inerStream.ReadByte() << 8) | (_inerStream.ReadByte() << 16) | (_inerStream.ReadByte() << 24);
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpClient,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpClient.cs,ReadInt,The following statement contains a magic number: return _inerStream.ReadByte() | (_inerStream.ReadByte() << 8) | (_inerStream.ReadByte() << 16) | (_inerStream.ReadByte() << 24);
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpClient,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpClient.cs,ReadInt,The following statement contains a magic number: return _inerStream.ReadByte() | (_inerStream.ReadByte() << 8) | (_inerStream.ReadByte() << 16) | (_inerStream.ReadByte() << 24);
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpClient,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpClient.cs,ReadPacket,The following statement contains a magic number: byte[] buff = new byte[length - 4];
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpClient,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpClient.cs,ReadPacket,The following statement contains a magic number: _inerStream.Read(buff' 0' length - 4);
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpHeader,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpHeader.cs,Write,The following statement contains a magic number: s.WriteByte((byte)(0xff & (this.Length  >> 8)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpHeader,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpHeader.cs,Write,The following statement contains a magic number: s.WriteByte((byte)(0xff & (this.Length  >> 16)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpHeader,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpHeader.cs,Write,The following statement contains a magic number: s.WriteByte((byte)(0xff & (this.Length  >> 24)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpHeader,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpHeader.cs,Write,The following statement contains a magic number: s.WriteByte((byte)(0xff & (this.Type  >> 8)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpHeader,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpHeader.cs,Write,The following statement contains a magic number: s.WriteByte((byte)(0xff & (this.Type  >> 16)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpHeader,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpHeader.cs,Write,The following statement contains a magic number: s.WriteByte((byte)(0xff & (this.Type  >> 24)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpHeader,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpHeader.cs,Read,The following statement contains a magic number: Length = (uint) (s.ReadByte() | (s.ReadByte() << 8) | (s.ReadByte() << 16) | (s.ReadByte() << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpHeader,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpHeader.cs,Read,The following statement contains a magic number: Length = (uint) (s.ReadByte() | (s.ReadByte() << 8) | (s.ReadByte() << 16) | (s.ReadByte() << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpHeader,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpHeader.cs,Read,The following statement contains a magic number: Length = (uint) (s.ReadByte() | (s.ReadByte() << 8) | (s.ReadByte() << 16) | (s.ReadByte() << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpHeader,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpHeader.cs,Read,The following statement contains a magic number: Type = (uint)(s.ReadByte() | (s.ReadByte() << 8) | (s.ReadByte() << 16) | (s.ReadByte() << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpHeader,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpHeader.cs,Read,The following statement contains a magic number: Type = (uint)(s.ReadByte() | (s.ReadByte() << 8) | (s.ReadByte() << 16) | (s.ReadByte() << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpHeader,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpHeader.cs,Read,The following statement contains a magic number: Type = (uint)(s.ReadByte() | (s.ReadByte() << 8) | (s.ReadByte() << 16) | (s.ReadByte() << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,StartDataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\StartDataPacket.cs,Read,The following statement contains a magic number: this.TransactionID = (uint)(readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,StartDataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\StartDataPacket.cs,Read,The following statement contains a magic number: this.TransactionID = (uint)(readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,StartDataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\StartDataPacket.cs,Read,The following statement contains a magic number: this.TransactionID = (uint)(readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,StartDataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\StartDataPacket.cs,Read,The following statement contains a magic number: this.Size = (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,StartDataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\StartDataPacket.cs,Read,The following statement contains a magic number: this.Size = (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,StartDataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\StartDataPacket.cs,Read,The following statement contains a magic number: this.Size = (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,StartDataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\StartDataPacket.cs,Read,The following statement contains a magic number: int i = (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,StartDataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\StartDataPacket.cs,Read,The following statement contains a magic number: int i = (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,StartDataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\StartDataPacket.cs,Read,The following statement contains a magic number: int i = (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,StartDataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\StartDataPacket.cs,Write,The following statement contains a magic number: Header.Length = (uint) (8 + 4 + 8 );
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,StartDataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\StartDataPacket.cs,Write,The following statement contains a magic number: Header.Length = (uint) (8 + 4 + 8 );
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,StartDataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\StartDataPacket.cs,Write,The following statement contains a magic number: Header.Length = (uint) (8 + 4 + 8 );
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,StartDataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\StartDataPacket.cs,Write,The following statement contains a magic number: WriteInt((uint) (Data.Length+12)' s);
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,StartDataPacket,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\StartDataPacket.cs,Write,The following statement contains a magic number: WriteInt(12' s);
Magic Number,CameraControl.Devices.Wifi,DDServerProvider,C:\repos\dukus_digiCamControl\CameraControl.Devices\Wifi\DDServerProvider.cs,Connect,The following statement contains a magic number: int port = 4757;
Magic Number,CameraControl.Devices.Wifi,PanonoDiscovery,C:\repos\dukus_digiCamControl\CameraControl.Devices\Wifi\PanonoDiscovery.cs,UDPSocketSetup,The following statement contains a magic number: try              {                  SsdpDeviceLocator _DeviceLocator = null;                  NetworkInterface[] nics = NetworkInterface.GetAllNetworkInterfaces();                  foreach (NetworkInterface adapter in nics)                  {                      IPInterfaceProperties ip_properties = adapter.GetIPProperties();                      if (!adapter.GetIPProperties().MulticastAddresses.Any())                          continue; // most of VPN adapters will be skipped                      if (!adapter.SupportsMulticast)                          continue; // multicast is meaningless for this type of connection                      if (OperationalStatus.Up != adapter.OperationalStatus)                          continue; // this adapter is off or not connected                      if (adapter.NetworkInterfaceType != NetworkInterfaceType.Wireless80211)                          continue;                        IPv4InterfaceProperties p = adapter.GetIPProperties().GetIPv4Properties();                      if (null == p)                          continue; // IPv4 is not configured on this adapter                        foreach (UnicastIPAddressInformation ip in adapter.GetIPProperties().UnicastAddresses)                      {                          if (ip.Address.AddressFamily == AddressFamily.InterNetwork)                          {                                _DeviceLocator =                                  new SsdpDeviceLocator(new SsdpCommunicationsServer(new SocketFactory(ip.Address.ToString())));                              break;                          }                      }                      }                    if (_DeviceLocator == null)                      throw new Exception("Camea not connected !");                    // (Optional) Set the filter so we only see notifications for devices we care about                   // (can be any search target value i.e device type' uuid value etc - any value that appears in the                   // DiscoverdSsdpDevice.NotificationType property or that is used with the searchTarget parameter of the Search method).                  _DeviceLocator.NotificationFilter = "ssdp:all";                    // Connect our event handler so we process devices as they are found                  //_DeviceLocator.DeviceAvailable += deviceLocator_DeviceAvailable;                    // Enable listening for notifications (optional)                  _DeviceLocator.StartListeningForNotifications();                    // Perform a search so we don't have to wait for devices to broadcast notifications                   // again to get any results right away (notifications are broadcast periodically).                  var s = _DeviceLocator.SearchAsync(new TimeSpan(0' 0' 15)).Result.ToList();                  if (s.Any())                  {                      foreach (var device in s)                      {                          if (device.NotificationType == "panono:ball-camera")                          {                              EndPoint = device.DescriptionLocation.ToString();                              return true;                          }                      }                  }                  return false;              }              catch (Exception exc)              {                  Log.Debug("Camera discovery fail"' exc);                  return false;              }
Magic Number,CameraControl.Devices.Wifi,PtpIpProvider,C:\repos\dukus_digiCamControl\CameraControl.Devices\Wifi\PtpIpProvider.cs,Connect,The following statement contains a magic number: if (!client.Open(ip' 15740))                  throw new Exception("No server was found!");
Magic Number,CameraControl.Devices.Wifi,YiCameraProvider,C:\repos\dukus_digiCamControl\CameraControl.Devices\Wifi\YiCameraProvider.cs,Connect,The following statement contains a magic number: int port = 7878;
Missing Default,CameraControl.Devices,StaticHelper,C:\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following switch statement is missing a default case: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Missing Default,CameraControl.Devices.Canon,CanonSDKBase,C:\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,Camera_PropertyChanged,The following switch statement is missing a default case: switch (e.PropertyId)                      {                          case Edsdk.PropID_ExposureCompensation:                              ExposureCompensation.SetValue((int) Camera.GetProperty(Edsdk.PropID_ExposureCompensation)'                                  false);                              break;                          case Edsdk.PropID_AEMode:                              ReInitFNumber(true);                              ReInitShutterSpeed();                              Mode.SetValue((uint)Camera.GetProperty(Edsdk.PropID_AEMode)' false);                              break;                          case Edsdk.PropID_WhiteBalance:                              WhiteBalance.SetValue(Camera.GetProperty(Edsdk.PropID_WhiteBalance)' false);                              break;                          case Edsdk.PropID_ISOSpeed:                              IsoNumber.SetValue(Camera.GetProperty(Edsdk.PropID_ISOSpeed)' false);                              break;                          case Edsdk.PropID_Tv:                              ShutterSpeed.SetValue(Camera.GetProperty(Edsdk.PropID_Tv)' false);                              break;                          case Edsdk.PropID_Av:                              FNumber.SetValue((int) Camera.GetProperty(Edsdk.PropID_Av)' false);                              break;                          case Edsdk.PropID_MeteringMode:                              ExposureMeteringMode.SetValue((int) Camera.GetProperty(Edsdk.PropID_MeteringMode)' false);                              break;                          case Edsdk.PropID_AFMode:                              FocusMode.SetValue((int) Camera.GetProperty(Edsdk.PropID_AFMode)' false);                              break;                          case Edsdk.PropID_ImageQuality:                              int i = (int) Camera.GetProperty(Edsdk.PropID_ImageQuality);                              CompressionSetting.SetValue((int) Camera.ImageQuality.ToBitMask()' false);                              break;                          case Edsdk.PropID_BatteryLevel:                              Battery = (int) Camera.BatteryLevel + 20;                              break;                          case Edsdk.PropID_AEBracketType:                              int ae = (int)Camera.GetProperty(Edsdk.PropID_AEBracketType);                              //ResetShutterButton();                              break;                          case Edsdk.PropID_Bracket:                              int br = (int)Camera.GetProperty(Edsdk.PropID_Bracket);                              //ResetShutterButton();                              break;                            case Edsdk.PropID_FocusInfo:                              //ResetShutterButton();                              break;                      }
Missing Default,CameraControl.Devices.Others,YiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,Mode_ValueChanged,The following switch statement is missing a default case: switch (val)              {                  case 0:                      Protocol.SendValue("capture_mode"' "precise quality");                      break;                  case 1:                      Protocol.SendValue("capture_mode"' "burst quality");                      break;                  case 2:                      Protocol.SendValue("capture_mode"' "precise self quality");                      break;                  case 3:                      Protocol.SendValue("capture_mode"' "precise quality cont.");                      break;              }
Missing Default,CameraControl.Devices.Others,YiCamera,C:\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,SetProperty,The following switch statement is missing a default case: switch (val)                      {                          case "precise quality":                              Mode.SetValue(0);                              break;                          case "burst quality":                              Mode.SetValue(1);                              break;                          case "precise self quality":                              Mode.SetValue(2);                              break;                          case "precise quality cont.":                              Mode.SetValue(3);                              break;                      }
Missing Default,CameraControl.Devices.TransferProtocol.DDServer,DdClient,C:\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,getContainer,The following switch statement is missing a default case: switch (header.ContainerType)              {                  case ContainerType.DataBlock:                      return new DataBlockContainer(header' _inerStream' callback);                  case ContainerType.ResponseBlock:                      if (synchronized)                          Monitor.Exit(_commandLock);                      return new ResponseBlockContainer(header' _inerStream);                          //Give current instance as stream' because we need keep track on the distance to next header                  case ContainerType.CommandBlock:                  case ContainerType.EventBlock:                      throw new Exception("Invalid container type. " + header.ContainerType);              }
