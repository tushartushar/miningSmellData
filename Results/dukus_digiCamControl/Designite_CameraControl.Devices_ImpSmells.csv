Implementation smell,Namespace,Class,File,Method,Description
Long Method,CameraControl.Devices.Canon,CanonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,getEvent,The method has 111 lines of code.
Long Method,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The method has 104 lines of code.
Long Method,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,NikonD600,The method has 134 lines of code.
Long Method,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReadDeviceProperties,The method has 157 lines of code.
Long Method,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReadDeviceProperties,The method has 153 lines of code.
Long Method,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetEvent,The method has 102 lines of code.
Long Method,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The method has 109 lines of code.
Long Method,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReadDeviceProperties,The method has 157 lines of code.
Long Method,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The method has 136 lines of code.
Long Method,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReadDeviceProperties,The method has 157 lines of code.
Long Method,CameraControl.Devices.Others,WiaCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\WiaCameraDevice.cs,Init,The method has 217 lines of code.
Long Method,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,GetEvent,The method has 103 lines of code.
Complex Method,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,GetObjects,Cyclomatic complexity of the method is 8
Complex Method,CameraControl.Devices,CameraDeviceManager,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\CameraDeviceManager.cs,ConnectDevices,Cyclomatic complexity of the method is 10
Complex Method,CameraControl.Devices,CameraDeviceManager,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\CameraDeviceManager.cs,ConnectToCamera,Cyclomatic complexity of the method is 9
Complex Method,CameraControl.Devices,StaticHelper,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,Cyclomatic complexity of the method is 21
Complex Method,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,Cyclomatic complexity of the method is 15
Complex Method,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,Camera_PropertyChanged,Cyclomatic complexity of the method is 15
Complex Method,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,Focus,Cyclomatic complexity of the method is 8
Complex Method,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetProhibitionCondition,Cyclomatic complexity of the method is 8
Complex Method,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,FormatStorage,Cyclomatic complexity of the method is 8
Complex Method,CameraControl.Devices.Canon,CanonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,getEvent,Cyclomatic complexity of the method is 9
Complex Method,CameraControl.Devices.Classes,ErrorCodes,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Classes\ErrorCodes.cs,GetException,Cyclomatic complexity of the method is 18
Complex Method,CameraControl.Devices.Classes,ErrorCodes,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Classes\ErrorCodes.cs,GetException,Cyclomatic complexity of the method is 11
Complex Method,CameraControl.Devices.Classes,PropertyValue<T>,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Classes\PropertyValue.cs,SetValue,Cyclomatic complexity of the method is 11
Complex Method,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReadDeviceProperties,Cyclomatic complexity of the method is 26
Complex Method,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,Focus,Cyclomatic complexity of the method is 8
Complex Method,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReadDeviceProperties,Cyclomatic complexity of the method is 27
Complex Method,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SetCameraField,Cyclomatic complexity of the method is 10
Complex Method,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetEvent,Cyclomatic complexity of the method is 11
Complex Method,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,Cyclomatic complexity of the method is 46
Complex Method,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReadDeviceProperties,Cyclomatic complexity of the method is 26
Complex Method,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReadDeviceProperties,Cyclomatic complexity of the method is 26
Complex Method,CameraControl.Devices.Others,WiaCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\WiaCameraDevice.cs,Init,Cyclomatic complexity of the method is 28
Complex Method,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,SetProperty,Cyclomatic complexity of the method is 13
Complex Method,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,SetValues,Cyclomatic complexity of the method is 12
Complex Method,PanonoTest,PanonoCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\PanonoCamera.cs,Ws_OnMessage,Cyclomatic complexity of the method is 11
Complex Method,SonyCameraCommunication,CameraDiscovery,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\CameraDiscovery.cs,UDPSocketSetup,Cyclomatic complexity of the method is 10
Complex Method,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,GetEvent,Cyclomatic complexity of the method is 15
Complex Method,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpClient.cs,Read,Cyclomatic complexity of the method is 16
Complex Method,CameraControl.Devices.Wifi,PanonoDiscovery,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Wifi\PanonoDiscovery.cs,UDPSocketSetup,Cyclomatic complexity of the method is 13
Long Parameter List,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,ExecuteWithNoData,The method has 6 parameters. Parameters: code' param1' param2' param3' loop' counter
Long Parameter List,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,ExecuteReadDataEx,The method has 5 parameters. Parameters: code' param1' param2' loop' counter
Long Parameter List,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,ExecuteReadDataEx,The method has 6 parameters. Parameters: code' param1' param2' param3' loop' counter
Long Parameter List,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,SetProperty,The method has 5 parameters. Parameters: code' data' param1' param2' param3
Long Identifier,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,,The length of the parameter CONST_Event_ObjectAddedInSdram is 30.
Long Identifier,CameraControl.Devices.Canon,CanonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,,The length of the parameter CONST_CMD_CANON_EOS_RemoteRelease is 33.
Long Identifier,CameraControl.Devices.Canon,CanonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,,The length of the parameter CONST_CMD_CANON_EOS_SetEventMode is 32.
Long Identifier,CameraControl.Devices.Canon,CanonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,,The length of the parameter CONST_CMD_CANON_EOS_SetRemoteMode is 33.
Long Identifier,CameraControl.Devices.Canon,CanonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,,The length of the parameter CONST_CMD_CANON_EOS_GetViewFinderData is 37.
Long Identifier,CameraControl.Devices.Canon,CanonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,,The length of the parameter CONST_CMD_CANON_EOS_GetObjectInfo is 33.
Long Identifier,CameraControl.Devices.Canon,CanonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,,The length of the parameter CONST_CMD_CANON_EOS_SetDevicePropValueEx is 40.
Long Identifier,CameraControl.Devices.Canon,CanonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,,The length of the parameter CONST_CMD_CANON_EOS_RequestDevicePropValue is 42.
Long Identifier,CameraControl.Devices.Canon,CanonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,,The length of the parameter CONST_Event_CANON_EOS_PropValueChanged is 38.
Long Identifier,CameraControl.Devices.Canon,CanonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,,The length of the parameter CONST_Event_CANON_EOS_ObjectAddedEx is 35.
Long Identifier,CameraControl.Devices.Classes,Conts,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Classes\Conts.cs,,The length of the parameter CONST_PROP_ExposureCompensation is 31.
Long Identifier,CameraControl.Devices.Classes,Conts,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Classes\Conts.cs,,The length of the parameter CONST_PROP_ExposureMeteringMode is 31.
Long Identifier,CameraControl.Devices.Classes,ErrorCodes,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Classes\ErrorCodes.cs,,The length of the parameter WIA_ERROR_DEVICE_COMMUNICATION is 30.
Long Identifier,CameraControl.Devices.Classes,ErrorCodes,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Classes\ErrorCodes.cs,,The length of the parameter WIA_ERROR_INCORRECT_HARDWARE_SETTING is 36.
Long Identifier,CameraControl.Devices.Classes,ErrorCodes,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Classes\ErrorCodes.cs,,The length of the parameter WIA_ERROR_INVALID_DRIVER_RESPONSE is 33.
Long Identifier,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,,The length of the parameter CONST_CMD_InitiateCaptureRecInMedia is 35.
Long Identifier,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,,The length of the parameter CONST_CMD_AfAndCaptureRecInSdram is 32.
Long Identifier,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,,The length of the parameter CONST_CMD_InitiateCaptureRecInSdram is 35.
Long Identifier,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,,The length of the parameter CONST_PROP_ExposureProgramMode is 30.
Long Identifier,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,,The length of the parameter CONST_PROP_ExposureBiasCompensation is 35.
Long Identifier,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,,The length of the parameter CONST_PROP_MovieExposureBiasCompensation is 40.
Long Identifier,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,,The length of the parameter CONST_PROP_LiveViewImageZoomRatio is 33.
Long Identifier,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,,The length of the parameter CONST_PROP_ExposureMeteringMode is 31.
Long Identifier,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,,The length of the parameter CONST_PROP_ExposureIndicateStatus is 33.
Long Identifier,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,,The length of the parameter CONST_PROP_RawCompressionBitMode is 32.
Long Identifier,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,,The length of the parameter CONST_PROP_WbTuneFluorescentType is 32.
Long Identifier,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,,The length of the parameter CONST_Event_CaptureCompleteRecInSdram is 37.
Long Statement,CameraControl.Devices,BaseCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseCameraDevice.cs,ToStringCameraData,The length of the statement  "                c.Append(String.Format("\n\tCapabilities ({0} present of {1}):"' Capabilities.Count' Enum.GetValues(typeof(CapabilityEnum)).Length)); " is 133.
Long Statement,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The length of the statement  "                        deviceInfo.AvaiableProperties.Add(new XmlPropertyDescriptor() { Code = BitConverter.ToUInt16(vendor_res.Data' index) }); " is 120.
Long Statement,CameraControl.Devices,CameraDeviceManager,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\CameraDeviceManager.cs,InitCanon,The length of the statement  "                if ((exception.InnerException != null) && (exception.InnerException.Message != null) && (exception.InnerException.Message.Contains("EDSDK.dll"))) " is 145.
Long Statement,CameraControl.Devices,CameraDeviceManager,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\CameraDeviceManager.cs,InitCanon,The length of the statement  "                    Console.WriteLine("\n**CRITICAL ERROR**\n\nCanon EOS camera library' EDSDK.dll is missing\nInstall it after downloading from Canon's site\n"); " is 142.
Long Statement,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitCompression,The length of the statement  "            CompressionSetting.AddValues("Large Fine JPEG"' (int) new EosImageQuality(){PrimaryCompressLevel = EosCompressLevel.Fine'PrimaryImageFormat = EosImageFormat.Jpeg'PrimaryImageSize = EosImageSize.Large'SecondaryCompressLevel = EosCompressLevel.Unknown'SecondaryImageFormat = EosImageFormat.Unknown' SecondaryImageSize = EosImageSize.Unknown}.ToBitMask()); " is 353.
Long Statement,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitCompression,The length of the statement  "            CompressionSetting.AddValues("Large Normal JPEG"' (int)new EosImageQuality() { PrimaryCompressLevel = EosCompressLevel.Normal' PrimaryImageFormat = EosImageFormat.Jpeg' PrimaryImageSize = EosImageSize.Large' SecondaryCompressLevel = EosCompressLevel.Unknown' SecondaryImageFormat = EosImageFormat.Unknown' SecondaryImageSize = EosImageSize.Unknown }.ToBitMask()); " is 363.
Long Statement,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitCompression,The length of the statement  "            CompressionSetting.AddValues("Medium Fine JPEG"' (int)new EosImageQuality() { PrimaryCompressLevel = EosCompressLevel.Fine' PrimaryImageFormat = EosImageFormat.Jpeg' PrimaryImageSize = EosImageSize.Middle' SecondaryCompressLevel = EosCompressLevel.Unknown' SecondaryImageFormat = EosImageFormat.Unknown' SecondaryImageSize = EosImageSize.Unknown }.ToBitMask()); " is 361.
Long Statement,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitCompression,The length of the statement  "            CompressionSetting.AddValues("Medium Normal JPEG"' (int)new EosImageQuality() { PrimaryCompressLevel = EosCompressLevel.Normal' PrimaryImageFormat = EosImageFormat.Jpeg' PrimaryImageSize = EosImageSize.Middle' SecondaryCompressLevel = EosCompressLevel.Unknown' SecondaryImageFormat = EosImageFormat.Unknown' SecondaryImageSize = EosImageSize.Unknown }.ToBitMask()); " is 365.
Long Statement,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitCompression,The length of the statement  "            CompressionSetting.AddValues("Small Fine JPEG"' (int)new EosImageQuality() { PrimaryCompressLevel = EosCompressLevel.Fine' PrimaryImageFormat = EosImageFormat.Jpeg' PrimaryImageSize = EosImageSize.Small2' SecondaryCompressLevel = EosCompressLevel.Unknown' SecondaryImageFormat = EosImageFormat.Unknown' SecondaryImageSize = EosImageSize.Unknown }.ToBitMask()); " is 360.
Long Statement,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitCompression,The length of the statement  "            CompressionSetting.AddValues("Small Normal JPEG"' (int)new EosImageQuality() { PrimaryCompressLevel = EosCompressLevel.Normal' PrimaryImageFormat = EosImageFormat.Jpeg' PrimaryImageSize = EosImageSize.Small2' SecondaryCompressLevel = EosCompressLevel.Unknown' SecondaryImageFormat = EosImageFormat.Unknown' SecondaryImageSize = EosImageSize.Unknown }.ToBitMask()); " is 364.
Long Statement,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitCompression,The length of the statement  "            CompressionSetting.AddValues("Smaller JPEG"' (int)new EosImageQuality() { PrimaryCompressLevel = EosCompressLevel.Fine' PrimaryImageFormat = EosImageFormat.Jpeg' PrimaryImageSize = EosImageSize.Small3' SecondaryCompressLevel = EosCompressLevel.Unknown' SecondaryImageFormat = EosImageFormat.Unknown' SecondaryImageSize = EosImageSize.Unknown }.ToBitMask()); " is 357.
Long Statement,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitCompression,The length of the statement  "            CompressionSetting.AddValues("Tiny JPEG"' (int)new EosImageQuality() { PrimaryCompressLevel = EosCompressLevel.Fine' PrimaryImageFormat = EosImageFormat.Jpeg' PrimaryImageSize = EosImageSize.Small4' SecondaryCompressLevel = EosCompressLevel.Unknown' SecondaryImageFormat = EosImageFormat.Unknown' SecondaryImageSize = EosImageSize.Unknown }.ToBitMask()); " is 354.
Long Statement,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitCompression,The length of the statement  "            CompressionSetting.AddValues("RAW + Large Fine JPEG"' (int)new EosImageQuality() {PrimaryImageFormat =EosImageFormat.Cr2'PrimaryCompressLevel = EosCompressLevel.Lossless' PrimaryImageSize = EosImageSize.Large' SecondaryImageSize =EosImageSize.Large'SecondaryCompressLevel = EosCompressLevel.Fine' SecondaryImageFormat = EosImageFormat.Jpeg }.ToBitMask()); " is 355.
Long Statement,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitCompression,The length of the statement  "            CompressionSetting.AddValues("RAW"' (int)new EosImageQuality() { PrimaryImageFormat = EosImageFormat.Cr2' PrimaryCompressLevel = EosCompressLevel.Lossless' PrimaryImageSize = EosImageSize.Large' SecondaryCompressLevel = EosCompressLevel.Unknown' SecondaryImageFormat = EosImageFormat.Unknown' SecondaryImageSize = EosImageSize.Unknown}.ToBitMask()); " is 349.
Long Statement,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,PressButton,The length of the statement  "            ErrorCodes.GetCanonException(Camera.SendCommand(Edsdk.CameraCommand_PressShutterButton' (int)Edsdk.EdsShutterButton.CameraCommand_ShutterButton_Completely)); " is 157.
Long Statement,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,PressHalfButton,The length of the statement  "            ErrorCodes.GetCanonException(Camera.SendCommand(Edsdk.CameraCommand_PressShutterButton' (int)Edsdk.EdsShutterButton.CameraCommand_ShutterButton_Halfway)); " is 154.
Long Statement,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,CapturePhotoNoAf,The length of the statement  "                ErrorCodes.GetCanonException(Camera.SendCommand(Edsdk.CameraCommand_PressShutterButton' (int)Edsdk.EdsShutterButton.CameraCommand_ShutterButton_Completely_NonAF)); " is 163.
Long Statement,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,ToStringCameraData,The length of the statement  "                c.AppendFormat("\n\tBattery...............{0'3}%' quality {1}' (note base class value is this + 20)"' Camera.BatteryLevel' Camera.BatteryQuality); " is 146.
Long Statement,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReadDeviceProperties,The length of the statement  "                        foreach (PropertyValue<long> advancedProperty in AdvancedProperties.Where(advancedProperty => advancedProperty.Code == prop)) " is 125.
Long Statement,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitIso,The length of the statement  "                        MovieIsoNumber.AddValues(_isoTable.ContainsKey(val) ? _isoTable[val] : val.ToString(CultureInfo.InvariantCulture)' val); " is 120.
Long Statement,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReadDeviceProperties,The length of the statement  "                            foreach (PropertyValue<long> advancedProperty in AdvancedProperties.Where(advancedProperty => advancedProperty.Code == prop)) " is 125.
Long Statement,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,InitIso,The length of the statement  "                        MovieIsoNumber.AddValues(_isoTable.ContainsKey(val) ? _isoTable[val] : val.ToString(CultureInfo.InvariantCulture)' val); " is 120.
Long Statement,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReadDeviceProperties,The length of the statement  "                        foreach (PropertyValue<long> advancedProperty in AdvancedProperties.Where(advancedProperty => advancedProperty.Code == prop)) " is 125.
Long Statement,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReadDeviceProperties,The length of the statement  "                        foreach (PropertyValue<long> advancedProperty in AdvancedProperties.Where(advancedProperty => advancedProperty.Code == prop)) " is 125.
Long Statement,CameraControl.Devices.Others,OscCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\OscCamera.cs,InitIso,The length of the statement  "                //"{\"name\":\"camera.getOptions\"'\"state\":\"done\"'\"results\":{\"options\":{\"iso\":100'\"isoSupport\":[100'125'160'200'250'320'400'500'640'800'1000'1250'1600]}}}"; " is 168.
Long Statement,CameraControl.Devices.Others,OscCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\OscCamera.cs,InitExposureCompensation,The length of the statement  "//                    "{\"name\":\"camera.getOptions\"'\"state\":\"done\"'\"results\":{\"options\":{\"exposureCompensation\":0.0'\"exposureCompensationSupport\":[-2.0'-1.7'-1.3'-1.0'-0.7'-0.3'0.0'0.3'0.7'1.0'1.3'1.7'2.0]}}}"; " is 225.
Long Statement,CameraControl.Devices.Others,OscCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\OscCamera.cs,GetSessionId,The length of the statement  "            //response = "{\"name\":\"camera.startSession\"'\"state\":\"done\"'\"results\":{ \"sessionId\":\"SID_0001\"'\"timeout\":180}}"; " is 127.
Long Statement,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,TransferFileThumb,The length of the statement  "            HttpHelper.DownLoadFileByWebRequest(String.Format("http://{0}/DCIM/100MEDIA/{1}?type=screen"' Protocol.Ip' o)' filename' " is 120.
Long Statement,SonyCameraCommunication,CameraDiscovery,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\CameraDiscovery.cs,UDPSocketSetup,The length of the statement  "                udpSocket.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.AddMembership' new MulticastOption(multicastEndpoint.Address' IPAddress.Any)); " is 143.
Long Statement,SonyCameraCommunication,CameraDiscovery,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\CameraDiscovery.cs,UDPSocketSetup,The length of the statement  "                    udpSocket.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.MulticastInterface' (int)IPAddress.HostToNetworkOrder(p.Index)); " is 129.
Long Statement,SonyCameraCommunication,CameraDiscovery,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\CameraDiscovery.cs,MSearch,The length of the statement  "            string searchString = "M-SEARCH * HTTP/1.1\r\nHOST:239.255.255.250:1900\r\nMAN:\"ssdp:discover\"\r\nMX:1\r\nST:urn:schemas-sony-com:service:ScalarWebAPI:1\r\n\r\n"; " is 164.
Long Statement,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpClient.cs,ReadInt,The length of the statement  "            return _inerStream.ReadByte() | (_inerStream.ReadByte() << 8) | (_inerStream.ReadByte() << 16) | (_inerStream.ReadByte() << 24); " is 128.
Complex Conditional,CameraControl.Devices,CameraDeviceManager,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\CameraDeviceManager.cs,ConnectToCamera,The conditional expression  "(devInfo.Type == WiaDeviceType.CameraDeviceType || devInfo.Type == WiaDeviceType.VideoDeviceType)                      && (nativeDriver == null || DisableNativeDrivers || noDriversDetected) && retries < 3"  is complex.
Complex Conditional,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReInitShutterSpeed,The conditional expression  "Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !NormalShutterSpeed.Values.Contains("Bulb")"  is complex.
Complex Conditional,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReInitShutterSpeed,The conditional expression  "Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !MovieShutterSpeed.Values.Contains("Bulb")"  is complex.
Complex Conditional,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The conditional expression  "Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !NormalShutterSpeed.Values.Contains("Bulb")"  is complex.
Complex Conditional,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The conditional expression  "Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !MovieShutterSpeed.Values.Contains("Bulb")"  is complex.
Complex Conditional,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReInitShutterSpeed,The conditional expression  "Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !NormalShutterSpeed.Values.Contains("Bulb")"  is complex.
Complex Conditional,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReInitShutterSpeed,The conditional expression  "Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !MovieShutterSpeed.Values.Contains("Bulb")"  is complex.
Complex Conditional,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReInitShutterSpeed,The conditional expression  "Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !NormalShutterSpeed.Values.Contains("Bulb")"  is complex.
Complex Conditional,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReInitShutterSpeed,The conditional expression  "Mode != null && (Mode.Value == "S" || Mode.Value == "M") && !MovieShutterSpeed.Values.Contains("Bulb")"  is complex.
Empty Catch Block,CameraControl.Devices,BaseCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseCameraDevice.cs,ToStringCameraData,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,GetObjects,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetLiveViewImage,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Canon,CanonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,_timer_Elapsed,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Canon,CanonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,getEvent,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Classes,AsyncObservableCollection<T>,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Classes\AsyncObservableCollection.cs,RaiseCollectionChanged,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Classes,AsyncObservableCollection<T>,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Classes\AsyncObservableCollection.cs,OnCollectionChanged,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReInitShutterSpeed,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReInitShutterSpeed,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,_timer_Elapsed,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitAutoIsoHight,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitPictControl,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitMode,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitCompressionSetting,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureMeteringMode,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetEvent,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetEvent,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonD60,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD60.cs,InitCompressionSetting,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReInitShutterSpeed,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReInitShutterSpeed,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonD80,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD80.cs,InitCompressionSetting,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReInitShutterSpeed,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReInitShutterSpeed,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Others,WiaCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\WiaCameraDevice.cs,ExposureMeteringMode_ValueChanged,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Others,WiaCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\WiaCameraDevice.cs,CompressionSetting_ValueChanged,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Others,WiaCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\WiaCameraDevice.cs,ExposureCompensation_ValueChanged,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Others,WiaCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\WiaCameraDevice.cs,WhiteBalance_ValueChanged,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Others,WiaCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\WiaCameraDevice.cs,ShutterSpeed_ValueChanged,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Others,WiaCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\WiaCameraDevice.cs,IsoNumber_ValueChanged,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Others,WiaCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\WiaCameraDevice.cs,FNumber_ValueChanged,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,Protocol_DataReceiverd,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,GetObjects,The method has an empty catch block.
Empty Catch Block,PanonoTest,PanonoCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\PanonoCamera.cs,Ws_OnMessage,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,InitIso,The method has an empty catch block.
Empty Catch Block,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,InitMode,The method has an empty catch block.
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,GetObjects,The following statement contains a magic number: uint handle = BitConverter.ToUInt32(response.Data' 4 * i + 4);
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,GetObjects,The following statement contains a magic number: uint handle = BitConverter.ToUInt32(response.Data' 4 * i + 4);
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,GetObjects,The following statement contains a magic number: uint objFormat = BitConverter.ToUInt16(objectdata.Data' 4);
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,GetObjects,The following statement contains a magic number: deviceObject.FileName = Encoding.Unicode.GetString(objectdata.Data' 53' 12 * 2);
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,GetObjects,The following statement contains a magic number: deviceObject.FileName = Encoding.Unicode.GetString(objectdata.Data' 53' 12 * 2);
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,GetObjects,The following statement contains a magic number: deviceObject.FileName = Encoding.Unicode.GetString(objectdata.Data' 53' 12 * 2);
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,GetObjects,The following statement contains a magic number: string datesrt = Encoding.Unicode.GetString(objectdata.Data' 53 + (12 * 2) + 3' 30);
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,GetObjects,The following statement contains a magic number: string datesrt = Encoding.Unicode.GetString(objectdata.Data' 53 + (12 * 2) + 3' 30);
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,GetObjects,The following statement contains a magic number: string datesrt = Encoding.Unicode.GetString(objectdata.Data' 53 + (12 * 2) + 3' 30);
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,GetObjects,The following statement contains a magic number: string datesrt = Encoding.Unicode.GetString(objectdata.Data' 53 + (12 * 2) + 3' 30);
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,GetObjects,The following statement contains a magic number: string datesrt = Encoding.Unicode.GetString(objectdata.Data' 53 + (12 * 2) + 3' 30);
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,TransferFile,The following statement contains a magic number: result = StillImageDevice.ExecuteReadBigData(CONST_CMD_GetObject' stream'                                  (total' current) =>                                  {                                      double i = (double) current / total;                                      TransferProgress =                                          Convert.ToUInt32(i * 100);                                  }' Convert.ToUInt32(o));
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,FormatStorage,The following statement contains a magic number: uint handle = BitConverter.ToUInt32(response.Data' 4 * i + 4);
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,FormatStorage,The following statement contains a magic number: uint handle = BitConverter.ToUInt32(response.Data' 4 * i + 4);
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,FormatStorage,The following statement contains a magic number: response.Data.Length > 4
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,SetProperty,The following statement contains a magic number: retrynum > 5
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,SetProperty,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,SetProperty,The following statement contains a magic number: retrynum > 5
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,SetProperty,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,SetProperty,The following statement contains a magic number: retrynum > 5
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,SetProperty,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,ToInt16,The following statement contains a magic number: int i = (short)(value[startIndex] << 8 | value[startIndex + 1]);
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,ToUInt16,The following statement contains a magic number: uint i = (uint)(value[startIndex] << 8 | value[startIndex + 1]);
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,ToInt32,The following statement contains a magic number: int i = (value[startIndex] << 24 | value[startIndex + 1] << 16 | value[startIndex + 2] << 8 | value[startIndex + 3]);
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,ToInt32,The following statement contains a magic number: int i = (value[startIndex] << 24 | value[startIndex + 1] << 16 | value[startIndex + 2] << 8 | value[startIndex + 3]);
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,ToInt32,The following statement contains a magic number: int i = (value[startIndex] << 24 | value[startIndex + 1] << 16 | value[startIndex + 2] << 8 | value[startIndex + 3]);
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,ToInt32,The following statement contains a magic number: int i = (value[startIndex] << 24 | value[startIndex + 1] << 16 | value[startIndex + 2] << 8 | value[startIndex + 3]);
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,ToInt32,The following statement contains a magic number: int i = (value[startIndex] << 24 | value[startIndex + 1] << 16 | value[startIndex + 2] << 8 | value[startIndex + 3]);
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,ToDeciaml,The following statement contains a magic number: int d = ToUInt16(value' startIndex + 2);
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The following statement contains a magic number: int index = 2 + 4 + 2;
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The following statement contains a magic number: int index = 2 + 4 + 2;
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The following statement contains a magic number: int index = 2 + 4 + 2;
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The following statement contains a magic number: index += vendorDescCount * 2;
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The following statement contains a magic number: index += 3;
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices,BaseMTPCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\BaseMTPCamera.cs,LoadDeviceData,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices,CameraDeviceManager,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\CameraDeviceManager.cs,ConnectToServer,The following statement contains a magic number: int port = 15740;
Magic Number,CameraControl.Devices,CameraDeviceManager,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\CameraDeviceManager.cs,ConnectToServer,The following statement contains a magic number: int port = 4757;
Magic Number,CameraControl.Devices,CameraDeviceManager,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\CameraDeviceManager.cs,ConnectDevicesPtpIp,The following statement contains a magic number: !client.Open(ip' 15740)
Magic Number,CameraControl.Devices,CameraDeviceManager,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\CameraDeviceManager.cs,ConnectToCamera,The following statement contains a magic number: retries = 4;
Magic Number,CameraControl.Devices,CameraDeviceManager,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\CameraDeviceManager.cs,ConnectToCamera,The following statement contains a magic number: (devInfo.Type == WiaDeviceType.CameraDeviceType || devInfo.Type == WiaDeviceType.VideoDeviceType)                      && (nativeDriver == null || DisableNativeDrivers || noDriversDetected) && retries < 3
Magic Number,CameraControl.Devices,StaticHelper,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetSerial,The following statement contains a magic number: ret = s[2];
Magic Number,CameraControl.Devices,StaticHelper,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetSerial,The following statement contains a magic number: s.Length > 2
Magic Number,CameraControl.Devices,StaticHelper,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following statement contains a magic number: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetValue,The following statement contains a magic number: switch (dataLength)              {                  case 1:                      val = result.Data[index];                      break;                  case 2:                      val = BitConverter.ToUInt16(result.Data' index);                      break;                  case 4:                      val = BitConverter.ToUInt32(result.Data' index);                      break;                  default:                      val = (long) BitConverter.ToUInt64(result.Data' index);                      break;              }
Magic Number,CameraControl.Devices,StaticHelper,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetValue,The following statement contains a magic number: switch (dataLength)              {                  case 1:                      val = result.Data[index];                      break;                  case 2:                      val = BitConverter.ToUInt16(result.Data' index);                      break;                  case 4:                      val = BitConverter.ToUInt32(result.Data' index);                      break;                  default:                      val = (long) BitConverter.ToUInt64(result.Data' index);                      break;              }
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,Init,The following statement contains a magic number: Thread thread = new Thread(() =>                  {                      Thread.Sleep(200);                      OnCameraInitDone();                  });
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,_shutdownTimer_Elapsed,The following statement contains a magic number: Monitor.TryEnter(Locker' 10)
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,LoadProperties,The following statement contains a magic number: Battery = (int) Camera.BatteryLevel + 20;
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: res.AddValues("Video"' 2);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: rr.Contains(2)
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: res.AddValues("High-Speed Continuous Shooting"' 4);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: rr.Contains(4)
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: res.AddValues("Low-Speed Continuous Shooting"' 5);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: rr.Contains(5)
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: res.AddValues("Silent single shooting"' 6);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: rr.Contains(6)
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: res.AddValues("10-Sec Self-Timer plus continuous shots"' 7);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: rr.Contains(7)
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: res.AddValues("10-Sec Self-Timer"' 10);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: rr.Contains(10)
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: res.AddValues("2-Sec Self-Timer"' 11);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: rr.Contains(11)
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: res.AddValues("14fps super high speed"' 12);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: rr.Contains(12)
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: res.AddValues("Silent single shooting"' 13);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: rr.Contains(13)
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: res.AddValues("Silent contin shooting"' 14);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: rr.Contains(14)
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: res.AddValues("Silent HS continuous"' 15);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: rr.Contains(15)
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: res.AddValues("Silent LS continuous"' 16);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitDriveMode,The following statement contains a magic number: rr.Contains(16)
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitBracket,The following statement contains a magic number: res.AddValues("ISO bracket"' 2);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitBracket,The following statement contains a magic number: res.AddValues("WB bracket"' 3);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitBracket,The following statement contains a magic number: res.AddValues("FE bracket"' 4);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,InitOther,The following statement contains a magic number: LiveViewImageZoomRatio.AddValues("5x"' 5);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,Camera_PropertyChanged,The following statement contains a magic number: switch (e.PropertyId)                      {                          case Edsdk.PropID_ExposureCompensation:                              ExposureCompensation.SetValue((int) Camera.GetProperty(Edsdk.PropID_ExposureCompensation)'                                  false);                              break;                          case Edsdk.PropID_AEMode:                              ReInitFNumber(true);                              ReInitShutterSpeed();                              Mode.SetValue((uint)Camera.GetProperty(Edsdk.PropID_AEMode)' false);                              break;                          case Edsdk.PropID_WhiteBalance:                              WhiteBalance.SetValue(Camera.GetProperty(Edsdk.PropID_WhiteBalance)' false);                              break;                          case Edsdk.PropID_ISOSpeed:                              IsoNumber.SetValue(Camera.GetProperty(Edsdk.PropID_ISOSpeed)' false);                              break;                          case Edsdk.PropID_Tv:                              ShutterSpeed.SetValue(Camera.GetProperty(Edsdk.PropID_Tv)' false);                              break;                          case Edsdk.PropID_Av:                              FNumber.SetValue((int) Camera.GetProperty(Edsdk.PropID_Av)' false);                              break;                          case Edsdk.PropID_MeteringMode:                              ExposureMeteringMode.SetValue((int) Camera.GetProperty(Edsdk.PropID_MeteringMode)' false);                              break;                          case Edsdk.PropID_AFMode:                              FocusMode.SetValue((int) Camera.GetProperty(Edsdk.PropID_AFMode)' false);                              break;                          case Edsdk.PropID_ImageQuality:                              int i = (int) Camera.GetProperty(Edsdk.PropID_ImageQuality);                              CompressionSetting.SetValue((int) Camera.ImageQuality.ToBitMask()' false);                              break;                          case Edsdk.PropID_BatteryLevel:                              Battery = (int) Camera.BatteryLevel + 20;                              break;                          case Edsdk.PropID_AEBracketType:                              int ae = (int)Camera.GetProperty(Edsdk.PropID_AEBracketType);                              //ResetShutterButton();                              break;                          case Edsdk.PropID_Bracket:                              int br = (int)Camera.GetProperty(Edsdk.PropID_Bracket);                              //ResetShutterButton();                              break;                            case Edsdk.PropID_FocusInfo:                              //ResetShutterButton();                              break;                      }
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,Focus,The following statement contains a magic number: x -= (_liveViewImageData.ZommBounds.Width/2);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,Focus,The following statement contains a magic number: y -= (_liveViewImageData.ZommBounds.Height/2);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetLiveViewImage,The following statement contains a magic number: viewData.LiveViewImageHeight = 100;
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetLiveViewImage,The following statement contains a magic number: viewData.LiveViewImageWidth = 100;
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetLiveViewImage,The following statement contains a magic number: viewData.FocusX = _liveViewImageData.ZommBounds.X +                                                (_liveViewImageData.ZommBounds.Width / 2);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetLiveViewImage,The following statement contains a magic number: viewData.FocusY = _liveViewImageData.ZommBounds.Y +                                                (_liveViewImageData.ZommBounds.Height / 2);
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetLiveViewImage,The following statement contains a magic number: Monitor.TryEnter(Locker' 10)
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      break;                  case OperationEnum.RecordMovie:                      if (Camera.GetProperty(Edsdk.PropID_Record) == 4)                          return "LabelRecordInProgres";                      if (Camera.LiveViewDevice==EosLiveViewDevice.None)                          return "LabelWrongLiveViewType";                      break;                  case OperationEnum.AutoFocus:                      break;                  case OperationEnum.ManualFocus:                      break;                  case OperationEnum.LiveView:                      break;                  default:                      throw new ArgumentOutOfRangeException("operationEnum"' operationEnum' null);              }
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetImage,The following statement contains a magic number: int Stride = ((outputSize.width*3) + 3) & ~3;
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetImage,The following statement contains a magic number: int Stride = ((outputSize.width*3) + 3) & ~3;
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetImage,The following statement contains a magic number: int Stride = ((outputSize.width*3) + 3) & ~3;
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetImage,The following statement contains a magic number: buffer[t] = buffer[t + 2];
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetImage,The following statement contains a magic number: buffer[t + 2] = temp;
Magic Number,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,GetImage,The following statement contains a magic number: outputSize.width%4 == 0
Magic Number,CameraControl.Devices.Canon,CanonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,getEvent,The following statement contains a magic number: uint eventCode = BitConverter.ToUInt16(response.Data' 6*i + 2);
Magic Number,CameraControl.Devices.Canon,CanonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,getEvent,The following statement contains a magic number: uint eventCode = BitConverter.ToUInt16(response.Data' 6*i + 2);
Magic Number,CameraControl.Devices.Canon,CanonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,getEvent,The following statement contains a magic number: ushort eventParam = BitConverter.ToUInt16(response.Data' 6*i + 4);
Magic Number,CameraControl.Devices.Canon,CanonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,getEvent,The following statement contains a magic number: ushort eventParam = BitConverter.ToUInt16(response.Data' 6*i + 4);
Magic Number,CameraControl.Devices.Canon,CanonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,getEvent,The following statement contains a magic number: int longeventParam = BitConverter.ToInt32(response.Data' 6*i + 4);
Magic Number,CameraControl.Devices.Canon,CanonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,getEvent,The following statement contains a magic number: int longeventParam = BitConverter.ToInt32(response.Data' 6*i + 4);
Magic Number,CameraControl.Devices.Canon,CanonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,getEvent,The following statement contains a magic number: switch (eventCode)                              {                                  case CONST_Event_CANON_EOS_PropValueChanged:                                      Log.Debug("EOS property changed " + eventParam.ToString("X"));                                      //ReadDeviceProperties(eventParam);                                      break;                                  case CONST_Event_CANON_EOS_ObjectAddedEx:                                  case CONST_Event_ObjectAddedInSdram:                                  case CONST_Event_ObjectAdded:                                      {                                          try                                          {                                              MTPDataResponse objectdata =                                                  ExecuteReadDataEx(CONST_CMD_CANON_EOS_GetObjectInfo'                                                                    (uint) longeventParam);                                              string filename = "DSC_0000.JPG";                                              if (objectdata.Data != null)                                              {                                                  filename = Encoding.Unicode.GetString(objectdata.Data' 53' 12*2);                                                  if (filename.Contains("\0"))                                                      filename = filename.Split('\0')[0];                                              }                                              else                                              {                                                  Log.Error("Error getting file name");                                              }                                              Log.Debug("File transfer " + filename);                                              PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                                                                                {                                                                                    WiaImageItem = null'                                                                                    EventArgs =                                                                                        new PortableDeviceEventArgs(new PortableDeviceEventType                                                                                                                        ()                                                                                                                        {                                                                                                                            ObjectHandle                                                                                                                                =                                                                                                                                (                                                                                                                                uint                                                                                                                                )                                                                                                                                longeventParam                                                                                                                        })'                                                                                    CameraDevice = this'                                                                                    FileName = filename'                                                                                    Handle = (uint) longeventParam                                                                                };                                              OnPhotoCapture(this' args);                                          }                                          catch (Exception exception)                                          {                                              Log.Error("Object added error"' exception);                                          }                                      }                                      break;                                      //case CONST_Event_CaptureComplete:                                      //case CONST_Event_CaptureCompleteRecInSdram:                                      //    {                                      //        OnCaptureCompleted(this' new EventArgs());                                      //    }                                      //    break;                                      //case CONST_Event_ObsoleteEvent:                                      //    break;                                  default:                                      //Console.WriteLine("Unknown event code " + eventCode.ToString("X"));                                      Log.Debug("Unknown event code :" + eventCode.ToString("X") + "|" +                                                longeventParam.ToString("X"));                                      break;                              }
Magic Number,CameraControl.Devices.Canon,CanonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,getEvent,The following statement contains a magic number: switch (eventCode)                              {                                  case CONST_Event_CANON_EOS_PropValueChanged:                                      Log.Debug("EOS property changed " + eventParam.ToString("X"));                                      //ReadDeviceProperties(eventParam);                                      break;                                  case CONST_Event_CANON_EOS_ObjectAddedEx:                                  case CONST_Event_ObjectAddedInSdram:                                  case CONST_Event_ObjectAdded:                                      {                                          try                                          {                                              MTPDataResponse objectdata =                                                  ExecuteReadDataEx(CONST_CMD_CANON_EOS_GetObjectInfo'                                                                    (uint) longeventParam);                                              string filename = "DSC_0000.JPG";                                              if (objectdata.Data != null)                                              {                                                  filename = Encoding.Unicode.GetString(objectdata.Data' 53' 12*2);                                                  if (filename.Contains("\0"))                                                      filename = filename.Split('\0')[0];                                              }                                              else                                              {                                                  Log.Error("Error getting file name");                                              }                                              Log.Debug("File transfer " + filename);                                              PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                                                                                {                                                                                    WiaImageItem = null'                                                                                    EventArgs =                                                                                        new PortableDeviceEventArgs(new PortableDeviceEventType                                                                                                                        ()                                                                                                                        {                                                                                                                            ObjectHandle                                                                                                                                =                                                                                                                                (                                                                                                                                uint                                                                                                                                )                                                                                                                                longeventParam                                                                                                                        })'                                                                                    CameraDevice = this'                                                                                    FileName = filename'                                                                                    Handle = (uint) longeventParam                                                                                };                                              OnPhotoCapture(this' args);                                          }                                          catch (Exception exception)                                          {                                              Log.Error("Object added error"' exception);                                          }                                      }                                      break;                                      //case CONST_Event_CaptureComplete:                                      //case CONST_Event_CaptureCompleteRecInSdram:                                      //    {                                      //        OnCaptureCompleted(this' new EventArgs());                                      //    }                                      //    break;                                      //case CONST_Event_ObsoleteEvent:                                      //    break;                                  default:                                      //Console.WriteLine("Unknown event code " + eventCode.ToString("X"));                                      Log.Debug("Unknown event code :" + eventCode.ToString("X") + "|" +                                                longeventParam.ToString("X"));                                      break;                              }
Magic Number,CameraControl.Devices.Canon,CanonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,getEvent,The following statement contains a magic number: switch (eventCode)                              {                                  case CONST_Event_CANON_EOS_PropValueChanged:                                      Log.Debug("EOS property changed " + eventParam.ToString("X"));                                      //ReadDeviceProperties(eventParam);                                      break;                                  case CONST_Event_CANON_EOS_ObjectAddedEx:                                  case CONST_Event_ObjectAddedInSdram:                                  case CONST_Event_ObjectAdded:                                      {                                          try                                          {                                              MTPDataResponse objectdata =                                                  ExecuteReadDataEx(CONST_CMD_CANON_EOS_GetObjectInfo'                                                                    (uint) longeventParam);                                              string filename = "DSC_0000.JPG";                                              if (objectdata.Data != null)                                              {                                                  filename = Encoding.Unicode.GetString(objectdata.Data' 53' 12*2);                                                  if (filename.Contains("\0"))                                                      filename = filename.Split('\0')[0];                                              }                                              else                                              {                                                  Log.Error("Error getting file name");                                              }                                              Log.Debug("File transfer " + filename);                                              PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                                                                                {                                                                                    WiaImageItem = null'                                                                                    EventArgs =                                                                                        new PortableDeviceEventArgs(new PortableDeviceEventType                                                                                                                        ()                                                                                                                        {                                                                                                                            ObjectHandle                                                                                                                                =                                                                                                                                (                                                                                                                                uint                                                                                                                                )                                                                                                                                longeventParam                                                                                                                        })'                                                                                    CameraDevice = this'                                                                                    FileName = filename'                                                                                    Handle = (uint) longeventParam                                                                                };                                              OnPhotoCapture(this' args);                                          }                                          catch (Exception exception)                                          {                                              Log.Error("Object added error"' exception);                                          }                                      }                                      break;                                      //case CONST_Event_CaptureComplete:                                      //case CONST_Event_CaptureCompleteRecInSdram:                                      //    {                                      //        OnCaptureCompleted(this' new EventArgs());                                      //    }                                      //    break;                                      //case CONST_Event_ObsoleteEvent:                                      //    break;                                  default:                                      //Console.WriteLine("Unknown event code " + eventCode.ToString("X"));                                      Log.Debug("Unknown event code :" + eventCode.ToString("X") + "|" +                                                longeventParam.ToString("X"));                                      break;                              }
Magic Number,CameraControl.Devices.Canon,CanonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,GetLiveViewImage,The following statement contains a magic number: Monitor.TryEnter(Locker' 10)
Magic Number,CameraControl.Devices.Canon,CanonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,StartLiveView,The following statement contains a magic number: SetProperty(CONST_CMD_CANON_EOS_SetDevicePropValueEx' BitConverter.GetBytes(2)'                          CONST_PROP_EOS_LiveView);
Magic Number,CameraControl.Devices.Canon,CanonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,StartLiveView,The following statement contains a magic number: SetEOSProperty(CONST_PROP_EOS_LiveView' (uint) 2);
Magic Number,CameraControl.Devices.Canon,CanonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,SetEOSProperty,The following statement contains a magic number: retrynum > 5
Magic Number,CameraControl.Devices.Canon,CanonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonBase.cs,SetEOSProperty,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,CameraControl.Devices.Classes,DelayedDelegate,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Classes\DelayedDelegate.cs,DelayedDelegate,The following statement contains a magic number: runDelegates.Interval = 250;
Magic Number,CameraControl.Devices.Classes,HttpHelper,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Classes\HttpHelper.cs,DownLoadFileByWebRequest,The following statement contains a magic number: request.Timeout = 30000;
Magic Number,CameraControl.Devices.Classes,HttpHelper,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Classes\HttpHelper.cs,DownLoadFileByWebRequest,The following statement contains a magic number: byte[] buff = new byte[102400];
Magic Number,CameraControl.Devices.Classes,HttpHelper,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Classes\HttpHelper.cs,DownLoadFileByWebRequest,The following statement contains a magic number: device.TransferProgress = (uint)(totalsize/(double)size*100.0);
Magic Number,CameraControl.Devices.Classes,HttpHelper,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Classes\HttpHelper.cs,DownLoadFileByWebRequest,The following statement contains a magic number: (c = s.Read(buff' 0' 102400)) > 0
Magic Number,CameraControl.Devices.Classes,HttpHelper,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Classes\HttpHelper.cs,DownLoadFileByWebRequest,The following statement contains a magic number: device.TransferProgress = 100;
Magic Number,CameraControl.Devices.Classes,PropertyValue<T>,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Classes\PropertyValue.cs,OnValueChanged,The following statement contains a magic number: thread.Join(200);
Magic Number,CameraControl.Devices.Classes,PropertyValue<T>,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Classes\PropertyValue.cs,OnValueChangedThread,The following statement contains a magic number: int retrynum = 5;
Magic Number,CameraControl.Devices.Classes,PropertyValue<T>,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Classes\PropertyValue.cs,OnValueChangedThread,The following statement contains a magic number: T val = (T)objparams[2];
Magic Number,CameraControl.Devices.Classes,PropertyValue<T>,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Classes\PropertyValue.cs,SetValue,The following statement contains a magic number: typeof(T) == typeof(long) && ba.Length == 2 && SubType == typeof(UInt16)
Magic Number,CameraControl.Devices.Classes,PropertyValue<T>,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Classes\PropertyValue.cs,SetValue,The following statement contains a magic number: typeof(T) == typeof(long) && ba.Length == 2
Magic Number,CameraControl.Devices.Classes,PropertyValue<T>,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Classes\PropertyValue.cs,SetValue,The following statement contains a magic number: typeof(T) == typeof(long) && ba.Length == 4
Magic Number,CameraControl.Devices.Custom,CustomDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Custom\CustomDevice.cs,Init,The following statement contains a magic number: uint dataType = BitConverter.ToUInt16(result.Data' 2);
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD5,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD5.cs,NikonD5,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "64000"}'                  {34' "72000"}'                  {35' "81200"}'                  {36' "102400"}'                  {37' "Hi 0.3"}'                  {38' "Hi 0.5"}'                  {39' "Hi 0.7"}'                  {40' "Hi 1"}'                  {41' "Hi 2"}'                  {42' "Hi 3"}'                  {43' "Hi 4"}'                  {44' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD810,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD810.cs,NikonD810,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6400"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "Hi 0.3"}'                  {32' "Hi 0.5"}'                  {33' "Hi 0.7"}'                  {34' "Hi 1"}'                  {35' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD750,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD750.cs,NikonD750,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "Hi 0.3"}'                  {26' "Hi 0.5"}'                  {27' "Hi 0.7"}'                  {28' "Hi 1"}'                  {29' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD750,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD750.cs,NikonD750,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "Hi 0.3"}'                  {26' "Hi 0.5"}'                  {27' "Hi 0.7"}'                  {28' "Hi 1"}'                  {29' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD750,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD750.cs,NikonD750,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "Hi 0.3"}'                  {26' "Hi 0.5"}'                  {27' "Hi 0.7"}'                  {28' "Hi 1"}'                  {29' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD750,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD750.cs,NikonD750,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "Hi 0.3"}'                  {26' "Hi 0.5"}'                  {27' "Hi 0.7"}'                  {28' "Hi 1"}'                  {29' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD750,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD750.cs,NikonD750,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "Hi 0.3"}'                  {26' "Hi 0.5"}'                  {27' "Hi 0.7"}'                  {28' "Hi 1"}'                  {29' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD750,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD750.cs,NikonD750,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "Hi 0.3"}'                  {26' "Hi 0.5"}'                  {27' "Hi 0.7"}'                  {28' "Hi 1"}'                  {29' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD750,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD750.cs,NikonD750,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "Hi 0.3"}'                  {26' "Hi 0.5"}'                  {27' "Hi 0.7"}'                  {28' "Hi 1"}'                  {29' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD750,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD750.cs,NikonD750,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "Hi 0.3"}'                  {26' "Hi 0.5"}'                  {27' "Hi 0.7"}'                  {28' "Hi 1"}'                  {29' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD750,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD750.cs,NikonD750,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "Hi 0.3"}'                  {26' "Hi 0.5"}'                  {27' "Hi 0.7"}'                  {28' "Hi 1"}'                  {29' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD750,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD750.cs,NikonD750,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "Hi 0.3"}'                  {26' "Hi 0.5"}'                  {27' "Hi 0.7"}'                  {28' "Hi 1"}'                  {29' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD750,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD750.cs,NikonD750,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "Hi 0.3"}'                  {26' "Hi 0.5"}'                  {27' "Hi 0.7"}'                  {28' "Hi 1"}'                  {29' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD750,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD750.cs,NikonD750,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "Hi 0.3"}'                  {26' "Hi 0.5"}'                  {27' "Hi 0.7"}'                  {28' "Hi 1"}'                  {29' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD750,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD750.cs,NikonD750,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "Hi 0.3"}'                  {26' "Hi 0.5"}'                  {27' "Hi 0.7"}'                  {28' "Hi 1"}'                  {29' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD750,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD750.cs,NikonD750,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "Hi 0.3"}'                  {26' "Hi 0.5"}'                  {27' "Hi 0.7"}'                  {28' "Hi 1"}'                  {29' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD750,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD750.cs,NikonD750,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "Hi 0.3"}'                  {26' "Hi 0.5"}'                  {27' "Hi 0.7"}'                  {28' "Hi 1"}'                  {29' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD750,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD750.cs,NikonD750,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "Hi 0.3"}'                  {26' "Hi 0.5"}'                  {27' "Hi 0.7"}'                  {28' "Hi 1"}'                  {29' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD750,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD750.cs,NikonD750,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "Hi 0.3"}'                  {26' "Hi 0.5"}'                  {27' "Hi 0.7"}'                  {28' "Hi 1"}'                  {29' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD750,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD750.cs,NikonD750,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "Hi 0.3"}'                  {26' "Hi 0.5"}'                  {27' "Hi 0.7"}'                  {28' "Hi 1"}'                  {29' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD750,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD750.cs,NikonD750,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "Hi 0.3"}'                  {26' "Hi 0.5"}'                  {27' "Hi 0.7"}'                  {28' "Hi 1"}'                  {29' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD750,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD750.cs,NikonD750,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "Hi 0.3"}'                  {26' "Hi 0.5"}'                  {27' "Hi 0.7"}'                  {28' "Hi 1"}'                  {29' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD750,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD750.cs,NikonD750,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "Hi 0.3"}'                  {26' "Hi 0.5"}'                  {27' "Hi 0.7"}'                  {28' "Hi 1"}'                  {29' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD750,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD750.cs,NikonD750,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "Hi 0.3"}'                  {26' "Hi 0.5"}'                  {27' "Hi 0.7"}'                  {28' "Hi 1"}'                  {29' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD750,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD750.cs,NikonD750,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "Hi 0.3"}'                  {26' "Hi 0.5"}'                  {27' "Hi 0.7"}'                  {28' "Hi 1"}'                  {29' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD750,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD750.cs,NikonD750,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "Hi 0.3"}'                  {26' "Hi 0.5"}'                  {27' "Hi 0.7"}'                  {28' "Hi 1"}'                  {29' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD750,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD750.cs,NikonD750,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "Hi 0.3"}'                  {26' "Hi 0.5"}'                  {27' "Hi 0.7"}'                  {28' "Hi 1"}'                  {29' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD750,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD750.cs,NikonD750,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "Hi 0.3"}'                  {26' "Hi 0.5"}'                  {27' "Hi 0.7"}'                  {28' "Hi 1"}'                  {29' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD750,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD750.cs,NikonD750,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "Hi 0.3"}'                  {26' "Hi 0.5"}'                  {27' "Hi 0.7"}'                  {28' "Hi 1"}'                  {29' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD750,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD750.cs,NikonD750,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "Hi 0.3"}'                  {26' "Hi 0.5"}'                  {27' "Hi 0.7"}'                  {28' "Hi 1"}'                  {29' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD7500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7500.cs,NikonD7500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ7,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ7.cs,NikonZ7,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "100"}'                  {1' "125"}'                  {2' "140"}'                  {3' "160"}'                  {4' "200"}'                  {5' "250"}'                  {6' "280"}'                  {7' "320"}'                  {8' "400"}'                  {9' "500"}'                  {10' "560"}'                  {11' "640"}'                  {12' "800"}'                  {13' "1000"}'                  {14' "1100"}'                  {15' "1250"}'                  {16' "1600"}'                  {17' "2000"}'                  {18' "2200"}'                  {19' "2500"}'                  {20' "3200"}'                  {21' "4000"}'                  {22' "4500"}'                  {23' "5000"}'                  {24' "6400"}'                  {25' "8000"}'                  {26' "9000"}'                  {27' "10000"}'                  {28' "12800"}'                  {29' "16000"}'                  {30' "18000"}'                  {31' "20000"}'                  {32' "25600"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonZ6,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonZ6.cs,NikonZ6,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD850,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD850.cs,NikonD850,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "72"}'                  {1' "80"}'                  {2' "100"}'                  {3' "125"}'                  {4' "140"}'                  {5' "160"}'                  {6' "200"}'                  {7' "250"}'                  {8' "280"}'                  {9' "320"}'                  {10' "400"}'                  {11' "500"}'                  {12' "560"}'                  {13' "640"}'                  {14' "800"}'                  {15' "1000"}'                  {16' "1100"}'                  {17' "1250"}'                  {18' "1600"}'                  {19' "2000"}'                  {20' "2200"}'                  {21' "2500"}'                  {22' "3200"}'                  {23' "4000"}'                  {24' "4500"}'                  {25' "5000"}'                  {26' "6500"}'                  {27' "8000"}'                  {28' "9000"}'                  {29' "10000"}'                  {30' "12800"}'                  {31' "16000"}'                  {32' "18000"}'                  {33' "20000"}'                  {34' "25600"}'                  {35' "Hi 0.3"}'                  {36' "Hi 0.5"}'                  {37' "Hi 0.7"}'                  {38' "Hi 1"}'                  {39' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,NikonD500,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "8000"}'                  {22' "9000"}'                  {23' "10000"}'                  {24' "12800"}'                  {25' "16000"}'                  {26' "18000"}'                  {27' "20000"}'                  {28' "25600"}'                  {29' "32000"}'                  {30' "36000"}'                  {31' "40000"}'                  {32' "51200"}'                  {33' "Hi 0.3"}'                  {34' "Hi 0.5"}'                  {35' "Hi 0.7"}'                  {36' "Hi 1"}'                  {37' "Hi 2"}'                  {38' "Hi 3"}'                  {39' "Hi 4"}'                  {40' "Hi 5"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,InitCompressionSetting,The following statement contains a magic number: _csTable = new Dictionary<int' string>()              {                  {0' "JPEG (BASIC)"}'                  {1' "JPEG (BASIC*)"}'                  {2' "JPEG (NORMAL)"}'                  {3' "JPEG (NORMAL*)"}'                  {4' "JPEG (FINE)"}'                  {5' "JPEG (FINE*)"}'                  {6' "TIFF (RGB)"}'                  {7' "RAW"}'                  {8' "RAW + JPEG (BASIC)"}'                  {9' "RAW + JPEG (BASIC*)"}'                  {10' "RAW + JPEG (NORMAL)"}'                  {11' "RAW + JPEG (NORMAL*)"}'                  {12' "RAW + JPEG (FINE)"}'                  {13' "RAW + JPEG (FINE*)"}              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,InitCompressionSetting,The following statement contains a magic number: _csTable = new Dictionary<int' string>()              {                  {0' "JPEG (BASIC)"}'                  {1' "JPEG (BASIC*)"}'                  {2' "JPEG (NORMAL)"}'                  {3' "JPEG (NORMAL*)"}'                  {4' "JPEG (FINE)"}'                  {5' "JPEG (FINE*)"}'                  {6' "TIFF (RGB)"}'                  {7' "RAW"}'                  {8' "RAW + JPEG (BASIC)"}'                  {9' "RAW + JPEG (BASIC*)"}'                  {10' "RAW + JPEG (NORMAL)"}'                  {11' "RAW + JPEG (NORMAL*)"}'                  {12' "RAW + JPEG (FINE)"}'                  {13' "RAW + JPEG (FINE*)"}              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,InitCompressionSetting,The following statement contains a magic number: _csTable = new Dictionary<int' string>()              {                  {0' "JPEG (BASIC)"}'                  {1' "JPEG (BASIC*)"}'                  {2' "JPEG (NORMAL)"}'                  {3' "JPEG (NORMAL*)"}'                  {4' "JPEG (FINE)"}'                  {5' "JPEG (FINE*)"}'                  {6' "TIFF (RGB)"}'                  {7' "RAW"}'                  {8' "RAW + JPEG (BASIC)"}'                  {9' "RAW + JPEG (BASIC*)"}'                  {10' "RAW + JPEG (NORMAL)"}'                  {11' "RAW + JPEG (NORMAL*)"}'                  {12' "RAW + JPEG (FINE)"}'                  {13' "RAW + JPEG (FINE*)"}              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,InitCompressionSetting,The following statement contains a magic number: _csTable = new Dictionary<int' string>()              {                  {0' "JPEG (BASIC)"}'                  {1' "JPEG (BASIC*)"}'                  {2' "JPEG (NORMAL)"}'                  {3' "JPEG (NORMAL*)"}'                  {4' "JPEG (FINE)"}'                  {5' "JPEG (FINE*)"}'                  {6' "TIFF (RGB)"}'                  {7' "RAW"}'                  {8' "RAW + JPEG (BASIC)"}'                  {9' "RAW + JPEG (BASIC*)"}'                  {10' "RAW + JPEG (NORMAL)"}'                  {11' "RAW + JPEG (NORMAL*)"}'                  {12' "RAW + JPEG (FINE)"}'                  {13' "RAW + JPEG (FINE*)"}              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,InitCompressionSetting,The following statement contains a magic number: _csTable = new Dictionary<int' string>()              {                  {0' "JPEG (BASIC)"}'                  {1' "JPEG (BASIC*)"}'                  {2' "JPEG (NORMAL)"}'                  {3' "JPEG (NORMAL*)"}'                  {4' "JPEG (FINE)"}'                  {5' "JPEG (FINE*)"}'                  {6' "TIFF (RGB)"}'                  {7' "RAW"}'                  {8' "RAW + JPEG (BASIC)"}'                  {9' "RAW + JPEG (BASIC*)"}'                  {10' "RAW + JPEG (NORMAL)"}'                  {11' "RAW + JPEG (NORMAL*)"}'                  {12' "RAW + JPEG (FINE)"}'                  {13' "RAW + JPEG (FINE*)"}              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,InitCompressionSetting,The following statement contains a magic number: _csTable = new Dictionary<int' string>()              {                  {0' "JPEG (BASIC)"}'                  {1' "JPEG (BASIC*)"}'                  {2' "JPEG (NORMAL)"}'                  {3' "JPEG (NORMAL*)"}'                  {4' "JPEG (FINE)"}'                  {5' "JPEG (FINE*)"}'                  {6' "TIFF (RGB)"}'                  {7' "RAW"}'                  {8' "RAW + JPEG (BASIC)"}'                  {9' "RAW + JPEG (BASIC*)"}'                  {10' "RAW + JPEG (NORMAL)"}'                  {11' "RAW + JPEG (NORMAL*)"}'                  {12' "RAW + JPEG (FINE)"}'                  {13' "RAW + JPEG (FINE*)"}              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,InitCompressionSetting,The following statement contains a magic number: _csTable = new Dictionary<int' string>()              {                  {0' "JPEG (BASIC)"}'                  {1' "JPEG (BASIC*)"}'                  {2' "JPEG (NORMAL)"}'                  {3' "JPEG (NORMAL*)"}'                  {4' "JPEG (FINE)"}'                  {5' "JPEG (FINE*)"}'                  {6' "TIFF (RGB)"}'                  {7' "RAW"}'                  {8' "RAW + JPEG (BASIC)"}'                  {9' "RAW + JPEG (BASIC*)"}'                  {10' "RAW + JPEG (NORMAL)"}'                  {11' "RAW + JPEG (NORMAL*)"}'                  {12' "RAW + JPEG (FINE)"}'                  {13' "RAW + JPEG (FINE*)"}              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,InitCompressionSetting,The following statement contains a magic number: _csTable = new Dictionary<int' string>()              {                  {0' "JPEG (BASIC)"}'                  {1' "JPEG (BASIC*)"}'                  {2' "JPEG (NORMAL)"}'                  {3' "JPEG (NORMAL*)"}'                  {4' "JPEG (FINE)"}'                  {5' "JPEG (FINE*)"}'                  {6' "TIFF (RGB)"}'                  {7' "RAW"}'                  {8' "RAW + JPEG (BASIC)"}'                  {9' "RAW + JPEG (BASIC*)"}'                  {10' "RAW + JPEG (NORMAL)"}'                  {11' "RAW + JPEG (NORMAL*)"}'                  {12' "RAW + JPEG (FINE)"}'                  {13' "RAW + JPEG (FINE*)"}              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,InitCompressionSetting,The following statement contains a magic number: _csTable = new Dictionary<int' string>()              {                  {0' "JPEG (BASIC)"}'                  {1' "JPEG (BASIC*)"}'                  {2' "JPEG (NORMAL)"}'                  {3' "JPEG (NORMAL*)"}'                  {4' "JPEG (FINE)"}'                  {5' "JPEG (FINE*)"}'                  {6' "TIFF (RGB)"}'                  {7' "RAW"}'                  {8' "RAW + JPEG (BASIC)"}'                  {9' "RAW + JPEG (BASIC*)"}'                  {10' "RAW + JPEG (NORMAL)"}'                  {11' "RAW + JPEG (NORMAL*)"}'                  {12' "RAW + JPEG (FINE)"}'                  {13' "RAW + JPEG (FINE*)"}              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,InitCompressionSetting,The following statement contains a magic number: _csTable = new Dictionary<int' string>()              {                  {0' "JPEG (BASIC)"}'                  {1' "JPEG (BASIC*)"}'                  {2' "JPEG (NORMAL)"}'                  {3' "JPEG (NORMAL*)"}'                  {4' "JPEG (FINE)"}'                  {5' "JPEG (FINE*)"}'                  {6' "TIFF (RGB)"}'                  {7' "RAW"}'                  {8' "RAW + JPEG (BASIC)"}'                  {9' "RAW + JPEG (BASIC*)"}'                  {10' "RAW + JPEG (NORMAL)"}'                  {11' "RAW + JPEG (NORMAL*)"}'                  {12' "RAW + JPEG (FINE)"}'                  {13' "RAW + JPEG (FINE*)"}              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,InitCompressionSetting,The following statement contains a magic number: _csTable = new Dictionary<int' string>()              {                  {0' "JPEG (BASIC)"}'                  {1' "JPEG (BASIC*)"}'                  {2' "JPEG (NORMAL)"}'                  {3' "JPEG (NORMAL*)"}'                  {4' "JPEG (FINE)"}'                  {5' "JPEG (FINE*)"}'                  {6' "TIFF (RGB)"}'                  {7' "RAW"}'                  {8' "RAW + JPEG (BASIC)"}'                  {9' "RAW + JPEG (BASIC*)"}'                  {10' "RAW + JPEG (NORMAL)"}'                  {11' "RAW + JPEG (NORMAL*)"}'                  {12' "RAW + JPEG (FINE)"}'                  {13' "RAW + JPEG (FINE*)"}              };
Magic Number,CameraControl.Devices.Nikon,NikonD500,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD500.cs,InitCompressionSetting,The following statement contains a magic number: _csTable = new Dictionary<int' string>()              {                  {0' "JPEG (BASIC)"}'                  {1' "JPEG (BASIC*)"}'                  {2' "JPEG (NORMAL)"}'                  {3' "JPEG (NORMAL*)"}'                  {4' "JPEG (FINE)"}'                  {5' "JPEG (FINE*)"}'                  {6' "TIFF (RGB)"}'                  {7' "RAW"}'                  {8' "RAW + JPEG (BASIC)"}'                  {9' "RAW + JPEG (BASIC*)"}'                  {10' "RAW + JPEG (NORMAL)"}'                  {11' "RAW + JPEG (NORMAL*)"}'                  {12' "RAW + JPEG (FINE)"}'                  {13' "RAW + JPEG (FINE*)"}              };
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,NikonD600,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,NikonD600,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,NikonD600,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,NikonD600,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,NikonD600,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,NikonD600,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,NikonD600,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,NikonD600,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,NikonD600,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,NikonD600,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,NikonD600,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,NikonD600,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,NikonD600,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,NikonD600,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,NikonD600,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,NikonD600,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,NikonD600,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,NikonD600,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,NikonD600,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,NikonD600,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,NikonD600,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,NikonD600,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,NikonD600,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,NikonD600,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,InitExposureDelay,The following statement contains a magic number: res.AddValues("3 sec"' 3);
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,InitExposureDelay,The following statement contains a magic number: res.AddValues("2 sec"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReInitShutterSpeed,The following statement contains a magic number: byte datasize = 4;
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReInitShutterSpeed,The following statement contains a magic number: int type = BitConverter.ToInt16(result.Data' 2);
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReInitShutterSpeed,The following statement contains a magic number: byte formFlag = result.Data[(2 * datasize) + 5];
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReInitShutterSpeed,The following statement contains a magic number: byte formFlag = result.Data[(2 * datasize) + 5];
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReInitShutterSpeed,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReInitShutterSpeed,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReInitShutterSpeed,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReInitShutterSpeed,The following statement contains a magic number: byte datasize = 4;
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReInitShutterSpeed,The following statement contains a magic number: int type = BitConverter.ToInt16(result.Data' 2);
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReInitShutterSpeed,The following statement contains a magic number: byte formFlag = result.Data[(2 * datasize) + 5];
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReInitShutterSpeed,The following statement contains a magic number: byte formFlag = result.Data[(2 * datasize) + 5];
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReInitShutterSpeed,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReInitShutterSpeed,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReInitShutterSpeed,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReadDeviceProperties,The following statement contains a magic number: switch (prop)                  {                      case CONST_PROP_Fnumber:                          //FNumber.SetValue(_stillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_Fnumber));                          ReInitFNumber(false);                          break;                      case CONST_PROP_MovieFnumber:                          //FNumber.SetValue(_stillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_Fnumber));                          ReInitFNumber(false);                          break;                      case CONST_PROP_ExposureIndex:                          NormalIsoNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                              CONST_PROP_ExposureIndex)' false);                          break;                      //case CONST_PROP_ExposureIndexEx:                      //    NormalIsoNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                      //                                                        CONST_PROP_ExposureIndexEx)' false);                      //    break;                      case CONST_PROP_MovieExposureIndex:                          MovieFNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                              CONST_PROP_MovieExposureIndex)' false);                          break;                      //case CONST_PROP_ExposureTime:                      //    NormalShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                      //                                                           CONST_PROP_ExposureTime)' false);                      //    break;                      case CONST_PROP_ShutterSpeed:                          NormalShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                 CONST_PROP_ShutterSpeed)' false);                          break;                      case CONST_PROP_MovieShutterSpeed:                          MovieShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                 CONST_PROP_MovieShutterSpeed)' false);                          break;                      case CONST_PROP_WhiteBalance:                          WhiteBalance.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                 CONST_PROP_WhiteBalance)' false);                          break;                      case CONST_PROP_ExposureProgramMode:                          Mode.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                         CONST_PROP_ExposureProgramMode)' true);                          break;                      case CONST_PROP_ExposureBiasCompensation:                          NormalExposureCompensation.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                         CONST_PROP_ExposureBiasCompensation)'                                                        false);                          break;                      case CONST_PROP_MovieExposureBiasCompensation:                          MovieExposureCompensation.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                         CONST_PROP_MovieExposureBiasCompensation)'                                                        false);                          break;                        case CONST_PROP_CompressionSetting:                          CompressionSetting.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                       CONST_PROP_CompressionSetting)'                                                      false);                          break;                      case CONST_PROP_ExposureMeteringMode:                          ExposureMeteringMode.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                         CONST_PROP_ExposureMeteringMode)'                                                        false);                          break;                      case CONST_PROP_AFModeSelect:                          NormalFocusMode.SetValue(                              StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AFModeSelect)'                              false);                          NormalFocusMode.IsEnabled = NormalFocusMode.NumericValue != 3;                          break;                      case CONST_PROP_AfModeAtLiveView:                          LiveViewFocusMode.SetValue(                              StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AfModeAtLiveView)'                              false);                          LiveViewFocusMode.IsEnabled = LiveViewFocusMode.NumericValue != 3;                          break;                      case CONST_PROP_BatteryLevel:                          {                              var data = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_BatteryLevel);                              if (data.Data != null && data.Data.Length > 0)                                  Battery = data.Data[0];                          }                          break;                      case CONST_PROP_ExposureIndicateStatus:                          {                              var data =                                  StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                   CONST_PROP_ExposureIndicateStatus);                              if (data.Data != null && data.Data.Length > 0)                              {                                  sbyte i =                                      unchecked(                                          (sbyte)data.Data[0]);                                  ExposureStatus = Convert.ToInt32(i);                              }                          }                          break;                      case CONST_PROP_LiveViewStatus:                          {                              MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewStatus);                              if (response.Data != null && response.Data.Length > 0)                              {                                  LiveViewOn = response.Data[0] == 1;                              }                              else                              {                                  LiveViewOn = false;                              }                              break;                          }                      case CONST_PROP_LiveViewSelector:                          {                              MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewSelector);                              if (response.Data != null && response.Data.Length > 0)                              {                                  LiveViewMovieOn = response.Data[0] == 1;                              }                              else                              {                                  LiveViewMovieOn = false;                              }                              break;                          }                      default:                          // imrovements from: http://digicamcontrol.com/forum/testingbug-reports/buglet-nikonbasecs                          foreach (PropertyValue<long> advancedProperty in AdvancedProperties.Where(advancedProperty => advancedProperty.Code == prop))                          {                              if (advancedProperty.Name == "Image Size")                              {                                  var val = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                      advancedProperty.Code);                                  if (val.Data != null && val.Data.Length > 0)                                  {                                      advancedProperty.SetValue(                                          Encoding.Unicode.GetString(val.Data' 1' 20)' false);                                  }                              }                              else                              {                                  advancedProperty.SetValue(                                      StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                          advancedProperty.Code)' false);                              }                          }                          break;                  }
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReadDeviceProperties,The following statement contains a magic number: switch (prop)                  {                      case CONST_PROP_Fnumber:                          //FNumber.SetValue(_stillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_Fnumber));                          ReInitFNumber(false);                          break;                      case CONST_PROP_MovieFnumber:                          //FNumber.SetValue(_stillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_Fnumber));                          ReInitFNumber(false);                          break;                      case CONST_PROP_ExposureIndex:                          NormalIsoNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                              CONST_PROP_ExposureIndex)' false);                          break;                      //case CONST_PROP_ExposureIndexEx:                      //    NormalIsoNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                      //                                                        CONST_PROP_ExposureIndexEx)' false);                      //    break;                      case CONST_PROP_MovieExposureIndex:                          MovieFNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                              CONST_PROP_MovieExposureIndex)' false);                          break;                      //case CONST_PROP_ExposureTime:                      //    NormalShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                      //                                                           CONST_PROP_ExposureTime)' false);                      //    break;                      case CONST_PROP_ShutterSpeed:                          NormalShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                 CONST_PROP_ShutterSpeed)' false);                          break;                      case CONST_PROP_MovieShutterSpeed:                          MovieShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                 CONST_PROP_MovieShutterSpeed)' false);                          break;                      case CONST_PROP_WhiteBalance:                          WhiteBalance.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                 CONST_PROP_WhiteBalance)' false);                          break;                      case CONST_PROP_ExposureProgramMode:                          Mode.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                         CONST_PROP_ExposureProgramMode)' true);                          break;                      case CONST_PROP_ExposureBiasCompensation:                          NormalExposureCompensation.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                         CONST_PROP_ExposureBiasCompensation)'                                                        false);                          break;                      case CONST_PROP_MovieExposureBiasCompensation:                          MovieExposureCompensation.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                         CONST_PROP_MovieExposureBiasCompensation)'                                                        false);                          break;                        case CONST_PROP_CompressionSetting:                          CompressionSetting.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                       CONST_PROP_CompressionSetting)'                                                      false);                          break;                      case CONST_PROP_ExposureMeteringMode:                          ExposureMeteringMode.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                         CONST_PROP_ExposureMeteringMode)'                                                        false);                          break;                      case CONST_PROP_AFModeSelect:                          NormalFocusMode.SetValue(                              StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AFModeSelect)'                              false);                          NormalFocusMode.IsEnabled = NormalFocusMode.NumericValue != 3;                          break;                      case CONST_PROP_AfModeAtLiveView:                          LiveViewFocusMode.SetValue(                              StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AfModeAtLiveView)'                              false);                          LiveViewFocusMode.IsEnabled = LiveViewFocusMode.NumericValue != 3;                          break;                      case CONST_PROP_BatteryLevel:                          {                              var data = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_BatteryLevel);                              if (data.Data != null && data.Data.Length > 0)                                  Battery = data.Data[0];                          }                          break;                      case CONST_PROP_ExposureIndicateStatus:                          {                              var data =                                  StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                   CONST_PROP_ExposureIndicateStatus);                              if (data.Data != null && data.Data.Length > 0)                              {                                  sbyte i =                                      unchecked(                                          (sbyte)data.Data[0]);                                  ExposureStatus = Convert.ToInt32(i);                              }                          }                          break;                      case CONST_PROP_LiveViewStatus:                          {                              MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewStatus);                              if (response.Data != null && response.Data.Length > 0)                              {                                  LiveViewOn = response.Data[0] == 1;                              }                              else                              {                                  LiveViewOn = false;                              }                              break;                          }                      case CONST_PROP_LiveViewSelector:                          {                              MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewSelector);                              if (response.Data != null && response.Data.Length > 0)                              {                                  LiveViewMovieOn = response.Data[0] == 1;                              }                              else                              {                                  LiveViewMovieOn = false;                              }                              break;                          }                      default:                          // imrovements from: http://digicamcontrol.com/forum/testingbug-reports/buglet-nikonbasecs                          foreach (PropertyValue<long> advancedProperty in AdvancedProperties.Where(advancedProperty => advancedProperty.Code == prop))                          {                              if (advancedProperty.Name == "Image Size")                              {                                  var val = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                      advancedProperty.Code);                                  if (val.Data != null && val.Data.Length > 0)                                  {                                      advancedProperty.SetValue(                                          Encoding.Unicode.GetString(val.Data' 1' 20)' false);                                  }                              }                              else                              {                                  advancedProperty.SetValue(                                      StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                          advancedProperty.Code)' false);                              }                          }                          break;                  }
Magic Number,CameraControl.Devices.Nikon,NikonD600,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600.cs,ReadDeviceProperties,The following statement contains a magic number: switch (prop)                  {                      case CONST_PROP_Fnumber:                          //FNumber.SetValue(_stillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_Fnumber));                          ReInitFNumber(false);                          break;                      case CONST_PROP_MovieFnumber:                          //FNumber.SetValue(_stillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_Fnumber));                          ReInitFNumber(false);                          break;                      case CONST_PROP_ExposureIndex:                          NormalIsoNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                              CONST_PROP_ExposureIndex)' false);                          break;                      //case CONST_PROP_ExposureIndexEx:                      //    NormalIsoNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                      //                                                        CONST_PROP_ExposureIndexEx)' false);                      //    break;                      case CONST_PROP_MovieExposureIndex:                          MovieFNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                              CONST_PROP_MovieExposureIndex)' false);                          break;                      //case CONST_PROP_ExposureTime:                      //    NormalShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                      //                                                           CONST_PROP_ExposureTime)' false);                      //    break;                      case CONST_PROP_ShutterSpeed:                          NormalShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                 CONST_PROP_ShutterSpeed)' false);                          break;                      case CONST_PROP_MovieShutterSpeed:                          MovieShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                 CONST_PROP_MovieShutterSpeed)' false);                          break;                      case CONST_PROP_WhiteBalance:                          WhiteBalance.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                 CONST_PROP_WhiteBalance)' false);                          break;                      case CONST_PROP_ExposureProgramMode:                          Mode.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                         CONST_PROP_ExposureProgramMode)' true);                          break;                      case CONST_PROP_ExposureBiasCompensation:                          NormalExposureCompensation.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                         CONST_PROP_ExposureBiasCompensation)'                                                        false);                          break;                      case CONST_PROP_MovieExposureBiasCompensation:                          MovieExposureCompensation.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                         CONST_PROP_MovieExposureBiasCompensation)'                                                        false);                          break;                        case CONST_PROP_CompressionSetting:                          CompressionSetting.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                       CONST_PROP_CompressionSetting)'                                                      false);                          break;                      case CONST_PROP_ExposureMeteringMode:                          ExposureMeteringMode.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                         CONST_PROP_ExposureMeteringMode)'                                                        false);                          break;                      case CONST_PROP_AFModeSelect:                          NormalFocusMode.SetValue(                              StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AFModeSelect)'                              false);                          NormalFocusMode.IsEnabled = NormalFocusMode.NumericValue != 3;                          break;                      case CONST_PROP_AfModeAtLiveView:                          LiveViewFocusMode.SetValue(                              StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AfModeAtLiveView)'                              false);                          LiveViewFocusMode.IsEnabled = LiveViewFocusMode.NumericValue != 3;                          break;                      case CONST_PROP_BatteryLevel:                          {                              var data = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_BatteryLevel);                              if (data.Data != null && data.Data.Length > 0)                                  Battery = data.Data[0];                          }                          break;                      case CONST_PROP_ExposureIndicateStatus:                          {                              var data =                                  StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                   CONST_PROP_ExposureIndicateStatus);                              if (data.Data != null && data.Data.Length > 0)                              {                                  sbyte i =                                      unchecked(                                          (sbyte)data.Data[0]);                                  ExposureStatus = Convert.ToInt32(i);                              }                          }                          break;                      case CONST_PROP_LiveViewStatus:                          {                              MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewStatus);                              if (response.Data != null && response.Data.Length > 0)                              {                                  LiveViewOn = response.Data[0] == 1;                              }                              else                              {                                  LiveViewOn = false;                              }                              break;                          }                      case CONST_PROP_LiveViewSelector:                          {                              MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewSelector);                              if (response.Data != null && response.Data.Length > 0)                              {                                  LiveViewMovieOn = response.Data[0] == 1;                              }                              else                              {                                  LiveViewMovieOn = false;                              }                              break;                          }                      default:                          // imrovements from: http://digicamcontrol.com/forum/testingbug-reports/buglet-nikonbasecs                          foreach (PropertyValue<long> advancedProperty in AdvancedProperties.Where(advancedProperty => advancedProperty.Code == prop))                          {                              if (advancedProperty.Name == "Image Size")                              {                                  var val = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                      advancedProperty.Code);                                  if (val.Data != null && val.Data.Length > 0)                                  {                                      advancedProperty.SetValue(                                          Encoding.Unicode.GetString(val.Data' 1' 20)' false);                                  }                              }                              else                              {                                  advancedProperty.SetValue(                                      StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                          advancedProperty.Code)' false);                              }                          }                          break;                  }
Magic Number,CameraControl.Devices.Nikon,NikonD7100,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LiveViewImageWidth = ToInt16(result' 8);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LiveViewImageHeight = ToInt16(result' 10);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.ImageWidth = ToInt16(result' 12);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.ImageHeight = ToInt16(result' 14);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusFrameXSize = ToInt16(result' 24);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusFrameYSize = ToInt16(result' 26);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusX = ToInt16(result' 28);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusY = ToInt16(result' 30);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.Focused = result[48] != 1;
Magic Number,CameraControl.Devices.Nikon,NikonD7100,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.MovieIsRecording = result[68] == 1;
Magic Number,CameraControl.Devices.Nikon,NikonD7100,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.MovieTimeRemain = ToDeciaml(result' 64);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.Rotation = -90;
Magic Number,CameraControl.Devices.Nikon,NikonD7100,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: result[37] == 1
Magic Number,CameraControl.Devices.Nikon,NikonD7100,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.Rotation = 90;
Magic Number,CameraControl.Devices.Nikon,NikonD7100,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: result[37] == 2
Magic Number,CameraControl.Devices.Nikon,NikonD7100,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: result[37] == 2
Magic Number,CameraControl.Devices.Nikon,NikonD7100,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LevelAngleRolling = ToInt16(result' 52);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundL = (int)(result[352] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundL = (int)(result[352] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundL = (int)(result[352] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundR = (int)(result[353] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundR = (int)(result[353] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundR = (int)(result[353] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundL = (int)(result[354] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundL = (int)(result[354] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundL = (int)(result[354] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundR = (int)(result[355] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundR = (int)(result[355] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD7100,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD7100.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundR = (int)(result[355] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SlowDownEventTimer,The following statement contains a magic number: _timer.Interval = 1000/10;
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SlowDownEventTimer,The following statement contains a magic number: _timer.Interval = 1000/10;
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SpeedUpEventTimer,The following statement contains a magic number: _timer.Interval = 1000/10;
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SpeedUpEventTimer,The following statement contains a magic number: _timer.Interval = 1000/10;
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetPictureControl,The following statement contains a magic number: control.CustomFlag = result.Data[2];
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetPictureControl,The following statement contains a magic number: string name = Encoding.ASCII.GetString(result.Data' 3' 20);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetPictureControl,The following statement contains a magic number: string name = Encoding.ASCII.GetString(result.Data' 3' 20);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetPictureControl,The following statement contains a magic number: control.QuickAdjustFlag = result.Data[23];
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetPictureControl,The following statement contains a magic number: control.QuickAdjust = (sbyte) result.Data[24];
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetPictureControl,The following statement contains a magic number: control.Saturation = (sbyte) result.Data[25];
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetPictureControl,The following statement contains a magic number: control.Hue = (sbyte) result.Data[26];
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetPictureControl,The following statement contains a magic number: control.Sharpening = (sbyte) result.Data[27];
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetPictureControl,The following statement contains a magic number: control.Contrast = (sbyte) result.Data[28];
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetPictureControl,The following statement contains a magic number: control.Brightness = (sbyte) result.Data[29];
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetPictureControl,The following statement contains a magic number: control.CustomCurveFlag = result.Data[30];
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetPictureControl,The following statement contains a magic number: result.Data.CopyTo(control.CustomCurveData' 31);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetPictureControl,The following statement contains a magic number: result.Data != null && result.Data.Length > 30
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,Init,The following statement contains a magic number: SerialNumber = ser.Substring(0' 7);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,Init,The following statement contains a magic number: SerialNumber =  ser.Substring(ser.Length-7'7);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,Init,The following statement contains a magic number: SerialNumber =  ser.Substring(ser.Length-7'7);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,Init,The following statement contains a magic number: ser != null && ser.Length >= 7
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ActiveSlot,The following statement contains a magic number: res.AddValues("SD slot"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ActiveSlot,The following statement contains a magic number: res.AddValues("CF slot & SD slot"' 3);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,FlashSyncSpeed,The following statement contains a magic number: res.AddValues("1/250 sec."' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,FlashSyncSpeed,The following statement contains a magic number: res.AddValues("1/200 sec."' 3);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,FlashSyncSpeed,The following statement contains a magic number: res.AddValues("1/160 sec."' 4);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,FlashSyncSpeed,The following statement contains a magic number: res.AddValues("1/125 sec."' 5);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,FlashSyncSpeed,The following statement contains a magic number: res.AddValues("1/100 sec."' 6);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,FlashSyncSpeed,The following statement contains a magic number: res.AddValues("1/80 sec."' 7);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,FlashSyncSpeed,The following statement contains a magic number: res.AddValues("1/60 sec."' 8);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,HDRSmoothing,The following statement contains a magic number: res.AddValues("Low"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,HDRSmoothing,The following statement contains a magic number: res.AddValues("Auto"' 3);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,HDRSmoothing,The following statement contains a magic number: res.AddValues("Extra high"' 4);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,HDREv,The following statement contains a magic number: res.AddValues("2 EV"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,HDREv,The following statement contains a magic number: res.AddValues("3 EV"' 3);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,HDRMode,The following statement contains a magic number: res.AddValues("ON (sequence)"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ActiveDLighting,The following statement contains a magic number: res.AddValues("Normal"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ActiveDLighting,The following statement contains a magic number: res.AddValues("Low"' 3);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ActiveDLighting,The following statement contains a magic number: res.AddValues("Not performed"' 4);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ActiveDLighting,The following statement contains a magic number: res.AddValues("Auto"' 5);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,CaptureAreaCrop,The following statement contains a magic number: res.AddValues("5:4 (30x24)"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,CaptureAreaCrop,The following statement contains a magic number: res.AddValues("1.2x (30x20)"' 3);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,FlashCompensation,The following statement contains a magic number: res.AddValues("+"+Decimal.Round(i/6' 1).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"))' (long) i);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,FlashCompensation,The following statement contains a magic number: i <= 18
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,CenterWeightedExRange,The following statement contains a magic number: res.AddValues("10 mm"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,CenterWeightedExRange,The following statement contains a magic number: res.AddValues("10 mm"' 3);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,CenterWeightedExRange,The following statement contains a magic number: res.AddValues("Average on the entire screen"' 4);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitAutoIsoHight,The following statement contains a magic number: int type = BitConverter.ToInt16(result.Data' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitAutoIsoHight,The following statement contains a magic number: byte formFlag = result.Data[(2*datasize) + 5];
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitAutoIsoHight,The following statement contains a magic number: byte formFlag = result.Data[(2*datasize) + 5];
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitAutoIsoHight,The following statement contains a magic number: byte defval = result.Data[datasize + 5];
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbTuneFluorescentType,The following statement contains a magic number: PropertyValue<long> res = new PropertyValue<long>()                                            {                                                Name = "Fluorescent light type"'                                                IsEnabled = WhiteBalance.NumericValue == 5'                                                Code = CONST_PROP_WbTuneFluorescentType'                                                SubType = typeof (byte)'                                                DisableIfWrongValue = false                                            };
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbTuneFluorescentType,The following statement contains a magic number: res.AddValues("Warm white fluorescent lamp"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbTuneFluorescentType,The following statement contains a magic number: res.AddValues("White fluorescent lamp"' 3);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbTuneFluorescentType,The following statement contains a magic number: res.AddValues("Day white fluorescent lamp"' 4);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbTuneFluorescentType,The following statement contains a magic number: res.AddValues("Daylight fluorescent lamp"' 5);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbTuneFluorescentType,The following statement contains a magic number: res.AddValues("High color-temperature mercury lamp"' 6);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: PropertyValue<long> res = new PropertyValue<long>()              {                  Name = "Temperature"'                  IsEnabled = WhiteBalance.NumericValue == 32786'                  Code = CONST_PROP_WbColorTemp'                  SubType = typeof (byte)'                  DisableIfWrongValue = false              };
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("2630 K"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("2700 K"' 3);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("2780 K"' 4);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("2860 K"' 5);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("2940 K"' 6);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("3030 K"' 7);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("3130 K"' 8);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("3230 K"' 9);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("3330 K"' 10);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("3450 K"' 11);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("3570 K"' 12);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("3700 K"' 13);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("3850 K"' 14);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("4000 K"' 15);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("4170 K"' 16);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("4350 K"' 17);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("4550 K"' 18);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("4760 K"' 19);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("5000 K"' 20);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("5260 K"' 21);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("5560 K"' 22);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("5880 K"' 23);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("6250 K"' 24);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("6670 K"' 25);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("7140 K"' 26);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("7690 K"' 27);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("8330 K"' 28);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("9090 K"' 29);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWbColorTemp,The following statement contains a magic number: res.AddValues("10000 K"' 30);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitPictControl,The following statement contains a magic number: res.AddValues("Neutral"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitPictControl,The following statement contains a magic number: res.AddValues("Vivid"' 3);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitPictControl,The following statement contains a magic number: res.AddValues("Monochrome"' 4);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitPictControl,The following statement contains a magic number: res.AddValues("Portrait"' 5);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitPictControl,The following statement contains a magic number: res.AddValues("Landscape"' 6);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitPictControl,The following statement contains a magic number: i < 210
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitImageSize,The following statement contains a magic number: res.AddValues(Encoding.Unicode.GetString(result.Data' 51' 20)' 0);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitImageSize,The following statement contains a magic number: res.AddValues(Encoding.Unicode.GetString(result.Data' 51' 20)' 0);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitImageSize,The following statement contains a magic number: res.AddValues(Encoding.Unicode.GetString(result.Data' 72' 20)' 0);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitImageSize,The following statement contains a magic number: res.AddValues(Encoding.Unicode.GetString(result.Data' 72' 20)' 0);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitImageSize,The following statement contains a magic number: res.AddValues(Encoding.Unicode.GetString(result.Data' 93' 20)' 0);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitImageSize,The following statement contains a magic number: res.AddValues(Encoding.Unicode.GetString(result.Data' 93' 20)' 0);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitImageSize,The following statement contains a magic number: res.SetValue(Encoding.Unicode.GetString(result.Data' 27' 20)' false);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitImageSize,The following statement contains a magic number: res.SetValue(Encoding.Unicode.GetString(result.Data' 27' 20)' false);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitImageSize,The following statement contains a magic number: result.Data != null && result.Data.Length > 112
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ImageSize_ValueChanged,The following statement contains a magic number: List<byte> vals = new List<byte>() {10};
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitRawQuality,The following statement contains a magic number: res.AddValues("Uncompressed RAW"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitBurstNumber,The following statement contains a magic number: i < 100
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitNRHiIso,The following statement contains a magic number: res.AddValues("Normal"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitNRHiIso,The following statement contains a magic number: res.AddValues("High"' 3);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitOther,The following statement contains a magic number: LiveViewImageZoomRatio.AddValues("33%"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitOther,The following statement contains a magic number: LiveViewImageZoomRatio.AddValues("50%"' 3);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitOther,The following statement contains a magic number: LiveViewImageZoomRatio.AddValues("66%"' 4);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitOther,The following statement contains a magic number: LiveViewImageZoomRatio.AddValues("100%"' 5);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitOther,The following statement contains a magic number: LiveViewImageZoomRatio.AddValues("200%"' 6);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitIso,The following statement contains a magic number: UInt16 defval = BitConverter.ToUInt16(result.Data' 7);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitIso,The following statement contains a magic number: UInt16 val = BitConverter.ToUInt16(result.Data' 12 + i);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitIso,The following statement contains a magic number: i < result.Data.Length - 12
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitIso,The following statement contains a magic number: UInt16 defval = BitConverter.ToUInt16(result.Data' 7);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitIso,The following statement contains a magic number: UInt16 val = BitConverter.ToUInt16(result.Data' 12 + i);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitIso,The following statement contains a magic number: i < result.Data.Length - 12
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: byte datasize = 4;
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: int type = BitConverter.ToInt16(result.Data' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: byte formFlag = result.Data[(2 * datasize) + 5];
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: byte formFlag = result.Data[(2 * datasize) + 5];
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: byte datasize = 4;
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: int type = BitConverter.ToInt16(result.Data' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: byte formFlag = result.Data[(2 * datasize) + 5];
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: byte formFlag = result.Data[(2 * datasize) + 5];
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitShutterSpeed,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitMode,The following statement contains a magic number: byte datasize = 2;
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitMode,The following statement contains a magic number: int type = BitConverter.ToInt16(result.Data' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitMode,The following statement contains a magic number: byte formFlag = result.Data[(2 * datasize) + 5];
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitMode,The following statement contains a magic number: byte formFlag = result.Data[(2 * datasize) + 5];
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitMode,The following statement contains a magic number: UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitMode,The following statement contains a magic number: UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitMode,The following statement contains a magic number: UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitMode,The following statement contains a magic number: UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitMode,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitMode,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitMode,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: const byte datasize = 2;
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: int type = BitConverter.ToInt16(result.Data' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: byte formFlag = result.Data[(2*datasize) + 5];
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: byte formFlag = result.Data[(2*datasize) + 5];
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: string s =  (val/100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: i < result.Data.Length - ((2*datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: i < result.Data.Length - ((2*datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: i < result.Data.Length - ((2*datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: int type = BitConverter.ToInt16(result.Data' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: byte formFlag = result.Data[(2 * datasize) + 5];
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: byte formFlag = result.Data[(2 * datasize) + 5];
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: UInt16 val = BitConverter.ToUInt16(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: string s = (val / 100.0).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReInitFNumber,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWhiteBalance,The following statement contains a magic number: byte datasize = 2;
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWhiteBalance,The following statement contains a magic number: int type = BitConverter.ToInt16(result.Data' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWhiteBalance,The following statement contains a magic number: byte formFlag = result.Data[(2*datasize) + 5];
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWhiteBalance,The following statement contains a magic number: byte formFlag = result.Data[(2*datasize) + 5];
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWhiteBalance,The following statement contains a magic number: UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWhiteBalance,The following statement contains a magic number: UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWhiteBalance,The following statement contains a magic number: UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWhiteBalance,The following statement contains a magic number: UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWhiteBalance,The following statement contains a magic number: i < result.Data.Length - ((2*datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWhiteBalance,The following statement contains a magic number: i < result.Data.Length - ((2*datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitWhiteBalance,The following statement contains a magic number: i < result.Data.Length - ((2*datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,WhiteBalance_ValueChanged,The following statement contains a magic number: AdvancedProperties[13].IsEnabled = val == 5;
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,WhiteBalance_ValueChanged,The following statement contains a magic number: AdvancedProperties[13].IsEnabled = val == 5;
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,WhiteBalance_ValueChanged,The following statement contains a magic number: AdvancedProperties.Count > 13
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,WhiteBalance_ValueChanged,The following statement contains a magic number: AdvancedProperties[14].IsEnabled = val == 32786;
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,WhiteBalance_ValueChanged,The following statement contains a magic number: AdvancedProperties[14].IsEnabled = val == 32786;
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,WhiteBalance_ValueChanged,The following statement contains a magic number: AdvancedProperties.Count > 14
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: byte datasize = 2;
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: Int16 defval = BitConverter.ToInt16(result.Data' datasize + 5);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: Int16 val = BitConverter.ToInt16(result.Data' ((2*datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: Int16 val = BitConverter.ToInt16(result.Data' ((2*datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: Int16 val = BitConverter.ToInt16(result.Data' ((2*datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: string s = Decimal.Round(d/1000' 1).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: i < result.Data.Length - ((2*datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: i < result.Data.Length - ((2*datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: i < result.Data.Length - ((2*datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: byte datasize = 2;
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: Int16 defval = BitConverter.ToInt16(result.Data' datasize + 5);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: Int16 val = BitConverter.ToInt16(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: Int16 val = BitConverter.ToInt16(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: Int16 val = BitConverter.ToInt16(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: string s = Decimal.Round(d / 1000' 1).ToString("0.0"' CultureInfo.CreateSpecificCulture("en-US"));
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureCompensation,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitCompressionSetting,The following statement contains a magic number: int type = BitConverter.ToInt16(result.Data' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitCompressionSetting,The following statement contains a magic number: byte formFlag = result.Data[(2 * datasize) + 5];
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitCompressionSetting,The following statement contains a magic number: byte formFlag = result.Data[(2 * datasize) + 5];
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitCompressionSetting,The following statement contains a magic number: byte defval = result.Data[datasize + 5];
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitCompressionSetting,The following statement contains a magic number: byte val = result.Data[((2 * datasize) + 6 + 2) + i];
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitCompressionSetting,The following statement contains a magic number: byte val = result.Data[((2 * datasize) + 6 + 2) + i];
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitCompressionSetting,The following statement contains a magic number: byte val = result.Data[((2 * datasize) + 6 + 2) + i];
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitCompressionSetting,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitCompressionSetting,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitCompressionSetting,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureMeteringMode,The following statement contains a magic number: byte datasize = 2;
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureMeteringMode,The following statement contains a magic number: UInt16 defval = BitConverter.ToUInt16(result.Data' datasize + 5);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureMeteringMode,The following statement contains a magic number: UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureMeteringMode,The following statement contains a magic number: UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureMeteringMode,The following statement contains a magic number: UInt16 val = BitConverter.ToUInt16(result.Data' ((2*datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureMeteringMode,The following statement contains a magic number: i < result.Data.Length - ((2*datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureMeteringMode,The following statement contains a magic number: i < result.Data.Length - ((2*datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitExposureMeteringMode,The following statement contains a magic number: i < result.Data.Length - ((2*datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitFocusMode,The following statement contains a magic number: NormalFocusMode.AddValues("AF-A"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitFocusMode,The following statement contains a magic number: NormalFocusMode.AddValues("MF (hard)"' 3);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitFocusMode,The following statement contains a magic number: NormalFocusMode.AddValues("MF (soft)"' 4);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitFocusMode,The following statement contains a magic number: LiveViewFocusMode.AddValues("AF-F"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitFocusMode,The following statement contains a magic number: LiveViewFocusMode.AddValues("MF (hard)"' 3);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,InitFocusMode,The following statement contains a magic number: LiveViewFocusMode.AddValues("MF (soft)"' 4);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetLiveViewImage,The following statement contains a magic number: const int headerSize = 384;
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetLiveViewImage,The following statement contains a magic number: viewData.ImageDataPosition = 384;
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetLiveViewImage,The following statement contains a magic number: Monitor.TryEnter(Locker' 10)
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LiveViewImageHeight = ToInt16(result' 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.ImageWidth = ToInt16(result' 4);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.ImageHeight = ToInt16(result' 6);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusFrameXSize = ToInt16(result' 16);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusFrameYSize = ToInt16(result' 18);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusX = ToInt16(result' 20);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusY = ToInt16(result' 22);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.MovieTimeRemain = ToDeciaml(result' 56);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.Focused = result[40] != 1;
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.Rotation = -90;
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetAdditionalLiveViewData,The following statement contains a magic number: result[29] == 1
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.Rotation = 90;
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetAdditionalLiveViewData,The following statement contains a magic number: result[29] == 2
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetAdditionalLiveViewData,The following statement contains a magic number: result[29] == 2
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.MovieIsRecording = result[60] == 1;
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,Focus,The following statement contains a magic number: switch (direction)              {                  case FocusDirection.Far:                      switch (amount)                      {                          case FocusAmount.Small:                              Focus(10);                              break;                          case FocusAmount.Medium:                              Focus(100);                              break;                          case FocusAmount.Large:                              Focus(500);                              break;                          default:                              throw new ArgumentOutOfRangeException(nameof(amount)' amount' null);                      }                      break;                  case FocusDirection.Near:                      switch (amount)                      {                          case FocusAmount.Small:                              Focus(-10);                              break;                          case FocusAmount.Medium:                              Focus(-100);                              break;                          case FocusAmount.Large:                              Focus(-500);                              break;                          default:                              throw new ArgumentOutOfRangeException(nameof(amount)' amount' null);                      }                      break;                }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,Focus,The following statement contains a magic number: switch (direction)              {                  case FocusDirection.Far:                      switch (amount)                      {                          case FocusAmount.Small:                              Focus(10);                              break;                          case FocusAmount.Medium:                              Focus(100);                              break;                          case FocusAmount.Large:                              Focus(500);                              break;                          default:                              throw new ArgumentOutOfRangeException(nameof(amount)' amount' null);                      }                      break;                  case FocusDirection.Near:                      switch (amount)                      {                          case FocusAmount.Small:                              Focus(-10);                              break;                          case FocusAmount.Medium:                              Focus(-100);                              break;                          case FocusAmount.Large:                              Focus(-500);                              break;                          default:                              throw new ArgumentOutOfRangeException(nameof(amount)' amount' null);                      }                      break;                }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,Focus,The following statement contains a magic number: switch (direction)              {                  case FocusDirection.Far:                      switch (amount)                      {                          case FocusAmount.Small:                              Focus(10);                              break;                          case FocusAmount.Medium:                              Focus(100);                              break;                          case FocusAmount.Large:                              Focus(500);                              break;                          default:                              throw new ArgumentOutOfRangeException(nameof(amount)' amount' null);                      }                      break;                  case FocusDirection.Near:                      switch (amount)                      {                          case FocusAmount.Small:                              Focus(-10);                              break;                          case FocusAmount.Medium:                              Focus(-100);                              break;                          case FocusAmount.Large:                              Focus(-500);                              break;                          default:                              throw new ArgumentOutOfRangeException(nameof(amount)' amount' null);                      }                      break;                }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,Focus,The following statement contains a magic number: switch (direction)              {                  case FocusDirection.Far:                      switch (amount)                      {                          case FocusAmount.Small:                              Focus(10);                              break;                          case FocusAmount.Medium:                              Focus(100);                              break;                          case FocusAmount.Large:                              Focus(500);                              break;                          default:                              throw new ArgumentOutOfRangeException(nameof(amount)' amount' null);                      }                      break;                  case FocusDirection.Near:                      switch (amount)                      {                          case FocusAmount.Small:                              Focus(-10);                              break;                          case FocusAmount.Medium:                              Focus(-100);                              break;                          case FocusAmount.Large:                              Focus(-500);                              break;                          default:                              throw new ArgumentOutOfRangeException(nameof(amount)' amount' null);                      }                      break;                }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,Focus,The following statement contains a magic number: switch (direction)              {                  case FocusDirection.Far:                      switch (amount)                      {                          case FocusAmount.Small:                              Focus(10);                              break;                          case FocusAmount.Medium:                              Focus(100);                              break;                          case FocusAmount.Large:                              Focus(500);                              break;                          default:                              throw new ArgumentOutOfRangeException(nameof(amount)' amount' null);                      }                      break;                  case FocusDirection.Near:                      switch (amount)                      {                          case FocusAmount.Small:                              Focus(-10);                              break;                          case FocusAmount.Medium:                              Focus(-100);                              break;                          case FocusAmount.Large:                              Focus(-500);                              break;                          default:                              throw new ArgumentOutOfRangeException(nameof(amount)' amount' null);                      }                      break;                }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,Focus,The following statement contains a magic number: switch (direction)              {                  case FocusDirection.Far:                      switch (amount)                      {                          case FocusAmount.Small:                              Focus(10);                              break;                          case FocusAmount.Medium:                              Focus(100);                              break;                          case FocusAmount.Large:                              Focus(500);                              break;                          default:                              throw new ArgumentOutOfRangeException(nameof(amount)' amount' null);                      }                      break;                  case FocusDirection.Near:                      switch (amount)                      {                          case FocusAmount.Small:                              Focus(-10);                              break;                          case FocusAmount.Medium:                              Focus(-100);                              break;                          case FocusAmount.Large:                              Focus(-500);                              break;                          default:                              throw new ArgumentOutOfRangeException(nameof(amount)' amount' null);                      }                      break;                }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,CapturePhotoNoAf,The following statement contains a magic number: SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 4}' CONST_PROP_AFModeSelect);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReadDeviceProperties,The following statement contains a magic number: switch (prop)                      {                          case CONST_PROP_Fnumber:                              //FNumber.SetValue(_stillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_Fnumber));                              ReInitFNumber(false);                              break;                          case CONST_PROP_MovieFnumber:                              //FNumber.SetValue(_stillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_Fnumber));                              ReInitFNumber(false);                              break;                          case CONST_PROP_ExposureIndex:                              NormalIsoNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                  CONST_PROP_ExposureIndex)' false);                              break;                      case CONST_PROP_ExposureIndexEx:                          NormalIsoNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                              CONST_PROP_ExposureIndexEx)' false);                          break;                      case CONST_PROP_MovieExposureIndex:                              MovieFNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                  CONST_PROP_MovieExposureIndex)' false);                              break;                          case CONST_PROP_ExposureTime:                              NormalShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                     CONST_PROP_ExposureTime)' false);                              break;                          case CONST_PROP_MovieShutterSpeed:                              MovieShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                     CONST_PROP_MovieShutterSpeed)' false);                              break;                          case CONST_PROP_WhiteBalance:                              WhiteBalance.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                     CONST_PROP_WhiteBalance)' false);                              break;                          case CONST_PROP_ExposureProgramMode:                              Mode.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                             CONST_PROP_ExposureProgramMode)' true);                              break;                          case CONST_PROP_ExposureBiasCompensation:                              NormalExposureCompensation.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                             CONST_PROP_ExposureBiasCompensation)'                                                            false);                              break;                          case CONST_PROP_MovieExposureBiasCompensation:                              MovieExposureCompensation.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                             CONST_PROP_MovieExposureBiasCompensation)'                                                            false);                              break;                            case CONST_PROP_CompressionSetting:                              CompressionSetting.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                           CONST_PROP_CompressionSetting)'                                                          false);                              break;                          case CONST_PROP_ExposureMeteringMode:                              ExposureMeteringMode.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                             CONST_PROP_ExposureMeteringMode)'                                                            false);                              break;                          case CONST_PROP_AFModeSelect:                              NormalFocusMode.SetValue(                                  StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AFModeSelect)'                                  false);                              NormalFocusMode.IsEnabled = NormalFocusMode.NumericValue != 3;                              break;                          case CONST_PROP_AfModeAtLiveView:                              LiveViewFocusMode.SetValue(                                  StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AfModeAtLiveView)'                                  false);                              LiveViewFocusMode.IsEnabled = LiveViewFocusMode.NumericValue != 3;                              break;                          case CONST_PROP_BatteryLevel:                              {                                  var data = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_BatteryLevel);                                  if (data.Data != null && data.Data.Length > 0)                                      Battery = data.Data[0];                              }                              break;                          case CONST_PROP_ExposureIndicateStatus:                              {                                  var data =                                      StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                       CONST_PROP_ExposureIndicateStatus);                                  if (data.Data != null && data.Data.Length > 0)                                  {                                      sbyte i =                                          unchecked(                                              (sbyte)data.Data[0]);                                      ExposureStatus = Convert.ToInt32(i);                                  }                              }                              break;                          case CONST_PROP_LiveViewStatus:                          {                              MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewStatus);                              if (response.Data != null && response.Data.Length > 0 )                              {                                  LiveViewOn = response.Data[0] == 1;                              }                              else                              {                                  LiveViewOn = false;                              }                              break;                          }                          case CONST_PROP_LiveViewSelector:                          {                              MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewSelector);                              if (response.Data != null && response.Data.Length > 0)                              {                                  LiveViewMovieOn = response.Data[0] == 1;                              }                              else                              {                                  LiveViewMovieOn = false;                              }                              break;                          }                          default:                              // imrovements from: http://digicamcontrol.com/forum/testingbug-reports/buglet-nikonbasecs                              foreach (PropertyValue<long> advancedProperty in AdvancedProperties.Where(advancedProperty => advancedProperty.Code == prop))                              {                                  if (advancedProperty.Name == "Image Size")                                  {                                      var val = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                          advancedProperty.Code);                                      if (val.Data != null && val.Data.Length > 0)                                      {                                          advancedProperty.SetValue(                                              Encoding.Unicode.GetString(val.Data' 1' 20)' false);                                      }                                  }                                  else                                  {                                      advancedProperty.SetValue(                                          StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                              advancedProperty.Code)' false);                                  }                              }                              break;                      }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReadDeviceProperties,The following statement contains a magic number: switch (prop)                      {                          case CONST_PROP_Fnumber:                              //FNumber.SetValue(_stillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_Fnumber));                              ReInitFNumber(false);                              break;                          case CONST_PROP_MovieFnumber:                              //FNumber.SetValue(_stillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_Fnumber));                              ReInitFNumber(false);                              break;                          case CONST_PROP_ExposureIndex:                              NormalIsoNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                  CONST_PROP_ExposureIndex)' false);                              break;                      case CONST_PROP_ExposureIndexEx:                          NormalIsoNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                              CONST_PROP_ExposureIndexEx)' false);                          break;                      case CONST_PROP_MovieExposureIndex:                              MovieFNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                  CONST_PROP_MovieExposureIndex)' false);                              break;                          case CONST_PROP_ExposureTime:                              NormalShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                     CONST_PROP_ExposureTime)' false);                              break;                          case CONST_PROP_MovieShutterSpeed:                              MovieShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                     CONST_PROP_MovieShutterSpeed)' false);                              break;                          case CONST_PROP_WhiteBalance:                              WhiteBalance.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                     CONST_PROP_WhiteBalance)' false);                              break;                          case CONST_PROP_ExposureProgramMode:                              Mode.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                             CONST_PROP_ExposureProgramMode)' true);                              break;                          case CONST_PROP_ExposureBiasCompensation:                              NormalExposureCompensation.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                             CONST_PROP_ExposureBiasCompensation)'                                                            false);                              break;                          case CONST_PROP_MovieExposureBiasCompensation:                              MovieExposureCompensation.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                             CONST_PROP_MovieExposureBiasCompensation)'                                                            false);                              break;                            case CONST_PROP_CompressionSetting:                              CompressionSetting.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                           CONST_PROP_CompressionSetting)'                                                          false);                              break;                          case CONST_PROP_ExposureMeteringMode:                              ExposureMeteringMode.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                             CONST_PROP_ExposureMeteringMode)'                                                            false);                              break;                          case CONST_PROP_AFModeSelect:                              NormalFocusMode.SetValue(                                  StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AFModeSelect)'                                  false);                              NormalFocusMode.IsEnabled = NormalFocusMode.NumericValue != 3;                              break;                          case CONST_PROP_AfModeAtLiveView:                              LiveViewFocusMode.SetValue(                                  StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AfModeAtLiveView)'                                  false);                              LiveViewFocusMode.IsEnabled = LiveViewFocusMode.NumericValue != 3;                              break;                          case CONST_PROP_BatteryLevel:                              {                                  var data = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_BatteryLevel);                                  if (data.Data != null && data.Data.Length > 0)                                      Battery = data.Data[0];                              }                              break;                          case CONST_PROP_ExposureIndicateStatus:                              {                                  var data =                                      StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                       CONST_PROP_ExposureIndicateStatus);                                  if (data.Data != null && data.Data.Length > 0)                                  {                                      sbyte i =                                          unchecked(                                              (sbyte)data.Data[0]);                                      ExposureStatus = Convert.ToInt32(i);                                  }                              }                              break;                          case CONST_PROP_LiveViewStatus:                          {                              MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewStatus);                              if (response.Data != null && response.Data.Length > 0 )                              {                                  LiveViewOn = response.Data[0] == 1;                              }                              else                              {                                  LiveViewOn = false;                              }                              break;                          }                          case CONST_PROP_LiveViewSelector:                          {                              MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewSelector);                              if (response.Data != null && response.Data.Length > 0)                              {                                  LiveViewMovieOn = response.Data[0] == 1;                              }                              else                              {                                  LiveViewMovieOn = false;                              }                              break;                          }                          default:                              // imrovements from: http://digicamcontrol.com/forum/testingbug-reports/buglet-nikonbasecs                              foreach (PropertyValue<long> advancedProperty in AdvancedProperties.Where(advancedProperty => advancedProperty.Code == prop))                              {                                  if (advancedProperty.Name == "Image Size")                                  {                                      var val = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                          advancedProperty.Code);                                      if (val.Data != null && val.Data.Length > 0)                                      {                                          advancedProperty.SetValue(                                              Encoding.Unicode.GetString(val.Data' 1' 20)' false);                                      }                                  }                                  else                                  {                                      advancedProperty.SetValue(                                          StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                              advancedProperty.Code)' false);                                  }                              }                              break;                      }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,ReadDeviceProperties,The following statement contains a magic number: switch (prop)                      {                          case CONST_PROP_Fnumber:                              //FNumber.SetValue(_stillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_Fnumber));                              ReInitFNumber(false);                              break;                          case CONST_PROP_MovieFnumber:                              //FNumber.SetValue(_stillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_Fnumber));                              ReInitFNumber(false);                              break;                          case CONST_PROP_ExposureIndex:                              NormalIsoNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                  CONST_PROP_ExposureIndex)' false);                              break;                      case CONST_PROP_ExposureIndexEx:                          NormalIsoNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                              CONST_PROP_ExposureIndexEx)' false);                          break;                      case CONST_PROP_MovieExposureIndex:                              MovieFNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                  CONST_PROP_MovieExposureIndex)' false);                              break;                          case CONST_PROP_ExposureTime:                              NormalShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                     CONST_PROP_ExposureTime)' false);                              break;                          case CONST_PROP_MovieShutterSpeed:                              MovieShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                     CONST_PROP_MovieShutterSpeed)' false);                              break;                          case CONST_PROP_WhiteBalance:                              WhiteBalance.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                     CONST_PROP_WhiteBalance)' false);                              break;                          case CONST_PROP_ExposureProgramMode:                              Mode.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                             CONST_PROP_ExposureProgramMode)' true);                              break;                          case CONST_PROP_ExposureBiasCompensation:                              NormalExposureCompensation.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                             CONST_PROP_ExposureBiasCompensation)'                                                            false);                              break;                          case CONST_PROP_MovieExposureBiasCompensation:                              MovieExposureCompensation.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                             CONST_PROP_MovieExposureBiasCompensation)'                                                            false);                              break;                            case CONST_PROP_CompressionSetting:                              CompressionSetting.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                           CONST_PROP_CompressionSetting)'                                                          false);                              break;                          case CONST_PROP_ExposureMeteringMode:                              ExposureMeteringMode.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                             CONST_PROP_ExposureMeteringMode)'                                                            false);                              break;                          case CONST_PROP_AFModeSelect:                              NormalFocusMode.SetValue(                                  StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AFModeSelect)'                                  false);                              NormalFocusMode.IsEnabled = NormalFocusMode.NumericValue != 3;                              break;                          case CONST_PROP_AfModeAtLiveView:                              LiveViewFocusMode.SetValue(                                  StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AfModeAtLiveView)'                                  false);                              LiveViewFocusMode.IsEnabled = LiveViewFocusMode.NumericValue != 3;                              break;                          case CONST_PROP_BatteryLevel:                              {                                  var data = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_BatteryLevel);                                  if (data.Data != null && data.Data.Length > 0)                                      Battery = data.Data[0];                              }                              break;                          case CONST_PROP_ExposureIndicateStatus:                              {                                  var data =                                      StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                       CONST_PROP_ExposureIndicateStatus);                                  if (data.Data != null && data.Data.Length > 0)                                  {                                      sbyte i =                                          unchecked(                                              (sbyte)data.Data[0]);                                      ExposureStatus = Convert.ToInt32(i);                                  }                              }                              break;                          case CONST_PROP_LiveViewStatus:                          {                              MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewStatus);                              if (response.Data != null && response.Data.Length > 0 )                              {                                  LiveViewOn = response.Data[0] == 1;                              }                              else                              {                                  LiveViewOn = false;                              }                              break;                          }                          case CONST_PROP_LiveViewSelector:                          {                              MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewSelector);                              if (response.Data != null && response.Data.Length > 0)                              {                                  LiveViewMovieOn = response.Data[0] == 1;                              }                              else                              {                                  LiveViewMovieOn = false;                              }                              break;                          }                          default:                              // imrovements from: http://digicamcontrol.com/forum/testingbug-reports/buglet-nikonbasecs                              foreach (PropertyValue<long> advancedProperty in AdvancedProperties.Where(advancedProperty => advancedProperty.Code == prop))                              {                                  if (advancedProperty.Name == "Image Size")                                  {                                      var val = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                          advancedProperty.Code);                                      if (val.Data != null && val.Data.Length > 0)                                      {                                          advancedProperty.SetValue(                                              Encoding.Unicode.GetString(val.Data' 1' 20)' false);                                      }                                  }                                  else                                  {                                      advancedProperty.SetValue(                                          StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                              advancedProperty.Code)' false);                                  }                              }                              break;                      }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SetCameraField,The following statement contains a magic number: switch (cameraFieldType)              {                  case CameraFieldType.Comment:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0}' 0xD091);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD090);                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 1}' 0xD091);                      }                      break;                  case CameraFieldType.Artist:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD072);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD072);                      }                        break;                  case CameraFieldType.Copyright:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD073);                      }                      else                      {                          comment = comment.Length > 53 ? comment.Substring(0' 53) : comment.PadRight(53);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(54);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD073);                      }                      break;                  default:                      //throw new ArgumentOutOfRangeException("cameraFieldType");                      break;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SetCameraField,The following statement contains a magic number: switch (cameraFieldType)              {                  case CameraFieldType.Comment:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0}' 0xD091);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD090);                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 1}' 0xD091);                      }                      break;                  case CameraFieldType.Artist:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD072);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD072);                      }                        break;                  case CameraFieldType.Copyright:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD073);                      }                      else                      {                          comment = comment.Length > 53 ? comment.Substring(0' 53) : comment.PadRight(53);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(54);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD073);                      }                      break;                  default:                      //throw new ArgumentOutOfRangeException("cameraFieldType");                      break;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SetCameraField,The following statement contains a magic number: switch (cameraFieldType)              {                  case CameraFieldType.Comment:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0}' 0xD091);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD090);                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 1}' 0xD091);                      }                      break;                  case CameraFieldType.Artist:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD072);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD072);                      }                        break;                  case CameraFieldType.Copyright:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD073);                      }                      else                      {                          comment = comment.Length > 53 ? comment.Substring(0' 53) : comment.PadRight(53);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(54);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD073);                      }                      break;                  default:                      //throw new ArgumentOutOfRangeException("cameraFieldType");                      break;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SetCameraField,The following statement contains a magic number: switch (cameraFieldType)              {                  case CameraFieldType.Comment:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0}' 0xD091);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD090);                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 1}' 0xD091);                      }                      break;                  case CameraFieldType.Artist:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD072);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD072);                      }                        break;                  case CameraFieldType.Copyright:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD073);                      }                      else                      {                          comment = comment.Length > 53 ? comment.Substring(0' 53) : comment.PadRight(53);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(54);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD073);                      }                      break;                  default:                      //throw new ArgumentOutOfRangeException("cameraFieldType");                      break;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SetCameraField,The following statement contains a magic number: switch (cameraFieldType)              {                  case CameraFieldType.Comment:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0}' 0xD091);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD090);                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 1}' 0xD091);                      }                      break;                  case CameraFieldType.Artist:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD072);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD072);                      }                        break;                  case CameraFieldType.Copyright:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD073);                      }                      else                      {                          comment = comment.Length > 53 ? comment.Substring(0' 53) : comment.PadRight(53);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(54);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD073);                      }                      break;                  default:                      //throw new ArgumentOutOfRangeException("cameraFieldType");                      break;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SetCameraField,The following statement contains a magic number: switch (cameraFieldType)              {                  case CameraFieldType.Comment:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0}' 0xD091);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD090);                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 1}' 0xD091);                      }                      break;                  case CameraFieldType.Artist:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD072);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD072);                      }                        break;                  case CameraFieldType.Copyright:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD073);                      }                      else                      {                          comment = comment.Length > 53 ? comment.Substring(0' 53) : comment.PadRight(53);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(54);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD073);                      }                      break;                  default:                      //throw new ArgumentOutOfRangeException("cameraFieldType");                      break;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SetCameraField,The following statement contains a magic number: switch (cameraFieldType)              {                  case CameraFieldType.Comment:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0}' 0xD091);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD090);                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 1}' 0xD091);                      }                      break;                  case CameraFieldType.Artist:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD072);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD072);                      }                        break;                  case CameraFieldType.Copyright:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD073);                      }                      else                      {                          comment = comment.Length > 53 ? comment.Substring(0' 53) : comment.PadRight(53);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(54);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD073);                      }                      break;                  default:                      //throw new ArgumentOutOfRangeException("cameraFieldType");                      break;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SetCameraField,The following statement contains a magic number: switch (cameraFieldType)              {                  case CameraFieldType.Comment:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0}' 0xD091);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD090);                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 1}' 0xD091);                      }                      break;                  case CameraFieldType.Artist:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD072);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD072);                      }                        break;                  case CameraFieldType.Copyright:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD073);                      }                      else                      {                          comment = comment.Length > 53 ? comment.Substring(0' 53) : comment.PadRight(53);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(54);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD073);                      }                      break;                  default:                      //throw new ArgumentOutOfRangeException("cameraFieldType");                      break;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SetCameraField,The following statement contains a magic number: switch (cameraFieldType)              {                  case CameraFieldType.Comment:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0}' 0xD091);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD090);                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 1}' 0xD091);                      }                      break;                  case CameraFieldType.Artist:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD072);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD072);                      }                        break;                  case CameraFieldType.Copyright:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD073);                      }                      else                      {                          comment = comment.Length > 53 ? comment.Substring(0' 53) : comment.PadRight(53);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(54);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD073);                      }                      break;                  default:                      //throw new ArgumentOutOfRangeException("cameraFieldType");                      break;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SetCameraField,The following statement contains a magic number: switch (cameraFieldType)              {                  case CameraFieldType.Comment:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0}' 0xD091);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD090);                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 1}' 0xD091);                      }                      break;                  case CameraFieldType.Artist:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD072);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD072);                      }                        break;                  case CameraFieldType.Copyright:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD073);                      }                      else                      {                          comment = comment.Length > 53 ? comment.Substring(0' 53) : comment.PadRight(53);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(54);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD073);                      }                      break;                  default:                      //throw new ArgumentOutOfRangeException("cameraFieldType");                      break;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SetCameraField,The following statement contains a magic number: switch (cameraFieldType)              {                  case CameraFieldType.Comment:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0}' 0xD091);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD090);                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 1}' 0xD091);                      }                      break;                  case CameraFieldType.Artist:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD072);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD072);                      }                        break;                  case CameraFieldType.Copyright:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD073);                      }                      else                      {                          comment = comment.Length > 53 ? comment.Substring(0' 53) : comment.PadRight(53);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(54);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD073);                      }                      break;                  default:                      //throw new ArgumentOutOfRangeException("cameraFieldType");                      break;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,SetCameraField,The following statement contains a magic number: switch (cameraFieldType)              {                  case CameraFieldType.Comment:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0}' 0xD091);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD090);                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 1}' 0xD091);                      }                      break;                  case CameraFieldType.Artist:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD072);                      }                      else                      {                          comment = comment.Length > 36 ? comment.Substring(0' 36) : comment.PadRight(36);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(36);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD072);                      }                        break;                  case CameraFieldType.Copyright:                      if (string.IsNullOrEmpty(comment))                      {                          SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 0' (byte) 0' (byte) 0}' 0xD073);                      }                      else                      {                          comment = comment.Length > 53 ? comment.Substring(0' 53) : comment.PadRight(53);                          List<byte> vals = new List<byte>();                          List<byte> valsnew = new List<byte>();                          valsnew.Add(54);                          vals.AddRange(Encoding.UTF8.GetBytes(comment));                          foreach (byte val in vals)                          {                              valsnew.Add(val);                              valsnew.Add(0);                          }                          valsnew.Add(0);                          valsnew.Add(0);                          SetProperty(CONST_CMD_SetDevicePropValue' valsnew.ToArray()' 0xD073);                      }                      break;                  default:                      //throw new ArgumentOutOfRangeException("cameraFieldType");                      break;              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetEvent,The following statement contains a magic number: uint eventCode = BitConverter.ToUInt16(response.Data' 6*i + 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetEvent,The following statement contains a magic number: uint eventCode = BitConverter.ToUInt16(response.Data' 6*i + 2);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetEvent,The following statement contains a magic number: ushort eventParam = BitConverter.ToUInt16(response.Data' 6*i + 4);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetEvent,The following statement contains a magic number: ushort eventParam = BitConverter.ToUInt16(response.Data' 6*i + 4);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetEvent,The following statement contains a magic number: int longeventParam = BitConverter.ToInt32(response.Data' 6*i + 4);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetEvent,The following statement contains a magic number: int longeventParam = BitConverter.ToInt32(response.Data' 6*i + 4);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetEvent,The following statement contains a magic number: switch (eventCode)                              {                                  case CONST_Event_DevicePropChanged:                                      ReadDeviceProperties(eventParam);                                      break;                                  case CONST_Event_ObjectAddedInSdram:                                  case CONST_Event_ObjectAdded:                                      {                                          Log.Debug("CONST_Event_ObjectAddedInSdram" + eventCode.ToString("X"));                                          MTPDataResponse objectdata = ExecuteReadDataEx(CONST_CMD_GetObjectInfo'                                                                                         (uint) longeventParam);                                          string filename = "DSC_0000.JPG";                                          if (objectdata.Data != null)                                          {                                              filename = Encoding.Unicode.GetString(objectdata.Data' 53' 12*2);                                              if (filename.Contains("\0"))                                                  filename = filename.Split('\0')[0];                                          }                                          else                                          {                                              Log.Error("Error getting file name");                                          }                                          Log.Debug("File name" + filename);                                          PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                                                                            {                                                                                WiaImageItem = null'                                                                                EventArgs =                                                                                    new PortableDeviceEventArgs(new PortableDeviceEventType                                                                                                                    ()                                                                                                                    {                                                                                                                        ObjectHandle                                                                                                                            =                                                                                                                            (                                                                                                                            uint                                                                                                                            )                                                                                                                            longeventParam                                                                                                                    })'                                                                                CameraDevice = this'                                                                                FileName = filename'                                                                                Handle = (uint) longeventParam                                                                            };                                          OnPhotoCapture(this' args);                                      }                                      break;                                  case CONST_Event_CaptureComplete:                                  case CONST_Event_CaptureCompleteRecInSdram:                                      {                                          SlowDownEventTimer();                                          OnCaptureCompleted(this' new EventArgs());                                      }                                      break;                                  case CONST_Event_ObsoleteEvent:                                      break;                                  default:                                      //Console.WriteLine("Unknown event code " + eventCode.ToString("X"));                                      Log.Debug("Unknown event code :" + eventCode.ToString("X") + "|" +                                                longeventParam.ToString("X"));                                      break;                              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetEvent,The following statement contains a magic number: switch (eventCode)                              {                                  case CONST_Event_DevicePropChanged:                                      ReadDeviceProperties(eventParam);                                      break;                                  case CONST_Event_ObjectAddedInSdram:                                  case CONST_Event_ObjectAdded:                                      {                                          Log.Debug("CONST_Event_ObjectAddedInSdram" + eventCode.ToString("X"));                                          MTPDataResponse objectdata = ExecuteReadDataEx(CONST_CMD_GetObjectInfo'                                                                                         (uint) longeventParam);                                          string filename = "DSC_0000.JPG";                                          if (objectdata.Data != null)                                          {                                              filename = Encoding.Unicode.GetString(objectdata.Data' 53' 12*2);                                              if (filename.Contains("\0"))                                                  filename = filename.Split('\0')[0];                                          }                                          else                                          {                                              Log.Error("Error getting file name");                                          }                                          Log.Debug("File name" + filename);                                          PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                                                                            {                                                                                WiaImageItem = null'                                                                                EventArgs =                                                                                    new PortableDeviceEventArgs(new PortableDeviceEventType                                                                                                                    ()                                                                                                                    {                                                                                                                        ObjectHandle                                                                                                                            =                                                                                                                            (                                                                                                                            uint                                                                                                                            )                                                                                                                            longeventParam                                                                                                                    })'                                                                                CameraDevice = this'                                                                                FileName = filename'                                                                                Handle = (uint) longeventParam                                                                            };                                          OnPhotoCapture(this' args);                                      }                                      break;                                  case CONST_Event_CaptureComplete:                                  case CONST_Event_CaptureCompleteRecInSdram:                                      {                                          SlowDownEventTimer();                                          OnCaptureCompleted(this' new EventArgs());                                      }                                      break;                                  case CONST_Event_ObsoleteEvent:                                      break;                                  default:                                      //Console.WriteLine("Unknown event code " + eventCode.ToString("X"));                                      Log.Debug("Unknown event code :" + eventCode.ToString("X") + "|" +                                                longeventParam.ToString("X"));                                      break;                              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetEvent,The following statement contains a magic number: switch (eventCode)                              {                                  case CONST_Event_DevicePropChanged:                                      ReadDeviceProperties(eventParam);                                      break;                                  case CONST_Event_ObjectAddedInSdram:                                  case CONST_Event_ObjectAdded:                                      {                                          Log.Debug("CONST_Event_ObjectAddedInSdram" + eventCode.ToString("X"));                                          MTPDataResponse objectdata = ExecuteReadDataEx(CONST_CMD_GetObjectInfo'                                                                                         (uint) longeventParam);                                          string filename = "DSC_0000.JPG";                                          if (objectdata.Data != null)                                          {                                              filename = Encoding.Unicode.GetString(objectdata.Data' 53' 12*2);                                              if (filename.Contains("\0"))                                                  filename = filename.Split('\0')[0];                                          }                                          else                                          {                                              Log.Error("Error getting file name");                                          }                                          Log.Debug("File name" + filename);                                          PhotoCapturedEventArgs args = new PhotoCapturedEventArgs                                                                            {                                                                                WiaImageItem = null'                                                                                EventArgs =                                                                                    new PortableDeviceEventArgs(new PortableDeviceEventType                                                                                                                    ()                                                                                                                    {                                                                                                                        ObjectHandle                                                                                                                            =                                                                                                                            (                                                                                                                            uint                                                                                                                            )                                                                                                                            longeventParam                                                                                                                    })'                                                                                CameraDevice = this'                                                                                FileName = filename'                                                                                Handle = (uint) longeventParam                                                                            };                                          OnPhotoCapture(this' args);                                      }                                      break;                                  case CONST_Event_CaptureComplete:                                  case CONST_Event_CaptureCompleteRecInSdram:                                      {                                          SlowDownEventTimer();                                          OnCaptureCompleted(this' new EventArgs());                                      }                                      break;                                  case CONST_Event_ObsoleteEvent:                                      break;                                  default:                                      //Console.WriteLine("Unknown event code " + eventCode.ToString("X"));                                      Log.Debug("Unknown event code :" + eventCode.ToString("X") + "|" +                                                longeventParam.ToString("X"));                                      break;                              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,DeviceReady,The following statement contains a magic number: retrynum > 50
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,DeviceReady,The following statement contains a magic number: Thread.Sleep(5);
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,GetProhibitionCondition,The following statement contains a magic number: switch (operationEnum)              {                  case OperationEnum.Capture:                      return "";                  case OperationEnum.RecordMovie:                      MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD0A4);                      if (response.Data != null && response.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(response.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelNoCardInserted";                          if (StaticHelper.GetBit(resp' 1))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 3))                              return "LabelNoFreeAreaInCard";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelCardBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelPcBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelBufferNotEmpty";                          if (StaticHelper.GetBit(resp' 10))                              return "LabelRecordInProgres";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelCardProtected";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelDuringEnlargedDisplayLiveView";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelWrongLiveViewType";                          if (StaticHelper.GetBit(resp' 14))                              return "";                          //return "LabelNotInApplicationMode";                      }                      return "";                  case OperationEnum.AutoFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      // check if not Single AF servo                      return "";                  case OperationEnum.ManualFocus:                      if (FocusMode != null && FocusMode.Value != null && FocusMode.Value.Contains("[M]"))                          return "LabelMFError";                      MTPDataResponse responselFocus = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD061);                      if (responselFocus != null && (responselFocus.Data != null && responselFocus.Data.Length > 0))                      {                          var resp = responselFocus.Data[0];                          if (resp == 2)                              return "LabelNotAFSError";                      }                      // check if not Single AF servo                      return "";                  case OperationEnum.LiveView:                      MTPDataResponse responsel = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' 0xD1A4);                      if (responsel.Data != null && responsel.Data.Length > 0)                      {                          Int32 resp = BitConverter.ToInt32(responsel.Data' 0);                          if (resp == 0)                              return string.Empty;                          if (StaticHelper.GetBit(resp' 0))                              return "LabelDestinationCardError";                          if (StaticHelper.GetBit(resp' 2))                              return "LabelSequenceError";                          if (StaticHelper.GetBit(resp' 4))                              return "LabelFullyPressedButtonError";                          if (StaticHelper.GetBit(resp' 5))                              return "LabelApertureValueError";                          if (StaticHelper.GetBit(resp' 6))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 7))                              return "LabelDuringCleaningMirror";                          if (StaticHelper.GetBit(resp' 8))                              return "LabelDuringInsufficiencyBattery";                          if (StaticHelper.GetBit(resp' 9))                              return "LabelTTLError";                          if (StaticHelper.GetBit(resp' 11))                              return "LabelNonCPULEnseError";                          if (StaticHelper.GetBit(resp' 12))                              return "LabelImageInRAM";                          if (StaticHelper.GetBit(resp' 13))                              return "LabelMirrorUpError2";                          if (StaticHelper.GetBit(resp' 14))                              return "LabelNoCardInsertedError";                          if (StaticHelper.GetBit(resp' 15))                              return "LabelCommandProcesingError";                          if (StaticHelper.GetBit(resp' 16))                              return "LabelShoutingInProgress";                          if (StaticHelper.GetBit(resp' 17))                              return "LabelOverHeatedError";                          if (StaticHelper.GetBit(resp' 18))                              return "LabelCardProtectedError";                          if (StaticHelper.GetBit(resp' 19))                              return "LabelCardError";                          if (StaticHelper.GetBit(resp' 20))                              return "LabelCardNotFormatted";                          if (StaticHelper.GetBit(resp' 21))                              return "LabelBulbError";                          if (StaticHelper.GetBit(resp' 22))                              return "LabelMirrorUpError";                      }                      return "";                  default:                      throw new ArgumentOutOfRangeException("operationEnum");              }
Magic Number,CameraControl.Devices.Nikon,NikonBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonBase.cs,TransferFileThumb,The following statement contains a magic number: MTPDataResponse result = StillImageDevice.ExecuteReadBigData(CONST_CMD_GetLargeThumb'fs'                          (total' current) =>                          {                              double i = (double) current/total;                              TransferProgress =                                  Convert.ToUInt32(i*100);                          }' Convert.ToUInt32(o));
Magic Number,CameraControl.Devices.Nikon,NikonD300,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD300.cs,CapturePhotoNoAf,The following statement contains a magic number: SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 4}' CONST_PROP_AFModeSelect);
Magic Number,CameraControl.Devices.Nikon,NikonD3200,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD3200.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LiveViewImageWidth = ToInt16(result' 8);
Magic Number,CameraControl.Devices.Nikon,NikonD3200,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD3200.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LiveViewImageHeight = ToInt16(result' 10);
Magic Number,CameraControl.Devices.Nikon,NikonD3200,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD3200.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.ImageWidth = ToInt16(result' 12);
Magic Number,CameraControl.Devices.Nikon,NikonD3200,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD3200.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.ImageHeight = ToInt16(result' 14);
Magic Number,CameraControl.Devices.Nikon,NikonD3200,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD3200.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusFrameXSize = 800;
Magic Number,CameraControl.Devices.Nikon,NikonD3200,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD3200.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusFrameYSize = 800;
Magic Number,CameraControl.Devices.Nikon,NikonD3200,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD3200.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusX = ToInt16(result' 20);
Magic Number,CameraControl.Devices.Nikon,NikonD3200,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD3200.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusY = ToInt16(result' 22);
Magic Number,CameraControl.Devices.Nikon,NikonD3200,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD3200.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.Focused = result[40] != 1;
Magic Number,CameraControl.Devices.Nikon,NikonD3X,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD3X.cs,GetLiveViewImage,The following statement contains a magic number: const int headerSize = 64;
Magic Number,CameraControl.Devices.Nikon,NikonD60,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD60.cs,InitCompressionSetting,The following statement contains a magic number: byte defval = result.Data[datasize + 5];
Magic Number,CameraControl.Devices.Nikon,NikonD60,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD60.cs,InitCompressionSetting,The following statement contains a magic number: byte val = result.Data[((2 * datasize) + 6 + 2) + i];
Magic Number,CameraControl.Devices.Nikon,NikonD60,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD60.cs,InitCompressionSetting,The following statement contains a magic number: byte val = result.Data[((2 * datasize) + 6 + 2) + i];
Magic Number,CameraControl.Devices.Nikon,NikonD60,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD60.cs,InitCompressionSetting,The following statement contains a magic number: byte val = result.Data[((2 * datasize) + 6 + 2) + i];
Magic Number,CameraControl.Devices.Nikon,NikonD60,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD60.cs,InitCompressionSetting,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonD60,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD60.cs,InitCompressionSetting,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonD60,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD60.cs,InitCompressionSetting,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetLiveViewImage,The following statement contains a magic number: const int headerSize = 384;
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetLiveViewImage,The following statement contains a magic number: Monitor.TryEnter(Locker' 10)
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LiveViewImageWidth = ToInt16(result' 8);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LiveViewImageHeight = ToInt16(result' 10);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.ImageWidth = ToInt16(result' 12);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.ImageHeight = ToInt16(result' 14);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusFrameXSize = ToInt16(result' 24);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusFrameYSize = ToInt16(result' 26);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusX = ToInt16(result' 28);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusY = ToInt16(result' 30);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.Focused = result[48] != 1;
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.MovieIsRecording = result[68] == 1;
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.MovieTimeRemain = ToDeciaml(result' 64);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.Rotation = -90;
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: result[37] == 1
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.Rotation = 90;
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: result[37] == 2
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: result[37] == 2
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LevelAngleRolling = ToInt16(result' 52);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LevelAnglePitching = ToInt16(result' 56);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LevelAngleYawing = ToInt16(result' 60);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundL = (int)(result[352] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundL = (int)(result[352] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundL = (int)(result[352] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundR = (int)(result[353] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundR = (int)(result[353] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundR = (int)(result[353] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundL = (int)(result[354] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundL = (int)(result[354] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundL = (int)(result[354] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundR = (int)(result[355] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundR = (int)(result[355] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundR = (int)(result[355] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,InitExposureDelay,The following statement contains a magic number: res.AddValues("1 sec"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,InitExposureDelay,The following statement contains a magic number: res.AddValues("OFF"' 3);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,InitIso,The following statement contains a magic number: UInt32 defval = BitConverter.ToUInt32(result.Data' 9);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,InitIso,The following statement contains a magic number: UInt32 val = BitConverter.ToUInt32(result.Data' 16 + i);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,InitIso,The following statement contains a magic number: i < result.Data.Length - 16
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,InitIso,The following statement contains a magic number: UInt32 defval = BitConverter.ToUInt32(result.Data' 9);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,InitIso,The following statement contains a magic number: UInt32 val = BitConverter.ToUInt32(result.Data' 16 + i);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,InitIso,The following statement contains a magic number: i < result.Data.Length - 16
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReInitShutterSpeed,The following statement contains a magic number: byte datasize = 4;
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReInitShutterSpeed,The following statement contains a magic number: int type = BitConverter.ToInt16(result.Data' 2);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReInitShutterSpeed,The following statement contains a magic number: byte formFlag = result.Data[(2 * datasize) + 5];
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReInitShutterSpeed,The following statement contains a magic number: byte formFlag = result.Data[(2 * datasize) + 5];
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReInitShutterSpeed,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReInitShutterSpeed,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReInitShutterSpeed,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReInitShutterSpeed,The following statement contains a magic number: byte datasize = 4;
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReInitShutterSpeed,The following statement contains a magic number: int type = BitConverter.ToInt16(result.Data' 2);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReInitShutterSpeed,The following statement contains a magic number: byte formFlag = result.Data[(2 * datasize) + 5];
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReInitShutterSpeed,The following statement contains a magic number: byte formFlag = result.Data[(2 * datasize) + 5];
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReInitShutterSpeed,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReInitShutterSpeed,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReInitShutterSpeed,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReadDeviceProperties,The following statement contains a magic number: switch (prop)                  {                      case CONST_PROP_Fnumber:                          //FNumber.SetValue(_stillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_Fnumber));                          ReInitFNumber(false);                          break;                      case CONST_PROP_MovieFnumber:                          //FNumber.SetValue(_stillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_Fnumber));                          ReInitFNumber(false);                          break;                      //case CONST_PROP_ExposureIndex:                      //    NormalIsoNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                      //                                                        CONST_PROP_ExposureIndex)' false);                      //    break;                      case CONST_PROP_ExposureIndexEx:                          NormalIsoNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                              CONST_PROP_ExposureIndexEx)' false);                          break;                      case CONST_PROP_MovieExposureIndex:                          MovieFNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                              CONST_PROP_MovieExposureIndex)' false);                          break;                      //case CONST_PROP_ExposureTime:                      //    NormalShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                      //                                                           CONST_PROP_ExposureTime)' false);                      //    break;                      case CONST_PROP_ShutterSpeed:                          NormalShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                 CONST_PROP_ShutterSpeed)' false);                          break;                      case CONST_PROP_MovieShutterSpeed:                          MovieShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                 CONST_PROP_MovieShutterSpeed)' false);                          break;                      case CONST_PROP_WhiteBalance:                          WhiteBalance.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                 CONST_PROP_WhiteBalance)' false);                          break;                      case CONST_PROP_ExposureProgramMode:                          Mode.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                         CONST_PROP_ExposureProgramMode)' true);                          break;                      case CONST_PROP_ExposureBiasCompensation:                          NormalExposureCompensation.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                         CONST_PROP_ExposureBiasCompensation)'                                                        false);                          break;                      case CONST_PROP_MovieExposureBiasCompensation:                          MovieExposureCompensation.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                         CONST_PROP_MovieExposureBiasCompensation)'                                                        false);                          break;                        case CONST_PROP_CompressionSetting:                          CompressionSetting.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                       CONST_PROP_CompressionSetting)'                                                      false);                          break;                      case CONST_PROP_ExposureMeteringMode:                          ExposureMeteringMode.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                         CONST_PROP_ExposureMeteringMode)'                                                        false);                          break;                      case CONST_PROP_AFModeSelect:                          NormalFocusMode.SetValue(                              StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AFModeSelect)'                              false);                          NormalFocusMode.IsEnabled = NormalFocusMode.NumericValue != 3;                          break;                      case CONST_PROP_AfModeAtLiveView:                          LiveViewFocusMode.SetValue(                              StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AfModeAtLiveView)'                              false);                          LiveViewFocusMode.IsEnabled = LiveViewFocusMode.NumericValue != 3;                          break;                      case CONST_PROP_BatteryLevel:                          {                              var data = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_BatteryLevel);                              if (data.Data != null && data.Data.Length > 0)                                  Battery = data.Data[0];                          }                          break;                      case CONST_PROP_ExposureIndicateStatus:                          {                              var data =                                  StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                   CONST_PROP_ExposureIndicateStatus);                              if (data.Data != null && data.Data.Length > 0)                              {                                  sbyte i =                                      unchecked(                                          (sbyte)data.Data[0]);                                  ExposureStatus = Convert.ToInt32(i);                              }                          }                          break;                      case CONST_PROP_LiveViewStatus:                          {                              MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewStatus);                              if (response.Data != null && response.Data.Length > 0)                              {                                  LiveViewOn = response.Data[0] == 1;                              }                              else                              {                                  LiveViewOn = false;                              }                              break;                          }                      case CONST_PROP_LiveViewSelector:                          {                              MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewSelector);                              if (response.Data != null && response.Data.Length > 0)                              {                                  LiveViewMovieOn = response.Data[0] == 1;                              }                              else                              {                                  LiveViewMovieOn = false;                              }                              break;                          }                      default:                          // imrovements from: http://digicamcontrol.com/forum/testingbug-reports/buglet-nikonbasecs                          foreach (PropertyValue<long> advancedProperty in AdvancedProperties.Where(advancedProperty => advancedProperty.Code == prop))                          {                              if (advancedProperty.Name == "Image Size")                              {                                  var val = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                      advancedProperty.Code);                                  if (val.Data != null && val.Data.Length > 0)                                  {                                      advancedProperty.SetValue(                                          Encoding.Unicode.GetString(val.Data' 1' 20)' false);                                  }                              }                              else                              {                                  advancedProperty.SetValue(                                      StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                          advancedProperty.Code)' false);                              }                          }                          break;                  }
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReadDeviceProperties,The following statement contains a magic number: switch (prop)                  {                      case CONST_PROP_Fnumber:                          //FNumber.SetValue(_stillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_Fnumber));                          ReInitFNumber(false);                          break;                      case CONST_PROP_MovieFnumber:                          //FNumber.SetValue(_stillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_Fnumber));                          ReInitFNumber(false);                          break;                      //case CONST_PROP_ExposureIndex:                      //    NormalIsoNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                      //                                                        CONST_PROP_ExposureIndex)' false);                      //    break;                      case CONST_PROP_ExposureIndexEx:                          NormalIsoNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                              CONST_PROP_ExposureIndexEx)' false);                          break;                      case CONST_PROP_MovieExposureIndex:                          MovieFNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                              CONST_PROP_MovieExposureIndex)' false);                          break;                      //case CONST_PROP_ExposureTime:                      //    NormalShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                      //                                                           CONST_PROP_ExposureTime)' false);                      //    break;                      case CONST_PROP_ShutterSpeed:                          NormalShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                 CONST_PROP_ShutterSpeed)' false);                          break;                      case CONST_PROP_MovieShutterSpeed:                          MovieShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                 CONST_PROP_MovieShutterSpeed)' false);                          break;                      case CONST_PROP_WhiteBalance:                          WhiteBalance.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                 CONST_PROP_WhiteBalance)' false);                          break;                      case CONST_PROP_ExposureProgramMode:                          Mode.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                         CONST_PROP_ExposureProgramMode)' true);                          break;                      case CONST_PROP_ExposureBiasCompensation:                          NormalExposureCompensation.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                         CONST_PROP_ExposureBiasCompensation)'                                                        false);                          break;                      case CONST_PROP_MovieExposureBiasCompensation:                          MovieExposureCompensation.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                         CONST_PROP_MovieExposureBiasCompensation)'                                                        false);                          break;                        case CONST_PROP_CompressionSetting:                          CompressionSetting.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                       CONST_PROP_CompressionSetting)'                                                      false);                          break;                      case CONST_PROP_ExposureMeteringMode:                          ExposureMeteringMode.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                         CONST_PROP_ExposureMeteringMode)'                                                        false);                          break;                      case CONST_PROP_AFModeSelect:                          NormalFocusMode.SetValue(                              StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AFModeSelect)'                              false);                          NormalFocusMode.IsEnabled = NormalFocusMode.NumericValue != 3;                          break;                      case CONST_PROP_AfModeAtLiveView:                          LiveViewFocusMode.SetValue(                              StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AfModeAtLiveView)'                              false);                          LiveViewFocusMode.IsEnabled = LiveViewFocusMode.NumericValue != 3;                          break;                      case CONST_PROP_BatteryLevel:                          {                              var data = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_BatteryLevel);                              if (data.Data != null && data.Data.Length > 0)                                  Battery = data.Data[0];                          }                          break;                      case CONST_PROP_ExposureIndicateStatus:                          {                              var data =                                  StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                   CONST_PROP_ExposureIndicateStatus);                              if (data.Data != null && data.Data.Length > 0)                              {                                  sbyte i =                                      unchecked(                                          (sbyte)data.Data[0]);                                  ExposureStatus = Convert.ToInt32(i);                              }                          }                          break;                      case CONST_PROP_LiveViewStatus:                          {                              MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewStatus);                              if (response.Data != null && response.Data.Length > 0)                              {                                  LiveViewOn = response.Data[0] == 1;                              }                              else                              {                                  LiveViewOn = false;                              }                              break;                          }                      case CONST_PROP_LiveViewSelector:                          {                              MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewSelector);                              if (response.Data != null && response.Data.Length > 0)                              {                                  LiveViewMovieOn = response.Data[0] == 1;                              }                              else                              {                                  LiveViewMovieOn = false;                              }                              break;                          }                      default:                          // imrovements from: http://digicamcontrol.com/forum/testingbug-reports/buglet-nikonbasecs                          foreach (PropertyValue<long> advancedProperty in AdvancedProperties.Where(advancedProperty => advancedProperty.Code == prop))                          {                              if (advancedProperty.Name == "Image Size")                              {                                  var val = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                      advancedProperty.Code);                                  if (val.Data != null && val.Data.Length > 0)                                  {                                      advancedProperty.SetValue(                                          Encoding.Unicode.GetString(val.Data' 1' 20)' false);                                  }                              }                              else                              {                                  advancedProperty.SetValue(                                      StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                          advancedProperty.Code)' false);                              }                          }                          break;                  }
Magic Number,CameraControl.Devices.Nikon,NikonD600Base,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD600Base.cs,ReadDeviceProperties,The following statement contains a magic number: switch (prop)                  {                      case CONST_PROP_Fnumber:                          //FNumber.SetValue(_stillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_Fnumber));                          ReInitFNumber(false);                          break;                      case CONST_PROP_MovieFnumber:                          //FNumber.SetValue(_stillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_Fnumber));                          ReInitFNumber(false);                          break;                      //case CONST_PROP_ExposureIndex:                      //    NormalIsoNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                      //                                                        CONST_PROP_ExposureIndex)' false);                      //    break;                      case CONST_PROP_ExposureIndexEx:                          NormalIsoNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                              CONST_PROP_ExposureIndexEx)' false);                          break;                      case CONST_PROP_MovieExposureIndex:                          MovieFNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                              CONST_PROP_MovieExposureIndex)' false);                          break;                      //case CONST_PROP_ExposureTime:                      //    NormalShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                      //                                                           CONST_PROP_ExposureTime)' false);                      //    break;                      case CONST_PROP_ShutterSpeed:                          NormalShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                 CONST_PROP_ShutterSpeed)' false);                          break;                      case CONST_PROP_MovieShutterSpeed:                          MovieShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                 CONST_PROP_MovieShutterSpeed)' false);                          break;                      case CONST_PROP_WhiteBalance:                          WhiteBalance.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                 CONST_PROP_WhiteBalance)' false);                          break;                      case CONST_PROP_ExposureProgramMode:                          Mode.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                         CONST_PROP_ExposureProgramMode)' true);                          break;                      case CONST_PROP_ExposureBiasCompensation:                          NormalExposureCompensation.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                         CONST_PROP_ExposureBiasCompensation)'                                                        false);                          break;                      case CONST_PROP_MovieExposureBiasCompensation:                          MovieExposureCompensation.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                         CONST_PROP_MovieExposureBiasCompensation)'                                                        false);                          break;                        case CONST_PROP_CompressionSetting:                          CompressionSetting.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                       CONST_PROP_CompressionSetting)'                                                      false);                          break;                      case CONST_PROP_ExposureMeteringMode:                          ExposureMeteringMode.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                         CONST_PROP_ExposureMeteringMode)'                                                        false);                          break;                      case CONST_PROP_AFModeSelect:                          NormalFocusMode.SetValue(                              StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AFModeSelect)'                              false);                          NormalFocusMode.IsEnabled = NormalFocusMode.NumericValue != 3;                          break;                      case CONST_PROP_AfModeAtLiveView:                          LiveViewFocusMode.SetValue(                              StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AfModeAtLiveView)'                              false);                          LiveViewFocusMode.IsEnabled = LiveViewFocusMode.NumericValue != 3;                          break;                      case CONST_PROP_BatteryLevel:                          {                              var data = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_BatteryLevel);                              if (data.Data != null && data.Data.Length > 0)                                  Battery = data.Data[0];                          }                          break;                      case CONST_PROP_ExposureIndicateStatus:                          {                              var data =                                  StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                   CONST_PROP_ExposureIndicateStatus);                              if (data.Data != null && data.Data.Length > 0)                              {                                  sbyte i =                                      unchecked(                                          (sbyte)data.Data[0]);                                  ExposureStatus = Convert.ToInt32(i);                              }                          }                          break;                      case CONST_PROP_LiveViewStatus:                          {                              MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewStatus);                              if (response.Data != null && response.Data.Length > 0)                              {                                  LiveViewOn = response.Data[0] == 1;                              }                              else                              {                                  LiveViewOn = false;                              }                              break;                          }                      case CONST_PROP_LiveViewSelector:                          {                              MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewSelector);                              if (response.Data != null && response.Data.Length > 0)                              {                                  LiveViewMovieOn = response.Data[0] == 1;                              }                              else                              {                                  LiveViewMovieOn = false;                              }                              break;                          }                      default:                          // imrovements from: http://digicamcontrol.com/forum/testingbug-reports/buglet-nikonbasecs                          foreach (PropertyValue<long> advancedProperty in AdvancedProperties.Where(advancedProperty => advancedProperty.Code == prop))                          {                              if (advancedProperty.Name == "Image Size")                              {                                  var val = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                      advancedProperty.Code);                                  if (val.Data != null && val.Data.Length > 0)                                  {                                      advancedProperty.SetValue(                                          Encoding.Unicode.GetString(val.Data' 1' 20)' false);                                  }                              }                              else                              {                                  advancedProperty.SetValue(                                      StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                          advancedProperty.Code)' false);                              }                          }                          break;                  }
Magic Number,CameraControl.Devices.Nikon,NikonD700,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD700.cs,GetLiveViewImage,The following statement contains a magic number: const int headerSize = 64;
Magic Number,CameraControl.Devices.Nikon,NikonD80,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD80.cs,InitCompressionSetting,The following statement contains a magic number: int type = BitConverter.ToInt16(result.Data' 2);
Magic Number,CameraControl.Devices.Nikon,NikonD80,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD80.cs,InitCompressionSetting,The following statement contains a magic number: byte formFlag = result.Data[(2 * datasize) + 5];
Magic Number,CameraControl.Devices.Nikon,NikonD80,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD80.cs,InitCompressionSetting,The following statement contains a magic number: byte formFlag = result.Data[(2 * datasize) + 5];
Magic Number,CameraControl.Devices.Nikon,NikonD80,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD80.cs,InitCompressionSetting,The following statement contains a magic number: byte defval = result.Data[datasize + 5];
Magic Number,CameraControl.Devices.Nikon,NikonD80,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD80.cs,InitCompressionSetting,The following statement contains a magic number: byte val = result.Data[((2 * datasize) + 6 + 2) + i];
Magic Number,CameraControl.Devices.Nikon,NikonD80,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD80.cs,InitCompressionSetting,The following statement contains a magic number: byte val = result.Data[((2 * datasize) + 6 + 2) + i];
Magic Number,CameraControl.Devices.Nikon,NikonD80,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD80.cs,InitCompressionSetting,The following statement contains a magic number: byte val = result.Data[((2 * datasize) + 6 + 2) + i];
Magic Number,CameraControl.Devices.Nikon,NikonD80,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD80.cs,InitCompressionSetting,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonD80,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD80.cs,InitCompressionSetting,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonD80,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD80.cs,InitCompressionSetting,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonD80,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD80.cs,CapturePhotoNoAf,The following statement contains a magic number: ErrorCodes.GetException(StillImageDevice.ExecuteWriteData(CONST_CMD_SetDevicePropValue' new[] {(byte) 4}'                                                                            CONST_PROP_AFModeSelect));
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,NikonD800,The following statement contains a magic number: _autoIsoTable = new Dictionary<byte' string>()              {                  {0' "200"}'                  {1' "250"}'                  {2' "280"}'                  {3' "320"}'                  {4' "400"}'                  {5' "500"}'                  {6' "560"}'                  {7' "640"}'                  {8' "800"}'                  {9' "1000"}'                  {10' "1100"}'                  {11' "1250"}'                  {12' "1600"}'                  {13' "2000"}'                  {14' "2200"}'                  {15' "2500"}'                  {16' "3200"}'                  {17' "4000"}'                  {18' "4500"}'                  {19' "5000"}'                  {20' "6400"}'                  {21' "Hi 0.3"}'                  {22' "Hi 0.5"}'                  {23' "Hi 0.7"}'                  {24' "Hi 1"}'                  {25' "Hi 2"}'              };
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LiveViewImageWidth = ToInt16(result' 8);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LiveViewImageHeight = ToInt16(result' 10);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.ImageWidth = ToInt16(result' 12);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.ImageHeight = ToInt16(result' 14);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusFrameXSize = ToInt16(result' 16);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusFrameYSize = ToInt16(result' 18);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusX = ToInt16(result' 20);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.FocusY = ToInt16(result' 22);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.Focused = result[40] != 1;
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.MovieIsRecording = result[60] == 1;
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.MovieTimeRemain = ToDeciaml(result' 56);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.Rotation = -90;
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: result[29] == 1
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.Rotation = 90;
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: result[29] == 2
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: result[29] == 2
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LevelAngleRolling = ToInt16(result' 44);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LevelAnglePitching = ToInt16(result' 48);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.LevelAngleYawing = ToInt16(result' 52);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundL = (int)(result[344] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundL = (int)(result[344] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundL = (int)(result[344] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundR = (int)(result[345] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundR = (int)(result[345] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.PeakSoundR = (int)(result[345] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundL = (int)(result[346] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundL = (int)(result[346] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundL = (int)(result[346] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundR = (int)(result[347] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundR = (int)(result[347] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,GetAdditionalLiveViewData,The following statement contains a magic number: viewData.SoundR = (int)(result[347] / 14.0 * 100);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,InitExposureDelay,The following statement contains a magic number: res.AddValues("1 sec"' 2);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,InitExposureDelay,The following statement contains a magic number: res.AddValues("OFF"' 3);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReInitShutterSpeed,The following statement contains a magic number: byte datasize = 4;
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReInitShutterSpeed,The following statement contains a magic number: int type = BitConverter.ToInt16(result.Data' 2);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReInitShutterSpeed,The following statement contains a magic number: byte formFlag = result.Data[(2 * datasize) + 5];
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReInitShutterSpeed,The following statement contains a magic number: byte formFlag = result.Data[(2 * datasize) + 5];
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReInitShutterSpeed,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReInitShutterSpeed,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReInitShutterSpeed,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReInitShutterSpeed,The following statement contains a magic number: byte datasize = 4;
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReInitShutterSpeed,The following statement contains a magic number: int type = BitConverter.ToInt16(result.Data' 2);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReInitShutterSpeed,The following statement contains a magic number: byte formFlag = result.Data[(2 * datasize) + 5];
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReInitShutterSpeed,The following statement contains a magic number: byte formFlag = result.Data[(2 * datasize) + 5];
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 defval = BitConverter.ToUInt32(result.Data' datasize + 5);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReInitShutterSpeed,The following statement contains a magic number: UInt32 val = BitConverter.ToUInt32(result.Data' ((2 * datasize) + 6 + 2) + i);
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReInitShutterSpeed,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReInitShutterSpeed,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReInitShutterSpeed,The following statement contains a magic number: i < result.Data.Length - ((2 * datasize) + 6 + 2)
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReadDeviceProperties,The following statement contains a magic number: switch (prop)                  {                      case CONST_PROP_Fnumber:                          //FNumber.SetValue(_stillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_Fnumber));                          ReInitFNumber(false);                          break;                      case CONST_PROP_MovieFnumber:                          //FNumber.SetValue(_stillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_Fnumber));                          ReInitFNumber(false);                          break;                      case CONST_PROP_ExposureIndex:                          NormalIsoNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                              CONST_PROP_ExposureIndex)' false);                          break;                      //case CONST_PROP_ExposureIndexEx:                      //    NormalIsoNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                      //                                                        CONST_PROP_ExposureIndexEx)' false);                      //    break;                      case CONST_PROP_MovieExposureIndex:                          MovieFNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                              CONST_PROP_MovieExposureIndex)' false);                          break;                      //case CONST_PROP_ExposureTime:                      //    NormalShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                      //                                                           CONST_PROP_ExposureTime)' false);                      //    break;                      case CONST_PROP_ShutterSpeed:                          NormalShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                 CONST_PROP_ShutterSpeed)' false);                          break;                      case CONST_PROP_MovieShutterSpeed:                          MovieShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                 CONST_PROP_MovieShutterSpeed)' false);                          break;                      case CONST_PROP_WhiteBalance:                          WhiteBalance.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                 CONST_PROP_WhiteBalance)' false);                          break;                      case CONST_PROP_ExposureProgramMode:                          Mode.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                         CONST_PROP_ExposureProgramMode)' true);                          break;                      case CONST_PROP_ExposureBiasCompensation:                          NormalExposureCompensation.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                         CONST_PROP_ExposureBiasCompensation)'                                                        false);                          break;                      case CONST_PROP_MovieExposureBiasCompensation:                          MovieExposureCompensation.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                         CONST_PROP_MovieExposureBiasCompensation)'                                                        false);                          break;                        case CONST_PROP_CompressionSetting:                          CompressionSetting.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                       CONST_PROP_CompressionSetting)'                                                      false);                          break;                      case CONST_PROP_ExposureMeteringMode:                          ExposureMeteringMode.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                         CONST_PROP_ExposureMeteringMode)'                                                        false);                          break;                      case CONST_PROP_AFModeSelect:                          NormalFocusMode.SetValue(                              StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AFModeSelect)'                              false);                          NormalFocusMode.IsEnabled = NormalFocusMode.NumericValue != 3;                          break;                      case CONST_PROP_AfModeAtLiveView:                          LiveViewFocusMode.SetValue(                              StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AfModeAtLiveView)'                              false);                          LiveViewFocusMode.IsEnabled = LiveViewFocusMode.NumericValue != 3;                          break;                      case CONST_PROP_BatteryLevel:                          {                              var data = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_BatteryLevel);                              if (data.Data != null && data.Data.Length > 0)                                  Battery = data.Data[0];                          }                          break;                      case CONST_PROP_ExposureIndicateStatus:                          {                              var data =                                  StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                   CONST_PROP_ExposureIndicateStatus);                              if (data.Data != null && data.Data.Length > 0)                              {                                  sbyte i =                                      unchecked(                                          (sbyte)data.Data[0]);                                  ExposureStatus = Convert.ToInt32(i);                              }                          }                          break;                      case CONST_PROP_LiveViewStatus:                          {                              MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewStatus);                              if (response.Data != null && response.Data.Length > 0)                              {                                  LiveViewOn = response.Data[0] == 1;                              }                              else                              {                                  LiveViewOn = false;                              }                              break;                          }                      case CONST_PROP_LiveViewSelector:                          {                              MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewSelector);                              if (response.Data != null && response.Data.Length > 0)                              {                                  LiveViewMovieOn = response.Data[0] == 1;                              }                              else                              {                                  LiveViewMovieOn = false;                              }                              break;                          }                      default:                          // imrovements from: http://digicamcontrol.com/forum/testingbug-reports/buglet-nikonbasecs                          foreach (PropertyValue<long> advancedProperty in AdvancedProperties.Where(advancedProperty => advancedProperty.Code == prop))                          {                              if (advancedProperty.Name == "Image Size")                              {                                  var val = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                      advancedProperty.Code);                                  if (val.Data != null && val.Data.Length > 0)                                  {                                      advancedProperty.SetValue(                                          Encoding.Unicode.GetString(val.Data' 1' 20)' false);                                  }                              }                              else                              {                                  advancedProperty.SetValue(                                      StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                          advancedProperty.Code)' false);                              }                          }                          break;                  }
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReadDeviceProperties,The following statement contains a magic number: switch (prop)                  {                      case CONST_PROP_Fnumber:                          //FNumber.SetValue(_stillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_Fnumber));                          ReInitFNumber(false);                          break;                      case CONST_PROP_MovieFnumber:                          //FNumber.SetValue(_stillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_Fnumber));                          ReInitFNumber(false);                          break;                      case CONST_PROP_ExposureIndex:                          NormalIsoNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                              CONST_PROP_ExposureIndex)' false);                          break;                      //case CONST_PROP_ExposureIndexEx:                      //    NormalIsoNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                      //                                                        CONST_PROP_ExposureIndexEx)' false);                      //    break;                      case CONST_PROP_MovieExposureIndex:                          MovieFNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                              CONST_PROP_MovieExposureIndex)' false);                          break;                      //case CONST_PROP_ExposureTime:                      //    NormalShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                      //                                                           CONST_PROP_ExposureTime)' false);                      //    break;                      case CONST_PROP_ShutterSpeed:                          NormalShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                 CONST_PROP_ShutterSpeed)' false);                          break;                      case CONST_PROP_MovieShutterSpeed:                          MovieShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                 CONST_PROP_MovieShutterSpeed)' false);                          break;                      case CONST_PROP_WhiteBalance:                          WhiteBalance.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                 CONST_PROP_WhiteBalance)' false);                          break;                      case CONST_PROP_ExposureProgramMode:                          Mode.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                         CONST_PROP_ExposureProgramMode)' true);                          break;                      case CONST_PROP_ExposureBiasCompensation:                          NormalExposureCompensation.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                         CONST_PROP_ExposureBiasCompensation)'                                                        false);                          break;                      case CONST_PROP_MovieExposureBiasCompensation:                          MovieExposureCompensation.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                         CONST_PROP_MovieExposureBiasCompensation)'                                                        false);                          break;                        case CONST_PROP_CompressionSetting:                          CompressionSetting.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                       CONST_PROP_CompressionSetting)'                                                      false);                          break;                      case CONST_PROP_ExposureMeteringMode:                          ExposureMeteringMode.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                         CONST_PROP_ExposureMeteringMode)'                                                        false);                          break;                      case CONST_PROP_AFModeSelect:                          NormalFocusMode.SetValue(                              StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AFModeSelect)'                              false);                          NormalFocusMode.IsEnabled = NormalFocusMode.NumericValue != 3;                          break;                      case CONST_PROP_AfModeAtLiveView:                          LiveViewFocusMode.SetValue(                              StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AfModeAtLiveView)'                              false);                          LiveViewFocusMode.IsEnabled = LiveViewFocusMode.NumericValue != 3;                          break;                      case CONST_PROP_BatteryLevel:                          {                              var data = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_BatteryLevel);                              if (data.Data != null && data.Data.Length > 0)                                  Battery = data.Data[0];                          }                          break;                      case CONST_PROP_ExposureIndicateStatus:                          {                              var data =                                  StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                   CONST_PROP_ExposureIndicateStatus);                              if (data.Data != null && data.Data.Length > 0)                              {                                  sbyte i =                                      unchecked(                                          (sbyte)data.Data[0]);                                  ExposureStatus = Convert.ToInt32(i);                              }                          }                          break;                      case CONST_PROP_LiveViewStatus:                          {                              MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewStatus);                              if (response.Data != null && response.Data.Length > 0)                              {                                  LiveViewOn = response.Data[0] == 1;                              }                              else                              {                                  LiveViewOn = false;                              }                              break;                          }                      case CONST_PROP_LiveViewSelector:                          {                              MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewSelector);                              if (response.Data != null && response.Data.Length > 0)                              {                                  LiveViewMovieOn = response.Data[0] == 1;                              }                              else                              {                                  LiveViewMovieOn = false;                              }                              break;                          }                      default:                          // imrovements from: http://digicamcontrol.com/forum/testingbug-reports/buglet-nikonbasecs                          foreach (PropertyValue<long> advancedProperty in AdvancedProperties.Where(advancedProperty => advancedProperty.Code == prop))                          {                              if (advancedProperty.Name == "Image Size")                              {                                  var val = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                      advancedProperty.Code);                                  if (val.Data != null && val.Data.Length > 0)                                  {                                      advancedProperty.SetValue(                                          Encoding.Unicode.GetString(val.Data' 1' 20)' false);                                  }                              }                              else                              {                                  advancedProperty.SetValue(                                      StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                          advancedProperty.Code)' false);                              }                          }                          break;                  }
Magic Number,CameraControl.Devices.Nikon,NikonD800,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD800.cs,ReadDeviceProperties,The following statement contains a magic number: switch (prop)                  {                      case CONST_PROP_Fnumber:                          //FNumber.SetValue(_stillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_Fnumber));                          ReInitFNumber(false);                          break;                      case CONST_PROP_MovieFnumber:                          //FNumber.SetValue(_stillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_Fnumber));                          ReInitFNumber(false);                          break;                      case CONST_PROP_ExposureIndex:                          NormalIsoNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                              CONST_PROP_ExposureIndex)' false);                          break;                      //case CONST_PROP_ExposureIndexEx:                      //    NormalIsoNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                      //                                                        CONST_PROP_ExposureIndexEx)' false);                      //    break;                      case CONST_PROP_MovieExposureIndex:                          MovieFNumber.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                              CONST_PROP_MovieExposureIndex)' false);                          break;                      //case CONST_PROP_ExposureTime:                      //    NormalShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                      //                                                           CONST_PROP_ExposureTime)' false);                      //    break;                      case CONST_PROP_ShutterSpeed:                          NormalShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                 CONST_PROP_ShutterSpeed)' false);                          break;                      case CONST_PROP_MovieShutterSpeed:                          MovieShutterSpeed.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                 CONST_PROP_MovieShutterSpeed)' false);                          break;                      case CONST_PROP_WhiteBalance:                          WhiteBalance.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                 CONST_PROP_WhiteBalance)' false);                          break;                      case CONST_PROP_ExposureProgramMode:                          Mode.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                         CONST_PROP_ExposureProgramMode)' true);                          break;                      case CONST_PROP_ExposureBiasCompensation:                          NormalExposureCompensation.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                         CONST_PROP_ExposureBiasCompensation)'                                                        false);                          break;                      case CONST_PROP_MovieExposureBiasCompensation:                          MovieExposureCompensation.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                         CONST_PROP_MovieExposureBiasCompensation)'                                                        false);                          break;                        case CONST_PROP_CompressionSetting:                          CompressionSetting.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                       CONST_PROP_CompressionSetting)'                                                      false);                          break;                      case CONST_PROP_ExposureMeteringMode:                          ExposureMeteringMode.SetValue(StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                                         CONST_PROP_ExposureMeteringMode)'                                                        false);                          break;                      case CONST_PROP_AFModeSelect:                          NormalFocusMode.SetValue(                              StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AFModeSelect)'                              false);                          NormalFocusMode.IsEnabled = NormalFocusMode.NumericValue != 3;                          break;                      case CONST_PROP_AfModeAtLiveView:                          LiveViewFocusMode.SetValue(                              StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_AfModeAtLiveView)'                              false);                          LiveViewFocusMode.IsEnabled = LiveViewFocusMode.NumericValue != 3;                          break;                      case CONST_PROP_BatteryLevel:                          {                              var data = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue' CONST_PROP_BatteryLevel);                              if (data.Data != null && data.Data.Length > 0)                                  Battery = data.Data[0];                          }                          break;                      case CONST_PROP_ExposureIndicateStatus:                          {                              var data =                                  StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                                                   CONST_PROP_ExposureIndicateStatus);                              if (data.Data != null && data.Data.Length > 0)                              {                                  sbyte i =                                      unchecked(                                          (sbyte)data.Data[0]);                                  ExposureStatus = Convert.ToInt32(i);                              }                          }                          break;                      case CONST_PROP_LiveViewStatus:                          {                              MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewStatus);                              if (response.Data != null && response.Data.Length > 0)                              {                                  LiveViewOn = response.Data[0] == 1;                              }                              else                              {                                  LiveViewOn = false;                              }                              break;                          }                      case CONST_PROP_LiveViewSelector:                          {                              MTPDataResponse response = ExecuteReadDataEx(CONST_CMD_GetDevicePropValue' CONST_PROP_LiveViewSelector);                              if (response.Data != null && response.Data.Length > 0)                              {                                  LiveViewMovieOn = response.Data[0] == 1;                              }                              else                              {                                  LiveViewMovieOn = false;                              }                              break;                          }                      default:                          // imrovements from: http://digicamcontrol.com/forum/testingbug-reports/buglet-nikonbasecs                          foreach (PropertyValue<long> advancedProperty in AdvancedProperties.Where(advancedProperty => advancedProperty.Code == prop))                          {                              if (advancedProperty.Name == "Image Size")                              {                                  var val = StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                      advancedProperty.Code);                                  if (val.Data != null && val.Data.Length > 0)                                  {                                      advancedProperty.SetValue(                                          Encoding.Unicode.GetString(val.Data' 1' 20)' false);                                  }                              }                              else                              {                                  advancedProperty.SetValue(                                      StillImageDevice.ExecuteReadData(CONST_CMD_GetDevicePropValue'                                          advancedProperty.Code)' false);                              }                          }                          break;                  }
Magic Number,CameraControl.Devices.Nikon,NikonD90,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD90.cs,GetLiveViewImage,The following statement contains a magic number: const int headerSize = 128;
Magic Number,CameraControl.Devices.Nikon,NikonD90,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Nikon\NikonD90.cs,CapturePhotoNoAf,The following statement contains a magic number: SetProperty(CONST_CMD_SetDevicePropValue' new[] {(byte) 4}' CONST_PROP_AFModeSelect);
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,FakeCameraDevice,The following statement contains a magic number: CompressionSetting.AddValues("nef"' 2);
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,FakeCameraDevice,The following statement contains a magic number: Battery = 100;
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,FakeCameraDevice,The following statement contains a magic number: IsoNumber.AddValues("100"' 100);
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,FakeCameraDevice,The following statement contains a magic number: IsoNumber.AddValues("200"' 200);
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,FakeCameraDevice,The following statement contains a magic number: IsoNumber.AddValues("300"' 300);
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,FakeCameraDevice,The following statement contains a magic number: val.AddValues("Val 2"' 2);
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,FakeCameraDevice,The following statement contains a magic number: val.AddValues("Val 3"' 3);
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,StartLiveView,The following statement contains a magic number: _liveViewData.FocusFrameXSize = 100;
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,StartLiveView,The following statement contains a magic number: _liveViewData.FocusFrameYSize = 100;
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,StartLiveView,The following statement contains a magic number: _liveViewData.LiveViewImageHeight = 639;
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,StartLiveView,The following statement contains a magic number: _liveViewData.LiveViewImageWidth = 639;
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,StartLiveView,The following statement contains a magic number: _liveViewData.ImageWidth = 639;
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,StartLiveView,The following statement contains a magic number: _liveViewData.ImageHeight = 639;
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,StartLiveView,The following statement contains a magic number: _liveViewData.FocusX = 639/2;
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,StartLiveView,The following statement contains a magic number: _liveViewData.FocusX = 639/2;
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,StartLiveView,The following statement contains a magic number: _liveViewData.FocusY = 639 / 2;
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,StartLiveView,The following statement contains a magic number: _liveViewData.FocusY = 639 / 2;
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,GetLiveViewImage,The following statement contains a magic number: _liveViewData.SoundL > 99
Magic Number,CameraControl.Devices.Others,FakeCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\FakeCameraDevice.cs,GetLiveViewImage,The following statement contains a magic number: _liveViewData.SoundR > 99
Magic Number,CameraControl.Devices.Others,OscCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\OscCamera.cs,InitMode,The following statement contains a magic number: Mode.AddValues("Auto"' 2);
Magic Number,CameraControl.Devices.Others,OscCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\OscCamera.cs,InitMode,The following statement contains a magic number: Mode.AddValues("ISO priority program"' 9);
Magic Number,CameraControl.Devices.Others,WebCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\WebCameraDevice.cs,StartLiveView,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,CameraControl.Devices.Others,WiaCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\WiaCameraDevice.cs,Init,The following statement contains a magic number: string s = (d/100).ToString("0.0");
Magic Number,CameraControl.Devices.Others,WiaCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\WiaCameraDevice.cs,Init,The following statement contains a magic number: string s = decimal.Round(d/1000' 1).ToString();
Magic Number,CameraControl.Devices.Others,WiaCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\WiaCameraDevice.cs,ConnectToWiaDevice,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,CameraControl.Devices.Others,WiaCameraDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\WiaCameraDevice.cs,ConnectToWiaDevice,The following statement contains a magic number: Thread.Sleep(250);
Magic Number,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,Init,The following statement contains a magic number: Mode.AddValues("Delayed"' 2);
Magic Number,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,Init,The following statement contains a magic number: SendCommand(3);
Magic Number,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,Init,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,LoadProperties,The following statement contains a magic number: SendCommand(9' CompressionSetting.Tag);
Magic Number,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,LoadProperties,The following statement contains a magic number: SendCommand(9' Mode.Tag);
Magic Number,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,LoadProperties,The following statement contains a magic number: SendCommand(9' ExposureMeteringMode.Tag);
Magic Number,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,LoadProperties,The following statement contains a magic number: SendCommand(9' property.Tag);
Magic Number,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,LoadProperties,The following statement contains a magic number: SendCommand(9' property.Tag);
Magic Number,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,Mode_ValueChanged,The following statement contains a magic number: switch (val)              {                  case 0:                      Protocol.SendValue("capture_mode"' "precise quality");                      break;                  case 1:                      Protocol.SendValue("capture_mode"' "burst quality");                      break;                  case 2:                      Protocol.SendValue("capture_mode"' "precise self quality");                      break;                  case 3:                      Protocol.SendValue("capture_mode"' "precise quality cont.");                      break;              }
Magic Number,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,Mode_ValueChanged,The following statement contains a magic number: switch (val)              {                  case 0:                      Protocol.SendValue("capture_mode"' "precise quality");                      break;                  case 1:                      Protocol.SendValue("capture_mode"' "burst quality");                      break;                  case 2:                      Protocol.SendValue("capture_mode"' "precise self quality");                      break;                  case 3:                      Protocol.SendValue("capture_mode"' "precise quality cont.");                      break;              }
Magic Number,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,SendCommand,The following statement contains a magic number: _resetEvent.WaitOne(500);
Magic Number,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,SendCommand,The following statement contains a magic number: _resetEvent.WaitOne(1000);
Magic Number,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,GetObjects,The following statement contains a magic number: SendCommand(1283' "\\/var\\/www\\/DCIM\\/100MEDIA/");
Magic Number,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,GetObjects,The following statement contains a magic number: SendCommand(1282' " -D -S");
Magic Number,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,GetObjects,The following statement contains a magic number: _listingEvent.WaitOne(2500);
Magic Number,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,CapturePhoto,The following statement contains a magic number: Mode.NumericValue == 3
Magic Number,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,CapturePhoto,The following statement contains a magic number: Protocol.SendCommand(_timelapse_running ? 770 : 769);
Magic Number,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,CapturePhoto,The following statement contains a magic number: Protocol.SendCommand(_timelapse_running ? 770 : 769);
Magic Number,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,StartRecordMovie,The following statement contains a magic number: Protocol.SendCommand(513);
Magic Number,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,StopRecordMovie,The following statement contains a magic number: Protocol.SendCommand(514);
Magic Number,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,DeleteObject,The following statement contains a magic number: SendCommand(1283' "\\/var\\/www\\/DCIM\\/100MEDIA/");
Magic Number,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,DeleteObject,The following statement contains a magic number: SendCommand(1281' (string) deviceObject.Handle);
Magic Number,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,SetProperty,The following statement contains a magic number: switch (prop)              {                  case "battery":                      int i;                      if (int.TryParse(val' out i))                          Battery = i;                      break;                  case "photo_quality":                      CompressionSetting.Value = val;                      break;                  case "capture_mode":                      switch (val)                      {                          case "precise quality":                              Mode.SetValue(0);                              break;                          case "burst quality":                              Mode.SetValue(1);                              break;                          case "precise self quality":                              Mode.SetValue(2);                              break;                          case "precise quality cont.":                              Mode.SetValue(3);                              break;                      }                      break;                  case "meter_mode":                      ExposureMeteringMode.Value = val;                      break;                  default:                      foreach (var property in Properties)                      {                          if (property.Tag == prop)                              property.Value = val;                      }                      foreach (var property in AdvancedProperties)                      {                          if (property.Tag == prop)                              property.Value = val;                      }                      break;              }
Magic Number,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,SetProperty,The following statement contains a magic number: switch (prop)              {                  case "battery":                      int i;                      if (int.TryParse(val' out i))                          Battery = i;                      break;                  case "photo_quality":                      CompressionSetting.Value = val;                      break;                  case "capture_mode":                      switch (val)                      {                          case "precise quality":                              Mode.SetValue(0);                              break;                          case "burst quality":                              Mode.SetValue(1);                              break;                          case "precise self quality":                              Mode.SetValue(2);                              break;                          case "precise quality cont.":                              Mode.SetValue(3);                              break;                      }                      break;                  case "meter_mode":                      ExposureMeteringMode.Value = val;                      break;                  default:                      foreach (var property in Properties)                      {                          if (property.Tag == prop)                              property.Value = val;                      }                      foreach (var property in AdvancedProperties)                      {                          if (property.Tag == prop)                              property.Value = val;                      }                      break;              }
Magic Number,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,StartLiveView,The following statement contains a magic number: Protocol.SendCommand(259' "none_force");
Magic Number,PanonoTest,PanonoCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\PanonoCamera.cs,Init,The following statement contains a magic number: _ws.WaitTime = new TimeSpan(0' 0' 4);
Magic Number,PanonoTest,PanonoCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\PanonoCamera.cs,InitIso,The following statement contains a magic number: IsoNumber.AddValues("50"' 50);
Magic Number,PanonoTest,PanonoCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\PanonoCamera.cs,InitIso,The following statement contains a magic number: IsoNumber.AddValues("100"' 100);
Magic Number,PanonoTest,PanonoCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\PanonoCamera.cs,InitIso,The following statement contains a magic number: IsoNumber.AddValues("200"' 200);
Magic Number,PanonoTest,PanonoCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\PanonoCamera.cs,InitIso,The following statement contains a magic number: IsoNumber.AddValues("400"' 400);
Magic Number,PanonoTest,PanonoCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\PanonoCamera.cs,InitIso,The following statement contains a magic number: IsoNumber.AddValues("800"' 800);
Magic Number,PanonoTest,PanonoCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\PanonoCamera.cs,InitIso,The following statement contains a magic number: IsoNumber.AddValues("1600"' 1600);
Magic Number,PanonoTest,PanonoCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\PanonoCamera.cs,TransferFile,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,PanonoTest,PanonoCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\PanonoCamera.cs,TransferFileThumb,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,PanonoTest,PanonoCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\PanonoCamera.cs,GetId,The following statement contains a magic number: request_id > 1000000000
Magic Number,SonyCameraCommunication,CameraDiscovery,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\CameraDiscovery.cs,UDPSocketSetup,The following statement contains a magic number: udpSocket.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.MulticastTimeToLive' 2);
Magic Number,SonyCameraCommunication,CameraDiscovery,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\CameraDiscovery.cs,UDPSocketSetup,The following statement contains a magic number: udpSocket.Bind(new IPEndPoint(ip.Address' 60000));
Magic Number,SonyCameraCommunication,CameraDiscovery,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\CameraDiscovery.cs,MSearch,The following statement contains a magic number: byte[] receiveBuffer = new byte[64000];
Magic Number,SonyCameraCommunication,CameraDiscovery,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\CameraDiscovery.cs,MSearch,The following statement contains a magic number: (DateTime.Now - starTime).TotalSeconds > 4000
Magic Number,SonyCameraCommunication,CameraDiscovery,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\CameraDiscovery.cs,MSearch,The following statement contains a magic number: Thread.Sleep(150);
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,Init,The following statement contains a magic number: i < 101
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,LiveViewImageZoomRatio_ValueChanged,The following statement contains a magic number: ExecuteMethod("actZoom"' "out"' dif < 25 ? "1shot" : "start");
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,InitProps,The following statement contains a magic number: Thread.Sleep(3500);
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,GetEvent,The following statement contains a magic number: var elem = jResult[2];
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,GetEvent,The following statement contains a magic number: elem = jResult[5];
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,GetEvent,The following statement contains a magic number: elem = jResult[18];
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,GetEvent,The following statement contains a magic number: elem = jResult[27];
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,GetEvent,The following statement contains a magic number: elem = jResult[28];
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,GetEvent,The following statement contains a magic number: elem = jResult[29];
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,GetEvent,The following statement contains a magic number: elem = jResult[32];
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,GetEvent,The following statement contains a magic number: elem = jResult[33];
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,GetEvent,The following statement contains a magic number: elem = jResult[37];
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,GetEvent,The following statement contains a magic number: jResult.Count > 36
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,GetID,The following statement contains a magic number: request_id > 1000000000
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: var buff = ReadBytes(s' 8);
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: heder.SequenceNo = BitConverter.ToInt16(buff'2);
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: heder.TimeStamp = BitConverter.ToInt32(buff' 4);
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: buff = ReadBytes(s' 128);
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: playload.JpgDataSize = BitConverter.ToUInt16(new byte[] { buff[6]' buff[5]' buff[4]' 0 }' 0);
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: playload.JpgDataSize = BitConverter.ToUInt16(new byte[] { buff[6]' buff[5]' buff[4]' 0 }' 0);
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: playload.JpgDataSize = BitConverter.ToUInt16(new byte[] { buff[6]' buff[5]' buff[4]' 0 }' 0);
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: playload.PadingSize = buff[7];
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: _liveViewData.FocusY = BitConverter.ToInt16(new byte[] { data[3]' data[2] }' 0);
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: _liveViewData.FocusY = BitConverter.ToInt16(new byte[] { data[3]' data[2] }' 0);
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: _liveViewData.FocusFrameXSize = BitConverter.ToInt16(new byte[] { data[5]' data[4] }' 0) - _liveViewData.FocusX;
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: _liveViewData.FocusFrameXSize = BitConverter.ToInt16(new byte[] { data[5]' data[4] }' 0) - _liveViewData.FocusX;
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: _liveViewData.FocusFrameYSize = BitConverter.ToInt16(new byte[] { data[7]' data[6] }' 0) - _liveViewData.FocusY ;
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: _liveViewData.FocusFrameYSize = BitConverter.ToInt16(new byte[] { data[7]' data[6] }' 0) - _liveViewData.FocusY ;
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: _liveViewData.Focused = data[9] != 0;
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: _liveViewData.ImageWidth = 10000;
Magic Number,CameraControl.Devices.Sony,SonyWifiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Sony\SonyWifiCamera.cs,OnGetResponse,The following statement contains a magic number: _liveViewData.ImageHeight = 10000;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,ExecuteReadBigData,The following statement contains a magic number: resp.Header.Length >= len - 4
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,ExecuteReadData,The following statement contains a magic number: resp.Header.Length >= len - 4
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,ExecuteWithNoData,The following statement contains a magic number: resp.Header.Length >= len - 4
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,ExecuteWriteData,The following statement contains a magic number: resp.Header.Length >= len - 4
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: int index = 2 + 4 + 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: int index = 2 + 4 + 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: int index = 2 + 4 + 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += vendorDescCount * 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 3;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: int strlen1 = res.Data[index]*2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: Manufacturer = Encoding.Unicode.GetString(res.Data' index' strlen1-2);
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: int strlen2 = res.Data[index] * 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: Model = Encoding.Unicode.GetString(res.Data' index' strlen2-2);
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: int strlen3 = res.Data[index] * 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: int strlen4 = res.Data[index] * 2;
Magic Number,CameraControl.Devices.TransferProtocol,DdServerProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DdServerProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: SerialNumber = Encoding.Unicode.GetString(res.Data' index' strlen4-2);
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: int index = 2 + 4 + 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: int index = 2 + 4 + 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: int index = 2 + 4 + 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += vendorDescCount * 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 3;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: int strlen1 = res.Data[index] * 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: Manufacturer = Encoding.Unicode.GetString(res.Data' index' strlen1 - 2);
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: int strlen2 = res.Data[index] * 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: Model = Encoding.Unicode.GetString(res.Data' index' strlen2 - 2);
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: int strlen3 = res.Data[index] * 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: int strlen4 = res.Data[index] * 2;
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,LoadDeviceInfo,The following statement contains a magic number: SerialNumber = Encoding.Unicode.GetString(res.Data' index' strlen4 - 2);
Magic Number,CameraControl.Devices.TransferProtocol,PtpIpProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIpProtocol.cs,ExecuteWriteData,The following statement contains a magic number: var cmd = new CmdRequest(code'2) {Parameters = parameters};
Magic Number,CameraControl.Devices.TransferProtocol,YiCameraProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\YiCameraProtocol.cs,Connect,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,CameraControl.Devices.TransferProtocol,YiCameraProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\YiCameraProtocol.cs,Connect,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,CameraControl.Devices.TransferProtocol,YiCameraProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\YiCameraProtocol.cs,Connect,The following statement contains a magic number: (DateTime.Now - t).TotalMilliseconds > 3000
Magic Number,CameraControl.Devices.TransferProtocol,YiCameraProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\YiCameraProtocol.cs,Connect,The following statement contains a magic number: SendCommand(257);
Magic Number,CameraControl.Devices.TransferProtocol,YiCameraProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\YiCameraProtocol.cs,Connect,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,CameraControl.Devices.TransferProtocol,YiCameraProtocol,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\YiCameraProtocol.cs,Connect,The following statement contains a magic number: (DateTime.Now - t).TotalMilliseconds > 3000
Magic Number,ddserverTest,ResponseBlockContainer,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ResponseBlockContainer.cs,readParameters,The following statement contains a magic number: (pLength%4) != 0
Magic Number,ddserverTest,ResponseBlockContainer,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ResponseBlockContainer.cs,readParameters,The following statement contains a magic number: pLength > 20
Magic Number,ddserverTest,ResponseBlockContainer,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ResponseBlockContainer.cs,readParameters,The following statement contains a magic number: Parameters = new uint[pLength/4];
Magic Number,ddserverTest,ResponseBlockContainer,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ResponseBlockContainer.cs,readParameters,The following statement contains a magic number: Parameters[i++] =                      (uint)                      (stream.ReadByte() | (stream.ReadByte() << 8) | (stream.ReadByte() << 16) |                       (stream.ReadByte() << 24));
Magic Number,ddserverTest,ResponseBlockContainer,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ResponseBlockContainer.cs,readParameters,The following statement contains a magic number: Parameters[i++] =                      (uint)                      (stream.ReadByte() | (stream.ReadByte() << 8) | (stream.ReadByte() << 16) |                       (stream.ReadByte() << 24));
Magic Number,ddserverTest,ResponseBlockContainer,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ResponseBlockContainer.cs,readParameters,The following statement contains a magic number: Parameters[i++] =                      (uint)                      (stream.ReadByte() | (stream.ReadByte() << 8) | (stream.ReadByte() << 16) |                       (stream.ReadByte() << 24));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ContainerHeader,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ContainerHeader.cs,ContainerHeader,The following statement contains a magic number: Length = readByte(stream) | (readByte(stream) << 8) | (readByte(stream) << 16) | (readByte(stream) << 24);
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ContainerHeader,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ContainerHeader.cs,ContainerHeader,The following statement contains a magic number: Length = readByte(stream) | (readByte(stream) << 8) | (readByte(stream) << 16) | (readByte(stream) << 24);
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ContainerHeader,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ContainerHeader.cs,ContainerHeader,The following statement contains a magic number: Length = readByte(stream) | (readByte(stream) << 8) | (readByte(stream) << 16) | (readByte(stream) << 24);
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ContainerHeader,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ContainerHeader.cs,ContainerHeader,The following statement contains a magic number: Code = readByte(stream) | (readByte(stream) << 8);
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ContainerHeader,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ContainerHeader.cs,ContainerHeader,The following statement contains a magic number: TransactionID = readByte(stream) | (readByte(stream) << 8) | (readByte(stream) << 16) |                              (readByte(stream) << 24);
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ContainerHeader,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ContainerHeader.cs,ContainerHeader,The following statement contains a magic number: TransactionID = readByte(stream) | (readByte(stream) << 8) | (readByte(stream) << 16) |                              (readByte(stream) << 24);
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ContainerHeader,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ContainerHeader.cs,ContainerHeader,The following statement contains a magic number: TransactionID = readByte(stream) | (readByte(stream) << 8) | (readByte(stream) << 16) |                              (readByte(stream) << 24);
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ContainerHeader,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ContainerHeader.cs,Write,The following statement contains a magic number: s.WriteByte((byte) (0xff & (Length >> 8)));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ContainerHeader,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ContainerHeader.cs,Write,The following statement contains a magic number: s.WriteByte((byte) (0xff & (Length >> 16)));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ContainerHeader,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ContainerHeader.cs,Write,The following statement contains a magic number: s.WriteByte((byte) (0xff & (Length >> 24)));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ContainerHeader,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ContainerHeader.cs,Write,The following statement contains a magic number: s.WriteByte((byte) (0xff & (Code >> 8)));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ContainerHeader,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ContainerHeader.cs,Write,The following statement contains a magic number: s.WriteByte((byte) (0xff & (TransactionID >> 8)));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ContainerHeader,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ContainerHeader.cs,Write,The following statement contains a magic number: s.WriteByte((byte) (0xff & (TransactionID >> 16)));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ContainerHeader,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ContainerHeader.cs,Write,The following statement contains a magic number: s.WriteByte((byte) (0xff & (TransactionID >> 24)));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,ReadInt,The following statement contains a magic number: return _inerStream.ReadByte() | (_inerStream.ReadByte() << 8) | (_inerStream.ReadByte() << 16) |                     (_inerStream.ReadByte() << 24);
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,ReadInt,The following statement contains a magic number: return _inerStream.ReadByte() | (_inerStream.ReadByte() << 8) | (_inerStream.ReadByte() << 16) |                     (_inerStream.ReadByte() << 24);
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,ReadInt,The following statement contains a magic number: return _inerStream.ReadByte() | (_inerStream.ReadByte() << 8) | (_inerStream.ReadByte() << 16) |                     (_inerStream.ReadByte() << 24);
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,ReadPacket,The following statement contains a magic number: var buff = new byte[length - 4];
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,ReadPacket,The following statement contains a magic number: _inerStream.Read(buff' 0' length - 4);
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,Write,The following statement contains a magic number: int totalsize = container.Header.Length + 4;
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,Write,The following statement contains a magic number: ms.WriteByte((byte)(0xff & (totalsize >> 8)));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,Write,The following statement contains a magic number: ms.WriteByte((byte)(0xff & (totalsize >> 16)));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,Write,The following statement contains a magic number: ms.WriteByte((byte)(0xff & (totalsize >> 24)));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,Write,The following statement contains a magic number: int totalsize = container1.Header.Length + container2.Header.Length + 4;
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,Write,The following statement contains a magic number: ms.WriteByte((byte)(0xff & (totalsize >> 8)));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,Write,The following statement contains a magic number: ms.WriteByte((byte)(0xff & (totalsize >> 16)));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,Write,The following statement contains a magic number: ms.WriteByte((byte)(0xff & (totalsize >> 24)));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,GetDevices,The following statement contains a magic number: Write(new CommandBlockContainer(0002));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,GetDevices,The following statement contains a magic number: var buff = new byte[6];
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,GetDevices,The following statement contains a magic number: _inerStream.Read(buff' 0' 4);
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,GetDevices,The following statement contains a magic number: int totallegth = buff[3];
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,GetDevices,The following statement contains a magic number: int devcount = (dataBlockContainer.Payload[index] | (dataBlockContainer.Payload[index + 1] << 8));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,GetDevices,The following statement contains a magic number: res.Add(new DdServerDevice(dataBlockContainer.Payload' index + 2));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,GetDevices,The following statement contains a magic number: _inerStream.Read(buff' 0' 4);
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdServerDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdServerDevice.cs,DdServerDevice,The following statement contains a magic number: VendorId = (data[index] | (data[index + 1] << 8));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdServerDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdServerDevice.cs,DdServerDevice,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdServerDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdServerDevice.cs,DdServerDevice,The following statement contains a magic number: ProductId = (data[index] | (data[index + 1] << 8));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,DdServerDevice,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdServerDevice.cs,DdServerDevice,The following statement contains a magic number: index += 2;
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ParameterContainer,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ParameterContainer.cs,WritePayload,The following statement contains a magic number: s.WriteByte((byte) (0xff & (Parameters[i] >> 8)));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ParameterContainer,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ParameterContainer.cs,WritePayload,The following statement contains a magic number: s.WriteByte((byte) (0xff & (Parameters[i] >> 16)));
Magic Number,CameraControl.Devices.TransferProtocol.DDServer,ParameterContainer,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\ParameterContainer.cs,WritePayload,The following statement contains a magic number: s.WriteByte((byte) (0xff & (Parameters[i] >> 24)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,BaseCmd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\BaseCmd.cs,WriteInt,The following statement contains a magic number: s.WriteByte((byte)(0xff & (val >> 8)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,BaseCmd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\BaseCmd.cs,WriteInt,The following statement contains a magic number: s.WriteByte((byte)(0xff & (val >> 16)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,BaseCmd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\BaseCmd.cs,WriteInt,The following statement contains a magic number: s.WriteByte((byte)(0xff & (val >> 24)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdRequest,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdRequest.cs,Write,The following statement contains a magic number: Header.Length = (uint) (8 + 4 + 2 + 4 + (Parameters != null ? (Parameters.Length*4) : 0));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdRequest,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdRequest.cs,Write,The following statement contains a magic number: Header.Length = (uint) (8 + 4 + 2 + 4 + (Parameters != null ? (Parameters.Length*4) : 0));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdRequest,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdRequest.cs,Write,The following statement contains a magic number: Header.Length = (uint) (8 + 4 + 2 + 4 + (Parameters != null ? (Parameters.Length*4) : 0));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdRequest,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdRequest.cs,Write,The following statement contains a magic number: Header.Length = (uint) (8 + 4 + 2 + 4 + (Parameters != null ? (Parameters.Length*4) : 0));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdRequest,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdRequest.cs,Write,The following statement contains a magic number: Header.Length = (uint) (8 + 4 + 2 + 4 + (Parameters != null ? (Parameters.Length*4) : 0));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdRequest,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdRequest.cs,Write,The following statement contains a magic number: s.WriteByte((byte) (0xff & (this.Code >> 8)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdRequest,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdRequest.cs,Read,The following statement contains a magic number: this.Code = (uint) (readByte(s) | (readByte(s) << 8));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdRequest,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdRequest.cs,Read,The following statement contains a magic number: this.TransactionID = (uint) (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdRequest,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdRequest.cs,Read,The following statement contains a magic number: this.TransactionID = (uint) (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdRequest,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdRequest.cs,Read,The following statement contains a magic number: this.TransactionID = (uint) (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdRequest,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdRequest.cs,Read,The following statement contains a magic number: s.Read(b' 0' (int) (Header.Length - (8 + 2 + 4)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdRequest,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdRequest.cs,Read,The following statement contains a magic number: s.Read(b' 0' (int) (Header.Length - (8 + 2 + 4)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdRequest,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdRequest.cs,Read,The following statement contains a magic number: s.Read(b' 0' (int) (Header.Length - (8 + 2 + 4)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdResponse,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdResponse.cs,Read,The following statement contains a magic number: this.Code = readByte(s) | (readByte(s) << 8);
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdResponse,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdResponse.cs,Read,The following statement contains a magic number: this.TransactionID = (uint) (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdResponse,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdResponse.cs,Read,The following statement contains a magic number: this.TransactionID = (uint) (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdResponse,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdResponse.cs,Read,The following statement contains a magic number: this.TransactionID = (uint) (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdResponse,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdResponse.cs,Read,The following statement contains a magic number: vals.Add((uint) (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdResponse,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdResponse.cs,Read,The following statement contains a magic number: vals.Add((uint) (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdResponse,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdResponse.cs,Read,The following statement contains a magic number: vals.Add((uint) (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdResponse,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdResponse.cs,Read,The following statement contains a magic number: i < Header.Length - (8 + 2 + 4)/4
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdResponse,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdResponse.cs,Read,The following statement contains a magic number: i < Header.Length - (8 + 2 + 4)/4
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdResponse,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdResponse.cs,Read,The following statement contains a magic number: i < Header.Length - (8 + 2 + 4)/4
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdResponse,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdResponse.cs,Read,The following statement contains a magic number: i < Header.Length - (8 + 2 + 4)/4
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,CmdResponse,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\CmdResponse.cs,Read,The following statement contains a magic number: Header.Length > 14
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,DataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\DataPacket.cs,Read,The following statement contains a magic number: TransactionID = (uint)(readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,DataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\DataPacket.cs,Read,The following statement contains a magic number: TransactionID = (uint)(readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,DataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\DataPacket.cs,Read,The following statement contains a magic number: TransactionID = (uint)(readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,DataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\DataPacket.cs,Read,The following statement contains a magic number: Data = new byte[Header.Length - 8 - 4];
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,DataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\DataPacket.cs,Read,The following statement contains a magic number: Data = new byte[Header.Length - 8 - 4];
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,DataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\DataPacket.cs,Read,The following statement contains a magic number: s.Read(Data' 0' (int) (Header.Length - 8 - 4));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,DataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\DataPacket.cs,Read,The following statement contains a magic number: s.Read(Data' 0' (int) (Header.Length - 8 - 4));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,EndDataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\EndDataPacket.cs,Read,The following statement contains a magic number: this.TransactionID = (uint) (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,EndDataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\EndDataPacket.cs,Read,The following statement contains a magic number: this.TransactionID = (uint) (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,EndDataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\EndDataPacket.cs,Read,The following statement contains a magic number: this.TransactionID = (uint) (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,EndDataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\EndDataPacket.cs,Read,The following statement contains a magic number: Data = new byte[Header.Length - 8 - 4];
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,EndDataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\EndDataPacket.cs,Read,The following statement contains a magic number: Data = new byte[Header.Length - 8 - 4];
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,EndDataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\EndDataPacket.cs,Read,The following statement contains a magic number: numBytes +=                      s.Read(Data' numBytes'                          (int) (Header.Length - 8 - 4 -                                 numBytes));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,EndDataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\EndDataPacket.cs,Read,The following statement contains a magic number: numBytes +=                      s.Read(Data' numBytes'                          (int) (Header.Length - 8 - 4 -                                 numBytes));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,EndDataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\EndDataPacket.cs,Read,The following statement contains a magic number: numBytes != Header.Length - 8 - 4
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,EndDataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\EndDataPacket.cs,Read,The following statement contains a magic number: numBytes != Header.Length - 8 - 4
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,EndDataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\EndDataPacket.cs,Read,The following statement contains a magic number: this.TransactionID = (uint) (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,EndDataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\EndDataPacket.cs,Read,The following statement contains a magic number: this.TransactionID = (uint) (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,EndDataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\EndDataPacket.cs,Read,The following statement contains a magic number: this.TransactionID = (uint) (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,EndDataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\EndDataPacket.cs,Read,The following statement contains a magic number: byte[] buff = new byte[102400];
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,EndDataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\EndDataPacket.cs,Read,The following statement contains a magic number: numBytes != Header.Length - 8 - 4
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,EndDataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\EndDataPacket.cs,Read,The following statement contains a magic number: numBytes != Header.Length - 8 - 4
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,InitCommandAck,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\InitCommandAck.cs,Read,The following statement contains a magic number: SessionId = (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,InitCommandAck,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\InitCommandAck.cs,Read,The following statement contains a magic number: SessionId = (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,InitCommandAck,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\InitCommandAck.cs,Read,The following statement contains a magic number: SessionId = (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,InitCommandAck,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\InitCommandAck.cs,Read,The following statement contains a magic number: s.Read(b' 0' (int) (Header.Length - (8 + 4)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,InitCommandAck,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\InitCommandAck.cs,Read,The following statement contains a magic number: s.Read(b' 0' (int) (Header.Length - (8 + 4)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,InitCommandRequest,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\InitCommandRequest.cs,Write,The following statement contains a magic number: Header.Length = (uint) (8 + 16 + ((Name.Length + 1)*2)+4);
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,InitCommandRequest,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\InitCommandRequest.cs,Write,The following statement contains a magic number: Header.Length = (uint) (8 + 16 + ((Name.Length + 1)*2)+4);
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,InitCommandRequest,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\InitCommandRequest.cs,Write,The following statement contains a magic number: Header.Length = (uint) (8 + 16 + ((Name.Length + 1)*2)+4);
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,InitCommandRequest,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\InitCommandRequest.cs,Write,The following statement contains a magic number: Header.Length = (uint) (8 + 16 + ((Name.Length + 1)*2)+4);
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,InitCommandRequest,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\InitCommandRequest.cs,Write,The following statement contains a magic number: s.Write(Guid.ToByteArray()' 0' 16);
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,InitCommandRequest,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\InitCommandRequest.cs,Write,The following statement contains a magic number: s.Write(Encoding.Unicode.GetBytes(Name)' 0' Name.Length*2);
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,InitEventRequest,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\InitEventRequest.cs,InitEventRequest,The following statement contains a magic number: Header.Length = 8 + 4;
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,InitEventRequest,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\InitEventRequest.cs,InitEventRequest,The following statement contains a magic number: Header.Length = 8 + 4;
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpClient.cs,Open,The following statement contains a magic number: _client.ReceiveTimeout = 300000;
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpClient.cs,Open,The following statement contains a magic number: _client.SendTimeout = 300000;
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpClient.cs,Open,The following statement contains a magic number: header.Length = 8;
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpClient.cs,ReadInt,The following statement contains a magic number: return _inerStream.ReadByte() | (_inerStream.ReadByte() << 8) | (_inerStream.ReadByte() << 16) | (_inerStream.ReadByte() << 24);
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpClient.cs,ReadInt,The following statement contains a magic number: return _inerStream.ReadByte() | (_inerStream.ReadByte() << 8) | (_inerStream.ReadByte() << 16) | (_inerStream.ReadByte() << 24);
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpClient.cs,ReadInt,The following statement contains a magic number: return _inerStream.ReadByte() | (_inerStream.ReadByte() << 8) | (_inerStream.ReadByte() << 16) | (_inerStream.ReadByte() << 24);
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpClient.cs,ReadPacket,The following statement contains a magic number: byte[] buff = new byte[length - 4];
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpClient.cs,ReadPacket,The following statement contains a magic number: _inerStream.Read(buff' 0' length - 4);
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpHeader,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpHeader.cs,Write,The following statement contains a magic number: s.WriteByte((byte)(0xff & (this.Length  >> 8)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpHeader,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpHeader.cs,Write,The following statement contains a magic number: s.WriteByte((byte)(0xff & (this.Length  >> 16)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpHeader,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpHeader.cs,Write,The following statement contains a magic number: s.WriteByte((byte)(0xff & (this.Length  >> 24)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpHeader,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpHeader.cs,Write,The following statement contains a magic number: s.WriteByte((byte)(0xff & (this.Type  >> 8)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpHeader,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpHeader.cs,Write,The following statement contains a magic number: s.WriteByte((byte)(0xff & (this.Type  >> 16)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpHeader,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpHeader.cs,Write,The following statement contains a magic number: s.WriteByte((byte)(0xff & (this.Type  >> 24)));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpHeader,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpHeader.cs,Read,The following statement contains a magic number: Length = (uint) (s.ReadByte() | (s.ReadByte() << 8) | (s.ReadByte() << 16) | (s.ReadByte() << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpHeader,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpHeader.cs,Read,The following statement contains a magic number: Length = (uint) (s.ReadByte() | (s.ReadByte() << 8) | (s.ReadByte() << 16) | (s.ReadByte() << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpHeader,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpHeader.cs,Read,The following statement contains a magic number: Length = (uint) (s.ReadByte() | (s.ReadByte() << 8) | (s.ReadByte() << 16) | (s.ReadByte() << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpHeader,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpHeader.cs,Read,The following statement contains a magic number: Type = (uint)(s.ReadByte() | (s.ReadByte() << 8) | (s.ReadByte() << 16) | (s.ReadByte() << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpHeader,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpHeader.cs,Read,The following statement contains a magic number: Type = (uint)(s.ReadByte() | (s.ReadByte() << 8) | (s.ReadByte() << 16) | (s.ReadByte() << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,PtpIpHeader,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\PtpIpHeader.cs,Read,The following statement contains a magic number: Type = (uint)(s.ReadByte() | (s.ReadByte() << 8) | (s.ReadByte() << 16) | (s.ReadByte() << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,StartDataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\StartDataPacket.cs,Read,The following statement contains a magic number: this.TransactionID = (uint)(readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,StartDataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\StartDataPacket.cs,Read,The following statement contains a magic number: this.TransactionID = (uint)(readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,StartDataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\StartDataPacket.cs,Read,The following statement contains a magic number: this.TransactionID = (uint)(readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,StartDataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\StartDataPacket.cs,Read,The following statement contains a magic number: this.Size = (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,StartDataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\StartDataPacket.cs,Read,The following statement contains a magic number: this.Size = (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,StartDataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\StartDataPacket.cs,Read,The following statement contains a magic number: this.Size = (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,StartDataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\StartDataPacket.cs,Read,The following statement contains a magic number: int i = (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,StartDataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\StartDataPacket.cs,Read,The following statement contains a magic number: int i = (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,StartDataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\StartDataPacket.cs,Read,The following statement contains a magic number: int i = (readByte(s) | (readByte(s) << 8) | (readByte(s) << 16) | (readByte(s) << 24));
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,StartDataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\StartDataPacket.cs,Write,The following statement contains a magic number: Header.Length = (uint) (8 + 4 + 8 );
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,StartDataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\StartDataPacket.cs,Write,The following statement contains a magic number: Header.Length = (uint) (8 + 4 + 8 );
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,StartDataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\StartDataPacket.cs,Write,The following statement contains a magic number: Header.Length = (uint) (8 + 4 + 8 );
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,StartDataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\StartDataPacket.cs,Write,The following statement contains a magic number: WriteInt((uint) (Data.Length+12)' s);
Magic Number,CameraControl.Devices.TransferProtocol.PtpIp,StartDataPacket,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\PtpIp\StartDataPacket.cs,Write,The following statement contains a magic number: WriteInt(12' s);
Magic Number,CameraControl.Devices.Wifi,DDServerProvider,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Wifi\DDServerProvider.cs,Connect,The following statement contains a magic number: int port = 4757;
Magic Number,CameraControl.Devices.Wifi,PanonoDiscovery,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Wifi\PanonoDiscovery.cs,UDPSocketSetup,The following statement contains a magic number: var s = _DeviceLocator.SearchAsync(new TimeSpan(0' 0' 15)).Result.ToList();
Magic Number,CameraControl.Devices.Wifi,PtpIpProvider,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Wifi\PtpIpProvider.cs,Connect,The following statement contains a magic number: !client.Open(ip' 15740)
Magic Number,CameraControl.Devices.Wifi,YiCameraProvider,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Wifi\YiCameraProvider.cs,Connect,The following statement contains a magic number: int port = 7878;
Missing Default,CameraControl.Devices,StaticHelper,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\StaticHelper.cs,GetDataLength,The following switch statement is missing a default case: switch (dataType)              {                      //0x0001	INT8	Signed 8-bit integer                  case 0x0001:                      dataLength = 1;                      break;                      //0x0002	UINT8	Unsigned 8-bit integer                  case 0x0002:                      dataLength = 1;                      break;                      //0x0003	INT16	Signed 16-bit integer                  case 0x0003:                      dataLength = 2;                      break;                      //0x0004	UINT16	Unsigned 16-bit integer                  case 0x0004:                      dataLength = 2;                      break;                      //0x0005	INT32	Signed 32-bit integer                  case 0x0005:                      dataLength = 4;                      break;                      //0x0006	UINT32	Unsigned 32-bit integer                  case 0x0006:                      dataLength = 4;                      break;                      //0x0007	INT64	Signed 64-bit integer                  case 0x0007:                      dataLength = 8;                      break;                      //0x0008	UINT64	Unsigned 64-bit integer                  case 0x0008:                      dataLength = 8;                      break;                      //0x0009	INT128	Signed 128-bit integer                  case 0x0009:                      dataLength = 16;                      break;                      //0x000A	UINT128	Unsigned 128-bit integer                  case 0x000A:                      dataLength = 16;                      break;                      //0x4001	AINT8	Signed 8-bit integer array                  case 0x4001:                      dataLength = 1;                      break;                      //0x4002	AUINT8	Unsigned 8-bit integer array                  case 0x4002:                      dataLength = 1;                      break;                      //0x4003	AINT16	Signed 16-bit integer array                  case 0x4003:                      dataLength = 2;                      break;                      //0x4004	AUINT16	Unsigned 16-bit integer array                  case 0x4004:                      dataLength = 2;                      break;                      //0x4005	AINT32	Signed 32-bit integer array                  case 0x4005:                      dataLength = 4;                      break;                      //0x4006	AUINT32	Unsigned 32-bit integer array                  case 0x4006:                      dataLength = 4;                      break;                      //0x4007	AINT64	Signed 64-bit integer array                  case 0x4007:                      dataLength = 8;                      break;                      //0x4008	AUINT64	Unsigned 64-bit integer array                  case 0x4008:                      dataLength = 8;                      break;                      //0x4009	AINT128	Signed 128-bit integer array                  case 0x4009:                      dataLength = 16;                      break;                      //0x400A	AUINT128	Unsigned 128-bit integer array                  case 0x400A:                      dataLength = 16;                      break;                      //0xFFFF	STR	Variable length Unicode character string                  case 0xFFFF:                      dataLength = -1;                      break;              }
Missing Default,CameraControl.Devices.Canon,CanonSDKBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Canon\CanonSDKBase.cs,Camera_PropertyChanged,The following switch statement is missing a default case: switch (e.PropertyId)                      {                          case Edsdk.PropID_ExposureCompensation:                              ExposureCompensation.SetValue((int) Camera.GetProperty(Edsdk.PropID_ExposureCompensation)'                                  false);                              break;                          case Edsdk.PropID_AEMode:                              ReInitFNumber(true);                              ReInitShutterSpeed();                              Mode.SetValue((uint)Camera.GetProperty(Edsdk.PropID_AEMode)' false);                              break;                          case Edsdk.PropID_WhiteBalance:                              WhiteBalance.SetValue(Camera.GetProperty(Edsdk.PropID_WhiteBalance)' false);                              break;                          case Edsdk.PropID_ISOSpeed:                              IsoNumber.SetValue(Camera.GetProperty(Edsdk.PropID_ISOSpeed)' false);                              break;                          case Edsdk.PropID_Tv:                              ShutterSpeed.SetValue(Camera.GetProperty(Edsdk.PropID_Tv)' false);                              break;                          case Edsdk.PropID_Av:                              FNumber.SetValue((int) Camera.GetProperty(Edsdk.PropID_Av)' false);                              break;                          case Edsdk.PropID_MeteringMode:                              ExposureMeteringMode.SetValue((int) Camera.GetProperty(Edsdk.PropID_MeteringMode)' false);                              break;                          case Edsdk.PropID_AFMode:                              FocusMode.SetValue((int) Camera.GetProperty(Edsdk.PropID_AFMode)' false);                              break;                          case Edsdk.PropID_ImageQuality:                              int i = (int) Camera.GetProperty(Edsdk.PropID_ImageQuality);                              CompressionSetting.SetValue((int) Camera.ImageQuality.ToBitMask()' false);                              break;                          case Edsdk.PropID_BatteryLevel:                              Battery = (int) Camera.BatteryLevel + 20;                              break;                          case Edsdk.PropID_AEBracketType:                              int ae = (int)Camera.GetProperty(Edsdk.PropID_AEBracketType);                              //ResetShutterButton();                              break;                          case Edsdk.PropID_Bracket:                              int br = (int)Camera.GetProperty(Edsdk.PropID_Bracket);                              //ResetShutterButton();                              break;                            case Edsdk.PropID_FocusInfo:                              //ResetShutterButton();                              break;                      }
Missing Default,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,Mode_ValueChanged,The following switch statement is missing a default case: switch (val)              {                  case 0:                      Protocol.SendValue("capture_mode"' "precise quality");                      break;                  case 1:                      Protocol.SendValue("capture_mode"' "burst quality");                      break;                  case 2:                      Protocol.SendValue("capture_mode"' "precise self quality");                      break;                  case 3:                      Protocol.SendValue("capture_mode"' "precise quality cont.");                      break;              }
Missing Default,CameraControl.Devices.Others,YiCamera,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\Others\YiCamera.cs,SetProperty,The following switch statement is missing a default case: switch (val)                      {                          case "precise quality":                              Mode.SetValue(0);                              break;                          case "burst quality":                              Mode.SetValue(1);                              break;                          case "precise self quality":                              Mode.SetValue(2);                              break;                          case "precise quality cont.":                              Mode.SetValue(3);                              break;                      }
Missing Default,CameraControl.Devices.TransferProtocol.DDServer,DdClient,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl.Devices\TransferProtocol\DDServer\DdClient.cs,getContainer,The following switch statement is missing a default case: switch (header.ContainerType)              {                  case ContainerType.DataBlock:                      return new DataBlockContainer(header' _inerStream' callback);                  case ContainerType.ResponseBlock:                      if (synchronized)                          Monitor.Exit(_commandLock);                      return new ResponseBlockContainer(header' _inerStream);                          //Give current instance as stream' because we need keep track on the distance to next header                  case ContainerType.CommandBlock:                  case ContainerType.EventBlock:                      throw new Exception("Invalid container type. " + header.ContainerType);              }
