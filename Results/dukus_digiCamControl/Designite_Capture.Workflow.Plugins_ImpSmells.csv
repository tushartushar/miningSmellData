Implementation smell,Namespace,Class,File,Method,Description
Long Method,Capture.Workflow.Plugins.ViewElements,ComboBoxElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\ComboBoxElement.cs,CreateElement,The method has 104 lines of code.
Complex Method,Capture.Workflow.Plugins.Events,ProcessItemEvent,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Events\ProcessItemEvent.cs,Instance_Message,Cyclomatic complexity of the method is 8
Complex Method,Capture.Workflow.Plugins.ViewElements,ComboBoxElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\ComboBoxElement.cs,GetControl,Cyclomatic complexity of the method is 8
Long Statement,Capture.Workflow.Plugins.Commands,CameraAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\CameraAction.cs,CreateCommand,The length of the statement  "                ValueList = new List<string>() { "Capture"' "CaptureNoAf"' "StartLiveView"' "StopLiveView"' "Autofocus"' "CaptureToPc"' "CaptureToCard"'"EnableCapture"' "DisableCapture" } " is 171.
Long Statement,Capture.Workflow.Plugins.Commands,CheckCameraAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\CheckCameraAction.cs,Execute,The length of the statement  "                WorkflowManager.Instance.OnMessage(new MessageEventArgs(Messages.ShowMessage'command.Properties["Message"].ToString(context))); " is 127.
Long Statement,Capture.Workflow.Plugins.Commands,DialogAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\DialogAction.cs,Execute,The length of the statement  "                    return MessageBox.Show(command.Properties["Message"].ToString(context)' ""' MessageBoxButton.YesNo' MessageBoxImage.Question) == MessageBoxResult.Yes; " is 150.
Long Statement,Capture.Workflow.Plugins.Commands,DialogAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\DialogAction.cs,Execute,The length of the statement  "                    return MessageBox.Show(command.Properties["Message"].ToString(context)'""'MessageBoxButton.YesNo'MessageBoxImage.Question)==MessageBoxResult.Yes; " is 145.
Long Statement,Capture.Workflow.Plugins.Commands.ImageProcessing,BrightnessAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\BrightnessAction.cs,Execute,The length of the statement  "                image.BrightnessContrast(new Percentage((double)context.WorkFlow.Variables[command.Properties["Brightness"].ToString(context)].GetAsObject())' " is 142.
Long Statement,Capture.Workflow.Plugins.Commands.ImageProcessing,LevelAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\LevelAction.cs,Execute,The length of the statement  "                    midpoint = (100 - (double)context.WorkFlow.Variables[command.Properties["MidPoint"].ToString(context)].GetAsObject()) / 100.0; " is 126.
Long Statement,Capture.Workflow.Plugins.Commands.ImageProcessing,OverlayAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\OverlayAction.cs,Execute,The length of the statement  "                        image.Composite(watermark' (Gravity)Enum.Parse(typeof(Gravity)'command.Properties["Position"].ToString(context))' CompositeOperator.Over); " is 138.
Long Statement,Capture.Workflow.Plugins.Commands.ImageProcessing,OverlayAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\OverlayAction.cs,Execute,The length of the statement  "                    image.Settings.FillColor = new MagickColor(color.R' color.G' color.B' (byte) (255 * (100 - command.Properties["TextTransparency"].ToInt(context)) / 100)); " is 154.
Long Statement,Capture.Workflow.Plugins.Commands.ImageProcessing,OverlayAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\OverlayAction.cs,Execute,The length of the statement  "                    image.Settings.StrokeColor = new MagickColor(color.R' color.G' color.B' (byte)(255 * (100 - command.Properties["TextTransparency"].ToInt(context)) / 100)); " is 155.
Long Statement,Capture.Workflow.Plugins.Commands.ImageProcessing,ResizeAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\ResizeAction.cs,Execute,The length of the statement  "                MagickGeometry geometry = new MagickGeometry(command.Properties["Width"].ToInt(context)' command.Properties["Height"].ToInt(context)); " is 134.
Long Statement,Capture.Workflow.Plugins.Commands.ImageProcessing,SaturationAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\SaturationAction.cs,Execute,The length of the statement  "                image.Modulate(new Percentage(100)' new Percentage((double)context.WorkFlow.Variables[command.Properties["Saturation"].ToString(context)].GetAsObject())); " is 154.
Long Statement,Capture.Workflow.Plugins.Events,KeyPressedEvent,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Events\KeyPressedEvent.cs,Instance_Message,The length of the statement  "            if (args != null && args.Key == (Key) Enum.Parse(typeof(Key)' _flowEvent.Properties["Key"].ToString(WorkflowManager.Instance.Context))) " is 135.
Long Statement,CSScriptNativeApi,CodeDomSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.native.cs,LoadMethod_Static,The length of the statement  "                // Note: you can use GetStaticMethodWithArgs for higher precision method search: GetStaticMethodWithArgs("*.SayHello"' typeof(string));  " is 135.
Long Statement,Capture.Workflow.Plugins.ViewElements,BrowseTextElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\BrowseTextElement.cs,GetControl,The length of the statement  "            if (viewElement.Properties["BackgroundColor"].Value != "Transparent" && viewElement.Properties["BackgroundColor"].Value != "#00FFFFFF") " is 135.
Long Statement,Capture.Workflow.Plugins.ViewElements,BrowseTextElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\BrowseTextElement.cs,GetControl,The length of the statement  "            if (viewElement.Properties["ForegroundColor"].Value != "Transparent" && viewElement.Properties["ForegroundColor"].Value != "#00FFFFFF") " is 135.
Long Statement,Capture.Workflow.Plugins.ViewElements,BrowseTextElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\BrowseTextElement.cs,GetControl,The length of the statement  "            if (viewElement.Properties["ForegroundColor"].Value != "Transparent" && viewElement.Properties["ForegroundColor"].Value != "#00FFFFFF") " is 135.
Long Statement,Capture.Workflow.Plugins.ViewElements,BrowseTextElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\BrowseTextElement.cs,GetControl,The length of the statement  "            stackpanel.Orientation = viewElement.Properties["Orientation"].Value == "Horizontal" ? Orientation.Horizontal : Orientation.Vertical; " is 133.
Long Statement,Capture.Workflow.Plugins.ViewElements,Button,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\Button.cs,GetControl,The length of the statement  "            if (viewElement.Properties["BackgroundColor"].ToString(context) != "Transparent" && viewElement.Properties["BackgroundColor"].ToString(context) != "#00FFFFFF") " is 159.
Long Statement,Capture.Workflow.Plugins.ViewElements,Button,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\Button.cs,GetControl,The length of the statement  "            if (viewElement.Properties["ForegroundColor"].ToString(context) != "Transparent" && viewElement.Properties["ForegroundColor"].ToString(context) != "#00FFFFFF") " is 159.
Long Statement,Capture.Workflow.Plugins.ViewElements,CameraProperty,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\CameraProperty.cs,GetControl,The length of the statement  "            //    < ComboBox Name = "cmb_iso" IsEnabled = "{Binding Path=IsoNumber.IsEnabled}" ItemsSource = "{Binding Path=IsoNumber.Values}" SelectedValue = "{Binding Path=IsoNumber.Value}" /> " is 182.
Long Statement,Capture.Workflow.Plugins.ViewElements,CheckBoxElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\CheckBoxElement.cs,GetControl,The length of the statement  "            if (viewElement.Properties["BackgroundColor"].ToString(context) != "Transparent" && viewElement.Properties["BackgroundColor"].ToString(context) != "#00FFFFFF") " is 159.
Long Statement,Capture.Workflow.Plugins.ViewElements,CheckBoxElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\CheckBoxElement.cs,GetControl,The length of the statement  "            if (viewElement.Properties["ForegroundColor"].ToString(context) != "Transparent" && viewElement.Properties["ForegroundColor"].ToString(context) != "#00FFFFFF") " is 159.
Long Statement,Capture.Workflow.Plugins.ViewElements,ComboBoxElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\ComboBoxElement.cs,GetControl,The length of the statement  "                comboBox.SetBinding(ComboBox.ItemsSourceProperty' "Variables[" + viewElement.Properties["ValueListVariable"].ToString(context) + "].ValueList"); " is 144.
Long Statement,Capture.Workflow.Plugins.ViewElements,Label,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\Label.cs,GetControl,The length of the statement  "            if (viewElement.Properties["BackgroundColor"].ToString(context) != "Transparent" && viewElement.Properties["BackgroundColor"].ToString(context) != "#00FFFFFF") " is 159.
Long Statement,Capture.Workflow.Plugins.ViewElements,Label,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\Label.cs,GetControl,The length of the statement  "            if (viewElement.Properties["ForegroundColor"].ToString(context) != "Transparent" && viewElement.Properties["ForegroundColor"].ToString(context) != "#00FFFFFF") " is 159.
Long Statement,Capture.Workflow.Plugins.ViewElements,SeparatorElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\SeparatorElement.cs,GetControl,The length of the statement  "            //separator. = viewElement.Properties["Orientation"].ToString(context) == "Horizontal" ? Orientation.Horizontal : Orientation.Vertical; " is 135.
Long Statement,Capture.Workflow.Plugins.ViewElements,SliderElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\SliderElement.cs,GetControl,The length of the statement  "            stackpanel.Orientation = viewElement.Properties["Orientation"].ToString(context) == "Horizontal" ? Orientation.Horizontal : Orientation.Vertical; " is 145.
Long Statement,Capture.Workflow.Plugins.ViewElements,TextElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\TextElement.cs,GetControl,The length of the statement  "            if (viewElement.Properties["BackgroundColor"].ToString(context) != "Transparent" && viewElement.Properties["BackgroundColor"].ToString(context) != "#00FFFFFF") " is 159.
Long Statement,Capture.Workflow.Plugins.ViewElements,TextElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\TextElement.cs,GetControl,The length of the statement  "            if (viewElement.Properties["ForegroundColor"].ToString(context) != "Transparent" && viewElement.Properties["ForegroundColor"].ToString(context) != "#00FFFFFF") " is 159.
Long Statement,Capture.Workflow.Plugins.ViewElements,TextElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\TextElement.cs,GetControl,The length of the statement  "            //if (viewElement.Properties["BackgroundColor"].Value != "Transparent" && viewElement.Properties["BackgroundColor"].Value != "#00FFFFFF") " is 137.
Long Statement,Capture.Workflow.Plugins.ViewElements,TextElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\TextElement.cs,GetControl,The length of the statement  "            if (viewElement.Properties["ForegroundColor"].ToString(context) != "Transparent" && viewElement.Properties["ForegroundColor"].ToString(context) != "#00FFFFFF") " is 159.
Long Statement,Capture.Workflow.Plugins.ViewElements,TextElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\TextElement.cs,GetControl,The length of the statement  "            stackpanel.Orientation = viewElement.Properties["Orientation"].ToString(context) == "Horizontal" ? Orientation.Horizontal : Orientation.Vertical; " is 145.
Empty Catch Block,Capture.Workflow.Plugins.Commands.ImageProcessing,OverlayAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\OverlayAction.cs,Fonts,The method has an empty catch block.
Magic Number,Capture.Workflow.Plugins.Commands,CameraAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\CameraAction.cs,StartLiveViewThread,The following statement contains a magic number: try              {                  bool retry = false;                  int retryNum = 0;                  Log.Debug("LiveView: Liveview started");                  do                  {                      try                      {                          var cam = WorkflowManager.Instance.Context.CameraDevice as CanonSDKBase;                          if (cam != null)                          {                              cam.StartLiveViewCamera();                          }                          else                          {                              WorkflowManager.Instance.Context.CameraDevice.StartLiveView();                          }                        }                      catch (DeviceException deviceException)                      {                          if (deviceException.ErrorCode == ErrorCodes.ERROR_BUSY ||                              deviceException.ErrorCode == ErrorCodes.MTP_Device_Busy)                          {                              Thread.Sleep(100);                              Log.Debug("Retry live view :" + deviceException.ErrorCode.ToString("X"));                              retry = true;                              retryNum++;                          }                          else                          {                              throw;                          }                      }                  } while (retry && retryNum < 35);                    Log.Debug("LiveView: Liveview start done");                  WorkflowManager.Instance.OnMessage(new MessageEventArgs(Messages.StartLiveView' null));              }              catch (Exception exception)              {                  Log.Error("Unable to start liveview !"' exception);                  StaticHelper.Instance.SystemMessage = "Unable to start liveview ! " + exception.Message;              }
Magic Number,Capture.Workflow.Plugins.Commands,CameraAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\CameraAction.cs,StartLiveViewThread,The following statement contains a magic number: try              {                  bool retry = false;                  int retryNum = 0;                  Log.Debug("LiveView: Liveview started");                  do                  {                      try                      {                          var cam = WorkflowManager.Instance.Context.CameraDevice as CanonSDKBase;                          if (cam != null)                          {                              cam.StartLiveViewCamera();                          }                          else                          {                              WorkflowManager.Instance.Context.CameraDevice.StartLiveView();                          }                        }                      catch (DeviceException deviceException)                      {                          if (deviceException.ErrorCode == ErrorCodes.ERROR_BUSY ||                              deviceException.ErrorCode == ErrorCodes.MTP_Device_Busy)                          {                              Thread.Sleep(100);                              Log.Debug("Retry live view :" + deviceException.ErrorCode.ToString("X"));                              retry = true;                              retryNum++;                          }                          else                          {                              throw;                          }                      }                  } while (retry && retryNum < 35);                    Log.Debug("LiveView: Liveview start done");                  WorkflowManager.Instance.OnMessage(new MessageEventArgs(Messages.StartLiveView' null));              }              catch (Exception exception)              {                  Log.Error("Unable to start liveview !"' exception);                  StaticHelper.Instance.SystemMessage = "Unable to start liveview ! " + exception.Message;              }
Magic Number,Capture.Workflow.Plugins.Commands,CameraAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\CameraAction.cs,StopLiveViewThread,The following statement contains a magic number: try              {                  bool retry = false;                  int retryNum = 0;                  Log.Debug("LiveView: Liveview stopping");                  do                  {                      try                      {                          WorkflowManager.Instance.Context.CameraDevice.StopLiveView();                      }                      catch (DeviceException deviceException)                      {                          if (deviceException.ErrorCode == ErrorCodes.ERROR_BUSY ||                              deviceException.ErrorCode == ErrorCodes.MTP_Device_Busy)                          {                              Thread.Sleep(500);                              Log.Debug("Retry live view stop:" + deviceException.ErrorCode.ToString("X"));                              retry = true;                              retryNum++;                          }                          else                          {                              throw;                          }                      }                  } while (retry && retryNum < 35);                  WorkflowManager.Instance.OnMessage(new MessageEventArgs(Messages.StopLiveView' null));              }              catch (Exception exception)              {                  Log.Error("Unable to stop liveview !"' exception);                  StaticHelper.Instance.SystemMessage = "Unable to stop liveview ! " + exception.Message;              }
Magic Number,Capture.Workflow.Plugins.Commands,CameraAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\CameraAction.cs,StopLiveViewThread,The following statement contains a magic number: try              {                  bool retry = false;                  int retryNum = 0;                  Log.Debug("LiveView: Liveview stopping");                  do                  {                      try                      {                          WorkflowManager.Instance.Context.CameraDevice.StopLiveView();                      }                      catch (DeviceException deviceException)                      {                          if (deviceException.ErrorCode == ErrorCodes.ERROR_BUSY ||                              deviceException.ErrorCode == ErrorCodes.MTP_Device_Busy)                          {                              Thread.Sleep(500);                              Log.Debug("Retry live view stop:" + deviceException.ErrorCode.ToString("X"));                              retry = true;                              retryNum++;                          }                          else                          {                              throw;                          }                      }                  } while (retry && retryNum < 35);                  WorkflowManager.Instance.OnMessage(new MessageEventArgs(Messages.StopLiveView' null));              }              catch (Exception exception)              {                  Log.Error("Unable to stop liveview !"' exception);                  StaticHelper.Instance.SystemMessage = "Unable to stop liveview ! " + exception.Message;              }
Magic Number,Capture.Workflow.Plugins.Commands,WaitAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\WaitAction.cs,CreateCommand,The following statement contains a magic number: command.Properties.Add(new CustomProperty()              {                  Name = "Seconds"'                  PropertyType = CustomPropertyType.Number'                  Value = "1"'                  RangeMin = 1'                  RangeMax = 100              });
Magic Number,Capture.Workflow.Plugins.Commands,WaitAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\WaitAction.cs,Execute,The following statement contains a magic number: Thread.Sleep(command.Properties["Seconds"].ToInt(context) * 1000);
Magic Number,Capture.Workflow.Plugins.Commands.ImageProcessing,BrightnessAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\BrightnessAction.cs,CreateCommand,The following statement contains a magic number: command.Properties.Add(new CustomProperty()              {                  Name = "Brightness"'                  PropertyType = CustomPropertyType.Variable'                  RangeMin = -100'                  RangeMax = 100'                  Value = "0"              });
Magic Number,Capture.Workflow.Plugins.Commands.ImageProcessing,BrightnessAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\BrightnessAction.cs,CreateCommand,The following statement contains a magic number: command.Properties.Add(new CustomProperty()              {                  Name = "Brightness"'                  PropertyType = CustomPropertyType.Variable'                  RangeMin = -100'                  RangeMax = 100'                  Value = "0"              });
Magic Number,Capture.Workflow.Plugins.Commands.ImageProcessing,BrightnessAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\BrightnessAction.cs,CreateCommand,The following statement contains a magic number: command.Properties.Add(new CustomProperty()              {                  Name = "Contrast"'                  PropertyType = CustomPropertyType.Variable'                  RangeMin = -100'                  RangeMax = 100'                  Value = "0"              });
Magic Number,Capture.Workflow.Plugins.Commands.ImageProcessing,BrightnessAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\BrightnessAction.cs,CreateCommand,The following statement contains a magic number: command.Properties.Add(new CustomProperty()              {                  Name = "Contrast"'                  PropertyType = CustomPropertyType.Variable'                  RangeMin = -100'                  RangeMax = 100'                  Value = "0"              });
Magic Number,Capture.Workflow.Plugins.Commands.ImageProcessing,LevelAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\LevelAction.cs,CreateCommand,The following statement contains a magic number: command.Properties.Add(new CustomProperty()              {                  Name = "BlackPoint"'                  PropertyType = CustomPropertyType.Variable'                  RangeMin = -100'                  RangeMax = 100'                  Value = "0"              });
Magic Number,Capture.Workflow.Plugins.Commands.ImageProcessing,LevelAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\LevelAction.cs,CreateCommand,The following statement contains a magic number: command.Properties.Add(new CustomProperty()              {                  Name = "BlackPoint"'                  PropertyType = CustomPropertyType.Variable'                  RangeMin = -100'                  RangeMax = 100'                  Value = "0"              });
Magic Number,Capture.Workflow.Plugins.Commands.ImageProcessing,LevelAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\LevelAction.cs,CreateCommand,The following statement contains a magic number: command.Properties.Add(new CustomProperty()              {                  Name = "MidPoint"'                  PropertyType = CustomPropertyType.Variable'                  RangeMin = -100'                  RangeMax = 100'                  Value = "0"              });
Magic Number,Capture.Workflow.Plugins.Commands.ImageProcessing,LevelAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\LevelAction.cs,CreateCommand,The following statement contains a magic number: command.Properties.Add(new CustomProperty()              {                  Name = "MidPoint"'                  PropertyType = CustomPropertyType.Variable'                  RangeMin = -100'                  RangeMax = 100'                  Value = "0"              });
Magic Number,Capture.Workflow.Plugins.Commands.ImageProcessing,LevelAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\LevelAction.cs,CreateCommand,The following statement contains a magic number: command.Properties.Add(new CustomProperty()              {                  Name = "WhitePoint"'                  PropertyType = CustomPropertyType.Variable'                  RangeMin = -100'                  RangeMax = 100'                  Value = "0"              });
Magic Number,Capture.Workflow.Plugins.Commands.ImageProcessing,LevelAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\LevelAction.cs,CreateCommand,The following statement contains a magic number: command.Properties.Add(new CustomProperty()              {                  Name = "WhitePoint"'                  PropertyType = CustomPropertyType.Variable'                  RangeMin = -100'                  RangeMax = 100'                  Value = "0"              });
Magic Number,Capture.Workflow.Plugins.Commands.ImageProcessing,LevelAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\LevelAction.cs,Execute,The following statement contains a magic number: using (MagickImage image = new MagickImage(context.ImageStream))              {                  context.ImageStream.Seek(0' SeekOrigin.Begin);                  var midpoint = 1.0;                  if ((double)context.WorkFlow.Variables[command.Properties["MidPoint"].ToString(context)].GetAsObject() < 0)                  {                      midpoint = -(double)context.WorkFlow.Variables[command.Properties["MidPoint"].ToString(context)].GetAsObject() / 10.0;                      midpoint++;                  }                  if ((double)context.WorkFlow.Variables[command.Properties["MidPoint"].ToString(context)].GetAsObject() > 0)                  {                      midpoint = (100 - (double)context.WorkFlow.Variables[command.Properties["MidPoint"].ToString(context)].GetAsObject()) / 100.0;                  }                    image.Level(                      new Percentage((double) context.WorkFlow.Variables[command.Properties["BlackPoint"].ToString(context)]                          .GetAsObject())'                      new Percentage((double) context.WorkFlow.Variables[command.Properties["WhitePoint"].ToString(context)]                          .GetAsObject())' midpoint);                  image.Write(context.ImageStream' MagickFormat.Bmp);              }
Magic Number,Capture.Workflow.Plugins.Commands.ImageProcessing,LevelAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\LevelAction.cs,Execute,The following statement contains a magic number: using (MagickImage image = new MagickImage(context.ImageStream))              {                  context.ImageStream.Seek(0' SeekOrigin.Begin);                  var midpoint = 1.0;                  if ((double)context.WorkFlow.Variables[command.Properties["MidPoint"].ToString(context)].GetAsObject() < 0)                  {                      midpoint = -(double)context.WorkFlow.Variables[command.Properties["MidPoint"].ToString(context)].GetAsObject() / 10.0;                      midpoint++;                  }                  if ((double)context.WorkFlow.Variables[command.Properties["MidPoint"].ToString(context)].GetAsObject() > 0)                  {                      midpoint = (100 - (double)context.WorkFlow.Variables[command.Properties["MidPoint"].ToString(context)].GetAsObject()) / 100.0;                  }                    image.Level(                      new Percentage((double) context.WorkFlow.Variables[command.Properties["BlackPoint"].ToString(context)]                          .GetAsObject())'                      new Percentage((double) context.WorkFlow.Variables[command.Properties["WhitePoint"].ToString(context)]                          .GetAsObject())' midpoint);                  image.Write(context.ImageStream' MagickFormat.Bmp);              }
Magic Number,Capture.Workflow.Plugins.Commands.ImageProcessing,LevelAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\LevelAction.cs,Execute,The following statement contains a magic number: using (MagickImage image = new MagickImage(context.ImageStream))              {                  context.ImageStream.Seek(0' SeekOrigin.Begin);                  var midpoint = 1.0;                  if ((double)context.WorkFlow.Variables[command.Properties["MidPoint"].ToString(context)].GetAsObject() < 0)                  {                      midpoint = -(double)context.WorkFlow.Variables[command.Properties["MidPoint"].ToString(context)].GetAsObject() / 10.0;                      midpoint++;                  }                  if ((double)context.WorkFlow.Variables[command.Properties["MidPoint"].ToString(context)].GetAsObject() > 0)                  {                      midpoint = (100 - (double)context.WorkFlow.Variables[command.Properties["MidPoint"].ToString(context)].GetAsObject()) / 100.0;                  }                    image.Level(                      new Percentage((double) context.WorkFlow.Variables[command.Properties["BlackPoint"].ToString(context)]                          .GetAsObject())'                      new Percentage((double) context.WorkFlow.Variables[command.Properties["WhitePoint"].ToString(context)]                          .GetAsObject())' midpoint);                  image.Write(context.ImageStream' MagickFormat.Bmp);              }
Magic Number,Capture.Workflow.Plugins.Commands.ImageProcessing,OverlayAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\OverlayAction.cs,CreateCommand,The following statement contains a magic number: command.Properties.Add(new CustomProperty()              {                  Name = "Transparency"'                  PropertyType = CustomPropertyType.Number'                  Value = "100"'                  RangeMin = 0'                  RangeMax = 100              });
Magic Number,Capture.Workflow.Plugins.Commands.ImageProcessing,OverlayAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\OverlayAction.cs,CreateCommand,The following statement contains a magic number: command.Properties.Add(new CustomProperty()              {                  Name = "TextPointSize"'                  PropertyType = CustomPropertyType.Number'                  Value = "50"'                  RangeMin = 8'                  RangeMax = 500              });
Magic Number,Capture.Workflow.Plugins.Commands.ImageProcessing,OverlayAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\OverlayAction.cs,CreateCommand,The following statement contains a magic number: command.Properties.Add(new CustomProperty()              {                  Name = "TextPointSize"'                  PropertyType = CustomPropertyType.Number'                  Value = "50"'                  RangeMin = 8'                  RangeMax = 500              });
Magic Number,Capture.Workflow.Plugins.Commands.ImageProcessing,OverlayAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\OverlayAction.cs,CreateCommand,The following statement contains a magic number: command.Properties.Add(new CustomProperty()              {                  Name = "TextTransparency"'                  PropertyType = CustomPropertyType.Number'                  Value = "100"'                  RangeMin = 0'                  RangeMax = 100              });
Magic Number,Capture.Workflow.Plugins.Commands.ImageProcessing,OverlayAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\OverlayAction.cs,Execute,The following statement contains a magic number: using (MagickImage image = new MagickImage(context.ImageStream))              {                  if (File.Exists(command.Properties["OverlayFile"].ToString(context)))                  {                      // Read the watermark that will be put on top of the image                      using (MagickImage watermark = new MagickImage(command.Properties["OverlayFile"].ToString(context)))                      {                          if (command.Properties["StrechOverlay"].ToBool(context))                              watermark.Resize(image.Width' image.Height);                          // Optionally make the watermark more transparent                          if (command.Properties["Transparency"].ToInt(context) != 100)                              watermark.Evaluate(Channels.Alpha' EvaluateOperator.Add'                                  -(255 * (100 - command.Properties["Transparency"].ToInt(context)) / 100));                          // Draw the watermark in the bottom right corner                          image.Composite(watermark' (Gravity)Enum.Parse(typeof(Gravity)'command.Properties["Position"].ToString(context))' CompositeOperator.Over);                      }                  }                  if (!string.IsNullOrEmpty(command.Properties["Text"].ToString(context)))                  {                      image.Settings.Font = command.Properties["TextFont"].ToString(context);                      image.Settings.FontPointsize = command.Properties["TextPointSize"].ToInt(context); ;                        Color color = (Color)ColorConverter.ConvertFromString(command.Properties["TextFillColor"].ToString(context));                      image.Settings.FillColor = new MagickColor(color.R' color.G' color.B' (byte) (255 * (100 - command.Properties["TextTransparency"].ToInt(context)) / 100));                      color = (Color)ColorConverter.ConvertFromString(command.Properties["TextStrokeColor"].ToString(context));                      image.Settings.StrokeColor = new MagickColor(color.R' color.G' color.B' (byte)(255 * (100 - command.Properties["TextTransparency"].ToInt(context)) / 100));                        image.Annotate(command.Properties["Text"].ToString(context).Replace("\\n"'"\n")'                          (Gravity) Enum.Parse(typeof(Gravity)' command.Properties["TextPosition"].ToString(context)));                  }                    image.Write(context.ImageStream' MagickFormat.Jpg);              }
Magic Number,Capture.Workflow.Plugins.Commands.ImageProcessing,OverlayAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\OverlayAction.cs,Execute,The following statement contains a magic number: using (MagickImage image = new MagickImage(context.ImageStream))              {                  if (File.Exists(command.Properties["OverlayFile"].ToString(context)))                  {                      // Read the watermark that will be put on top of the image                      using (MagickImage watermark = new MagickImage(command.Properties["OverlayFile"].ToString(context)))                      {                          if (command.Properties["StrechOverlay"].ToBool(context))                              watermark.Resize(image.Width' image.Height);                          // Optionally make the watermark more transparent                          if (command.Properties["Transparency"].ToInt(context) != 100)                              watermark.Evaluate(Channels.Alpha' EvaluateOperator.Add'                                  -(255 * (100 - command.Properties["Transparency"].ToInt(context)) / 100));                          // Draw the watermark in the bottom right corner                          image.Composite(watermark' (Gravity)Enum.Parse(typeof(Gravity)'command.Properties["Position"].ToString(context))' CompositeOperator.Over);                      }                  }                  if (!string.IsNullOrEmpty(command.Properties["Text"].ToString(context)))                  {                      image.Settings.Font = command.Properties["TextFont"].ToString(context);                      image.Settings.FontPointsize = command.Properties["TextPointSize"].ToInt(context); ;                        Color color = (Color)ColorConverter.ConvertFromString(command.Properties["TextFillColor"].ToString(context));                      image.Settings.FillColor = new MagickColor(color.R' color.G' color.B' (byte) (255 * (100 - command.Properties["TextTransparency"].ToInt(context)) / 100));                      color = (Color)ColorConverter.ConvertFromString(command.Properties["TextStrokeColor"].ToString(context));                      image.Settings.StrokeColor = new MagickColor(color.R' color.G' color.B' (byte)(255 * (100 - command.Properties["TextTransparency"].ToInt(context)) / 100));                        image.Annotate(command.Properties["Text"].ToString(context).Replace("\\n"'"\n")'                          (Gravity) Enum.Parse(typeof(Gravity)' command.Properties["TextPosition"].ToString(context)));                  }                    image.Write(context.ImageStream' MagickFormat.Jpg);              }
Magic Number,Capture.Workflow.Plugins.Commands.ImageProcessing,OverlayAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\OverlayAction.cs,Execute,The following statement contains a magic number: using (MagickImage image = new MagickImage(context.ImageStream))              {                  if (File.Exists(command.Properties["OverlayFile"].ToString(context)))                  {                      // Read the watermark that will be put on top of the image                      using (MagickImage watermark = new MagickImage(command.Properties["OverlayFile"].ToString(context)))                      {                          if (command.Properties["StrechOverlay"].ToBool(context))                              watermark.Resize(image.Width' image.Height);                          // Optionally make the watermark more transparent                          if (command.Properties["Transparency"].ToInt(context) != 100)                              watermark.Evaluate(Channels.Alpha' EvaluateOperator.Add'                                  -(255 * (100 - command.Properties["Transparency"].ToInt(context)) / 100));                          // Draw the watermark in the bottom right corner                          image.Composite(watermark' (Gravity)Enum.Parse(typeof(Gravity)'command.Properties["Position"].ToString(context))' CompositeOperator.Over);                      }                  }                  if (!string.IsNullOrEmpty(command.Properties["Text"].ToString(context)))                  {                      image.Settings.Font = command.Properties["TextFont"].ToString(context);                      image.Settings.FontPointsize = command.Properties["TextPointSize"].ToInt(context); ;                        Color color = (Color)ColorConverter.ConvertFromString(command.Properties["TextFillColor"].ToString(context));                      image.Settings.FillColor = new MagickColor(color.R' color.G' color.B' (byte) (255 * (100 - command.Properties["TextTransparency"].ToInt(context)) / 100));                      color = (Color)ColorConverter.ConvertFromString(command.Properties["TextStrokeColor"].ToString(context));                      image.Settings.StrokeColor = new MagickColor(color.R' color.G' color.B' (byte)(255 * (100 - command.Properties["TextTransparency"].ToInt(context)) / 100));                        image.Annotate(command.Properties["Text"].ToString(context).Replace("\\n"'"\n")'                          (Gravity) Enum.Parse(typeof(Gravity)' command.Properties["TextPosition"].ToString(context)));                  }                    image.Write(context.ImageStream' MagickFormat.Jpg);              }
Magic Number,Capture.Workflow.Plugins.Commands.ImageProcessing,OverlayAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\OverlayAction.cs,Execute,The following statement contains a magic number: using (MagickImage image = new MagickImage(context.ImageStream))              {                  if (File.Exists(command.Properties["OverlayFile"].ToString(context)))                  {                      // Read the watermark that will be put on top of the image                      using (MagickImage watermark = new MagickImage(command.Properties["OverlayFile"].ToString(context)))                      {                          if (command.Properties["StrechOverlay"].ToBool(context))                              watermark.Resize(image.Width' image.Height);                          // Optionally make the watermark more transparent                          if (command.Properties["Transparency"].ToInt(context) != 100)                              watermark.Evaluate(Channels.Alpha' EvaluateOperator.Add'                                  -(255 * (100 - command.Properties["Transparency"].ToInt(context)) / 100));                          // Draw the watermark in the bottom right corner                          image.Composite(watermark' (Gravity)Enum.Parse(typeof(Gravity)'command.Properties["Position"].ToString(context))' CompositeOperator.Over);                      }                  }                  if (!string.IsNullOrEmpty(command.Properties["Text"].ToString(context)))                  {                      image.Settings.Font = command.Properties["TextFont"].ToString(context);                      image.Settings.FontPointsize = command.Properties["TextPointSize"].ToInt(context); ;                        Color color = (Color)ColorConverter.ConvertFromString(command.Properties["TextFillColor"].ToString(context));                      image.Settings.FillColor = new MagickColor(color.R' color.G' color.B' (byte) (255 * (100 - command.Properties["TextTransparency"].ToInt(context)) / 100));                      color = (Color)ColorConverter.ConvertFromString(command.Properties["TextStrokeColor"].ToString(context));                      image.Settings.StrokeColor = new MagickColor(color.R' color.G' color.B' (byte)(255 * (100 - command.Properties["TextTransparency"].ToInt(context)) / 100));                        image.Annotate(command.Properties["Text"].ToString(context).Replace("\\n"'"\n")'                          (Gravity) Enum.Parse(typeof(Gravity)' command.Properties["TextPosition"].ToString(context)));                  }                    image.Write(context.ImageStream' MagickFormat.Jpg);              }
Magic Number,Capture.Workflow.Plugins.Commands.ImageProcessing,OverlayAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\OverlayAction.cs,Execute,The following statement contains a magic number: using (MagickImage image = new MagickImage(context.ImageStream))              {                  if (File.Exists(command.Properties["OverlayFile"].ToString(context)))                  {                      // Read the watermark that will be put on top of the image                      using (MagickImage watermark = new MagickImage(command.Properties["OverlayFile"].ToString(context)))                      {                          if (command.Properties["StrechOverlay"].ToBool(context))                              watermark.Resize(image.Width' image.Height);                          // Optionally make the watermark more transparent                          if (command.Properties["Transparency"].ToInt(context) != 100)                              watermark.Evaluate(Channels.Alpha' EvaluateOperator.Add'                                  -(255 * (100 - command.Properties["Transparency"].ToInt(context)) / 100));                          // Draw the watermark in the bottom right corner                          image.Composite(watermark' (Gravity)Enum.Parse(typeof(Gravity)'command.Properties["Position"].ToString(context))' CompositeOperator.Over);                      }                  }                  if (!string.IsNullOrEmpty(command.Properties["Text"].ToString(context)))                  {                      image.Settings.Font = command.Properties["TextFont"].ToString(context);                      image.Settings.FontPointsize = command.Properties["TextPointSize"].ToInt(context); ;                        Color color = (Color)ColorConverter.ConvertFromString(command.Properties["TextFillColor"].ToString(context));                      image.Settings.FillColor = new MagickColor(color.R' color.G' color.B' (byte) (255 * (100 - command.Properties["TextTransparency"].ToInt(context)) / 100));                      color = (Color)ColorConverter.ConvertFromString(command.Properties["TextStrokeColor"].ToString(context));                      image.Settings.StrokeColor = new MagickColor(color.R' color.G' color.B' (byte)(255 * (100 - command.Properties["TextTransparency"].ToInt(context)) / 100));                        image.Annotate(command.Properties["Text"].ToString(context).Replace("\\n"'"\n")'                          (Gravity) Enum.Parse(typeof(Gravity)' command.Properties["TextPosition"].ToString(context)));                  }                    image.Write(context.ImageStream' MagickFormat.Jpg);              }
Magic Number,Capture.Workflow.Plugins.Commands.ImageProcessing,OverlayAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\OverlayAction.cs,Execute,The following statement contains a magic number: using (MagickImage image = new MagickImage(context.ImageStream))              {                  if (File.Exists(command.Properties["OverlayFile"].ToString(context)))                  {                      // Read the watermark that will be put on top of the image                      using (MagickImage watermark = new MagickImage(command.Properties["OverlayFile"].ToString(context)))                      {                          if (command.Properties["StrechOverlay"].ToBool(context))                              watermark.Resize(image.Width' image.Height);                          // Optionally make the watermark more transparent                          if (command.Properties["Transparency"].ToInt(context) != 100)                              watermark.Evaluate(Channels.Alpha' EvaluateOperator.Add'                                  -(255 * (100 - command.Properties["Transparency"].ToInt(context)) / 100));                          // Draw the watermark in the bottom right corner                          image.Composite(watermark' (Gravity)Enum.Parse(typeof(Gravity)'command.Properties["Position"].ToString(context))' CompositeOperator.Over);                      }                  }                  if (!string.IsNullOrEmpty(command.Properties["Text"].ToString(context)))                  {                      image.Settings.Font = command.Properties["TextFont"].ToString(context);                      image.Settings.FontPointsize = command.Properties["TextPointSize"].ToInt(context); ;                        Color color = (Color)ColorConverter.ConvertFromString(command.Properties["TextFillColor"].ToString(context));                      image.Settings.FillColor = new MagickColor(color.R' color.G' color.B' (byte) (255 * (100 - command.Properties["TextTransparency"].ToInt(context)) / 100));                      color = (Color)ColorConverter.ConvertFromString(command.Properties["TextStrokeColor"].ToString(context));                      image.Settings.StrokeColor = new MagickColor(color.R' color.G' color.B' (byte)(255 * (100 - command.Properties["TextTransparency"].ToInt(context)) / 100));                        image.Annotate(command.Properties["Text"].ToString(context).Replace("\\n"'"\n")'                          (Gravity) Enum.Parse(typeof(Gravity)' command.Properties["TextPosition"].ToString(context)));                  }                    image.Write(context.ImageStream' MagickFormat.Jpg);              }
Magic Number,Capture.Workflow.Plugins.Commands.ImageProcessing,OverlayAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\OverlayAction.cs,Execute,The following statement contains a magic number: using (MagickImage image = new MagickImage(context.ImageStream))              {                  if (File.Exists(command.Properties["OverlayFile"].ToString(context)))                  {                      // Read the watermark that will be put on top of the image                      using (MagickImage watermark = new MagickImage(command.Properties["OverlayFile"].ToString(context)))                      {                          if (command.Properties["StrechOverlay"].ToBool(context))                              watermark.Resize(image.Width' image.Height);                          // Optionally make the watermark more transparent                          if (command.Properties["Transparency"].ToInt(context) != 100)                              watermark.Evaluate(Channels.Alpha' EvaluateOperator.Add'                                  -(255 * (100 - command.Properties["Transparency"].ToInt(context)) / 100));                          // Draw the watermark in the bottom right corner                          image.Composite(watermark' (Gravity)Enum.Parse(typeof(Gravity)'command.Properties["Position"].ToString(context))' CompositeOperator.Over);                      }                  }                  if (!string.IsNullOrEmpty(command.Properties["Text"].ToString(context)))                  {                      image.Settings.Font = command.Properties["TextFont"].ToString(context);                      image.Settings.FontPointsize = command.Properties["TextPointSize"].ToInt(context); ;                        Color color = (Color)ColorConverter.ConvertFromString(command.Properties["TextFillColor"].ToString(context));                      image.Settings.FillColor = new MagickColor(color.R' color.G' color.B' (byte) (255 * (100 - command.Properties["TextTransparency"].ToInt(context)) / 100));                      color = (Color)ColorConverter.ConvertFromString(command.Properties["TextStrokeColor"].ToString(context));                      image.Settings.StrokeColor = new MagickColor(color.R' color.G' color.B' (byte)(255 * (100 - command.Properties["TextTransparency"].ToInt(context)) / 100));                        image.Annotate(command.Properties["Text"].ToString(context).Replace("\\n"'"\n")'                          (Gravity) Enum.Parse(typeof(Gravity)' command.Properties["TextPosition"].ToString(context)));                  }                    image.Write(context.ImageStream' MagickFormat.Jpg);              }
Magic Number,Capture.Workflow.Plugins.Commands.ImageProcessing,OverlayAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\OverlayAction.cs,Execute,The following statement contains a magic number: using (MagickImage image = new MagickImage(context.ImageStream))              {                  if (File.Exists(command.Properties["OverlayFile"].ToString(context)))                  {                      // Read the watermark that will be put on top of the image                      using (MagickImage watermark = new MagickImage(command.Properties["OverlayFile"].ToString(context)))                      {                          if (command.Properties["StrechOverlay"].ToBool(context))                              watermark.Resize(image.Width' image.Height);                          // Optionally make the watermark more transparent                          if (command.Properties["Transparency"].ToInt(context) != 100)                              watermark.Evaluate(Channels.Alpha' EvaluateOperator.Add'                                  -(255 * (100 - command.Properties["Transparency"].ToInt(context)) / 100));                          // Draw the watermark in the bottom right corner                          image.Composite(watermark' (Gravity)Enum.Parse(typeof(Gravity)'command.Properties["Position"].ToString(context))' CompositeOperator.Over);                      }                  }                  if (!string.IsNullOrEmpty(command.Properties["Text"].ToString(context)))                  {                      image.Settings.Font = command.Properties["TextFont"].ToString(context);                      image.Settings.FontPointsize = command.Properties["TextPointSize"].ToInt(context); ;                        Color color = (Color)ColorConverter.ConvertFromString(command.Properties["TextFillColor"].ToString(context));                      image.Settings.FillColor = new MagickColor(color.R' color.G' color.B' (byte) (255 * (100 - command.Properties["TextTransparency"].ToInt(context)) / 100));                      color = (Color)ColorConverter.ConvertFromString(command.Properties["TextStrokeColor"].ToString(context));                      image.Settings.StrokeColor = new MagickColor(color.R' color.G' color.B' (byte)(255 * (100 - command.Properties["TextTransparency"].ToInt(context)) / 100));                        image.Annotate(command.Properties["Text"].ToString(context).Replace("\\n"'"\n")'                          (Gravity) Enum.Parse(typeof(Gravity)' command.Properties["TextPosition"].ToString(context)));                  }                    image.Write(context.ImageStream' MagickFormat.Jpg);              }
Magic Number,Capture.Workflow.Plugins.Commands.ImageProcessing,OverlayAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\OverlayAction.cs,Execute,The following statement contains a magic number: using (MagickImage image = new MagickImage(context.ImageStream))              {                  if (File.Exists(command.Properties["OverlayFile"].ToString(context)))                  {                      // Read the watermark that will be put on top of the image                      using (MagickImage watermark = new MagickImage(command.Properties["OverlayFile"].ToString(context)))                      {                          if (command.Properties["StrechOverlay"].ToBool(context))                              watermark.Resize(image.Width' image.Height);                          // Optionally make the watermark more transparent                          if (command.Properties["Transparency"].ToInt(context) != 100)                              watermark.Evaluate(Channels.Alpha' EvaluateOperator.Add'                                  -(255 * (100 - command.Properties["Transparency"].ToInt(context)) / 100));                          // Draw the watermark in the bottom right corner                          image.Composite(watermark' (Gravity)Enum.Parse(typeof(Gravity)'command.Properties["Position"].ToString(context))' CompositeOperator.Over);                      }                  }                  if (!string.IsNullOrEmpty(command.Properties["Text"].ToString(context)))                  {                      image.Settings.Font = command.Properties["TextFont"].ToString(context);                      image.Settings.FontPointsize = command.Properties["TextPointSize"].ToInt(context); ;                        Color color = (Color)ColorConverter.ConvertFromString(command.Properties["TextFillColor"].ToString(context));                      image.Settings.FillColor = new MagickColor(color.R' color.G' color.B' (byte) (255 * (100 - command.Properties["TextTransparency"].ToInt(context)) / 100));                      color = (Color)ColorConverter.ConvertFromString(command.Properties["TextStrokeColor"].ToString(context));                      image.Settings.StrokeColor = new MagickColor(color.R' color.G' color.B' (byte)(255 * (100 - command.Properties["TextTransparency"].ToInt(context)) / 100));                        image.Annotate(command.Properties["Text"].ToString(context).Replace("\\n"'"\n")'                          (Gravity) Enum.Parse(typeof(Gravity)' command.Properties["TextPosition"].ToString(context)));                  }                    image.Write(context.ImageStream' MagickFormat.Jpg);              }
Magic Number,Capture.Workflow.Plugins.Commands.ImageProcessing,OverlayAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\OverlayAction.cs,Execute,The following statement contains a magic number: using (MagickImage image = new MagickImage(context.ImageStream))              {                  if (File.Exists(command.Properties["OverlayFile"].ToString(context)))                  {                      // Read the watermark that will be put on top of the image                      using (MagickImage watermark = new MagickImage(command.Properties["OverlayFile"].ToString(context)))                      {                          if (command.Properties["StrechOverlay"].ToBool(context))                              watermark.Resize(image.Width' image.Height);                          // Optionally make the watermark more transparent                          if (command.Properties["Transparency"].ToInt(context) != 100)                              watermark.Evaluate(Channels.Alpha' EvaluateOperator.Add'                                  -(255 * (100 - command.Properties["Transparency"].ToInt(context)) / 100));                          // Draw the watermark in the bottom right corner                          image.Composite(watermark' (Gravity)Enum.Parse(typeof(Gravity)'command.Properties["Position"].ToString(context))' CompositeOperator.Over);                      }                  }                  if (!string.IsNullOrEmpty(command.Properties["Text"].ToString(context)))                  {                      image.Settings.Font = command.Properties["TextFont"].ToString(context);                      image.Settings.FontPointsize = command.Properties["TextPointSize"].ToInt(context); ;                        Color color = (Color)ColorConverter.ConvertFromString(command.Properties["TextFillColor"].ToString(context));                      image.Settings.FillColor = new MagickColor(color.R' color.G' color.B' (byte) (255 * (100 - command.Properties["TextTransparency"].ToInt(context)) / 100));                      color = (Color)ColorConverter.ConvertFromString(command.Properties["TextStrokeColor"].ToString(context));                      image.Settings.StrokeColor = new MagickColor(color.R' color.G' color.B' (byte)(255 * (100 - command.Properties["TextTransparency"].ToInt(context)) / 100));                        image.Annotate(command.Properties["Text"].ToString(context).Replace("\\n"'"\n")'                          (Gravity) Enum.Parse(typeof(Gravity)' command.Properties["TextPosition"].ToString(context)));                  }                    image.Write(context.ImageStream' MagickFormat.Jpg);              }
Magic Number,Capture.Workflow.Plugins.Commands.ImageProcessing,SaturationAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\SaturationAction.cs,CreateCommand,The following statement contains a magic number: command.Properties.Add(new CustomProperty()              {                  Name = "Saturation"'                  PropertyType = CustomPropertyType.Variable'                  Value = "0"'                  RangeMin = 0'                  RangeMax = 200              });
Magic Number,Capture.Workflow.Plugins.Commands.ImageProcessing,SaturationAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\SaturationAction.cs,Execute,The following statement contains a magic number: using (MagickImage image = new MagickImage(context.ImageStream))              {                  context.ImageStream.Seek(0' SeekOrigin.Begin);                  image.Modulate(new Percentage(100)' new Percentage((double)context.WorkFlow.Variables[command.Properties["Saturation"].ToString(context)].GetAsObject()));                  image.Write(context.ImageStream' MagickFormat.Bmp);              }
Magic Number,CSScriptEvaluatorApi,HostApp,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.evaluator.cs,Profile,The following statement contains a magic number: var count = 20;
Magic Number,CSScriptEvaluatorApi,EvaluatorSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.evaluator.cs,CompileMethod_Instance,The following statement contains a magic number: var result = script.Sqr(7);
Magic Number,CSScriptEvaluatorApi,EvaluatorSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.evaluator.cs,CreateDelegate,The following statement contains a magic number: var r = sqr(3);
Magic Number,CSScriptEvaluatorApi,EvaluatorSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.evaluator.cs,LoadDelegate,The following statement contains a magic number: int result = product(3' 2);
Magic Number,CSScriptEvaluatorApi,EvaluatorSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.evaluator.cs,LoadDelegate,The following statement contains a magic number: int result = product(3' 2);
Magic Number,CSScriptEvaluatorApi,EvaluatorSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.evaluator.cs,LoadCode,The following statement contains a magic number: int result = script.Sum(1' 2);
Magic Number,CSScriptEvaluatorApi,EvaluatorSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.evaluator.cs,LoadMethod,The following statement contains a magic number: int result = script.Sum(1' 2);
Magic Number,CSScriptEvaluatorApi,EvaluatorSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.evaluator.cs,LoadMethodWithInterface,The following statement contains a magic number: int result = script.Sum(1' 2);
Magic Number,CSScriptEvaluatorApi,EvaluatorSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.evaluator.cs,LoadCode_WithInterface,The following statement contains a magic number: int result = script.Sum(1' 2);
Magic Number,CSScriptEvaluatorApi,EvaluatorSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.evaluator.cs,LoadCode_WithDuckTypedInterface,The following statement contains a magic number: int result = script.Sum(1' 2);
Magic Number,CSScriptEvaluatorApi,EvaluatorSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.evaluator.cs,PerformanceTest,The following statement contains a magic number: var r = script.Sqr(3);
Magic Number,CSScriptEvaluatorApi,EvaluatorSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.evaluator.cs,DebugTest,The following statement contains a magic number: var r = script.Sum(3' 4);
Magic Number,CSScriptEvaluatorApi,EvaluatorSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.evaluator.cs,DebugTest,The following statement contains a magic number: var r = script.Sum(3' 4);
Magic Number,CSScriptEvaluatorExtensions,HostApp,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.Extensions.cs,Test,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,CSScriptEvaluatorExtensions,AsyncSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.Extensions.cs,LoadDelegateAsync,The following statement contains a magic number: Console.WriteLine("   End of {0}: {1}"' nameof(LoadDelegateAsync)' product(4' 2));
Magic Number,CSScriptEvaluatorExtensions,AsyncSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.Extensions.cs,LoadDelegateAsync,The following statement contains a magic number: Console.WriteLine("   End of {0}: {1}"' nameof(LoadDelegateAsync)' product(4' 2));
Magic Number,CSScriptEvaluatorExtensions,AsyncSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.Extensions.cs,LoadMethodAsync,The following statement contains a magic number: Console.WriteLine("   End of {0}: {1}"' nameof(LoadMethodAsync)' script.Div(15' 3));
Magic Number,CSScriptEvaluatorExtensions,AsyncSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.Extensions.cs,LoadMethodAsync,The following statement contains a magic number: Console.WriteLine("   End of {0}: {1}"' nameof(LoadMethodAsync)' script.Div(15' 3));
Magic Number,CSScriptEvaluatorExtensions,AsyncSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.Extensions.cs,LoadCodeAsync,The following statement contains a magic number: Console.WriteLine("   End of {0}: {1}"' nameof(LoadCodeAsync)' calc.Sum(1' 2));
Magic Number,CSScriptEvaluatorExtensions,AsyncSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.Extensions.cs,CreateDelegateAsync,The following statement contains a magic number: Console.WriteLine("   End of {0}: {1}"' nameof(CreateDelegateAsync)' product(15' 3));
Magic Number,CSScriptEvaluatorExtensions,AsyncSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.Extensions.cs,CreateDelegateAsync,The following statement contains a magic number: Console.WriteLine("   End of {0}: {1}"' nameof(CreateDelegateAsync)' product(15' 3));
Magic Number,CSScriptEvaluatorExtensions,AsyncSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.Extensions.cs,CompileCodeAsync,The following statement contains a magic number: Console.WriteLine("   End of {0}: {1}"' nameof(CompileCodeAsync)' calc.Sum(15' 3));
Magic Number,CSScriptEvaluatorExtensions,AsyncSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.Extensions.cs,CompileCodeAsync,The following statement contains a magic number: Console.WriteLine("   End of {0}: {1}"' nameof(CompileCodeAsync)' calc.Sum(15' 3));
Magic Number,CSScriptEvaluatorExtensions,AsyncSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.Extensions.cs,RemoteAsynch,The following statement contains a magic number: Console.WriteLine("   End of {0}: {1}"' nameof(RemoteAsynch)' sum(1' 2));
Magic Number,CSScriptEvaluatorExtensions,UnloadingSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.Extensions.cs,CreateDelegateRemotely,The following statement contains a magic number: Console.WriteLine("{0}: {1}"' nameof(CreateDelegateRemotely)' sum(15' 3));
Magic Number,CSScriptEvaluatorExtensions,UnloadingSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.Extensions.cs,CreateDelegateRemotely,The following statement contains a magic number: Console.WriteLine("{0}: {1}"' nameof(CreateDelegateRemotely)' sum(15' 3));
Magic Number,CSScriptEvaluatorExtensions,UnloadingSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.Extensions.cs,LoadCodeRemotely,The following statement contains a magic number: Console.WriteLine("{0}: {1}"' nameof(LoadCodeRemotely)' script.Sum(15' 3));
Magic Number,CSScriptEvaluatorExtensions,UnloadingSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.Extensions.cs,LoadCodeRemotely,The following statement contains a magic number: Console.WriteLine("{0}: {1}"' nameof(LoadCodeRemotely)' script.Sum(15' 3));
Magic Number,CSScriptEvaluatorExtensions,UnloadingSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.Extensions.cs,LoadCodeRemotelyWithInterface,The following statement contains a magic number: Console.WriteLine("{0}: {1}"' nameof(LoadCodeRemotelyWithInterface)' script.Sum(15' 3));
Magic Number,CSScriptEvaluatorExtensions,UnloadingSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.Extensions.cs,LoadCodeRemotelyWithInterface,The following statement contains a magic number: Console.WriteLine("{0}: {1}"' nameof(LoadCodeRemotelyWithInterface)' script.Sum(15' 3));
Magic Number,CSScriptEvaluatorExtensions,UnloadingSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.Extensions.cs,LoadMethodRemotely,The following statement contains a magic number: Console.WriteLine("{0}: {1}"' nameof(LoadMethodRemotely)' script.Sum(15' 3));
Magic Number,CSScriptEvaluatorExtensions,UnloadingSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.Extensions.cs,LoadMethodRemotely,The following statement contains a magic number: Console.WriteLine("{0}: {1}"' nameof(LoadMethodRemotely)' script.Sum(15' 3));
Magic Number,CSScriptEvaluatorExtensions,UnloadingSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.Extensions.cs,KeepRemoteObjectAlive,The following statement contains a magic number: sumSponsor = sum.ExtendLifeFromMinutes(30);
Magic Number,CSScriptNativeApi,CodeDomSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.native.cs,LoadMethod_Instance,The following statement contains a magic number: var result = script.Sqr(7);
Magic Number,CSScriptNativeApi,CodeDomSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.native.cs,CreateFunc,The following statement contains a magic number: int r = Sqr(3);
Magic Number,CSScriptNativeApi,CodeDomSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.native.cs,LoadCode,The following statement contains a magic number: int result = script.Sum(1' 2);
Magic Number,CSScriptNativeApi,CodeDomSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.native.cs,LoadCodeWithConfig,The following statement contains a magic number: try                  {                      File.WriteAllText(file' @"using System;                                                public class Script                                                {                                                    public int Sum(int a' int b)                                                    {                                                        return a+b;                                                    }                                                }");                        var settings = new Settings();                      //settings = null; // set to null to foll back to defaults                         dynamic script = CSScript.LoadWithConfig(file' null' false' settings' "/define:TEST")                                               .CreateObject("*");                        int result = script.Sum(1' 2);                  }                  finally                  {                      if (File.Exists(file))                          File.Delete(file);                  }
Magic Number,CSScriptNativeApi,CodeDomSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.native.cs,LoadCode_WithInterface,The following statement contains a magic number: int result = calc.Sum(1' 2);
Magic Number,CSScriptNativeApi,CodeDomSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.native.cs,LoadCode_WithDuckTypedInterface,The following statement contains a magic number: int result = calc.Sum(1' 2);
Magic Number,CSScriptNativeApi,CodeDomSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Scripting.native.cs,DebugTest,The following statement contains a magic number: int result = script.Sum(1' 2);
Magic Number,Capture.Workflow.Plugins.ViewElements,BrowseTextElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\BrowseTextElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "Width"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "150"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,BrowseTextElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\BrowseTextElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "LabelWidth"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "150"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,BrowseTextElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\BrowseTextElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "Height"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "35"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,BrowseTextElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\BrowseTextElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "Margins"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "5"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,BrowseTextElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\BrowseTextElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "FontSize"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 6'                  RangeMax = 400'                  Value = "15"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,BrowseTextElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\BrowseTextElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "FontSize"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 6'                  RangeMax = 400'                  Value = "15"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,Button,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\Button.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "Width"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "150"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,Button,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\Button.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "Height"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "50"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,Button,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\Button.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "Margins"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "5"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,Button,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\Button.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "FontSize"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 6'                  RangeMax = 400'                  Value = "15"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,Button,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\Button.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "FontSize"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 6'                  RangeMax = 400'                  Value = "15"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,Button,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\Button.cs,GetControl,The following statement contains a magic number: if (Enum.TryParse(viewElement.Properties["Icon"].Value' out kind))                  button.Content = new PackIcon() {Kind = kind' Width = button.Width /2' Height = button.Height /2};
Magic Number,Capture.Workflow.Plugins.ViewElements,Button,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\Button.cs,GetControl,The following statement contains a magic number: if (Enum.TryParse(viewElement.Properties["Icon"].Value' out kind))                  button.Content = new PackIcon() {Kind = kind' Width = button.Width /2' Height = button.Height /2};
Magic Number,Capture.Workflow.Plugins.ViewElements,CameraProperty,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\CameraProperty.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "Width"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "150"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,CameraProperty,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\CameraProperty.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "LabelWidth"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "150"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,CameraProperty,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\CameraProperty.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "Height"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "0"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,CameraProperty,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\CameraProperty.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "Margins"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "2"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,CameraProperty,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\CameraProperty.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "FontSize"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 6'                  RangeMax = 400'                  Value = "15"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,CameraProperty,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\CameraProperty.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "FontSize"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 6'                  RangeMax = 400'                  Value = "15"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,CheckBoxElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\CheckBoxElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "Width"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "150"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,CheckBoxElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\CheckBoxElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "Height"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "50"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,CheckBoxElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\CheckBoxElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "Margins"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "5"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,CheckBoxElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\CheckBoxElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "FontSize"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 6'                  RangeMax = 400'                  Value = "15"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,CheckBoxElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\CheckBoxElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "FontSize"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 6'                  RangeMax = 400'                  Value = "15"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,ComboBoxElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\ComboBoxElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "Width"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "150"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,ComboBoxElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\ComboBoxElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "LabelWidth"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "150"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,ComboBoxElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\ComboBoxElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "Height"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "0"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,ComboBoxElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\ComboBoxElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "Margins"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "2"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,ComboBoxElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\ComboBoxElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "FontSize"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 6'                  RangeMax = 400'                  Value = "15"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,ComboBoxElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\ComboBoxElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "FontSize"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 6'                  RangeMax = 400'                  Value = "15"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,ImageElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\ImageElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "Width"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "0"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,ImageElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\ImageElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "Height"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "0"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,ImageElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\ImageElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "Margins"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "0"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,Label,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\Label.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "Width"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "150"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,Label,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\Label.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "Height"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "50"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,Label,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\Label.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "Margins"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "5"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,Label,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\Label.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "FontSize"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 6'                  RangeMax = 400'                  Value = "15"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,Label,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\Label.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "FontSize"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 6'                  RangeMax = 400'                  Value = "15"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,SeparatorElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\SeparatorElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "Width"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "150"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,SeparatorElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\SeparatorElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "Height"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "5"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,SeparatorElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\SeparatorElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "Margins"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "5"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,SliderElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\SliderElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "Width"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "150"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,SliderElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\SliderElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "LabelWidth"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "0"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,SliderElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\SliderElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "FontSize"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 6'                  RangeMax = 400'                  Value = "15"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,SliderElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\SliderElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "FontSize"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 6'                  RangeMax = 400'                  Value = "15"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,SliderElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\SliderElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "Height"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "35"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,SliderElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\SliderElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "Margins"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "5"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,TextElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\TextElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "Width"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "150"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,TextElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\TextElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "LabelWidth"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "0"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,TextElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\TextElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "Height"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "35"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,TextElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\TextElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "Margins"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 0'                  RangeMax = 9999'                  Value = "5"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,TextElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\TextElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "FontSize"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 6'                  RangeMax = 400'                  Value = "15"              });
Magic Number,Capture.Workflow.Plugins.ViewElements,TextElement,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\TextElement.cs,CreateElement,The following statement contains a magic number: element.Properties.Items.Add(new CustomProperty()              {                  Name = "FontSize"'                  PropertyType = CustomPropertyType.Number'                  RangeMin = 6'                  RangeMax = 400'                  Value = "15"              });
Magic Number,Capture.Workflow.Plugins.Views.ViewModel,LiveviewViewModel,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Views\ViewModel\LiveviewViewModel.cs,Instance_Message,The following statement contains a magic number: switch (e.Name)              {                  case Messages.LiveViewChanged:                  {                      var param = e.Param as object[];                      if (param != null)                      {                          var stream = e.Context.ImageStream;                          stream.Seek(0' SeekOrigin.Begin);                          BitmapImage bi = new BitmapImage();                          bi.BeginInit();                          bi.StreamSource = stream;                          bi.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;                          bi.CacheOption = BitmapCacheOption.OnLoad;                          bi.EndInit();                          bi.Freeze();                          LiveBitmap = bi;                      }                  }                      break;                  case Messages.PhotoDownloaded:                  {                      RaisePropertyChanged(() => FileItems);                      FileItem item = e.Param as FileItem;                      if (item != null)                          FileItem = item;                      RaisePropertyChanged(() => Bitmap);                      RaisePropertyChanged(() => PreviewTitle);                      if (FileItems.Count < 2)                          PreviewTabActive = true;                  }                      break;                  case Messages.ThumbUpdated:                  case Messages.NextPhoto:                  case Messages.PrevPhoto:                  case Messages.DeletePhoto:                  case Messages.ClearPhotos:                  {                      RaisePropertyChanged(() => FileItem);                      RaisePropertyChanged(() => Bitmap);                      RaisePropertyChanged(() => PreviewTitle);                  }                      break;              }
Missing Default,Capture.Workflow.Plugins.Commands,AssignListAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\AssignListAction.cs,Execute,The following switch statement is missing a default case: switch (command.Properties["Source"].ToString(context))              {                  case "Folder":                  {                      var folder = command.Properties["Param"].ToString(context);                      if (string.IsNullOrEmpty(folder))                      {                          Log.Error(" No folder specified in Param " + Name);                          return false;                      }                      if (!Directory.Exists(folder))                      {                          Log.Error(" Folder not exist " + Name + " " + folder);                          return false;                      }                        var folders = Directory.GetDirectories(folder);                      var val = "";                      foreach (var item in folders.OrderBy(x => x))                      {                          val += Path.GetFileName(item) + "|";                      }                      context.WorkFlow.Variables[command.Properties["Variable"].Value].Value = val;                  }                      break;              }
Missing Default,Capture.Workflow.Plugins.Commands,CameraAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\CameraAction.cs,Execute,The following switch statement is missing a default case: switch (command.Properties["Action"].Value)                  {                      case "Capture":                          CaptureAsync(true);                          break;                      case "CaptureNoAf":                          CaptureAsync(false);                          break;                      case "StartLiveView":                          StartLiveView();                          break;                      case "StopLiveView":                          StopLiveView();                          break;                      case "Autofocus":                          context.CameraDevice.AutoFocus();                          break;                      case "CaptureToPc":                          try                          {                              context.CameraDevice.CaptureInSdRam = true;                          }                          catch (Exception e)                          {                              Log.Debug("Unable to set capture destination PC"'e);                          }                          break;                      case "CaptureToCard":                          try                          {                              context.CameraDevice.CaptureInSdRam = false;                          }                          catch (Exception e)                          {                              Log.Debug("Unable to set capture destination CARD"' e);                          }                          break;                      case "EnableCapture":                          context.CaptureEnabled = true;                          break;                      case "DisableCapture":                          context.CaptureEnabled = false;                          break;                    }
Missing Default,Capture.Workflow.Plugins.Commands,DialogAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\DialogAction.cs,Execute,The following switch statement is missing a default case: switch (command.Properties["Type"].ToString(context))              {                  case "Message":                      MessageBox.Show(command.Properties["Message"].ToString(context));                      break;                  case "Warning":                      MessageBox.Show( command.Properties["Message"].ToString(context)' "Warning"' MessageBoxButton.OK'                          MessageBoxImage.Warning);                      break;                  case "YesNo":                      return MessageBox.Show(command.Properties["Message"].ToString(context)' ""' MessageBoxButton.YesNo' MessageBoxImage.Question) == MessageBoxResult.Yes;                  case "SaveFile":                      var dialog =new SaveFileDialog();                      dialog.Filter = command.Properties["FileNameFilter"].ToString(context);                      dialog.FileName = context.WorkFlow.Variables[command.Properties["Variable"].Value].Value;                      if (dialog.ShowDialog() == true)                          context.WorkFlow.Variables[command.Properties["Variable"].Value].Value = dialog.FileName;                      else                          return false;                      break;              }
Missing Default,Capture.Workflow.Plugins.Commands,WorkflowAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\WorkflowAction.cs,Execute,The following switch statement is missing a default case: switch (command.Properties["Action"].Value)              {                  case "ShowView":                      WorkflowManager.Instance.OnMessage(new MessageEventArgs(Messages.ShowView'                          command.Properties["ViewName"].ToString(context)));                      break;                  case "FinishSession":                      WorkflowManager.Instance.OnMessage(new MessageEventArgs(Messages.SessionFinished' context));                      break;                  case "SaveVariables":                      WorkflowManager.Instance.OnMessage(new MessageEventArgs(Messages.SaveVariables' context));                      break;                  case "CancelSession":                      WorkflowManager.Instance.OnMessage(new MessageEventArgs(Messages.SessionCanceled' context));                      break;                  case "PreviousView":                      WorkflowManager.Instance.OnMessage(new MessageEventArgs(Messages.PreviousView' context));                      break;                  case "UpdateThumb":                      WorkflowManager.Instance.OnMessage(new MessageEventArgs(Messages.ThumbCreate' context));                      break;                  case "NextPhoto":                      WorkflowManager.Instance.OnMessage(new MessageEventArgs(Messages.NextPhoto' context));                      break;                  case "PrevPhoto":                      WorkflowManager.Instance.OnMessage(new MessageEventArgs(Messages.PrevPhoto' context));                      break;                  case "DeletePhoto":                      WorkflowManager.Instance.OnMessage(new MessageEventArgs(Messages.DeletePhoto' context));                      break;                  case "ClearPhotos":                      WorkflowManager.Instance.OnMessage(new MessageEventArgs(Messages.ClearPhotos' context));                      break;                  case "ShowHelp":                      WorkflowManager.Instance.OnMessage(new MessageEventArgs(Messages.ShowHelp' context));                      break;                  case "LoadImage":                  {                      try                      {                          var stream = new MemoryStreamEx();                          var buffer = File.ReadAllBytes(context.FileItem.TempFile);                          stream.Write(buffer' 0' buffer.Length);                          stream.Seek(0' SeekOrigin.Begin);                          context.ImageStream = stream;                          Log.Debug("LoadImage executed");                      }                      catch (Exception e)                      {                          Log.Debug("Error unload image"' e);                      }                  }                      break;                  case "UnLoadImage":                  {                      try                      {                          context.ImageStream?.Close();                          Log.Debug("UnLoadImage executed");                          }                      catch (Exception e)                      {                              Log.Debug("Error unload image"' e);                      }                      }                                            break;              }
Missing Default,Capture.Workflow.Plugins.Commands.ImageProcessing,SaveFileAction,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Commands\ImageProcessing\SaveFileAction.cs,Execute,The following switch statement is missing a default case: switch (command.Properties["FileFormat"].Value)                  {                      case "Jpg":                          image.Write(filename + ".jpg");                          break;                      case "Png":                          image.Write(filename + ".png");                          break;                      case "Bmp":                          image.Write(filename + ".bmp");                          break;                  }
Missing Default,Capture.Workflow.Plugins.ViewElements,CameraProperty,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\ViewElements\CameraProperty.cs,GetProperty,The following switch statement is missing a default case: switch (name)              {                  case "Mode":                      return device.Mode;                  case "CompressionSetting":                      return device.CompressionSetting;                  case "ExposureCompensation":                      return device.ExposureCompensation;                  case "ExposureMeteringMode":                      return device.ExposureCompensation;                  case "FNumber":                      return device.FNumber;                  case "IsoNumber":                      return device.IsoNumber;                  case "ShutterSpeed":                      return device.ShutterSpeed;                  case "WhiteBalance":                      return device.WhiteBalance;                  case "FocusMode":                      return device.FocusMode;              }
Missing Default,Capture.Workflow.Plugins.Views,LiveView,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Views\LiveView.cs,GetPreview,The following switch statement is missing a default case: switch (element.Properties["Position"].Value)                  {                      case "Left":                          model.LeftElements.Add(element.Instance.GetControl(element'context));                          break;                      case "BottomLeft":                          model.BottomLeftElements.Add(element.Instance.GetControl(element' context));                          break;                        case "BottomRight":                          model.BottomRightElements.Add(element.Instance.GetControl(element'context));                          break;                      case "Background":                          model.BackGroundElements.Add(element.Instance.GetControl(element'context));                          break;                      case "PreviewRight":                          model.PreviewRight.Add(element.Instance.GetControl(element' context));                          break;                  }
Missing Default,Capture.Workflow.Plugins.Views,Preview,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Views\Preview.cs,GetPreview,The following switch statement is missing a default case: switch (element.Properties["Position"].Value)                  {                      case "Left":                          model.LeftElements.Add(element.Instance.GetControl(element'context));                          break;                      case "Right":                          model.RightElements.Add(element.Instance.GetControl(element' context));                          break;                      case "BottomLeft":                          model.BottomLeftElements.Add(element.Instance.GetControl(element' context));                          break;                      case "BottomRight":                          model.BottomRightElements.Add(element.Instance.GetControl(element' context));                          break;                      case "Background":                          model.BackGroundElements.Add(element.Instance.GetControl(element' context));                          break;                  }
Missing Default,Capture.Workflow.Plugins.Views,StartScreen,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Views\StartScreen.cs,GetPreview,The following switch statement is missing a default case: switch (element.Properties["Position"].Value)                  {                      case "Center":                          model.CenterElements.Add(element.Instance.GetControl(element' context));                          break;                      case "BottomLeft":                          model.BottomLeftElements.Add(element.Instance.GetControl(element' context));                          break;                        case "BottomRight":                          model.BottomRightElements.Add(element.Instance.GetControl(element' context));                          break;                      case "Background":                          model.BackGroundElements.Add(element.Instance.GetControl(element' context));                          break;                  }
Missing Default,Capture.Workflow.Plugins.Views.ViewModel,LiveviewViewModel,C:\repos\dukus_digiCamControl\Capture.Workflow.Plugins\Views\ViewModel\LiveviewViewModel.cs,Instance_Message,The following switch statement is missing a default case: switch (e.Name)              {                  case Messages.LiveViewChanged:                  {                      var param = e.Param as object[];                      if (param != null)                      {                          var stream = e.Context.ImageStream;                          stream.Seek(0' SeekOrigin.Begin);                          BitmapImage bi = new BitmapImage();                          bi.BeginInit();                          bi.StreamSource = stream;                          bi.CreateOptions = BitmapCreateOptions.IgnoreColorProfile;                          bi.CacheOption = BitmapCacheOption.OnLoad;                          bi.EndInit();                          bi.Freeze();                          LiveBitmap = bi;                      }                  }                      break;                  case Messages.PhotoDownloaded:                  {                      RaisePropertyChanged(() => FileItems);                      FileItem item = e.Param as FileItem;                      if (item != null)                          FileItem = item;                      RaisePropertyChanged(() => Bitmap);                      RaisePropertyChanged(() => PreviewTitle);                      if (FileItems.Count < 2)                          PreviewTabActive = true;                  }                      break;                  case Messages.ThumbUpdated:                  case Messages.NextPhoto:                  case Messages.PrevPhoto:                  case Messages.DeletePhoto:                  case Messages.ClearPhotos:                  {                      RaisePropertyChanged(() => FileItem);                      RaisePropertyChanged(() => Bitmap);                      RaisePropertyChanged(() => PreviewTitle);                  }                      break;              }
