Implementation smell,Namespace,Class,File,Method,Description
Long Method,CameraControlCmd,Program,C:\repos\dukus_digiCamControl\CameraControlCmd\Program.cs,ExecuteArgs,The method has 250 lines of code.
Complex Method,CameraControlCmd,Program,C:\repos\dukus_digiCamControl\CameraControlCmd\Program.cs,Main,Cyclomatic complexity of the method is 12
Complex Method,CameraControlCmd,Program,C:\repos\dukus_digiCamControl\CameraControlCmd\Program.cs,ExecuteArgs,Cyclomatic complexity of the method is 37
Complex Method,CameraControlCmd,Program,C:\repos\dukus_digiCamControl\CameraControlCmd\Program.cs,PhotoCaptured,Cyclomatic complexity of the method is 10
Long Statement,CameraControlCmd,Program,C:\repos\dukus_digiCamControl\CameraControlCmd\Program.cs,Main,The length of the statement  "                Log.InfoWithWriteLine(String.Format("Running in /verbose mode\n\t{0}\n\t{1}\n"' ApplicationInformation.ExecutingAssembly' ApplicationInformation.CompileDate)); " is 159.
Complex Conditional,CameraControlCmd,Program,C:\repos\dukus_digiCamControl\CameraControlCmd\Program.cs,Main,The conditional expression  "(Log.IsVerbose) && ( _arguments.Contains("capture") ||                                      _arguments.Contains("capturenoaf") ||                                      _arguments.Contains("captureall") ||                                      _arguments.Contains("captureallnoaf"))"  is complex.
Magic Number,CameraControlCmd,Program,C:\repos\dukus_digiCamControl\CameraControlCmd\Program.cs,Main,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,CameraControlCmd,Program,C:\repos\dukus_digiCamControl\CameraControlCmd\Program.cs,Main,The following statement contains a magic number: Thread.Sleep(250);
Magic Number,CameraControlCmd,Program,C:\repos\dukus_digiCamControl\CameraControlCmd\Program.cs,ExecuteArgs,The following statement contains a magic number: try              {                  if (_arguments.Contains("verbose"))                  {                      /*  /verbose is processed in main() to set the flag and has nothing to do here */                  }  #if DEBUG                  if (_arguments.Contains("nop"))                  {                  /* nop - return to caller w/o processing any other parameters                   *    although: help is processed out of line in main() (so /nop in /help /nop is ignored)                   *    Several things such as InitApplication() and all of the camera related functions in there */                      return 0;                   }  #endif                                if (_arguments.Contains("export"))                  {                      if (string.IsNullOrEmpty(_arguments["export"]))                      {                          Console.WriteLine("No export file is specified");                      }                      else                      {                          using (StreamWriter writer = File.CreateText(_arguments["export"]))                          {                              Console.WriteLine("Exporting properties to: " + _arguments["export"]);                              CameraPreset preset = new CameraPreset();                              preset.Get(ServiceProvider.DeviceManager.SelectedCameraDevice);                              foreach (ValuePair valuePair in preset.Values)                              {                                  writer.WriteLine("\"{0}\"'\"{1}\""' valuePair.Name' valuePair.Value);                              }                              writer.Close();                          }                      }                  }                  if (_arguments.Contains("session"))                  {                      PhotoSession session = ServiceProvider.Settings.GetSession(_arguments["session"]);                      if (session != null)                      {                          Console.WriteLine("Using session {0}"' _arguments["session"]);                          ServiceProvider.Settings.DefaultSession = session;                      }                      else                      {                          Console.WriteLine("Session not found {0}! Using default session"' _arguments["session"]);                      }                  }                  if (_arguments.Contains("preset"))                  {                      CameraPreset preset = ServiceProvider.Settings.GetPreset(_arguments["preset"]);                      if (preset != null)                      {                          Console.WriteLine("Using preset {0}"' _arguments["preset"]);                          foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)                          {                              preset.Set(cameraDevice);                          }                      }                      else                      {                          Console.WriteLine("Preset not found {0}!"' _arguments["preset"]);                      }                  }                  if (_arguments.Contains("folder"))                  {                      if (string.IsNullOrEmpty(_arguments["folder"]))                      {                          Console.WriteLine("No folder !!!");                      }                      else                      {                          ServiceProvider.Settings.DefaultSession.Folder = _arguments["folder"];                      }                  }                  if (_arguments.Contains("filenametemplate"))                  {                      if (string.IsNullOrEmpty(_arguments["filenametemplate"]))                      {                          Console.WriteLine("Wrong filename !!!");                      }                      else                      {                          ServiceProvider.Settings.DefaultSession.FileNameTemplate = _arguments["filenametemplate"];                      }                  }                  if (_arguments.Contains("counter"))                  {                      int i = 0;                      string val = _arguments["counter"];                      if (string.IsNullOrEmpty(_arguments["counter"]) || !int.TryParse(val' out i))                      {                          Console.WriteLine("Wrong counter !!!");                      }                      else                      {                          ServiceProvider.Settings.DefaultSession.Counter = i;                      }                  }                  if (_arguments.Contains("filename"))                  {                      _outFilename = _arguments["filename"];                      //if(string.IsNullOrEmpty(_outFilename))                      //{                      //    SaveFileDialog dlg = new SaveFileDialog();                      //    dlg.Filter = "Jpg file (*.jpg)|*.jpg|All files|*.*";                      //    if(dlg.ShowDialog()==DialogResult.OK)                      //    {                      //        _outFilename = dlg.FileName;                      //    }                      //}                  }                  if (_arguments.Contains("iso"))                  {                      if (string.IsNullOrEmpty(_arguments["iso"]))                      {                          Console.WriteLine("No iso number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.IsoNumber.SetValue(_arguments["iso"]);                      }                  }                  if (_arguments.Contains("aperture"))                  {                      if (string.IsNullOrEmpty(_arguments["aperture"]))                      {                          Console.WriteLine("No aperture number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.FNumber.SetValue(_arguments["aperture"]);                      }                  }                  if (_arguments.Contains("shutter"))                  {                      if (string.IsNullOrEmpty(_arguments["shutter"]))                      {                          Console.WriteLine("No shutter number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.ShutterSpeed.SetValue(_arguments["shutter"]);                      }                  }                    if (_arguments.Contains("compression"))                  {                      if (string.IsNullOrEmpty(_arguments["compression"]))                      {                          Console.WriteLine("No compression !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.CompressionSetting.SetValue(                              _arguments["compression"].Replace('_''' '));                      }                  }                    if (_arguments.Contains("ec"))                  {                      if (string.IsNullOrEmpty(_arguments["ec"]))                      {                          Console.WriteLine("No ec number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.ExposureCompensation.SetValue(                              _arguments["ec"]);                      }                  }                    if (_arguments.Contains("comment"))                  {                      Thread.Sleep(200);                      ServiceProvider.DeviceManager.SelectedCameraDevice.SetCameraField(CameraFieldType.Comment'                                                                                        _arguments["comment"]);                      Console.WriteLine("Comment was set");                  }                  if (_arguments.Contains("artist"))                  {                      Thread.Sleep(200);                      ServiceProvider.DeviceManager.SelectedCameraDevice.SetCameraField(CameraFieldType.Artist'                                                                                        _arguments["artist"]);                      Console.WriteLine("Artist was set");                  }                  if (_arguments.Contains("copyright"))                  {                      Thread.Sleep(200);                      ServiceProvider.DeviceManager.SelectedCameraDevice.SetCameraField(CameraFieldType.Copyright'                                                                                        _arguments["copyright"]);                      Console.WriteLine("Copyright was set");                  }                    if (_arguments.Contains("capture"))                  {                      new Thread(Capture).Start();                      Thread.Sleep(200);                      return 0;                  }                    if (_arguments.Contains("format"))                  {                      Console.WriteLine("Card format in progress...");                      ServiceProvider.DeviceManager.SelectedCameraDevice.FormatStorage(null);                      Thread.Sleep(200);                      Console.WriteLine("Card format done");                      return 0;                  }                    if (_arguments.Contains("capturenoaf"))                  {                      try                      {                          ServiceProvider.DeviceManager.SelectedCameraDevice.CapturePhotoNoAf();                      }                      catch (Exception exception)                      {                          Console.WriteLine("Error occurred while capturing photo " + exception);                          ServiceProvider.DeviceManager.SelectedCameraDevice.IsBusy = false;                          return 1;                      }                        return 0;                  }                  if (_arguments.Contains("captureall"))                  {                      foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)                      {                          ICameraDevice device = cameraDevice;                          new Thread(device.CapturePhoto).Start();                      }                  }                  if (_arguments.Contains("captureallnoaf"))                  {                      foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)                      {                          ICameraDevice device = cameraDevice;                          new Thread(device.CapturePhotoNoAf).Start();                      }                  }              }              catch (Exception exception)              {                  Log.Error(exception);                  Console.WriteLine(exception.Message);                  return 1;              }
Magic Number,CameraControlCmd,Program,C:\repos\dukus_digiCamControl\CameraControlCmd\Program.cs,ExecuteArgs,The following statement contains a magic number: try              {                  if (_arguments.Contains("verbose"))                  {                      /*  /verbose is processed in main() to set the flag and has nothing to do here */                  }  #if DEBUG                  if (_arguments.Contains("nop"))                  {                  /* nop - return to caller w/o processing any other parameters                   *    although: help is processed out of line in main() (so /nop in /help /nop is ignored)                   *    Several things such as InitApplication() and all of the camera related functions in there */                      return 0;                   }  #endif                                if (_arguments.Contains("export"))                  {                      if (string.IsNullOrEmpty(_arguments["export"]))                      {                          Console.WriteLine("No export file is specified");                      }                      else                      {                          using (StreamWriter writer = File.CreateText(_arguments["export"]))                          {                              Console.WriteLine("Exporting properties to: " + _arguments["export"]);                              CameraPreset preset = new CameraPreset();                              preset.Get(ServiceProvider.DeviceManager.SelectedCameraDevice);                              foreach (ValuePair valuePair in preset.Values)                              {                                  writer.WriteLine("\"{0}\"'\"{1}\""' valuePair.Name' valuePair.Value);                              }                              writer.Close();                          }                      }                  }                  if (_arguments.Contains("session"))                  {                      PhotoSession session = ServiceProvider.Settings.GetSession(_arguments["session"]);                      if (session != null)                      {                          Console.WriteLine("Using session {0}"' _arguments["session"]);                          ServiceProvider.Settings.DefaultSession = session;                      }                      else                      {                          Console.WriteLine("Session not found {0}! Using default session"' _arguments["session"]);                      }                  }                  if (_arguments.Contains("preset"))                  {                      CameraPreset preset = ServiceProvider.Settings.GetPreset(_arguments["preset"]);                      if (preset != null)                      {                          Console.WriteLine("Using preset {0}"' _arguments["preset"]);                          foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)                          {                              preset.Set(cameraDevice);                          }                      }                      else                      {                          Console.WriteLine("Preset not found {0}!"' _arguments["preset"]);                      }                  }                  if (_arguments.Contains("folder"))                  {                      if (string.IsNullOrEmpty(_arguments["folder"]))                      {                          Console.WriteLine("No folder !!!");                      }                      else                      {                          ServiceProvider.Settings.DefaultSession.Folder = _arguments["folder"];                      }                  }                  if (_arguments.Contains("filenametemplate"))                  {                      if (string.IsNullOrEmpty(_arguments["filenametemplate"]))                      {                          Console.WriteLine("Wrong filename !!!");                      }                      else                      {                          ServiceProvider.Settings.DefaultSession.FileNameTemplate = _arguments["filenametemplate"];                      }                  }                  if (_arguments.Contains("counter"))                  {                      int i = 0;                      string val = _arguments["counter"];                      if (string.IsNullOrEmpty(_arguments["counter"]) || !int.TryParse(val' out i))                      {                          Console.WriteLine("Wrong counter !!!");                      }                      else                      {                          ServiceProvider.Settings.DefaultSession.Counter = i;                      }                  }                  if (_arguments.Contains("filename"))                  {                      _outFilename = _arguments["filename"];                      //if(string.IsNullOrEmpty(_outFilename))                      //{                      //    SaveFileDialog dlg = new SaveFileDialog();                      //    dlg.Filter = "Jpg file (*.jpg)|*.jpg|All files|*.*";                      //    if(dlg.ShowDialog()==DialogResult.OK)                      //    {                      //        _outFilename = dlg.FileName;                      //    }                      //}                  }                  if (_arguments.Contains("iso"))                  {                      if (string.IsNullOrEmpty(_arguments["iso"]))                      {                          Console.WriteLine("No iso number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.IsoNumber.SetValue(_arguments["iso"]);                      }                  }                  if (_arguments.Contains("aperture"))                  {                      if (string.IsNullOrEmpty(_arguments["aperture"]))                      {                          Console.WriteLine("No aperture number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.FNumber.SetValue(_arguments["aperture"]);                      }                  }                  if (_arguments.Contains("shutter"))                  {                      if (string.IsNullOrEmpty(_arguments["shutter"]))                      {                          Console.WriteLine("No shutter number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.ShutterSpeed.SetValue(_arguments["shutter"]);                      }                  }                    if (_arguments.Contains("compression"))                  {                      if (string.IsNullOrEmpty(_arguments["compression"]))                      {                          Console.WriteLine("No compression !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.CompressionSetting.SetValue(                              _arguments["compression"].Replace('_''' '));                      }                  }                    if (_arguments.Contains("ec"))                  {                      if (string.IsNullOrEmpty(_arguments["ec"]))                      {                          Console.WriteLine("No ec number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.ExposureCompensation.SetValue(                              _arguments["ec"]);                      }                  }                    if (_arguments.Contains("comment"))                  {                      Thread.Sleep(200);                      ServiceProvider.DeviceManager.SelectedCameraDevice.SetCameraField(CameraFieldType.Comment'                                                                                        _arguments["comment"]);                      Console.WriteLine("Comment was set");                  }                  if (_arguments.Contains("artist"))                  {                      Thread.Sleep(200);                      ServiceProvider.DeviceManager.SelectedCameraDevice.SetCameraField(CameraFieldType.Artist'                                                                                        _arguments["artist"]);                      Console.WriteLine("Artist was set");                  }                  if (_arguments.Contains("copyright"))                  {                      Thread.Sleep(200);                      ServiceProvider.DeviceManager.SelectedCameraDevice.SetCameraField(CameraFieldType.Copyright'                                                                                        _arguments["copyright"]);                      Console.WriteLine("Copyright was set");                  }                    if (_arguments.Contains("capture"))                  {                      new Thread(Capture).Start();                      Thread.Sleep(200);                      return 0;                  }                    if (_arguments.Contains("format"))                  {                      Console.WriteLine("Card format in progress...");                      ServiceProvider.DeviceManager.SelectedCameraDevice.FormatStorage(null);                      Thread.Sleep(200);                      Console.WriteLine("Card format done");                      return 0;                  }                    if (_arguments.Contains("capturenoaf"))                  {                      try                      {                          ServiceProvider.DeviceManager.SelectedCameraDevice.CapturePhotoNoAf();                      }                      catch (Exception exception)                      {                          Console.WriteLine("Error occurred while capturing photo " + exception);                          ServiceProvider.DeviceManager.SelectedCameraDevice.IsBusy = false;                          return 1;                      }                        return 0;                  }                  if (_arguments.Contains("captureall"))                  {                      foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)                      {                          ICameraDevice device = cameraDevice;                          new Thread(device.CapturePhoto).Start();                      }                  }                  if (_arguments.Contains("captureallnoaf"))                  {                      foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)                      {                          ICameraDevice device = cameraDevice;                          new Thread(device.CapturePhotoNoAf).Start();                      }                  }              }              catch (Exception exception)              {                  Log.Error(exception);                  Console.WriteLine(exception.Message);                  return 1;              }
Magic Number,CameraControlCmd,Program,C:\repos\dukus_digiCamControl\CameraControlCmd\Program.cs,ExecuteArgs,The following statement contains a magic number: try              {                  if (_arguments.Contains("verbose"))                  {                      /*  /verbose is processed in main() to set the flag and has nothing to do here */                  }  #if DEBUG                  if (_arguments.Contains("nop"))                  {                  /* nop - return to caller w/o processing any other parameters                   *    although: help is processed out of line in main() (so /nop in /help /nop is ignored)                   *    Several things such as InitApplication() and all of the camera related functions in there */                      return 0;                   }  #endif                                if (_arguments.Contains("export"))                  {                      if (string.IsNullOrEmpty(_arguments["export"]))                      {                          Console.WriteLine("No export file is specified");                      }                      else                      {                          using (StreamWriter writer = File.CreateText(_arguments["export"]))                          {                              Console.WriteLine("Exporting properties to: " + _arguments["export"]);                              CameraPreset preset = new CameraPreset();                              preset.Get(ServiceProvider.DeviceManager.SelectedCameraDevice);                              foreach (ValuePair valuePair in preset.Values)                              {                                  writer.WriteLine("\"{0}\"'\"{1}\""' valuePair.Name' valuePair.Value);                              }                              writer.Close();                          }                      }                  }                  if (_arguments.Contains("session"))                  {                      PhotoSession session = ServiceProvider.Settings.GetSession(_arguments["session"]);                      if (session != null)                      {                          Console.WriteLine("Using session {0}"' _arguments["session"]);                          ServiceProvider.Settings.DefaultSession = session;                      }                      else                      {                          Console.WriteLine("Session not found {0}! Using default session"' _arguments["session"]);                      }                  }                  if (_arguments.Contains("preset"))                  {                      CameraPreset preset = ServiceProvider.Settings.GetPreset(_arguments["preset"]);                      if (preset != null)                      {                          Console.WriteLine("Using preset {0}"' _arguments["preset"]);                          foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)                          {                              preset.Set(cameraDevice);                          }                      }                      else                      {                          Console.WriteLine("Preset not found {0}!"' _arguments["preset"]);                      }                  }                  if (_arguments.Contains("folder"))                  {                      if (string.IsNullOrEmpty(_arguments["folder"]))                      {                          Console.WriteLine("No folder !!!");                      }                      else                      {                          ServiceProvider.Settings.DefaultSession.Folder = _arguments["folder"];                      }                  }                  if (_arguments.Contains("filenametemplate"))                  {                      if (string.IsNullOrEmpty(_arguments["filenametemplate"]))                      {                          Console.WriteLine("Wrong filename !!!");                      }                      else                      {                          ServiceProvider.Settings.DefaultSession.FileNameTemplate = _arguments["filenametemplate"];                      }                  }                  if (_arguments.Contains("counter"))                  {                      int i = 0;                      string val = _arguments["counter"];                      if (string.IsNullOrEmpty(_arguments["counter"]) || !int.TryParse(val' out i))                      {                          Console.WriteLine("Wrong counter !!!");                      }                      else                      {                          ServiceProvider.Settings.DefaultSession.Counter = i;                      }                  }                  if (_arguments.Contains("filename"))                  {                      _outFilename = _arguments["filename"];                      //if(string.IsNullOrEmpty(_outFilename))                      //{                      //    SaveFileDialog dlg = new SaveFileDialog();                      //    dlg.Filter = "Jpg file (*.jpg)|*.jpg|All files|*.*";                      //    if(dlg.ShowDialog()==DialogResult.OK)                      //    {                      //        _outFilename = dlg.FileName;                      //    }                      //}                  }                  if (_arguments.Contains("iso"))                  {                      if (string.IsNullOrEmpty(_arguments["iso"]))                      {                          Console.WriteLine("No iso number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.IsoNumber.SetValue(_arguments["iso"]);                      }                  }                  if (_arguments.Contains("aperture"))                  {                      if (string.IsNullOrEmpty(_arguments["aperture"]))                      {                          Console.WriteLine("No aperture number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.FNumber.SetValue(_arguments["aperture"]);                      }                  }                  if (_arguments.Contains("shutter"))                  {                      if (string.IsNullOrEmpty(_arguments["shutter"]))                      {                          Console.WriteLine("No shutter number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.ShutterSpeed.SetValue(_arguments["shutter"]);                      }                  }                    if (_arguments.Contains("compression"))                  {                      if (string.IsNullOrEmpty(_arguments["compression"]))                      {                          Console.WriteLine("No compression !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.CompressionSetting.SetValue(                              _arguments["compression"].Replace('_''' '));                      }                  }                    if (_arguments.Contains("ec"))                  {                      if (string.IsNullOrEmpty(_arguments["ec"]))                      {                          Console.WriteLine("No ec number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.ExposureCompensation.SetValue(                              _arguments["ec"]);                      }                  }                    if (_arguments.Contains("comment"))                  {                      Thread.Sleep(200);                      ServiceProvider.DeviceManager.SelectedCameraDevice.SetCameraField(CameraFieldType.Comment'                                                                                        _arguments["comment"]);                      Console.WriteLine("Comment was set");                  }                  if (_arguments.Contains("artist"))                  {                      Thread.Sleep(200);                      ServiceProvider.DeviceManager.SelectedCameraDevice.SetCameraField(CameraFieldType.Artist'                                                                                        _arguments["artist"]);                      Console.WriteLine("Artist was set");                  }                  if (_arguments.Contains("copyright"))                  {                      Thread.Sleep(200);                      ServiceProvider.DeviceManager.SelectedCameraDevice.SetCameraField(CameraFieldType.Copyright'                                                                                        _arguments["copyright"]);                      Console.WriteLine("Copyright was set");                  }                    if (_arguments.Contains("capture"))                  {                      new Thread(Capture).Start();                      Thread.Sleep(200);                      return 0;                  }                    if (_arguments.Contains("format"))                  {                      Console.WriteLine("Card format in progress...");                      ServiceProvider.DeviceManager.SelectedCameraDevice.FormatStorage(null);                      Thread.Sleep(200);                      Console.WriteLine("Card format done");                      return 0;                  }                    if (_arguments.Contains("capturenoaf"))                  {                      try                      {                          ServiceProvider.DeviceManager.SelectedCameraDevice.CapturePhotoNoAf();                      }                      catch (Exception exception)                      {                          Console.WriteLine("Error occurred while capturing photo " + exception);                          ServiceProvider.DeviceManager.SelectedCameraDevice.IsBusy = false;                          return 1;                      }                        return 0;                  }                  if (_arguments.Contains("captureall"))                  {                      foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)                      {                          ICameraDevice device = cameraDevice;                          new Thread(device.CapturePhoto).Start();                      }                  }                  if (_arguments.Contains("captureallnoaf"))                  {                      foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)                      {                          ICameraDevice device = cameraDevice;                          new Thread(device.CapturePhotoNoAf).Start();                      }                  }              }              catch (Exception exception)              {                  Log.Error(exception);                  Console.WriteLine(exception.Message);                  return 1;              }
Magic Number,CameraControlCmd,Program,C:\repos\dukus_digiCamControl\CameraControlCmd\Program.cs,ExecuteArgs,The following statement contains a magic number: try              {                  if (_arguments.Contains("verbose"))                  {                      /*  /verbose is processed in main() to set the flag and has nothing to do here */                  }  #if DEBUG                  if (_arguments.Contains("nop"))                  {                  /* nop - return to caller w/o processing any other parameters                   *    although: help is processed out of line in main() (so /nop in /help /nop is ignored)                   *    Several things such as InitApplication() and all of the camera related functions in there */                      return 0;                   }  #endif                                if (_arguments.Contains("export"))                  {                      if (string.IsNullOrEmpty(_arguments["export"]))                      {                          Console.WriteLine("No export file is specified");                      }                      else                      {                          using (StreamWriter writer = File.CreateText(_arguments["export"]))                          {                              Console.WriteLine("Exporting properties to: " + _arguments["export"]);                              CameraPreset preset = new CameraPreset();                              preset.Get(ServiceProvider.DeviceManager.SelectedCameraDevice);                              foreach (ValuePair valuePair in preset.Values)                              {                                  writer.WriteLine("\"{0}\"'\"{1}\""' valuePair.Name' valuePair.Value);                              }                              writer.Close();                          }                      }                  }                  if (_arguments.Contains("session"))                  {                      PhotoSession session = ServiceProvider.Settings.GetSession(_arguments["session"]);                      if (session != null)                      {                          Console.WriteLine("Using session {0}"' _arguments["session"]);                          ServiceProvider.Settings.DefaultSession = session;                      }                      else                      {                          Console.WriteLine("Session not found {0}! Using default session"' _arguments["session"]);                      }                  }                  if (_arguments.Contains("preset"))                  {                      CameraPreset preset = ServiceProvider.Settings.GetPreset(_arguments["preset"]);                      if (preset != null)                      {                          Console.WriteLine("Using preset {0}"' _arguments["preset"]);                          foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)                          {                              preset.Set(cameraDevice);                          }                      }                      else                      {                          Console.WriteLine("Preset not found {0}!"' _arguments["preset"]);                      }                  }                  if (_arguments.Contains("folder"))                  {                      if (string.IsNullOrEmpty(_arguments["folder"]))                      {                          Console.WriteLine("No folder !!!");                      }                      else                      {                          ServiceProvider.Settings.DefaultSession.Folder = _arguments["folder"];                      }                  }                  if (_arguments.Contains("filenametemplate"))                  {                      if (string.IsNullOrEmpty(_arguments["filenametemplate"]))                      {                          Console.WriteLine("Wrong filename !!!");                      }                      else                      {                          ServiceProvider.Settings.DefaultSession.FileNameTemplate = _arguments["filenametemplate"];                      }                  }                  if (_arguments.Contains("counter"))                  {                      int i = 0;                      string val = _arguments["counter"];                      if (string.IsNullOrEmpty(_arguments["counter"]) || !int.TryParse(val' out i))                      {                          Console.WriteLine("Wrong counter !!!");                      }                      else                      {                          ServiceProvider.Settings.DefaultSession.Counter = i;                      }                  }                  if (_arguments.Contains("filename"))                  {                      _outFilename = _arguments["filename"];                      //if(string.IsNullOrEmpty(_outFilename))                      //{                      //    SaveFileDialog dlg = new SaveFileDialog();                      //    dlg.Filter = "Jpg file (*.jpg)|*.jpg|All files|*.*";                      //    if(dlg.ShowDialog()==DialogResult.OK)                      //    {                      //        _outFilename = dlg.FileName;                      //    }                      //}                  }                  if (_arguments.Contains("iso"))                  {                      if (string.IsNullOrEmpty(_arguments["iso"]))                      {                          Console.WriteLine("No iso number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.IsoNumber.SetValue(_arguments["iso"]);                      }                  }                  if (_arguments.Contains("aperture"))                  {                      if (string.IsNullOrEmpty(_arguments["aperture"]))                      {                          Console.WriteLine("No aperture number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.FNumber.SetValue(_arguments["aperture"]);                      }                  }                  if (_arguments.Contains("shutter"))                  {                      if (string.IsNullOrEmpty(_arguments["shutter"]))                      {                          Console.WriteLine("No shutter number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.ShutterSpeed.SetValue(_arguments["shutter"]);                      }                  }                    if (_arguments.Contains("compression"))                  {                      if (string.IsNullOrEmpty(_arguments["compression"]))                      {                          Console.WriteLine("No compression !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.CompressionSetting.SetValue(                              _arguments["compression"].Replace('_''' '));                      }                  }                    if (_arguments.Contains("ec"))                  {                      if (string.IsNullOrEmpty(_arguments["ec"]))                      {                          Console.WriteLine("No ec number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.ExposureCompensation.SetValue(                              _arguments["ec"]);                      }                  }                    if (_arguments.Contains("comment"))                  {                      Thread.Sleep(200);                      ServiceProvider.DeviceManager.SelectedCameraDevice.SetCameraField(CameraFieldType.Comment'                                                                                        _arguments["comment"]);                      Console.WriteLine("Comment was set");                  }                  if (_arguments.Contains("artist"))                  {                      Thread.Sleep(200);                      ServiceProvider.DeviceManager.SelectedCameraDevice.SetCameraField(CameraFieldType.Artist'                                                                                        _arguments["artist"]);                      Console.WriteLine("Artist was set");                  }                  if (_arguments.Contains("copyright"))                  {                      Thread.Sleep(200);                      ServiceProvider.DeviceManager.SelectedCameraDevice.SetCameraField(CameraFieldType.Copyright'                                                                                        _arguments["copyright"]);                      Console.WriteLine("Copyright was set");                  }                    if (_arguments.Contains("capture"))                  {                      new Thread(Capture).Start();                      Thread.Sleep(200);                      return 0;                  }                    if (_arguments.Contains("format"))                  {                      Console.WriteLine("Card format in progress...");                      ServiceProvider.DeviceManager.SelectedCameraDevice.FormatStorage(null);                      Thread.Sleep(200);                      Console.WriteLine("Card format done");                      return 0;                  }                    if (_arguments.Contains("capturenoaf"))                  {                      try                      {                          ServiceProvider.DeviceManager.SelectedCameraDevice.CapturePhotoNoAf();                      }                      catch (Exception exception)                      {                          Console.WriteLine("Error occurred while capturing photo " + exception);                          ServiceProvider.DeviceManager.SelectedCameraDevice.IsBusy = false;                          return 1;                      }                        return 0;                  }                  if (_arguments.Contains("captureall"))                  {                      foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)                      {                          ICameraDevice device = cameraDevice;                          new Thread(device.CapturePhoto).Start();                      }                  }                  if (_arguments.Contains("captureallnoaf"))                  {                      foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)                      {                          ICameraDevice device = cameraDevice;                          new Thread(device.CapturePhotoNoAf).Start();                      }                  }              }              catch (Exception exception)              {                  Log.Error(exception);                  Console.WriteLine(exception.Message);                  return 1;              }
Magic Number,CameraControlCmd,Program,C:\repos\dukus_digiCamControl\CameraControlCmd\Program.cs,ExecuteArgs,The following statement contains a magic number: try              {                  if (_arguments.Contains("verbose"))                  {                      /*  /verbose is processed in main() to set the flag and has nothing to do here */                  }  #if DEBUG                  if (_arguments.Contains("nop"))                  {                  /* nop - return to caller w/o processing any other parameters                   *    although: help is processed out of line in main() (so /nop in /help /nop is ignored)                   *    Several things such as InitApplication() and all of the camera related functions in there */                      return 0;                   }  #endif                                if (_arguments.Contains("export"))                  {                      if (string.IsNullOrEmpty(_arguments["export"]))                      {                          Console.WriteLine("No export file is specified");                      }                      else                      {                          using (StreamWriter writer = File.CreateText(_arguments["export"]))                          {                              Console.WriteLine("Exporting properties to: " + _arguments["export"]);                              CameraPreset preset = new CameraPreset();                              preset.Get(ServiceProvider.DeviceManager.SelectedCameraDevice);                              foreach (ValuePair valuePair in preset.Values)                              {                                  writer.WriteLine("\"{0}\"'\"{1}\""' valuePair.Name' valuePair.Value);                              }                              writer.Close();                          }                      }                  }                  if (_arguments.Contains("session"))                  {                      PhotoSession session = ServiceProvider.Settings.GetSession(_arguments["session"]);                      if (session != null)                      {                          Console.WriteLine("Using session {0}"' _arguments["session"]);                          ServiceProvider.Settings.DefaultSession = session;                      }                      else                      {                          Console.WriteLine("Session not found {0}! Using default session"' _arguments["session"]);                      }                  }                  if (_arguments.Contains("preset"))                  {                      CameraPreset preset = ServiceProvider.Settings.GetPreset(_arguments["preset"]);                      if (preset != null)                      {                          Console.WriteLine("Using preset {0}"' _arguments["preset"]);                          foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)                          {                              preset.Set(cameraDevice);                          }                      }                      else                      {                          Console.WriteLine("Preset not found {0}!"' _arguments["preset"]);                      }                  }                  if (_arguments.Contains("folder"))                  {                      if (string.IsNullOrEmpty(_arguments["folder"]))                      {                          Console.WriteLine("No folder !!!");                      }                      else                      {                          ServiceProvider.Settings.DefaultSession.Folder = _arguments["folder"];                      }                  }                  if (_arguments.Contains("filenametemplate"))                  {                      if (string.IsNullOrEmpty(_arguments["filenametemplate"]))                      {                          Console.WriteLine("Wrong filename !!!");                      }                      else                      {                          ServiceProvider.Settings.DefaultSession.FileNameTemplate = _arguments["filenametemplate"];                      }                  }                  if (_arguments.Contains("counter"))                  {                      int i = 0;                      string val = _arguments["counter"];                      if (string.IsNullOrEmpty(_arguments["counter"]) || !int.TryParse(val' out i))                      {                          Console.WriteLine("Wrong counter !!!");                      }                      else                      {                          ServiceProvider.Settings.DefaultSession.Counter = i;                      }                  }                  if (_arguments.Contains("filename"))                  {                      _outFilename = _arguments["filename"];                      //if(string.IsNullOrEmpty(_outFilename))                      //{                      //    SaveFileDialog dlg = new SaveFileDialog();                      //    dlg.Filter = "Jpg file (*.jpg)|*.jpg|All files|*.*";                      //    if(dlg.ShowDialog()==DialogResult.OK)                      //    {                      //        _outFilename = dlg.FileName;                      //    }                      //}                  }                  if (_arguments.Contains("iso"))                  {                      if (string.IsNullOrEmpty(_arguments["iso"]))                      {                          Console.WriteLine("No iso number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.IsoNumber.SetValue(_arguments["iso"]);                      }                  }                  if (_arguments.Contains("aperture"))                  {                      if (string.IsNullOrEmpty(_arguments["aperture"]))                      {                          Console.WriteLine("No aperture number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.FNumber.SetValue(_arguments["aperture"]);                      }                  }                  if (_arguments.Contains("shutter"))                  {                      if (string.IsNullOrEmpty(_arguments["shutter"]))                      {                          Console.WriteLine("No shutter number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.ShutterSpeed.SetValue(_arguments["shutter"]);                      }                  }                    if (_arguments.Contains("compression"))                  {                      if (string.IsNullOrEmpty(_arguments["compression"]))                      {                          Console.WriteLine("No compression !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.CompressionSetting.SetValue(                              _arguments["compression"].Replace('_''' '));                      }                  }                    if (_arguments.Contains("ec"))                  {                      if (string.IsNullOrEmpty(_arguments["ec"]))                      {                          Console.WriteLine("No ec number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.ExposureCompensation.SetValue(                              _arguments["ec"]);                      }                  }                    if (_arguments.Contains("comment"))                  {                      Thread.Sleep(200);                      ServiceProvider.DeviceManager.SelectedCameraDevice.SetCameraField(CameraFieldType.Comment'                                                                                        _arguments["comment"]);                      Console.WriteLine("Comment was set");                  }                  if (_arguments.Contains("artist"))                  {                      Thread.Sleep(200);                      ServiceProvider.DeviceManager.SelectedCameraDevice.SetCameraField(CameraFieldType.Artist'                                                                                        _arguments["artist"]);                      Console.WriteLine("Artist was set");                  }                  if (_arguments.Contains("copyright"))                  {                      Thread.Sleep(200);                      ServiceProvider.DeviceManager.SelectedCameraDevice.SetCameraField(CameraFieldType.Copyright'                                                                                        _arguments["copyright"]);                      Console.WriteLine("Copyright was set");                  }                    if (_arguments.Contains("capture"))                  {                      new Thread(Capture).Start();                      Thread.Sleep(200);                      return 0;                  }                    if (_arguments.Contains("format"))                  {                      Console.WriteLine("Card format in progress...");                      ServiceProvider.DeviceManager.SelectedCameraDevice.FormatStorage(null);                      Thread.Sleep(200);                      Console.WriteLine("Card format done");                      return 0;                  }                    if (_arguments.Contains("capturenoaf"))                  {                      try                      {                          ServiceProvider.DeviceManager.SelectedCameraDevice.CapturePhotoNoAf();                      }                      catch (Exception exception)                      {                          Console.WriteLine("Error occurred while capturing photo " + exception);                          ServiceProvider.DeviceManager.SelectedCameraDevice.IsBusy = false;                          return 1;                      }                        return 0;                  }                  if (_arguments.Contains("captureall"))                  {                      foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)                      {                          ICameraDevice device = cameraDevice;                          new Thread(device.CapturePhoto).Start();                      }                  }                  if (_arguments.Contains("captureallnoaf"))                  {                      foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)                      {                          ICameraDevice device = cameraDevice;                          new Thread(device.CapturePhotoNoAf).Start();                      }                  }              }              catch (Exception exception)              {                  Log.Error(exception);                  Console.WriteLine(exception.Message);                  return 1;              }
Magic Number,CameraControlCmd,Program,C:\repos\dukus_digiCamControl\CameraControlCmd\Program.cs,ExecuteArgs,The following statement contains a magic number: try              {                  if (_arguments.Contains("verbose"))                  {                      /*  /verbose is processed in main() to set the flag and has nothing to do here */                  }  #if DEBUG                  if (_arguments.Contains("nop"))                  {                  /* nop - return to caller w/o processing any other parameters                   *    although: help is processed out of line in main() (so /nop in /help /nop is ignored)                   *    Several things such as InitApplication() and all of the camera related functions in there */                      return 0;                   }  #endif                                if (_arguments.Contains("export"))                  {                      if (string.IsNullOrEmpty(_arguments["export"]))                      {                          Console.WriteLine("No export file is specified");                      }                      else                      {                          using (StreamWriter writer = File.CreateText(_arguments["export"]))                          {                              Console.WriteLine("Exporting properties to: " + _arguments["export"]);                              CameraPreset preset = new CameraPreset();                              preset.Get(ServiceProvider.DeviceManager.SelectedCameraDevice);                              foreach (ValuePair valuePair in preset.Values)                              {                                  writer.WriteLine("\"{0}\"'\"{1}\""' valuePair.Name' valuePair.Value);                              }                              writer.Close();                          }                      }                  }                  if (_arguments.Contains("session"))                  {                      PhotoSession session = ServiceProvider.Settings.GetSession(_arguments["session"]);                      if (session != null)                      {                          Console.WriteLine("Using session {0}"' _arguments["session"]);                          ServiceProvider.Settings.DefaultSession = session;                      }                      else                      {                          Console.WriteLine("Session not found {0}! Using default session"' _arguments["session"]);                      }                  }                  if (_arguments.Contains("preset"))                  {                      CameraPreset preset = ServiceProvider.Settings.GetPreset(_arguments["preset"]);                      if (preset != null)                      {                          Console.WriteLine("Using preset {0}"' _arguments["preset"]);                          foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)                          {                              preset.Set(cameraDevice);                          }                      }                      else                      {                          Console.WriteLine("Preset not found {0}!"' _arguments["preset"]);                      }                  }                  if (_arguments.Contains("folder"))                  {                      if (string.IsNullOrEmpty(_arguments["folder"]))                      {                          Console.WriteLine("No folder !!!");                      }                      else                      {                          ServiceProvider.Settings.DefaultSession.Folder = _arguments["folder"];                      }                  }                  if (_arguments.Contains("filenametemplate"))                  {                      if (string.IsNullOrEmpty(_arguments["filenametemplate"]))                      {                          Console.WriteLine("Wrong filename !!!");                      }                      else                      {                          ServiceProvider.Settings.DefaultSession.FileNameTemplate = _arguments["filenametemplate"];                      }                  }                  if (_arguments.Contains("counter"))                  {                      int i = 0;                      string val = _arguments["counter"];                      if (string.IsNullOrEmpty(_arguments["counter"]) || !int.TryParse(val' out i))                      {                          Console.WriteLine("Wrong counter !!!");                      }                      else                      {                          ServiceProvider.Settings.DefaultSession.Counter = i;                      }                  }                  if (_arguments.Contains("filename"))                  {                      _outFilename = _arguments["filename"];                      //if(string.IsNullOrEmpty(_outFilename))                      //{                      //    SaveFileDialog dlg = new SaveFileDialog();                      //    dlg.Filter = "Jpg file (*.jpg)|*.jpg|All files|*.*";                      //    if(dlg.ShowDialog()==DialogResult.OK)                      //    {                      //        _outFilename = dlg.FileName;                      //    }                      //}                  }                  if (_arguments.Contains("iso"))                  {                      if (string.IsNullOrEmpty(_arguments["iso"]))                      {                          Console.WriteLine("No iso number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.IsoNumber.SetValue(_arguments["iso"]);                      }                  }                  if (_arguments.Contains("aperture"))                  {                      if (string.IsNullOrEmpty(_arguments["aperture"]))                      {                          Console.WriteLine("No aperture number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.FNumber.SetValue(_arguments["aperture"]);                      }                  }                  if (_arguments.Contains("shutter"))                  {                      if (string.IsNullOrEmpty(_arguments["shutter"]))                      {                          Console.WriteLine("No shutter number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.ShutterSpeed.SetValue(_arguments["shutter"]);                      }                  }                    if (_arguments.Contains("compression"))                  {                      if (string.IsNullOrEmpty(_arguments["compression"]))                      {                          Console.WriteLine("No compression !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.CompressionSetting.SetValue(                              _arguments["compression"].Replace('_''' '));                      }                  }                    if (_arguments.Contains("ec"))                  {                      if (string.IsNullOrEmpty(_arguments["ec"]))                      {                          Console.WriteLine("No ec number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.ExposureCompensation.SetValue(                              _arguments["ec"]);                      }                  }                    if (_arguments.Contains("comment"))                  {                      Thread.Sleep(200);                      ServiceProvider.DeviceManager.SelectedCameraDevice.SetCameraField(CameraFieldType.Comment'                                                                                        _arguments["comment"]);                      Console.WriteLine("Comment was set");                  }                  if (_arguments.Contains("artist"))                  {                      Thread.Sleep(200);                      ServiceProvider.DeviceManager.SelectedCameraDevice.SetCameraField(CameraFieldType.Artist'                                                                                        _arguments["artist"]);                      Console.WriteLine("Artist was set");                  }                  if (_arguments.Contains("copyright"))                  {                      Thread.Sleep(200);                      ServiceProvider.DeviceManager.SelectedCameraDevice.SetCameraField(CameraFieldType.Copyright'                                                                                        _arguments["copyright"]);                      Console.WriteLine("Copyright was set");                  }                    if (_arguments.Contains("capture"))                  {                      new Thread(Capture).Start();                      Thread.Sleep(200);                      return 0;                  }                    if (_arguments.Contains("format"))                  {                      Console.WriteLine("Card format in progress...");                      ServiceProvider.DeviceManager.SelectedCameraDevice.FormatStorage(null);                      Thread.Sleep(200);                      Console.WriteLine("Card format done");                      return 0;                  }                    if (_arguments.Contains("capturenoaf"))                  {                      try                      {                          ServiceProvider.DeviceManager.SelectedCameraDevice.CapturePhotoNoAf();                      }                      catch (Exception exception)                      {                          Console.WriteLine("Error occurred while capturing photo " + exception);                          ServiceProvider.DeviceManager.SelectedCameraDevice.IsBusy = false;                          return 1;                      }                        return 0;                  }                  if (_arguments.Contains("captureall"))                  {                      foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)                      {                          ICameraDevice device = cameraDevice;                          new Thread(device.CapturePhoto).Start();                      }                  }                  if (_arguments.Contains("captureallnoaf"))                  {                      foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)                      {                          ICameraDevice device = cameraDevice;                          new Thread(device.CapturePhotoNoAf).Start();                      }                  }              }              catch (Exception exception)              {                  Log.Error(exception);                  Console.WriteLine(exception.Message);                  return 1;              }
Magic Number,CameraControlCmd,Program,C:\repos\dukus_digiCamControl\CameraControlCmd\Program.cs,ExecuteArgs,The following statement contains a magic number: try              {                  if (_arguments.Contains("verbose"))                  {                      /*  /verbose is processed in main() to set the flag and has nothing to do here */                  }  #if DEBUG                  if (_arguments.Contains("nop"))                  {                  /* nop - return to caller w/o processing any other parameters                   *    although: help is processed out of line in main() (so /nop in /help /nop is ignored)                   *    Several things such as InitApplication() and all of the camera related functions in there */                      return 0;                   }  #endif                                if (_arguments.Contains("export"))                  {                      if (string.IsNullOrEmpty(_arguments["export"]))                      {                          Console.WriteLine("No export file is specified");                      }                      else                      {                          using (StreamWriter writer = File.CreateText(_arguments["export"]))                          {                              Console.WriteLine("Exporting properties to: " + _arguments["export"]);                              CameraPreset preset = new CameraPreset();                              preset.Get(ServiceProvider.DeviceManager.SelectedCameraDevice);                              foreach (ValuePair valuePair in preset.Values)                              {                                  writer.WriteLine("\"{0}\"'\"{1}\""' valuePair.Name' valuePair.Value);                              }                              writer.Close();                          }                      }                  }                  if (_arguments.Contains("session"))                  {                      PhotoSession session = ServiceProvider.Settings.GetSession(_arguments["session"]);                      if (session != null)                      {                          Console.WriteLine("Using session {0}"' _arguments["session"]);                          ServiceProvider.Settings.DefaultSession = session;                      }                      else                      {                          Console.WriteLine("Session not found {0}! Using default session"' _arguments["session"]);                      }                  }                  if (_arguments.Contains("preset"))                  {                      CameraPreset preset = ServiceProvider.Settings.GetPreset(_arguments["preset"]);                      if (preset != null)                      {                          Console.WriteLine("Using preset {0}"' _arguments["preset"]);                          foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)                          {                              preset.Set(cameraDevice);                          }                      }                      else                      {                          Console.WriteLine("Preset not found {0}!"' _arguments["preset"]);                      }                  }                  if (_arguments.Contains("folder"))                  {                      if (string.IsNullOrEmpty(_arguments["folder"]))                      {                          Console.WriteLine("No folder !!!");                      }                      else                      {                          ServiceProvider.Settings.DefaultSession.Folder = _arguments["folder"];                      }                  }                  if (_arguments.Contains("filenametemplate"))                  {                      if (string.IsNullOrEmpty(_arguments["filenametemplate"]))                      {                          Console.WriteLine("Wrong filename !!!");                      }                      else                      {                          ServiceProvider.Settings.DefaultSession.FileNameTemplate = _arguments["filenametemplate"];                      }                  }                  if (_arguments.Contains("counter"))                  {                      int i = 0;                      string val = _arguments["counter"];                      if (string.IsNullOrEmpty(_arguments["counter"]) || !int.TryParse(val' out i))                      {                          Console.WriteLine("Wrong counter !!!");                      }                      else                      {                          ServiceProvider.Settings.DefaultSession.Counter = i;                      }                  }                  if (_arguments.Contains("filename"))                  {                      _outFilename = _arguments["filename"];                      //if(string.IsNullOrEmpty(_outFilename))                      //{                      //    SaveFileDialog dlg = new SaveFileDialog();                      //    dlg.Filter = "Jpg file (*.jpg)|*.jpg|All files|*.*";                      //    if(dlg.ShowDialog()==DialogResult.OK)                      //    {                      //        _outFilename = dlg.FileName;                      //    }                      //}                  }                  if (_arguments.Contains("iso"))                  {                      if (string.IsNullOrEmpty(_arguments["iso"]))                      {                          Console.WriteLine("No iso number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.IsoNumber.SetValue(_arguments["iso"]);                      }                  }                  if (_arguments.Contains("aperture"))                  {                      if (string.IsNullOrEmpty(_arguments["aperture"]))                      {                          Console.WriteLine("No aperture number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.FNumber.SetValue(_arguments["aperture"]);                      }                  }                  if (_arguments.Contains("shutter"))                  {                      if (string.IsNullOrEmpty(_arguments["shutter"]))                      {                          Console.WriteLine("No shutter number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.ShutterSpeed.SetValue(_arguments["shutter"]);                      }                  }                    if (_arguments.Contains("compression"))                  {                      if (string.IsNullOrEmpty(_arguments["compression"]))                      {                          Console.WriteLine("No compression !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.CompressionSetting.SetValue(                              _arguments["compression"].Replace('_''' '));                      }                  }                    if (_arguments.Contains("ec"))                  {                      if (string.IsNullOrEmpty(_arguments["ec"]))                      {                          Console.WriteLine("No ec number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.ExposureCompensation.SetValue(                              _arguments["ec"]);                      }                  }                    if (_arguments.Contains("comment"))                  {                      Thread.Sleep(200);                      ServiceProvider.DeviceManager.SelectedCameraDevice.SetCameraField(CameraFieldType.Comment'                                                                                        _arguments["comment"]);                      Console.WriteLine("Comment was set");                  }                  if (_arguments.Contains("artist"))                  {                      Thread.Sleep(200);                      ServiceProvider.DeviceManager.SelectedCameraDevice.SetCameraField(CameraFieldType.Artist'                                                                                        _arguments["artist"]);                      Console.WriteLine("Artist was set");                  }                  if (_arguments.Contains("copyright"))                  {                      Thread.Sleep(200);                      ServiceProvider.DeviceManager.SelectedCameraDevice.SetCameraField(CameraFieldType.Copyright'                                                                                        _arguments["copyright"]);                      Console.WriteLine("Copyright was set");                  }                    if (_arguments.Contains("capture"))                  {                      new Thread(Capture).Start();                      Thread.Sleep(200);                      return 0;                  }                    if (_arguments.Contains("format"))                  {                      Console.WriteLine("Card format in progress...");                      ServiceProvider.DeviceManager.SelectedCameraDevice.FormatStorage(null);                      Thread.Sleep(200);                      Console.WriteLine("Card format done");                      return 0;                  }                    if (_arguments.Contains("capturenoaf"))                  {                      try                      {                          ServiceProvider.DeviceManager.SelectedCameraDevice.CapturePhotoNoAf();                      }                      catch (Exception exception)                      {                          Console.WriteLine("Error occurred while capturing photo " + exception);                          ServiceProvider.DeviceManager.SelectedCameraDevice.IsBusy = false;                          return 1;                      }                        return 0;                  }                  if (_arguments.Contains("captureall"))                  {                      foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)                      {                          ICameraDevice device = cameraDevice;                          new Thread(device.CapturePhoto).Start();                      }                  }                  if (_arguments.Contains("captureallnoaf"))                  {                      foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)                      {                          ICameraDevice device = cameraDevice;                          new Thread(device.CapturePhotoNoAf).Start();                      }                  }              }              catch (Exception exception)              {                  Log.Error(exception);                  Console.WriteLine(exception.Message);                  return 1;              }
Magic Number,CameraControlCmd,Program,C:\repos\dukus_digiCamControl\CameraControlCmd\Program.cs,ExecuteArgs,The following statement contains a magic number: try              {                  if (_arguments.Contains("verbose"))                  {                      /*  /verbose is processed in main() to set the flag and has nothing to do here */                  }  #if DEBUG                  if (_arguments.Contains("nop"))                  {                  /* nop - return to caller w/o processing any other parameters                   *    although: help is processed out of line in main() (so /nop in /help /nop is ignored)                   *    Several things such as InitApplication() and all of the camera related functions in there */                      return 0;                   }  #endif                                if (_arguments.Contains("export"))                  {                      if (string.IsNullOrEmpty(_arguments["export"]))                      {                          Console.WriteLine("No export file is specified");                      }                      else                      {                          using (StreamWriter writer = File.CreateText(_arguments["export"]))                          {                              Console.WriteLine("Exporting properties to: " + _arguments["export"]);                              CameraPreset preset = new CameraPreset();                              preset.Get(ServiceProvider.DeviceManager.SelectedCameraDevice);                              foreach (ValuePair valuePair in preset.Values)                              {                                  writer.WriteLine("\"{0}\"'\"{1}\""' valuePair.Name' valuePair.Value);                              }                              writer.Close();                          }                      }                  }                  if (_arguments.Contains("session"))                  {                      PhotoSession session = ServiceProvider.Settings.GetSession(_arguments["session"]);                      if (session != null)                      {                          Console.WriteLine("Using session {0}"' _arguments["session"]);                          ServiceProvider.Settings.DefaultSession = session;                      }                      else                      {                          Console.WriteLine("Session not found {0}! Using default session"' _arguments["session"]);                      }                  }                  if (_arguments.Contains("preset"))                  {                      CameraPreset preset = ServiceProvider.Settings.GetPreset(_arguments["preset"]);                      if (preset != null)                      {                          Console.WriteLine("Using preset {0}"' _arguments["preset"]);                          foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)                          {                              preset.Set(cameraDevice);                          }                      }                      else                      {                          Console.WriteLine("Preset not found {0}!"' _arguments["preset"]);                      }                  }                  if (_arguments.Contains("folder"))                  {                      if (string.IsNullOrEmpty(_arguments["folder"]))                      {                          Console.WriteLine("No folder !!!");                      }                      else                      {                          ServiceProvider.Settings.DefaultSession.Folder = _arguments["folder"];                      }                  }                  if (_arguments.Contains("filenametemplate"))                  {                      if (string.IsNullOrEmpty(_arguments["filenametemplate"]))                      {                          Console.WriteLine("Wrong filename !!!");                      }                      else                      {                          ServiceProvider.Settings.DefaultSession.FileNameTemplate = _arguments["filenametemplate"];                      }                  }                  if (_arguments.Contains("counter"))                  {                      int i = 0;                      string val = _arguments["counter"];                      if (string.IsNullOrEmpty(_arguments["counter"]) || !int.TryParse(val' out i))                      {                          Console.WriteLine("Wrong counter !!!");                      }                      else                      {                          ServiceProvider.Settings.DefaultSession.Counter = i;                      }                  }                  if (_arguments.Contains("filename"))                  {                      _outFilename = _arguments["filename"];                      //if(string.IsNullOrEmpty(_outFilename))                      //{                      //    SaveFileDialog dlg = new SaveFileDialog();                      //    dlg.Filter = "Jpg file (*.jpg)|*.jpg|All files|*.*";                      //    if(dlg.ShowDialog()==DialogResult.OK)                      //    {                      //        _outFilename = dlg.FileName;                      //    }                      //}                  }                  if (_arguments.Contains("iso"))                  {                      if (string.IsNullOrEmpty(_arguments["iso"]))                      {                          Console.WriteLine("No iso number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.IsoNumber.SetValue(_arguments["iso"]);                      }                  }                  if (_arguments.Contains("aperture"))                  {                      if (string.IsNullOrEmpty(_arguments["aperture"]))                      {                          Console.WriteLine("No aperture number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.FNumber.SetValue(_arguments["aperture"]);                      }                  }                  if (_arguments.Contains("shutter"))                  {                      if (string.IsNullOrEmpty(_arguments["shutter"]))                      {                          Console.WriteLine("No shutter number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.ShutterSpeed.SetValue(_arguments["shutter"]);                      }                  }                    if (_arguments.Contains("compression"))                  {                      if (string.IsNullOrEmpty(_arguments["compression"]))                      {                          Console.WriteLine("No compression !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.CompressionSetting.SetValue(                              _arguments["compression"].Replace('_''' '));                      }                  }                    if (_arguments.Contains("ec"))                  {                      if (string.IsNullOrEmpty(_arguments["ec"]))                      {                          Console.WriteLine("No ec number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.ExposureCompensation.SetValue(                              _arguments["ec"]);                      }                  }                    if (_arguments.Contains("comment"))                  {                      Thread.Sleep(200);                      ServiceProvider.DeviceManager.SelectedCameraDevice.SetCameraField(CameraFieldType.Comment'                                                                                        _arguments["comment"]);                      Console.WriteLine("Comment was set");                  }                  if (_arguments.Contains("artist"))                  {                      Thread.Sleep(200);                      ServiceProvider.DeviceManager.SelectedCameraDevice.SetCameraField(CameraFieldType.Artist'                                                                                        _arguments["artist"]);                      Console.WriteLine("Artist was set");                  }                  if (_arguments.Contains("copyright"))                  {                      Thread.Sleep(200);                      ServiceProvider.DeviceManager.SelectedCameraDevice.SetCameraField(CameraFieldType.Copyright'                                                                                        _arguments["copyright"]);                      Console.WriteLine("Copyright was set");                  }                    if (_arguments.Contains("capture"))                  {                      new Thread(Capture).Start();                      Thread.Sleep(200);                      return 0;                  }                    if (_arguments.Contains("format"))                  {                      Console.WriteLine("Card format in progress...");                      ServiceProvider.DeviceManager.SelectedCameraDevice.FormatStorage(null);                      Thread.Sleep(200);                      Console.WriteLine("Card format done");                      return 0;                  }                    if (_arguments.Contains("capturenoaf"))                  {                      try                      {                          ServiceProvider.DeviceManager.SelectedCameraDevice.CapturePhotoNoAf();                      }                      catch (Exception exception)                      {                          Console.WriteLine("Error occurred while capturing photo " + exception);                          ServiceProvider.DeviceManager.SelectedCameraDevice.IsBusy = false;                          return 1;                      }                        return 0;                  }                  if (_arguments.Contains("captureall"))                  {                      foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)                      {                          ICameraDevice device = cameraDevice;                          new Thread(device.CapturePhoto).Start();                      }                  }                  if (_arguments.Contains("captureallnoaf"))                  {                      foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)                      {                          ICameraDevice device = cameraDevice;                          new Thread(device.CapturePhotoNoAf).Start();                      }                  }              }              catch (Exception exception)              {                  Log.Error(exception);                  Console.WriteLine(exception.Message);                  return 1;              }
Magic Number,CameraControlCmd,Program,C:\repos\dukus_digiCamControl\CameraControlCmd\Program.cs,ExecuteArgs,The following statement contains a magic number: try              {                  if (_arguments.Contains("verbose"))                  {                      /*  /verbose is processed in main() to set the flag and has nothing to do here */                  }  #if DEBUG                  if (_arguments.Contains("nop"))                  {                  /* nop - return to caller w/o processing any other parameters                   *    although: help is processed out of line in main() (so /nop in /help /nop is ignored)                   *    Several things such as InitApplication() and all of the camera related functions in there */                      return 0;                   }  #endif                                if (_arguments.Contains("export"))                  {                      if (string.IsNullOrEmpty(_arguments["export"]))                      {                          Console.WriteLine("No export file is specified");                      }                      else                      {                          using (StreamWriter writer = File.CreateText(_arguments["export"]))                          {                              Console.WriteLine("Exporting properties to: " + _arguments["export"]);                              CameraPreset preset = new CameraPreset();                              preset.Get(ServiceProvider.DeviceManager.SelectedCameraDevice);                              foreach (ValuePair valuePair in preset.Values)                              {                                  writer.WriteLine("\"{0}\"'\"{1}\""' valuePair.Name' valuePair.Value);                              }                              writer.Close();                          }                      }                  }                  if (_arguments.Contains("session"))                  {                      PhotoSession session = ServiceProvider.Settings.GetSession(_arguments["session"]);                      if (session != null)                      {                          Console.WriteLine("Using session {0}"' _arguments["session"]);                          ServiceProvider.Settings.DefaultSession = session;                      }                      else                      {                          Console.WriteLine("Session not found {0}! Using default session"' _arguments["session"]);                      }                  }                  if (_arguments.Contains("preset"))                  {                      CameraPreset preset = ServiceProvider.Settings.GetPreset(_arguments["preset"]);                      if (preset != null)                      {                          Console.WriteLine("Using preset {0}"' _arguments["preset"]);                          foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)                          {                              preset.Set(cameraDevice);                          }                      }                      else                      {                          Console.WriteLine("Preset not found {0}!"' _arguments["preset"]);                      }                  }                  if (_arguments.Contains("folder"))                  {                      if (string.IsNullOrEmpty(_arguments["folder"]))                      {                          Console.WriteLine("No folder !!!");                      }                      else                      {                          ServiceProvider.Settings.DefaultSession.Folder = _arguments["folder"];                      }                  }                  if (_arguments.Contains("filenametemplate"))                  {                      if (string.IsNullOrEmpty(_arguments["filenametemplate"]))                      {                          Console.WriteLine("Wrong filename !!!");                      }                      else                      {                          ServiceProvider.Settings.DefaultSession.FileNameTemplate = _arguments["filenametemplate"];                      }                  }                  if (_arguments.Contains("counter"))                  {                      int i = 0;                      string val = _arguments["counter"];                      if (string.IsNullOrEmpty(_arguments["counter"]) || !int.TryParse(val' out i))                      {                          Console.WriteLine("Wrong counter !!!");                      }                      else                      {                          ServiceProvider.Settings.DefaultSession.Counter = i;                      }                  }                  if (_arguments.Contains("filename"))                  {                      _outFilename = _arguments["filename"];                      //if(string.IsNullOrEmpty(_outFilename))                      //{                      //    SaveFileDialog dlg = new SaveFileDialog();                      //    dlg.Filter = "Jpg file (*.jpg)|*.jpg|All files|*.*";                      //    if(dlg.ShowDialog()==DialogResult.OK)                      //    {                      //        _outFilename = dlg.FileName;                      //    }                      //}                  }                  if (_arguments.Contains("iso"))                  {                      if (string.IsNullOrEmpty(_arguments["iso"]))                      {                          Console.WriteLine("No iso number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.IsoNumber.SetValue(_arguments["iso"]);                      }                  }                  if (_arguments.Contains("aperture"))                  {                      if (string.IsNullOrEmpty(_arguments["aperture"]))                      {                          Console.WriteLine("No aperture number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.FNumber.SetValue(_arguments["aperture"]);                      }                  }                  if (_arguments.Contains("shutter"))                  {                      if (string.IsNullOrEmpty(_arguments["shutter"]))                      {                          Console.WriteLine("No shutter number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.ShutterSpeed.SetValue(_arguments["shutter"]);                      }                  }                    if (_arguments.Contains("compression"))                  {                      if (string.IsNullOrEmpty(_arguments["compression"]))                      {                          Console.WriteLine("No compression !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.CompressionSetting.SetValue(                              _arguments["compression"].Replace('_''' '));                      }                  }                    if (_arguments.Contains("ec"))                  {                      if (string.IsNullOrEmpty(_arguments["ec"]))                      {                          Console.WriteLine("No ec number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.ExposureCompensation.SetValue(                              _arguments["ec"]);                      }                  }                    if (_arguments.Contains("comment"))                  {                      Thread.Sleep(200);                      ServiceProvider.DeviceManager.SelectedCameraDevice.SetCameraField(CameraFieldType.Comment'                                                                                        _arguments["comment"]);                      Console.WriteLine("Comment was set");                  }                  if (_arguments.Contains("artist"))                  {                      Thread.Sleep(200);                      ServiceProvider.DeviceManager.SelectedCameraDevice.SetCameraField(CameraFieldType.Artist'                                                                                        _arguments["artist"]);                      Console.WriteLine("Artist was set");                  }                  if (_arguments.Contains("copyright"))                  {                      Thread.Sleep(200);                      ServiceProvider.DeviceManager.SelectedCameraDevice.SetCameraField(CameraFieldType.Copyright'                                                                                        _arguments["copyright"]);                      Console.WriteLine("Copyright was set");                  }                    if (_arguments.Contains("capture"))                  {                      new Thread(Capture).Start();                      Thread.Sleep(200);                      return 0;                  }                    if (_arguments.Contains("format"))                  {                      Console.WriteLine("Card format in progress...");                      ServiceProvider.DeviceManager.SelectedCameraDevice.FormatStorage(null);                      Thread.Sleep(200);                      Console.WriteLine("Card format done");                      return 0;                  }                    if (_arguments.Contains("capturenoaf"))                  {                      try                      {                          ServiceProvider.DeviceManager.SelectedCameraDevice.CapturePhotoNoAf();                      }                      catch (Exception exception)                      {                          Console.WriteLine("Error occurred while capturing photo " + exception);                          ServiceProvider.DeviceManager.SelectedCameraDevice.IsBusy = false;                          return 1;                      }                        return 0;                  }                  if (_arguments.Contains("captureall"))                  {                      foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)                      {                          ICameraDevice device = cameraDevice;                          new Thread(device.CapturePhoto).Start();                      }                  }                  if (_arguments.Contains("captureallnoaf"))                  {                      foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)                      {                          ICameraDevice device = cameraDevice;                          new Thread(device.CapturePhotoNoAf).Start();                      }                  }              }              catch (Exception exception)              {                  Log.Error(exception);                  Console.WriteLine(exception.Message);                  return 1;              }
Magic Number,CameraControlCmd,Program,C:\repos\dukus_digiCamControl\CameraControlCmd\Program.cs,ExecuteArgs,The following statement contains a magic number: try              {                  if (_arguments.Contains("verbose"))                  {                      /*  /verbose is processed in main() to set the flag and has nothing to do here */                  }  #if DEBUG                  if (_arguments.Contains("nop"))                  {                  /* nop - return to caller w/o processing any other parameters                   *    although: help is processed out of line in main() (so /nop in /help /nop is ignored)                   *    Several things such as InitApplication() and all of the camera related functions in there */                      return 0;                   }  #endif                                if (_arguments.Contains("export"))                  {                      if (string.IsNullOrEmpty(_arguments["export"]))                      {                          Console.WriteLine("No export file is specified");                      }                      else                      {                          using (StreamWriter writer = File.CreateText(_arguments["export"]))                          {                              Console.WriteLine("Exporting properties to: " + _arguments["export"]);                              CameraPreset preset = new CameraPreset();                              preset.Get(ServiceProvider.DeviceManager.SelectedCameraDevice);                              foreach (ValuePair valuePair in preset.Values)                              {                                  writer.WriteLine("\"{0}\"'\"{1}\""' valuePair.Name' valuePair.Value);                              }                              writer.Close();                          }                      }                  }                  if (_arguments.Contains("session"))                  {                      PhotoSession session = ServiceProvider.Settings.GetSession(_arguments["session"]);                      if (session != null)                      {                          Console.WriteLine("Using session {0}"' _arguments["session"]);                          ServiceProvider.Settings.DefaultSession = session;                      }                      else                      {                          Console.WriteLine("Session not found {0}! Using default session"' _arguments["session"]);                      }                  }                  if (_arguments.Contains("preset"))                  {                      CameraPreset preset = ServiceProvider.Settings.GetPreset(_arguments["preset"]);                      if (preset != null)                      {                          Console.WriteLine("Using preset {0}"' _arguments["preset"]);                          foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)                          {                              preset.Set(cameraDevice);                          }                      }                      else                      {                          Console.WriteLine("Preset not found {0}!"' _arguments["preset"]);                      }                  }                  if (_arguments.Contains("folder"))                  {                      if (string.IsNullOrEmpty(_arguments["folder"]))                      {                          Console.WriteLine("No folder !!!");                      }                      else                      {                          ServiceProvider.Settings.DefaultSession.Folder = _arguments["folder"];                      }                  }                  if (_arguments.Contains("filenametemplate"))                  {                      if (string.IsNullOrEmpty(_arguments["filenametemplate"]))                      {                          Console.WriteLine("Wrong filename !!!");                      }                      else                      {                          ServiceProvider.Settings.DefaultSession.FileNameTemplate = _arguments["filenametemplate"];                      }                  }                  if (_arguments.Contains("counter"))                  {                      int i = 0;                      string val = _arguments["counter"];                      if (string.IsNullOrEmpty(_arguments["counter"]) || !int.TryParse(val' out i))                      {                          Console.WriteLine("Wrong counter !!!");                      }                      else                      {                          ServiceProvider.Settings.DefaultSession.Counter = i;                      }                  }                  if (_arguments.Contains("filename"))                  {                      _outFilename = _arguments["filename"];                      //if(string.IsNullOrEmpty(_outFilename))                      //{                      //    SaveFileDialog dlg = new SaveFileDialog();                      //    dlg.Filter = "Jpg file (*.jpg)|*.jpg|All files|*.*";                      //    if(dlg.ShowDialog()==DialogResult.OK)                      //    {                      //        _outFilename = dlg.FileName;                      //    }                      //}                  }                  if (_arguments.Contains("iso"))                  {                      if (string.IsNullOrEmpty(_arguments["iso"]))                      {                          Console.WriteLine("No iso number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.IsoNumber.SetValue(_arguments["iso"]);                      }                  }                  if (_arguments.Contains("aperture"))                  {                      if (string.IsNullOrEmpty(_arguments["aperture"]))                      {                          Console.WriteLine("No aperture number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.FNumber.SetValue(_arguments["aperture"]);                      }                  }                  if (_arguments.Contains("shutter"))                  {                      if (string.IsNullOrEmpty(_arguments["shutter"]))                      {                          Console.WriteLine("No shutter number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.ShutterSpeed.SetValue(_arguments["shutter"]);                      }                  }                    if (_arguments.Contains("compression"))                  {                      if (string.IsNullOrEmpty(_arguments["compression"]))                      {                          Console.WriteLine("No compression !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.CompressionSetting.SetValue(                              _arguments["compression"].Replace('_''' '));                      }                  }                    if (_arguments.Contains("ec"))                  {                      if (string.IsNullOrEmpty(_arguments["ec"]))                      {                          Console.WriteLine("No ec number !!!");                      }                      else                      {                          Thread.Sleep(200);                          ServiceProvider.DeviceManager.SelectedCameraDevice.ExposureCompensation.SetValue(                              _arguments["ec"]);                      }                  }                    if (_arguments.Contains("comment"))                  {                      Thread.Sleep(200);                      ServiceProvider.DeviceManager.SelectedCameraDevice.SetCameraField(CameraFieldType.Comment'                                                                                        _arguments["comment"]);                      Console.WriteLine("Comment was set");                  }                  if (_arguments.Contains("artist"))                  {                      Thread.Sleep(200);                      ServiceProvider.DeviceManager.SelectedCameraDevice.SetCameraField(CameraFieldType.Artist'                                                                                        _arguments["artist"]);                      Console.WriteLine("Artist was set");                  }                  if (_arguments.Contains("copyright"))                  {                      Thread.Sleep(200);                      ServiceProvider.DeviceManager.SelectedCameraDevice.SetCameraField(CameraFieldType.Copyright'                                                                                        _arguments["copyright"]);                      Console.WriteLine("Copyright was set");                  }                    if (_arguments.Contains("capture"))                  {                      new Thread(Capture).Start();                      Thread.Sleep(200);                      return 0;                  }                    if (_arguments.Contains("format"))                  {                      Console.WriteLine("Card format in progress...");                      ServiceProvider.DeviceManager.SelectedCameraDevice.FormatStorage(null);                      Thread.Sleep(200);                      Console.WriteLine("Card format done");                      return 0;                  }                    if (_arguments.Contains("capturenoaf"))                  {                      try                      {                          ServiceProvider.DeviceManager.SelectedCameraDevice.CapturePhotoNoAf();                      }                      catch (Exception exception)                      {                          Console.WriteLine("Error occurred while capturing photo " + exception);                          ServiceProvider.DeviceManager.SelectedCameraDevice.IsBusy = false;                          return 1;                      }                        return 0;                  }                  if (_arguments.Contains("captureall"))                  {                      foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)                      {                          ICameraDevice device = cameraDevice;                          new Thread(device.CapturePhoto).Start();                      }                  }                  if (_arguments.Contains("captureallnoaf"))                  {                      foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)                      {                          ICameraDevice device = cameraDevice;                          new Thread(device.CapturePhotoNoAf).Start();                      }                  }              }              catch (Exception exception)              {                  Log.Error(exception);                  Console.WriteLine(exception.Message);                  return 1;              }
