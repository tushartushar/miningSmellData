Implementation smell,Namespace,Class,File,Method,Description
Long Method,CameraControl.Layouts,LayoutBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,TriggerEvent,The method has 170 lines of code.
Long Method,CameraControl,App,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\App.xaml.cs,WindowsManager_Event,The method has 117 lines of code.
Long Method,CameraControl,MainWindow,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,PhotoCaptured,The method has 239 lines of code.
Long Method,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The method has 134 lines of code.
Long Method,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The method has 112 lines of code.
Long Method,CameraControl.ViewModel,TimelapseViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\TimelapseViewModel.cs,StartL,The method has 122 lines of code.
Long Method,CameraControl.windows,DownloadPhotosWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\DownloadPhotosWnd.xaml.cs,TransferFiles,The method has 137 lines of code.
Long Method,CameraControl.windows,LiveViewWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\LiveViewWnd.xaml.cs,ExecuteCommand,The method has 120 lines of code.
Long Method,CameraControl.windows,ScriptWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\ScriptWnd.xaml.cs,textEditor_TextArea_TextEntered,The method has 188 lines of code.
Complex Method,CameraControl.Controls,TimeControl,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Controls\TimeControl.xaml.cs,Down,Cyclomatic complexity of the method is 9
Complex Method,CameraControl.Layouts,LayoutBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,DeleteItem,Cyclomatic complexity of the method is 10
Complex Method,CameraControl.Layouts,LayoutBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,Settings_PropertyChanged,Cyclomatic complexity of the method is 10
Complex Method,CameraControl.Layouts,LayoutBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,TriggerEvent,Cyclomatic complexity of the method is 37
Complex Method,CameraControl.Panels,DirectorySelectorControl,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Panels\DirectorySelectorControl.xaml.cs,ExpandAndSelectItem,Cyclomatic complexity of the method is 12
Complex Method,CameraControl.Panels,ImagePropertiesControl,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Panels\ImagePropertiesControl.xaml.cs,btn_set_Click,Cyclomatic complexity of the method is 8
Complex Method,CameraControl,App,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\App.xaml.cs,WindowsManager_Event,Cyclomatic complexity of the method is 26
Complex Method,CameraControl,App,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\App.xaml.cs,ShowUnhandeledException,Cyclomatic complexity of the method is 8
Complex Method,CameraControl,MainWindow,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,StartupThread,Cyclomatic complexity of the method is 11
Complex Method,CameraControl,MainWindow,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,PhotoCaptured,Cyclomatic complexity of the method is 35
Complex Method,CameraControl.ViewModel,BarcodeViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,Cyclomatic complexity of the method is 12
Complex Method,CameraControl.ViewModel,BracketingViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BracketingViewModel.cs,SetMessage,Cyclomatic complexity of the method is 9
Complex Method,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManagerEvent,Cyclomatic complexity of the method is 8
Complex Method,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManager_Event1,Cyclomatic complexity of the method is 8
Complex Method,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManager_Event,Cyclomatic complexity of the method is 26
Complex Method,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,GetLiveImageData,Cyclomatic complexity of the method is 10
Complex Method,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,Cyclomatic complexity of the method is 19
Complex Method,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,Cyclomatic complexity of the method is 14
Complex Method,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,SetFocusThread,Cyclomatic complexity of the method is 8
Complex Method,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,Capture,Cyclomatic complexity of the method is 13
Complex Method,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,_focusStackingTimer_Elapsed,Cyclomatic complexity of the method is 9
Complex Method,CameraControl.ViewModel,MultipleLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\MultipleLiveViewViewModel.cs,WindowsManager_Event,Cyclomatic complexity of the method is 10
Complex Method,CameraControl.ViewModel,TimelapseViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\TimelapseViewModel.cs,StartL,Cyclomatic complexity of the method is 17
Complex Method,CameraControl.windows,BulbWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,ExecuteCommand,Cyclomatic complexity of the method is 21
Complex Method,CameraControl.windows,DownloadPhotosWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\DownloadPhotosWnd.xaml.cs,TransferFiles,Cyclomatic complexity of the method is 14
Complex Method,CameraControl.windows,LiveViewManager,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\LiveViewManager.cs,ExecuteCommand,Cyclomatic complexity of the method is 15
Complex Method,CameraControl.windows,PropertyWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\PropertyWnd.xaml.cs,btn_set_Click,Cyclomatic complexity of the method is 8
Complex Method,CameraControl.windows,ScriptWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\ScriptWnd.xaml.cs,textEditor_TextArea_TextEntered,Cyclomatic complexity of the method is 29
Long Parameter List,CameraControl.Controls,AnimationHelper,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Controls\AnimationHelper.cs,StartAnimation,The method has 5 parameters. Parameters: animatableElement' dependencyProperty' toValue' animationDurationSeconds' completedEvent
Long Parameter List,CameraControl.XSplit,TimedBroadcasterPlugin,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\XSplit\TimedBroadcasterPlugin.cs,CreateInstance,The method has 5 parameters. Parameters: connectionUID' visual' width' height' timeInterval
Long Identifier,CameraControl.Controls,CameraItem,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Controls\CameraItem.xaml.cs,CameraDeviceCallBack,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,CameraControl.Panels,DirectorySelectorControl,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Panels\DirectorySelectorControl.xaml.cs,PropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Statement,CameraControl.Layouts,LayoutBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,worker_DoWork,The length of the statement  "                    ServiceProvider.Settings.SelectedBitmap.DisplayImage = (WriteableBitmap)BitmapLoader.Instance.LoadImage(item.FileName' BitmapLoader.LargeThumbSize' " is 147.
Long Statement,CameraControl.Layouts,LayoutBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,ZoomToFocus,The length of the statement  "                ZoomAndPanControl.SnapTo(new Point(ServiceProvider.Settings.SelectedBitmap.FileItem.FileInfo.FocusPoints[0].X + ServiceProvider.Settings.SelectedBitmap.FileItem.FileInfo.FocusPoints[0].Width / 2' " is 195.
Long Statement,CameraControl.Layouts,LayoutBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,ZoomToFocus,The length of the statement  "                    ServiceProvider.Settings.SelectedBitmap.FileItem.FileInfo.FocusPoints[0].Y + ServiceProvider.Settings.SelectedBitmap.FileItem.FileInfo.FocusPoints[0].Height / 2)); " is 163.
Long Statement,CameraControl.Panels,DirectorySelectorControl,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Panels\DirectorySelectorControl.xaml.cs,PropertyChangedCallback,The length of the statement  "                ExpandAndSelectItem(((DirectorySelectorControl)dependencyObject).trvStructure' (string)dependencyPropertyChangedEventArgs.NewValue); " is 132.
Long Statement,CameraControl,App,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\App.xaml.cs,cameraDevice_CameraInitDone,The length of the statement  "            if ((cameraDevice is CanonSDKBase && ServiceProvider.Settings.LoadCanonTransferMode) || !(cameraDevice is CanonSDKBase)) " is 120.
Long Statement,CameraControl,App,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\App.xaml.cs,ShowUnhandeledException,The length of the statement  "                MessageBox.Show("Application crash !! Damaged installation!\nPlease unintall aplication from control panel and reinstall it!"); " is 127.
Long Statement,CameraControl,MainWindow,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,StartupThread,The length of the statement  "                if ((cameraDevice is CanonSDKBase && ServiceProvider.Settings.LoadCanonTransferMode) || !(cameraDevice is CanonSDKBase)) " is 120.
Long Statement,CameraControl,MainWindow,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,PhotoCaptured,The length of the statement  "                        ServiceProvider.Database.Add(new DbFile(_selectedItem' eventArgs.CameraDevice.SerialNumber' eventArgs.CameraDevice.DisplayName' session.Name)); " is 143.
Long Statement,CameraControl,MainWindow,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,SortCameras,The length of the statement  "                        ServiceProvider.DeviceManager.ConnectedDevices.OrderByDescending(x => x.LoadProperties().SortOrder).ThenByDescending(x => x.DisplayName)); " is 138.
Long Statement,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,DrawGrid,The length of the statement  "            tempbitmap.DrawLine(0' (int)CentralPoint.Y - (StarWindowSize / 2)' bitmap.PixelWidth' (int)CentralPoint.Y - (StarWindowSize / 2)' Colors.White); " is 144.
Long Statement,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,DrawGrid,The length of the statement  "            tempbitmap.DrawLine(0' (int)CentralPoint.Y + (StarWindowSize / 2)' bitmap.PixelWidth' (int)CentralPoint.Y + (StarWindowSize / 2)' Colors.White); " is 144.
Long Statement,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,DrawGrid,The length of the statement  "            tempbitmap.DrawLine((int)CentralPoint.X - (StarWindowSize / 2)' 0' (int)CentralPoint.X - (StarWindowSize / 2)' bitmap.PixelHeight' Colors.White); " is 145.
Long Statement,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,DrawGrid,The length of the statement  "            tempbitmap.DrawLine((int)CentralPoint.X + (StarWindowSize / 2)' 0' (int)CentralPoint.X + (StarWindowSize / 2)' bitmap.PixelHeight' Colors.White); " is 145.
Long Statement,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,SetFocus,The length of the statement  "                ServiceProvider.WindowsManager.ExecuteCommand(WindowsCmdConsts.LiveViewWnd_Message' TranslationStrings.LabelErrorUnableFocus); " is 126.
Long Statement,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,Capture,The length of the statement  "                ServiceProvider.WindowsManager.ExecuteCommand(WindowsCmdConsts.LiveViewWnd_Message' TranslationStrings.MsgBulbModeNotSupported); " is 128.
Long Statement,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,StartSimpleFocusStacking,The length of the statement  "                ServiceProvider.WindowsManager.ExecuteCommand(WindowsCmdConsts.LiveViewWnd_Message' TranslationStrings.LabelErrorSimpleStackingFocusLock); " is 138.
Long Statement,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,StartFocusStacking,The length of the statement  "                ServiceProvider.WindowsManager.ExecuteCommand(WindowsCmdConsts.LiveViewWnd_Message' TranslationStrings.LabelLockNearFar); " is 121.
Long Statement,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,_focusStackingTimer_Elapsed,The length of the statement  "                                SetFocus(dir * (SimpleManualFocus ? ServiceProvider.Settings.SmallFocusStepCanon : ServiceProvider.Settings.SmalFocusStep)); " is 124.
Long Statement,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,_focusStackingTimer_Elapsed,The length of the statement  "                                SetFocus(dir * (SimpleManualFocus ? ServiceProvider.Settings.MediumFocusStepCanon : ServiceProvider.Settings.MediumFocusStep)); " is 127.
Long Statement,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,_focusStackingTimer_Elapsed,The length of the statement  "                                SetFocus(dir * (SimpleManualFocus ? ServiceProvider.Settings.LargeFocusStepCanon : ServiceProvider.Settings.LargeFocusStep)); " is 125.
Long Statement,CameraControl.ViewModel,MainMenuViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\MainMenuViewModel.cs,ExportSession,The length of the statement  "                    ServiceProvider.WindowsManager.ExecuteCommand(WindowsCmdConsts.MainWnd_Message' "Unable to export session " + ex.Message); " is 122.
Long Statement,CameraControl.ViewModel,MainMenuViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\MainMenuViewModel.cs,ImportSession,The length of the statement  "                    ServiceProvider.WindowsManager.ExecuteCommand(WindowsCmdConsts.MainWnd_Message' "Unable to import session " + ex.Message); " is 122.
Long Statement,CameraControl.ViewModel,MainMenuViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\MainMenuViewModel.cs,DelSession,The length of the statement  "                    ServiceProvider.WindowsManager.ExecuteCommand(WindowsCmdConsts.MainWnd_Message' TranslationStrings.LabelUnabletoDeleteSession + exception.Message); " is 147.
Long Statement,CameraControl.ViewModel,MainMenuViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\MainMenuViewModel.cs,DelSession,The length of the statement  "                ServiceProvider.WindowsManager.ExecuteCommand(WindowsCmdConsts.MainWnd_Message' TranslationStrings.MsgLastSessionCantBeDeleted); " is 128.
Long Statement,CameraControl.ViewModel,MainMenuViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\MainMenuViewModel.cs,Refresh,The length of the statement  "                ServiceProvider.WindowsManager.ExecuteCommand(WindowsCmdConsts.MainWnd_Message' "Unable to connect \n" + exception.Message); " is 124.
Long Statement,CameraControl.ViewModel,PrintViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\PrintViewModel.cs,SavePrintTicket,The length of the statement  "            using (FileStream stream = new FileStream(Path.Combine(Settings.SessionFolder' ServiceProvider.Settings.DefaultSession.Name + "_printer.xml")' FileMode.Create)) " is 160.
Long Statement,CameraControl.ViewModel,PrintViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\PrintViewModel.cs,LoadPrintTicket,The length of the statement  "            string configFile = Path.Combine(Settings.SessionFolder' ServiceProvider.Settings.DefaultSession.Name + "_printer.xml"); " is 120.
Long Statement,CameraControl.windows,AstroLiveViewWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\AstroLiveViewWnd.xaml.cs,live_view_image_MouseDown,The length of the statement  "            if (e.ButtonState == MouseButtonState.Pressed && e.ChangedButton == MouseButton.Left &&((AstroLiveViewViewModel)DataContext).Bitmap!=null && ((AstroLiveViewViewModel)DataContext).ZoomFactor==1) " is 193.
Long Statement,CameraControl.windows,AstroLiveViewWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\AstroLiveViewWnd.xaml.cs,img_preview_MouseDown,The length of the statement  "            if (e.ButtonState == MouseButtonState.Pressed && e.ChangedButton == MouseButton.Left && ((AstroLiveViewViewModel)DataContext).Bitmap != null) " is 141.
Long Statement,CameraControl.windows,BulbWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,_captureTimer_Elapsed,The length of the statement  "            //            Message = string.Format("Capture time {0}/{1} sec. Photo done {2}/{3}"' _captureSecs' CaptureTime' _photoCount' " is 125.
Long Statement,CameraControl.windows,FullScreenWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\FullScreenWnd.xaml.cs,ExecuteCommand,The length of the statement  "                        ServiceProvider.Settings.SelectedBitmap != null && (ServiceProvider.Settings.SelectedBitmap.FileItem != null && ServiceProvider.Settings.SelectedBitmap.FileItem.Loading)) " is 170.
Long Statement,CameraControl.windows,FullScreenWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\FullScreenWnd.xaml.cs,HideWindow,The length of the statement  "                LoginDialogData result = await this.ShowLoginAsync("Closing fullscreen ..."' "Enter your password"' new LoginDialogSettings { ColorScheme = this.MetroDialogOptions.ColorScheme' ShouldHideUsername = true' AffirmativeButtonText = "Close" }); " is 239.
Long Statement,CameraControl.XSplit,BroadcasterPlugin,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\XSplit\BroadcasterPlugin.cs,DownloadVisual,The length of the statement  "                            var ms = new MemoryStream(ServiceProvider.DeviceManager.LiveViewImage[ServiceProvider.DeviceManager.SelectedCameraDevice]); " is 123.
Complex Conditional,CameraControl,App,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\App.xaml.cs,WindowsManager_Event,The conditional expression  "cmd != WindowsCmdConsts.Next_Image && cmd != WindowsCmdConsts.Prev_Image &&                      cmd != WindowsCmdConsts.Select_Image && !cmd.StartsWith("Zoom")"  is complex.
Complex Conditional,CameraControl.ViewModel,BracketingViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BracketingViewModel.cs,GetValues,The conditional expression  "il < 0 || ih < 0 || ih <= il || count < 2"  is complex.
Complex Conditional,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessMotionDetection,The conditional expression  "movement > ((float) MotionThreshold/100) && MotionAction > 0 && !Recording &&                      (DateTime.Now - _photoCapturedTime).TotalSeconds > WaitForMotionSec &&                      _totalframes > 10"  is complex.
Complex Conditional,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,FocusOnMovment,The conditional expression  "processing != null && processing.ObjectRectangles != null &&                      processing.ObjectRectangles.Length > 0 &&                      LiveViewData.ImageData != null"  is complex.
Complex Conditional,CameraControl.windows,AstroLiveViewWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\AstroLiveViewWnd.xaml.cs,live_view_image_MouseDown,The conditional expression  "e.ButtonState == MouseButtonState.Pressed && e.ChangedButton == MouseButton.Left &&((AstroLiveViewViewModel)DataContext).Bitmap!=null && ((AstroLiveViewViewModel)DataContext).ZoomFactor==1"  is complex.
Empty Catch Block,CameraControl.Controls,CameraToImageSourceConverter,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Controls\CameraToImageSourceConverter .cs,Convert,The method has an empty catch block.
Empty Catch Block,CameraControl.Controls,TemplateNameToIconConverter,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Controls\TemplateNameToIconConverter.cs,Convert,The method has an empty catch block.
Empty Catch Block,CameraControl.Layouts,LayoutBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,GeneratePreview,The method has an empty catch block.
Empty Catch Block,CameraControl.Layouts,LayoutBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,Trigger_Event,The method has an empty catch block.
Empty Catch Block,CameraControl.Panels,DirectorySelectorControl,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Panels\DirectorySelectorControl.xaml.cs,TreeViewItem_Expanded,The method has an empty catch block.
Empty Catch Block,CameraControl,MainWindow,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,DeletePreset,The method has an empty catch block.
Empty Catch Block,CameraControl,MainWindow,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,StartupThread,The method has an empty catch block.
Empty Catch Block,CameraControl,MainWindow,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,PhotoCaptured,The method has an empty catch block.
Empty Catch Block,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManagerEvent,The method has an empty catch block.
Empty Catch Block,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,GetLiveImageStream,The method has an empty catch block.
Empty Catch Block,CameraControl.ViewModel,MJpegServer,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\MJpegServer.cs,Start,The method has an empty catch block.
Empty Catch Block,CameraControl.ViewModel,MJpegServer,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\MJpegServer.cs,Stop,The method has an empty catch block.
Empty Catch Block,CameraControl.ViewModel,SimpleLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\SimpleLiveViewViewModel.cs,Get,The method has an empty catch block.
Empty Catch Block,CameraControl.windows,LiveViewWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\LiveViewWnd.xaml.cs,ExecuteCommand,The method has an empty catch block.
Empty Catch Block,CameraControl.windows,PreviewWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\PreviewWnd.xaml.cs,Image_MouseDown,The method has an empty catch block.
Empty Catch Block,CameraControl.windows,QrCodeWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\QrCodeWnd.xaml.cs,MetroWindow_Deactivated,The method has an empty catch block.
Empty Catch Block,CameraControl.XSplit,BroadcasterPlugin,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\XSplit\BroadcasterPlugin.cs,CreateInstance,The method has an empty catch block.
Empty Catch Block,CameraControl.XSplit,BroadcasterPlugin,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\XSplit\BroadcasterPlugin.cs,DownloadVisual,The method has an empty catch block.
Empty Catch Block,CameraControl.XSplit,TimedBroadcasterPlugin,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\XSplit\TimedBroadcasterPlugin.cs,CreateInstance,The method has an empty catch block.
Magic Number,CameraControl.Classes,HorizontalScrollBehavior,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Classes\HorizontalScrollBehavior.cs,OnPreviewMouseWheel,The following statement contains a magic number: var newOffset = !IsInverted ?                  ScrollViewer.HorizontalOffset + e.Delta/100 :                  ScrollViewer.HorizontalOffset - e.Delta/100;
Magic Number,CameraControl.Classes,HorizontalScrollBehavior,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Classes\HorizontalScrollBehavior.cs,OnPreviewMouseWheel,The following statement contains a magic number: var newOffset = !IsInverted ?                  ScrollViewer.HorizontalOffset + e.Delta/100 :                  ScrollViewer.HorizontalOffset - e.Delta/100;
Magic Number,CameraControl.Controls,CameraToImageSourceConverter,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Controls\CameraToImageSourceConverter .cs,Convert,The following statement contains a magic number: ImageSource bp = BitmapLoader.Instance.LoadImage(file' 400' 0);
Magic Number,CameraControl.Controls,ExposureStatusControl,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Controls\ExposureStatusControl.xaml.cs,ExposureStatusControl,The following statement contains a magic number: brushInactive =                  new SolidColorBrush(                      Color.FromArgb(                          32'                          brushActive.Color.R'                          brushActive.Color.G'                          brushActive.Color.B));
Magic Number,CameraControl.Controls,VUMeterControl,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Controls\VUMeterControl.xaml.cs,GenerateBlocks,The following statement contains a magic number: items.Add(new Block() { Level = 2 });
Magic Number,CameraControl.Controls,VUMeterControl,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Controls\VUMeterControl.xaml.cs,GenerateBlocks,The following statement contains a magic number: items.Add(new Block() { Level = 3 });
Magic Number,CameraControl.Layouts,LayoutBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,ZoomAndPanControl_ContentScaleChanged,The following statement contains a magic number: var i = Math.Round(ZoomAndPanControl.FitScale()' 4);
Magic Number,CameraControl.Layouts,LayoutBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,ZoomAndPanControl_ContentScaleChanged,The following statement contains a magic number: var freeZoom = Math.Round(ZoomAndPanControl.ContentScale' 4) >                                         Math.Round(ZoomAndPanControl.FitScale()' 4);
Magic Number,CameraControl.Layouts,LayoutBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,ZoomAndPanControl_ContentScaleChanged,The following statement contains a magic number: var freeZoom = Math.Round(ZoomAndPanControl.ContentScale' 4) >                                         Math.Round(ZoomAndPanControl.FitScale()' 4);
Magic Number,CameraControl.Layouts,LayoutBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,GeneratePreview,The following statement contains a magic number: var bitmap = BitmapLoader.Instance.LoadSmallImage(ServiceProvider.Settings.SelectedBitmap.FileItem' 270);
Magic Number,CameraControl.Layouts,LayoutBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,worker_DoWork,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,CameraControl.Layouts,LayoutBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,Settings_PropertyChanged,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,CameraControl.Layouts,LayoutBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,TriggerEvent,The following statement contains a magic number: switch (cmd)                  {                      case WindowsCmdConsts.Next_Image:                          if (ImageLIst.SelectedIndex <                              ImageLIst.Items.Count - 1)                          {                              FileItem item =                                  ImageLIst.SelectedItem as FileItem;                              if (item != null)                              {                                  int ind = ImageLIst.Items.IndexOf(item);                                  ImageLIst.SelectedIndex = ind + 1;                              }                              item = ImageLIst.SelectedItem as FileItem;                              if (item != null)                                  ImageLIst.ScrollIntoView(item);                          }                          break;                      case WindowsCmdConsts.Prev_Image:                          if (ImageLIst.SelectedIndex > 0)                          {                              FileItem item =                                  ImageLIst.SelectedItem as FileItem;                              if (item != null)                              {                                  int ind = ImageLIst.Items.IndexOf(item);                                  ImageLIst.SelectedIndex = ind - 1;                              }                              item = ImageLIst.SelectedItem as FileItem;                              if (item != null)                                  ImageLIst.ScrollIntoView(item);                          }                          break;                      case WindowsCmdConsts.Like_Image:                          if (ImageLIst.SelectedItem != null)                          {                              FileItem item = null;                              if (o != null)                              {                                  item = ServiceProvider.Settings.DefaultSession.GetByName(o as string);                              }                              else                              {                                  item = ImageLIst.SelectedItem as FileItem;                              }                              if (item != null)                              {                                  item.IsLiked = !item.IsLiked;                              }                          }                          break;                      case WindowsCmdConsts.Unlike_Image:                          if (ImageLIst.SelectedItem != null)                          {                              FileItem item = null;                              if (o != null)                              {                                  item =                                      ServiceProvider.Settings.DefaultSession                                          .GetByName(o as string);                              }                              else                              {                                  item = ImageLIst.SelectedItem as FileItem;                              }                              if (item != null)                              {                                  item.IsUnLiked = !item.IsUnLiked;                              }                          }                          break;                      case WindowsCmdConsts.Del_Image:                          {                              DeleteItem();                          }                          break;                      case WindowsCmdConsts.SelectAll_Image:                          {                              ServiceProvider.Settings.DefaultSession.SelectAll();                          }                          break;                      case WindowsCmdConsts.Select_Image:                          FileItem fileItem = o as FileItem;                          if (fileItem != null)                          {                              ImageLIst.SelectedValue = fileItem;                              ImageLIst.ScrollIntoView(fileItem);                          }                          break;                      case WindowsCmdConsts.Refresh_Image:                          RefreshImage();                          break;                      case WindowsCmdConsts.Zoom_Image_Fit:                          ZoomAndPanControl.ScaleToFit();                          break;                      case WindowsCmdConsts.Zoom_Image_60:                          ZoomToFocus();                          LoadFullRes();                          ZoomAndPanControl.ZoomTo(0.6);                          break;                      case WindowsCmdConsts.Zoom_Image_100:                          ZoomToFocus();                          LoadFullRes();                          ZoomAndPanControl.ZoomTo(1.0);                          break;                      case WindowsCmdConsts.Zoom_Image_200:                          ZoomToFocus();                          LoadFullRes();                          ZoomAndPanControl.ZoomTo(2.0);                          break;                      case WindowsCmdConsts.RotateLeft:                          {                              FileItem item =                                  ImageLIst.SelectedItem as FileItem;                              if (item != null)                              {                                  item.Rotation--;                                }                          }                          break;                      case WindowsCmdConsts.RotateRight:                          {                              FileItem item =                                  ImageLIst.SelectedItem as FileItem;                              if (item != null)                              {                                  item.Rotation++;                              }                          }                          break;                      case WindowsCmdConsts.ViewExternal:                          OpenInExternalViewer();                          break;                      case WindowsCmdConsts.ViewExplorer:                          OpenInExplorer();                          break;                      case WindowsCmdConsts.RefreshDisplay:                          if (LayoutViewModel.ZoomIndex == 0)                              ZoomAndPanControl.ScaleToFit();                          break;                  }
Magic Number,CameraControl.Layouts,LayoutBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,TriggerEvent,The following statement contains a magic number: switch (cmd)                  {                      case WindowsCmdConsts.Next_Image:                          if (ImageLIst.SelectedIndex <                              ImageLIst.Items.Count - 1)                          {                              FileItem item =                                  ImageLIst.SelectedItem as FileItem;                              if (item != null)                              {                                  int ind = ImageLIst.Items.IndexOf(item);                                  ImageLIst.SelectedIndex = ind + 1;                              }                              item = ImageLIst.SelectedItem as FileItem;                              if (item != null)                                  ImageLIst.ScrollIntoView(item);                          }                          break;                      case WindowsCmdConsts.Prev_Image:                          if (ImageLIst.SelectedIndex > 0)                          {                              FileItem item =                                  ImageLIst.SelectedItem as FileItem;                              if (item != null)                              {                                  int ind = ImageLIst.Items.IndexOf(item);                                  ImageLIst.SelectedIndex = ind - 1;                              }                              item = ImageLIst.SelectedItem as FileItem;                              if (item != null)                                  ImageLIst.ScrollIntoView(item);                          }                          break;                      case WindowsCmdConsts.Like_Image:                          if (ImageLIst.SelectedItem != null)                          {                              FileItem item = null;                              if (o != null)                              {                                  item = ServiceProvider.Settings.DefaultSession.GetByName(o as string);                              }                              else                              {                                  item = ImageLIst.SelectedItem as FileItem;                              }                              if (item != null)                              {                                  item.IsLiked = !item.IsLiked;                              }                          }                          break;                      case WindowsCmdConsts.Unlike_Image:                          if (ImageLIst.SelectedItem != null)                          {                              FileItem item = null;                              if (o != null)                              {                                  item =                                      ServiceProvider.Settings.DefaultSession                                          .GetByName(o as string);                              }                              else                              {                                  item = ImageLIst.SelectedItem as FileItem;                              }                              if (item != null)                              {                                  item.IsUnLiked = !item.IsUnLiked;                              }                          }                          break;                      case WindowsCmdConsts.Del_Image:                          {                              DeleteItem();                          }                          break;                      case WindowsCmdConsts.SelectAll_Image:                          {                              ServiceProvider.Settings.DefaultSession.SelectAll();                          }                          break;                      case WindowsCmdConsts.Select_Image:                          FileItem fileItem = o as FileItem;                          if (fileItem != null)                          {                              ImageLIst.SelectedValue = fileItem;                              ImageLIst.ScrollIntoView(fileItem);                          }                          break;                      case WindowsCmdConsts.Refresh_Image:                          RefreshImage();                          break;                      case WindowsCmdConsts.Zoom_Image_Fit:                          ZoomAndPanControl.ScaleToFit();                          break;                      case WindowsCmdConsts.Zoom_Image_60:                          ZoomToFocus();                          LoadFullRes();                          ZoomAndPanControl.ZoomTo(0.6);                          break;                      case WindowsCmdConsts.Zoom_Image_100:                          ZoomToFocus();                          LoadFullRes();                          ZoomAndPanControl.ZoomTo(1.0);                          break;                      case WindowsCmdConsts.Zoom_Image_200:                          ZoomToFocus();                          LoadFullRes();                          ZoomAndPanControl.ZoomTo(2.0);                          break;                      case WindowsCmdConsts.RotateLeft:                          {                              FileItem item =                                  ImageLIst.SelectedItem as FileItem;                              if (item != null)                              {                                  item.Rotation--;                                }                          }                          break;                      case WindowsCmdConsts.RotateRight:                          {                              FileItem item =                                  ImageLIst.SelectedItem as FileItem;                              if (item != null)                              {                                  item.Rotation++;                              }                          }                          break;                      case WindowsCmdConsts.ViewExternal:                          OpenInExternalViewer();                          break;                      case WindowsCmdConsts.ViewExplorer:                          OpenInExplorer();                          break;                      case WindowsCmdConsts.RefreshDisplay:                          if (LayoutViewModel.ZoomIndex == 0)                              ZoomAndPanControl.ScaleToFit();                          break;                  }
Magic Number,CameraControl.Layouts,LayoutBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,TriggerEvent,The following statement contains a magic number: double.TryParse(vals[2]' out y);
Magic Number,CameraControl.Layouts,LayoutBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,TriggerEvent,The following statement contains a magic number: vals.Count() > 2
Magic Number,CameraControl.Layouts,LayoutBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,ZoomToFocus,The following statement contains a magic number: ZoomAndPanControl.SnapTo(new Point(ServiceProvider.Settings.SelectedBitmap.FileItem.FileInfo.FocusPoints[0].X + ServiceProvider.Settings.SelectedBitmap.FileItem.FileInfo.FocusPoints[0].Width / 2'                      ServiceProvider.Settings.SelectedBitmap.FileItem.FileInfo.FocusPoints[0].Y + ServiceProvider.Settings.SelectedBitmap.FileItem.FileInfo.FocusPoints[0].Height / 2));
Magic Number,CameraControl.Layouts,LayoutBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,ZoomToFocus,The following statement contains a magic number: ZoomAndPanControl.SnapTo(new Point(ServiceProvider.Settings.SelectedBitmap.FileItem.FileInfo.FocusPoints[0].X + ServiceProvider.Settings.SelectedBitmap.FileItem.FileInfo.FocusPoints[0].Width / 2'                      ServiceProvider.Settings.SelectedBitmap.FileItem.FileInfo.FocusPoints[0].Y + ServiceProvider.Settings.SelectedBitmap.FileItem.FileInfo.FocusPoints[0].Height / 2));
Magic Number,CameraControl.Layouts,LayoutBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,ZoomOut,The following statement contains a magic number: ZoomAndPanControl.ZoomAboutPoint(ZoomAndPanControl.ContentScale - 0.1' contentZoomCenter);
Magic Number,CameraControl.Layouts,LayoutBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,ZoomIn,The following statement contains a magic number: ZoomAndPanControl.ZoomAboutPoint(ZoomAndPanControl.ContentScale + 0.1' contentZoomCenter);
Magic Number,CameraControl,App,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\App.xaml.cs,WindowsManager_Event,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,CameraControl,App,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\App.xaml.cs,cameraDevice_CameraInitDone,The following statement contains a magic number: var thread = new Thread(delegate()                  {                      try                      {                          Thread.Sleep(1500);                          cameraDevice.WaitForCamera(5000);                          preset.Set(cameraDevice);                      }                      catch (Exception e)                      {                          Log.Error("Unable to load default preset"' e);                      }                  });
Magic Number,CameraControl,App,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\App.xaml.cs,cameraDevice_CameraInitDone,The following statement contains a magic number: var thread = new Thread(delegate()                  {                      try                      {                          Thread.Sleep(1500);                          cameraDevice.WaitForCamera(5000);                          preset.Set(cameraDevice);                      }                      catch (Exception e)                      {                          Log.Error("Unable to load default preset"' e);                      }                  });
Magic Number,CameraControl,MainWindow,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,LoadInAllPreset,The following statement contains a magic number: Thread.Sleep(250);
Magic Number,CameraControl,MainWindow,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,VerifyPreset,The following statement contains a magic number: Thread.Sleep(250);
Magic Number,CameraControl,MainWindow,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,StartupThread,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,CameraControl,MainWindow,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,StartupThread,The following statement contains a magic number: cameraDevice.WaitForCamera(5000);
Magic Number,CameraControl,MainWindow,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,StartupThread,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,CameraControl,MainWindow,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,StartupThread,The following statement contains a magic number: (DateTime.Now - ServiceProvider.Settings.LastUpdateCheckDate).TotalDays > 7
Magic Number,CameraControl,MainWindow,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,StartupThread,The following statement contains a magic number: Dispatcher.BeginInvoke(                  new Action(                      delegate                      {                          Thread.Sleep(1500);                          ServiceProvider.WindowsManager.ExecuteCommand(WindowsCmdConsts.Zoom_Image_Fit);                      }));
Magic Number,CameraControl,MainWindow,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,PhotoCaptured,The following statement contains a magic number: string strTransfer = "Transfer time : " + stopWatch.Elapsed.TotalSeconds.ToString("##.###") + " Speed :" +                                       Math.Round(                                           new System.IO.FileInfo(tempFile).Length / 1024.0 / 1024 /                                           stopWatch.Elapsed.TotalSeconds' 2)+" Mb/s";
Magic Number,CameraControl,MainWindow,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,PhotoCaptured,The following statement contains a magic number: string strTransfer = "Transfer time : " + stopWatch.Elapsed.TotalSeconds.ToString("##.###") + " Speed :" +                                       Math.Round(                                           new System.IO.FileInfo(tempFile).Length / 1024.0 / 1024 /                                           stopWatch.Elapsed.TotalSeconds' 2)+" Mb/s";
Magic Number,CameraControl,MainWindow,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,PhotoCaptured,The following statement contains a magic number: string strTransfer = "Transfer time : " + stopWatch.Elapsed.TotalSeconds.ToString("##.###") + " Speed :" +                                       Math.Round(                                           new System.IO.FileInfo(tempFile).Length / 1024.0 / 1024 /                                           stopWatch.Elapsed.TotalSeconds' 2)+" Mb/s";
Magic Number,CameraControl,MainWindow,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,PhotoCaptured,The following statement contains a magic number: (DateTime.Now - _lastLoadTime).TotalSeconds < 4
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,AstroLiveViewViewModel,The following statement contains a magic number: StarWindowSize = 30;
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,AstroLiveViewViewModel,The following statement contains a magic number: StarSize = 123.11;
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,CalculateStarSize,The following statement contains a magic number: int Min = 800;
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,CalculateStarSize,The following statement contains a magic number: Threshold = (Max + Min)/2;
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,GetLiveImage,The following statement contains a magic number: var zoow = preview.Crop((int) (CentralPoint.X - (StarWindowSize/2))'                          (int) (CentralPoint.Y - (StarWindowSize/2))'                          StarWindowSize' StarWindowSize);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,GetLiveImage,The following statement contains a magic number: var zoow = preview.Crop((int) (CentralPoint.X - (StarWindowSize/2))'                          (int) (CentralPoint.Y - (StarWindowSize/2))'                          StarWindowSize' StarWindowSize);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,GetLiveImage,The following statement contains a magic number: _bitmap = _bitmap.Crop((int) (CentralPoint.X - (d/2))' (int) (CentralPoint.Y - (h/2))'                              (int) d' (int) h);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,GetLiveImage,The following statement contains a magic number: _bitmap = _bitmap.Crop((int) (CentralPoint.X - (d/2))' (int) (CentralPoint.Y - (h/2))'                              (int) d' (int) h);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,ColorstoInt,The following statement contains a magic number: return (int)((A << 24) | (R << 16) | (G << 8) | (B << 0));
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,ColorstoInt,The following statement contains a magic number: return (int)((A << 24) | (R << 16) | (G << 8) | (B << 0));
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,ColorstoInt,The following statement contains a magic number: return (int)((A << 24) | (R << 16) | (G << 8) | (B << 0));
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,IntToColor,The following statement contains a magic number: byte a = (byte)(num1 >> 24);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,IntToColor,The following statement contains a magic number: int num3 = 65280 / num2;
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,IntToColor,The following statement contains a magic number: byte R = (byte)((num1 >> 16 & byte.MaxValue) * num3 >> 8);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,IntToColor,The following statement contains a magic number: byte R = (byte)((num1 >> 16 & byte.MaxValue) * num3 >> 8);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,IntToColor,The following statement contains a magic number: byte G = (byte)((num1 >> 8 & byte.MaxValue) * num3 >> 8);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,IntToColor,The following statement contains a magic number: byte G = (byte)((num1 >> 8 & byte.MaxValue) * num3 >> 8);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,IntToColor,The following statement contains a magic number: byte B = (byte)((num1 & byte.MaxValue) * num3 >> 8);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: CentralPoint = new Point(bitmap.PixelWidth / 2' bitmap.PixelHeight / 2);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: CentralPoint = new Point(bitmap.PixelWidth / 2' bitmap.PixelHeight / 2);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: tempbitmap.DrawLine(0' (int)CentralPoint.Y - (StarWindowSize / 2)' bitmap.PixelWidth' (int)CentralPoint.Y - (StarWindowSize / 2)' Colors.White);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: tempbitmap.DrawLine(0' (int)CentralPoint.Y - (StarWindowSize / 2)' bitmap.PixelWidth' (int)CentralPoint.Y - (StarWindowSize / 2)' Colors.White);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: tempbitmap.DrawLine(0' (int)CentralPoint.Y + (StarWindowSize / 2)' bitmap.PixelWidth' (int)CentralPoint.Y + (StarWindowSize / 2)' Colors.White);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: tempbitmap.DrawLine(0' (int)CentralPoint.Y + (StarWindowSize / 2)' bitmap.PixelWidth' (int)CentralPoint.Y + (StarWindowSize / 2)' Colors.White);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: tempbitmap.DrawLine((int)CentralPoint.X - (StarWindowSize / 2)' 0' (int)CentralPoint.X - (StarWindowSize / 2)' bitmap.PixelHeight' Colors.White);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: tempbitmap.DrawLine((int)CentralPoint.X - (StarWindowSize / 2)' 0' (int)CentralPoint.X - (StarWindowSize / 2)' bitmap.PixelHeight' Colors.White);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: tempbitmap.DrawLine((int)CentralPoint.X + (StarWindowSize / 2)' 0' (int)CentralPoint.X + (StarWindowSize / 2)' bitmap.PixelHeight' Colors.White);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: tempbitmap.DrawLine((int)CentralPoint.X + (StarWindowSize / 2)' 0' (int)CentralPoint.X + (StarWindowSize / 2)' bitmap.PixelHeight' Colors.White);
Magic Number,CameraControl.ViewModel,BarcodeViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: externalData.Row3 = data[2];
Magic Number,CameraControl.ViewModel,BarcodeViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: data.Length > 2
Magic Number,CameraControl.ViewModel,BarcodeViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: externalData.Row4 = data[3];
Magic Number,CameraControl.ViewModel,BarcodeViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: data.Length > 3
Magic Number,CameraControl.ViewModel,BarcodeViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: externalData.Row5 = data[4];
Magic Number,CameraControl.ViewModel,BarcodeViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: data.Length > 4
Magic Number,CameraControl.ViewModel,BarcodeViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: externalData.Row6 = data[5];
Magic Number,CameraControl.ViewModel,BarcodeViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: data.Length > 5
Magic Number,CameraControl.ViewModel,BarcodeViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: externalData.Row7= data[6];
Magic Number,CameraControl.ViewModel,BarcodeViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: data.Length > 6
Magic Number,CameraControl.ViewModel,BarcodeViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: externalData.Row8 = data[7];
Magic Number,CameraControl.ViewModel,BarcodeViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: data.Length > 7
Magic Number,CameraControl.ViewModel,BarcodeViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: externalData.Row9 = data[8];
Magic Number,CameraControl.ViewModel,BarcodeViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: data.Length > 8
Magic Number,CameraControl.ViewModel,BarcodeViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: externalData.FileName = data[9];
Magic Number,CameraControl.ViewModel,BarcodeViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: data.Length > 9
Magic Number,CameraControl.ViewModel,BracketingViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BracketingViewModel.cs,_timer_Elapsed,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,CameraControl.ViewModel,BracketingViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BracketingViewModel.cs,_timer_Elapsed,The following statement contains a magic number: switch (Mode)                  {                      case 0:                          {                              Camera.ExposureCompensation.Value = Values[Counter];                              CurValue = Values[Counter];                          }                          break;                      case 1:                          {                              Camera.FNumber.Value = Values[Counter];                              CurValue = Values[Counter];                          }                          break;                      case 2:                          {                              Camera.IsoNumber.Value = Values[Counter];                              CurValue = Values[Counter];                          }                          break;                  }
Magic Number,CameraControl.ViewModel,BracketingViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BracketingViewModel.cs,_timer_Elapsed,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,CameraControl.ViewModel,BracketingViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BracketingViewModel.cs,Start,The following statement contains a magic number: switch (Mode)                  {                      case 0:                          DefValue = Camera.ExposureCompensation.Value;                          break;                      case 1:                          if (!Camera.FNumber.IsEnabled)                          {                              Error = TranslationStrings.LabelWrongFNumber;                              return;                          }                          DefValue = Camera.FNumber.Value;                          break;                      case 2:                          if (Camera.Mode.Value != "M")                          {                              Error = TranslationStrings.LabelBracketingMMode;                          }                          DefValue = Camera.IsoNumber.Value;                          break;                  }
Magic Number,CameraControl.ViewModel,BracketingViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BracketingViewModel.cs,Stop,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,CameraControl.ViewModel,BracketingViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BracketingViewModel.cs,Stop,The following statement contains a magic number: switch (Mode)              {                  case 0:                      Camera.ExposureCompensation.Value = DefValue;                      break;                  case 1:                      Camera.FNumber.Value = DefValue;                      break;                  case 2:                      Camera.IsoNumber.Value = DefValue;                      break;              }
Magic Number,CameraControl.ViewModel,BracketingViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BracketingViewModel.cs,SetMessage,The following statement contains a magic number: switch (Mode)              {                  case 0:                      {                          var vals = GetValues(ExpLowList.ToList()' ExpLow' ExpHigh' ExpCaptureCount);                          if (vals == null || vals.Count == 0)                              return;                          Values = vals;                          foreach (var val in vals)                          {                              Message += (val + "' ");                          }                      }                      break;                  case 1:                      {                          var vals = GetValues(FLowList.ToList()' FLow' FHigh' FCaptureCount);                          if (vals == null || vals.Count == 0)                              return;                          Values = vals;                          foreach (var val in vals)                          {                              Message += (val + "' ");                          }                      }                      break;                  case 2:                      {                          var vals = GetValues(IsoLowList.ToList()' IsoLow' IsoHigh' IsoCaptureCount);                          if (vals == null || vals.Count == 0)                              return;                          Values = vals;                          foreach (var val in vals)                          {                              Message += (val + "' ");                          }                      }                      break;              }
Magic Number,CameraControl.ViewModel,BracketingViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BracketingViewModel.cs,GetValues,The following statement contains a magic number: il < 0 || ih < 0 || ih <= il || count < 2
Magic Number,CameraControl.ViewModel,BracketingViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BracketingViewModel.cs,GetValues,The following statement contains a magic number: count = Math.Max(count' 2);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManagerEvent,The following statement contains a magic number: Thread.Sleep(5);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,LiveViewManager_PreviewCaptured,The following statement contains a magic number: PreviewBitmap = BitmapLoader.Instance.LoadImage(file' 2048' 0);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ToggleZoom,The following statement contains a magic number: CameraDevice.LiveViewImageZoomRatio.Values.Count == 2
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,InitOverlay,The following statement contains a magic number: OverlayTransparency = 100;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,Init,The following statement contains a magic number: WaitTime = 2;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,Init,The following statement contains a magic number: PhotoNo = 2;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,Init,The following statement contains a magic number: FocusStep = 2;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,Init,The following statement contains a magic number: PhotoCount = 5;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,Init,The following statement contains a magic number: _freezeTimer.Interval = ServiceProvider.Settings.LiveViewFreezeTimeOut*1000;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManager_Event1,The following statement contains a magic number: int.TryParse(vals[2]' out y)
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManager_Event1,The following statement contains a magic number: SelectedOverlay = vals[3].ToLower() == "null" ? "" : vals[3];
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManager_Event1,The following statement contains a magic number: SelectedOverlay = vals[3].ToLower() == "null" ? "" : vals[3];
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManager_Event1,The following statement contains a magic number: OverlayActivated = vals[3].ToLower() != "null";
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManager_Event1,The following statement contains a magic number: vals.Count() > 3
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManager_Event1,The following statement contains a magic number: vals.Count() > 2
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,GetValue,The following statement contains a magic number: int.TryParse(cmd[2]' out x)
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,_restartTimer_Elapsed,The following statement contains a magic number: (DateTime.Now - _restartTimerStartTime).TotalSeconds > 2
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,UnInit,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ResetOverlay,The following statement contains a magic number: OverlayTransparency = 100;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManager_Event,The following statement contains a magic number: switch (cmd)              {                  case CmdConsts.LiveView_Capture:                      CaptureInThread();                      break;                  case CmdConsts.LiveView_CaptureSnapShot:                      CaptureSnapshot();                      break;                  case CmdConsts.LiveView_Focus_Move_Right:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX + ServiceProvider.Settings.FocusMoveStep' LiveViewData.FocusY);                      }                      break;                  case CmdConsts.LiveView_Focus_Move_Left:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX - ServiceProvider.Settings.FocusMoveStep' LiveViewData.FocusY);                      }                      break;                  case CmdConsts.LiveView_Focus_Move_Up:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX' LiveViewData.FocusY - ServiceProvider.Settings.FocusMoveStep);                      }                      break;                  case CmdConsts.LiveView_Focus_Move_Down:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX' LiveViewData.FocusY + ServiceProvider.Settings.FocusMoveStep);                      }                      break;                  case CmdConsts.LiveView_Zoom_All:                      CameraDevice.LiveViewImageZoomRatio.SetValue(0);                      break;                  case CmdConsts.LiveView_Zoom_25:                      CameraDevice.LiveViewImageZoomRatio.SetValue(1);                      break;                  case CmdConsts.LiveView_Zoom_33:                      CameraDevice.LiveViewImageZoomRatio.SetValue(2);                      break;                  case CmdConsts.LiveView_Zoom_50:                      CameraDevice.LiveViewImageZoomRatio.SetValue(3);                      break;                  case CmdConsts.LiveView_Zoom_66:                      CameraDevice.LiveViewImageZoomRatio.SetValue(4);                      break;                  case CmdConsts.LiveView_Zoom_100:                      CameraDevice.LiveViewImageZoomRatio.SetValue(5);                      break;                  case CmdConsts.LiveView_Focus_M:                      FocusMCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_P:                      FocusPCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_MM:                      FocusMMCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_PP:                      FocusPPCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_MMM:                      FocusMMMCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_PPP:                      FocusPPPCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus:                      AutoFocus();                      break;                  case CmdConsts.LiveView_Preview:                      PreviewCommand.Execute(null);                      break;                  case CmdConsts.LiveView_NoProcess:                      NoProcessing = true;                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManager_Event,The following statement contains a magic number: switch (cmd)              {                  case CmdConsts.LiveView_Capture:                      CaptureInThread();                      break;                  case CmdConsts.LiveView_CaptureSnapShot:                      CaptureSnapshot();                      break;                  case CmdConsts.LiveView_Focus_Move_Right:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX + ServiceProvider.Settings.FocusMoveStep' LiveViewData.FocusY);                      }                      break;                  case CmdConsts.LiveView_Focus_Move_Left:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX - ServiceProvider.Settings.FocusMoveStep' LiveViewData.FocusY);                      }                      break;                  case CmdConsts.LiveView_Focus_Move_Up:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX' LiveViewData.FocusY - ServiceProvider.Settings.FocusMoveStep);                      }                      break;                  case CmdConsts.LiveView_Focus_Move_Down:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX' LiveViewData.FocusY + ServiceProvider.Settings.FocusMoveStep);                      }                      break;                  case CmdConsts.LiveView_Zoom_All:                      CameraDevice.LiveViewImageZoomRatio.SetValue(0);                      break;                  case CmdConsts.LiveView_Zoom_25:                      CameraDevice.LiveViewImageZoomRatio.SetValue(1);                      break;                  case CmdConsts.LiveView_Zoom_33:                      CameraDevice.LiveViewImageZoomRatio.SetValue(2);                      break;                  case CmdConsts.LiveView_Zoom_50:                      CameraDevice.LiveViewImageZoomRatio.SetValue(3);                      break;                  case CmdConsts.LiveView_Zoom_66:                      CameraDevice.LiveViewImageZoomRatio.SetValue(4);                      break;                  case CmdConsts.LiveView_Zoom_100:                      CameraDevice.LiveViewImageZoomRatio.SetValue(5);                      break;                  case CmdConsts.LiveView_Focus_M:                      FocusMCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_P:                      FocusPCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_MM:                      FocusMMCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_PP:                      FocusPPCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_MMM:                      FocusMMMCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_PPP:                      FocusPPPCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus:                      AutoFocus();                      break;                  case CmdConsts.LiveView_Preview:                      PreviewCommand.Execute(null);                      break;                  case CmdConsts.LiveView_NoProcess:                      NoProcessing = true;                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManager_Event,The following statement contains a magic number: switch (cmd)              {                  case CmdConsts.LiveView_Capture:                      CaptureInThread();                      break;                  case CmdConsts.LiveView_CaptureSnapShot:                      CaptureSnapshot();                      break;                  case CmdConsts.LiveView_Focus_Move_Right:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX + ServiceProvider.Settings.FocusMoveStep' LiveViewData.FocusY);                      }                      break;                  case CmdConsts.LiveView_Focus_Move_Left:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX - ServiceProvider.Settings.FocusMoveStep' LiveViewData.FocusY);                      }                      break;                  case CmdConsts.LiveView_Focus_Move_Up:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX' LiveViewData.FocusY - ServiceProvider.Settings.FocusMoveStep);                      }                      break;                  case CmdConsts.LiveView_Focus_Move_Down:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX' LiveViewData.FocusY + ServiceProvider.Settings.FocusMoveStep);                      }                      break;                  case CmdConsts.LiveView_Zoom_All:                      CameraDevice.LiveViewImageZoomRatio.SetValue(0);                      break;                  case CmdConsts.LiveView_Zoom_25:                      CameraDevice.LiveViewImageZoomRatio.SetValue(1);                      break;                  case CmdConsts.LiveView_Zoom_33:                      CameraDevice.LiveViewImageZoomRatio.SetValue(2);                      break;                  case CmdConsts.LiveView_Zoom_50:                      CameraDevice.LiveViewImageZoomRatio.SetValue(3);                      break;                  case CmdConsts.LiveView_Zoom_66:                      CameraDevice.LiveViewImageZoomRatio.SetValue(4);                      break;                  case CmdConsts.LiveView_Zoom_100:                      CameraDevice.LiveViewImageZoomRatio.SetValue(5);                      break;                  case CmdConsts.LiveView_Focus_M:                      FocusMCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_P:                      FocusPCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_MM:                      FocusMMCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_PP:                      FocusPPCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_MMM:                      FocusMMMCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_PPP:                      FocusPPPCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus:                      AutoFocus();                      break;                  case CmdConsts.LiveView_Preview:                      PreviewCommand.Execute(null);                      break;                  case CmdConsts.LiveView_NoProcess:                      NoProcessing = true;                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManager_Event,The following statement contains a magic number: switch (cmd)              {                  case CmdConsts.LiveView_Capture:                      CaptureInThread();                      break;                  case CmdConsts.LiveView_CaptureSnapShot:                      CaptureSnapshot();                      break;                  case CmdConsts.LiveView_Focus_Move_Right:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX + ServiceProvider.Settings.FocusMoveStep' LiveViewData.FocusY);                      }                      break;                  case CmdConsts.LiveView_Focus_Move_Left:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX - ServiceProvider.Settings.FocusMoveStep' LiveViewData.FocusY);                      }                      break;                  case CmdConsts.LiveView_Focus_Move_Up:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX' LiveViewData.FocusY - ServiceProvider.Settings.FocusMoveStep);                      }                      break;                  case CmdConsts.LiveView_Focus_Move_Down:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX' LiveViewData.FocusY + ServiceProvider.Settings.FocusMoveStep);                      }                      break;                  case CmdConsts.LiveView_Zoom_All:                      CameraDevice.LiveViewImageZoomRatio.SetValue(0);                      break;                  case CmdConsts.LiveView_Zoom_25:                      CameraDevice.LiveViewImageZoomRatio.SetValue(1);                      break;                  case CmdConsts.LiveView_Zoom_33:                      CameraDevice.LiveViewImageZoomRatio.SetValue(2);                      break;                  case CmdConsts.LiveView_Zoom_50:                      CameraDevice.LiveViewImageZoomRatio.SetValue(3);                      break;                  case CmdConsts.LiveView_Zoom_66:                      CameraDevice.LiveViewImageZoomRatio.SetValue(4);                      break;                  case CmdConsts.LiveView_Zoom_100:                      CameraDevice.LiveViewImageZoomRatio.SetValue(5);                      break;                  case CmdConsts.LiveView_Focus_M:                      FocusMCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_P:                      FocusPCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_MM:                      FocusMMCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_PP:                      FocusPPCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_MMM:                      FocusMMMCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_PPP:                      FocusPPPCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus:                      AutoFocus();                      break;                  case CmdConsts.LiveView_Preview:                      PreviewCommand.Execute(null);                      break;                  case CmdConsts.LiveView_NoProcess:                      NoProcessing = true;                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,GetLiveImageData,The following statement contains a magic number: LiveViewData.ImageData.Length < 50
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,GetLiveImageData,The following statement contains a magic number: MovieTimeRemain = decimal.Round(LiveViewData.MovieTimeRemain' 2);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: filtering.Blue = new IntRange(0' 5);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: filtering.Red = new IntRange(0' 5);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: filtering.Green = new IntRange(0' 5);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: filtering.Blue = new IntRange(250' 255);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: filtering.Blue = new IntRange(250' 255);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: filtering.Red = new IntRange(250' 255);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: filtering.Red = new IntRange(250' 255);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: filtering.Green = new IntRange(250' 255);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: filtering.Green = new IntRange(250' 255);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: Grayscale filter = new Grayscale(0.299' 0.587' 0.114);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: Grayscale filter = new Grayscale(0.299' 0.587' 0.114);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: Grayscale filter = new Grayscale(0.299' 0.587' 0.114);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: switch (RotationIndex)              {                  case 0:                      Rotation = 0;                      break;                  case 1:                      Rotation = 90;                      break;                  case 2:                      Rotation = 180;                      break;                  case 3:                      Rotation = 270;                      break;                  case 4:                      Rotation = LiveViewData.Rotation;                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: switch (RotationIndex)              {                  case 0:                      Rotation = 0;                      break;                  case 1:                      Rotation = 90;                      break;                  case 2:                      Rotation = 180;                      break;                  case 3:                      Rotation = 270;                      break;                  case 4:                      Rotation = LiveViewData.Rotation;                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: switch (RotationIndex)              {                  case 0:                      Rotation = 0;                      break;                  case 1:                      Rotation = 90;                      break;                  case 2:                      Rotation = 180;                      break;                  case 3:                      Rotation = 270;                      break;                  case 4:                      Rotation = LiveViewData.Rotation;                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: switch (RotationIndex)              {                  case 0:                      Rotation = 0;                      break;                  case 1:                      Rotation = 90;                      break;                  case 2:                      Rotation = 180;                      break;                  case 3:                      Rotation = 270;                      break;                  case 4:                      Rotation = LiveViewData.Rotation;                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: switch (RotationIndex)              {                  case 0:                      Rotation = 0;                      break;                  case 1:                      Rotation = 90;                      break;                  case 2:                      Rotation = 180;                      break;                  case 3:                      Rotation = 270;                      break;                  case 4:                      Rotation = LiveViewData.Rotation;                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: switch (RotationIndex)              {                  case 0:                      Rotation = 0;                      break;                  case 1:                      Rotation = 90;                      break;                  case 2:                      Rotation = 180;                      break;                  case 3:                      Rotation = 270;                      break;                  case 4:                      Rotation = LiveViewData.Rotation;                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: CropOffsetX = (int) ((writeableBitmap.PixelWidth/2.0)*CropRatio/100);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: CropOffsetX = (int) ((writeableBitmap.PixelWidth/2.0)*CropRatio/100);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: CropOffsetY = (int) ((writeableBitmap.PixelHeight/2.0)*CropRatio/100);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: CropOffsetY = (int) ((writeableBitmap.PixelHeight/2.0)*CropRatio/100);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: writeableBitmap = writeableBitmap.Crop(CropOffsetX' CropOffsetY'                      writeableBitmap.PixelWidth - (2*CropOffsetX)'                      writeableBitmap.PixelHeight - (2*CropOffsetY));
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: writeableBitmap = writeableBitmap.Crop(CropOffsetX' CropOffsetY'                      writeableBitmap.PixelWidth - (2*CropOffsetX)'                      writeableBitmap.PixelHeight - (2*CropOffsetY));
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,SaveJpeg,The following statement contains a magic number: enc.QualityLevel = 50;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: color.A = 50;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: int x = writeableBitmap.PixelWidth*OverlayScale/100;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: int y = writeableBitmap.PixelHeight*OverlayScale/100;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: int xx = writeableBitmap.PixelWidth*OverlayHorizontal/100;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: int yy = writeableBitmap.PixelHeight*OverlayVertical/100;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: transpColor = System.Windows.Media.Color.FromArgb((byte)(0xff * OverlayTransparency / 100d)' 0xff'                              0xff' 0xff);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: OverlayTransparency < 100
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: writeableBitmap.Blit(                          new Rect(0 + (x/2) + xx' 0 + (y/2) + yy' writeableBitmap.PixelWidth - x'                              writeableBitmap.PixelHeight - y)'                          _overlayImage'                          new Rect(0' 0' _overlayImage.PixelWidth' _overlayImage.PixelHeight)' transpColor'                          WriteableBitmapExtensions.BlendMode.Alpha);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: writeableBitmap.Blit(                          new Rect(0 + (x/2) + xx' 0 + (y/2) + yy' writeableBitmap.PixelWidth - x'                              writeableBitmap.PixelHeight - y)'                          _overlayImage'                          new Rect(0' 0' _overlayImage.PixelWidth' _overlayImage.PixelHeight)' transpColor'                          WriteableBitmapExtensions.BlendMode.Alpha);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: int x1 = writeableBitmap.PixelWidth*(HorizontalMin)/1000;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: int x2 = writeableBitmap.PixelWidth*(HorizontalMin + HorizontalMax)/1000;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: int y2 = writeableBitmap.PixelHeight*(VerticalMin + VerticalMax)/1000;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: int y1 = writeableBitmap.PixelHeight*VerticalMin/1000;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: writeableBitmap.FillRectangle2(0' 0' writeableBitmap.PixelWidth' writeableBitmap.PixelHeight'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: writeableBitmap.FillRectangle2(0' 0' writeableBitmap.PixelWidth' writeableBitmap.PixelHeight'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: writeableBitmap.FillRectangle2(0' 0' writeableBitmap.PixelWidth' writeableBitmap.PixelHeight'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: writeableBitmap.FillRectangle2(0' 0' writeableBitmap.PixelWidth' writeableBitmap.PixelHeight'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: writeableBitmap.FillRectangleDeBlend(x1' y1' x2' y2'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: writeableBitmap.FillRectangleDeBlend(x1' y1' x2' y2'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: writeableBitmap.FillRectangleDeBlend(x1' y1' x2' y2'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: writeableBitmap.FillRectangleDeBlend(x1' y1' x2' y2'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawFocusPoint,The following statement contains a magic number: bitmap.FillRectangle2((int) (LiveViewData.FocusX*xt - (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt - (LiveViewData.FocusFrameYSize*yt/2))'                          (int) (LiveViewData.FocusX*xt + (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt + (LiveViewData.FocusFrameYSize*yt/2))'                          LiveViewData.HaveFocusData                              ? System.Windows.Media.Color.FromArgb(0x60' 0' 0xFF' 0)                              : System.Windows.Media.Color.FromArgb(0x60' 0xFF' 0' 0));
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawFocusPoint,The following statement contains a magic number: bitmap.FillRectangle2((int) (LiveViewData.FocusX*xt - (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt - (LiveViewData.FocusFrameYSize*yt/2))'                          (int) (LiveViewData.FocusX*xt + (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt + (LiveViewData.FocusFrameYSize*yt/2))'                          LiveViewData.HaveFocusData                              ? System.Windows.Media.Color.FromArgb(0x60' 0' 0xFF' 0)                              : System.Windows.Media.Color.FromArgb(0x60' 0xFF' 0' 0));
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawFocusPoint,The following statement contains a magic number: bitmap.FillRectangle2((int) (LiveViewData.FocusX*xt - (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt - (LiveViewData.FocusFrameYSize*yt/2))'                          (int) (LiveViewData.FocusX*xt + (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt + (LiveViewData.FocusFrameYSize*yt/2))'                          LiveViewData.HaveFocusData                              ? System.Windows.Media.Color.FromArgb(0x60' 0' 0xFF' 0)                              : System.Windows.Media.Color.FromArgb(0x60' 0xFF' 0' 0));
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawFocusPoint,The following statement contains a magic number: bitmap.FillRectangle2((int) (LiveViewData.FocusX*xt - (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt - (LiveViewData.FocusFrameYSize*yt/2))'                          (int) (LiveViewData.FocusX*xt + (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt + (LiveViewData.FocusFrameYSize*yt/2))'                          LiveViewData.HaveFocusData                              ? System.Windows.Media.Color.FromArgb(0x60' 0' 0xFF' 0)                              : System.Windows.Media.Color.FromArgb(0x60' 0xFF' 0' 0));
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessMotionDetection,The following statement contains a magic number: int x1 = bmp.Width*HorizontalMin/1000;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessMotionDetection,The following statement contains a magic number: int x2 = bmp.Width*(HorizontalMin + HorizontalMax)/1000;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessMotionDetection,The following statement contains a magic number: int y2 = bmp.Height*(VerticalMin + VerticalMax)/1000;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessMotionDetection,The following statement contains a magic number: int y1 = bmp.Height*VerticalMin/1000;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessMotionDetection,The following statement contains a magic number: CurrentMotionIndex = Math.Round(movement*100' 2);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessMotionDetection,The following statement contains a magic number: CurrentMotionIndex = Math.Round(movement*100' 2);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessMotionDetection,The following statement contains a magic number: MotionAction == 2
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessMotionDetection,The following statement contains a magic number: movement > ((float) MotionThreshold/100) && MotionAction > 0 && !Recording &&                      (DateTime.Now - _photoCapturedTime).TotalSeconds > WaitForMotionSec &&                      _totalframes > 10
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessMotionDetection,The following statement contains a magic number: movement > ((float) MotionThreshold/100) && MotionAction > 0 && !Recording &&                      (DateTime.Now - _photoCapturedTime).TotalSeconds > WaitForMotionSec &&                      _totalframes > 10
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,FocusOnMovment,The following statement contains a magic number: int posx = (int) ((rectangle.X + (rectangle.Width/2))*xt);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,FocusOnMovment,The following statement contains a magic number: int posy = (int) ((rectangle.Y + (rectangle.Height/2))*yt);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,StartStreamServer,The following statement contains a magic number: server = new MJpegServer(ServiceProvider.Settings.WebserverPort + 1' _liveViewVideoSource'                      new StaticQualityDefinition(60));
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,SetFocusThread,The following statement contains a magic number: var retryCount = 10;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,SetFocusThread,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,Capture,The following statement contains a magic number: Thread.Sleep(300);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,Capture,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,Capture,The following statement contains a magic number: Thread.Sleep(300);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,Capture,The following statement contains a magic number: CameraDevice.WaitForCamera(2000);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,Capture,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,SetFocusPos,The following statement contains a magic number: double offsetX = (((refWidth*100)/(100 - CropRatio)) - refWidth)/2;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,SetFocusPos,The following statement contains a magic number: double offsetX = (((refWidth*100)/(100 - CropRatio)) - refWidth)/2;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,SetFocusPos,The following statement contains a magic number: double offsetX = (((refWidth*100)/(100 - CropRatio)) - refWidth)/2;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,SetFocusPos,The following statement contains a magic number: double offsety = (((refHeight * 100) / (100 - CropRatio)) - refHeight) / 2;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,SetFocusPos,The following statement contains a magic number: double offsety = (((refHeight * 100) / (100 - CropRatio)) - refHeight) / 2;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,SetFocusPos,The following statement contains a magic number: double offsety = (((refHeight * 100) / (100 - CropRatio)) - refHeight) / 2;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,SetFocusPos,The following statement contains a magic number: double xt = (LiveViewData.ImageWidth )/(refWidth+(offsetX*2));
Magic Number,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,SetFocusPos,The following statement contains a magic number: double yt = (LiveViewData.ImageHeight ) /( refHeight+(offsety*2));
Magic Number,CameraControl.ViewModel,MainMenuViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\MainMenuViewModel.cs,SetAsMaster,The following statement contains a magic number: Thread.Sleep(250);
Magic Number,CameraControl.ViewModel,MJpegServer,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\MJpegServer.cs,MJpegServer,The following statement contains a magic number: this._server = new ThreadedServer(port' System.Net.IPAddress.Parse("127.0.0.1") ' 100);
Magic Number,CameraControl.ViewModel,MultipleLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\MultipleLiveViewViewModel.cs,MultipleLiveViewViewModel,The following statement contains a magic number: Rows = 2;
Magic Number,CameraControl.ViewModel,MultipleLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\MultipleLiveViewViewModel.cs,MultipleLiveViewViewModel,The following statement contains a magic number: Cols = 2;
Magic Number,CameraControl.ViewModel,MultipleLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\MultipleLiveViewViewModel.cs,WindowsManager_Event,The following statement contains a magic number: int.TryParse(vals[2]' out x)
Magic Number,CameraControl.ViewModel,MultipleLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\MultipleLiveViewViewModel.cs,WindowsManager_Event,The following statement contains a magic number: vals.Count() > 2
Magic Number,CameraControl.ViewModel,MultipleLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\MultipleLiveViewViewModel.cs,WindowsManager_Event,The following statement contains a magic number: int.TryParse(vals[2]' out x)
Magic Number,CameraControl.ViewModel,MultipleLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\MultipleLiveViewViewModel.cs,WindowsManager_Event,The following statement contains a magic number: vals.Count() > 2
Magic Number,CameraControl.ViewModel,StatisticsViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\StatisticsViewModel.cs,Refresh,The following statement contains a magic number: Cameras.Add(new NamedValue<int>("Raw"' 10));
Magic Number,CameraControl.ViewModel,StatisticsViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\StatisticsViewModel.cs,Refresh,The following statement contains a magic number: Cameras.Add(new NamedValue<int>("Jpg"' 90));
Magic Number,CameraControl.ViewModel,TimelapseViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\TimelapseViewModel.cs,StartL,The following statement contains a magic number: triggerB =                          triggerB.StartAt(DateBuilder.FutureDate(                              (StartHour * 60 * 60) + (StartMinute * 60) + StartSecond'                              IntervalUnit.Second));
Magic Number,CameraControl.ViewModel,TimelapseViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\TimelapseViewModel.cs,StartL,The following statement contains a magic number: triggerB =                          triggerB.StartAt(DateBuilder.FutureDate(                              (StartHour * 60 * 60) + (StartMinute * 60) + StartSecond'                              IntervalUnit.Second));
Magic Number,CameraControl.ViewModel,TimelapseViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\TimelapseViewModel.cs,StartL,The following statement contains a magic number: triggerB =                          triggerB.StartAt(DateBuilder.FutureDate(                              (StartHour * 60 * 60) + (StartMinute * 60) + StartSecond'                              IntervalUnit.Second));
Magic Number,CameraControl.ViewModel,TimelapseViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\TimelapseViewModel.cs,StartL,The following statement contains a magic number: _timer.Interval = 1000;
Magic Number,CameraControl.windows,BulbWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,BulbWnd,The following statement contains a magic number: CaptureTime = 60;
Magic Number,CameraControl.windows,BulbWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,BulbWnd,The following statement contains a magic number: PhdWait = 5;
Magic Number,CameraControl.windows,BulbWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,ExecuteCommand,The following statement contains a magic number: vals.Count() > 2
Magic Number,CameraControl.windows,BulbWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,GetValue,The following statement contains a magic number: int.TryParse(cmd[2]' out x)
Magic Number,CameraControl.windows,BulbWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,PhdGuiding,The following statement contains a magic number: TcpClient socket = new TcpClient("localhost"' 4300);
Magic Number,CameraControl.windows,BulbWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,PhdGuiding,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,CameraControl.windows,BulbWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,PhdGuiding,The following statement contains a magic number: switch (movetype)                  {                      case 1:                          SendReceiveTest2(socket' 3);                          break;                      case 2:                          SendReceiveTest2(socket' 4);                          break;                      case 3:                          SendReceiveTest2(socket' 5);                          break;                      case 4:                          SendReceiveTest2(socket' 12);                          break;                      case 5:                          SendReceiveTest2(socket' 13);                          break;                  }
Magic Number,CameraControl.windows,BulbWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,PhdGuiding,The following statement contains a magic number: switch (movetype)                  {                      case 1:                          SendReceiveTest2(socket' 3);                          break;                      case 2:                          SendReceiveTest2(socket' 4);                          break;                      case 3:                          SendReceiveTest2(socket' 5);                          break;                      case 4:                          SendReceiveTest2(socket' 12);                          break;                      case 5:                          SendReceiveTest2(socket' 13);                          break;                  }
Magic Number,CameraControl.windows,BulbWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,PhdGuiding,The following statement contains a magic number: switch (movetype)                  {                      case 1:                          SendReceiveTest2(socket' 3);                          break;                      case 2:                          SendReceiveTest2(socket' 4);                          break;                      case 3:                          SendReceiveTest2(socket' 5);                          break;                      case 4:                          SendReceiveTest2(socket' 12);                          break;                      case 5:                          SendReceiveTest2(socket' 13);                          break;                  }
Magic Number,CameraControl.windows,BulbWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,PhdGuiding,The following statement contains a magic number: switch (movetype)                  {                      case 1:                          SendReceiveTest2(socket' 3);                          break;                      case 2:                          SendReceiveTest2(socket' 4);                          break;                      case 3:                          SendReceiveTest2(socket' 5);                          break;                      case 4:                          SendReceiveTest2(socket' 12);                          break;                      case 5:                          SendReceiveTest2(socket' 13);                          break;                  }
Magic Number,CameraControl.windows,BulbWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,PhdGuiding,The following statement contains a magic number: switch (movetype)                  {                      case 1:                          SendReceiveTest2(socket' 3);                          break;                      case 2:                          SendReceiveTest2(socket' 4);                          break;                      case 3:                          SendReceiveTest2(socket' 5);                          break;                      case 4:                          SendReceiveTest2(socket' 12);                          break;                      case 5:                          SendReceiveTest2(socket' 13);                          break;                  }
Magic Number,CameraControl.windows,BulbWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,PhdGuiding,The following statement contains a magic number: switch (movetype)                  {                      case 1:                          SendReceiveTest2(socket' 3);                          break;                      case 2:                          SendReceiveTest2(socket' 4);                          break;                      case 3:                          SendReceiveTest2(socket' 5);                          break;                      case 4:                          SendReceiveTest2(socket' 12);                          break;                      case 5:                          SendReceiveTest2(socket' 13);                          break;                  }
Magic Number,CameraControl.windows,BulbWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,PhdGuiding,The following statement contains a magic number: switch (movetype)                  {                      case 1:                          SendReceiveTest2(socket' 3);                          break;                      case 2:                          SendReceiveTest2(socket' 4);                          break;                      case 3:                          SendReceiveTest2(socket' 5);                          break;                      case 4:                          SendReceiveTest2(socket' 12);                          break;                      case 5:                          SendReceiveTest2(socket' 13);                          break;                  }
Magic Number,CameraControl.windows,BulbWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,PhdGuiding,The following statement contains a magic number: switch (movetype)                  {                      case 1:                          SendReceiveTest2(socket' 3);                          break;                      case 2:                          SendReceiveTest2(socket' 4);                          break;                      case 3:                          SendReceiveTest2(socket' 5);                          break;                      case 4:                          SendReceiveTest2(socket' 12);                          break;                      case 5:                          SendReceiveTest2(socket' 13);                          break;                  }
Magic Number,CameraControl.windows,BulbWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,PhdGuiding,The following statement contains a magic number: switch (movetype)                  {                      case 1:                          SendReceiveTest2(socket' 3);                          break;                      case 2:                          SendReceiveTest2(socket' 4);                          break;                      case 3:                          SendReceiveTest2(socket' 5);                          break;                      case 4:                          SendReceiveTest2(socket' 12);                          break;                      case 5:                          SendReceiveTest2(socket' 13);                          break;                  }
Magic Number,CameraControl.windows,BulbWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,PhdGuiding,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,CameraControl.windows,BulbWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,SendReceiveTest2,The following statement contains a magic number: byte[] bytes = new byte[256];
Magic Number,CameraControl.windows,CameraPropertyWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\CameraPropertyWnd.xaml.cs,btn_identify_Click,The following statement contains a magic number: Thread thread = new Thread(new ThreadStart(delegate                                                           {                                                               for (int i = 0; i < 5; i++)                                                               {                                                                   _cameraDevice.LockCamera();                                                                   Thread.Sleep(800);                                                                   _cameraDevice.UnLockCamera();                                                                   Thread.Sleep(800);                                                               }                                                           }));
Magic Number,CameraControl.windows,CameraPropertyWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\CameraPropertyWnd.xaml.cs,btn_identify_Click,The following statement contains a magic number: Thread thread = new Thread(new ThreadStart(delegate                                                           {                                                               for (int i = 0; i < 5; i++)                                                               {                                                                   _cameraDevice.LockCamera();                                                                   Thread.Sleep(800);                                                                   _cameraDevice.UnLockCamera();                                                                   Thread.Sleep(800);                                                               }                                                           }));
Magic Number,CameraControl.windows,CameraPropertyWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\CameraPropertyWnd.xaml.cs,btn_identify_Click,The following statement contains a magic number: Thread thread = new Thread(new ThreadStart(delegate                                                           {                                                               for (int i = 0; i < 5; i++)                                                               {                                                                   _cameraDevice.LockCamera();                                                                   Thread.Sleep(800);                                                                   _cameraDevice.UnLockCamera();                                                                   Thread.Sleep(800);                                                               }                                                           }));
Magic Number,CameraControl.windows,DownloadPhotosWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\DownloadPhotosWnd.xaml.cs,PopulateImageList,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,CameraControl.windows,DownloadPhotosWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\DownloadPhotosWnd.xaml.cs,TransferFiles,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,CameraControl.windows,DownloadPhotosWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\DownloadPhotosWnd.xaml.cs,TransferFiles,The following statement contains a magic number: Log.Debug(                      string.Format("[BENCHMARK]Total byte transferred ;{0} Total seconds :{1} Speed : {2} Mbyte/sec "'                          totalbytes'                          transfersec' (totalbytes/transfersec/1024/1024).ToString("0000.00")));
Magic Number,CameraControl.windows,DownloadPhotosWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\DownloadPhotosWnd.xaml.cs,TransferFiles,The following statement contains a magic number: Log.Debug(                      string.Format("[BENCHMARK]Total byte transferred ;{0} Total seconds :{1} Speed : {2} Mbyte/sec "'                          totalbytes'                          transfersec' (totalbytes/transfersec/1024/1024).ToString("0000.00")));
Magic Number,CameraControl.windows,FullScreenWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\FullScreenWnd.xaml.cs,image1_MouseDown,The following statement contains a magic number: e.ClickCount >= 2 && e.LeftButton == MouseButtonState.Pressed
Magic Number,CameraControl.windows,FullScreenWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\FullScreenWnd.xaml.cs,ExecuteCommand,The following statement contains a magic number: switch (cmd)              {                  case WindowsCmdConsts.FullScreenWnd_Show:                      Dispatcher.BeginInvoke(new Action(delegate                                                            {                                                                Show();                                                                Activate();                                                                //Topmost = true;                                                                //Topmost = false;                                                                Focus();                                                                if (ServiceProvider.Settings.FullScreenInSecondaryMonitor)                                                                {                                                                    var allScreens =                                                                        System.Windows.Forms.Screen.AllScreens.ToList();                                                                    foreach (var r1 in from item in allScreens where !item.Primary select item.WorkingArea)                                                                    {                                                                        Left = r1.Left;                                                                        Top = r1.Top;                                                                        Width = r1.Width;                                                                        Height = r1.Height;                                                                        Topmost = true;                                                                        break;                                                                    }                                                                }                                                                WindowState = WindowState.Maximized;                                                                WindowStyle = WindowStyle.None;                                                            }));                      break;                  case WindowsCmdConsts.FullScreenWnd_ShowTimed:                      // wait for image preview to be generated                       var startTime = DateTime.Now;                      Thread.Sleep(150);                      while (                          ServiceProvider.Settings.SelectedBitmap != null && (ServiceProvider.Settings.SelectedBitmap.FileItem != null && ServiceProvider.Settings.SelectedBitmap.FileItem.Loading))                      {                          Thread.Sleep(10);                          if ((DateTime.Now - startTime).TotalSeconds > 3)                              break;                      }                      Dispatcher.BeginInvoke(new Action(delegate                                                            {                                                                try                                                                {                                                                    Show();                                                                    Activate();                                                                    Topmost = true;                                                                    Topmost = false;                                                                    Focus();                                                                    if (ServiceProvider.Settings.FullScreenInSecondaryMonitor)                                                                    {                                                                        var allScreens =                                                                            System.Windows.Forms.Screen.AllScreens.ToList();                                                                        foreach (var r1 in from item in allScreens where !item.Primary select item.WorkingArea)                                                                        {                                                                            Left = r1.Left;                                                                            Top = r1.Top;                                                                            Width = r1.Width;                                                                            Height = r1.Height;                                                                            Topmost = true;                                                                            break;                                                                        }                                                                    }                                                                    WindowState = WindowState.Maximized;                                                                    WindowStyle = WindowStyle.None;                                                                      _timer.Stop();                                                                    _timer.Interval = ServiceProvider.Settings.PreviewSeconds *                                                                                      1000;                                                                    _timer.Start();                                                                }                                                                catch (Exception ex)                                                                {                                                                    Log.Error("Full screen "' ex);                                                                }                                                            }));                      break;                  case WindowsCmdConsts.FullScreenWnd_Hide:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           _timer.Stop();                                                           Hide();                                                       }));                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           _timer.Stop();                                                           Hide();                                                           Close();                                                       }));                      break;              }
Magic Number,CameraControl.windows,FullScreenWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\FullScreenWnd.xaml.cs,ExecuteCommand,The following statement contains a magic number: switch (cmd)              {                  case WindowsCmdConsts.FullScreenWnd_Show:                      Dispatcher.BeginInvoke(new Action(delegate                                                            {                                                                Show();                                                                Activate();                                                                //Topmost = true;                                                                //Topmost = false;                                                                Focus();                                                                if (ServiceProvider.Settings.FullScreenInSecondaryMonitor)                                                                {                                                                    var allScreens =                                                                        System.Windows.Forms.Screen.AllScreens.ToList();                                                                    foreach (var r1 in from item in allScreens where !item.Primary select item.WorkingArea)                                                                    {                                                                        Left = r1.Left;                                                                        Top = r1.Top;                                                                        Width = r1.Width;                                                                        Height = r1.Height;                                                                        Topmost = true;                                                                        break;                                                                    }                                                                }                                                                WindowState = WindowState.Maximized;                                                                WindowStyle = WindowStyle.None;                                                            }));                      break;                  case WindowsCmdConsts.FullScreenWnd_ShowTimed:                      // wait for image preview to be generated                       var startTime = DateTime.Now;                      Thread.Sleep(150);                      while (                          ServiceProvider.Settings.SelectedBitmap != null && (ServiceProvider.Settings.SelectedBitmap.FileItem != null && ServiceProvider.Settings.SelectedBitmap.FileItem.Loading))                      {                          Thread.Sleep(10);                          if ((DateTime.Now - startTime).TotalSeconds > 3)                              break;                      }                      Dispatcher.BeginInvoke(new Action(delegate                                                            {                                                                try                                                                {                                                                    Show();                                                                    Activate();                                                                    Topmost = true;                                                                    Topmost = false;                                                                    Focus();                                                                    if (ServiceProvider.Settings.FullScreenInSecondaryMonitor)                                                                    {                                                                        var allScreens =                                                                            System.Windows.Forms.Screen.AllScreens.ToList();                                                                        foreach (var r1 in from item in allScreens where !item.Primary select item.WorkingArea)                                                                        {                                                                            Left = r1.Left;                                                                            Top = r1.Top;                                                                            Width = r1.Width;                                                                            Height = r1.Height;                                                                            Topmost = true;                                                                            break;                                                                        }                                                                    }                                                                    WindowState = WindowState.Maximized;                                                                    WindowStyle = WindowStyle.None;                                                                      _timer.Stop();                                                                    _timer.Interval = ServiceProvider.Settings.PreviewSeconds *                                                                                      1000;                                                                    _timer.Start();                                                                }                                                                catch (Exception ex)                                                                {                                                                    Log.Error("Full screen "' ex);                                                                }                                                            }));                      break;                  case WindowsCmdConsts.FullScreenWnd_Hide:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           _timer.Stop();                                                           Hide();                                                       }));                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           _timer.Stop();                                                           Hide();                                                           Close();                                                       }));                      break;              }
Magic Number,CameraControl.windows,FullScreenWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\FullScreenWnd.xaml.cs,ExecuteCommand,The following statement contains a magic number: switch (cmd)              {                  case WindowsCmdConsts.FullScreenWnd_Show:                      Dispatcher.BeginInvoke(new Action(delegate                                                            {                                                                Show();                                                                Activate();                                                                //Topmost = true;                                                                //Topmost = false;                                                                Focus();                                                                if (ServiceProvider.Settings.FullScreenInSecondaryMonitor)                                                                {                                                                    var allScreens =                                                                        System.Windows.Forms.Screen.AllScreens.ToList();                                                                    foreach (var r1 in from item in allScreens where !item.Primary select item.WorkingArea)                                                                    {                                                                        Left = r1.Left;                                                                        Top = r1.Top;                                                                        Width = r1.Width;                                                                        Height = r1.Height;                                                                        Topmost = true;                                                                        break;                                                                    }                                                                }                                                                WindowState = WindowState.Maximized;                                                                WindowStyle = WindowStyle.None;                                                            }));                      break;                  case WindowsCmdConsts.FullScreenWnd_ShowTimed:                      // wait for image preview to be generated                       var startTime = DateTime.Now;                      Thread.Sleep(150);                      while (                          ServiceProvider.Settings.SelectedBitmap != null && (ServiceProvider.Settings.SelectedBitmap.FileItem != null && ServiceProvider.Settings.SelectedBitmap.FileItem.Loading))                      {                          Thread.Sleep(10);                          if ((DateTime.Now - startTime).TotalSeconds > 3)                              break;                      }                      Dispatcher.BeginInvoke(new Action(delegate                                                            {                                                                try                                                                {                                                                    Show();                                                                    Activate();                                                                    Topmost = true;                                                                    Topmost = false;                                                                    Focus();                                                                    if (ServiceProvider.Settings.FullScreenInSecondaryMonitor)                                                                    {                                                                        var allScreens =                                                                            System.Windows.Forms.Screen.AllScreens.ToList();                                                                        foreach (var r1 in from item in allScreens where !item.Primary select item.WorkingArea)                                                                        {                                                                            Left = r1.Left;                                                                            Top = r1.Top;                                                                            Width = r1.Width;                                                                            Height = r1.Height;                                                                            Topmost = true;                                                                            break;                                                                        }                                                                    }                                                                    WindowState = WindowState.Maximized;                                                                    WindowStyle = WindowStyle.None;                                                                      _timer.Stop();                                                                    _timer.Interval = ServiceProvider.Settings.PreviewSeconds *                                                                                      1000;                                                                    _timer.Start();                                                                }                                                                catch (Exception ex)                                                                {                                                                    Log.Error("Full screen "' ex);                                                                }                                                            }));                      break;                  case WindowsCmdConsts.FullScreenWnd_Hide:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           _timer.Stop();                                                           Hide();                                                       }));                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           _timer.Stop();                                                           Hide();                                                           Close();                                                       }));                      break;              }
Magic Number,CameraControl.windows,FullScreenWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\FullScreenWnd.xaml.cs,ExecuteCommand,The following statement contains a magic number: switch (cmd)              {                  case WindowsCmdConsts.FullScreenWnd_Show:                      Dispatcher.BeginInvoke(new Action(delegate                                                            {                                                                Show();                                                                Activate();                                                                //Topmost = true;                                                                //Topmost = false;                                                                Focus();                                                                if (ServiceProvider.Settings.FullScreenInSecondaryMonitor)                                                                {                                                                    var allScreens =                                                                        System.Windows.Forms.Screen.AllScreens.ToList();                                                                    foreach (var r1 in from item in allScreens where !item.Primary select item.WorkingArea)                                                                    {                                                                        Left = r1.Left;                                                                        Top = r1.Top;                                                                        Width = r1.Width;                                                                        Height = r1.Height;                                                                        Topmost = true;                                                                        break;                                                                    }                                                                }                                                                WindowState = WindowState.Maximized;                                                                WindowStyle = WindowStyle.None;                                                            }));                      break;                  case WindowsCmdConsts.FullScreenWnd_ShowTimed:                      // wait for image preview to be generated                       var startTime = DateTime.Now;                      Thread.Sleep(150);                      while (                          ServiceProvider.Settings.SelectedBitmap != null && (ServiceProvider.Settings.SelectedBitmap.FileItem != null && ServiceProvider.Settings.SelectedBitmap.FileItem.Loading))                      {                          Thread.Sleep(10);                          if ((DateTime.Now - startTime).TotalSeconds > 3)                              break;                      }                      Dispatcher.BeginInvoke(new Action(delegate                                                            {                                                                try                                                                {                                                                    Show();                                                                    Activate();                                                                    Topmost = true;                                                                    Topmost = false;                                                                    Focus();                                                                    if (ServiceProvider.Settings.FullScreenInSecondaryMonitor)                                                                    {                                                                        var allScreens =                                                                            System.Windows.Forms.Screen.AllScreens.ToList();                                                                        foreach (var r1 in from item in allScreens where !item.Primary select item.WorkingArea)                                                                        {                                                                            Left = r1.Left;                                                                            Top = r1.Top;                                                                            Width = r1.Width;                                                                            Height = r1.Height;                                                                            Topmost = true;                                                                            break;                                                                        }                                                                    }                                                                    WindowState = WindowState.Maximized;                                                                    WindowStyle = WindowStyle.None;                                                                      _timer.Stop();                                                                    _timer.Interval = ServiceProvider.Settings.PreviewSeconds *                                                                                      1000;                                                                    _timer.Start();                                                                }                                                                catch (Exception ex)                                                                {                                                                    Log.Error("Full screen "' ex);                                                                }                                                            }));                      break;                  case WindowsCmdConsts.FullScreenWnd_Hide:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           _timer.Stop();                                                           Hide();                                                       }));                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           _timer.Stop();                                                           Hide();                                                           Close();                                                       }));                      break;              }
Magic Number,CameraControl.windows,LiveViewManager,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\LiveViewManager.cs,LiveViewManager,The following statement contains a magic number: var plugin = TimedBroadcasterPlugin.CreateInstance(                      "F752DC1B-438E-4014-914B-48F249D4C8F1"' null' 1380' 112' 50);
Magic Number,CameraControl.windows,LiveViewManager,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\LiveViewManager.cs,LiveViewManager,The following statement contains a magic number: var plugin = TimedBroadcasterPlugin.CreateInstance(                      "F752DC1B-438E-4014-914B-48F249D4C8F1"' null' 1380' 112' 50);
Magic Number,CameraControl.windows,LiveViewManager,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\LiveViewManager.cs,LiveViewManager,The following statement contains a magic number: var plugin = TimedBroadcasterPlugin.CreateInstance(                      "F752DC1B-438E-4014-914B-48F249D4C8F1"' null' 1380' 112' 50);
Magic Number,CameraControl.windows,LiveViewManager,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\LiveViewManager.cs,ExecuteCommand,The following statement contains a magic number: switch (cmd)                  {                      case WindowsCmdConsts.LiveViewWnd_Show:                          {                              if (!_register.ContainsKey(param))                              {                                  Application.Current.Dispatcher.Invoke(new Action(delegate                                  {                                      LiveViewWnd wnd = new LiveViewWnd();                                      _register.Add(param' wnd);                                      wnd.Owner = ServiceProvider.PluginManager.SelectedWindow as Window;                                  }));                              }                              NikonBase nikonBase = param as NikonBase;                              if (nikonBase != null && ServiceProvider.Settings.EasyLiveViewControl)                              {                                  CameraPreset preset = new CameraPreset();                                  preset.Get(nikonBase);                                  if (!_presets.ContainsKey(nikonBase))                                      _presets.Add(nikonBase' preset);                                  else                                      _presets[nikonBase] = preset;                                  if (nikonBase.ShutterSpeed.Value == "Bulb")                                  {                                      nikonBase.ShutterSpeed.Value =                                          nikonBase.ShutterSpeed.Values[nikonBase.ShutterSpeed.Values.Count / 2];                                  }                                  nikonBase.FocusMode.Value = nikonBase.FocusMode.Values[0];                                  nikonBase.FNumber.Value = nikonBase.FNumber.Values[0];                              }                              _register[param].ExecuteCommand(cmd' param);                          }                          break;                      case WindowsCmdConsts.LiveViewWnd_Hide:                      {                          if (_register.ContainsKey(param))                              _register[param].ExecuteCommand(cmd' param);                          var nikonBase = param as NikonBase;                          if (ServiceProvider.Settings.EasyLiveViewControl)                          {                              if (nikonBase != null && _presets.ContainsKey(nikonBase))                              {                                  nikonBase.ShutterSpeed.Value = _presets[nikonBase].GetValue("ShutterSpeed");                                  nikonBase.FNumber.Value = _presets[nikonBase].GetValue("FNumber");                                  nikonBase.FocusMode.Value = _presets[nikonBase].GetValue("FocusMode");                              }                          }                      }                          break;                      case CmdConsts.All_Minimize:                      case CmdConsts.All_Close:                          foreach (var liveViewWnd in _register)                          {                              liveViewWnd.Value.ExecuteCommand(cmd' param);                          }                          break;                      default:                          if (cmd.StartsWith("LiveView"))                          {                              foreach (var liveViewWnd in _register)                              {                                  liveViewWnd.Value.ExecuteCommand(cmd' param);                              }                          }                          break;                  }
Magic Number,CameraControl.windows,LiveViewWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\LiveViewWnd.xaml.cs,LiveViewManager_PreviewLoaded,The following statement contains a magic number: Task.Factory.StartNew(() =>              {                  Thread.Sleep(500);                  App.Current.BeginInvoke(zoomAndPanControl.ScaleToFit);              });
Magic Number,CameraControl.windows,LiveViewWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\LiveViewWnd.xaml.cs,MetroWindow_PreviewKeyDown,The following statement contains a magic number: (DateTime.Now - _focusMoveTime).TotalMilliseconds < 200
Magic Number,CameraControl.windows,LiveViewWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\LiveViewWnd.xaml.cs,zoomAndPanControl_MouseDoubleClick,The following statement contains a magic number: zoomAndPanControl.ZoomAboutPoint(4' curContentMousePoint);
Magic Number,CameraControl.windows,MultipleCameraWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\MultipleCameraWnd.xaml.cs,CapturePhotos,The following statement contains a magic number: Thread thread = new Thread(new ThreadStart(delegate                                                             {                                                                 while (CamerasAreBusy())                                                                 {                                                                 }                                                                 try                                                                 {                                                                     if (UseExternal)                                                                     {                                                                         if (SelectedConfig != null)                                                                         {                                                                             ServiceProvider.ExternalDeviceManager.                                                                                 OpenShutter(SelectedConfig);                                                                             Thread.Sleep(300);                                                                             ServiceProvider.ExternalDeviceManager.                                                                                 CloseShutter(SelectedConfig);                                                                         }                                                                     }                                                                     else                                                                     {                                                                         CameraHelper.CaptureAll(DelaySec);                                                                     }                                                                 }                                                                 catch (Exception exception)                                                                 {                                                                     Log.Error(exception);                                                                 }                                                                   Thread.Sleep(DelaySec);                                                                 if (_photocounter < NumOfPhotos)                                                                     _timer.Start();                                                                 else                                                                 {                                                                     StopCapture();                                                                 }                                                             }));
Magic Number,CameraControl.windows,MultipleCameraWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\MultipleCameraWnd.xaml.cs,Format,The following statement contains a magic number: thread.Join(5 * 1000);
Magic Number,CameraControl.windows,MultipleCameraWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\MultipleCameraWnd.xaml.cs,Format,The following statement contains a magic number: thread.Join(5 * 1000);
Magic Number,CameraControl.windows,MultipleCameraWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\MultipleCameraWnd.xaml.cs,FormatCard,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,CameraControl.windows,PreviewWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\PreviewWnd.xaml.cs,Image_MouseMove,The following statement contains a magic number: var renderTargetBitmap = new RenderTargetBitmap((int) AssociatedObject.ActualWidth'                  (int) AssociatedObject.ActualHeight'                  96' 96' PixelFormats.Default);
Magic Number,CameraControl.windows,PreviewWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\PreviewWnd.xaml.cs,Image_MouseMove,The following statement contains a magic number: var renderTargetBitmap = new RenderTargetBitmap((int) AssociatedObject.ActualWidth'                  (int) AssociatedObject.ActualHeight'                  96' 96' PixelFormats.Default);
Magic Number,CameraControl.windows,PreviewWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\PreviewWnd.xaml.cs,Image_MouseMove,The following statement contains a magic number: var pixels = new byte[4];
Magic Number,CameraControl.windows,PreviewWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\PreviewWnd.xaml.cs,Image_MouseMove,The following statement contains a magic number: croppedBitmap.CopyPixels(pixels' 4' 0);
Magic Number,CameraControl.windows,PreviewWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\PreviewWnd.xaml.cs,Image_MouseMove,The following statement contains a magic number: var SelectedColor = Color.FromArgb(255' pixels[2]' pixels[1]' pixels[0]);
Magic Number,CameraControl.windows,PreviewWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\PreviewWnd.xaml.cs,Image_MouseMove,The following statement contains a magic number: var SelectedColor = Color.FromArgb(255' pixels[2]' pixels[1]' pixels[0]);
Magic Number,CameraControl.windows,PreviewWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\PreviewWnd.xaml.cs,Image_MouseMove,The following statement contains a magic number: TextBox.Text = "#" + SelectedColor.ToString().Substring(3);
Magic Number,CameraControl.windows,PropertyWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\PropertyWnd.xaml.cs,btn_set_Click,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,CameraControl.XSplit,BroadcasterPlugin,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\XSplit\BroadcasterPlugin.cs,RenderVisual,The following statement contains a magic number: var bmp = new RenderTargetBitmap(width' height' 96' 96' PixelFormats.Default);
Magic Number,CameraControl.XSplit,BroadcasterPlugin,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\XSplit\BroadcasterPlugin.cs,RenderVisual,The following statement contains a magic number: var bmp = new RenderTargetBitmap(width' height' 96' 96' PixelFormats.Default);
Magic Number,CameraControl.XSplit,BroadcasterPlugin,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\XSplit\BroadcasterPlugin.cs,RenderVisual,The following statement contains a magic number: Task.Factory.StartNew(                      () =>                          {                              var encoder = new BmpBitmapEncoder();                              encoder.Frames.Add(BitmapFrame.Create(bmp));                                using (var stream = new MemoryStream())                              {                                  encoder.Save(stream);                                    stream.Position = 0;                                    byte[] bytes = stream.ToArray();                                    // Length of output data we're going to send.                                  int length = width * height * 4;                                    // Allocate memory for bitmap transfer to COM                                  IntPtr dataptr = Marshal.AllocCoTaskMem(length);                                  Marshal.Copy(bytes' bytes.Length - length' dataptr' length);                                  this.xsplit.SendFrame((uint)width' (uint)height' dataptr.ToInt32());                                    // Send to broadcaster                                  Marshal.FreeCoTaskMem(dataptr);                              }                          });
Magic Number,CameraControl.XSplit,BroadcasterPlugin,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\XSplit\BroadcasterPlugin.cs,DownloadVisual,The following statement contains a magic number: Task.Factory.StartNew(                      () =>                      {                          try                          {                                if (! ServiceProvider.DeviceManager.LiveViewImage.ContainsKey(                                  ServiceProvider.DeviceManager.SelectedCameraDevice))                                  return;                              if (                                  ServiceProvider.DeviceManager.LiveViewImage[                                      ServiceProvider.DeviceManager.SelectedCameraDevice] == null)                                  return;                                var ms = new MemoryStream(ServiceProvider.DeviceManager.LiveViewImage[ServiceProvider.DeviceManager.SelectedCameraDevice]);                                BitmapImage src = new BitmapImage();                                src.BeginInit();                              src.CacheOption = BitmapCacheOption.OnLoad;                              src.StreamSource = ms;                              src.EndInit();                              WriteableBitmap wb = new WriteableBitmap(new FormatConvertedBitmap(src' PixelFormats.Bgra32' null' 0));                              width = wb.PixelWidth;                              height = wb.PixelHeight;                              var encoder = new BmpBitmapEncoder();                              encoder.Frames.Add(BitmapFrame.Create(wb));                                using (var stream = new MemoryStream())                              {                                  encoder.Save(stream);                                    stream.Position = 0;                                    byte[] bytes = stream.ToArray();                                    // Length of output data we're going to send.                                  int length = width * height * 4;                                    // Allocate memory for bitmap transfer to COM                                  IntPtr dataptr = Marshal.AllocCoTaskMem(length);                                  Marshal.Copy(bytes' bytes.Length - length' dataptr' length);                                  this.xsplit.SendFrame((uint)width' (uint)height' dataptr.ToInt32());                                    // Send to broadcaster                                  Marshal.FreeCoTaskMem(dataptr);                              }                          }                          catch (Exception)                          {                              }                      });
Missing Default,CameraControl.Controls,TimeControl,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Controls\TimeControl.xaml.cs,Down,The following switch statement is missing a default case: switch (((Grid)sender).Name)              {                  case "sec":                      if (args.Key == Key.Up)                          this.Seconds++;                      if (args.Key == Key.Down)                          this.Seconds--;                      break;                    case "min":                      if (args.Key == Key.Up)                          this.Minutes++;                      if (args.Key == Key.Down)                          this.Minutes--;                      break;                    case "hour":                      if (args.Key == Key.Up)                          this.Hours++;                      if (args.Key == Key.Down)                          this.Hours--;                      break;              }
Missing Default,CameraControl.Layouts,LayoutBase,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,TriggerEvent,The following switch statement is missing a default case: switch (cmd)                  {                      case WindowsCmdConsts.Next_Image:                          if (ImageLIst.SelectedIndex <                              ImageLIst.Items.Count - 1)                          {                              FileItem item =                                  ImageLIst.SelectedItem as FileItem;                              if (item != null)                              {                                  int ind = ImageLIst.Items.IndexOf(item);                                  ImageLIst.SelectedIndex = ind + 1;                              }                              item = ImageLIst.SelectedItem as FileItem;                              if (item != null)                                  ImageLIst.ScrollIntoView(item);                          }                          break;                      case WindowsCmdConsts.Prev_Image:                          if (ImageLIst.SelectedIndex > 0)                          {                              FileItem item =                                  ImageLIst.SelectedItem as FileItem;                              if (item != null)                              {                                  int ind = ImageLIst.Items.IndexOf(item);                                  ImageLIst.SelectedIndex = ind - 1;                              }                              item = ImageLIst.SelectedItem as FileItem;                              if (item != null)                                  ImageLIst.ScrollIntoView(item);                          }                          break;                      case WindowsCmdConsts.Like_Image:                          if (ImageLIst.SelectedItem != null)                          {                              FileItem item = null;                              if (o != null)                              {                                  item = ServiceProvider.Settings.DefaultSession.GetByName(o as string);                              }                              else                              {                                  item = ImageLIst.SelectedItem as FileItem;                              }                              if (item != null)                              {                                  item.IsLiked = !item.IsLiked;                              }                          }                          break;                      case WindowsCmdConsts.Unlike_Image:                          if (ImageLIst.SelectedItem != null)                          {                              FileItem item = null;                              if (o != null)                              {                                  item =                                      ServiceProvider.Settings.DefaultSession                                          .GetByName(o as string);                              }                              else                              {                                  item = ImageLIst.SelectedItem as FileItem;                              }                              if (item != null)                              {                                  item.IsUnLiked = !item.IsUnLiked;                              }                          }                          break;                      case WindowsCmdConsts.Del_Image:                          {                              DeleteItem();                          }                          break;                      case WindowsCmdConsts.SelectAll_Image:                          {                              ServiceProvider.Settings.DefaultSession.SelectAll();                          }                          break;                      case WindowsCmdConsts.Select_Image:                          FileItem fileItem = o as FileItem;                          if (fileItem != null)                          {                              ImageLIst.SelectedValue = fileItem;                              ImageLIst.ScrollIntoView(fileItem);                          }                          break;                      case WindowsCmdConsts.Refresh_Image:                          RefreshImage();                          break;                      case WindowsCmdConsts.Zoom_Image_Fit:                          ZoomAndPanControl.ScaleToFit();                          break;                      case WindowsCmdConsts.Zoom_Image_60:                          ZoomToFocus();                          LoadFullRes();                          ZoomAndPanControl.ZoomTo(0.6);                          break;                      case WindowsCmdConsts.Zoom_Image_100:                          ZoomToFocus();                          LoadFullRes();                          ZoomAndPanControl.ZoomTo(1.0);                          break;                      case WindowsCmdConsts.Zoom_Image_200:                          ZoomToFocus();                          LoadFullRes();                          ZoomAndPanControl.ZoomTo(2.0);                          break;                      case WindowsCmdConsts.RotateLeft:                          {                              FileItem item =                                  ImageLIst.SelectedItem as FileItem;                              if (item != null)                              {                                  item.Rotation--;                                }                          }                          break;                      case WindowsCmdConsts.RotateRight:                          {                              FileItem item =                                  ImageLIst.SelectedItem as FileItem;                              if (item != null)                              {                                  item.Rotation++;                              }                          }                          break;                      case WindowsCmdConsts.ViewExternal:                          OpenInExternalViewer();                          break;                      case WindowsCmdConsts.ViewExplorer:                          OpenInExplorer();                          break;                      case WindowsCmdConsts.RefreshDisplay:                          if (LayoutViewModel.ZoomIndex == 0)                              ZoomAndPanControl.ScaleToFit();                          break;                  }
Missing Default,CameraControl,App,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\App.xaml.cs,WindowsManager_Event,The following switch statement is missing a default case: switch (cmd)                  {                      case CmdConsts.Capture:                          Thread thread = new Thread(new ThreadStart(CameraHelper.Capture));                          thread.Start();                          break;                      case CmdConsts.CaptureNoAf:                          CameraHelper.CaptureNoAf();                          break;                      case CmdConsts.CaptureAll:                          CameraHelper.CaptureAll(0);                          break;                      case CmdConsts.StartBulb:                          if (ServiceProvider.DeviceManager.SelectedCameraDevice.GetCapability(CapabilityEnum.Bulb))                          {                              ServiceProvider.DeviceManager.LastCapturedImage[ServiceProvider.DeviceManager.SelectedCameraDevice] = "-";                              ServiceProvider.DeviceManager.SelectedCameraDevice.IsBusy = true;                              ServiceProvider.DeviceManager.SelectedCameraDevice.LockCamera();                              ServiceProvider.DeviceManager.SelectedCameraDevice.StartBulbMode();                          }                          else                          {                              throw new Exception(TranslationStrings.MsgBulbModeNotSupported);                          }                          break;                      case CmdConsts.EndBulb:                          ServiceProvider.DeviceManager.SelectedCameraDevice.EndBulbMode();                          break;                      case CmdConsts.NextSeries:                          if (ServiceProvider.Settings != null) ServiceProvider.Settings.DefaultSession.Series++;                          break;                  }
Missing Default,CameraControl,App,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\App.xaml.cs,WindowsManager_Event,The following switch statement is missing a default case: switch (cmd)                      {                          //case CmdConsts.ResetDevice:                          //        device.ResetDevice();                          //    break;                          case CmdConsts.NextAperture:                              device.FNumber?.NextValue();                              break;                          case CmdConsts.PrevAperture:                              device.FNumber?.PrevValue();                              break;                          case CmdConsts.NextIso:                              device.IsoNumber?.NextValue();                              break;                          case CmdConsts.PrevIso:                              device.IsoNumber?.PrevValue();                              break;                          case CmdConsts.NextShutter:                              device.ShutterSpeed?.NextValue();                              break;                          case CmdConsts.PrevShutter:                              device.ShutterSpeed?.PrevValue();                              break;                          case CmdConsts.NextWhiteBalance:                              device.WhiteBalance?.NextValue();                              break;                          case CmdConsts.PrevWhiteBalance:                              device.WhiteBalance?.PrevValue();                              break;                          case CmdConsts.NextExposureCompensation:                              device.ExposureCompensation?.NextValue();                              break;                          case CmdConsts.PrevExposureCompensation:                              device.ExposureCompensation?.PrevValue();                              break;                          case CmdConsts.NextCamera:                              ServiceProvider.DeviceManager.SelectNextCamera();                              break;                          case CmdConsts.PrevCamera:                              ServiceProvider.DeviceManager.SelectPrevCamera();                              break;                          case CmdConsts.StartZoomIn:                              device.StartZoom(ZoomDirection.In);                              break;                          case CmdConsts.StopZoomIn:                              device.StopZoom(ZoomDirection.In);                              break;                        }
Missing Default,CameraControl,MainWindow,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,WindowsManager_Event,The following switch statement is missing a default case: switch (cmd)              {                  case CmdConsts.SortCameras:                      SortCameras();                      break;                  case WindowsCmdConsts.MainWnd_Message:                      this.ShowMessageAsync(""' o.ToString());                      break;                  case WindowsCmdConsts.SetLayout:                      SetLayout(o.ToString());                      break;                  case WindowsCmdConsts.Restore:                      Dispatcher.BeginInvoke(new Action(delegate                      {                          try                          {                              this.Show();                              this.WindowState = WindowState.Normal;                              this.Activate();                              this.Focus();                          }                          catch (Exception e)                          {                              Log.Debug("Unable to restore window"' e);                          }                      }));                      break;                  case CmdConsts.All_Minimize:                      Dispatcher.Invoke(new Action(delegate                      {                          WindowState = WindowState.Minimized;                      }));                      break;              }
Missing Default,CameraControl,MainWindow,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,SetLayout,The following switch statement is missing a default case: switch (type)              {                  case LayoutTypeEnum.Normal:                      {                          StackLayout.Children.Clear();                          LayoutNormal control = new LayoutNormal();                          StackLayout.Children.Add(control);                      }                      break;                  case LayoutTypeEnum.Grid:                      {                          StackLayout.Children.Clear();                          LayoutGrid control = new LayoutGrid();                          StackLayout.Children.Add(control);                      }                      break;                  case LayoutTypeEnum.GridRight:                      {                          StackLayout.Children.Clear();                          LayoutGridRight control = new LayoutGridRight();                          StackLayout.Children.Add(control);                      }                      break;              }
Missing Default,CameraControl.ViewModel,BracketingViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BracketingViewModel.cs,_timer_Elapsed,The following switch statement is missing a default case: switch (Mode)                  {                      case 0:                          {                              Camera.ExposureCompensation.Value = Values[Counter];                              CurValue = Values[Counter];                          }                          break;                      case 1:                          {                              Camera.FNumber.Value = Values[Counter];                              CurValue = Values[Counter];                          }                          break;                      case 2:                          {                              Camera.IsoNumber.Value = Values[Counter];                              CurValue = Values[Counter];                          }                          break;                  }
Missing Default,CameraControl.ViewModel,BracketingViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BracketingViewModel.cs,Start,The following switch statement is missing a default case: switch (Mode)                  {                      case 0:                          DefValue = Camera.ExposureCompensation.Value;                          break;                      case 1:                          if (!Camera.FNumber.IsEnabled)                          {                              Error = TranslationStrings.LabelWrongFNumber;                              return;                          }                          DefValue = Camera.FNumber.Value;                          break;                      case 2:                          if (Camera.Mode.Value != "M")                          {                              Error = TranslationStrings.LabelBracketingMMode;                          }                          DefValue = Camera.IsoNumber.Value;                          break;                  }
Missing Default,CameraControl.ViewModel,BracketingViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BracketingViewModel.cs,Stop,The following switch statement is missing a default case: switch (Mode)              {                  case 0:                      Camera.ExposureCompensation.Value = DefValue;                      break;                  case 1:                      Camera.FNumber.Value = DefValue;                      break;                  case 2:                      Camera.IsoNumber.Value = DefValue;                      break;              }
Missing Default,CameraControl.ViewModel,BracketingViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\BracketingViewModel.cs,SetMessage,The following switch statement is missing a default case: switch (Mode)              {                  case 0:                      {                          var vals = GetValues(ExpLowList.ToList()' ExpLow' ExpHigh' ExpCaptureCount);                          if (vals == null || vals.Count == 0)                              return;                          Values = vals;                          foreach (var val in vals)                          {                              Message += (val + "' ");                          }                      }                      break;                  case 1:                      {                          var vals = GetValues(FLowList.ToList()' FLow' FHigh' FCaptureCount);                          if (vals == null || vals.Count == 0)                              return;                          Values = vals;                          foreach (var val in vals)                          {                              Message += (val + "' ");                          }                      }                      break;                  case 2:                      {                          var vals = GetValues(IsoLowList.ToList()' IsoLow' IsoHigh' IsoCaptureCount);                          if (vals == null || vals.Count == 0)                              return;                          Values = vals;                          foreach (var val in vals)                          {                              Message += (val + "' ");                          }                      }                      break;              }
Missing Default,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManagerEvent,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.LiveViewWnd_StartMotionDetection:                      DetectMotion = true;                      TriggerOnMotion = true;                      MotionAction = 1;                      break;                  case WindowsCmdConsts.LiveViewWnd_StopMotionDetection:                      DetectMotion = false;                      break;                  case WindowsCmdConsts.LiveViewWnd_Maximize:                      ShowLeftTab = false;                      break;                  case WindowsCmdConsts.LiveViewWnd_StartRecord:                      RecordMovie();                      break;                  case WindowsCmdConsts.LiveViewWnd_StopRecord:                      StopRecordMovie();                      break;                }
Missing Default,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManager_Event1,The following switch statement is missing a default case: switch (vals[1])                      {                          case "CaptureTime":                              SnapshotCaptureTime = GetValue(vals' SnapshotCaptureTime);                              break;                          case "NumOfPhotos":                              SnapshotCaptureCount = GetValue(vals' SnapshotCaptureCount);                              break;                      }
Missing Default,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManager_Event,The following switch statement is missing a default case: switch (cmd)              {                  case CmdConsts.LiveView_Capture:                      CaptureInThread();                      break;                  case CmdConsts.LiveView_CaptureSnapShot:                      CaptureSnapshot();                      break;                  case CmdConsts.LiveView_Focus_Move_Right:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX + ServiceProvider.Settings.FocusMoveStep' LiveViewData.FocusY);                      }                      break;                  case CmdConsts.LiveView_Focus_Move_Left:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX - ServiceProvider.Settings.FocusMoveStep' LiveViewData.FocusY);                      }                      break;                  case CmdConsts.LiveView_Focus_Move_Up:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX' LiveViewData.FocusY - ServiceProvider.Settings.FocusMoveStep);                      }                      break;                  case CmdConsts.LiveView_Focus_Move_Down:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX' LiveViewData.FocusY + ServiceProvider.Settings.FocusMoveStep);                      }                      break;                  case CmdConsts.LiveView_Zoom_All:                      CameraDevice.LiveViewImageZoomRatio.SetValue(0);                      break;                  case CmdConsts.LiveView_Zoom_25:                      CameraDevice.LiveViewImageZoomRatio.SetValue(1);                      break;                  case CmdConsts.LiveView_Zoom_33:                      CameraDevice.LiveViewImageZoomRatio.SetValue(2);                      break;                  case CmdConsts.LiveView_Zoom_50:                      CameraDevice.LiveViewImageZoomRatio.SetValue(3);                      break;                  case CmdConsts.LiveView_Zoom_66:                      CameraDevice.LiveViewImageZoomRatio.SetValue(4);                      break;                  case CmdConsts.LiveView_Zoom_100:                      CameraDevice.LiveViewImageZoomRatio.SetValue(5);                      break;                  case CmdConsts.LiveView_Focus_M:                      FocusMCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_P:                      FocusPCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_MM:                      FocusMMCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_PP:                      FocusPPCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_MMM:                      FocusMMMCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_PPP:                      FocusPPPCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus:                      AutoFocus();                      break;                  case CmdConsts.LiveView_Preview:                      PreviewCommand.Execute(null);                      break;                  case CmdConsts.LiveView_NoProcess:                      NoProcessing = true;                      break;              }
Missing Default,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following switch statement is missing a default case: switch (RotationIndex)              {                  case 0:                      Rotation = 0;                      break;                  case 1:                      Rotation = 90;                      break;                  case 2:                      Rotation = 180;                      break;                  case 3:                      Rotation = 270;                      break;                  case 4:                      Rotation = LiveViewData.Rotation;                      break;              }
Missing Default,CameraControl.ViewModel,LiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,_focusStackingTimer_Elapsed,The following switch statement is missing a default case: switch (FocusStepSize)                          {                              case 0:                                  SetFocus(dir * (SimpleManualFocus ? ServiceProvider.Settings.SmallFocusStepCanon : ServiceProvider.Settings.SmalFocusStep));                                  break;                              case 1:                                  SetFocus(dir * (SimpleManualFocus ? ServiceProvider.Settings.MediumFocusStepCanon : ServiceProvider.Settings.MediumFocusStep));                                  break;                              case 2:                                  SetFocus(dir * (SimpleManualFocus ? ServiceProvider.Settings.LargeFocusStepCanon : ServiceProvider.Settings.LargeFocusStep));                                  break;                          }
Missing Default,CameraControl.ViewModel,MultipleLiveViewViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\MultipleLiveViewViewModel.cs,WindowsManager_Event,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.MultipleLiveView_Start:                      StartLiveView();                      break;                  case WindowsCmdConsts.MultipleLiveView_Stop:                      StopLiveView();                      break;              }
Missing Default,CameraControl.ViewModel,TimelapseViewModel,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\ViewModel\TimelapseViewModel.cs,WindowsManager_Event,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.TimeLapse_Start:                      StartL();                      break;                  case WindowsCmdConsts.TimeLapse_Stop:                      StopL();                      break;                  case CmdConsts.All_Close:                      sched?.Shutdown();                      break;              }
Missing Default,CameraControl.windows,AstroLiveViewWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\AstroLiveViewWnd.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.AstroLiveViewWnd_Show:                      CameraDevice = param as ICameraDevice;                      if (CameraDevice == null)                          return;                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           DataContext = new AstroLiveViewViewModel(CameraDevice'this);                                                           Owner = ServiceProvider.PluginManager.SelectedWindow as Window;                                                           Show();                                                           Activate();                                                           Focus();                                                       }));                      break;                  case WindowsCmdConsts.AstroLiveViewWnd_Hide:                      try                      {                          ((AstroLiveViewViewModel)DataContext).UnInit();                      }                      catch (Exception exception)                      {                          Log.Error("Unable to stop live view"' exception);                      }                      Hide();                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           Hide();                                                           Close();                                                       }));                      break;              }
Missing Default,CameraControl.windows,BarcodeWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\BarcodeWnd.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.BarcodeWnd_Show:                      Dispatcher.Invoke(new Action(delegate                      {                          if (DataContext == null)                              DataContext = new BarcodeViewModel();                          Owner = ServiceProvider.PluginManager.SelectedWindow as Window;                          Show();                          Activate();                          Focus();                      }));                      break;                  case WindowsCmdConsts.BarcodeWnd_Hide:                      Hide();                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                      {                          Hide();                          Close();                      }));                      break;              }
Missing Default,CameraControl.windows,BrowseWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\BrowseWnd.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.BrowseWnd_Show:                      ServiceProvider.Settings.PropertyChanged += Settings_PropertyChanged;                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           Owner = ServiceProvider.PluginManager.SelectedWindow as Window;                                                           SelectedPhotoSession = ServiceProvider.Settings.DefaultSession;                                                           Show();                                                           Activate();                                                           Focus();                                                       }));                      break;                  case WindowsCmdConsts.BrowseWnd_Hide:                      {                          ServiceProvider.Settings.PropertyChanged -= Settings_PropertyChanged;                          Dispatcher.Invoke(new Action(Hide));                      }                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           Hide();                                                           Close();                                                       }));                      break;              }
Missing Default,CameraControl.windows,BulbWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.BulbWnd_Show:                      CameraDevice = param as ICameraDevice;                      if (CameraDevice == null)                          CameraDevice = ServiceProvider.DeviceManager.SelectedCameraDevice;                      if (CameraDevice == null)                      {                          Log.Debug("No camera for Bulb window !");                          return;                      }                      Dispatcher.Invoke(new Action(delegate                      {                          try                          {                              Init();                              CameraDevice.PhotoCaptured += CameraDevice_PhotoCaptured;                              ServiceProvider.ScriptManager.OutPutMessageReceived += ScriptManager_OutPutMessageReceived;                              //Owner = ServiceProvider.PluginManager.SelectedWindow as Window;                              Show();                              Activate();                              Focus();                          }                          catch (Exception e)                          {                              Log.Error("Bulb window initialization error "' e);                          }                      }));                      break;                  case WindowsCmdConsts.BulbWnd_Hide:                      if (_captureTimer.Enabled)                      {                          StopCaptureThread();                          CameraDevice.UnLockCamera();                      }                      _captureTimer.Stop();                      _waitTimer.Stop();                      ServiceProvider.ScriptManager.OutPutMessageReceived -= ScriptManager_OutPutMessageReceived;                      CameraDevice.PhotoCaptured -= CameraDevice_PhotoCaptured;                      ServiceProvider.ScriptManager.Save(DefaultScript' _defaultScriptFile);                      Dispatcher.Invoke(Hide);                      break;                  case CmdConsts.All_Close:                      ServiceProvider.ScriptManager.OutPutMessageReceived -= ScriptManager_OutPutMessageReceived;                      CameraDevice.PhotoCaptured -= CameraDevice_PhotoCaptured;                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           Hide();                                                           Close();                                                       }));                      break;                  case WindowsCmdConsts.BulbCaptureStart:                      if (IsVisible)                          btn_start_Click(null' null);                      break;                  case WindowsCmdConsts.BulbCaptureStop:                      if (IsVisible)                          btn_stop_Click(null' null);                      break;                  case WindowsCmdConsts.BulbScriptStart:                      if (IsVisible)                          button1_Click(null' null);                      break;                  case WindowsCmdConsts.BulbScriptStop:                      if (IsVisible)                          btn_stop_script_Click(null' null);                      break;              }
Missing Default,CameraControl.windows,BulbWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (vals[1])                      {                          case "CaptureTime":                              CaptureTime = GetValue(vals' CaptureTime);                               break;                          case "NumOfPhotos":                              NumOfPhotos = GetValue(vals' NumOfPhotos);                              break;                          case "WaitTime":                              WaitTime = GetValue(vals' WaitTime);                              break;                          case "PhdWait":                              PhdWait = GetValue(vals' PhdWait);                              break;                          case "AutomaticGuiding":                              AutomaticGuiding = GetValue(vals' 0) == 1;                              break;                          case "PhdType":                              PhdType = GetValue(vals' PhdType);                              break;                      }
Missing Default,CameraControl.windows,BulbWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,PhdGuiding,The following switch statement is missing a default case: switch (movetype)                  {                      case 1:                          SendReceiveTest2(socket' 3);                          break;                      case 2:                          SendReceiveTest2(socket' 4);                          break;                      case 3:                          SendReceiveTest2(socket' 5);                          break;                      case 4:                          SendReceiveTest2(socket' 12);                          break;                      case 5:                          SendReceiveTest2(socket' 13);                          break;                  }
Missing Default,CameraControl.windows,CameraPropertyWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\CameraPropertyWnd.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.CameraPropertyWnd_Show:                      ((CameraPropertyViewModel)DataContext).Init();                        _cameraDevice = param as ICameraDevice;                      if (_cameraDevice == null)                          return;                      CameraProperty = _cameraDevice.LoadProperties();                      CameraProperty.BeginEdit();                      Dispatcher.Invoke(new Action(delegate                      {                          Owner = ServiceProvider.PluginManager.SelectedWindow as Window;                          Show();                          Activate();                          Focus();                      }));                      break;                  case WindowsCmdConsts.CameraPropertyWnd_Hide:                      CameraProperty = null;                      Hide();                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                                                     {                                                         Hide();                                                         Close();                                                     }));                      break;              }
Missing Default,CameraControl.windows,DownloadPhotosWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\DownloadPhotosWnd.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.DownloadPhotosWnd_Show:                      Dispatcher.BeginInvoke(new Action(delegate                                                       {                                                           if (dlg.IsVisible)                                                               return;                                                           Owner = ServiceProvider.PluginManager.SelectedWindow as Window;                                                           CameraDevice = param as ICameraDevice;                                                           Title = TranslationStrings.DownloadWindowTitle + "-" +                                                                   ServiceProvider.Settings.CameraProperties.Get(                                                                       CameraDevice).                                                                       DeviceName;                                                           if (param == null)                                                               return;                                                           Show();                                                           Activate();                                                           Focus();                                                           dlg.Show();                                                           Items.Clear();                                                           FreeResources();                                                           Thread thread = new Thread(PopulateImageList);                                                           thread.Start();                                                       }));                      break;                  case WindowsCmdConsts.DownloadPhotosWnd_Hide:                      Dispatcher.Invoke(new Action(delegate                      {                          Hide();                          FreeResources();                      }));                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           Hide();                                                           Close();                                                       }));                      break;              }
Missing Default,CameraControl.windows,FullScreenWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\FullScreenWnd.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.FullScreenWnd_Show:                      Dispatcher.BeginInvoke(new Action(delegate                                                            {                                                                Show();                                                                Activate();                                                                //Topmost = true;                                                                //Topmost = false;                                                                Focus();                                                                if (ServiceProvider.Settings.FullScreenInSecondaryMonitor)                                                                {                                                                    var allScreens =                                                                        System.Windows.Forms.Screen.AllScreens.ToList();                                                                    foreach (var r1 in from item in allScreens where !item.Primary select item.WorkingArea)                                                                    {                                                                        Left = r1.Left;                                                                        Top = r1.Top;                                                                        Width = r1.Width;                                                                        Height = r1.Height;                                                                        Topmost = true;                                                                        break;                                                                    }                                                                }                                                                WindowState = WindowState.Maximized;                                                                WindowStyle = WindowStyle.None;                                                            }));                      break;                  case WindowsCmdConsts.FullScreenWnd_ShowTimed:                      // wait for image preview to be generated                       var startTime = DateTime.Now;                      Thread.Sleep(150);                      while (                          ServiceProvider.Settings.SelectedBitmap != null && (ServiceProvider.Settings.SelectedBitmap.FileItem != null && ServiceProvider.Settings.SelectedBitmap.FileItem.Loading))                      {                          Thread.Sleep(10);                          if ((DateTime.Now - startTime).TotalSeconds > 3)                              break;                      }                      Dispatcher.BeginInvoke(new Action(delegate                                                            {                                                                try                                                                {                                                                    Show();                                                                    Activate();                                                                    Topmost = true;                                                                    Topmost = false;                                                                    Focus();                                                                    if (ServiceProvider.Settings.FullScreenInSecondaryMonitor)                                                                    {                                                                        var allScreens =                                                                            System.Windows.Forms.Screen.AllScreens.ToList();                                                                        foreach (var r1 in from item in allScreens where !item.Primary select item.WorkingArea)                                                                        {                                                                            Left = r1.Left;                                                                            Top = r1.Top;                                                                            Width = r1.Width;                                                                            Height = r1.Height;                                                                            Topmost = true;                                                                            break;                                                                        }                                                                    }                                                                    WindowState = WindowState.Maximized;                                                                    WindowStyle = WindowStyle.None;                                                                      _timer.Stop();                                                                    _timer.Interval = ServiceProvider.Settings.PreviewSeconds *                                                                                      1000;                                                                    _timer.Start();                                                                }                                                                catch (Exception ex)                                                                {                                                                    Log.Error("Full screen "' ex);                                                                }                                                            }));                      break;                  case WindowsCmdConsts.FullScreenWnd_Hide:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           _timer.Stop();                                                           Hide();                                                       }));                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           _timer.Stop();                                                           Hide();                                                           Close();                                                       }));                      break;              }
Missing Default,CameraControl.windows,LiveViewWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\LiveViewWnd.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.LiveViewWnd_Show:                      Dispatcher.Invoke(new Action(delegate                          {                              try                              {                                  ICameraDevice cameraparam = param as ICameraDevice;                                  var properties = cameraparam.LoadProperties();                                  if (properties.SaveLiveViewWindow && properties.WindowRect.Width > 0 &&                                      properties.WindowRect.Height > 0)                                  {                                      this.Left = properties.WindowRect.Left;                                      this.Top = properties.WindowRect.Top;                                      this.Width = properties.WindowRect.Width;                                      this.Height = properties.WindowRect.Height;                                  }                                  else                                  {                                      this.WindowState =                                          ((Window) ServiceProvider.PluginManager.SelectedWindow).WindowState;                                  }                                    if (cameraparam == SelectedPortableDevice && IsVisible)                                  {                                      Activate();                                      Focus();                                      return;                                  }                                      DataContext = new LiveViewViewModel(cameraparam' this);                                  SelectedPortableDevice = cameraparam;                                    Show();                                  Activate();                                  Focus();                                }                              catch (Exception exception)                              {                                  Log.Error("Error initialize live view window "' exception);                              }                          }                      ));                      break;                  case WindowsCmdConsts.LiveViewWnd_Hide:                      Dispatcher.Invoke(new Action(delegate                      {                          try                          {                              ICameraDevice cameraparam = ((LiveViewViewModel)DataContext).CameraDevice;                              var properties = cameraparam.LoadProperties();                              if (properties.SaveLiveViewWindow)                              {                                  properties.WindowRect = new Rect(this.Left' this.Top' this.Width' this.Height);                              }                              ((LiveViewViewModel)DataContext).UnInit();                          }                          catch (Exception exception)                          {                              Log.Error("Unable to stop live view"' exception);                          }                          Hide();                          //ServiceProvider.WindowsManager.ExecuteCommand(WindowsCmdConsts.FocusStackingWnd_Hide);                      }));                      break;                  case WindowsCmdConsts.LiveViewWnd_Message:                      {                          Dispatcher.Invoke(new Action(delegate                          {                              if (this.IsLoaded)                                  this.ShowMessageAsync(""' (string)param);                              else                              {                                  MessageBox.Show((string)param);                              }                          }));                      }                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                      {                          if (DataContext != null)                          {                              ICameraDevice cameraparam = ((LiveViewViewModel)DataContext).CameraDevice;                              var properties = cameraparam.LoadProperties();                              if (properties.SaveLiveViewWindow)                              {                                  properties.WindowRect = new Rect(this.Left' this.Top' this.Width' this.Height);                              }                              ((LiveViewViewModel)DataContext).UnInit();                              Hide();                              Close();                          }                      }));                      break;                  case CmdConsts.All_Minimize:                      Dispatcher.Invoke(new Action(delegate                      {                          WindowState = WindowState.Minimized;                      }));                      break;                  case WindowsCmdConsts.LiveViewWnd_Maximize:                      Dispatcher.Invoke(new Action(delegate                      {                          WindowState = WindowState.Maximized;                      }));                      break;              }
Missing Default,CameraControl.windows,MultipleCameraWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\MultipleCameraWnd.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.MultipleCamera_Start:                      Dispatcher.Invoke(() => btn_shot_Click(null' null));                      break;                  case WindowsCmdConsts.MultipleCamera_Stop:                      Dispatcher.Invoke(() => btn_stop_Click(null' null));                      break;                  case WindowsCmdConsts.MultipleCamera_Reset:                      Dispatcher.Invoke(() => btn_resetCounters_Click(null' null));                      break;                  case WindowsCmdConsts.MultipleCameraWnd_Show:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           Owner = ServiceProvider.PluginManager.SelectedWindow as Window;                                                           Show();                                                           Activate();                                                           Focus();                                                       }));                      break;                  case WindowsCmdConsts.MultipleCameraWnd_Hide:                      Hide();                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           Hide();                                                           Close();                                                       }));                      break;              }
Missing Default,CameraControl.windows,MultipleLiveView,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\MultipleLiveView.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.MultipleLiveViewWnd_Show:                      Dispatcher.Invoke(new Action(delegate                      {                          ((MultipleLiveViewViewModel)(DataContext)).InitCameras();                          Owner = ServiceProvider.PluginManager.SelectedWindow as Window;                          Show();                          Activate();                          Focus();                      }));                      break;                  case WindowsCmdConsts.MultipleLiveViewWnd_Hide:                      Dispatcher.BeginInvoke(new Action(Hide));                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                      {                          Hide();                          Close();                      }));                      break;                  case WindowsCmdConsts.MultipleLiveViewWnd_Maximize:                      Dispatcher.Invoke(new Action(delegate                      {                          this.WindowState=WindowState.Maximized;                      }));                      break;              }
Missing Default,CameraControl.windows,PrintWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\PrintWnd.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.PrintWnd_Show:                      Dispatcher.Invoke(new Action(delegate                      {                          var data = new PrintViewModel();                          Owner = (Window)ServiceProvider.PluginManager.SelectedWindow;                          data.LoadPrinterSettings();                          DataContext = data;                          Show();                          Activate();                          Focus();                      }));                      break;                  case WindowsCmdConsts.PrintWnd_Hide:                      Hide();                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                      {                          Hide();                          Close();                      }));                      break;              }
Missing Default,CameraControl.windows,ScriptWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\ScriptWnd.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.ScriptWnd_Show:                      Dispatcher.Invoke(new Action(delegate                      {                          Owner = ServiceProvider.PluginManager.SelectedWindow as Window;                          Show();                          Activate();                          ServiceProvider.ScriptManager.OutPutMessageReceived +=                              ScriptManager_OutPutMessageReceived;                          _manager.Output += manager_Output;                          Focus();                      }));                      break;                  case WindowsCmdConsts.ScriptWnd_Hide:                      ServiceProvider.ScriptManager.OutPutMessageReceived -= ScriptManager_OutPutMessageReceived;                      _manager.Output -= manager_Output;                      Hide();                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                      {                          ServiceProvider.ScriptManager.OutPutMessageReceived -=                              ScriptManager_OutPutMessageReceived;                          Hide();                          Close();                      }));                      break;              }
Missing Default,CameraControl.windows,StatisticsWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\StatisticsWnd.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.StatisticsWnd_Show:                      Dispatcher.Invoke(new Action(delegate                      {                          if (DataContext == null)                              DataContext = new StatisticsViewModel();                          Owner = ServiceProvider.PluginManager.SelectedWindow as Window;                          Show();                          Activate();                          Focus();                      }));                      break;                  case WindowsCmdConsts.StatisticsWnd_Hide:                      Hide();                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                      {                          Hide();                          Close();                      }));                      break;              }
Missing Default,CameraControl.windows,TagSelectorWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\TagSelectorWnd.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.TagSelectorWnd_Show:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           Owner = ServiceProvider.PluginManager.SelectedWindow as Window;                                                           LoadData();                                                           Show();                                                           Activate();                                                           Focus();                                                           ServiceProvider.DeviceManager.PhotoCaptured +=                                                               DeviceManager_PhotoCaptured;                                                       }));                      break;                  case WindowsCmdConsts.TagSelectorWnd_Hide:                      ServiceProvider.DeviceManager.PhotoCaptured -= DeviceManager_PhotoCaptured;                      Hide();                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           Hide();                                                           Close();                                                       }));                      break;              }
Missing Default,CameraControl.windows,TimeLapseWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\CameraControl\windows\TimeLapseWnd.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.TimeLapseWnd_Show:                      Dispatcher.Invoke(new Action(delegate                      {                          if (DataContext == null)                              DataContext = new TimelapseViewModel();                          Owner = ServiceProvider.PluginManager.SelectedWindow as Window;                          Show();                          Activate();                          Focus();                      }));                      break;                  case WindowsCmdConsts.TimeLapseWnd_Hide:                      Dispatcher.Invoke(new Action(Hide));                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                      {                          Hide();                          Close();                      }));                      break;              }
