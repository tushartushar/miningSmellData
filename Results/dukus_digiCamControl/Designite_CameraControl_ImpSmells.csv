Implementation smell,Namespace,Class,File,Method,Description
Long Method,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,TriggerEvent,The method has 165 lines of code.
Long Method,CameraControl,App,C:\repos\dukus_digiCamControl\CameraControl\App.xaml.cs,WindowsManager_Event,The method has 120 lines of code.
Long Method,CameraControl,MainWindow,C:\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,PhotoCaptured,The method has 239 lines of code.
Long Method,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The method has 133 lines of code.
Long Method,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The method has 112 lines of code.
Long Method,CameraControl.ViewModel,TimelapseViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\TimelapseViewModel.cs,StartL,The method has 122 lines of code.
Long Method,CameraControl.windows,DownloadPhotosWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\DownloadPhotosWnd.xaml.cs,TransferFiles,The method has 137 lines of code.
Long Method,CameraControl.windows,LiveViewWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\LiveViewWnd.xaml.cs,ExecuteCommand,The method has 120 lines of code.
Long Method,CameraControl.windows,ScriptWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\ScriptWnd.xaml.cs,textEditor_TextArea_TextEntered,The method has 189 lines of code.
Complex Method,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,DeleteItem,Cyclomatic complexity of the method is 10
Complex Method,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,Settings_PropertyChanged,Cyclomatic complexity of the method is 10
Complex Method,CameraControl.Panels,DirectorySelectorControl,C:\repos\dukus_digiCamControl\CameraControl\Panels\DirectorySelectorControl.xaml.cs,ExpandAndSelectItem,Cyclomatic complexity of the method is 11
Complex Method,CameraControl.Panels,ImagePropertiesControl,C:\repos\dukus_digiCamControl\CameraControl\Panels\ImagePropertiesControl.xaml.cs,btn_set_Click,Cyclomatic complexity of the method is 8
Complex Method,CameraControl,App,C:\repos\dukus_digiCamControl\CameraControl\App.xaml.cs,WindowsManager_Event,Cyclomatic complexity of the method is 8
Complex Method,CameraControl,MainWindow,C:\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,StartupThread,Cyclomatic complexity of the method is 9
Complex Method,CameraControl,MainWindow,C:\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,PhotoCaptured,Cyclomatic complexity of the method is 33
Complex Method,CameraControl.ViewModel,BarcodeViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,Cyclomatic complexity of the method is 12
Complex Method,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManager_Event1,Cyclomatic complexity of the method is 8
Complex Method,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,GetLiveImageData,Cyclomatic complexity of the method is 9
Complex Method,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,Cyclomatic complexity of the method is 16
Complex Method,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,Cyclomatic complexity of the method is 9
Complex Method,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,SetFocusThread,Cyclomatic complexity of the method is 8
Complex Method,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,Capture,Cyclomatic complexity of the method is 13
Complex Method,CameraControl.ViewModel,MultipleLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\MultipleLiveViewViewModel.cs,WindowsManager_Event,Cyclomatic complexity of the method is 10
Complex Method,CameraControl.ViewModel,TimelapseViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\TimelapseViewModel.cs,StartL,Cyclomatic complexity of the method is 14
Complex Method,CameraControl.windows,DownloadPhotosWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\DownloadPhotosWnd.xaml.cs,TransferFiles,Cyclomatic complexity of the method is 13
Complex Method,CameraControl.windows,PropertyWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\PropertyWnd.xaml.cs,btn_set_Click,Cyclomatic complexity of the method is 8
Complex Method,CameraControl.windows,ScriptWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\ScriptWnd.xaml.cs,textEditor_TextArea_TextEntered,Cyclomatic complexity of the method is 29
Long Parameter List,CameraControl.Controls,AnimationHelper,C:\repos\dukus_digiCamControl\CameraControl\Controls\AnimationHelper.cs,StartAnimation,The method has 5 parameters. Parameters: animatableElement' dependencyProperty' toValue' animationDurationSeconds' completedEvent
Long Parameter List,CameraControl.XSplit,TimedBroadcasterPlugin,C:\repos\dukus_digiCamControl\CameraControl\XSplit\TimedBroadcasterPlugin.cs,CreateInstance,The method has 5 parameters. Parameters: connectionUID' visual' width' height' timeInterval
Long Identifier,CameraControl.Controls,CameraItem,C:\repos\dukus_digiCamControl\CameraControl\Controls\CameraItem.xaml.cs,CameraDeviceCallBack,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,CameraControl.Panels,DirectorySelectorControl,C:\repos\dukus_digiCamControl\CameraControl\Panels\DirectorySelectorControl.xaml.cs,PropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Statement,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,worker_DoWork,The length of the statement  "                    ServiceProvider.Settings.SelectedBitmap.DisplayImage = (WriteableBitmap)BitmapLoader.Instance.LoadImage(item.FileName' BitmapLoader.LargeThumbSize' " is 147.
Long Statement,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,ZoomToFocus,The length of the statement  "                ZoomAndPanControl.SnapTo(new Point(ServiceProvider.Settings.SelectedBitmap.FileItem.FileInfo.FocusPoints[0].X + ServiceProvider.Settings.SelectedBitmap.FileItem.FileInfo.FocusPoints[0].Width / 2' " is 195.
Long Statement,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,ZoomToFocus,The length of the statement  "                    ServiceProvider.Settings.SelectedBitmap.FileItem.FileInfo.FocusPoints[0].Y + ServiceProvider.Settings.SelectedBitmap.FileItem.FileInfo.FocusPoints[0].Height / 2)); " is 163.
Long Statement,CameraControl.Panels,DirectorySelectorControl,C:\repos\dukus_digiCamControl\CameraControl\Panels\DirectorySelectorControl.xaml.cs,PropertyChangedCallback,The length of the statement  "                ExpandAndSelectItem(((DirectorySelectorControl)dependencyObject).trvStructure' (string)dependencyPropertyChangedEventArgs.NewValue); " is 132.
Long Statement,CameraControl,App,C:\repos\dukus_digiCamControl\CameraControl\App.xaml.cs,cameraDevice_CameraInitDone,The length of the statement  "            if ((cameraDevice is CanonSDKBase && ServiceProvider.Settings.LoadCanonTransferMode) || !(cameraDevice is CanonSDKBase)) " is 120.
Long Statement,CameraControl,App,C:\repos\dukus_digiCamControl\CameraControl\App.xaml.cs,ShowUnhandeledException,The length of the statement  "                MessageBox.Show("Application crash !! Damaged installation!\nPlease unintall aplication from control panel and reinstall it!"); " is 127.
Long Statement,CameraControl,MainWindow,C:\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,StartupThread,The length of the statement  "                if ((cameraDevice is CanonSDKBase && ServiceProvider.Settings.LoadCanonTransferMode) || !(cameraDevice is CanonSDKBase)) " is 120.
Long Statement,CameraControl,MainWindow,C:\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,PhotoCaptured,The length of the statement  "                        ServiceProvider.Database.Add(new DbFile(_selectedItem' eventArgs.CameraDevice.SerialNumber' eventArgs.CameraDevice.DisplayName' session.Name)); " is 143.
Long Statement,CameraControl,MainWindow,C:\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,SortCameras,The length of the statement  "                        ServiceProvider.DeviceManager.ConnectedDevices.OrderByDescending(x => x.LoadProperties().SortOrder).ThenByDescending(x => x.DisplayName)); " is 138.
Long Statement,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,DrawGrid,The length of the statement  "            tempbitmap.DrawLine(0' (int)CentralPoint.Y - (StarWindowSize / 2)' bitmap.PixelWidth' (int)CentralPoint.Y - (StarWindowSize / 2)' Colors.White); " is 144.
Long Statement,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,DrawGrid,The length of the statement  "            tempbitmap.DrawLine(0' (int)CentralPoint.Y + (StarWindowSize / 2)' bitmap.PixelWidth' (int)CentralPoint.Y + (StarWindowSize / 2)' Colors.White); " is 144.
Long Statement,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,DrawGrid,The length of the statement  "            tempbitmap.DrawLine((int)CentralPoint.X - (StarWindowSize / 2)' 0' (int)CentralPoint.X - (StarWindowSize / 2)' bitmap.PixelHeight' Colors.White); " is 145.
Long Statement,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,DrawGrid,The length of the statement  "            tempbitmap.DrawLine((int)CentralPoint.X + (StarWindowSize / 2)' 0' (int)CentralPoint.X + (StarWindowSize / 2)' bitmap.PixelHeight' Colors.White); " is 145.
Long Statement,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,SetFocus,The length of the statement  "                ServiceProvider.WindowsManager.ExecuteCommand(WindowsCmdConsts.LiveViewWnd_Message' TranslationStrings.LabelErrorUnableFocus); " is 126.
Long Statement,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,Capture,The length of the statement  "                ServiceProvider.WindowsManager.ExecuteCommand(WindowsCmdConsts.LiveViewWnd_Message' TranslationStrings.MsgBulbModeNotSupported); " is 128.
Long Statement,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,StartSimpleFocusStacking,The length of the statement  "                ServiceProvider.WindowsManager.ExecuteCommand(WindowsCmdConsts.LiveViewWnd_Message' TranslationStrings.LabelErrorSimpleStackingFocusLock); " is 138.
Long Statement,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,StartFocusStacking,The length of the statement  "                ServiceProvider.WindowsManager.ExecuteCommand(WindowsCmdConsts.LiveViewWnd_Message' TranslationStrings.LabelLockNearFar); " is 121.
Long Statement,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,_focusStackingTimer_Elapsed,The length of the statement  "                                SetFocus(dir * (SimpleManualFocus ? ServiceProvider.Settings.SmallFocusStepCanon : ServiceProvider.Settings.SmalFocusStep)); " is 124.
Long Statement,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,_focusStackingTimer_Elapsed,The length of the statement  "                                SetFocus(dir * (SimpleManualFocus ? ServiceProvider.Settings.MediumFocusStepCanon : ServiceProvider.Settings.MediumFocusStep)); " is 127.
Long Statement,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,_focusStackingTimer_Elapsed,The length of the statement  "                                SetFocus(dir * (SimpleManualFocus ? ServiceProvider.Settings.LargeFocusStepCanon : ServiceProvider.Settings.LargeFocusStep)); " is 125.
Long Statement,CameraControl.ViewModel,MainMenuViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\MainMenuViewModel.cs,ExportSession,The length of the statement  "                    ServiceProvider.WindowsManager.ExecuteCommand(WindowsCmdConsts.MainWnd_Message' "Unable to export session " + ex.Message); " is 122.
Long Statement,CameraControl.ViewModel,MainMenuViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\MainMenuViewModel.cs,ImportSession,The length of the statement  "                    ServiceProvider.WindowsManager.ExecuteCommand(WindowsCmdConsts.MainWnd_Message' "Unable to import session " + ex.Message); " is 122.
Long Statement,CameraControl.ViewModel,MainMenuViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\MainMenuViewModel.cs,DelSession,The length of the statement  "                    ServiceProvider.WindowsManager.ExecuteCommand(WindowsCmdConsts.MainWnd_Message' TranslationStrings.LabelUnabletoDeleteSession + exception.Message); " is 147.
Long Statement,CameraControl.ViewModel,MainMenuViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\MainMenuViewModel.cs,DelSession,The length of the statement  "                ServiceProvider.WindowsManager.ExecuteCommand(WindowsCmdConsts.MainWnd_Message' TranslationStrings.MsgLastSessionCantBeDeleted); " is 128.
Long Statement,CameraControl.ViewModel,MainMenuViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\MainMenuViewModel.cs,Refresh,The length of the statement  "                ServiceProvider.WindowsManager.ExecuteCommand(WindowsCmdConsts.MainWnd_Message' "Unable to connect \n" + exception.Message); " is 124.
Long Statement,CameraControl.ViewModel,PrintViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\PrintViewModel.cs,SavePrintTicket,The length of the statement  "            using (FileStream stream = new FileStream(Path.Combine(Settings.SessionFolder' ServiceProvider.Settings.DefaultSession.Name + "_printer.xml")' FileMode.Create)) " is 160.
Long Statement,CameraControl.ViewModel,PrintViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\PrintViewModel.cs,LoadPrintTicket,The length of the statement  "            string configFile = Path.Combine(Settings.SessionFolder' ServiceProvider.Settings.DefaultSession.Name + "_printer.xml"); " is 120.
Long Statement,CameraControl.windows,AstroLiveViewWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\AstroLiveViewWnd.xaml.cs,live_view_image_MouseDown,The length of the statement  "            if (e.ButtonState == MouseButtonState.Pressed && e.ChangedButton == MouseButton.Left &&((AstroLiveViewViewModel)DataContext).Bitmap!=null && ((AstroLiveViewViewModel)DataContext).ZoomFactor==1) " is 193.
Long Statement,CameraControl.windows,AstroLiveViewWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\AstroLiveViewWnd.xaml.cs,img_preview_MouseDown,The length of the statement  "            if (e.ButtonState == MouseButtonState.Pressed && e.ChangedButton == MouseButton.Left && ((AstroLiveViewViewModel)DataContext).Bitmap != null) " is 141.
Long Statement,CameraControl.windows,BulbWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,_captureTimer_Elapsed,The length of the statement  "            //            Message = string.Format("Capture time {0}/{1} sec. Photo done {2}/{3}"' _captureSecs' CaptureTime' _photoCount' " is 125.
Long Statement,CameraControl.windows,FullScreenWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\FullScreenWnd.xaml.cs,ExecuteCommand,The length of the statement  "                        ServiceProvider.Settings.SelectedBitmap != null && (ServiceProvider.Settings.SelectedBitmap.FileItem != null && ServiceProvider.Settings.SelectedBitmap.FileItem.Loading)) " is 170.
Long Statement,CameraControl.windows,FullScreenWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\FullScreenWnd.xaml.cs,HideWindow,The length of the statement  "                LoginDialogData result = await this.ShowLoginAsync("Closing fullscreen ..."' "Enter your password"' new LoginDialogSettings { ColorScheme = this.MetroDialogOptions.ColorScheme' ShouldHideUsername = true' AffirmativeButtonText = "Close" }); " is 239.
Long Statement,CameraControl.XSplit,BroadcasterPlugin,C:\repos\dukus_digiCamControl\CameraControl\XSplit\BroadcasterPlugin.cs,DownloadVisual,The length of the statement  "                            var ms = new MemoryStream(ServiceProvider.DeviceManager.LiveViewImage[ServiceProvider.DeviceManager.SelectedCameraDevice]); " is 123.
Complex Conditional,CameraControl,App,C:\repos\dukus_digiCamControl\CameraControl\App.xaml.cs,WindowsManager_Event,The conditional expression  "cmd != WindowsCmdConsts.Next_Image && cmd != WindowsCmdConsts.Prev_Image &&                      cmd != WindowsCmdConsts.Select_Image && !cmd.StartsWith("Zoom")"  is complex.
Complex Conditional,CameraControl.ViewModel,BracketingViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BracketingViewModel.cs,GetValues,The conditional expression  "il < 0 || ih < 0 || ih <= il || count < 2"  is complex.
Complex Conditional,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessMotionDetection,The conditional expression  "movement > ((float) MotionThreshold/100) && MotionAction > 0 && !Recording &&                      (DateTime.Now - _photoCapturedTime).TotalSeconds > WaitForMotionSec &&                      _totalframes > 10"  is complex.
Complex Conditional,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,FocusOnMovment,The conditional expression  "processing != null && processing.ObjectRectangles != null &&                      processing.ObjectRectangles.Length > 0 &&                      LiveViewData.ImageData != null"  is complex.
Complex Conditional,CameraControl.windows,AstroLiveViewWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\AstroLiveViewWnd.xaml.cs,live_view_image_MouseDown,The conditional expression  "e.ButtonState == MouseButtonState.Pressed && e.ChangedButton == MouseButton.Left &&((AstroLiveViewViewModel)DataContext).Bitmap!=null && ((AstroLiveViewViewModel)DataContext).ZoomFactor==1"  is complex.
Empty Catch Block,CameraControl.Controls,CameraToImageSourceConverter,C:\repos\dukus_digiCamControl\CameraControl\Controls\CameraToImageSourceConverter .cs,Convert,The method has an empty catch block.
Empty Catch Block,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,GeneratePreview,The method has an empty catch block.
Empty Catch Block,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,Trigger_Event,The method has an empty catch block.
Empty Catch Block,CameraControl.Panels,DirectorySelectorControl,C:\repos\dukus_digiCamControl\CameraControl\Panels\DirectorySelectorControl.xaml.cs,TreeViewItem_Expanded,The method has an empty catch block.
Empty Catch Block,CameraControl,MainWindow,C:\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,DeletePreset,The method has an empty catch block.
Empty Catch Block,CameraControl,MainWindow,C:\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,StartupThread,The method has an empty catch block.
Empty Catch Block,CameraControl,MainWindow,C:\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,PhotoCaptured,The method has an empty catch block.
Empty Catch Block,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManagerEvent,The method has an empty catch block.
Empty Catch Block,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,GetLiveImageStream,The method has an empty catch block.
Empty Catch Block,CameraControl.ViewModel,SimpleLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\SimpleLiveViewViewModel.cs,Get,The method has an empty catch block.
Empty Catch Block,CameraControl.windows,LiveViewWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\LiveViewWnd.xaml.cs,ExecuteCommand,The method has an empty catch block.
Empty Catch Block,CameraControl.windows,PreviewWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\PreviewWnd.xaml.cs,Image_MouseDown,The method has an empty catch block.
Empty Catch Block,CameraControl.windows,QrCodeWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\QrCodeWnd.xaml.cs,MetroWindow_Deactivated,The method has an empty catch block.
Empty Catch Block,CameraControl.XSplit,BroadcasterPlugin,C:\repos\dukus_digiCamControl\CameraControl\XSplit\BroadcasterPlugin.cs,CreateInstance,The method has an empty catch block.
Empty Catch Block,CameraControl.XSplit,BroadcasterPlugin,C:\repos\dukus_digiCamControl\CameraControl\XSplit\BroadcasterPlugin.cs,DownloadVisual,The method has an empty catch block.
Empty Catch Block,CameraControl.XSplit,TimedBroadcasterPlugin,C:\repos\dukus_digiCamControl\CameraControl\XSplit\TimedBroadcasterPlugin.cs,CreateInstance,The method has an empty catch block.
Magic Number,CameraControl.Classes,HorizontalScrollBehavior,C:\repos\dukus_digiCamControl\CameraControl\Classes\HorizontalScrollBehavior.cs,OnPreviewMouseWheel,The following statement contains a magic number: var newOffset = !IsInverted ?                  ScrollViewer.HorizontalOffset + e.Delta/100 :                  ScrollViewer.HorizontalOffset - e.Delta/100;
Magic Number,CameraControl.Classes,HorizontalScrollBehavior,C:\repos\dukus_digiCamControl\CameraControl\Classes\HorizontalScrollBehavior.cs,OnPreviewMouseWheel,The following statement contains a magic number: var newOffset = !IsInverted ?                  ScrollViewer.HorizontalOffset + e.Delta/100 :                  ScrollViewer.HorizontalOffset - e.Delta/100;
Magic Number,CameraControl.Controls,CameraToImageSourceConverter,C:\repos\dukus_digiCamControl\CameraControl\Controls\CameraToImageSourceConverter .cs,Convert,The following statement contains a magic number: try              {                  if (_cache.ContainsKey(value.ToString()))                      return _cache[value.ToString()];                    string file = Path.Combine(Settings.ApplicationFolder' "Data"' "Camera"' value.ToString()) + ".png";                  if (File.Exists(file))                  {                      ImageSource bp = BitmapLoader.Instance.LoadImage(file' 400' 0);                      _cache.Add(value.ToString()' bp);                      return bp;                  }              }              catch              {              }
Magic Number,CameraControl.Controls,ExposureStatusControl,C:\repos\dukus_digiCamControl\CameraControl\Controls\ExposureStatusControl.xaml.cs,ExposureStatusControl,The following statement contains a magic number: brushInactive =                  new SolidColorBrush(                      Color.FromArgb(                          32'                          brushActive.Color.R'                          brushActive.Color.G'                          brushActive.Color.B));
Magic Number,CameraControl.Controls,VUMeterControl,C:\repos\dukus_digiCamControl\CameraControl\Controls\VUMeterControl.xaml.cs,GenerateBlocks,The following statement contains a magic number: for (int i = 0; i < BlockCount; i++)        {          if (i < BlockCount - HighLevel) items.Add(new Block() { Level = 1 });          if (i >= BlockCount - HighLevel && i < BlockCount - MiddleLevel) items.Add(new Block() { Level = 2 });          if (i >= BlockCount - MiddleLevel) items.Add(new Block() { Level = 3 });        }
Magic Number,CameraControl.Controls,VUMeterControl,C:\repos\dukus_digiCamControl\CameraControl\Controls\VUMeterControl.xaml.cs,GenerateBlocks,The following statement contains a magic number: for (int i = 0; i < BlockCount; i++)        {          if (i < BlockCount - HighLevel) items.Add(new Block() { Level = 1 });          if (i >= BlockCount - HighLevel && i < BlockCount - MiddleLevel) items.Add(new Block() { Level = 2 });          if (i >= BlockCount - MiddleLevel) items.Add(new Block() { Level = 3 });        }
Magic Number,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,ZoomAndPanControl_ContentScaleChanged,The following statement contains a magic number: var i = Math.Round(ZoomAndPanControl.FitScale()' 4);
Magic Number,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,ZoomAndPanControl_ContentScaleChanged,The following statement contains a magic number: LayoutViewModel.FreeZoom = Math.Round(ZoomAndPanControl.ContentScale' 4) >                                         Math.Round(ZoomAndPanControl.FitScale()' 4);
Magic Number,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,ZoomAndPanControl_ContentScaleChanged,The following statement contains a magic number: LayoutViewModel.FreeZoom = Math.Round(ZoomAndPanControl.ContentScale' 4) >                                         Math.Round(ZoomAndPanControl.FitScale()' 4);
Magic Number,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,GeneratePreview,The following statement contains a magic number: try              {                  var bitmap = BitmapLoader.Instance.LoadSmallImage(ServiceProvider.Settings.SelectedBitmap.FileItem' 270);                      if (bitmap != null)                  {                      if (ZoomAndPanControl == null)                      {                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                      else                      {                          if (ServiceProvider.Settings.SelectedBitmap.FileItem.IsMovie)                          {                              ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                              return;                          }                          int dw = (int)(ZoomAndPanControl.ContentViewportWidthRation * bitmap.PixelWidth);                          int dh = (int)(ZoomAndPanControl.ContentViewportHeightRation * bitmap.PixelHeight);                          int fw = (int)(ZoomAndPanControl.ContentZoomFocusXRation * bitmap.PixelWidth);                          int fh = (int)(ZoomAndPanControl.ContentZoomFocusYRation * bitmap.PixelHeight);                            bitmap.FillRectangle2(0' 0' bitmap.PixelWidth' bitmap.PixelHeight'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.FillRectangleDeBlend(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.DrawRectangle(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)' Colors.White);                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                  }              }              catch (Exception)              {                }
Magic Number,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,GeneratePreview,The following statement contains a magic number: try              {                  var bitmap = BitmapLoader.Instance.LoadSmallImage(ServiceProvider.Settings.SelectedBitmap.FileItem' 270);                      if (bitmap != null)                  {                      if (ZoomAndPanControl == null)                      {                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                      else                      {                          if (ServiceProvider.Settings.SelectedBitmap.FileItem.IsMovie)                          {                              ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                              return;                          }                          int dw = (int)(ZoomAndPanControl.ContentViewportWidthRation * bitmap.PixelWidth);                          int dh = (int)(ZoomAndPanControl.ContentViewportHeightRation * bitmap.PixelHeight);                          int fw = (int)(ZoomAndPanControl.ContentZoomFocusXRation * bitmap.PixelWidth);                          int fh = (int)(ZoomAndPanControl.ContentZoomFocusYRation * bitmap.PixelHeight);                            bitmap.FillRectangle2(0' 0' bitmap.PixelWidth' bitmap.PixelHeight'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.FillRectangleDeBlend(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.DrawRectangle(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)' Colors.White);                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                  }              }              catch (Exception)              {                }
Magic Number,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,GeneratePreview,The following statement contains a magic number: try              {                  var bitmap = BitmapLoader.Instance.LoadSmallImage(ServiceProvider.Settings.SelectedBitmap.FileItem' 270);                      if (bitmap != null)                  {                      if (ZoomAndPanControl == null)                      {                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                      else                      {                          if (ServiceProvider.Settings.SelectedBitmap.FileItem.IsMovie)                          {                              ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                              return;                          }                          int dw = (int)(ZoomAndPanControl.ContentViewportWidthRation * bitmap.PixelWidth);                          int dh = (int)(ZoomAndPanControl.ContentViewportHeightRation * bitmap.PixelHeight);                          int fw = (int)(ZoomAndPanControl.ContentZoomFocusXRation * bitmap.PixelWidth);                          int fh = (int)(ZoomAndPanControl.ContentZoomFocusYRation * bitmap.PixelHeight);                            bitmap.FillRectangle2(0' 0' bitmap.PixelWidth' bitmap.PixelHeight'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.FillRectangleDeBlend(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.DrawRectangle(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)' Colors.White);                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                  }              }              catch (Exception)              {                }
Magic Number,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,GeneratePreview,The following statement contains a magic number: try              {                  var bitmap = BitmapLoader.Instance.LoadSmallImage(ServiceProvider.Settings.SelectedBitmap.FileItem' 270);                      if (bitmap != null)                  {                      if (ZoomAndPanControl == null)                      {                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                      else                      {                          if (ServiceProvider.Settings.SelectedBitmap.FileItem.IsMovie)                          {                              ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                              return;                          }                          int dw = (int)(ZoomAndPanControl.ContentViewportWidthRation * bitmap.PixelWidth);                          int dh = (int)(ZoomAndPanControl.ContentViewportHeightRation * bitmap.PixelHeight);                          int fw = (int)(ZoomAndPanControl.ContentZoomFocusXRation * bitmap.PixelWidth);                          int fh = (int)(ZoomAndPanControl.ContentZoomFocusYRation * bitmap.PixelHeight);                            bitmap.FillRectangle2(0' 0' bitmap.PixelWidth' bitmap.PixelHeight'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.FillRectangleDeBlend(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.DrawRectangle(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)' Colors.White);                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                  }              }              catch (Exception)              {                }
Magic Number,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,GeneratePreview,The following statement contains a magic number: try              {                  var bitmap = BitmapLoader.Instance.LoadSmallImage(ServiceProvider.Settings.SelectedBitmap.FileItem' 270);                      if (bitmap != null)                  {                      if (ZoomAndPanControl == null)                      {                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                      else                      {                          if (ServiceProvider.Settings.SelectedBitmap.FileItem.IsMovie)                          {                              ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                              return;                          }                          int dw = (int)(ZoomAndPanControl.ContentViewportWidthRation * bitmap.PixelWidth);                          int dh = (int)(ZoomAndPanControl.ContentViewportHeightRation * bitmap.PixelHeight);                          int fw = (int)(ZoomAndPanControl.ContentZoomFocusXRation * bitmap.PixelWidth);                          int fh = (int)(ZoomAndPanControl.ContentZoomFocusYRation * bitmap.PixelHeight);                            bitmap.FillRectangle2(0' 0' bitmap.PixelWidth' bitmap.PixelHeight'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.FillRectangleDeBlend(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.DrawRectangle(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)' Colors.White);                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                  }              }              catch (Exception)              {                }
Magic Number,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,GeneratePreview,The following statement contains a magic number: try              {                  var bitmap = BitmapLoader.Instance.LoadSmallImage(ServiceProvider.Settings.SelectedBitmap.FileItem' 270);                      if (bitmap != null)                  {                      if (ZoomAndPanControl == null)                      {                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                      else                      {                          if (ServiceProvider.Settings.SelectedBitmap.FileItem.IsMovie)                          {                              ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                              return;                          }                          int dw = (int)(ZoomAndPanControl.ContentViewportWidthRation * bitmap.PixelWidth);                          int dh = (int)(ZoomAndPanControl.ContentViewportHeightRation * bitmap.PixelHeight);                          int fw = (int)(ZoomAndPanControl.ContentZoomFocusXRation * bitmap.PixelWidth);                          int fh = (int)(ZoomAndPanControl.ContentZoomFocusYRation * bitmap.PixelHeight);                            bitmap.FillRectangle2(0' 0' bitmap.PixelWidth' bitmap.PixelHeight'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.FillRectangleDeBlend(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.DrawRectangle(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)' Colors.White);                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                  }              }              catch (Exception)              {                }
Magic Number,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,GeneratePreview,The following statement contains a magic number: try              {                  var bitmap = BitmapLoader.Instance.LoadSmallImage(ServiceProvider.Settings.SelectedBitmap.FileItem' 270);                      if (bitmap != null)                  {                      if (ZoomAndPanControl == null)                      {                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                      else                      {                          if (ServiceProvider.Settings.SelectedBitmap.FileItem.IsMovie)                          {                              ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                              return;                          }                          int dw = (int)(ZoomAndPanControl.ContentViewportWidthRation * bitmap.PixelWidth);                          int dh = (int)(ZoomAndPanControl.ContentViewportHeightRation * bitmap.PixelHeight);                          int fw = (int)(ZoomAndPanControl.ContentZoomFocusXRation * bitmap.PixelWidth);                          int fh = (int)(ZoomAndPanControl.ContentZoomFocusYRation * bitmap.PixelHeight);                            bitmap.FillRectangle2(0' 0' bitmap.PixelWidth' bitmap.PixelHeight'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.FillRectangleDeBlend(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.DrawRectangle(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)' Colors.White);                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                  }              }              catch (Exception)              {                }
Magic Number,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,GeneratePreview,The following statement contains a magic number: try              {                  var bitmap = BitmapLoader.Instance.LoadSmallImage(ServiceProvider.Settings.SelectedBitmap.FileItem' 270);                      if (bitmap != null)                  {                      if (ZoomAndPanControl == null)                      {                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                      else                      {                          if (ServiceProvider.Settings.SelectedBitmap.FileItem.IsMovie)                          {                              ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                              return;                          }                          int dw = (int)(ZoomAndPanControl.ContentViewportWidthRation * bitmap.PixelWidth);                          int dh = (int)(ZoomAndPanControl.ContentViewportHeightRation * bitmap.PixelHeight);                          int fw = (int)(ZoomAndPanControl.ContentZoomFocusXRation * bitmap.PixelWidth);                          int fh = (int)(ZoomAndPanControl.ContentZoomFocusYRation * bitmap.PixelHeight);                            bitmap.FillRectangle2(0' 0' bitmap.PixelWidth' bitmap.PixelHeight'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.FillRectangleDeBlend(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.DrawRectangle(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)' Colors.White);                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                  }              }              catch (Exception)              {                }
Magic Number,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,GeneratePreview,The following statement contains a magic number: try              {                  var bitmap = BitmapLoader.Instance.LoadSmallImage(ServiceProvider.Settings.SelectedBitmap.FileItem' 270);                      if (bitmap != null)                  {                      if (ZoomAndPanControl == null)                      {                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                      else                      {                          if (ServiceProvider.Settings.SelectedBitmap.FileItem.IsMovie)                          {                              ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                              return;                          }                          int dw = (int)(ZoomAndPanControl.ContentViewportWidthRation * bitmap.PixelWidth);                          int dh = (int)(ZoomAndPanControl.ContentViewportHeightRation * bitmap.PixelHeight);                          int fw = (int)(ZoomAndPanControl.ContentZoomFocusXRation * bitmap.PixelWidth);                          int fh = (int)(ZoomAndPanControl.ContentZoomFocusYRation * bitmap.PixelHeight);                            bitmap.FillRectangle2(0' 0' bitmap.PixelWidth' bitmap.PixelHeight'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.FillRectangleDeBlend(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.DrawRectangle(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)' Colors.White);                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                  }              }              catch (Exception)              {                }
Magic Number,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,GeneratePreview,The following statement contains a magic number: try              {                  var bitmap = BitmapLoader.Instance.LoadSmallImage(ServiceProvider.Settings.SelectedBitmap.FileItem' 270);                      if (bitmap != null)                  {                      if (ZoomAndPanControl == null)                      {                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                      else                      {                          if (ServiceProvider.Settings.SelectedBitmap.FileItem.IsMovie)                          {                              ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                              return;                          }                          int dw = (int)(ZoomAndPanControl.ContentViewportWidthRation * bitmap.PixelWidth);                          int dh = (int)(ZoomAndPanControl.ContentViewportHeightRation * bitmap.PixelHeight);                          int fw = (int)(ZoomAndPanControl.ContentZoomFocusXRation * bitmap.PixelWidth);                          int fh = (int)(ZoomAndPanControl.ContentZoomFocusYRation * bitmap.PixelHeight);                            bitmap.FillRectangle2(0' 0' bitmap.PixelWidth' bitmap.PixelHeight'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.FillRectangleDeBlend(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.DrawRectangle(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)' Colors.White);                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                  }              }              catch (Exception)              {                }
Magic Number,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,GeneratePreview,The following statement contains a magic number: try              {                  var bitmap = BitmapLoader.Instance.LoadSmallImage(ServiceProvider.Settings.SelectedBitmap.FileItem' 270);                      if (bitmap != null)                  {                      if (ZoomAndPanControl == null)                      {                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                      else                      {                          if (ServiceProvider.Settings.SelectedBitmap.FileItem.IsMovie)                          {                              ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                              return;                          }                          int dw = (int)(ZoomAndPanControl.ContentViewportWidthRation * bitmap.PixelWidth);                          int dh = (int)(ZoomAndPanControl.ContentViewportHeightRation * bitmap.PixelHeight);                          int fw = (int)(ZoomAndPanControl.ContentZoomFocusXRation * bitmap.PixelWidth);                          int fh = (int)(ZoomAndPanControl.ContentZoomFocusYRation * bitmap.PixelHeight);                            bitmap.FillRectangle2(0' 0' bitmap.PixelWidth' bitmap.PixelHeight'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.FillRectangleDeBlend(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.DrawRectangle(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)' Colors.White);                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                  }              }              catch (Exception)              {                }
Magic Number,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,GeneratePreview,The following statement contains a magic number: try              {                  var bitmap = BitmapLoader.Instance.LoadSmallImage(ServiceProvider.Settings.SelectedBitmap.FileItem' 270);                      if (bitmap != null)                  {                      if (ZoomAndPanControl == null)                      {                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                      else                      {                          if (ServiceProvider.Settings.SelectedBitmap.FileItem.IsMovie)                          {                              ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                              return;                          }                          int dw = (int)(ZoomAndPanControl.ContentViewportWidthRation * bitmap.PixelWidth);                          int dh = (int)(ZoomAndPanControl.ContentViewportHeightRation * bitmap.PixelHeight);                          int fw = (int)(ZoomAndPanControl.ContentZoomFocusXRation * bitmap.PixelWidth);                          int fh = (int)(ZoomAndPanControl.ContentZoomFocusYRation * bitmap.PixelHeight);                            bitmap.FillRectangle2(0' 0' bitmap.PixelWidth' bitmap.PixelHeight'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.FillRectangleDeBlend(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.DrawRectangle(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)' Colors.White);                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                  }              }              catch (Exception)              {                }
Magic Number,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,GeneratePreview,The following statement contains a magic number: try              {                  var bitmap = BitmapLoader.Instance.LoadSmallImage(ServiceProvider.Settings.SelectedBitmap.FileItem' 270);                      if (bitmap != null)                  {                      if (ZoomAndPanControl == null)                      {                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                      else                      {                          if (ServiceProvider.Settings.SelectedBitmap.FileItem.IsMovie)                          {                              ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                              return;                          }                          int dw = (int)(ZoomAndPanControl.ContentViewportWidthRation * bitmap.PixelWidth);                          int dh = (int)(ZoomAndPanControl.ContentViewportHeightRation * bitmap.PixelHeight);                          int fw = (int)(ZoomAndPanControl.ContentZoomFocusXRation * bitmap.PixelWidth);                          int fh = (int)(ZoomAndPanControl.ContentZoomFocusYRation * bitmap.PixelHeight);                            bitmap.FillRectangle2(0' 0' bitmap.PixelWidth' bitmap.PixelHeight'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.FillRectangleDeBlend(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.DrawRectangle(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)' Colors.White);                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                  }              }              catch (Exception)              {                }
Magic Number,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,GeneratePreview,The following statement contains a magic number: try              {                  var bitmap = BitmapLoader.Instance.LoadSmallImage(ServiceProvider.Settings.SelectedBitmap.FileItem' 270);                      if (bitmap != null)                  {                      if (ZoomAndPanControl == null)                      {                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                      else                      {                          if (ServiceProvider.Settings.SelectedBitmap.FileItem.IsMovie)                          {                              ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                              return;                          }                          int dw = (int)(ZoomAndPanControl.ContentViewportWidthRation * bitmap.PixelWidth);                          int dh = (int)(ZoomAndPanControl.ContentViewportHeightRation * bitmap.PixelHeight);                          int fw = (int)(ZoomAndPanControl.ContentZoomFocusXRation * bitmap.PixelWidth);                          int fh = (int)(ZoomAndPanControl.ContentZoomFocusYRation * bitmap.PixelHeight);                            bitmap.FillRectangle2(0' 0' bitmap.PixelWidth' bitmap.PixelHeight'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.FillRectangleDeBlend(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.DrawRectangle(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)' Colors.White);                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                  }              }              catch (Exception)              {                }
Magic Number,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,GeneratePreview,The following statement contains a magic number: try              {                  var bitmap = BitmapLoader.Instance.LoadSmallImage(ServiceProvider.Settings.SelectedBitmap.FileItem' 270);                      if (bitmap != null)                  {                      if (ZoomAndPanControl == null)                      {                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                      else                      {                          if (ServiceProvider.Settings.SelectedBitmap.FileItem.IsMovie)                          {                              ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                              return;                          }                          int dw = (int)(ZoomAndPanControl.ContentViewportWidthRation * bitmap.PixelWidth);                          int dh = (int)(ZoomAndPanControl.ContentViewportHeightRation * bitmap.PixelHeight);                          int fw = (int)(ZoomAndPanControl.ContentZoomFocusXRation * bitmap.PixelWidth);                          int fh = (int)(ZoomAndPanControl.ContentZoomFocusYRation * bitmap.PixelHeight);                            bitmap.FillRectangle2(0' 0' bitmap.PixelWidth' bitmap.PixelHeight'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.FillRectangleDeBlend(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.DrawRectangle(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)' Colors.White);                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                  }              }              catch (Exception)              {                }
Magic Number,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,GeneratePreview,The following statement contains a magic number: try              {                  var bitmap = BitmapLoader.Instance.LoadSmallImage(ServiceProvider.Settings.SelectedBitmap.FileItem' 270);                      if (bitmap != null)                  {                      if (ZoomAndPanControl == null)                      {                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                      else                      {                          if (ServiceProvider.Settings.SelectedBitmap.FileItem.IsMovie)                          {                              ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                              return;                          }                          int dw = (int)(ZoomAndPanControl.ContentViewportWidthRation * bitmap.PixelWidth);                          int dh = (int)(ZoomAndPanControl.ContentViewportHeightRation * bitmap.PixelHeight);                          int fw = (int)(ZoomAndPanControl.ContentZoomFocusXRation * bitmap.PixelWidth);                          int fh = (int)(ZoomAndPanControl.ContentZoomFocusYRation * bitmap.PixelHeight);                            bitmap.FillRectangle2(0' 0' bitmap.PixelWidth' bitmap.PixelHeight'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.FillRectangleDeBlend(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.DrawRectangle(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)' Colors.White);                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                  }              }              catch (Exception)              {                }
Magic Number,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,GeneratePreview,The following statement contains a magic number: try              {                  var bitmap = BitmapLoader.Instance.LoadSmallImage(ServiceProvider.Settings.SelectedBitmap.FileItem' 270);                      if (bitmap != null)                  {                      if (ZoomAndPanControl == null)                      {                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                      else                      {                          if (ServiceProvider.Settings.SelectedBitmap.FileItem.IsMovie)                          {                              ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                              return;                          }                          int dw = (int)(ZoomAndPanControl.ContentViewportWidthRation * bitmap.PixelWidth);                          int dh = (int)(ZoomAndPanControl.ContentViewportHeightRation * bitmap.PixelHeight);                          int fw = (int)(ZoomAndPanControl.ContentZoomFocusXRation * bitmap.PixelWidth);                          int fh = (int)(ZoomAndPanControl.ContentZoomFocusYRation * bitmap.PixelHeight);                            bitmap.FillRectangle2(0' 0' bitmap.PixelWidth' bitmap.PixelHeight'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.FillRectangleDeBlend(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)'                              Color.FromArgb(128' 128' 128' 128));                          bitmap.DrawRectangle(fw - (dw / 2)' fh - (dh / 2)' fw + (dw / 2)' fh + (dh / 2)' Colors.White);                          bitmap.Freeze();                          ServiceProvider.Settings.SelectedBitmap.Preview = bitmap;                      }                  }              }              catch (Exception)              {                }
Magic Number,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,worker_DoWork,The following statement contains a magic number: if (ServiceProvider.Settings.SelectedBitmap.FileItem.Loading)              {                  while (ServiceProvider.Settings.SelectedBitmap.FileItem.Loading)                  {                      Thread.Sleep(10);                  }              }              else              {                  BitmapLoader.Instance.GenerateCache(ServiceProvider.Settings.SelectedBitmap.FileItem);              }
Magic Number,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,Settings_PropertyChanged,The following statement contains a magic number: if (e.PropertyName == "DefaultSession")              {                  Thread.Sleep(1000);                  Dispatcher.Invoke(new Action(delegate                                                   {                                                       ImageLIst.SelectedIndex = 0;                                                       if (ImageLIst.Items.Count == 0)                                                       {                                                           ServiceProvider.Settings.SelectedBitmap.DisplayImage = null;                                                           ServiceProvider.Settings.SelectedBitmap.Preview = null;                                                       }                                                   }));              }
Magic Number,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,TriggerEvent,The following statement contains a magic number: try              {                  switch (cmd)                  {                      case WindowsCmdConsts.Next_Image:                          if (ImageLIst.SelectedIndex <                              ImageLIst.Items.Count - 1)                          {                              FileItem item =                                  ImageLIst.SelectedItem as FileItem;                              if (item != null)                              {                                  int ind = ImageLIst.Items.IndexOf(item);                                  ImageLIst.SelectedIndex = ind + 1;                              }                              item = ImageLIst.SelectedItem as FileItem;                              if (item != null)                                  ImageLIst.ScrollIntoView(item);                          }                          break;                      case WindowsCmdConsts.Prev_Image:                          if (ImageLIst.SelectedIndex > 0)                          {                              FileItem item =                                  ImageLIst.SelectedItem as FileItem;                              if (item != null)                              {                                  int ind = ImageLIst.Items.IndexOf(item);                                  ImageLIst.SelectedIndex = ind - 1;                              }                              item = ImageLIst.SelectedItem as FileItem;                              if (item != null)                                  ImageLIst.ScrollIntoView(item);                          }                          break;                      case WindowsCmdConsts.Like_Image:                          if (ImageLIst.SelectedItem != null)                          {                              FileItem item = null;                              if (o != null)                              {                                  item = ServiceProvider.Settings.DefaultSession.GetByName(o as string);                              }                              else                              {                                  item = ImageLIst.SelectedItem as FileItem;                              }                              if (item != null)                              {                                  item.IsLiked = !item.IsLiked;                              }                          }                          break;                      case WindowsCmdConsts.Unlike_Image:                          if (ImageLIst.SelectedItem != null)                          {                              FileItem item = null;                              if (o != null)                              {                                  item =                                      ServiceProvider.Settings.DefaultSession                                          .GetByName(o as string);                              }                              else                              {                                  item = ImageLIst.SelectedItem as FileItem;                              }                              if (item != null)                              {                                  item.IsUnLiked = !item.IsUnLiked;                              }                          }                          break;                      case WindowsCmdConsts.Del_Image:                          {                              DeleteItem();                          }                          break;                      case WindowsCmdConsts.SelectAll_Image:                          {                              ServiceProvider.Settings.DefaultSession.SelectAll();                          }                          break;                      case WindowsCmdConsts.Select_Image:                          FileItem fileItem = o as FileItem;                          if (fileItem != null)                          {                              ImageLIst.SelectedValue = fileItem;                              ImageLIst.ScrollIntoView(fileItem);                          }                          break;                      case WindowsCmdConsts.Refresh_Image:                          RefreshImage();                          break;                      case WindowsCmdConsts.Zoom_Image_Fit:                          ZoomAndPanControl.ScaleToFit();                          break;                      case WindowsCmdConsts.Zoom_Image_100:                          ZoomToFocus();                          LoadFullRes();                          ZoomAndPanControl.ZoomTo(1.0);                          break;                      case WindowsCmdConsts.Zoom_Image_200:                          ZoomToFocus();                          LoadFullRes();                          ZoomAndPanControl.ZoomTo(2.0);                          break;                      case WindowsCmdConsts.RotateLeft:                          {                              FileItem item =                                  ImageLIst.SelectedItem as FileItem;                              if (item != null)                              {                                  item.Rotation--;                                }                          }                          break;                      case WindowsCmdConsts.RotateRight:                          {                              FileItem item =                                  ImageLIst.SelectedItem as FileItem;                              if (item != null)                              {                                  item.Rotation++;                              }                          }                          break;                      case WindowsCmdConsts.ViewExternal:                          OpenInExternalViewer();                          break;                      case WindowsCmdConsts.ViewExplorer:                          OpenInExplorer();                          break;                      case WindowsCmdConsts.RefreshDisplay:                          if (LayoutViewModel.ZoomFit)                              ZoomAndPanControl.ScaleToFit();                          break;                  }                  if (cmd.StartsWith(WindowsCmdConsts.ZoomPoint))                  {                      if (ZoomAndPanControl != null && cmd.Contains("_"))                      {                          var vals = cmd.Split('_');                          if (vals.Count() > 2)                          {                              double x;                              double y;                              double.TryParse(vals[1]' out x);                              double.TryParse(vals[2]' out y);                              if (cmd.EndsWith("!"))                                  ZoomAndPanControl.SnapToRation(x' y);                              else                              {                                  ZoomAndPanControl.AnimatedSnapToRation(x' y);                              }                            }                      }                  }              }              catch (Exception exception)              {                  Log.Error("Unable to process event "' exception);              }
Magic Number,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,TriggerEvent,The following statement contains a magic number: try              {                  switch (cmd)                  {                      case WindowsCmdConsts.Next_Image:                          if (ImageLIst.SelectedIndex <                              ImageLIst.Items.Count - 1)                          {                              FileItem item =                                  ImageLIst.SelectedItem as FileItem;                              if (item != null)                              {                                  int ind = ImageLIst.Items.IndexOf(item);                                  ImageLIst.SelectedIndex = ind + 1;                              }                              item = ImageLIst.SelectedItem as FileItem;                              if (item != null)                                  ImageLIst.ScrollIntoView(item);                          }                          break;                      case WindowsCmdConsts.Prev_Image:                          if (ImageLIst.SelectedIndex > 0)                          {                              FileItem item =                                  ImageLIst.SelectedItem as FileItem;                              if (item != null)                              {                                  int ind = ImageLIst.Items.IndexOf(item);                                  ImageLIst.SelectedIndex = ind - 1;                              }                              item = ImageLIst.SelectedItem as FileItem;                              if (item != null)                                  ImageLIst.ScrollIntoView(item);                          }                          break;                      case WindowsCmdConsts.Like_Image:                          if (ImageLIst.SelectedItem != null)                          {                              FileItem item = null;                              if (o != null)                              {                                  item = ServiceProvider.Settings.DefaultSession.GetByName(o as string);                              }                              else                              {                                  item = ImageLIst.SelectedItem as FileItem;                              }                              if (item != null)                              {                                  item.IsLiked = !item.IsLiked;                              }                          }                          break;                      case WindowsCmdConsts.Unlike_Image:                          if (ImageLIst.SelectedItem != null)                          {                              FileItem item = null;                              if (o != null)                              {                                  item =                                      ServiceProvider.Settings.DefaultSession                                          .GetByName(o as string);                              }                              else                              {                                  item = ImageLIst.SelectedItem as FileItem;                              }                              if (item != null)                              {                                  item.IsUnLiked = !item.IsUnLiked;                              }                          }                          break;                      case WindowsCmdConsts.Del_Image:                          {                              DeleteItem();                          }                          break;                      case WindowsCmdConsts.SelectAll_Image:                          {                              ServiceProvider.Settings.DefaultSession.SelectAll();                          }                          break;                      case WindowsCmdConsts.Select_Image:                          FileItem fileItem = o as FileItem;                          if (fileItem != null)                          {                              ImageLIst.SelectedValue = fileItem;                              ImageLIst.ScrollIntoView(fileItem);                          }                          break;                      case WindowsCmdConsts.Refresh_Image:                          RefreshImage();                          break;                      case WindowsCmdConsts.Zoom_Image_Fit:                          ZoomAndPanControl.ScaleToFit();                          break;                      case WindowsCmdConsts.Zoom_Image_100:                          ZoomToFocus();                          LoadFullRes();                          ZoomAndPanControl.ZoomTo(1.0);                          break;                      case WindowsCmdConsts.Zoom_Image_200:                          ZoomToFocus();                          LoadFullRes();                          ZoomAndPanControl.ZoomTo(2.0);                          break;                      case WindowsCmdConsts.RotateLeft:                          {                              FileItem item =                                  ImageLIst.SelectedItem as FileItem;                              if (item != null)                              {                                  item.Rotation--;                                }                          }                          break;                      case WindowsCmdConsts.RotateRight:                          {                              FileItem item =                                  ImageLIst.SelectedItem as FileItem;                              if (item != null)                              {                                  item.Rotation++;                              }                          }                          break;                      case WindowsCmdConsts.ViewExternal:                          OpenInExternalViewer();                          break;                      case WindowsCmdConsts.ViewExplorer:                          OpenInExplorer();                          break;                      case WindowsCmdConsts.RefreshDisplay:                          if (LayoutViewModel.ZoomFit)                              ZoomAndPanControl.ScaleToFit();                          break;                  }                  if (cmd.StartsWith(WindowsCmdConsts.ZoomPoint))                  {                      if (ZoomAndPanControl != null && cmd.Contains("_"))                      {                          var vals = cmd.Split('_');                          if (vals.Count() > 2)                          {                              double x;                              double y;                              double.TryParse(vals[1]' out x);                              double.TryParse(vals[2]' out y);                              if (cmd.EndsWith("!"))                                  ZoomAndPanControl.SnapToRation(x' y);                              else                              {                                  ZoomAndPanControl.AnimatedSnapToRation(x' y);                              }                            }                      }                  }              }              catch (Exception exception)              {                  Log.Error("Unable to process event "' exception);              }
Magic Number,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,TriggerEvent,The following statement contains a magic number: try              {                  switch (cmd)                  {                      case WindowsCmdConsts.Next_Image:                          if (ImageLIst.SelectedIndex <                              ImageLIst.Items.Count - 1)                          {                              FileItem item =                                  ImageLIst.SelectedItem as FileItem;                              if (item != null)                              {                                  int ind = ImageLIst.Items.IndexOf(item);                                  ImageLIst.SelectedIndex = ind + 1;                              }                              item = ImageLIst.SelectedItem as FileItem;                              if (item != null)                                  ImageLIst.ScrollIntoView(item);                          }                          break;                      case WindowsCmdConsts.Prev_Image:                          if (ImageLIst.SelectedIndex > 0)                          {                              FileItem item =                                  ImageLIst.SelectedItem as FileItem;                              if (item != null)                              {                                  int ind = ImageLIst.Items.IndexOf(item);                                  ImageLIst.SelectedIndex = ind - 1;                              }                              item = ImageLIst.SelectedItem as FileItem;                              if (item != null)                                  ImageLIst.ScrollIntoView(item);                          }                          break;                      case WindowsCmdConsts.Like_Image:                          if (ImageLIst.SelectedItem != null)                          {                              FileItem item = null;                              if (o != null)                              {                                  item = ServiceProvider.Settings.DefaultSession.GetByName(o as string);                              }                              else                              {                                  item = ImageLIst.SelectedItem as FileItem;                              }                              if (item != null)                              {                                  item.IsLiked = !item.IsLiked;                              }                          }                          break;                      case WindowsCmdConsts.Unlike_Image:                          if (ImageLIst.SelectedItem != null)                          {                              FileItem item = null;                              if (o != null)                              {                                  item =                                      ServiceProvider.Settings.DefaultSession                                          .GetByName(o as string);                              }                              else                              {                                  item = ImageLIst.SelectedItem as FileItem;                              }                              if (item != null)                              {                                  item.IsUnLiked = !item.IsUnLiked;                              }                          }                          break;                      case WindowsCmdConsts.Del_Image:                          {                              DeleteItem();                          }                          break;                      case WindowsCmdConsts.SelectAll_Image:                          {                              ServiceProvider.Settings.DefaultSession.SelectAll();                          }                          break;                      case WindowsCmdConsts.Select_Image:                          FileItem fileItem = o as FileItem;                          if (fileItem != null)                          {                              ImageLIst.SelectedValue = fileItem;                              ImageLIst.ScrollIntoView(fileItem);                          }                          break;                      case WindowsCmdConsts.Refresh_Image:                          RefreshImage();                          break;                      case WindowsCmdConsts.Zoom_Image_Fit:                          ZoomAndPanControl.ScaleToFit();                          break;                      case WindowsCmdConsts.Zoom_Image_100:                          ZoomToFocus();                          LoadFullRes();                          ZoomAndPanControl.ZoomTo(1.0);                          break;                      case WindowsCmdConsts.Zoom_Image_200:                          ZoomToFocus();                          LoadFullRes();                          ZoomAndPanControl.ZoomTo(2.0);                          break;                      case WindowsCmdConsts.RotateLeft:                          {                              FileItem item =                                  ImageLIst.SelectedItem as FileItem;                              if (item != null)                              {                                  item.Rotation--;                                }                          }                          break;                      case WindowsCmdConsts.RotateRight:                          {                              FileItem item =                                  ImageLIst.SelectedItem as FileItem;                              if (item != null)                              {                                  item.Rotation++;                              }                          }                          break;                      case WindowsCmdConsts.ViewExternal:                          OpenInExternalViewer();                          break;                      case WindowsCmdConsts.ViewExplorer:                          OpenInExplorer();                          break;                      case WindowsCmdConsts.RefreshDisplay:                          if (LayoutViewModel.ZoomFit)                              ZoomAndPanControl.ScaleToFit();                          break;                  }                  if (cmd.StartsWith(WindowsCmdConsts.ZoomPoint))                  {                      if (ZoomAndPanControl != null && cmd.Contains("_"))                      {                          var vals = cmd.Split('_');                          if (vals.Count() > 2)                          {                              double x;                              double y;                              double.TryParse(vals[1]' out x);                              double.TryParse(vals[2]' out y);                              if (cmd.EndsWith("!"))                                  ZoomAndPanControl.SnapToRation(x' y);                              else                              {                                  ZoomAndPanControl.AnimatedSnapToRation(x' y);                              }                            }                      }                  }              }              catch (Exception exception)              {                  Log.Error("Unable to process event "' exception);              }
Magic Number,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,ZoomToFocus,The following statement contains a magic number: if (                  ServiceProvider.Settings.SelectedBitmap.FileItem                      .FileInfo != null &&                  ServiceProvider.Settings.SelectedBitmap.FileItem                      .FileInfo.FocusPoints.Count > 0)              {                  ZoomAndPanControl.SnapTo(new Point(ServiceProvider.Settings.SelectedBitmap.FileItem.FileInfo.FocusPoints[0].X + ServiceProvider.Settings.SelectedBitmap.FileItem.FileInfo.FocusPoints[0].Width / 2'                      ServiceProvider.Settings.SelectedBitmap.FileItem.FileInfo.FocusPoints[0].Y + ServiceProvider.Settings.SelectedBitmap.FileItem.FileInfo.FocusPoints[0].Height / 2));              }
Magic Number,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,ZoomToFocus,The following statement contains a magic number: if (                  ServiceProvider.Settings.SelectedBitmap.FileItem                      .FileInfo != null &&                  ServiceProvider.Settings.SelectedBitmap.FileItem                      .FileInfo.FocusPoints.Count > 0)              {                  ZoomAndPanControl.SnapTo(new Point(ServiceProvider.Settings.SelectedBitmap.FileItem.FileInfo.FocusPoints[0].X + ServiceProvider.Settings.SelectedBitmap.FileItem.FileInfo.FocusPoints[0].Width / 2'                      ServiceProvider.Settings.SelectedBitmap.FileItem.FileInfo.FocusPoints[0].Y + ServiceProvider.Settings.SelectedBitmap.FileItem.FileInfo.FocusPoints[0].Height / 2));              }
Magic Number,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,zoomAndPanControl_MouseWheel,The following statement contains a magic number: if (e.Delta > 0)              {                  ZoomIn(curContentMousePoint);              }              else if (e.Delta < 0)              {                  // don't allow zoomout les that original image                   if (ZoomAndPanControl.ContentScale - 0.1 > ZoomAndPanControl.FitScale())                  {                      ZoomAndPanControl.ZoomOut(curContentMousePoint);                  }                  else                  {                      ZoomAndPanControl.ScaleToFit();                  }                  ZoomOut(curContentMousePoint);              }
Magic Number,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,ZoomOut,The following statement contains a magic number: ZoomAndPanControl.ZoomAboutPoint(ZoomAndPanControl.ContentScale - 0.1' contentZoomCenter);
Magic Number,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,ZoomIn,The following statement contains a magic number: ZoomAndPanControl.ZoomAboutPoint(ZoomAndPanControl.ContentScale + 0.1' contentZoomCenter);
Magic Number,CameraControl,App,C:\repos\dukus_digiCamControl\CameraControl\App.xaml.cs,WindowsManager_Event,The following statement contains a magic number: try              {                    Log.Debug("Window command received :" + cmd);                    if (cmd != WindowsCmdConsts.Next_Image && cmd != WindowsCmdConsts.Prev_Image &&                      cmd != WindowsCmdConsts.Select_Image && !cmd.StartsWith("Zoom"))                      ServiceProvider.Analytics.Command(cmd' o as string);                    if (cmd == CmdConsts.All_Close)                  {                      ServiceProvider.WindowsManager.Event -= WindowsManager_Event;                      ServiceProvider.Analytics.Stop();                      ServiceProvider.Database.EndEvent(EventType.App);                      if (ServiceProvider.Settings != null)                      {                          ServiceProvider.Settings.Save(ServiceProvider.Settings.DefaultSession);                          ServiceProvider.Settings.Save();                          if (ServiceProvider.Trigger != null)                          {                              ServiceProvider.Trigger.Stop();                          }                      }                      ServiceProvider.ScriptManager.Stop();                      ServiceProvider.DeviceManager.CloseAll();                      Thread.Sleep(1000);                      Dispatcher.Invoke(new Action(() => Current.Shutdown()));                  }                  switch (cmd)                  {                      case CmdConsts.Capture:                          Thread thread = new Thread(new ThreadStart(CameraHelper.Capture));                          thread.Start();                          break;                      case CmdConsts.CaptureNoAf:                          CameraHelper.CaptureNoAf();                          break;                      case CmdConsts.CaptureAll:                          CameraHelper.CaptureAll(0);                          break;                      case CmdConsts.StartBulb:                          if (ServiceProvider.DeviceManager.SelectedCameraDevice.GetCapability(CapabilityEnum.Bulb))                          {                              ServiceProvider.DeviceManager.LastCapturedImage[ServiceProvider.DeviceManager.SelectedCameraDevice] = "-";                              ServiceProvider.DeviceManager.SelectedCameraDevice.IsBusy = true;                              ServiceProvider.DeviceManager.SelectedCameraDevice.LockCamera();                              ServiceProvider.DeviceManager.SelectedCameraDevice.StartBulbMode();                          }                          else                          {                              throw new Exception(TranslationStrings.MsgBulbModeNotSupported);                          }                          break;                      case CmdConsts.EndBulb:                          ServiceProvider.DeviceManager.SelectedCameraDevice.EndBulbMode();                          break;                      case CmdConsts.NextSeries:                          if (ServiceProvider.Settings != null) ServiceProvider.Settings.DefaultSession.Series++;                          break;                  }                  ICameraDevice device = ServiceProvider.DeviceManager.SelectedCameraDevice;                  if (device != null && device.IsConnected)                  {                      switch (cmd)                      {                          //case CmdConsts.ResetDevice:                          //        device.ResetDevice();                          //    break;                          case CmdConsts.NextAperture:                              if (device.FNumber != null)                                  device.FNumber.NextValue();                              break;                          case CmdConsts.PrevAperture:                              if (device.FNumber != null)                                  device.FNumber.PrevValue();                              break;                          case CmdConsts.NextIso:                              if (device.IsoNumber != null)                                  device.IsoNumber.NextValue();                              break;                          case CmdConsts.PrevIso:                              if (device.IsoNumber != null)                                  device.IsoNumber.PrevValue();                              break;                          case CmdConsts.NextShutter:                              if (device.ShutterSpeed != null)                                  device.ShutterSpeed.NextValue();                              break;                          case CmdConsts.PrevShutter:                              if (device.ShutterSpeed != null)                                  device.ShutterSpeed.PrevValue();                              break;                          case CmdConsts.NextWhiteBalance:                              if (device.WhiteBalance != null)                                  device.WhiteBalance.NextValue();                              break;                          case CmdConsts.PrevWhiteBalance:                              if (device.WhiteBalance != null)                                  device.WhiteBalance.PrevValue();                              break;                          case CmdConsts.NextExposureCompensation:                              if (device.ExposureCompensation != null)                                  device.ExposureCompensation.NextValue();                              break;                          case CmdConsts.PrevExposureCompensation:                              if (device.ExposureCompensation != null)                                  device.ExposureCompensation.PrevValue();                              break;                          case CmdConsts.NextCamera:                              ServiceProvider.DeviceManager.SelectNextCamera();                              break;                          case CmdConsts.PrevCamera:                              ServiceProvider.DeviceManager.SelectPrevCamera();                              break;                      }                  }              }              catch (Exception ex)              {                  Log.Error("Error processing comand"' ex);              }
Magic Number,CameraControl,App,C:\repos\dukus_digiCamControl\CameraControl\App.xaml.cs,cameraDevice_CameraInitDone,The following statement contains a magic number: if (preset != null)              {                  var thread = new Thread(delegate()                  {                      try                      {                          Thread.Sleep(1500);                          cameraDevice.WaitForCamera(5000);                          preset.Set(cameraDevice);                      }                      catch (Exception e)                      {                          Log.Error("Unable to load default preset"' e);                      }                  });                  thread.Start();              }
Magic Number,CameraControl,App,C:\repos\dukus_digiCamControl\CameraControl\App.xaml.cs,cameraDevice_CameraInitDone,The following statement contains a magic number: if (preset != null)              {                  var thread = new Thread(delegate()                  {                      try                      {                          Thread.Sleep(1500);                          cameraDevice.WaitForCamera(5000);                          preset.Set(cameraDevice);                      }                      catch (Exception e)                      {                          Log.Error("Unable to load default preset"' e);                      }                  });                  thread.Start();              }
Magic Number,CameraControl,MainWindow,C:\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,LoadInAllPreset,The following statement contains a magic number: try              {                  int i = 0;                  dlg.MaxValue = ServiceProvider.DeviceManager.ConnectedDevices.Count;                  foreach (ICameraDevice connectedDevice in ServiceProvider.DeviceManager.ConnectedDevices)                  {                      if (connectedDevice == null || !connectedDevice.IsConnected)                          continue;                      try                      {                            dlg.Label = connectedDevice.DisplayName;                          dlg.Progress = i;                          i++;                          preset.Set(connectedDevice);                      }                      catch (Exception exception)                      {                          Log.Error("Unable to set property "' exception);                      }                      Thread.Sleep(250);                  }              }              catch (Exception exception)              {                  Log.Error("Unable to set property "' exception);              }
Magic Number,CameraControl,MainWindow,C:\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,VerifyPreset,The following statement contains a magic number: try              {                  int i = 0;                  dlg.MaxValue = ServiceProvider.DeviceManager.ConnectedDevices.Count;                  foreach (ICameraDevice connectedDevice in ServiceProvider.DeviceManager.ConnectedDevices)                  {                      if (connectedDevice == null || !connectedDevice.IsConnected)                          continue;                      try                      {                          dlg.Label = connectedDevice.DisplayName;                          dlg.Progress = i;                          i++;                          preset.Verify(connectedDevice);                      }                      catch (Exception exception)                      {                          Log.Error("Unable to set property "' exception);                      }                      Thread.Sleep(250);                  }              }              catch (Exception exception)              {                  Log.Error("Unable to set property "' exception);              }
Magic Number,CameraControl,MainWindow,C:\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,StartupThread,The following statement contains a magic number: foreach (var cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)              {                  Log.Debug("cameraDevice_CameraInitDone 1");                  var property = cameraDevice.LoadProperties();                  CameraPreset preset = ServiceProvider.Settings.GetPreset(property.DefaultPresetName);                  // multiple canon cameras block with this settings                    if ((cameraDevice is CanonSDKBase && ServiceProvider.Settings.LoadCanonTransferMode) || !(cameraDevice is CanonSDKBase))                      cameraDevice.CaptureInSdRam = property.CaptureInSdRam;                    Log.Debug("cameraDevice_CameraInitDone 1a");                  if (ServiceProvider.Settings.SyncCameraDateTime)                  {                      try                      {                          cameraDevice.DateTime = DateTime.Now;                      }                      catch (Exception exception)                      {                          Log.Error("Unable to sysnc date time"' exception);                      }                  }                  if (preset != null)                  {                      try                      {                          Thread.Sleep(500);                          cameraDevice.WaitForCamera(5000);                          preset.Set(cameraDevice);                      }                      catch (Exception e)                      {                          Log.Error("Unable to load default preset"' e);                      }                  }              }
Magic Number,CameraControl,MainWindow,C:\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,StartupThread,The following statement contains a magic number: foreach (var cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)              {                  Log.Debug("cameraDevice_CameraInitDone 1");                  var property = cameraDevice.LoadProperties();                  CameraPreset preset = ServiceProvider.Settings.GetPreset(property.DefaultPresetName);                  // multiple canon cameras block with this settings                    if ((cameraDevice is CanonSDKBase && ServiceProvider.Settings.LoadCanonTransferMode) || !(cameraDevice is CanonSDKBase))                      cameraDevice.CaptureInSdRam = property.CaptureInSdRam;                    Log.Debug("cameraDevice_CameraInitDone 1a");                  if (ServiceProvider.Settings.SyncCameraDateTime)                  {                      try                      {                          cameraDevice.DateTime = DateTime.Now;                      }                      catch (Exception exception)                      {                          Log.Error("Unable to sysnc date time"' exception);                      }                  }                  if (preset != null)                  {                      try                      {                          Thread.Sleep(500);                          cameraDevice.WaitForCamera(5000);                          preset.Set(cameraDevice);                      }                      catch (Exception e)                      {                          Log.Error("Unable to load default preset"' e);                      }                  }              }
Magic Number,CameraControl,MainWindow,C:\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,StartupThread,The following statement contains a magic number: if ((DateTime.Now - ServiceProvider.Settings.LastUpdateCheckDate).TotalDays > 7)              {                  if (!ServiceProvider.Branding.CheckForUpdate)                      return;                    Thread.Sleep(2000);                  ServiceProvider.Settings.LastUpdateCheckDate = DateTime.Now;                  ServiceProvider.Settings.Save();                  Dispatcher.Invoke(new Action(() => NewVersionWnd.CheckForUpdate(false)));              }              else              {                  if (!ServiceProvider.Branding.ShowWelcomeScreen || !ServiceProvider.Branding.OnlineReference)                      return;                    // show welcome screen only if not start minimized                  if (!ServiceProvider.Settings.StartMinimized)                  {                      Dispatcher.Invoke(() =>                      {                          try                          {                              var wnd = new Welcome();                              wnd.ShowDialog();                          }                          catch                          {                          }                      });                  }              }
Magic Number,CameraControl,MainWindow,C:\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,StartupThread,The following statement contains a magic number: if ((DateTime.Now - ServiceProvider.Settings.LastUpdateCheckDate).TotalDays > 7)              {                  if (!ServiceProvider.Branding.CheckForUpdate)                      return;                    Thread.Sleep(2000);                  ServiceProvider.Settings.LastUpdateCheckDate = DateTime.Now;                  ServiceProvider.Settings.Save();                  Dispatcher.Invoke(new Action(() => NewVersionWnd.CheckForUpdate(false)));              }              else              {                  if (!ServiceProvider.Branding.ShowWelcomeScreen || !ServiceProvider.Branding.OnlineReference)                      return;                    // show welcome screen only if not start minimized                  if (!ServiceProvider.Settings.StartMinimized)                  {                      Dispatcher.Invoke(() =>                      {                          try                          {                              var wnd = new Welcome();                              wnd.ShowDialog();                          }                          catch                          {                          }                      });                  }              }
Magic Number,CameraControl,MainWindow,C:\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,PhotoCaptured,The following statement contains a magic number: try              {                  Log.Debug("Photo transfer begin.");                  eventArgs.CameraDevice.IsBusy = true;                  var extension = Path.GetExtension(eventArgs.FileName);                    // the capture is for live view preview                   if (LiveViewManager.PreviewRequest.ContainsKey(eventArgs.CameraDevice) &&                      LiveViewManager.PreviewRequest[eventArgs.CameraDevice])                  {                      LiveViewManager.PreviewRequest[eventArgs.CameraDevice] = false;                      var file = Path.Combine(Path.GetTempPath()' Path.GetRandomFileName() + extension);                      eventArgs.CameraDevice.TransferFile(eventArgs.Handle' file);                      eventArgs.CameraDevice.IsBusy = false;                      eventArgs.CameraDevice.TransferProgress = 0;                      eventArgs.CameraDevice.ReleaseResurce(eventArgs.Handle);                      LiveViewManager.Preview[eventArgs.CameraDevice] = file;                      LiveViewManager.OnPreviewCaptured(eventArgs.CameraDevice' file);                      return;                  }                    CameraProperty property = eventArgs.CameraDevice.LoadProperties();                  PhotoSession session = (PhotoSession)eventArgs.CameraDevice.AttachedPhotoSession ??                                         ServiceProvider.Settings.DefaultSession;                  StaticHelper.Instance.SystemMessage = "";                      if (!eventArgs.CameraDevice.CaptureInSdRam || PhotoUtils.IsMovie(eventArgs.FileName))                  {                      if (property.NoDownload)                      {                          eventArgs.CameraDevice.IsBusy = false;                          eventArgs.CameraDevice.ReleaseResurce(eventArgs.Handle);                          return;                      }                      if (extension != null && (session.DownloadOnlyJpg && extension.ToLower() != ".jpg"))                      {                          eventArgs.CameraDevice.IsBusy = false;                          eventArgs.CameraDevice.ReleaseResurce(eventArgs.Handle);                          return;                      }                  }                    StaticHelper.Instance.SystemMessage = TranslationStrings.MsgPhotoTransferBegin;                    string tempFile = Path.GetTempFileName();                    if (File.Exists(tempFile))                      File.Delete(tempFile);                    Stopwatch stopWatch = new Stopwatch();                  // transfer file from camera to temporary folder                   // in this way if the session folder is used as hot folder will prevent write errors                  stopWatch.Start();                  if (!eventArgs.CameraDevice.CaptureInSdRam && session.DownloadThumbOnly)                      eventArgs.CameraDevice.TransferFileThumb(eventArgs.Handle' tempFile);                  else                      eventArgs.CameraDevice.TransferFile(eventArgs.Handle' tempFile);                  eventArgs.CameraDevice.TransferProgress = 0;                  eventArgs.CameraDevice.IsBusy = false;                  stopWatch.Stop();                  string strTransfer = "Transfer time : " + stopWatch.Elapsed.TotalSeconds.ToString("##.###") + " Speed :" +                                       Math.Round(                                           new System.IO.FileInfo(tempFile).Length / 1024.0 / 1024 /                                           stopWatch.Elapsed.TotalSeconds' 2)+" Mb/s";                  Log.Debug(strTransfer);                    string fileName = "";                  if (!session.UseOriginalFilename || eventArgs.CameraDevice.CaptureInSdRam)                  {                      fileName =                          session.GetNextFileName(eventArgs.FileName' eventArgs.CameraDevice' tempFile);                  }                  else                  {                      fileName = Path.Combine(session.Folder' eventArgs.FileName);                      if (File.Exists(fileName) && !session.AllowOverWrite)                          fileName =                              StaticHelper.GetUniqueFilename(                                  Path.GetDirectoryName(fileName) + "\\" + Path.GetFileNameWithoutExtension(fileName) +                                  "_"' 0'                                  Path.GetExtension(fileName));                  }                    if (session.AllowOverWrite && File.Exists(fileName))                  {                      PhotoUtils.WaitForFile(fileName);                      File.Delete(fileName);                  }                    // make lower case extension                   if (session.LowerCaseExtension && !string.IsNullOrEmpty(Path.GetExtension(fileName)))                  {                      fileName = Path.Combine(Path.GetDirectoryName(fileName)'                          Path.GetFileNameWithoutExtension(fileName) + Path.GetExtension(fileName).ToLower());                  }                      if (session.AskSavePath)                  {                      SaveFileDialog dialog = new SaveFileDialog();                      dialog.Filter = "All files|*.*";                      dialog.Title = "Save captured photo";                      dialog.FileName = fileName;                      dialog.InitialDirectory = Path.GetDirectoryName(fileName);                      if (dialog.ShowDialog() == true)                      {                          fileName = dialog.FileName;                      }                      else                      {                          eventArgs.CameraDevice.IsBusy = false;                          if (File.Exists(tempFile))                              File.Delete(tempFile);                          return;                      }                  }                    if (!Directory.Exists(Path.GetDirectoryName(fileName)))                  {                      Directory.CreateDirectory(Path.GetDirectoryName(fileName));                  }                      string backupfile = null;                  if (session.BackUp)                  {                      backupfile = session.CopyBackUp(tempFile' fileName);                      if (string.IsNullOrEmpty(backupfile))                          StaticHelper.Instance.SystemMessage = "Unable to save the backup";                  }                    // execute plugins which are executed before transfer                   if (ServiceProvider.Settings.DefaultSession.AutoExportPluginConfigs.Count((x) => !x.RunAfterTransfer) > 0)                  {                      FileItem tempitem = new FileItem(tempFile);                      tempitem.Name = Path.GetFileName(fileName);                      tempitem.BackupFileName = backupfile;                      tempitem.Series = session.Series;                      tempitem.AddTemplates(eventArgs.CameraDevice' session);                      ExecuteAutoexportPlugins(eventArgs.CameraDevice' tempitem' false);                  }                      if ((!eventArgs.CameraDevice.CaptureInSdRam || PhotoUtils.IsMovie(fileName)) && session.DeleteFileAfterTransfer)                      eventArgs.CameraDevice.DeleteObject(new DeviceObject() { Handle = eventArgs.Handle });                    File.Copy(tempFile' fileName);                    if (File.Exists(tempFile))                  {                      PhotoUtils.WaitForFile(tempFile);                      File.Delete(tempFile);                  }                    if (session.WriteComment)                  {                      if (!string.IsNullOrEmpty(session.Comment))                          Exiv2Helper.SaveComment(fileName' session.Comment);                      if (session.SelectedTag1 != null && !string.IsNullOrEmpty(session.SelectedTag1.Value))                          Exiv2Helper.AddKeyword(fileName' session.SelectedTag1.Value);                      if (session.SelectedTag2 != null && !string.IsNullOrEmpty(session.SelectedTag2.Value))                          Exiv2Helper.AddKeyword(fileName' session.SelectedTag2.Value);                      if (session.SelectedTag3 != null && !string.IsNullOrEmpty(session.SelectedTag3.Value))                          Exiv2Helper.AddKeyword(fileName' session.SelectedTag3.Value);                      if (session.SelectedTag4 != null && !string.IsNullOrEmpty(session.SelectedTag4.Value))                          Exiv2Helper.AddKeyword(fileName' session.SelectedTag4.Value);                  }                    if (session.ExternalData != null)                      session.ExternalData.FileName = fileName;                    // prevent crash og GUI when item count updated                  Dispatcher.Invoke(new Action(delegate                  {                      try                      {                          _selectedItem = session.GetNewFileItem(fileName);                          _selectedItem.BackupFileName = backupfile;                          _selectedItem.Series = session.Series;                          // _selectedItem.Transformed = tempitem.Transformed;                          _selectedItem.AddTemplates(eventArgs.CameraDevice' session);                          ServiceProvider.Database.Add(new DbFile(_selectedItem' eventArgs.CameraDevice.SerialNumber' eventArgs.CameraDevice.DisplayName' session.Name));                      }                      catch (Exception ex)                      {                        }                  }));                    // execute plugins which are executed after transfer                    ExecuteAutoexportPlugins(eventArgs.CameraDevice' _selectedItem' true);                    Dispatcher.Invoke(() =>                  {                      _selectedItem.RemoveThumbs();                      session.Add(_selectedItem);                      ServiceProvider.OnFileTransfered(_selectedItem);                  });                      if (ServiceProvider.Settings.MinimizeToTrayIcon && !IsVisible && !ServiceProvider.Settings.HideTrayNotifications)                  {                      MyNotifyIcon.HideBalloonTip();                      MyNotifyIcon.ShowBalloonTip("Photo transfered"' fileName' BalloonIcon.Info);                  }                    ServiceProvider.DeviceManager.LastCapturedImage[eventArgs.CameraDevice] = fileName;                    //select the new file only when the multiple camera support isn't used to prevent high CPU usage on raw files                  if (ServiceProvider.Settings.AutoPreview &&                      !ServiceProvider.WindowsManager.Get(typeof(MultipleCameraWnd)).IsVisible &&                      !ServiceProvider.Settings.UseExternalViewer)                  {                      if ((Path.GetExtension(fileName).ToLower() == ".jpg" && ServiceProvider.Settings.AutoPreviewJpgOnly) ||                          !ServiceProvider.Settings.AutoPreviewJpgOnly)                      {                          if ((DateTime.Now - _lastLoadTime).TotalSeconds < 4)                          {                              _selectiontimer.Stop();                              _selectiontimer.Start();                          }                          else                          {                              ServiceProvider.WindowsManager.ExecuteCommand(WindowsCmdConsts.Select_Image' _selectedItem);                          }                      }                  }                  _lastLoadTime = DateTime.Now;                  //ServiceProvider.Settings.Save(session);                  StaticHelper.Instance.SystemMessage = TranslationStrings.MsgPhotoTransferDone + " "+ strTransfer;                    if (ServiceProvider.Settings.UseExternalViewer &&                      File.Exists(ServiceProvider.Settings.ExternalViewerPath))                  {                      string arg = ServiceProvider.Settings.ExternalViewerArgs;                      arg = arg.Contains("%1") ? arg.Replace("%1"' fileName) : arg + " " + fileName;                      PhotoUtils.Run(ServiceProvider.Settings.ExternalViewerPath' arg' ProcessWindowStyle.Normal);                  }                  if (ServiceProvider.Settings.PlaySound)                  {                      PhotoUtils.PlayCaptureSound();                  }                  eventArgs.CameraDevice.ReleaseResurce(eventArgs.Handle);                                    //show fullscreen only when the multiple camera support isn't used                  if (ServiceProvider.Settings.Preview &&                      !ServiceProvider.WindowsManager.Get(typeof(MultipleCameraWnd)).IsVisible &&                      !ServiceProvider.Settings.UseExternalViewer)                        ServiceProvider.WindowsManager.ExecuteCommand(WindowsCmdConsts.FullScreenWnd_ShowTimed);                    Log.Debug("Photo transfer done.");              }              catch (Exception ex)              {                  eventArgs.CameraDevice.IsBusy = false;                  StaticHelper.Instance.SystemMessage = TranslationStrings.MsgPhotoTransferError + " " + ex.Message;                  Log.Error("Transfer error !"' ex);              }
Magic Number,CameraControl,MainWindow,C:\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,PhotoCaptured,The following statement contains a magic number: try              {                  Log.Debug("Photo transfer begin.");                  eventArgs.CameraDevice.IsBusy = true;                  var extension = Path.GetExtension(eventArgs.FileName);                    // the capture is for live view preview                   if (LiveViewManager.PreviewRequest.ContainsKey(eventArgs.CameraDevice) &&                      LiveViewManager.PreviewRequest[eventArgs.CameraDevice])                  {                      LiveViewManager.PreviewRequest[eventArgs.CameraDevice] = false;                      var file = Path.Combine(Path.GetTempPath()' Path.GetRandomFileName() + extension);                      eventArgs.CameraDevice.TransferFile(eventArgs.Handle' file);                      eventArgs.CameraDevice.IsBusy = false;                      eventArgs.CameraDevice.TransferProgress = 0;                      eventArgs.CameraDevice.ReleaseResurce(eventArgs.Handle);                      LiveViewManager.Preview[eventArgs.CameraDevice] = file;                      LiveViewManager.OnPreviewCaptured(eventArgs.CameraDevice' file);                      return;                  }                    CameraProperty property = eventArgs.CameraDevice.LoadProperties();                  PhotoSession session = (PhotoSession)eventArgs.CameraDevice.AttachedPhotoSession ??                                         ServiceProvider.Settings.DefaultSession;                  StaticHelper.Instance.SystemMessage = "";                      if (!eventArgs.CameraDevice.CaptureInSdRam || PhotoUtils.IsMovie(eventArgs.FileName))                  {                      if (property.NoDownload)                      {                          eventArgs.CameraDevice.IsBusy = false;                          eventArgs.CameraDevice.ReleaseResurce(eventArgs.Handle);                          return;                      }                      if (extension != null && (session.DownloadOnlyJpg && extension.ToLower() != ".jpg"))                      {                          eventArgs.CameraDevice.IsBusy = false;                          eventArgs.CameraDevice.ReleaseResurce(eventArgs.Handle);                          return;                      }                  }                    StaticHelper.Instance.SystemMessage = TranslationStrings.MsgPhotoTransferBegin;                    string tempFile = Path.GetTempFileName();                    if (File.Exists(tempFile))                      File.Delete(tempFile);                    Stopwatch stopWatch = new Stopwatch();                  // transfer file from camera to temporary folder                   // in this way if the session folder is used as hot folder will prevent write errors                  stopWatch.Start();                  if (!eventArgs.CameraDevice.CaptureInSdRam && session.DownloadThumbOnly)                      eventArgs.CameraDevice.TransferFileThumb(eventArgs.Handle' tempFile);                  else                      eventArgs.CameraDevice.TransferFile(eventArgs.Handle' tempFile);                  eventArgs.CameraDevice.TransferProgress = 0;                  eventArgs.CameraDevice.IsBusy = false;                  stopWatch.Stop();                  string strTransfer = "Transfer time : " + stopWatch.Elapsed.TotalSeconds.ToString("##.###") + " Speed :" +                                       Math.Round(                                           new System.IO.FileInfo(tempFile).Length / 1024.0 / 1024 /                                           stopWatch.Elapsed.TotalSeconds' 2)+" Mb/s";                  Log.Debug(strTransfer);                    string fileName = "";                  if (!session.UseOriginalFilename || eventArgs.CameraDevice.CaptureInSdRam)                  {                      fileName =                          session.GetNextFileName(eventArgs.FileName' eventArgs.CameraDevice' tempFile);                  }                  else                  {                      fileName = Path.Combine(session.Folder' eventArgs.FileName);                      if (File.Exists(fileName) && !session.AllowOverWrite)                          fileName =                              StaticHelper.GetUniqueFilename(                                  Path.GetDirectoryName(fileName) + "\\" + Path.GetFileNameWithoutExtension(fileName) +                                  "_"' 0'                                  Path.GetExtension(fileName));                  }                    if (session.AllowOverWrite && File.Exists(fileName))                  {                      PhotoUtils.WaitForFile(fileName);                      File.Delete(fileName);                  }                    // make lower case extension                   if (session.LowerCaseExtension && !string.IsNullOrEmpty(Path.GetExtension(fileName)))                  {                      fileName = Path.Combine(Path.GetDirectoryName(fileName)'                          Path.GetFileNameWithoutExtension(fileName) + Path.GetExtension(fileName).ToLower());                  }                      if (session.AskSavePath)                  {                      SaveFileDialog dialog = new SaveFileDialog();                      dialog.Filter = "All files|*.*";                      dialog.Title = "Save captured photo";                      dialog.FileName = fileName;                      dialog.InitialDirectory = Path.GetDirectoryName(fileName);                      if (dialog.ShowDialog() == true)                      {                          fileName = dialog.FileName;                      }                      else                      {                          eventArgs.CameraDevice.IsBusy = false;                          if (File.Exists(tempFile))                              File.Delete(tempFile);                          return;                      }                  }                    if (!Directory.Exists(Path.GetDirectoryName(fileName)))                  {                      Directory.CreateDirectory(Path.GetDirectoryName(fileName));                  }                      string backupfile = null;                  if (session.BackUp)                  {                      backupfile = session.CopyBackUp(tempFile' fileName);                      if (string.IsNullOrEmpty(backupfile))                          StaticHelper.Instance.SystemMessage = "Unable to save the backup";                  }                    // execute plugins which are executed before transfer                   if (ServiceProvider.Settings.DefaultSession.AutoExportPluginConfigs.Count((x) => !x.RunAfterTransfer) > 0)                  {                      FileItem tempitem = new FileItem(tempFile);                      tempitem.Name = Path.GetFileName(fileName);                      tempitem.BackupFileName = backupfile;                      tempitem.Series = session.Series;                      tempitem.AddTemplates(eventArgs.CameraDevice' session);                      ExecuteAutoexportPlugins(eventArgs.CameraDevice' tempitem' false);                  }                      if ((!eventArgs.CameraDevice.CaptureInSdRam || PhotoUtils.IsMovie(fileName)) && session.DeleteFileAfterTransfer)                      eventArgs.CameraDevice.DeleteObject(new DeviceObject() { Handle = eventArgs.Handle });                    File.Copy(tempFile' fileName);                    if (File.Exists(tempFile))                  {                      PhotoUtils.WaitForFile(tempFile);                      File.Delete(tempFile);                  }                    if (session.WriteComment)                  {                      if (!string.IsNullOrEmpty(session.Comment))                          Exiv2Helper.SaveComment(fileName' session.Comment);                      if (session.SelectedTag1 != null && !string.IsNullOrEmpty(session.SelectedTag1.Value))                          Exiv2Helper.AddKeyword(fileName' session.SelectedTag1.Value);                      if (session.SelectedTag2 != null && !string.IsNullOrEmpty(session.SelectedTag2.Value))                          Exiv2Helper.AddKeyword(fileName' session.SelectedTag2.Value);                      if (session.SelectedTag3 != null && !string.IsNullOrEmpty(session.SelectedTag3.Value))                          Exiv2Helper.AddKeyword(fileName' session.SelectedTag3.Value);                      if (session.SelectedTag4 != null && !string.IsNullOrEmpty(session.SelectedTag4.Value))                          Exiv2Helper.AddKeyword(fileName' session.SelectedTag4.Value);                  }                    if (session.ExternalData != null)                      session.ExternalData.FileName = fileName;                    // prevent crash og GUI when item count updated                  Dispatcher.Invoke(new Action(delegate                  {                      try                      {                          _selectedItem = session.GetNewFileItem(fileName);                          _selectedItem.BackupFileName = backupfile;                          _selectedItem.Series = session.Series;                          // _selectedItem.Transformed = tempitem.Transformed;                          _selectedItem.AddTemplates(eventArgs.CameraDevice' session);                          ServiceProvider.Database.Add(new DbFile(_selectedItem' eventArgs.CameraDevice.SerialNumber' eventArgs.CameraDevice.DisplayName' session.Name));                      }                      catch (Exception ex)                      {                        }                  }));                    // execute plugins which are executed after transfer                    ExecuteAutoexportPlugins(eventArgs.CameraDevice' _selectedItem' true);                    Dispatcher.Invoke(() =>                  {                      _selectedItem.RemoveThumbs();                      session.Add(_selectedItem);                      ServiceProvider.OnFileTransfered(_selectedItem);                  });                      if (ServiceProvider.Settings.MinimizeToTrayIcon && !IsVisible && !ServiceProvider.Settings.HideTrayNotifications)                  {                      MyNotifyIcon.HideBalloonTip();                      MyNotifyIcon.ShowBalloonTip("Photo transfered"' fileName' BalloonIcon.Info);                  }                    ServiceProvider.DeviceManager.LastCapturedImage[eventArgs.CameraDevice] = fileName;                    //select the new file only when the multiple camera support isn't used to prevent high CPU usage on raw files                  if (ServiceProvider.Settings.AutoPreview &&                      !ServiceProvider.WindowsManager.Get(typeof(MultipleCameraWnd)).IsVisible &&                      !ServiceProvider.Settings.UseExternalViewer)                  {                      if ((Path.GetExtension(fileName).ToLower() == ".jpg" && ServiceProvider.Settings.AutoPreviewJpgOnly) ||                          !ServiceProvider.Settings.AutoPreviewJpgOnly)                      {                          if ((DateTime.Now - _lastLoadTime).TotalSeconds < 4)                          {                              _selectiontimer.Stop();                              _selectiontimer.Start();                          }                          else                          {                              ServiceProvider.WindowsManager.ExecuteCommand(WindowsCmdConsts.Select_Image' _selectedItem);                          }                      }                  }                  _lastLoadTime = DateTime.Now;                  //ServiceProvider.Settings.Save(session);                  StaticHelper.Instance.SystemMessage = TranslationStrings.MsgPhotoTransferDone + " "+ strTransfer;                    if (ServiceProvider.Settings.UseExternalViewer &&                      File.Exists(ServiceProvider.Settings.ExternalViewerPath))                  {                      string arg = ServiceProvider.Settings.ExternalViewerArgs;                      arg = arg.Contains("%1") ? arg.Replace("%1"' fileName) : arg + " " + fileName;                      PhotoUtils.Run(ServiceProvider.Settings.ExternalViewerPath' arg' ProcessWindowStyle.Normal);                  }                  if (ServiceProvider.Settings.PlaySound)                  {                      PhotoUtils.PlayCaptureSound();                  }                  eventArgs.CameraDevice.ReleaseResurce(eventArgs.Handle);                                    //show fullscreen only when the multiple camera support isn't used                  if (ServiceProvider.Settings.Preview &&                      !ServiceProvider.WindowsManager.Get(typeof(MultipleCameraWnd)).IsVisible &&                      !ServiceProvider.Settings.UseExternalViewer)                        ServiceProvider.WindowsManager.ExecuteCommand(WindowsCmdConsts.FullScreenWnd_ShowTimed);                    Log.Debug("Photo transfer done.");              }              catch (Exception ex)              {                  eventArgs.CameraDevice.IsBusy = false;                  StaticHelper.Instance.SystemMessage = TranslationStrings.MsgPhotoTransferError + " " + ex.Message;                  Log.Error("Transfer error !"' ex);              }
Magic Number,CameraControl,MainWindow,C:\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,PhotoCaptured,The following statement contains a magic number: try              {                  Log.Debug("Photo transfer begin.");                  eventArgs.CameraDevice.IsBusy = true;                  var extension = Path.GetExtension(eventArgs.FileName);                    // the capture is for live view preview                   if (LiveViewManager.PreviewRequest.ContainsKey(eventArgs.CameraDevice) &&                      LiveViewManager.PreviewRequest[eventArgs.CameraDevice])                  {                      LiveViewManager.PreviewRequest[eventArgs.CameraDevice] = false;                      var file = Path.Combine(Path.GetTempPath()' Path.GetRandomFileName() + extension);                      eventArgs.CameraDevice.TransferFile(eventArgs.Handle' file);                      eventArgs.CameraDevice.IsBusy = false;                      eventArgs.CameraDevice.TransferProgress = 0;                      eventArgs.CameraDevice.ReleaseResurce(eventArgs.Handle);                      LiveViewManager.Preview[eventArgs.CameraDevice] = file;                      LiveViewManager.OnPreviewCaptured(eventArgs.CameraDevice' file);                      return;                  }                    CameraProperty property = eventArgs.CameraDevice.LoadProperties();                  PhotoSession session = (PhotoSession)eventArgs.CameraDevice.AttachedPhotoSession ??                                         ServiceProvider.Settings.DefaultSession;                  StaticHelper.Instance.SystemMessage = "";                      if (!eventArgs.CameraDevice.CaptureInSdRam || PhotoUtils.IsMovie(eventArgs.FileName))                  {                      if (property.NoDownload)                      {                          eventArgs.CameraDevice.IsBusy = false;                          eventArgs.CameraDevice.ReleaseResurce(eventArgs.Handle);                          return;                      }                      if (extension != null && (session.DownloadOnlyJpg && extension.ToLower() != ".jpg"))                      {                          eventArgs.CameraDevice.IsBusy = false;                          eventArgs.CameraDevice.ReleaseResurce(eventArgs.Handle);                          return;                      }                  }                    StaticHelper.Instance.SystemMessage = TranslationStrings.MsgPhotoTransferBegin;                    string tempFile = Path.GetTempFileName();                    if (File.Exists(tempFile))                      File.Delete(tempFile);                    Stopwatch stopWatch = new Stopwatch();                  // transfer file from camera to temporary folder                   // in this way if the session folder is used as hot folder will prevent write errors                  stopWatch.Start();                  if (!eventArgs.CameraDevice.CaptureInSdRam && session.DownloadThumbOnly)                      eventArgs.CameraDevice.TransferFileThumb(eventArgs.Handle' tempFile);                  else                      eventArgs.CameraDevice.TransferFile(eventArgs.Handle' tempFile);                  eventArgs.CameraDevice.TransferProgress = 0;                  eventArgs.CameraDevice.IsBusy = false;                  stopWatch.Stop();                  string strTransfer = "Transfer time : " + stopWatch.Elapsed.TotalSeconds.ToString("##.###") + " Speed :" +                                       Math.Round(                                           new System.IO.FileInfo(tempFile).Length / 1024.0 / 1024 /                                           stopWatch.Elapsed.TotalSeconds' 2)+" Mb/s";                  Log.Debug(strTransfer);                    string fileName = "";                  if (!session.UseOriginalFilename || eventArgs.CameraDevice.CaptureInSdRam)                  {                      fileName =                          session.GetNextFileName(eventArgs.FileName' eventArgs.CameraDevice' tempFile);                  }                  else                  {                      fileName = Path.Combine(session.Folder' eventArgs.FileName);                      if (File.Exists(fileName) && !session.AllowOverWrite)                          fileName =                              StaticHelper.GetUniqueFilename(                                  Path.GetDirectoryName(fileName) + "\\" + Path.GetFileNameWithoutExtension(fileName) +                                  "_"' 0'                                  Path.GetExtension(fileName));                  }                    if (session.AllowOverWrite && File.Exists(fileName))                  {                      PhotoUtils.WaitForFile(fileName);                      File.Delete(fileName);                  }                    // make lower case extension                   if (session.LowerCaseExtension && !string.IsNullOrEmpty(Path.GetExtension(fileName)))                  {                      fileName = Path.Combine(Path.GetDirectoryName(fileName)'                          Path.GetFileNameWithoutExtension(fileName) + Path.GetExtension(fileName).ToLower());                  }                      if (session.AskSavePath)                  {                      SaveFileDialog dialog = new SaveFileDialog();                      dialog.Filter = "All files|*.*";                      dialog.Title = "Save captured photo";                      dialog.FileName = fileName;                      dialog.InitialDirectory = Path.GetDirectoryName(fileName);                      if (dialog.ShowDialog() == true)                      {                          fileName = dialog.FileName;                      }                      else                      {                          eventArgs.CameraDevice.IsBusy = false;                          if (File.Exists(tempFile))                              File.Delete(tempFile);                          return;                      }                  }                    if (!Directory.Exists(Path.GetDirectoryName(fileName)))                  {                      Directory.CreateDirectory(Path.GetDirectoryName(fileName));                  }                      string backupfile = null;                  if (session.BackUp)                  {                      backupfile = session.CopyBackUp(tempFile' fileName);                      if (string.IsNullOrEmpty(backupfile))                          StaticHelper.Instance.SystemMessage = "Unable to save the backup";                  }                    // execute plugins which are executed before transfer                   if (ServiceProvider.Settings.DefaultSession.AutoExportPluginConfigs.Count((x) => !x.RunAfterTransfer) > 0)                  {                      FileItem tempitem = new FileItem(tempFile);                      tempitem.Name = Path.GetFileName(fileName);                      tempitem.BackupFileName = backupfile;                      tempitem.Series = session.Series;                      tempitem.AddTemplates(eventArgs.CameraDevice' session);                      ExecuteAutoexportPlugins(eventArgs.CameraDevice' tempitem' false);                  }                      if ((!eventArgs.CameraDevice.CaptureInSdRam || PhotoUtils.IsMovie(fileName)) && session.DeleteFileAfterTransfer)                      eventArgs.CameraDevice.DeleteObject(new DeviceObject() { Handle = eventArgs.Handle });                    File.Copy(tempFile' fileName);                    if (File.Exists(tempFile))                  {                      PhotoUtils.WaitForFile(tempFile);                      File.Delete(tempFile);                  }                    if (session.WriteComment)                  {                      if (!string.IsNullOrEmpty(session.Comment))                          Exiv2Helper.SaveComment(fileName' session.Comment);                      if (session.SelectedTag1 != null && !string.IsNullOrEmpty(session.SelectedTag1.Value))                          Exiv2Helper.AddKeyword(fileName' session.SelectedTag1.Value);                      if (session.SelectedTag2 != null && !string.IsNullOrEmpty(session.SelectedTag2.Value))                          Exiv2Helper.AddKeyword(fileName' session.SelectedTag2.Value);                      if (session.SelectedTag3 != null && !string.IsNullOrEmpty(session.SelectedTag3.Value))                          Exiv2Helper.AddKeyword(fileName' session.SelectedTag3.Value);                      if (session.SelectedTag4 != null && !string.IsNullOrEmpty(session.SelectedTag4.Value))                          Exiv2Helper.AddKeyword(fileName' session.SelectedTag4.Value);                  }                    if (session.ExternalData != null)                      session.ExternalData.FileName = fileName;                    // prevent crash og GUI when item count updated                  Dispatcher.Invoke(new Action(delegate                  {                      try                      {                          _selectedItem = session.GetNewFileItem(fileName);                          _selectedItem.BackupFileName = backupfile;                          _selectedItem.Series = session.Series;                          // _selectedItem.Transformed = tempitem.Transformed;                          _selectedItem.AddTemplates(eventArgs.CameraDevice' session);                          ServiceProvider.Database.Add(new DbFile(_selectedItem' eventArgs.CameraDevice.SerialNumber' eventArgs.CameraDevice.DisplayName' session.Name));                      }                      catch (Exception ex)                      {                        }                  }));                    // execute plugins which are executed after transfer                    ExecuteAutoexportPlugins(eventArgs.CameraDevice' _selectedItem' true);                    Dispatcher.Invoke(() =>                  {                      _selectedItem.RemoveThumbs();                      session.Add(_selectedItem);                      ServiceProvider.OnFileTransfered(_selectedItem);                  });                      if (ServiceProvider.Settings.MinimizeToTrayIcon && !IsVisible && !ServiceProvider.Settings.HideTrayNotifications)                  {                      MyNotifyIcon.HideBalloonTip();                      MyNotifyIcon.ShowBalloonTip("Photo transfered"' fileName' BalloonIcon.Info);                  }                    ServiceProvider.DeviceManager.LastCapturedImage[eventArgs.CameraDevice] = fileName;                    //select the new file only when the multiple camera support isn't used to prevent high CPU usage on raw files                  if (ServiceProvider.Settings.AutoPreview &&                      !ServiceProvider.WindowsManager.Get(typeof(MultipleCameraWnd)).IsVisible &&                      !ServiceProvider.Settings.UseExternalViewer)                  {                      if ((Path.GetExtension(fileName).ToLower() == ".jpg" && ServiceProvider.Settings.AutoPreviewJpgOnly) ||                          !ServiceProvider.Settings.AutoPreviewJpgOnly)                      {                          if ((DateTime.Now - _lastLoadTime).TotalSeconds < 4)                          {                              _selectiontimer.Stop();                              _selectiontimer.Start();                          }                          else                          {                              ServiceProvider.WindowsManager.ExecuteCommand(WindowsCmdConsts.Select_Image' _selectedItem);                          }                      }                  }                  _lastLoadTime = DateTime.Now;                  //ServiceProvider.Settings.Save(session);                  StaticHelper.Instance.SystemMessage = TranslationStrings.MsgPhotoTransferDone + " "+ strTransfer;                    if (ServiceProvider.Settings.UseExternalViewer &&                      File.Exists(ServiceProvider.Settings.ExternalViewerPath))                  {                      string arg = ServiceProvider.Settings.ExternalViewerArgs;                      arg = arg.Contains("%1") ? arg.Replace("%1"' fileName) : arg + " " + fileName;                      PhotoUtils.Run(ServiceProvider.Settings.ExternalViewerPath' arg' ProcessWindowStyle.Normal);                  }                  if (ServiceProvider.Settings.PlaySound)                  {                      PhotoUtils.PlayCaptureSound();                  }                  eventArgs.CameraDevice.ReleaseResurce(eventArgs.Handle);                                    //show fullscreen only when the multiple camera support isn't used                  if (ServiceProvider.Settings.Preview &&                      !ServiceProvider.WindowsManager.Get(typeof(MultipleCameraWnd)).IsVisible &&                      !ServiceProvider.Settings.UseExternalViewer)                        ServiceProvider.WindowsManager.ExecuteCommand(WindowsCmdConsts.FullScreenWnd_ShowTimed);                    Log.Debug("Photo transfer done.");              }              catch (Exception ex)              {                  eventArgs.CameraDevice.IsBusy = false;                  StaticHelper.Instance.SystemMessage = TranslationStrings.MsgPhotoTransferError + " " + ex.Message;                  Log.Error("Transfer error !"' ex);              }
Magic Number,CameraControl,MainWindow,C:\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,PhotoCaptured,The following statement contains a magic number: try              {                  Log.Debug("Photo transfer begin.");                  eventArgs.CameraDevice.IsBusy = true;                  var extension = Path.GetExtension(eventArgs.FileName);                    // the capture is for live view preview                   if (LiveViewManager.PreviewRequest.ContainsKey(eventArgs.CameraDevice) &&                      LiveViewManager.PreviewRequest[eventArgs.CameraDevice])                  {                      LiveViewManager.PreviewRequest[eventArgs.CameraDevice] = false;                      var file = Path.Combine(Path.GetTempPath()' Path.GetRandomFileName() + extension);                      eventArgs.CameraDevice.TransferFile(eventArgs.Handle' file);                      eventArgs.CameraDevice.IsBusy = false;                      eventArgs.CameraDevice.TransferProgress = 0;                      eventArgs.CameraDevice.ReleaseResurce(eventArgs.Handle);                      LiveViewManager.Preview[eventArgs.CameraDevice] = file;                      LiveViewManager.OnPreviewCaptured(eventArgs.CameraDevice' file);                      return;                  }                    CameraProperty property = eventArgs.CameraDevice.LoadProperties();                  PhotoSession session = (PhotoSession)eventArgs.CameraDevice.AttachedPhotoSession ??                                         ServiceProvider.Settings.DefaultSession;                  StaticHelper.Instance.SystemMessage = "";                      if (!eventArgs.CameraDevice.CaptureInSdRam || PhotoUtils.IsMovie(eventArgs.FileName))                  {                      if (property.NoDownload)                      {                          eventArgs.CameraDevice.IsBusy = false;                          eventArgs.CameraDevice.ReleaseResurce(eventArgs.Handle);                          return;                      }                      if (extension != null && (session.DownloadOnlyJpg && extension.ToLower() != ".jpg"))                      {                          eventArgs.CameraDevice.IsBusy = false;                          eventArgs.CameraDevice.ReleaseResurce(eventArgs.Handle);                          return;                      }                  }                    StaticHelper.Instance.SystemMessage = TranslationStrings.MsgPhotoTransferBegin;                    string tempFile = Path.GetTempFileName();                    if (File.Exists(tempFile))                      File.Delete(tempFile);                    Stopwatch stopWatch = new Stopwatch();                  // transfer file from camera to temporary folder                   // in this way if the session folder is used as hot folder will prevent write errors                  stopWatch.Start();                  if (!eventArgs.CameraDevice.CaptureInSdRam && session.DownloadThumbOnly)                      eventArgs.CameraDevice.TransferFileThumb(eventArgs.Handle' tempFile);                  else                      eventArgs.CameraDevice.TransferFile(eventArgs.Handle' tempFile);                  eventArgs.CameraDevice.TransferProgress = 0;                  eventArgs.CameraDevice.IsBusy = false;                  stopWatch.Stop();                  string strTransfer = "Transfer time : " + stopWatch.Elapsed.TotalSeconds.ToString("##.###") + " Speed :" +                                       Math.Round(                                           new System.IO.FileInfo(tempFile).Length / 1024.0 / 1024 /                                           stopWatch.Elapsed.TotalSeconds' 2)+" Mb/s";                  Log.Debug(strTransfer);                    string fileName = "";                  if (!session.UseOriginalFilename || eventArgs.CameraDevice.CaptureInSdRam)                  {                      fileName =                          session.GetNextFileName(eventArgs.FileName' eventArgs.CameraDevice' tempFile);                  }                  else                  {                      fileName = Path.Combine(session.Folder' eventArgs.FileName);                      if (File.Exists(fileName) && !session.AllowOverWrite)                          fileName =                              StaticHelper.GetUniqueFilename(                                  Path.GetDirectoryName(fileName) + "\\" + Path.GetFileNameWithoutExtension(fileName) +                                  "_"' 0'                                  Path.GetExtension(fileName));                  }                    if (session.AllowOverWrite && File.Exists(fileName))                  {                      PhotoUtils.WaitForFile(fileName);                      File.Delete(fileName);                  }                    // make lower case extension                   if (session.LowerCaseExtension && !string.IsNullOrEmpty(Path.GetExtension(fileName)))                  {                      fileName = Path.Combine(Path.GetDirectoryName(fileName)'                          Path.GetFileNameWithoutExtension(fileName) + Path.GetExtension(fileName).ToLower());                  }                      if (session.AskSavePath)                  {                      SaveFileDialog dialog = new SaveFileDialog();                      dialog.Filter = "All files|*.*";                      dialog.Title = "Save captured photo";                      dialog.FileName = fileName;                      dialog.InitialDirectory = Path.GetDirectoryName(fileName);                      if (dialog.ShowDialog() == true)                      {                          fileName = dialog.FileName;                      }                      else                      {                          eventArgs.CameraDevice.IsBusy = false;                          if (File.Exists(tempFile))                              File.Delete(tempFile);                          return;                      }                  }                    if (!Directory.Exists(Path.GetDirectoryName(fileName)))                  {                      Directory.CreateDirectory(Path.GetDirectoryName(fileName));                  }                      string backupfile = null;                  if (session.BackUp)                  {                      backupfile = session.CopyBackUp(tempFile' fileName);                      if (string.IsNullOrEmpty(backupfile))                          StaticHelper.Instance.SystemMessage = "Unable to save the backup";                  }                    // execute plugins which are executed before transfer                   if (ServiceProvider.Settings.DefaultSession.AutoExportPluginConfigs.Count((x) => !x.RunAfterTransfer) > 0)                  {                      FileItem tempitem = new FileItem(tempFile);                      tempitem.Name = Path.GetFileName(fileName);                      tempitem.BackupFileName = backupfile;                      tempitem.Series = session.Series;                      tempitem.AddTemplates(eventArgs.CameraDevice' session);                      ExecuteAutoexportPlugins(eventArgs.CameraDevice' tempitem' false);                  }                      if ((!eventArgs.CameraDevice.CaptureInSdRam || PhotoUtils.IsMovie(fileName)) && session.DeleteFileAfterTransfer)                      eventArgs.CameraDevice.DeleteObject(new DeviceObject() { Handle = eventArgs.Handle });                    File.Copy(tempFile' fileName);                    if (File.Exists(tempFile))                  {                      PhotoUtils.WaitForFile(tempFile);                      File.Delete(tempFile);                  }                    if (session.WriteComment)                  {                      if (!string.IsNullOrEmpty(session.Comment))                          Exiv2Helper.SaveComment(fileName' session.Comment);                      if (session.SelectedTag1 != null && !string.IsNullOrEmpty(session.SelectedTag1.Value))                          Exiv2Helper.AddKeyword(fileName' session.SelectedTag1.Value);                      if (session.SelectedTag2 != null && !string.IsNullOrEmpty(session.SelectedTag2.Value))                          Exiv2Helper.AddKeyword(fileName' session.SelectedTag2.Value);                      if (session.SelectedTag3 != null && !string.IsNullOrEmpty(session.SelectedTag3.Value))                          Exiv2Helper.AddKeyword(fileName' session.SelectedTag3.Value);                      if (session.SelectedTag4 != null && !string.IsNullOrEmpty(session.SelectedTag4.Value))                          Exiv2Helper.AddKeyword(fileName' session.SelectedTag4.Value);                  }                    if (session.ExternalData != null)                      session.ExternalData.FileName = fileName;                    // prevent crash og GUI when item count updated                  Dispatcher.Invoke(new Action(delegate                  {                      try                      {                          _selectedItem = session.GetNewFileItem(fileName);                          _selectedItem.BackupFileName = backupfile;                          _selectedItem.Series = session.Series;                          // _selectedItem.Transformed = tempitem.Transformed;                          _selectedItem.AddTemplates(eventArgs.CameraDevice' session);                          ServiceProvider.Database.Add(new DbFile(_selectedItem' eventArgs.CameraDevice.SerialNumber' eventArgs.CameraDevice.DisplayName' session.Name));                      }                      catch (Exception ex)                      {                        }                  }));                    // execute plugins which are executed after transfer                    ExecuteAutoexportPlugins(eventArgs.CameraDevice' _selectedItem' true);                    Dispatcher.Invoke(() =>                  {                      _selectedItem.RemoveThumbs();                      session.Add(_selectedItem);                      ServiceProvider.OnFileTransfered(_selectedItem);                  });                      if (ServiceProvider.Settings.MinimizeToTrayIcon && !IsVisible && !ServiceProvider.Settings.HideTrayNotifications)                  {                      MyNotifyIcon.HideBalloonTip();                      MyNotifyIcon.ShowBalloonTip("Photo transfered"' fileName' BalloonIcon.Info);                  }                    ServiceProvider.DeviceManager.LastCapturedImage[eventArgs.CameraDevice] = fileName;                    //select the new file only when the multiple camera support isn't used to prevent high CPU usage on raw files                  if (ServiceProvider.Settings.AutoPreview &&                      !ServiceProvider.WindowsManager.Get(typeof(MultipleCameraWnd)).IsVisible &&                      !ServiceProvider.Settings.UseExternalViewer)                  {                      if ((Path.GetExtension(fileName).ToLower() == ".jpg" && ServiceProvider.Settings.AutoPreviewJpgOnly) ||                          !ServiceProvider.Settings.AutoPreviewJpgOnly)                      {                          if ((DateTime.Now - _lastLoadTime).TotalSeconds < 4)                          {                              _selectiontimer.Stop();                              _selectiontimer.Start();                          }                          else                          {                              ServiceProvider.WindowsManager.ExecuteCommand(WindowsCmdConsts.Select_Image' _selectedItem);                          }                      }                  }                  _lastLoadTime = DateTime.Now;                  //ServiceProvider.Settings.Save(session);                  StaticHelper.Instance.SystemMessage = TranslationStrings.MsgPhotoTransferDone + " "+ strTransfer;                    if (ServiceProvider.Settings.UseExternalViewer &&                      File.Exists(ServiceProvider.Settings.ExternalViewerPath))                  {                      string arg = ServiceProvider.Settings.ExternalViewerArgs;                      arg = arg.Contains("%1") ? arg.Replace("%1"' fileName) : arg + " " + fileName;                      PhotoUtils.Run(ServiceProvider.Settings.ExternalViewerPath' arg' ProcessWindowStyle.Normal);                  }                  if (ServiceProvider.Settings.PlaySound)                  {                      PhotoUtils.PlayCaptureSound();                  }                  eventArgs.CameraDevice.ReleaseResurce(eventArgs.Handle);                                    //show fullscreen only when the multiple camera support isn't used                  if (ServiceProvider.Settings.Preview &&                      !ServiceProvider.WindowsManager.Get(typeof(MultipleCameraWnd)).IsVisible &&                      !ServiceProvider.Settings.UseExternalViewer)                        ServiceProvider.WindowsManager.ExecuteCommand(WindowsCmdConsts.FullScreenWnd_ShowTimed);                    Log.Debug("Photo transfer done.");              }              catch (Exception ex)              {                  eventArgs.CameraDevice.IsBusy = false;                  StaticHelper.Instance.SystemMessage = TranslationStrings.MsgPhotoTransferError + " " + ex.Message;                  Log.Error("Transfer error !"' ex);              }
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,AstroLiveViewViewModel,The following statement contains a magic number: StarWindowSize = 30;
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,AstroLiveViewViewModel,The following statement contains a magic number: StarSize = 123.11;
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,CalculateStarSize,The following statement contains a magic number: int Min = 800;
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,CalculateStarSize,The following statement contains a magic number: Threshold = (Max + Min)/2;
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,GetLiveImage,The following statement contains a magic number: lock (_locker)              {                  try                  {                      LiveViewData = LiveViewManager.GetLiveViewImage(CameraDevice);                  }                  catch (Exception)                  {                      return;                  }                    if (LiveViewData == null || LiveViewData.ImageData == null)                      return;                  MemoryStream stream = new MemoryStream(LiveViewData.ImageData'                      LiveViewData.ImageDataPosition'                      LiveViewData.ImageData.Length -                      LiveViewData.ImageDataPosition);                  using (var bmp = new Bitmap(stream))                  {                      Bitmap res = bmp;                      var preview = BitmapFactory.ConvertToPbgra32Format(BitmapSourceConvert.ToBitmapSource(res));                      var zoow = preview.Crop((int) (CentralPoint.X - (StarWindowSize/2))'                          (int) (CentralPoint.Y - (StarWindowSize/2))'                          StarWindowSize' StarWindowSize);                      CalculateStarSize(zoow);                      zoow.Freeze();                      StarWindow = zoow;                      if (CameraDevice.LiveViewImageZoomRatio.Value == "All")                      {                          preview.Freeze();                          Preview = preview;                      }                          if (Brightness != 0)                      {                          BrightnessCorrection filter = new BrightnessCorrection(Brightness);                          res = filter.Apply(res);                      }                      if (EdgeDetection)                      {                          var filter = new FiltersSequence(                              Grayscale.CommonAlgorithms.BT709'                              new HomogenityEdgeDetector()                              );                          res = filter.Apply(res);                      }                        var _bitmap = BitmapFactory.ConvertToPbgra32Format(BitmapSourceConvert.ToBitmapSource(res));                      AverageImage(_bitmap);                      DrawGrid(_bitmap);                        if (ZoomFactor > 1)                      {                          double d = _bitmap.PixelWidth/(double) ZoomFactor;                          double h = _bitmap.PixelHeight/(double) ZoomFactor;                          _bitmap = _bitmap.Crop((int) (CentralPoint.X - (d/2))' (int) (CentralPoint.Y - (h/2))'                              (int) d' (int) h);                      }                        _bitmap.Freeze();                      Bitmap = _bitmap;                  }                }
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,GetLiveImage,The following statement contains a magic number: lock (_locker)              {                  try                  {                      LiveViewData = LiveViewManager.GetLiveViewImage(CameraDevice);                  }                  catch (Exception)                  {                      return;                  }                    if (LiveViewData == null || LiveViewData.ImageData == null)                      return;                  MemoryStream stream = new MemoryStream(LiveViewData.ImageData'                      LiveViewData.ImageDataPosition'                      LiveViewData.ImageData.Length -                      LiveViewData.ImageDataPosition);                  using (var bmp = new Bitmap(stream))                  {                      Bitmap res = bmp;                      var preview = BitmapFactory.ConvertToPbgra32Format(BitmapSourceConvert.ToBitmapSource(res));                      var zoow = preview.Crop((int) (CentralPoint.X - (StarWindowSize/2))'                          (int) (CentralPoint.Y - (StarWindowSize/2))'                          StarWindowSize' StarWindowSize);                      CalculateStarSize(zoow);                      zoow.Freeze();                      StarWindow = zoow;                      if (CameraDevice.LiveViewImageZoomRatio.Value == "All")                      {                          preview.Freeze();                          Preview = preview;                      }                          if (Brightness != 0)                      {                          BrightnessCorrection filter = new BrightnessCorrection(Brightness);                          res = filter.Apply(res);                      }                      if (EdgeDetection)                      {                          var filter = new FiltersSequence(                              Grayscale.CommonAlgorithms.BT709'                              new HomogenityEdgeDetector()                              );                          res = filter.Apply(res);                      }                        var _bitmap = BitmapFactory.ConvertToPbgra32Format(BitmapSourceConvert.ToBitmapSource(res));                      AverageImage(_bitmap);                      DrawGrid(_bitmap);                        if (ZoomFactor > 1)                      {                          double d = _bitmap.PixelWidth/(double) ZoomFactor;                          double h = _bitmap.PixelHeight/(double) ZoomFactor;                          _bitmap = _bitmap.Crop((int) (CentralPoint.X - (d/2))' (int) (CentralPoint.Y - (h/2))'                              (int) d' (int) h);                      }                        _bitmap.Freeze();                      Bitmap = _bitmap;                  }                }
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,GetLiveImage,The following statement contains a magic number: lock (_locker)              {                  try                  {                      LiveViewData = LiveViewManager.GetLiveViewImage(CameraDevice);                  }                  catch (Exception)                  {                      return;                  }                    if (LiveViewData == null || LiveViewData.ImageData == null)                      return;                  MemoryStream stream = new MemoryStream(LiveViewData.ImageData'                      LiveViewData.ImageDataPosition'                      LiveViewData.ImageData.Length -                      LiveViewData.ImageDataPosition);                  using (var bmp = new Bitmap(stream))                  {                      Bitmap res = bmp;                      var preview = BitmapFactory.ConvertToPbgra32Format(BitmapSourceConvert.ToBitmapSource(res));                      var zoow = preview.Crop((int) (CentralPoint.X - (StarWindowSize/2))'                          (int) (CentralPoint.Y - (StarWindowSize/2))'                          StarWindowSize' StarWindowSize);                      CalculateStarSize(zoow);                      zoow.Freeze();                      StarWindow = zoow;                      if (CameraDevice.LiveViewImageZoomRatio.Value == "All")                      {                          preview.Freeze();                          Preview = preview;                      }                          if (Brightness != 0)                      {                          BrightnessCorrection filter = new BrightnessCorrection(Brightness);                          res = filter.Apply(res);                      }                      if (EdgeDetection)                      {                          var filter = new FiltersSequence(                              Grayscale.CommonAlgorithms.BT709'                              new HomogenityEdgeDetector()                              );                          res = filter.Apply(res);                      }                        var _bitmap = BitmapFactory.ConvertToPbgra32Format(BitmapSourceConvert.ToBitmapSource(res));                      AverageImage(_bitmap);                      DrawGrid(_bitmap);                        if (ZoomFactor > 1)                      {                          double d = _bitmap.PixelWidth/(double) ZoomFactor;                          double h = _bitmap.PixelHeight/(double) ZoomFactor;                          _bitmap = _bitmap.Crop((int) (CentralPoint.X - (d/2))' (int) (CentralPoint.Y - (h/2))'                              (int) d' (int) h);                      }                        _bitmap.Freeze();                      Bitmap = _bitmap;                  }                }
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,GetLiveImage,The following statement contains a magic number: lock (_locker)              {                  try                  {                      LiveViewData = LiveViewManager.GetLiveViewImage(CameraDevice);                  }                  catch (Exception)                  {                      return;                  }                    if (LiveViewData == null || LiveViewData.ImageData == null)                      return;                  MemoryStream stream = new MemoryStream(LiveViewData.ImageData'                      LiveViewData.ImageDataPosition'                      LiveViewData.ImageData.Length -                      LiveViewData.ImageDataPosition);                  using (var bmp = new Bitmap(stream))                  {                      Bitmap res = bmp;                      var preview = BitmapFactory.ConvertToPbgra32Format(BitmapSourceConvert.ToBitmapSource(res));                      var zoow = preview.Crop((int) (CentralPoint.X - (StarWindowSize/2))'                          (int) (CentralPoint.Y - (StarWindowSize/2))'                          StarWindowSize' StarWindowSize);                      CalculateStarSize(zoow);                      zoow.Freeze();                      StarWindow = zoow;                      if (CameraDevice.LiveViewImageZoomRatio.Value == "All")                      {                          preview.Freeze();                          Preview = preview;                      }                          if (Brightness != 0)                      {                          BrightnessCorrection filter = new BrightnessCorrection(Brightness);                          res = filter.Apply(res);                      }                      if (EdgeDetection)                      {                          var filter = new FiltersSequence(                              Grayscale.CommonAlgorithms.BT709'                              new HomogenityEdgeDetector()                              );                          res = filter.Apply(res);                      }                        var _bitmap = BitmapFactory.ConvertToPbgra32Format(BitmapSourceConvert.ToBitmapSource(res));                      AverageImage(_bitmap);                      DrawGrid(_bitmap);                        if (ZoomFactor > 1)                      {                          double d = _bitmap.PixelWidth/(double) ZoomFactor;                          double h = _bitmap.PixelHeight/(double) ZoomFactor;                          _bitmap = _bitmap.Crop((int) (CentralPoint.X - (d/2))' (int) (CentralPoint.Y - (h/2))'                              (int) d' (int) h);                      }                        _bitmap.Freeze();                      Bitmap = _bitmap;                  }                }
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,ColorstoInt,The following statement contains a magic number: return (int)((A << 24) | (R << 16) | (G << 8) | (B << 0));
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,ColorstoInt,The following statement contains a magic number: return (int)((A << 24) | (R << 16) | (G << 8) | (B << 0));
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,ColorstoInt,The following statement contains a magic number: return (int)((A << 24) | (R << 16) | (G << 8) | (B << 0));
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,IntToColor,The following statement contains a magic number: byte a = (byte)(num1 >> 24);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,IntToColor,The following statement contains a magic number: int num3 = 65280 / num2;
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,IntToColor,The following statement contains a magic number: byte R = (byte)((num1 >> 16 & byte.MaxValue) * num3 >> 8);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,IntToColor,The following statement contains a magic number: byte R = (byte)((num1 >> 16 & byte.MaxValue) * num3 >> 8);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,IntToColor,The following statement contains a magic number: byte G = (byte)((num1 >> 8 & byte.MaxValue) * num3 >> 8);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,IntToColor,The following statement contains a magic number: byte G = (byte)((num1 >> 8 & byte.MaxValue) * num3 >> 8);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,IntToColor,The following statement contains a magic number: byte B = (byte)((num1 & byte.MaxValue) * num3 >> 8);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: if (CentralPoint.X == 0 && CentralPoint.Y == 0)              {                  CentralPoint = new Point(bitmap.PixelWidth / 2' bitmap.PixelHeight / 2);              }
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: if (CentralPoint.X == 0 && CentralPoint.Y == 0)              {                  CentralPoint = new Point(bitmap.PixelWidth / 2' bitmap.PixelHeight / 2);              }
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: tempbitmap.DrawLine(0' (int)CentralPoint.Y - (StarWindowSize / 2)' bitmap.PixelWidth' (int)CentralPoint.Y - (StarWindowSize / 2)' Colors.White);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: tempbitmap.DrawLine(0' (int)CentralPoint.Y - (StarWindowSize / 2)' bitmap.PixelWidth' (int)CentralPoint.Y - (StarWindowSize / 2)' Colors.White);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: tempbitmap.DrawLine(0' (int)CentralPoint.Y + (StarWindowSize / 2)' bitmap.PixelWidth' (int)CentralPoint.Y + (StarWindowSize / 2)' Colors.White);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: tempbitmap.DrawLine(0' (int)CentralPoint.Y + (StarWindowSize / 2)' bitmap.PixelWidth' (int)CentralPoint.Y + (StarWindowSize / 2)' Colors.White);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: tempbitmap.DrawLine((int)CentralPoint.X - (StarWindowSize / 2)' 0' (int)CentralPoint.X - (StarWindowSize / 2)' bitmap.PixelHeight' Colors.White);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: tempbitmap.DrawLine((int)CentralPoint.X - (StarWindowSize / 2)' 0' (int)CentralPoint.X - (StarWindowSize / 2)' bitmap.PixelHeight' Colors.White);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: tempbitmap.DrawLine((int)CentralPoint.X + (StarWindowSize / 2)' 0' (int)CentralPoint.X + (StarWindowSize / 2)' bitmap.PixelHeight' Colors.White);
Magic Number,CameraControl.ViewModel,AstroLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\AstroLiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: tempbitmap.DrawLine((int)CentralPoint.X + (StarWindowSize / 2)' 0' (int)CentralPoint.X + (StarWindowSize / 2)' bitmap.PixelHeight' Colors.White);
Magic Number,CameraControl.ViewModel,BarcodeViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: try              {                  string[] lines = File.ReadAllLines(file);                  Data = new ObservableCollection<ExternalData>();                  foreach (string line in lines)                  {                      ExternalData externalData=new ExternalData();                      var data = line.Split(''');                      if (data.Length > 0)                          externalData.Row1 = data[0];                      if (data.Length > 1)                          externalData.Row2 = data[1];                      if (data.Length > 2)                          externalData.Row3 = data[2];                      if (data.Length > 3)                          externalData.Row4 = data[3];                      if (data.Length > 4)                          externalData.Row5 = data[4];                      if (data.Length > 5)                          externalData.Row6 = data[5];                      if (data.Length > 6)                          externalData.Row7= data[6];                      if (data.Length > 7)                          externalData.Row8 = data[7];                      if (data.Length > 8)                          externalData.Row9 = data[8];                      if (data.Length > 9)                          externalData.FileName = data[9];                      Data.Add(externalData);                  }                }              catch (Exception ex)              {                  Log.Error("Error import file"' ex);              }
Magic Number,CameraControl.ViewModel,BarcodeViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: try              {                  string[] lines = File.ReadAllLines(file);                  Data = new ObservableCollection<ExternalData>();                  foreach (string line in lines)                  {                      ExternalData externalData=new ExternalData();                      var data = line.Split(''');                      if (data.Length > 0)                          externalData.Row1 = data[0];                      if (data.Length > 1)                          externalData.Row2 = data[1];                      if (data.Length > 2)                          externalData.Row3 = data[2];                      if (data.Length > 3)                          externalData.Row4 = data[3];                      if (data.Length > 4)                          externalData.Row5 = data[4];                      if (data.Length > 5)                          externalData.Row6 = data[5];                      if (data.Length > 6)                          externalData.Row7= data[6];                      if (data.Length > 7)                          externalData.Row8 = data[7];                      if (data.Length > 8)                          externalData.Row9 = data[8];                      if (data.Length > 9)                          externalData.FileName = data[9];                      Data.Add(externalData);                  }                }              catch (Exception ex)              {                  Log.Error("Error import file"' ex);              }
Magic Number,CameraControl.ViewModel,BarcodeViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: try              {                  string[] lines = File.ReadAllLines(file);                  Data = new ObservableCollection<ExternalData>();                  foreach (string line in lines)                  {                      ExternalData externalData=new ExternalData();                      var data = line.Split(''');                      if (data.Length > 0)                          externalData.Row1 = data[0];                      if (data.Length > 1)                          externalData.Row2 = data[1];                      if (data.Length > 2)                          externalData.Row3 = data[2];                      if (data.Length > 3)                          externalData.Row4 = data[3];                      if (data.Length > 4)                          externalData.Row5 = data[4];                      if (data.Length > 5)                          externalData.Row6 = data[5];                      if (data.Length > 6)                          externalData.Row7= data[6];                      if (data.Length > 7)                          externalData.Row8 = data[7];                      if (data.Length > 8)                          externalData.Row9 = data[8];                      if (data.Length > 9)                          externalData.FileName = data[9];                      Data.Add(externalData);                  }                }              catch (Exception ex)              {                  Log.Error("Error import file"' ex);              }
Magic Number,CameraControl.ViewModel,BarcodeViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: try              {                  string[] lines = File.ReadAllLines(file);                  Data = new ObservableCollection<ExternalData>();                  foreach (string line in lines)                  {                      ExternalData externalData=new ExternalData();                      var data = line.Split(''');                      if (data.Length > 0)                          externalData.Row1 = data[0];                      if (data.Length > 1)                          externalData.Row2 = data[1];                      if (data.Length > 2)                          externalData.Row3 = data[2];                      if (data.Length > 3)                          externalData.Row4 = data[3];                      if (data.Length > 4)                          externalData.Row5 = data[4];                      if (data.Length > 5)                          externalData.Row6 = data[5];                      if (data.Length > 6)                          externalData.Row7= data[6];                      if (data.Length > 7)                          externalData.Row8 = data[7];                      if (data.Length > 8)                          externalData.Row9 = data[8];                      if (data.Length > 9)                          externalData.FileName = data[9];                      Data.Add(externalData);                  }                }              catch (Exception ex)              {                  Log.Error("Error import file"' ex);              }
Magic Number,CameraControl.ViewModel,BarcodeViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: try              {                  string[] lines = File.ReadAllLines(file);                  Data = new ObservableCollection<ExternalData>();                  foreach (string line in lines)                  {                      ExternalData externalData=new ExternalData();                      var data = line.Split(''');                      if (data.Length > 0)                          externalData.Row1 = data[0];                      if (data.Length > 1)                          externalData.Row2 = data[1];                      if (data.Length > 2)                          externalData.Row3 = data[2];                      if (data.Length > 3)                          externalData.Row4 = data[3];                      if (data.Length > 4)                          externalData.Row5 = data[4];                      if (data.Length > 5)                          externalData.Row6 = data[5];                      if (data.Length > 6)                          externalData.Row7= data[6];                      if (data.Length > 7)                          externalData.Row8 = data[7];                      if (data.Length > 8)                          externalData.Row9 = data[8];                      if (data.Length > 9)                          externalData.FileName = data[9];                      Data.Add(externalData);                  }                }              catch (Exception ex)              {                  Log.Error("Error import file"' ex);              }
Magic Number,CameraControl.ViewModel,BarcodeViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: try              {                  string[] lines = File.ReadAllLines(file);                  Data = new ObservableCollection<ExternalData>();                  foreach (string line in lines)                  {                      ExternalData externalData=new ExternalData();                      var data = line.Split(''');                      if (data.Length > 0)                          externalData.Row1 = data[0];                      if (data.Length > 1)                          externalData.Row2 = data[1];                      if (data.Length > 2)                          externalData.Row3 = data[2];                      if (data.Length > 3)                          externalData.Row4 = data[3];                      if (data.Length > 4)                          externalData.Row5 = data[4];                      if (data.Length > 5)                          externalData.Row6 = data[5];                      if (data.Length > 6)                          externalData.Row7= data[6];                      if (data.Length > 7)                          externalData.Row8 = data[7];                      if (data.Length > 8)                          externalData.Row9 = data[8];                      if (data.Length > 9)                          externalData.FileName = data[9];                      Data.Add(externalData);                  }                }              catch (Exception ex)              {                  Log.Error("Error import file"' ex);              }
Magic Number,CameraControl.ViewModel,BarcodeViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: try              {                  string[] lines = File.ReadAllLines(file);                  Data = new ObservableCollection<ExternalData>();                  foreach (string line in lines)                  {                      ExternalData externalData=new ExternalData();                      var data = line.Split(''');                      if (data.Length > 0)                          externalData.Row1 = data[0];                      if (data.Length > 1)                          externalData.Row2 = data[1];                      if (data.Length > 2)                          externalData.Row3 = data[2];                      if (data.Length > 3)                          externalData.Row4 = data[3];                      if (data.Length > 4)                          externalData.Row5 = data[4];                      if (data.Length > 5)                          externalData.Row6 = data[5];                      if (data.Length > 6)                          externalData.Row7= data[6];                      if (data.Length > 7)                          externalData.Row8 = data[7];                      if (data.Length > 8)                          externalData.Row9 = data[8];                      if (data.Length > 9)                          externalData.FileName = data[9];                      Data.Add(externalData);                  }                }              catch (Exception ex)              {                  Log.Error("Error import file"' ex);              }
Magic Number,CameraControl.ViewModel,BarcodeViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: try              {                  string[] lines = File.ReadAllLines(file);                  Data = new ObservableCollection<ExternalData>();                  foreach (string line in lines)                  {                      ExternalData externalData=new ExternalData();                      var data = line.Split(''');                      if (data.Length > 0)                          externalData.Row1 = data[0];                      if (data.Length > 1)                          externalData.Row2 = data[1];                      if (data.Length > 2)                          externalData.Row3 = data[2];                      if (data.Length > 3)                          externalData.Row4 = data[3];                      if (data.Length > 4)                          externalData.Row5 = data[4];                      if (data.Length > 5)                          externalData.Row6 = data[5];                      if (data.Length > 6)                          externalData.Row7= data[6];                      if (data.Length > 7)                          externalData.Row8 = data[7];                      if (data.Length > 8)                          externalData.Row9 = data[8];                      if (data.Length > 9)                          externalData.FileName = data[9];                      Data.Add(externalData);                  }                }              catch (Exception ex)              {                  Log.Error("Error import file"' ex);              }
Magic Number,CameraControl.ViewModel,BarcodeViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: try              {                  string[] lines = File.ReadAllLines(file);                  Data = new ObservableCollection<ExternalData>();                  foreach (string line in lines)                  {                      ExternalData externalData=new ExternalData();                      var data = line.Split(''');                      if (data.Length > 0)                          externalData.Row1 = data[0];                      if (data.Length > 1)                          externalData.Row2 = data[1];                      if (data.Length > 2)                          externalData.Row3 = data[2];                      if (data.Length > 3)                          externalData.Row4 = data[3];                      if (data.Length > 4)                          externalData.Row5 = data[4];                      if (data.Length > 5)                          externalData.Row6 = data[5];                      if (data.Length > 6)                          externalData.Row7= data[6];                      if (data.Length > 7)                          externalData.Row8 = data[7];                      if (data.Length > 8)                          externalData.Row9 = data[8];                      if (data.Length > 9)                          externalData.FileName = data[9];                      Data.Add(externalData);                  }                }              catch (Exception ex)              {                  Log.Error("Error import file"' ex);              }
Magic Number,CameraControl.ViewModel,BarcodeViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: try              {                  string[] lines = File.ReadAllLines(file);                  Data = new ObservableCollection<ExternalData>();                  foreach (string line in lines)                  {                      ExternalData externalData=new ExternalData();                      var data = line.Split(''');                      if (data.Length > 0)                          externalData.Row1 = data[0];                      if (data.Length > 1)                          externalData.Row2 = data[1];                      if (data.Length > 2)                          externalData.Row3 = data[2];                      if (data.Length > 3)                          externalData.Row4 = data[3];                      if (data.Length > 4)                          externalData.Row5 = data[4];                      if (data.Length > 5)                          externalData.Row6 = data[5];                      if (data.Length > 6)                          externalData.Row7= data[6];                      if (data.Length > 7)                          externalData.Row8 = data[7];                      if (data.Length > 8)                          externalData.Row9 = data[8];                      if (data.Length > 9)                          externalData.FileName = data[9];                      Data.Add(externalData);                  }                }              catch (Exception ex)              {                  Log.Error("Error import file"' ex);              }
Magic Number,CameraControl.ViewModel,BarcodeViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: try              {                  string[] lines = File.ReadAllLines(file);                  Data = new ObservableCollection<ExternalData>();                  foreach (string line in lines)                  {                      ExternalData externalData=new ExternalData();                      var data = line.Split(''');                      if (data.Length > 0)                          externalData.Row1 = data[0];                      if (data.Length > 1)                          externalData.Row2 = data[1];                      if (data.Length > 2)                          externalData.Row3 = data[2];                      if (data.Length > 3)                          externalData.Row4 = data[3];                      if (data.Length > 4)                          externalData.Row5 = data[4];                      if (data.Length > 5)                          externalData.Row6 = data[5];                      if (data.Length > 6)                          externalData.Row7= data[6];                      if (data.Length > 7)                          externalData.Row8 = data[7];                      if (data.Length > 8)                          externalData.Row9 = data[8];                      if (data.Length > 9)                          externalData.FileName = data[9];                      Data.Add(externalData);                  }                }              catch (Exception ex)              {                  Log.Error("Error import file"' ex);              }
Magic Number,CameraControl.ViewModel,BarcodeViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: try              {                  string[] lines = File.ReadAllLines(file);                  Data = new ObservableCollection<ExternalData>();                  foreach (string line in lines)                  {                      ExternalData externalData=new ExternalData();                      var data = line.Split(''');                      if (data.Length > 0)                          externalData.Row1 = data[0];                      if (data.Length > 1)                          externalData.Row2 = data[1];                      if (data.Length > 2)                          externalData.Row3 = data[2];                      if (data.Length > 3)                          externalData.Row4 = data[3];                      if (data.Length > 4)                          externalData.Row5 = data[4];                      if (data.Length > 5)                          externalData.Row6 = data[5];                      if (data.Length > 6)                          externalData.Row7= data[6];                      if (data.Length > 7)                          externalData.Row8 = data[7];                      if (data.Length > 8)                          externalData.Row9 = data[8];                      if (data.Length > 9)                          externalData.FileName = data[9];                      Data.Add(externalData);                  }                }              catch (Exception ex)              {                  Log.Error("Error import file"' ex);              }
Magic Number,CameraControl.ViewModel,BarcodeViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: try              {                  string[] lines = File.ReadAllLines(file);                  Data = new ObservableCollection<ExternalData>();                  foreach (string line in lines)                  {                      ExternalData externalData=new ExternalData();                      var data = line.Split(''');                      if (data.Length > 0)                          externalData.Row1 = data[0];                      if (data.Length > 1)                          externalData.Row2 = data[1];                      if (data.Length > 2)                          externalData.Row3 = data[2];                      if (data.Length > 3)                          externalData.Row4 = data[3];                      if (data.Length > 4)                          externalData.Row5 = data[4];                      if (data.Length > 5)                          externalData.Row6 = data[5];                      if (data.Length > 6)                          externalData.Row7= data[6];                      if (data.Length > 7)                          externalData.Row8 = data[7];                      if (data.Length > 8)                          externalData.Row9 = data[8];                      if (data.Length > 9)                          externalData.FileName = data[9];                      Data.Add(externalData);                  }                }              catch (Exception ex)              {                  Log.Error("Error import file"' ex);              }
Magic Number,CameraControl.ViewModel,BarcodeViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: try              {                  string[] lines = File.ReadAllLines(file);                  Data = new ObservableCollection<ExternalData>();                  foreach (string line in lines)                  {                      ExternalData externalData=new ExternalData();                      var data = line.Split(''');                      if (data.Length > 0)                          externalData.Row1 = data[0];                      if (data.Length > 1)                          externalData.Row2 = data[1];                      if (data.Length > 2)                          externalData.Row3 = data[2];                      if (data.Length > 3)                          externalData.Row4 = data[3];                      if (data.Length > 4)                          externalData.Row5 = data[4];                      if (data.Length > 5)                          externalData.Row6 = data[5];                      if (data.Length > 6)                          externalData.Row7= data[6];                      if (data.Length > 7)                          externalData.Row8 = data[7];                      if (data.Length > 8)                          externalData.Row9 = data[8];                      if (data.Length > 9)                          externalData.FileName = data[9];                      Data.Add(externalData);                  }                }              catch (Exception ex)              {                  Log.Error("Error import file"' ex);              }
Magic Number,CameraControl.ViewModel,BarcodeViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: try              {                  string[] lines = File.ReadAllLines(file);                  Data = new ObservableCollection<ExternalData>();                  foreach (string line in lines)                  {                      ExternalData externalData=new ExternalData();                      var data = line.Split(''');                      if (data.Length > 0)                          externalData.Row1 = data[0];                      if (data.Length > 1)                          externalData.Row2 = data[1];                      if (data.Length > 2)                          externalData.Row3 = data[2];                      if (data.Length > 3)                          externalData.Row4 = data[3];                      if (data.Length > 4)                          externalData.Row5 = data[4];                      if (data.Length > 5)                          externalData.Row6 = data[5];                      if (data.Length > 6)                          externalData.Row7= data[6];                      if (data.Length > 7)                          externalData.Row8 = data[7];                      if (data.Length > 8)                          externalData.Row9 = data[8];                      if (data.Length > 9)                          externalData.FileName = data[9];                      Data.Add(externalData);                  }                }              catch (Exception ex)              {                  Log.Error("Error import file"' ex);              }
Magic Number,CameraControl.ViewModel,BarcodeViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BarcodeViewModel.cs,ImportCsv,The following statement contains a magic number: try              {                  string[] lines = File.ReadAllLines(file);                  Data = new ObservableCollection<ExternalData>();                  foreach (string line in lines)                  {                      ExternalData externalData=new ExternalData();                      var data = line.Split(''');                      if (data.Length > 0)                          externalData.Row1 = data[0];                      if (data.Length > 1)                          externalData.Row2 = data[1];                      if (data.Length > 2)                          externalData.Row3 = data[2];                      if (data.Length > 3)                          externalData.Row4 = data[3];                      if (data.Length > 4)                          externalData.Row5 = data[4];                      if (data.Length > 5)                          externalData.Row6 = data[5];                      if (data.Length > 6)                          externalData.Row7= data[6];                      if (data.Length > 7)                          externalData.Row8 = data[7];                      if (data.Length > 8)                          externalData.Row9 = data[8];                      if (data.Length > 9)                          externalData.FileName = data[9];                      Data.Add(externalData);                  }                }              catch (Exception ex)              {                  Log.Error("Error import file"' ex);              }
Magic Number,CameraControl.ViewModel,BracketingViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BracketingViewModel.cs,_timer_Elapsed,The following statement contains a magic number: try              {                  _timer.Stop();                  Thread.Sleep(100);                  switch (Mode)                  {                      case 0:                          {                              Camera.ExposureCompensation.Value = Values[Counter];                              CurValue = Values[Counter];                          }                          break;                      case 1:                          {                              Camera.FNumber.Value = Values[Counter];                              CurValue = Values[Counter];                          }                          break;                      case 2:                          {                              Camera.IsoNumber.Value = Values[Counter];                              CurValue = Values[Counter];                          }                          break;                  }                  Thread.Sleep(200);                  CameraHelper.Capture(Camera);                  Counter++;                  if (Counter >= Values.Count)                  {                      Stop();                      return;                  }                  _timer.Start();              }              catch (Exception ex)              {                  StaticHelper.Instance.SystemMessage = ex.Message;                  Stop();              }
Magic Number,CameraControl.ViewModel,BracketingViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BracketingViewModel.cs,_timer_Elapsed,The following statement contains a magic number: try              {                  _timer.Stop();                  Thread.Sleep(100);                  switch (Mode)                  {                      case 0:                          {                              Camera.ExposureCompensation.Value = Values[Counter];                              CurValue = Values[Counter];                          }                          break;                      case 1:                          {                              Camera.FNumber.Value = Values[Counter];                              CurValue = Values[Counter];                          }                          break;                      case 2:                          {                              Camera.IsoNumber.Value = Values[Counter];                              CurValue = Values[Counter];                          }                          break;                  }                  Thread.Sleep(200);                  CameraHelper.Capture(Camera);                  Counter++;                  if (Counter >= Values.Count)                  {                      Stop();                      return;                  }                  _timer.Start();              }              catch (Exception ex)              {                  StaticHelper.Instance.SystemMessage = ex.Message;                  Stop();              }
Magic Number,CameraControl.ViewModel,BracketingViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BracketingViewModel.cs,_timer_Elapsed,The following statement contains a magic number: try              {                  _timer.Stop();                  Thread.Sleep(100);                  switch (Mode)                  {                      case 0:                          {                              Camera.ExposureCompensation.Value = Values[Counter];                              CurValue = Values[Counter];                          }                          break;                      case 1:                          {                              Camera.FNumber.Value = Values[Counter];                              CurValue = Values[Counter];                          }                          break;                      case 2:                          {                              Camera.IsoNumber.Value = Values[Counter];                              CurValue = Values[Counter];                          }                          break;                  }                  Thread.Sleep(200);                  CameraHelper.Capture(Camera);                  Counter++;                  if (Counter >= Values.Count)                  {                      Stop();                      return;                  }                  _timer.Start();              }              catch (Exception ex)              {                  StaticHelper.Instance.SystemMessage = ex.Message;                  Stop();              }
Magic Number,CameraControl.ViewModel,BracketingViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BracketingViewModel.cs,Start,The following statement contains a magic number: try              {                  Error = "";                  ServiceProvider.WindowsManager.ExecuteCommand(CmdConsts.NextSeries);                  switch (Mode)                  {                      case 0:                          DefValue = Camera.ExposureCompensation.Value;                          break;                      case 1:                          if (!Camera.FNumber.IsEnabled)                          {                              Error = TranslationStrings.LabelWrongFNumber;                              return;                          }                          DefValue = Camera.FNumber.Value;                          break;                      case 2:                          if (Camera.Mode.Value != "M")                          {                              Error = TranslationStrings.LabelBracketingMMode;                          }                          DefValue = Camera.IsoNumber.Value;                          break;                  }                  Counter = 0;                  IsBusy = true;                  _timer.Start();              }              catch (Exception ex)              {                  Error = ex.Message;                  Log.Error("Unable to start bracketing "' ex);              }
Magic Number,CameraControl.ViewModel,BracketingViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BracketingViewModel.cs,Stop,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,CameraControl.ViewModel,BracketingViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BracketingViewModel.cs,Stop,The following statement contains a magic number: switch (Mode)              {                  case 0:                      Camera.ExposureCompensation.Value = DefValue;                      break;                  case 1:                      Camera.FNumber.Value = DefValue;                      break;                  case 2:                      Camera.IsoNumber.Value = DefValue;                      break;              }
Magic Number,CameraControl.ViewModel,BracketingViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BracketingViewModel.cs,SetMessage,The following statement contains a magic number: switch (Mode)              {                  case 0:                      {                          var vals = GetValues(ExpLowList.ToList()' ExpLow' ExpHigh' ExpCaptureCount);                          if (vals == null || vals.Count == 0)                              return;                          Values = vals;                          foreach (var val in vals)                          {                              Message += (val + "' ");                          }                      }                      break;                  case 1:                      {                          var vals = GetValues(FLowList.ToList()' FLow' FHigh' FCaptureCount);                          if (vals == null || vals.Count == 0)                              return;                          Values = vals;                          foreach (var val in vals)                          {                              Message += (val + "' ");                          }                      }                      break;                  case 2:                      {                          var vals = GetValues(IsoLowList.ToList()' IsoLow' IsoHigh' IsoCaptureCount);                          if (vals == null || vals.Count == 0)                              return;                          Values = vals;                          foreach (var val in vals)                          {                              Message += (val + "' ");                          }                      }                      break;              }
Magic Number,CameraControl.ViewModel,BracketingViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BracketingViewModel.cs,GetValues,The following statement contains a magic number: if (il < 0 || ih < 0 || ih <= il || count < 2)              {                  Error = TranslationStrings.LabelWrongValue;                  return null;              }
Magic Number,CameraControl.ViewModel,BracketingViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BracketingViewModel.cs,GetValues,The following statement contains a magic number: count = Math.Max(count' 2);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManagerEvent,The following statement contains a magic number: if (cmd.StartsWith(CmdConsts.LiveView_ManualFocus))              {                  try                  {                      string step = cmd.Substring(CmdConsts.LiveView_ManualFocus.Length);                      SetFocus(Convert.ToInt32(step));                      while (_focusIProgress)                      {                          Thread.Sleep(5);                      }                  }                  catch (Exception)                  {                  }              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,LiveViewManager_PreviewCaptured,The following statement contains a magic number: try              {                  if (File.Exists(file))                  {                      PreviewBitmap = BitmapLoader.Instance.LoadImage(file' 2048' 0);                      LiveViewManager.OnPreviewLoaded(CameraDevice' file);                      File.Delete(file);                  }              }              catch (Exception ex)              {                  Log.Debug("Preview werror"' ex);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ToggleZoom,The following statement contains a magic number: try              {                  if (CameraDevice.LiveViewImageZoomRatio == null || CameraDevice.LiveViewImageZoomRatio.Values == null)                      return;                  // for canon cameras                   if (CameraDevice.LiveViewImageZoomRatio.Values.Count == 2)                  {                      CameraDevice.LiveViewImageZoomRatio.Value = CameraDevice.LiveViewImageZoomRatio.Value ==                                                                  CameraDevice.LiveViewImageZoomRatio.Values[0]                          ? CameraDevice.LiveViewImageZoomRatio.Values[1]                          : CameraDevice.LiveViewImageZoomRatio.Values[0];                  }                  else                  {                      CameraDevice.LiveViewImageZoomRatio.Value = CameraDevice.LiveViewImageZoomRatio.Value ==                                                                  CameraDevice.LiveViewImageZoomRatio.Values[0]                          ? CameraDevice.LiveViewImageZoomRatio.Values[                              CameraDevice.LiveViewImageZoomRatio.Values.Count - 2]                          : CameraDevice.LiveViewImageZoomRatio.Values[0];                  }              }              catch (Exception ex)              {                  Log.Error("Unable to set zoom"' ex);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ToggleZoom,The following statement contains a magic number: try              {                  if (CameraDevice.LiveViewImageZoomRatio == null || CameraDevice.LiveViewImageZoomRatio.Values == null)                      return;                  // for canon cameras                   if (CameraDevice.LiveViewImageZoomRatio.Values.Count == 2)                  {                      CameraDevice.LiveViewImageZoomRatio.Value = CameraDevice.LiveViewImageZoomRatio.Value ==                                                                  CameraDevice.LiveViewImageZoomRatio.Values[0]                          ? CameraDevice.LiveViewImageZoomRatio.Values[1]                          : CameraDevice.LiveViewImageZoomRatio.Values[0];                  }                  else                  {                      CameraDevice.LiveViewImageZoomRatio.Value = CameraDevice.LiveViewImageZoomRatio.Value ==                                                                  CameraDevice.LiveViewImageZoomRatio.Values[0]                          ? CameraDevice.LiveViewImageZoomRatio.Values[                              CameraDevice.LiveViewImageZoomRatio.Values.Count - 2]                          : CameraDevice.LiveViewImageZoomRatio.Values[0];                  }              }              catch (Exception ex)              {                  Log.Error("Unable to set zoom"' ex);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,InitOverlay,The following statement contains a magic number: OverlayTransparency = 100;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,Init,The following statement contains a magic number: WaitTime = 2;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,Init,The following statement contains a magic number: PhotoNo = 2;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,Init,The following statement contains a magic number: FocusStep = 2;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,Init,The following statement contains a magic number: PhotoCount = 5;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,Init,The following statement contains a magic number: _freezeTimer.Interval = ServiceProvider.Settings.LiveViewFreezeTimeOut*1000;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManager_Event1,The following statement contains a magic number: if (cmd.StartsWith("LiveWnd_Overlay"))              {                  try                  {                      if (cmd.Contains("_"))                      {                          var vals = cmd.Split('_');                          if (vals.Count() > 3)                          {                              var property = ServiceProvider.DeviceManager.SelectedCameraDevice.LoadProperties();                              int y = 1;                              if (int.TryParse(vals[2]' out y))                                  OverlayTransparency = y;                              SelectedOverlay = vals[3].ToLower() == "null" ? "" : vals[3];                              OverlayActivated = vals[3].ToLower() != "null";                          }                      }                  }                  catch (Exception ex)                  {                      Log.Error("Unable to load overlay"' ex);                  }              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManager_Event1,The following statement contains a magic number: if (cmd.StartsWith("LiveWnd_Overlay"))              {                  try                  {                      if (cmd.Contains("_"))                      {                          var vals = cmd.Split('_');                          if (vals.Count() > 3)                          {                              var property = ServiceProvider.DeviceManager.SelectedCameraDevice.LoadProperties();                              int y = 1;                              if (int.TryParse(vals[2]' out y))                                  OverlayTransparency = y;                              SelectedOverlay = vals[3].ToLower() == "null" ? "" : vals[3];                              OverlayActivated = vals[3].ToLower() != "null";                          }                      }                  }                  catch (Exception ex)                  {                      Log.Error("Unable to load overlay"' ex);                  }              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManager_Event1,The following statement contains a magic number: if (cmd.StartsWith("LiveWnd_Overlay"))              {                  try                  {                      if (cmd.Contains("_"))                      {                          var vals = cmd.Split('_');                          if (vals.Count() > 3)                          {                              var property = ServiceProvider.DeviceManager.SelectedCameraDevice.LoadProperties();                              int y = 1;                              if (int.TryParse(vals[2]' out y))                                  OverlayTransparency = y;                              SelectedOverlay = vals[3].ToLower() == "null" ? "" : vals[3];                              OverlayActivated = vals[3].ToLower() != "null";                          }                      }                  }                  catch (Exception ex)                  {                      Log.Error("Unable to load overlay"' ex);                  }              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManager_Event1,The following statement contains a magic number: if (cmd.StartsWith("LiveWnd_Overlay"))              {                  try                  {                      if (cmd.Contains("_"))                      {                          var vals = cmd.Split('_');                          if (vals.Count() > 3)                          {                              var property = ServiceProvider.DeviceManager.SelectedCameraDevice.LoadProperties();                              int y = 1;                              if (int.TryParse(vals[2]' out y))                                  OverlayTransparency = y;                              SelectedOverlay = vals[3].ToLower() == "null" ? "" : vals[3];                              OverlayActivated = vals[3].ToLower() != "null";                          }                      }                  }                  catch (Exception ex)                  {                      Log.Error("Unable to load overlay"' ex);                  }              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManager_Event1,The following statement contains a magic number: if (cmd.StartsWith("LiveWnd_Overlay"))              {                  try                  {                      if (cmd.Contains("_"))                      {                          var vals = cmd.Split('_');                          if (vals.Count() > 3)                          {                              var property = ServiceProvider.DeviceManager.SelectedCameraDevice.LoadProperties();                              int y = 1;                              if (int.TryParse(vals[2]' out y))                                  OverlayTransparency = y;                              SelectedOverlay = vals[3].ToLower() == "null" ? "" : vals[3];                              OverlayActivated = vals[3].ToLower() != "null";                          }                      }                  }                  catch (Exception ex)                  {                      Log.Error("Unable to load overlay"' ex);                  }              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManager_Event1,The following statement contains a magic number: if (cmd.StartsWith("Snapshot_"))              {                  var vals = cmd.Split('_');                  if (vals.Count() > 2)                  {                      switch (vals[1])                      {                          case "CaptureTime":                              SnapshotCaptureTime = GetValue(vals' SnapshotCaptureTime);                              break;                          case "NumOfPhotos":                              SnapshotCaptureCount = GetValue(vals' SnapshotCaptureCount);                              break;                      }                  }              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,GetValue,The following statement contains a magic number: if (int.TryParse(cmd[2]' out x))                  return x;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,_restartTimer_Elapsed,The following statement contains a magic number: if ((DateTime.Now - _restartTimerStartTime).TotalSeconds > 2)              {                  _restartTimer.Stop();                  StartLiveView();                  DelayedStart = false;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,UnInit,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ResetOverlay,The following statement contains a magic number: OverlayTransparency = 100;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManager_Event,The following statement contains a magic number: switch (cmd)              {                  case CmdConsts.LiveView_Capture:                      CaptureInThread();                      break;                  case CmdConsts.LiveView_CaptureSnapShot:                      CaptureSnapshot();                      break;                  case CmdConsts.LiveView_Focus_Move_Right:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX + ServiceProvider.Settings.FocusMoveStep' LiveViewData.FocusY);                      }                      break;                  case CmdConsts.LiveView_Focus_Move_Left:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX - ServiceProvider.Settings.FocusMoveStep' LiveViewData.FocusY);                      }                      break;                  case CmdConsts.LiveView_Focus_Move_Up:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX' LiveViewData.FocusY - ServiceProvider.Settings.FocusMoveStep);                      }                      break;                  case CmdConsts.LiveView_Focus_Move_Down:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX' LiveViewData.FocusY + ServiceProvider.Settings.FocusMoveStep);                      }                      break;                  case CmdConsts.LiveView_Zoom_All:                      CameraDevice.LiveViewImageZoomRatio.SetValue(0);                      break;                  case CmdConsts.LiveView_Zoom_25:                      CameraDevice.LiveViewImageZoomRatio.SetValue(1);                      break;                  case CmdConsts.LiveView_Zoom_33:                      CameraDevice.LiveViewImageZoomRatio.SetValue(2);                      break;                  case CmdConsts.LiveView_Zoom_50:                      CameraDevice.LiveViewImageZoomRatio.SetValue(3);                      break;                  case CmdConsts.LiveView_Zoom_66:                      CameraDevice.LiveViewImageZoomRatio.SetValue(4);                      break;                  case CmdConsts.LiveView_Zoom_100:                      CameraDevice.LiveViewImageZoomRatio.SetValue(5);                      break;                  case CmdConsts.LiveView_Focus_M:                      FocusMCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_P:                      FocusPCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_MM:                      FocusMMCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_PP:                      FocusPPCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_MMM:                      FocusMMMCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_PPP:                      FocusPPPCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus:                      AutoFocus();                      break;                  case CmdConsts.LiveView_Preview:                      PreviewCommand.Execute(null);                      break;                  case CmdConsts.LiveView_NoProcess:                      NoProcessing = true;                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManager_Event,The following statement contains a magic number: switch (cmd)              {                  case CmdConsts.LiveView_Capture:                      CaptureInThread();                      break;                  case CmdConsts.LiveView_CaptureSnapShot:                      CaptureSnapshot();                      break;                  case CmdConsts.LiveView_Focus_Move_Right:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX + ServiceProvider.Settings.FocusMoveStep' LiveViewData.FocusY);                      }                      break;                  case CmdConsts.LiveView_Focus_Move_Left:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX - ServiceProvider.Settings.FocusMoveStep' LiveViewData.FocusY);                      }                      break;                  case CmdConsts.LiveView_Focus_Move_Up:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX' LiveViewData.FocusY - ServiceProvider.Settings.FocusMoveStep);                      }                      break;                  case CmdConsts.LiveView_Focus_Move_Down:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX' LiveViewData.FocusY + ServiceProvider.Settings.FocusMoveStep);                      }                      break;                  case CmdConsts.LiveView_Zoom_All:                      CameraDevice.LiveViewImageZoomRatio.SetValue(0);                      break;                  case CmdConsts.LiveView_Zoom_25:                      CameraDevice.LiveViewImageZoomRatio.SetValue(1);                      break;                  case CmdConsts.LiveView_Zoom_33:                      CameraDevice.LiveViewImageZoomRatio.SetValue(2);                      break;                  case CmdConsts.LiveView_Zoom_50:                      CameraDevice.LiveViewImageZoomRatio.SetValue(3);                      break;                  case CmdConsts.LiveView_Zoom_66:                      CameraDevice.LiveViewImageZoomRatio.SetValue(4);                      break;                  case CmdConsts.LiveView_Zoom_100:                      CameraDevice.LiveViewImageZoomRatio.SetValue(5);                      break;                  case CmdConsts.LiveView_Focus_M:                      FocusMCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_P:                      FocusPCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_MM:                      FocusMMCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_PP:                      FocusPPCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_MMM:                      FocusMMMCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_PPP:                      FocusPPPCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus:                      AutoFocus();                      break;                  case CmdConsts.LiveView_Preview:                      PreviewCommand.Execute(null);                      break;                  case CmdConsts.LiveView_NoProcess:                      NoProcessing = true;                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManager_Event,The following statement contains a magic number: switch (cmd)              {                  case CmdConsts.LiveView_Capture:                      CaptureInThread();                      break;                  case CmdConsts.LiveView_CaptureSnapShot:                      CaptureSnapshot();                      break;                  case CmdConsts.LiveView_Focus_Move_Right:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX + ServiceProvider.Settings.FocusMoveStep' LiveViewData.FocusY);                      }                      break;                  case CmdConsts.LiveView_Focus_Move_Left:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX - ServiceProvider.Settings.FocusMoveStep' LiveViewData.FocusY);                      }                      break;                  case CmdConsts.LiveView_Focus_Move_Up:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX' LiveViewData.FocusY - ServiceProvider.Settings.FocusMoveStep);                      }                      break;                  case CmdConsts.LiveView_Focus_Move_Down:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX' LiveViewData.FocusY + ServiceProvider.Settings.FocusMoveStep);                      }                      break;                  case CmdConsts.LiveView_Zoom_All:                      CameraDevice.LiveViewImageZoomRatio.SetValue(0);                      break;                  case CmdConsts.LiveView_Zoom_25:                      CameraDevice.LiveViewImageZoomRatio.SetValue(1);                      break;                  case CmdConsts.LiveView_Zoom_33:                      CameraDevice.LiveViewImageZoomRatio.SetValue(2);                      break;                  case CmdConsts.LiveView_Zoom_50:                      CameraDevice.LiveViewImageZoomRatio.SetValue(3);                      break;                  case CmdConsts.LiveView_Zoom_66:                      CameraDevice.LiveViewImageZoomRatio.SetValue(4);                      break;                  case CmdConsts.LiveView_Zoom_100:                      CameraDevice.LiveViewImageZoomRatio.SetValue(5);                      break;                  case CmdConsts.LiveView_Focus_M:                      FocusMCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_P:                      FocusPCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_MM:                      FocusMMCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_PP:                      FocusPPCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_MMM:                      FocusMMMCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_PPP:                      FocusPPPCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus:                      AutoFocus();                      break;                  case CmdConsts.LiveView_Preview:                      PreviewCommand.Execute(null);                      break;                  case CmdConsts.LiveView_NoProcess:                      NoProcessing = true;                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManager_Event,The following statement contains a magic number: switch (cmd)              {                  case CmdConsts.LiveView_Capture:                      CaptureInThread();                      break;                  case CmdConsts.LiveView_CaptureSnapShot:                      CaptureSnapshot();                      break;                  case CmdConsts.LiveView_Focus_Move_Right:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX + ServiceProvider.Settings.FocusMoveStep' LiveViewData.FocusY);                      }                      break;                  case CmdConsts.LiveView_Focus_Move_Left:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX - ServiceProvider.Settings.FocusMoveStep' LiveViewData.FocusY);                      }                      break;                  case CmdConsts.LiveView_Focus_Move_Up:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX' LiveViewData.FocusY - ServiceProvider.Settings.FocusMoveStep);                      }                      break;                  case CmdConsts.LiveView_Focus_Move_Down:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX' LiveViewData.FocusY + ServiceProvider.Settings.FocusMoveStep);                      }                      break;                  case CmdConsts.LiveView_Zoom_All:                      CameraDevice.LiveViewImageZoomRatio.SetValue(0);                      break;                  case CmdConsts.LiveView_Zoom_25:                      CameraDevice.LiveViewImageZoomRatio.SetValue(1);                      break;                  case CmdConsts.LiveView_Zoom_33:                      CameraDevice.LiveViewImageZoomRatio.SetValue(2);                      break;                  case CmdConsts.LiveView_Zoom_50:                      CameraDevice.LiveViewImageZoomRatio.SetValue(3);                      break;                  case CmdConsts.LiveView_Zoom_66:                      CameraDevice.LiveViewImageZoomRatio.SetValue(4);                      break;                  case CmdConsts.LiveView_Zoom_100:                      CameraDevice.LiveViewImageZoomRatio.SetValue(5);                      break;                  case CmdConsts.LiveView_Focus_M:                      FocusMCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_P:                      FocusPCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_MM:                      FocusMMCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_PP:                      FocusPPCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_MMM:                      FocusMMMCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_PPP:                      FocusPPPCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus:                      AutoFocus();                      break;                  case CmdConsts.LiveView_Preview:                      PreviewCommand.Execute(null);                      break;                  case CmdConsts.LiveView_NoProcess:                      NoProcessing = true;                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,GetLiveImageData,The following statement contains a magic number: try              {                  if (LiveViewData != null && LiveViewData.ImageData != null)                  {                      MemoryStream stream = new MemoryStream(LiveViewData.ImageData'                          LiveViewData.                              ImageDataPosition'                          LiveViewData.ImageData.                              Length -                          LiveViewData.                              ImageDataPosition);                      LevelAngle = (int) LiveViewData.LevelAngleRolling;                      SoundL = LiveViewData.SoundL;                      SoundR = LiveViewData.SoundR;                      PeakSoundL = LiveViewData.PeakSoundL;                      PeakSoundR = LiveViewData.PeakSoundR;                      HaveSoundData = LiveViewData.HaveSoundData;                      MovieTimeRemain = decimal.Round(LiveViewData.MovieTimeRemain' 2);                        if (Recording && _recordLength > 0 && (DateTime.Now - _recordStartTime).TotalSeconds > _recordLength)                      {                          StopRecordMovie();                      }                        if (NoProcessing)                      {                          if (!IsMinized)                          {                              BitmapImage bi = new BitmapImage();                              bi.BeginInit();                              bi.CacheOption = BitmapCacheOption.OnLoad;                              bi.StreamSource = stream;                              bi.EndInit();                              bi.Freeze();                              Bitmap = bi;                          }                          ServiceProvider.DeviceManager.LiveViewImage[CameraDevice] = stream.ToArray();                          _operInProgress = false;                          return;                      }                        using (var res = new Bitmap(stream))                      {                          ProcessLiveView(res);                      }                      stream.Close();                  }              }              catch (Exception exception)              {                  Log.Error(exception);                  _operInProgress = false;              }              finally              {                  _operInProgress = false;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: if (HighlightUnderExp)              {                  ColorFiltering filtering = new ColorFiltering();                  filtering.Blue = new IntRange(0' 5);                  filtering.Red = new IntRange(0' 5);                  filtering.Green = new IntRange(0' 5);                  filtering.FillOutsideRange = false;                  filtering.FillColor = new RGB(Color.Blue);                  filtering.ApplyInPlace(bmp);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: if (HighlightUnderExp)              {                  ColorFiltering filtering = new ColorFiltering();                  filtering.Blue = new IntRange(0' 5);                  filtering.Red = new IntRange(0' 5);                  filtering.Green = new IntRange(0' 5);                  filtering.FillOutsideRange = false;                  filtering.FillColor = new RGB(Color.Blue);                  filtering.ApplyInPlace(bmp);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: if (HighlightUnderExp)              {                  ColorFiltering filtering = new ColorFiltering();                  filtering.Blue = new IntRange(0' 5);                  filtering.Red = new IntRange(0' 5);                  filtering.Green = new IntRange(0' 5);                  filtering.FillOutsideRange = false;                  filtering.FillColor = new RGB(Color.Blue);                  filtering.ApplyInPlace(bmp);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: if (HighlightOverExp)              {                  ColorFiltering filtering = new ColorFiltering();                  filtering.Blue = new IntRange(250' 255);                  filtering.Red = new IntRange(250' 255);                  filtering.Green = new IntRange(250' 255);                  filtering.FillOutsideRange = false;                  filtering.FillColor = new RGB(Color.Red);                  filtering.ApplyInPlace(bmp);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: if (HighlightOverExp)              {                  ColorFiltering filtering = new ColorFiltering();                  filtering.Blue = new IntRange(250' 255);                  filtering.Red = new IntRange(250' 255);                  filtering.Green = new IntRange(250' 255);                  filtering.FillOutsideRange = false;                  filtering.FillColor = new RGB(Color.Red);                  filtering.ApplyInPlace(bmp);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: if (HighlightOverExp)              {                  ColorFiltering filtering = new ColorFiltering();                  filtering.Blue = new IntRange(250' 255);                  filtering.Red = new IntRange(250' 255);                  filtering.Green = new IntRange(250' 255);                  filtering.FillOutsideRange = false;                  filtering.FillColor = new RGB(Color.Red);                  filtering.ApplyInPlace(bmp);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: if (HighlightOverExp)              {                  ColorFiltering filtering = new ColorFiltering();                  filtering.Blue = new IntRange(250' 255);                  filtering.Red = new IntRange(250' 255);                  filtering.Green = new IntRange(250' 255);                  filtering.FillOutsideRange = false;                  filtering.FillColor = new RGB(Color.Red);                  filtering.ApplyInPlace(bmp);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: if (HighlightOverExp)              {                  ColorFiltering filtering = new ColorFiltering();                  filtering.Blue = new IntRange(250' 255);                  filtering.Red = new IntRange(250' 255);                  filtering.Green = new IntRange(250' 255);                  filtering.FillOutsideRange = false;                  filtering.FillColor = new RGB(Color.Red);                  filtering.ApplyInPlace(bmp);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: if (HighlightOverExp)              {                  ColorFiltering filtering = new ColorFiltering();                  filtering.Blue = new IntRange(250' 255);                  filtering.Red = new IntRange(250' 255);                  filtering.Green = new IntRange(250' 255);                  filtering.FillOutsideRange = false;                  filtering.FillColor = new RGB(Color.Red);                  filtering.ApplyInPlace(bmp);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: if (BlackAndWhite)              {                  Grayscale filter = new Grayscale(0.299' 0.587' 0.114);                  writeableBitmap =                      BitmapFactory.ConvertToPbgra32Format(                          BitmapSourceConvert.ToBitmapSource(                              filter.Apply(newbmp)));              }              else              {                  writeableBitmap =                      BitmapFactory.ConvertToPbgra32Format(                          BitmapSourceConvert.ToBitmapSource(newbmp));              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: if (BlackAndWhite)              {                  Grayscale filter = new Grayscale(0.299' 0.587' 0.114);                  writeableBitmap =                      BitmapFactory.ConvertToPbgra32Format(                          BitmapSourceConvert.ToBitmapSource(                              filter.Apply(newbmp)));              }              else              {                  writeableBitmap =                      BitmapFactory.ConvertToPbgra32Format(                          BitmapSourceConvert.ToBitmapSource(newbmp));              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: if (BlackAndWhite)              {                  Grayscale filter = new Grayscale(0.299' 0.587' 0.114);                  writeableBitmap =                      BitmapFactory.ConvertToPbgra32Format(                          BitmapSourceConvert.ToBitmapSource(                              filter.Apply(newbmp)));              }              else              {                  writeableBitmap =                      BitmapFactory.ConvertToPbgra32Format(                          BitmapSourceConvert.ToBitmapSource(newbmp));              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: switch (RotationIndex)              {                  case 0:                      Rotation = 0;                      break;                  case 1:                      Rotation = 90;                      break;                  case 2:                      Rotation = 180;                      break;                  case 3:                      Rotation = 270;                      break;                  case 4:                      Rotation = LiveViewData.Rotation;                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: switch (RotationIndex)              {                  case 0:                      Rotation = 0;                      break;                  case 1:                      Rotation = 90;                      break;                  case 2:                      Rotation = 180;                      break;                  case 3:                      Rotation = 270;                      break;                  case 4:                      Rotation = LiveViewData.Rotation;                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: switch (RotationIndex)              {                  case 0:                      Rotation = 0;                      break;                  case 1:                      Rotation = 90;                      break;                  case 2:                      Rotation = 180;                      break;                  case 3:                      Rotation = 270;                      break;                  case 4:                      Rotation = LiveViewData.Rotation;                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: switch (RotationIndex)              {                  case 0:                      Rotation = 0;                      break;                  case 1:                      Rotation = 90;                      break;                  case 2:                      Rotation = 180;                      break;                  case 3:                      Rotation = 270;                      break;                  case 4:                      Rotation = LiveViewData.Rotation;                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: switch (RotationIndex)              {                  case 0:                      Rotation = 0;                      break;                  case 1:                      Rotation = 90;                      break;                  case 2:                      Rotation = 180;                      break;                  case 3:                      Rotation = 270;                      break;                  case 4:                      Rotation = LiveViewData.Rotation;                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: switch (RotationIndex)              {                  case 0:                      Rotation = 0;                      break;                  case 1:                      Rotation = 90;                      break;                  case 2:                      Rotation = 180;                      break;                  case 3:                      Rotation = 270;                      break;                  case 4:                      Rotation = LiveViewData.Rotation;                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: if (CropRatio > 0)              {                  CropOffsetX = (int) ((writeableBitmap.PixelWidth/2.0)*CropRatio/100);                  CropOffsetY = (int) ((writeableBitmap.PixelHeight/2.0)*CropRatio/100);                  writeableBitmap = writeableBitmap.Crop(CropOffsetX' CropOffsetY'                      writeableBitmap.PixelWidth - (2*CropOffsetX)'                      writeableBitmap.PixelHeight - (2*CropOffsetY));              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: if (CropRatio > 0)              {                  CropOffsetX = (int) ((writeableBitmap.PixelWidth/2.0)*CropRatio/100);                  CropOffsetY = (int) ((writeableBitmap.PixelHeight/2.0)*CropRatio/100);                  writeableBitmap = writeableBitmap.Crop(CropOffsetX' CropOffsetY'                      writeableBitmap.PixelWidth - (2*CropOffsetX)'                      writeableBitmap.PixelHeight - (2*CropOffsetY));              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: if (CropRatio > 0)              {                  CropOffsetX = (int) ((writeableBitmap.PixelWidth/2.0)*CropRatio/100);                  CropOffsetY = (int) ((writeableBitmap.PixelHeight/2.0)*CropRatio/100);                  writeableBitmap = writeableBitmap.Crop(CropOffsetX' CropOffsetY'                      writeableBitmap.PixelWidth - (2*CropOffsetX)'                      writeableBitmap.PixelHeight - (2*CropOffsetY));              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: if (CropRatio > 0)              {                  CropOffsetX = (int) ((writeableBitmap.PixelWidth/2.0)*CropRatio/100);                  CropOffsetY = (int) ((writeableBitmap.PixelHeight/2.0)*CropRatio/100);                  writeableBitmap = writeableBitmap.Crop(CropOffsetX' CropOffsetY'                      writeableBitmap.PixelWidth - (2*CropOffsetX)'                      writeableBitmap.PixelHeight - (2*CropOffsetY));              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: if (CropRatio > 0)              {                  CropOffsetX = (int) ((writeableBitmap.PixelWidth/2.0)*CropRatio/100);                  CropOffsetY = (int) ((writeableBitmap.PixelHeight/2.0)*CropRatio/100);                  writeableBitmap = writeableBitmap.Crop(CropOffsetX' CropOffsetY'                      writeableBitmap.PixelWidth - (2*CropOffsetX)'                      writeableBitmap.PixelHeight - (2*CropOffsetY));              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following statement contains a magic number: if (CropRatio > 0)              {                  CropOffsetX = (int) ((writeableBitmap.PixelWidth/2.0)*CropRatio/100);                  CropOffsetY = (int) ((writeableBitmap.PixelHeight/2.0)*CropRatio/100);                  writeableBitmap = writeableBitmap.Crop(CropOffsetX' CropOffsetY'                      writeableBitmap.PixelWidth - (2*CropOffsetX)'                      writeableBitmap.PixelHeight - (2*CropOffsetY));              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,SaveJpeg,The following statement contains a magic number: enc.QualityLevel = 50;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: color.A = 50;
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: if (OverlayActivated)              {                  if ((SelectedOverlay != null && File.Exists(SelectedOverlay)) || OverlayUseLastCaptured)                  {                      if (OverlayUseLastCaptured)                      {                          if (File.Exists(ServiceProvider.Settings.SelectedBitmap.FileItem.LargeThumb) &&                              _lastOverlay != ServiceProvider.Settings.SelectedBitmap.FileItem.LargeThumb)                          {                              _lastOverlay = ServiceProvider.Settings.SelectedBitmap.FileItem.LargeThumb;                              _overlayImage = null;                          }                      }                        if (_overlayImage == null)                      {                          BitmapImage bitmapSource = new BitmapImage();                          bitmapSource.DecodePixelWidth = writeableBitmap.PixelWidth;                          bitmapSource.BeginInit();                          bitmapSource.UriSource = new Uri(OverlayUseLastCaptured ? _lastOverlay : SelectedOverlay);                          bitmapSource.EndInit();                          _overlayImage = BitmapFactory.ConvertToPbgra32Format(bitmapSource);                          _overlayImage.Freeze();                      }                      int x = writeableBitmap.PixelWidth*OverlayScale/100;                      int y = writeableBitmap.PixelHeight*OverlayScale/100;                      int xx = writeableBitmap.PixelWidth*OverlayHorizontal/100;                      int yy = writeableBitmap.PixelHeight*OverlayVertical/100;                      System.Windows.Media.Color transpColor = Colors.White;                        //set color transparency for blit only the alpha chanel is used from transpColor                      if (OverlayTransparency < 100)                          transpColor = System.Windows.Media.Color.FromArgb((byte)(0xff * OverlayTransparency / 100d)' 0xff'                              0xff' 0xff);                      writeableBitmap.Blit(                          new Rect(0 + (x/2) + xx' 0 + (y/2) + yy' writeableBitmap.PixelWidth - x'                              writeableBitmap.PixelHeight - y)'                          _overlayImage'                          new Rect(0' 0' _overlayImage.PixelWidth' _overlayImage.PixelHeight)' transpColor'                          WriteableBitmapExtensions.BlendMode.Alpha);                  }              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: if (OverlayActivated)              {                  if ((SelectedOverlay != null && File.Exists(SelectedOverlay)) || OverlayUseLastCaptured)                  {                      if (OverlayUseLastCaptured)                      {                          if (File.Exists(ServiceProvider.Settings.SelectedBitmap.FileItem.LargeThumb) &&                              _lastOverlay != ServiceProvider.Settings.SelectedBitmap.FileItem.LargeThumb)                          {                              _lastOverlay = ServiceProvider.Settings.SelectedBitmap.FileItem.LargeThumb;                              _overlayImage = null;                          }                      }                        if (_overlayImage == null)                      {                          BitmapImage bitmapSource = new BitmapImage();                          bitmapSource.DecodePixelWidth = writeableBitmap.PixelWidth;                          bitmapSource.BeginInit();                          bitmapSource.UriSource = new Uri(OverlayUseLastCaptured ? _lastOverlay : SelectedOverlay);                          bitmapSource.EndInit();                          _overlayImage = BitmapFactory.ConvertToPbgra32Format(bitmapSource);                          _overlayImage.Freeze();                      }                      int x = writeableBitmap.PixelWidth*OverlayScale/100;                      int y = writeableBitmap.PixelHeight*OverlayScale/100;                      int xx = writeableBitmap.PixelWidth*OverlayHorizontal/100;                      int yy = writeableBitmap.PixelHeight*OverlayVertical/100;                      System.Windows.Media.Color transpColor = Colors.White;                        //set color transparency for blit only the alpha chanel is used from transpColor                      if (OverlayTransparency < 100)                          transpColor = System.Windows.Media.Color.FromArgb((byte)(0xff * OverlayTransparency / 100d)' 0xff'                              0xff' 0xff);                      writeableBitmap.Blit(                          new Rect(0 + (x/2) + xx' 0 + (y/2) + yy' writeableBitmap.PixelWidth - x'                              writeableBitmap.PixelHeight - y)'                          _overlayImage'                          new Rect(0' 0' _overlayImage.PixelWidth' _overlayImage.PixelHeight)' transpColor'                          WriteableBitmapExtensions.BlendMode.Alpha);                  }              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: if (OverlayActivated)              {                  if ((SelectedOverlay != null && File.Exists(SelectedOverlay)) || OverlayUseLastCaptured)                  {                      if (OverlayUseLastCaptured)                      {                          if (File.Exists(ServiceProvider.Settings.SelectedBitmap.FileItem.LargeThumb) &&                              _lastOverlay != ServiceProvider.Settings.SelectedBitmap.FileItem.LargeThumb)                          {                              _lastOverlay = ServiceProvider.Settings.SelectedBitmap.FileItem.LargeThumb;                              _overlayImage = null;                          }                      }                        if (_overlayImage == null)                      {                          BitmapImage bitmapSource = new BitmapImage();                          bitmapSource.DecodePixelWidth = writeableBitmap.PixelWidth;                          bitmapSource.BeginInit();                          bitmapSource.UriSource = new Uri(OverlayUseLastCaptured ? _lastOverlay : SelectedOverlay);                          bitmapSource.EndInit();                          _overlayImage = BitmapFactory.ConvertToPbgra32Format(bitmapSource);                          _overlayImage.Freeze();                      }                      int x = writeableBitmap.PixelWidth*OverlayScale/100;                      int y = writeableBitmap.PixelHeight*OverlayScale/100;                      int xx = writeableBitmap.PixelWidth*OverlayHorizontal/100;                      int yy = writeableBitmap.PixelHeight*OverlayVertical/100;                      System.Windows.Media.Color transpColor = Colors.White;                        //set color transparency for blit only the alpha chanel is used from transpColor                      if (OverlayTransparency < 100)                          transpColor = System.Windows.Media.Color.FromArgb((byte)(0xff * OverlayTransparency / 100d)' 0xff'                              0xff' 0xff);                      writeableBitmap.Blit(                          new Rect(0 + (x/2) + xx' 0 + (y/2) + yy' writeableBitmap.PixelWidth - x'                              writeableBitmap.PixelHeight - y)'                          _overlayImage'                          new Rect(0' 0' _overlayImage.PixelWidth' _overlayImage.PixelHeight)' transpColor'                          WriteableBitmapExtensions.BlendMode.Alpha);                  }              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: if (OverlayActivated)              {                  if ((SelectedOverlay != null && File.Exists(SelectedOverlay)) || OverlayUseLastCaptured)                  {                      if (OverlayUseLastCaptured)                      {                          if (File.Exists(ServiceProvider.Settings.SelectedBitmap.FileItem.LargeThumb) &&                              _lastOverlay != ServiceProvider.Settings.SelectedBitmap.FileItem.LargeThumb)                          {                              _lastOverlay = ServiceProvider.Settings.SelectedBitmap.FileItem.LargeThumb;                              _overlayImage = null;                          }                      }                        if (_overlayImage == null)                      {                          BitmapImage bitmapSource = new BitmapImage();                          bitmapSource.DecodePixelWidth = writeableBitmap.PixelWidth;                          bitmapSource.BeginInit();                          bitmapSource.UriSource = new Uri(OverlayUseLastCaptured ? _lastOverlay : SelectedOverlay);                          bitmapSource.EndInit();                          _overlayImage = BitmapFactory.ConvertToPbgra32Format(bitmapSource);                          _overlayImage.Freeze();                      }                      int x = writeableBitmap.PixelWidth*OverlayScale/100;                      int y = writeableBitmap.PixelHeight*OverlayScale/100;                      int xx = writeableBitmap.PixelWidth*OverlayHorizontal/100;                      int yy = writeableBitmap.PixelHeight*OverlayVertical/100;                      System.Windows.Media.Color transpColor = Colors.White;                        //set color transparency for blit only the alpha chanel is used from transpColor                      if (OverlayTransparency < 100)                          transpColor = System.Windows.Media.Color.FromArgb((byte)(0xff * OverlayTransparency / 100d)' 0xff'                              0xff' 0xff);                      writeableBitmap.Blit(                          new Rect(0 + (x/2) + xx' 0 + (y/2) + yy' writeableBitmap.PixelWidth - x'                              writeableBitmap.PixelHeight - y)'                          _overlayImage'                          new Rect(0' 0' _overlayImage.PixelWidth' _overlayImage.PixelHeight)' transpColor'                          WriteableBitmapExtensions.BlendMode.Alpha);                  }              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: if (OverlayActivated)              {                  if ((SelectedOverlay != null && File.Exists(SelectedOverlay)) || OverlayUseLastCaptured)                  {                      if (OverlayUseLastCaptured)                      {                          if (File.Exists(ServiceProvider.Settings.SelectedBitmap.FileItem.LargeThumb) &&                              _lastOverlay != ServiceProvider.Settings.SelectedBitmap.FileItem.LargeThumb)                          {                              _lastOverlay = ServiceProvider.Settings.SelectedBitmap.FileItem.LargeThumb;                              _overlayImage = null;                          }                      }                        if (_overlayImage == null)                      {                          BitmapImage bitmapSource = new BitmapImage();                          bitmapSource.DecodePixelWidth = writeableBitmap.PixelWidth;                          bitmapSource.BeginInit();                          bitmapSource.UriSource = new Uri(OverlayUseLastCaptured ? _lastOverlay : SelectedOverlay);                          bitmapSource.EndInit();                          _overlayImage = BitmapFactory.ConvertToPbgra32Format(bitmapSource);                          _overlayImage.Freeze();                      }                      int x = writeableBitmap.PixelWidth*OverlayScale/100;                      int y = writeableBitmap.PixelHeight*OverlayScale/100;                      int xx = writeableBitmap.PixelWidth*OverlayHorizontal/100;                      int yy = writeableBitmap.PixelHeight*OverlayVertical/100;                      System.Windows.Media.Color transpColor = Colors.White;                        //set color transparency for blit only the alpha chanel is used from transpColor                      if (OverlayTransparency < 100)                          transpColor = System.Windows.Media.Color.FromArgb((byte)(0xff * OverlayTransparency / 100d)' 0xff'                              0xff' 0xff);                      writeableBitmap.Blit(                          new Rect(0 + (x/2) + xx' 0 + (y/2) + yy' writeableBitmap.PixelWidth - x'                              writeableBitmap.PixelHeight - y)'                          _overlayImage'                          new Rect(0' 0' _overlayImage.PixelWidth' _overlayImage.PixelHeight)' transpColor'                          WriteableBitmapExtensions.BlendMode.Alpha);                  }              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: if (OverlayActivated)              {                  if ((SelectedOverlay != null && File.Exists(SelectedOverlay)) || OverlayUseLastCaptured)                  {                      if (OverlayUseLastCaptured)                      {                          if (File.Exists(ServiceProvider.Settings.SelectedBitmap.FileItem.LargeThumb) &&                              _lastOverlay != ServiceProvider.Settings.SelectedBitmap.FileItem.LargeThumb)                          {                              _lastOverlay = ServiceProvider.Settings.SelectedBitmap.FileItem.LargeThumb;                              _overlayImage = null;                          }                      }                        if (_overlayImage == null)                      {                          BitmapImage bitmapSource = new BitmapImage();                          bitmapSource.DecodePixelWidth = writeableBitmap.PixelWidth;                          bitmapSource.BeginInit();                          bitmapSource.UriSource = new Uri(OverlayUseLastCaptured ? _lastOverlay : SelectedOverlay);                          bitmapSource.EndInit();                          _overlayImage = BitmapFactory.ConvertToPbgra32Format(bitmapSource);                          _overlayImage.Freeze();                      }                      int x = writeableBitmap.PixelWidth*OverlayScale/100;                      int y = writeableBitmap.PixelHeight*OverlayScale/100;                      int xx = writeableBitmap.PixelWidth*OverlayHorizontal/100;                      int yy = writeableBitmap.PixelHeight*OverlayVertical/100;                      System.Windows.Media.Color transpColor = Colors.White;                        //set color transparency for blit only the alpha chanel is used from transpColor                      if (OverlayTransparency < 100)                          transpColor = System.Windows.Media.Color.FromArgb((byte)(0xff * OverlayTransparency / 100d)' 0xff'                              0xff' 0xff);                      writeableBitmap.Blit(                          new Rect(0 + (x/2) + xx' 0 + (y/2) + yy' writeableBitmap.PixelWidth - x'                              writeableBitmap.PixelHeight - y)'                          _overlayImage'                          new Rect(0' 0' _overlayImage.PixelWidth' _overlayImage.PixelHeight)' transpColor'                          WriteableBitmapExtensions.BlendMode.Alpha);                  }              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: if (OverlayActivated)              {                  if ((SelectedOverlay != null && File.Exists(SelectedOverlay)) || OverlayUseLastCaptured)                  {                      if (OverlayUseLastCaptured)                      {                          if (File.Exists(ServiceProvider.Settings.SelectedBitmap.FileItem.LargeThumb) &&                              _lastOverlay != ServiceProvider.Settings.SelectedBitmap.FileItem.LargeThumb)                          {                              _lastOverlay = ServiceProvider.Settings.SelectedBitmap.FileItem.LargeThumb;                              _overlayImage = null;                          }                      }                        if (_overlayImage == null)                      {                          BitmapImage bitmapSource = new BitmapImage();                          bitmapSource.DecodePixelWidth = writeableBitmap.PixelWidth;                          bitmapSource.BeginInit();                          bitmapSource.UriSource = new Uri(OverlayUseLastCaptured ? _lastOverlay : SelectedOverlay);                          bitmapSource.EndInit();                          _overlayImage = BitmapFactory.ConvertToPbgra32Format(bitmapSource);                          _overlayImage.Freeze();                      }                      int x = writeableBitmap.PixelWidth*OverlayScale/100;                      int y = writeableBitmap.PixelHeight*OverlayScale/100;                      int xx = writeableBitmap.PixelWidth*OverlayHorizontal/100;                      int yy = writeableBitmap.PixelHeight*OverlayVertical/100;                      System.Windows.Media.Color transpColor = Colors.White;                        //set color transparency for blit only the alpha chanel is used from transpColor                      if (OverlayTransparency < 100)                          transpColor = System.Windows.Media.Color.FromArgb((byte)(0xff * OverlayTransparency / 100d)' 0xff'                              0xff' 0xff);                      writeableBitmap.Blit(                          new Rect(0 + (x/2) + xx' 0 + (y/2) + yy' writeableBitmap.PixelWidth - x'                              writeableBitmap.PixelHeight - y)'                          _overlayImage'                          new Rect(0' 0' _overlayImage.PixelWidth' _overlayImage.PixelHeight)' transpColor'                          WriteableBitmapExtensions.BlendMode.Alpha);                  }              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: switch (GridType)              {                  case 1:                  {                      for (int i = 1; i < 3; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/3)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/3)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/3)*i)' 0'                              (int) ((writeableBitmap.Width/3)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 2:                  {                      for (int i = 1; i < 10; i++)                      {                          writeableBitmap.DrawLine(0' (int) ((writeableBitmap.Height/10)*i)'                              (int) writeableBitmap.Width'                              (int) ((writeableBitmap.Height/10)*i)' color);                          writeableBitmap.DrawLine((int) ((writeableBitmap.Width/10)*i)' 0'                              (int) ((writeableBitmap.Width/10)*i)'                              (int) writeableBitmap.Height' color);                      }                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 3:                  {                      writeableBitmap.DrawLineDDA(0' 0' (int) writeableBitmap.Width'                          (int) writeableBitmap.Height' color);                        writeableBitmap.DrawLineDDA(0' (int) writeableBitmap.Height'                          (int) writeableBitmap.Width' 0' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  case 4:                  {                      writeableBitmap.DrawLineDDA(0' (int) (writeableBitmap.Height/2)' (int) writeableBitmap.Width'                          (int) (writeableBitmap.Height/2)' color);                        writeableBitmap.DrawLineDDA((int) (writeableBitmap.Width/2)' 0'                          (int) (writeableBitmap.Width/2)' (int) writeableBitmap.Height' color);                      writeableBitmap.SetPixel((int) (writeableBitmap.Width/2)' (int) (writeableBitmap.Height/2)' 128'                          Colors.Red);                  }                      break;                  default:                      break;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: if (ShowRuler && NoSettingArea)              {                  int x1 = writeableBitmap.PixelWidth*(HorizontalMin)/1000;                  int x2 = writeableBitmap.PixelWidth*(HorizontalMin + HorizontalMax)/1000;                  int y2 = writeableBitmap.PixelHeight*(VerticalMin + VerticalMax)/1000;                  int y1 = writeableBitmap.PixelHeight*VerticalMin/1000;                    writeableBitmap.FillRectangle2(0' 0' writeableBitmap.PixelWidth' writeableBitmap.PixelHeight'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));                  writeableBitmap.FillRectangleDeBlend(x1' y1' x2' y2'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));                  writeableBitmap.DrawRectangle(x1' y1' x2' y2' color);                }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: if (ShowRuler && NoSettingArea)              {                  int x1 = writeableBitmap.PixelWidth*(HorizontalMin)/1000;                  int x2 = writeableBitmap.PixelWidth*(HorizontalMin + HorizontalMax)/1000;                  int y2 = writeableBitmap.PixelHeight*(VerticalMin + VerticalMax)/1000;                  int y1 = writeableBitmap.PixelHeight*VerticalMin/1000;                    writeableBitmap.FillRectangle2(0' 0' writeableBitmap.PixelWidth' writeableBitmap.PixelHeight'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));                  writeableBitmap.FillRectangleDeBlend(x1' y1' x2' y2'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));                  writeableBitmap.DrawRectangle(x1' y1' x2' y2' color);                }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: if (ShowRuler && NoSettingArea)              {                  int x1 = writeableBitmap.PixelWidth*(HorizontalMin)/1000;                  int x2 = writeableBitmap.PixelWidth*(HorizontalMin + HorizontalMax)/1000;                  int y2 = writeableBitmap.PixelHeight*(VerticalMin + VerticalMax)/1000;                  int y1 = writeableBitmap.PixelHeight*VerticalMin/1000;                    writeableBitmap.FillRectangle2(0' 0' writeableBitmap.PixelWidth' writeableBitmap.PixelHeight'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));                  writeableBitmap.FillRectangleDeBlend(x1' y1' x2' y2'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));                  writeableBitmap.DrawRectangle(x1' y1' x2' y2' color);                }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: if (ShowRuler && NoSettingArea)              {                  int x1 = writeableBitmap.PixelWidth*(HorizontalMin)/1000;                  int x2 = writeableBitmap.PixelWidth*(HorizontalMin + HorizontalMax)/1000;                  int y2 = writeableBitmap.PixelHeight*(VerticalMin + VerticalMax)/1000;                  int y1 = writeableBitmap.PixelHeight*VerticalMin/1000;                    writeableBitmap.FillRectangle2(0' 0' writeableBitmap.PixelWidth' writeableBitmap.PixelHeight'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));                  writeableBitmap.FillRectangleDeBlend(x1' y1' x2' y2'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));                  writeableBitmap.DrawRectangle(x1' y1' x2' y2' color);                }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: if (ShowRuler && NoSettingArea)              {                  int x1 = writeableBitmap.PixelWidth*(HorizontalMin)/1000;                  int x2 = writeableBitmap.PixelWidth*(HorizontalMin + HorizontalMax)/1000;                  int y2 = writeableBitmap.PixelHeight*(VerticalMin + VerticalMax)/1000;                  int y1 = writeableBitmap.PixelHeight*VerticalMin/1000;                    writeableBitmap.FillRectangle2(0' 0' writeableBitmap.PixelWidth' writeableBitmap.PixelHeight'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));                  writeableBitmap.FillRectangleDeBlend(x1' y1' x2' y2'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));                  writeableBitmap.DrawRectangle(x1' y1' x2' y2' color);                }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: if (ShowRuler && NoSettingArea)              {                  int x1 = writeableBitmap.PixelWidth*(HorizontalMin)/1000;                  int x2 = writeableBitmap.PixelWidth*(HorizontalMin + HorizontalMax)/1000;                  int y2 = writeableBitmap.PixelHeight*(VerticalMin + VerticalMax)/1000;                  int y1 = writeableBitmap.PixelHeight*VerticalMin/1000;                    writeableBitmap.FillRectangle2(0' 0' writeableBitmap.PixelWidth' writeableBitmap.PixelHeight'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));                  writeableBitmap.FillRectangleDeBlend(x1' y1' x2' y2'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));                  writeableBitmap.DrawRectangle(x1' y1' x2' y2' color);                }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: if (ShowRuler && NoSettingArea)              {                  int x1 = writeableBitmap.PixelWidth*(HorizontalMin)/1000;                  int x2 = writeableBitmap.PixelWidth*(HorizontalMin + HorizontalMax)/1000;                  int y2 = writeableBitmap.PixelHeight*(VerticalMin + VerticalMax)/1000;                  int y1 = writeableBitmap.PixelHeight*VerticalMin/1000;                    writeableBitmap.FillRectangle2(0' 0' writeableBitmap.PixelWidth' writeableBitmap.PixelHeight'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));                  writeableBitmap.FillRectangleDeBlend(x1' y1' x2' y2'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));                  writeableBitmap.DrawRectangle(x1' y1' x2' y2' color);                }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: if (ShowRuler && NoSettingArea)              {                  int x1 = writeableBitmap.PixelWidth*(HorizontalMin)/1000;                  int x2 = writeableBitmap.PixelWidth*(HorizontalMin + HorizontalMax)/1000;                  int y2 = writeableBitmap.PixelHeight*(VerticalMin + VerticalMax)/1000;                  int y1 = writeableBitmap.PixelHeight*VerticalMin/1000;                    writeableBitmap.FillRectangle2(0' 0' writeableBitmap.PixelWidth' writeableBitmap.PixelHeight'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));                  writeableBitmap.FillRectangleDeBlend(x1' y1' x2' y2'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));                  writeableBitmap.DrawRectangle(x1' y1' x2' y2' color);                }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: if (ShowRuler && NoSettingArea)              {                  int x1 = writeableBitmap.PixelWidth*(HorizontalMin)/1000;                  int x2 = writeableBitmap.PixelWidth*(HorizontalMin + HorizontalMax)/1000;                  int y2 = writeableBitmap.PixelHeight*(VerticalMin + VerticalMax)/1000;                  int y1 = writeableBitmap.PixelHeight*VerticalMin/1000;                    writeableBitmap.FillRectangle2(0' 0' writeableBitmap.PixelWidth' writeableBitmap.PixelHeight'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));                  writeableBitmap.FillRectangleDeBlend(x1' y1' x2' y2'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));                  writeableBitmap.DrawRectangle(x1' y1' x2' y2' color);                }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: if (ShowRuler && NoSettingArea)              {                  int x1 = writeableBitmap.PixelWidth*(HorizontalMin)/1000;                  int x2 = writeableBitmap.PixelWidth*(HorizontalMin + HorizontalMax)/1000;                  int y2 = writeableBitmap.PixelHeight*(VerticalMin + VerticalMax)/1000;                  int y1 = writeableBitmap.PixelHeight*VerticalMin/1000;                    writeableBitmap.FillRectangle2(0' 0' writeableBitmap.PixelWidth' writeableBitmap.PixelHeight'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));                  writeableBitmap.FillRectangleDeBlend(x1' y1' x2' y2'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));                  writeableBitmap.DrawRectangle(x1' y1' x2' y2' color);                }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: if (ShowRuler && NoSettingArea)              {                  int x1 = writeableBitmap.PixelWidth*(HorizontalMin)/1000;                  int x2 = writeableBitmap.PixelWidth*(HorizontalMin + HorizontalMax)/1000;                  int y2 = writeableBitmap.PixelHeight*(VerticalMin + VerticalMax)/1000;                  int y1 = writeableBitmap.PixelHeight*VerticalMin/1000;                    writeableBitmap.FillRectangle2(0' 0' writeableBitmap.PixelWidth' writeableBitmap.PixelHeight'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));                  writeableBitmap.FillRectangleDeBlend(x1' y1' x2' y2'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));                  writeableBitmap.DrawRectangle(x1' y1' x2' y2' color);                }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawGrid,The following statement contains a magic number: if (ShowRuler && NoSettingArea)              {                  int x1 = writeableBitmap.PixelWidth*(HorizontalMin)/1000;                  int x2 = writeableBitmap.PixelWidth*(HorizontalMin + HorizontalMax)/1000;                  int y2 = writeableBitmap.PixelHeight*(VerticalMin + VerticalMax)/1000;                  int y1 = writeableBitmap.PixelHeight*VerticalMin/1000;                    writeableBitmap.FillRectangle2(0' 0' writeableBitmap.PixelWidth' writeableBitmap.PixelHeight'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));                  writeableBitmap.FillRectangleDeBlend(x1' y1' x2' y2'                      System.Windows.Media.Color.FromArgb(128' 128' 128' 128));                  writeableBitmap.DrawRectangle(x1' y1' x2' y2' color);                }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawFocusPoint,The following statement contains a magic number: try              {                  if (LiveViewData == null)                      return;                  double xt = bitmap.Width/LiveViewData.ImageWidth;                  double yt = bitmap.Height/LiveViewData.ImageHeight;                    if (fill)                  {                      bitmap.FillRectangle2((int) (LiveViewData.FocusX*xt - (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt - (LiveViewData.FocusFrameYSize*yt/2))'                          (int) (LiveViewData.FocusX*xt + (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt + (LiveViewData.FocusFrameYSize*yt/2))'                          LiveViewData.HaveFocusData                              ? System.Windows.Media.Color.FromArgb(0x60' 0' 0xFF' 0)                              : System.Windows.Media.Color.FromArgb(0x60' 0xFF' 0' 0));                  }                  else                  {                      bitmap.DrawRectangle((int) (LiveViewData.FocusX*xt - (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt - (LiveViewData.FocusFrameYSize*yt/2))'                          (int) (LiveViewData.FocusX*xt + (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt + (LiveViewData.FocusFrameYSize*yt/2))'                          LiveViewData.HaveFocusData ? Colors.Green : Colors.Red);                  }              }              catch (Exception exception)              {                  Log.Error("Error draw helper lines"' exception);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawFocusPoint,The following statement contains a magic number: try              {                  if (LiveViewData == null)                      return;                  double xt = bitmap.Width/LiveViewData.ImageWidth;                  double yt = bitmap.Height/LiveViewData.ImageHeight;                    if (fill)                  {                      bitmap.FillRectangle2((int) (LiveViewData.FocusX*xt - (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt - (LiveViewData.FocusFrameYSize*yt/2))'                          (int) (LiveViewData.FocusX*xt + (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt + (LiveViewData.FocusFrameYSize*yt/2))'                          LiveViewData.HaveFocusData                              ? System.Windows.Media.Color.FromArgb(0x60' 0' 0xFF' 0)                              : System.Windows.Media.Color.FromArgb(0x60' 0xFF' 0' 0));                  }                  else                  {                      bitmap.DrawRectangle((int) (LiveViewData.FocusX*xt - (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt - (LiveViewData.FocusFrameYSize*yt/2))'                          (int) (LiveViewData.FocusX*xt + (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt + (LiveViewData.FocusFrameYSize*yt/2))'                          LiveViewData.HaveFocusData ? Colors.Green : Colors.Red);                  }              }              catch (Exception exception)              {                  Log.Error("Error draw helper lines"' exception);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawFocusPoint,The following statement contains a magic number: try              {                  if (LiveViewData == null)                      return;                  double xt = bitmap.Width/LiveViewData.ImageWidth;                  double yt = bitmap.Height/LiveViewData.ImageHeight;                    if (fill)                  {                      bitmap.FillRectangle2((int) (LiveViewData.FocusX*xt - (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt - (LiveViewData.FocusFrameYSize*yt/2))'                          (int) (LiveViewData.FocusX*xt + (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt + (LiveViewData.FocusFrameYSize*yt/2))'                          LiveViewData.HaveFocusData                              ? System.Windows.Media.Color.FromArgb(0x60' 0' 0xFF' 0)                              : System.Windows.Media.Color.FromArgb(0x60' 0xFF' 0' 0));                  }                  else                  {                      bitmap.DrawRectangle((int) (LiveViewData.FocusX*xt - (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt - (LiveViewData.FocusFrameYSize*yt/2))'                          (int) (LiveViewData.FocusX*xt + (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt + (LiveViewData.FocusFrameYSize*yt/2))'                          LiveViewData.HaveFocusData ? Colors.Green : Colors.Red);                  }              }              catch (Exception exception)              {                  Log.Error("Error draw helper lines"' exception);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawFocusPoint,The following statement contains a magic number: try              {                  if (LiveViewData == null)                      return;                  double xt = bitmap.Width/LiveViewData.ImageWidth;                  double yt = bitmap.Height/LiveViewData.ImageHeight;                    if (fill)                  {                      bitmap.FillRectangle2((int) (LiveViewData.FocusX*xt - (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt - (LiveViewData.FocusFrameYSize*yt/2))'                          (int) (LiveViewData.FocusX*xt + (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt + (LiveViewData.FocusFrameYSize*yt/2))'                          LiveViewData.HaveFocusData                              ? System.Windows.Media.Color.FromArgb(0x60' 0' 0xFF' 0)                              : System.Windows.Media.Color.FromArgb(0x60' 0xFF' 0' 0));                  }                  else                  {                      bitmap.DrawRectangle((int) (LiveViewData.FocusX*xt - (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt - (LiveViewData.FocusFrameYSize*yt/2))'                          (int) (LiveViewData.FocusX*xt + (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt + (LiveViewData.FocusFrameYSize*yt/2))'                          LiveViewData.HaveFocusData ? Colors.Green : Colors.Red);                  }              }              catch (Exception exception)              {                  Log.Error("Error draw helper lines"' exception);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawFocusPoint,The following statement contains a magic number: try              {                  if (LiveViewData == null)                      return;                  double xt = bitmap.Width/LiveViewData.ImageWidth;                  double yt = bitmap.Height/LiveViewData.ImageHeight;                    if (fill)                  {                      bitmap.FillRectangle2((int) (LiveViewData.FocusX*xt - (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt - (LiveViewData.FocusFrameYSize*yt/2))'                          (int) (LiveViewData.FocusX*xt + (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt + (LiveViewData.FocusFrameYSize*yt/2))'                          LiveViewData.HaveFocusData                              ? System.Windows.Media.Color.FromArgb(0x60' 0' 0xFF' 0)                              : System.Windows.Media.Color.FromArgb(0x60' 0xFF' 0' 0));                  }                  else                  {                      bitmap.DrawRectangle((int) (LiveViewData.FocusX*xt - (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt - (LiveViewData.FocusFrameYSize*yt/2))'                          (int) (LiveViewData.FocusX*xt + (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt + (LiveViewData.FocusFrameYSize*yt/2))'                          LiveViewData.HaveFocusData ? Colors.Green : Colors.Red);                  }              }              catch (Exception exception)              {                  Log.Error("Error draw helper lines"' exception);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawFocusPoint,The following statement contains a magic number: try              {                  if (LiveViewData == null)                      return;                  double xt = bitmap.Width/LiveViewData.ImageWidth;                  double yt = bitmap.Height/LiveViewData.ImageHeight;                    if (fill)                  {                      bitmap.FillRectangle2((int) (LiveViewData.FocusX*xt - (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt - (LiveViewData.FocusFrameYSize*yt/2))'                          (int) (LiveViewData.FocusX*xt + (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt + (LiveViewData.FocusFrameYSize*yt/2))'                          LiveViewData.HaveFocusData                              ? System.Windows.Media.Color.FromArgb(0x60' 0' 0xFF' 0)                              : System.Windows.Media.Color.FromArgb(0x60' 0xFF' 0' 0));                  }                  else                  {                      bitmap.DrawRectangle((int) (LiveViewData.FocusX*xt - (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt - (LiveViewData.FocusFrameYSize*yt/2))'                          (int) (LiveViewData.FocusX*xt + (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt + (LiveViewData.FocusFrameYSize*yt/2))'                          LiveViewData.HaveFocusData ? Colors.Green : Colors.Red);                  }              }              catch (Exception exception)              {                  Log.Error("Error draw helper lines"' exception);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawFocusPoint,The following statement contains a magic number: try              {                  if (LiveViewData == null)                      return;                  double xt = bitmap.Width/LiveViewData.ImageWidth;                  double yt = bitmap.Height/LiveViewData.ImageHeight;                    if (fill)                  {                      bitmap.FillRectangle2((int) (LiveViewData.FocusX*xt - (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt - (LiveViewData.FocusFrameYSize*yt/2))'                          (int) (LiveViewData.FocusX*xt + (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt + (LiveViewData.FocusFrameYSize*yt/2))'                          LiveViewData.HaveFocusData                              ? System.Windows.Media.Color.FromArgb(0x60' 0' 0xFF' 0)                              : System.Windows.Media.Color.FromArgb(0x60' 0xFF' 0' 0));                  }                  else                  {                      bitmap.DrawRectangle((int) (LiveViewData.FocusX*xt - (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt - (LiveViewData.FocusFrameYSize*yt/2))'                          (int) (LiveViewData.FocusX*xt + (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt + (LiveViewData.FocusFrameYSize*yt/2))'                          LiveViewData.HaveFocusData ? Colors.Green : Colors.Red);                  }              }              catch (Exception exception)              {                  Log.Error("Error draw helper lines"' exception);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,DrawFocusPoint,The following statement contains a magic number: try              {                  if (LiveViewData == null)                      return;                  double xt = bitmap.Width/LiveViewData.ImageWidth;                  double yt = bitmap.Height/LiveViewData.ImageHeight;                    if (fill)                  {                      bitmap.FillRectangle2((int) (LiveViewData.FocusX*xt - (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt - (LiveViewData.FocusFrameYSize*yt/2))'                          (int) (LiveViewData.FocusX*xt + (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt + (LiveViewData.FocusFrameYSize*yt/2))'                          LiveViewData.HaveFocusData                              ? System.Windows.Media.Color.FromArgb(0x60' 0' 0xFF' 0)                              : System.Windows.Media.Color.FromArgb(0x60' 0xFF' 0' 0));                  }                  else                  {                      bitmap.DrawRectangle((int) (LiveViewData.FocusX*xt - (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt - (LiveViewData.FocusFrameYSize*yt/2))'                          (int) (LiveViewData.FocusX*xt + (LiveViewData.FocusFrameXSize*xt/2))'                          (int) (LiveViewData.FocusY*yt + (LiveViewData.FocusFrameYSize*yt/2))'                          LiveViewData.HaveFocusData ? Colors.Green : Colors.Red);                  }              }              catch (Exception exception)              {                  Log.Error("Error draw helper lines"' exception);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessMotionDetection,The following statement contains a magic number: try              {                  float movement = 0;                  if (DetectMotionArea)                  {                      int x1 = bmp.Width*HorizontalMin/1000;                      int x2 = bmp.Width*(HorizontalMin + HorizontalMax)/1000;                      int y2 = bmp.Height*(VerticalMin + VerticalMax)/1000;                      int y1 = bmp.Height*VerticalMin/1000;                      using (                          var cropbmp = new Bitmap(bmp.Clone(new Rectangle(x1' y1' (x2 - x1)' (y2 - y1))' bmp.PixelFormat))                      )                      {                          cropbmp.SetResolution(bmp.HorizontalResolution' bmp.VerticalResolution);                          movement = _detector.ProcessFrame(cropbmp);                            using (var currentTileGraphics = Graphics.FromImage(bmp))                          {                              currentTileGraphics.DrawImage(cropbmp' x1' y1);                          }                      }                  }                  else                  {                      movement = _detector.ProcessFrame(bmp);                  }                    CurrentMotionIndex = Math.Round(movement*100' 2);                  if (movement > ((float) MotionThreshold/100) && MotionAction > 0 && !Recording &&                      (DateTime.Now - _photoCapturedTime).TotalSeconds > WaitForMotionSec &&                      _totalframes > 10)                  {                      if (MotionAction == 1)                      {                          FocusOnMovment(bmp);                          CaptureInThread();                      }                      if (MotionAction == 2)                      {                          FocusOnMovment(bmp);                          RecordMovie();                          _recordLength = MotionMovieLength;                      }                      _detector.Reset();                      _photoCapturedTime = DateTime.Now;                      _totalframes = 0;                  }              }              catch (Exception exception)              {                  Log.Error("Motion detection error "' exception);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessMotionDetection,The following statement contains a magic number: try              {                  float movement = 0;                  if (DetectMotionArea)                  {                      int x1 = bmp.Width*HorizontalMin/1000;                      int x2 = bmp.Width*(HorizontalMin + HorizontalMax)/1000;                      int y2 = bmp.Height*(VerticalMin + VerticalMax)/1000;                      int y1 = bmp.Height*VerticalMin/1000;                      using (                          var cropbmp = new Bitmap(bmp.Clone(new Rectangle(x1' y1' (x2 - x1)' (y2 - y1))' bmp.PixelFormat))                      )                      {                          cropbmp.SetResolution(bmp.HorizontalResolution' bmp.VerticalResolution);                          movement = _detector.ProcessFrame(cropbmp);                            using (var currentTileGraphics = Graphics.FromImage(bmp))                          {                              currentTileGraphics.DrawImage(cropbmp' x1' y1);                          }                      }                  }                  else                  {                      movement = _detector.ProcessFrame(bmp);                  }                    CurrentMotionIndex = Math.Round(movement*100' 2);                  if (movement > ((float) MotionThreshold/100) && MotionAction > 0 && !Recording &&                      (DateTime.Now - _photoCapturedTime).TotalSeconds > WaitForMotionSec &&                      _totalframes > 10)                  {                      if (MotionAction == 1)                      {                          FocusOnMovment(bmp);                          CaptureInThread();                      }                      if (MotionAction == 2)                      {                          FocusOnMovment(bmp);                          RecordMovie();                          _recordLength = MotionMovieLength;                      }                      _detector.Reset();                      _photoCapturedTime = DateTime.Now;                      _totalframes = 0;                  }              }              catch (Exception exception)              {                  Log.Error("Motion detection error "' exception);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessMotionDetection,The following statement contains a magic number: try              {                  float movement = 0;                  if (DetectMotionArea)                  {                      int x1 = bmp.Width*HorizontalMin/1000;                      int x2 = bmp.Width*(HorizontalMin + HorizontalMax)/1000;                      int y2 = bmp.Height*(VerticalMin + VerticalMax)/1000;                      int y1 = bmp.Height*VerticalMin/1000;                      using (                          var cropbmp = new Bitmap(bmp.Clone(new Rectangle(x1' y1' (x2 - x1)' (y2 - y1))' bmp.PixelFormat))                      )                      {                          cropbmp.SetResolution(bmp.HorizontalResolution' bmp.VerticalResolution);                          movement = _detector.ProcessFrame(cropbmp);                            using (var currentTileGraphics = Graphics.FromImage(bmp))                          {                              currentTileGraphics.DrawImage(cropbmp' x1' y1);                          }                      }                  }                  else                  {                      movement = _detector.ProcessFrame(bmp);                  }                    CurrentMotionIndex = Math.Round(movement*100' 2);                  if (movement > ((float) MotionThreshold/100) && MotionAction > 0 && !Recording &&                      (DateTime.Now - _photoCapturedTime).TotalSeconds > WaitForMotionSec &&                      _totalframes > 10)                  {                      if (MotionAction == 1)                      {                          FocusOnMovment(bmp);                          CaptureInThread();                      }                      if (MotionAction == 2)                      {                          FocusOnMovment(bmp);                          RecordMovie();                          _recordLength = MotionMovieLength;                      }                      _detector.Reset();                      _photoCapturedTime = DateTime.Now;                      _totalframes = 0;                  }              }              catch (Exception exception)              {                  Log.Error("Motion detection error "' exception);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessMotionDetection,The following statement contains a magic number: try              {                  float movement = 0;                  if (DetectMotionArea)                  {                      int x1 = bmp.Width*HorizontalMin/1000;                      int x2 = bmp.Width*(HorizontalMin + HorizontalMax)/1000;                      int y2 = bmp.Height*(VerticalMin + VerticalMax)/1000;                      int y1 = bmp.Height*VerticalMin/1000;                      using (                          var cropbmp = new Bitmap(bmp.Clone(new Rectangle(x1' y1' (x2 - x1)' (y2 - y1))' bmp.PixelFormat))                      )                      {                          cropbmp.SetResolution(bmp.HorizontalResolution' bmp.VerticalResolution);                          movement = _detector.ProcessFrame(cropbmp);                            using (var currentTileGraphics = Graphics.FromImage(bmp))                          {                              currentTileGraphics.DrawImage(cropbmp' x1' y1);                          }                      }                  }                  else                  {                      movement = _detector.ProcessFrame(bmp);                  }                    CurrentMotionIndex = Math.Round(movement*100' 2);                  if (movement > ((float) MotionThreshold/100) && MotionAction > 0 && !Recording &&                      (DateTime.Now - _photoCapturedTime).TotalSeconds > WaitForMotionSec &&                      _totalframes > 10)                  {                      if (MotionAction == 1)                      {                          FocusOnMovment(bmp);                          CaptureInThread();                      }                      if (MotionAction == 2)                      {                          FocusOnMovment(bmp);                          RecordMovie();                          _recordLength = MotionMovieLength;                      }                      _detector.Reset();                      _photoCapturedTime = DateTime.Now;                      _totalframes = 0;                  }              }              catch (Exception exception)              {                  Log.Error("Motion detection error "' exception);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessMotionDetection,The following statement contains a magic number: try              {                  float movement = 0;                  if (DetectMotionArea)                  {                      int x1 = bmp.Width*HorizontalMin/1000;                      int x2 = bmp.Width*(HorizontalMin + HorizontalMax)/1000;                      int y2 = bmp.Height*(VerticalMin + VerticalMax)/1000;                      int y1 = bmp.Height*VerticalMin/1000;                      using (                          var cropbmp = new Bitmap(bmp.Clone(new Rectangle(x1' y1' (x2 - x1)' (y2 - y1))' bmp.PixelFormat))                      )                      {                          cropbmp.SetResolution(bmp.HorizontalResolution' bmp.VerticalResolution);                          movement = _detector.ProcessFrame(cropbmp);                            using (var currentTileGraphics = Graphics.FromImage(bmp))                          {                              currentTileGraphics.DrawImage(cropbmp' x1' y1);                          }                      }                  }                  else                  {                      movement = _detector.ProcessFrame(bmp);                  }                    CurrentMotionIndex = Math.Round(movement*100' 2);                  if (movement > ((float) MotionThreshold/100) && MotionAction > 0 && !Recording &&                      (DateTime.Now - _photoCapturedTime).TotalSeconds > WaitForMotionSec &&                      _totalframes > 10)                  {                      if (MotionAction == 1)                      {                          FocusOnMovment(bmp);                          CaptureInThread();                      }                      if (MotionAction == 2)                      {                          FocusOnMovment(bmp);                          RecordMovie();                          _recordLength = MotionMovieLength;                      }                      _detector.Reset();                      _photoCapturedTime = DateTime.Now;                      _totalframes = 0;                  }              }              catch (Exception exception)              {                  Log.Error("Motion detection error "' exception);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessMotionDetection,The following statement contains a magic number: try              {                  float movement = 0;                  if (DetectMotionArea)                  {                      int x1 = bmp.Width*HorizontalMin/1000;                      int x2 = bmp.Width*(HorizontalMin + HorizontalMax)/1000;                      int y2 = bmp.Height*(VerticalMin + VerticalMax)/1000;                      int y1 = bmp.Height*VerticalMin/1000;                      using (                          var cropbmp = new Bitmap(bmp.Clone(new Rectangle(x1' y1' (x2 - x1)' (y2 - y1))' bmp.PixelFormat))                      )                      {                          cropbmp.SetResolution(bmp.HorizontalResolution' bmp.VerticalResolution);                          movement = _detector.ProcessFrame(cropbmp);                            using (var currentTileGraphics = Graphics.FromImage(bmp))                          {                              currentTileGraphics.DrawImage(cropbmp' x1' y1);                          }                      }                  }                  else                  {                      movement = _detector.ProcessFrame(bmp);                  }                    CurrentMotionIndex = Math.Round(movement*100' 2);                  if (movement > ((float) MotionThreshold/100) && MotionAction > 0 && !Recording &&                      (DateTime.Now - _photoCapturedTime).TotalSeconds > WaitForMotionSec &&                      _totalframes > 10)                  {                      if (MotionAction == 1)                      {                          FocusOnMovment(bmp);                          CaptureInThread();                      }                      if (MotionAction == 2)                      {                          FocusOnMovment(bmp);                          RecordMovie();                          _recordLength = MotionMovieLength;                      }                      _detector.Reset();                      _photoCapturedTime = DateTime.Now;                      _totalframes = 0;                  }              }              catch (Exception exception)              {                  Log.Error("Motion detection error "' exception);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessMotionDetection,The following statement contains a magic number: try              {                  float movement = 0;                  if (DetectMotionArea)                  {                      int x1 = bmp.Width*HorizontalMin/1000;                      int x2 = bmp.Width*(HorizontalMin + HorizontalMax)/1000;                      int y2 = bmp.Height*(VerticalMin + VerticalMax)/1000;                      int y1 = bmp.Height*VerticalMin/1000;                      using (                          var cropbmp = new Bitmap(bmp.Clone(new Rectangle(x1' y1' (x2 - x1)' (y2 - y1))' bmp.PixelFormat))                      )                      {                          cropbmp.SetResolution(bmp.HorizontalResolution' bmp.VerticalResolution);                          movement = _detector.ProcessFrame(cropbmp);                            using (var currentTileGraphics = Graphics.FromImage(bmp))                          {                              currentTileGraphics.DrawImage(cropbmp' x1' y1);                          }                      }                  }                  else                  {                      movement = _detector.ProcessFrame(bmp);                  }                    CurrentMotionIndex = Math.Round(movement*100' 2);                  if (movement > ((float) MotionThreshold/100) && MotionAction > 0 && !Recording &&                      (DateTime.Now - _photoCapturedTime).TotalSeconds > WaitForMotionSec &&                      _totalframes > 10)                  {                      if (MotionAction == 1)                      {                          FocusOnMovment(bmp);                          CaptureInThread();                      }                      if (MotionAction == 2)                      {                          FocusOnMovment(bmp);                          RecordMovie();                          _recordLength = MotionMovieLength;                      }                      _detector.Reset();                      _photoCapturedTime = DateTime.Now;                      _totalframes = 0;                  }              }              catch (Exception exception)              {                  Log.Error("Motion detection error "' exception);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessMotionDetection,The following statement contains a magic number: try              {                  float movement = 0;                  if (DetectMotionArea)                  {                      int x1 = bmp.Width*HorizontalMin/1000;                      int x2 = bmp.Width*(HorizontalMin + HorizontalMax)/1000;                      int y2 = bmp.Height*(VerticalMin + VerticalMax)/1000;                      int y1 = bmp.Height*VerticalMin/1000;                      using (                          var cropbmp = new Bitmap(bmp.Clone(new Rectangle(x1' y1' (x2 - x1)' (y2 - y1))' bmp.PixelFormat))                      )                      {                          cropbmp.SetResolution(bmp.HorizontalResolution' bmp.VerticalResolution);                          movement = _detector.ProcessFrame(cropbmp);                            using (var currentTileGraphics = Graphics.FromImage(bmp))                          {                              currentTileGraphics.DrawImage(cropbmp' x1' y1);                          }                      }                  }                  else                  {                      movement = _detector.ProcessFrame(bmp);                  }                    CurrentMotionIndex = Math.Round(movement*100' 2);                  if (movement > ((float) MotionThreshold/100) && MotionAction > 0 && !Recording &&                      (DateTime.Now - _photoCapturedTime).TotalSeconds > WaitForMotionSec &&                      _totalframes > 10)                  {                      if (MotionAction == 1)                      {                          FocusOnMovment(bmp);                          CaptureInThread();                      }                      if (MotionAction == 2)                      {                          FocusOnMovment(bmp);                          RecordMovie();                          _recordLength = MotionMovieLength;                      }                      _detector.Reset();                      _photoCapturedTime = DateTime.Now;                      _totalframes = 0;                  }              }              catch (Exception exception)              {                  Log.Error("Motion detection error "' exception);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessMotionDetection,The following statement contains a magic number: try              {                  float movement = 0;                  if (DetectMotionArea)                  {                      int x1 = bmp.Width*HorizontalMin/1000;                      int x2 = bmp.Width*(HorizontalMin + HorizontalMax)/1000;                      int y2 = bmp.Height*(VerticalMin + VerticalMax)/1000;                      int y1 = bmp.Height*VerticalMin/1000;                      using (                          var cropbmp = new Bitmap(bmp.Clone(new Rectangle(x1' y1' (x2 - x1)' (y2 - y1))' bmp.PixelFormat))                      )                      {                          cropbmp.SetResolution(bmp.HorizontalResolution' bmp.VerticalResolution);                          movement = _detector.ProcessFrame(cropbmp);                            using (var currentTileGraphics = Graphics.FromImage(bmp))                          {                              currentTileGraphics.DrawImage(cropbmp' x1' y1);                          }                      }                  }                  else                  {                      movement = _detector.ProcessFrame(bmp);                  }                    CurrentMotionIndex = Math.Round(movement*100' 2);                  if (movement > ((float) MotionThreshold/100) && MotionAction > 0 && !Recording &&                      (DateTime.Now - _photoCapturedTime).TotalSeconds > WaitForMotionSec &&                      _totalframes > 10)                  {                      if (MotionAction == 1)                      {                          FocusOnMovment(bmp);                          CaptureInThread();                      }                      if (MotionAction == 2)                      {                          FocusOnMovment(bmp);                          RecordMovie();                          _recordLength = MotionMovieLength;                      }                      _detector.Reset();                      _photoCapturedTime = DateTime.Now;                      _totalframes = 0;                  }              }              catch (Exception exception)              {                  Log.Error("Motion detection error "' exception);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,FocusOnMovment,The following statement contains a magic number: if (MotionAutofocusBeforCapture)              {                  var processing = _detector.MotionProcessingAlgorithm as BlobCountingObjectsProcessing;                  if (processing != null && processing.ObjectRectangles != null &&                      processing.ObjectRectangles.Length > 0 &&                      LiveViewData.ImageData != null)                  {                      var rectangle = new Rectangle();                      int surface = 0;                      foreach (Rectangle objectRectangle in processing.ObjectRectangles)                      {                          if (surface < objectRectangle.Width*objectRectangle.Height)                          {                              surface = objectRectangle.Width*objectRectangle.Height;                              rectangle = objectRectangle;                          }                      }                      double xt = LiveViewData.ImageWidth/(double) bmp.Width;                      double yt = LiveViewData.ImageHeight/(double) bmp.Height;                      int posx = (int) ((rectangle.X + (rectangle.Width/2))*xt);                      int posy = (int) ((rectangle.Y + (rectangle.Height/2))*yt);                      CameraDevice.Focus(posx' posy);                  }                  AutoFocusThread();              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,FocusOnMovment,The following statement contains a magic number: if (MotionAutofocusBeforCapture)              {                  var processing = _detector.MotionProcessingAlgorithm as BlobCountingObjectsProcessing;                  if (processing != null && processing.ObjectRectangles != null &&                      processing.ObjectRectangles.Length > 0 &&                      LiveViewData.ImageData != null)                  {                      var rectangle = new Rectangle();                      int surface = 0;                      foreach (Rectangle objectRectangle in processing.ObjectRectangles)                      {                          if (surface < objectRectangle.Width*objectRectangle.Height)                          {                              surface = objectRectangle.Width*objectRectangle.Height;                              rectangle = objectRectangle;                          }                      }                      double xt = LiveViewData.ImageWidth/(double) bmp.Width;                      double yt = LiveViewData.ImageHeight/(double) bmp.Height;                      int posx = (int) ((rectangle.X + (rectangle.Width/2))*xt);                      int posy = (int) ((rectangle.Y + (rectangle.Height/2))*yt);                      CameraDevice.Focus(posx' posy);                  }                  AutoFocusThread();              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,StartLiveViewThread,The following statement contains a magic number: try              {                  _totalframes = 0;                  _framestart = DateTime.Now;                  bool retry = false;                  int retryNum = 0;                  Log.Debug("LiveView: Liveview started");                  do                  {                      try                      {                          LiveViewManager.StartLiveView(CameraDevice);                      }                      catch (DeviceException deviceException)                      {                          if (deviceException.ErrorCode == ErrorCodes.ERROR_BUSY ||                              deviceException.ErrorCode == ErrorCodes.MTP_Device_Busy)                          {                              Thread.Sleep(100);                              Log.Debug("Retry live view :" + deviceException.ErrorCode.ToString("X"));                              retry = true;                              retryNum++;                          }                          else                          {                              throw;                          }                      }                  } while (retry && retryNum < 35);                  if (CameraDevice.GetCapability(CapabilityEnum.LiveViewStream))                  {                      Recording = false;                      Application.Current.Dispatcher.BeginInvoke(new Action(                          () =>                          {                              _videoSource.StartPlay(new Uri(CameraDevice.GetLiveViewStream()));                              StaticHelper.Instance.SystemMessage = "Waiting for live view stream...";                          }));                  }                  else                  {                      _timer.Start();                                      }                                    _operInProgress = false;                  Log.Debug("LiveView: Liveview start done");              }              catch (Exception exception)              {                  Log.Error("Unable to start liveview !"' exception);                  StaticHelper.Instance.SystemMessage = "Unable to start liveview ! " + exception.Message;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,StartLiveViewThread,The following statement contains a magic number: try              {                  _totalframes = 0;                  _framestart = DateTime.Now;                  bool retry = false;                  int retryNum = 0;                  Log.Debug("LiveView: Liveview started");                  do                  {                      try                      {                          LiveViewManager.StartLiveView(CameraDevice);                      }                      catch (DeviceException deviceException)                      {                          if (deviceException.ErrorCode == ErrorCodes.ERROR_BUSY ||                              deviceException.ErrorCode == ErrorCodes.MTP_Device_Busy)                          {                              Thread.Sleep(100);                              Log.Debug("Retry live view :" + deviceException.ErrorCode.ToString("X"));                              retry = true;                              retryNum++;                          }                          else                          {                              throw;                          }                      }                  } while (retry && retryNum < 35);                  if (CameraDevice.GetCapability(CapabilityEnum.LiveViewStream))                  {                      Recording = false;                      Application.Current.Dispatcher.BeginInvoke(new Action(                          () =>                          {                              _videoSource.StartPlay(new Uri(CameraDevice.GetLiveViewStream()));                              StaticHelper.Instance.SystemMessage = "Waiting for live view stream...";                          }));                  }                  else                  {                      _timer.Start();                                      }                                    _operInProgress = false;                  Log.Debug("LiveView: Liveview start done");              }              catch (Exception exception)              {                  Log.Error("Unable to start liveview !"' exception);                  StaticHelper.Instance.SystemMessage = "Unable to start liveview ! " + exception.Message;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,StopLiveViewThread,The following statement contains a magic number: try              {                  _totalframes = 0;                  _framestart = DateTime.Now;                  bool retry = false;                  int retryNum = 0;                  Log.Debug("LiveView: Liveview stopping");                  do                  {                      try                      {                          LiveViewManager.StopLiveView(CameraDevice);                      }                      catch (DeviceException deviceException)                      {                          if (deviceException.ErrorCode == ErrorCodes.ERROR_BUSY ||                              deviceException.ErrorCode == ErrorCodes.MTP_Device_Busy)                          {                              Thread.Sleep(500);                              Log.Debug("Retry live view stop:" + deviceException.ErrorCode.ToString("X"));                              retry = true;                              retryNum++;                          }                          else                          {                              throw;                          }                      }                  } while (retry && retryNum < 35);                  Application.Current.Dispatcher.BeginInvoke(new Action(() =>                  {                      if (_videoSource != null && _videoSource.IsPlaying)                      {                          _videoSource.Stop();                      }                  }));              }              catch (Exception exception)              {                  Log.Error("Unable to stop liveview !"' exception);                  StaticHelper.Instance.SystemMessage = "Unable to stop liveview ! " + exception.Message;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,StopLiveViewThread,The following statement contains a magic number: try              {                  _totalframes = 0;                  _framestart = DateTime.Now;                  bool retry = false;                  int retryNum = 0;                  Log.Debug("LiveView: Liveview stopping");                  do                  {                      try                      {                          LiveViewManager.StopLiveView(CameraDevice);                      }                      catch (DeviceException deviceException)                      {                          if (deviceException.ErrorCode == ErrorCodes.ERROR_BUSY ||                              deviceException.ErrorCode == ErrorCodes.MTP_Device_Busy)                          {                              Thread.Sleep(500);                              Log.Debug("Retry live view stop:" + deviceException.ErrorCode.ToString("X"));                              retry = true;                              retryNum++;                          }                          else                          {                              throw;                          }                      }                  } while (retry && retryNum < 35);                  Application.Current.Dispatcher.BeginInvoke(new Action(() =>                  {                      if (_videoSource != null && _videoSource.IsPlaying)                      {                          _videoSource.Stop();                      }                  }));              }              catch (Exception exception)              {                  Log.Error("Unable to stop liveview !"' exception);                  StaticHelper.Instance.SystemMessage = "Unable to stop liveview ! " + exception.Message;              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,SetFocusThread,The following statement contains a magic number: if (step != 0)              {                  if (LockA)                  {                      if (FocusCounter == 0 && step < 0)                      {                          _focusIProgress = false;                          _selectedFocusValue = FocusCounter;                          OnFocuseDone();                          RaisePropertyChanged(() => FocusingEnabled);                          RaisePropertyChanged(() => SelectedFocusValue);                          return;                      }                      if (FocusCounter + step < 0)                          step = -FocusCounter;                  }                  if (LockB)                  {                      if (FocusCounter + step > FocusValue)                          step = FocusValue - FocusCounter;                  }                    var focusStep = 0;                  _timer.Stop();                    var retryCount = 10;                  do                  {                      try                      {                          CameraDevice.StartLiveView();                          if (SimpleManualFocus)                          {                              FocusProgressMax = Math.Abs(step);                              FocusProgressValue = 0;                              FocusProgressVisible = true;                                for (var i = 0; i < Math.Abs(step); i++)                              {                                  FocusProgressValue++;                                  focusStep += CameraDevice.Focus(step);                                  GetLiveImage();                                  Thread.Sleep(ServiceProvider.Settings.CanonFocusStepWait);                              }                              FocusProgressVisible = false;                          }                          else                          {                              focusStep += CameraDevice.Focus(step);                          }                            FocusCounter += focusStep;                          if (!LockA && LockB && FocusCounter < 0)                          {                              FocusValue += (FocusCounter * -1);                              FocusCounter = 0;                          }                          StaticHelper.Instance.SystemMessage = "Move focus " + step;                          break;                      }                      catch (DeviceException exception)                      {                          Log.Debug("Unable to focus"' exception);                          StaticHelper.Instance.SystemMessage = TranslationStrings.LabelErrorUnableFocus + " " +                                                                exception.Message;                          retryCount--;                      }                      catch (Exception exception)                      {                          Log.Debug("Unable to focus"' exception);                          StaticHelper.Instance.SystemMessage = TranslationStrings.LabelErrorUnableFocus;                          retryCount--;                      }                      Thread.Sleep(50);                  } while (retryCount > 0);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,SetFocusThread,The following statement contains a magic number: if (step != 0)              {                  if (LockA)                  {                      if (FocusCounter == 0 && step < 0)                      {                          _focusIProgress = false;                          _selectedFocusValue = FocusCounter;                          OnFocuseDone();                          RaisePropertyChanged(() => FocusingEnabled);                          RaisePropertyChanged(() => SelectedFocusValue);                          return;                      }                      if (FocusCounter + step < 0)                          step = -FocusCounter;                  }                  if (LockB)                  {                      if (FocusCounter + step > FocusValue)                          step = FocusValue - FocusCounter;                  }                    var focusStep = 0;                  _timer.Stop();                    var retryCount = 10;                  do                  {                      try                      {                          CameraDevice.StartLiveView();                          if (SimpleManualFocus)                          {                              FocusProgressMax = Math.Abs(step);                              FocusProgressValue = 0;                              FocusProgressVisible = true;                                for (var i = 0; i < Math.Abs(step); i++)                              {                                  FocusProgressValue++;                                  focusStep += CameraDevice.Focus(step);                                  GetLiveImage();                                  Thread.Sleep(ServiceProvider.Settings.CanonFocusStepWait);                              }                              FocusProgressVisible = false;                          }                          else                          {                              focusStep += CameraDevice.Focus(step);                          }                            FocusCounter += focusStep;                          if (!LockA && LockB && FocusCounter < 0)                          {                              FocusValue += (FocusCounter * -1);                              FocusCounter = 0;                          }                          StaticHelper.Instance.SystemMessage = "Move focus " + step;                          break;                      }                      catch (DeviceException exception)                      {                          Log.Debug("Unable to focus"' exception);                          StaticHelper.Instance.SystemMessage = TranslationStrings.LabelErrorUnableFocus + " " +                                                                exception.Message;                          retryCount--;                      }                      catch (Exception exception)                      {                          Log.Debug("Unable to focus"' exception);                          StaticHelper.Instance.SystemMessage = TranslationStrings.LabelErrorUnableFocus;                          retryCount--;                      }                      Thread.Sleep(50);                  } while (retryCount > 0);              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,Capture,The following statement contains a magic number: if (preview)              {                  _timer.Stop();                  Thread.Sleep(300);                  try                  {                      LiveViewManager.PreviewRequest[CameraDevice] = true;                      CameraDevice.CapturePhotoNoAf();                      Log.Debug("LiveView: Capture preview done");                      return;                  }                  catch (Exception exception)                  {                      StaticHelper.Instance.SystemMessage = exception.Message;                      Log.Error("Unable to take preview picture with no af"' exception);                  }              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,Capture,The following statement contains a magic number: for (int i = 0; i < CaptureCount; i++)              {                  Log.Debug("LiveView: Capture started");                  if (CaptureDelay > 0)                  {                      Log.Debug("LiveView: Capture delayed");                      CountDown = CaptureDelay;                      CountDownVisible = true;                      while (CountDown > 0)                      {                          if (CaptureCancelRequested)                              break;                          Thread.Sleep(1000);                          CountDown--;                      }                      CountDownVisible = false;                  }                                   if (AutoFocusBeforCapture)                      AutoFocusThread();                    if (CaptureCancelRequested)                      break;                    _timer.Stop();                  Thread.Sleep(300);                  try                  {                      CameraDevice.CapturePhotoNoAf();                      Log.Debug("LiveView: Capture Initialization Done");                  }                  catch (Exception exception)                  {                      StaticHelper.Instance.SystemMessage = exception.Message;                      Log.Error("Unable to take picture with no af"' exception);                      break;                  }                    // if multiple capture set wait also preview time                  if (CaptureCount > 1)                  {                      CameraDevice.WaitForCamera(2000);                      for (int j = 0; j < PreviewTime; j++)                      {                          Thread.Sleep(1000);                          if (CaptureCancelRequested)                              break;                      }                  }              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,Capture,The following statement contains a magic number: for (int i = 0; i < CaptureCount; i++)              {                  Log.Debug("LiveView: Capture started");                  if (CaptureDelay > 0)                  {                      Log.Debug("LiveView: Capture delayed");                      CountDown = CaptureDelay;                      CountDownVisible = true;                      while (CountDown > 0)                      {                          if (CaptureCancelRequested)                              break;                          Thread.Sleep(1000);                          CountDown--;                      }                      CountDownVisible = false;                  }                                   if (AutoFocusBeforCapture)                      AutoFocusThread();                    if (CaptureCancelRequested)                      break;                    _timer.Stop();                  Thread.Sleep(300);                  try                  {                      CameraDevice.CapturePhotoNoAf();                      Log.Debug("LiveView: Capture Initialization Done");                  }                  catch (Exception exception)                  {                      StaticHelper.Instance.SystemMessage = exception.Message;                      Log.Error("Unable to take picture with no af"' exception);                      break;                  }                    // if multiple capture set wait also preview time                  if (CaptureCount > 1)                  {                      CameraDevice.WaitForCamera(2000);                      for (int j = 0; j < PreviewTime; j++)                      {                          Thread.Sleep(1000);                          if (CaptureCancelRequested)                              break;                      }                  }              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,Capture,The following statement contains a magic number: for (int i = 0; i < CaptureCount; i++)              {                  Log.Debug("LiveView: Capture started");                  if (CaptureDelay > 0)                  {                      Log.Debug("LiveView: Capture delayed");                      CountDown = CaptureDelay;                      CountDownVisible = true;                      while (CountDown > 0)                      {                          if (CaptureCancelRequested)                              break;                          Thread.Sleep(1000);                          CountDown--;                      }                      CountDownVisible = false;                  }                                   if (AutoFocusBeforCapture)                      AutoFocusThread();                    if (CaptureCancelRequested)                      break;                    _timer.Stop();                  Thread.Sleep(300);                  try                  {                      CameraDevice.CapturePhotoNoAf();                      Log.Debug("LiveView: Capture Initialization Done");                  }                  catch (Exception exception)                  {                      StaticHelper.Instance.SystemMessage = exception.Message;                      Log.Error("Unable to take picture with no af"' exception);                      break;                  }                    // if multiple capture set wait also preview time                  if (CaptureCount > 1)                  {                      CameraDevice.WaitForCamera(2000);                      for (int j = 0; j < PreviewTime; j++)                      {                          Thread.Sleep(1000);                          if (CaptureCancelRequested)                              break;                      }                  }              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,Capture,The following statement contains a magic number: for (int i = 0; i < CaptureCount; i++)              {                  Log.Debug("LiveView: Capture started");                  if (CaptureDelay > 0)                  {                      Log.Debug("LiveView: Capture delayed");                      CountDown = CaptureDelay;                      CountDownVisible = true;                      while (CountDown > 0)                      {                          if (CaptureCancelRequested)                              break;                          Thread.Sleep(1000);                          CountDown--;                      }                      CountDownVisible = false;                  }                                   if (AutoFocusBeforCapture)                      AutoFocusThread();                    if (CaptureCancelRequested)                      break;                    _timer.Stop();                  Thread.Sleep(300);                  try                  {                      CameraDevice.CapturePhotoNoAf();                      Log.Debug("LiveView: Capture Initialization Done");                  }                  catch (Exception exception)                  {                      StaticHelper.Instance.SystemMessage = exception.Message;                      Log.Error("Unable to take picture with no af"' exception);                      break;                  }                    // if multiple capture set wait also preview time                  if (CaptureCount > 1)                  {                      CameraDevice.WaitForCamera(2000);                      for (int j = 0; j < PreviewTime; j++)                      {                          Thread.Sleep(1000);                          if (CaptureCancelRequested)                              break;                      }                  }              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,SetFocusPos,The following statement contains a magic number: if (LiveViewData != null)              {                  //CropOffsetX = (writeableBitmap.PixelWidth / 2) * CropRatio / 100;                  double offsetX = (((refWidth*100)/(100 - CropRatio)) - refWidth)/2;                  double offsety = (((refHeight * 100) / (100 - CropRatio)) - refHeight) / 2; ; ;                  double xt = (LiveViewData.ImageWidth )/(refWidth+(offsetX*2));                  double yt = (LiveViewData.ImageHeight ) /( refHeight+(offsety*2));                  int posx = (int)((offsetX+initialPoint.X) * xt);                  if (FlipImage)                      posx = (int)(((refWidth) - initialPoint.X + offsetX) * xt);                  int posy = (int)((initialPoint.Y+offsety) * yt);                  Task.Factory.StartNew(() => SetFocusPos(posx' posy));              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,SetFocusPos,The following statement contains a magic number: if (LiveViewData != null)              {                  //CropOffsetX = (writeableBitmap.PixelWidth / 2) * CropRatio / 100;                  double offsetX = (((refWidth*100)/(100 - CropRatio)) - refWidth)/2;                  double offsety = (((refHeight * 100) / (100 - CropRatio)) - refHeight) / 2; ; ;                  double xt = (LiveViewData.ImageWidth )/(refWidth+(offsetX*2));                  double yt = (LiveViewData.ImageHeight ) /( refHeight+(offsety*2));                  int posx = (int)((offsetX+initialPoint.X) * xt);                  if (FlipImage)                      posx = (int)(((refWidth) - initialPoint.X + offsetX) * xt);                  int posy = (int)((initialPoint.Y+offsety) * yt);                  Task.Factory.StartNew(() => SetFocusPos(posx' posy));              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,SetFocusPos,The following statement contains a magic number: if (LiveViewData != null)              {                  //CropOffsetX = (writeableBitmap.PixelWidth / 2) * CropRatio / 100;                  double offsetX = (((refWidth*100)/(100 - CropRatio)) - refWidth)/2;                  double offsety = (((refHeight * 100) / (100 - CropRatio)) - refHeight) / 2; ; ;                  double xt = (LiveViewData.ImageWidth )/(refWidth+(offsetX*2));                  double yt = (LiveViewData.ImageHeight ) /( refHeight+(offsety*2));                  int posx = (int)((offsetX+initialPoint.X) * xt);                  if (FlipImage)                      posx = (int)(((refWidth) - initialPoint.X + offsetX) * xt);                  int posy = (int)((initialPoint.Y+offsety) * yt);                  Task.Factory.StartNew(() => SetFocusPos(posx' posy));              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,SetFocusPos,The following statement contains a magic number: if (LiveViewData != null)              {                  //CropOffsetX = (writeableBitmap.PixelWidth / 2) * CropRatio / 100;                  double offsetX = (((refWidth*100)/(100 - CropRatio)) - refWidth)/2;                  double offsety = (((refHeight * 100) / (100 - CropRatio)) - refHeight) / 2; ; ;                  double xt = (LiveViewData.ImageWidth )/(refWidth+(offsetX*2));                  double yt = (LiveViewData.ImageHeight ) /( refHeight+(offsety*2));                  int posx = (int)((offsetX+initialPoint.X) * xt);                  if (FlipImage)                      posx = (int)(((refWidth) - initialPoint.X + offsetX) * xt);                  int posy = (int)((initialPoint.Y+offsety) * yt);                  Task.Factory.StartNew(() => SetFocusPos(posx' posy));              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,SetFocusPos,The following statement contains a magic number: if (LiveViewData != null)              {                  //CropOffsetX = (writeableBitmap.PixelWidth / 2) * CropRatio / 100;                  double offsetX = (((refWidth*100)/(100 - CropRatio)) - refWidth)/2;                  double offsety = (((refHeight * 100) / (100 - CropRatio)) - refHeight) / 2; ; ;                  double xt = (LiveViewData.ImageWidth )/(refWidth+(offsetX*2));                  double yt = (LiveViewData.ImageHeight ) /( refHeight+(offsety*2));                  int posx = (int)((offsetX+initialPoint.X) * xt);                  if (FlipImage)                      posx = (int)(((refWidth) - initialPoint.X + offsetX) * xt);                  int posy = (int)((initialPoint.Y+offsety) * yt);                  Task.Factory.StartNew(() => SetFocusPos(posx' posy));              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,SetFocusPos,The following statement contains a magic number: if (LiveViewData != null)              {                  //CropOffsetX = (writeableBitmap.PixelWidth / 2) * CropRatio / 100;                  double offsetX = (((refWidth*100)/(100 - CropRatio)) - refWidth)/2;                  double offsety = (((refHeight * 100) / (100 - CropRatio)) - refHeight) / 2; ; ;                  double xt = (LiveViewData.ImageWidth )/(refWidth+(offsetX*2));                  double yt = (LiveViewData.ImageHeight ) /( refHeight+(offsety*2));                  int posx = (int)((offsetX+initialPoint.X) * xt);                  if (FlipImage)                      posx = (int)(((refWidth) - initialPoint.X + offsetX) * xt);                  int posy = (int)((initialPoint.Y+offsety) * yt);                  Task.Factory.StartNew(() => SetFocusPos(posx' posy));              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,SetFocusPos,The following statement contains a magic number: if (LiveViewData != null)              {                  //CropOffsetX = (writeableBitmap.PixelWidth / 2) * CropRatio / 100;                  double offsetX = (((refWidth*100)/(100 - CropRatio)) - refWidth)/2;                  double offsety = (((refHeight * 100) / (100 - CropRatio)) - refHeight) / 2; ; ;                  double xt = (LiveViewData.ImageWidth )/(refWidth+(offsetX*2));                  double yt = (LiveViewData.ImageHeight ) /( refHeight+(offsety*2));                  int posx = (int)((offsetX+initialPoint.X) * xt);                  if (FlipImage)                      posx = (int)(((refWidth) - initialPoint.X + offsetX) * xt);                  int posy = (int)((initialPoint.Y+offsety) * yt);                  Task.Factory.StartNew(() => SetFocusPos(posx' posy));              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,SetFocusPos,The following statement contains a magic number: if (LiveViewData != null)              {                  //CropOffsetX = (writeableBitmap.PixelWidth / 2) * CropRatio / 100;                  double offsetX = (((refWidth*100)/(100 - CropRatio)) - refWidth)/2;                  double offsety = (((refHeight * 100) / (100 - CropRatio)) - refHeight) / 2; ; ;                  double xt = (LiveViewData.ImageWidth )/(refWidth+(offsetX*2));                  double yt = (LiveViewData.ImageHeight ) /( refHeight+(offsety*2));                  int posx = (int)((offsetX+initialPoint.X) * xt);                  if (FlipImage)                      posx = (int)(((refWidth) - initialPoint.X + offsetX) * xt);                  int posy = (int)((initialPoint.Y+offsety) * yt);                  Task.Factory.StartNew(() => SetFocusPos(posx' posy));              }
Magic Number,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,_focusStackingTimer_Elapsed,The following statement contains a magic number: if (_focusStackinMode == 0)              {                  if (FocusStackingTick > WaitTime)                  {                      _focusStackingTimer.Stop();                      StartLiveView();                      if (PhotoCount > 0)                      {                          SetFocus(FocusStep);                      }                  }              }              else              {                  if (FocusStackingTick > WaitTime)                  {                      _focusStackingTimer.Stop();                      StartLiveView();                      if (PhotoCount > 0)                      {                          int dir = Direction == 0 ? -1 : 1;                          switch (FocusStepSize)                          {                              case 0:                                  SetFocus(dir * (SimpleManualFocus ? ServiceProvider.Settings.SmallFocusStepCanon : ServiceProvider.Settings.SmalFocusStep));                                  break;                              case 1:                                  SetFocus(dir * (SimpleManualFocus ? ServiceProvider.Settings.MediumFocusStepCanon : ServiceProvider.Settings.MediumFocusStep));                                  break;                              case 2:                                  SetFocus(dir * (SimpleManualFocus ? ServiceProvider.Settings.LargeFocusStepCanon : ServiceProvider.Settings.LargeFocusStep));                                  break;                          }                      }                      else                      {                          LiveViewViewModel_FocuseDone(null' null);                      }                  }              }
Magic Number,CameraControl.ViewModel,MainMenuViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\MainMenuViewModel.cs,SetAsMaster,The following statement contains a magic number: try              {                  int i = 0;                  _dlg.MaxValue = ServiceProvider.DeviceManager.ConnectedDevices.Count;                  var preset = new CameraPreset();                  preset.Get(ServiceProvider.DeviceManager.SelectedCameraDevice);                  foreach (ICameraDevice connectedDevice in ServiceProvider.DeviceManager.ConnectedDevices)                  {                      if (connectedDevice == null || !connectedDevice.IsConnected)                          continue;                      try                      {                          if (connectedDevice != ServiceProvider.DeviceManager.SelectedCameraDevice)                          {                              _dlg.Label = connectedDevice.DisplayName;                              _dlg.Progress = i;                              i++;                              preset.Set(connectedDevice);                          }                      }                      catch (Exception exception)                      {                          Log.Error("Unable to set property "' exception);                      }                      Thread.Sleep(250);                  }              }              catch (Exception exception)              {                  Log.Error("Unable to set as master "' exception);              }
Magic Number,CameraControl.ViewModel,MultipleLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\MultipleLiveViewViewModel.cs,MultipleLiveViewViewModel,The following statement contains a magic number: Rows = 2;
Magic Number,CameraControl.ViewModel,MultipleLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\MultipleLiveViewViewModel.cs,MultipleLiveViewViewModel,The following statement contains a magic number: Cols = 2;
Magic Number,CameraControl.ViewModel,MultipleLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\MultipleLiveViewViewModel.cs,WindowsManager_Event,The following statement contains a magic number: if (cmd.StartsWith(WindowsCmdConsts.MultipleLiveView_Row))              {                  if (cmd.Contains("_"))                  {                      var vals = cmd.Split('_');                      if (vals.Count() > 2)                      {                          int x;                          if (int.TryParse(vals[2]' out x))                              Rows = x;                      }                  }              }
Magic Number,CameraControl.ViewModel,MultipleLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\MultipleLiveViewViewModel.cs,WindowsManager_Event,The following statement contains a magic number: if (cmd.StartsWith(WindowsCmdConsts.MultipleLiveView_Row))              {                  if (cmd.Contains("_"))                  {                      var vals = cmd.Split('_');                      if (vals.Count() > 2)                      {                          int x;                          if (int.TryParse(vals[2]' out x))                              Rows = x;                      }                  }              }
Magic Number,CameraControl.ViewModel,MultipleLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\MultipleLiveViewViewModel.cs,WindowsManager_Event,The following statement contains a magic number: if (cmd.StartsWith(WindowsCmdConsts.MultipleLiveView_Col))              {                  if (cmd.Contains("_"))                  {                      var vals = cmd.Split('_');                      if (vals.Count() > 2)                      {                          int x;                          if (int.TryParse(vals[2]' out x))                              Cols = x;                      }                  }              }
Magic Number,CameraControl.ViewModel,MultipleLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\MultipleLiveViewViewModel.cs,WindowsManager_Event,The following statement contains a magic number: if (cmd.StartsWith(WindowsCmdConsts.MultipleLiveView_Col))              {                  if (cmd.Contains("_"))                  {                      var vals = cmd.Split('_');                      if (vals.Count() > 2)                      {                          int x;                          if (int.TryParse(vals[2]' out x))                              Cols = x;                      }                  }              }
Magic Number,CameraControl.ViewModel,SimpleLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\SimpleLiveViewViewModel.cs,Star,The following statement contains a magic number: do              {                  try                  {                      LiveViewManager.StartLiveView(CameraDevice);                  }                  catch (DeviceException deviceException)                  {                      if (deviceException.ErrorCode == ErrorCodes.ERROR_BUSY ||                          deviceException.ErrorCode == ErrorCodes.MTP_Device_Busy)                      {                          Thread.Sleep(100);                          retry = true;                          retryNum++;                      }                      else                      {                          throw;                      }                  }              } while (retry && retryNum < 35);
Magic Number,CameraControl.ViewModel,SimpleLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\SimpleLiveViewViewModel.cs,Star,The following statement contains a magic number: do              {                  try                  {                      LiveViewManager.StartLiveView(CameraDevice);                  }                  catch (DeviceException deviceException)                  {                      if (deviceException.ErrorCode == ErrorCodes.ERROR_BUSY ||                          deviceException.ErrorCode == ErrorCodes.MTP_Device_Busy)                      {                          Thread.Sleep(100);                          retry = true;                          retryNum++;                      }                      else                      {                          throw;                      }                  }              } while (retry && retryNum < 35);
Magic Number,CameraControl.ViewModel,SimpleLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\SimpleLiveViewViewModel.cs,Stop,The following statement contains a magic number: do              {                  try                  {                      LiveViewManager.StopLiveView(CameraDevice);                  }                  catch (DeviceException deviceException)                  {                      if (deviceException.ErrorCode == ErrorCodes.ERROR_BUSY ||                          deviceException.ErrorCode == ErrorCodes.MTP_Device_Busy)                      {                          Thread.Sleep(500);                          retry = true;                          retryNum++;                      }                      else                      {                          throw;                      }                  }              } while (retry && retryNum < 35);
Magic Number,CameraControl.ViewModel,SimpleLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\SimpleLiveViewViewModel.cs,Stop,The following statement contains a magic number: do              {                  try                  {                      LiveViewManager.StopLiveView(CameraDevice);                  }                  catch (DeviceException deviceException)                  {                      if (deviceException.ErrorCode == ErrorCodes.ERROR_BUSY ||                          deviceException.ErrorCode == ErrorCodes.MTP_Device_Busy)                      {                          Thread.Sleep(500);                          retry = true;                          retryNum++;                      }                      else                      {                          throw;                      }                  }              } while (retry && retryNum < 35);
Magic Number,CameraControl.ViewModel,StatisticsViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\StatisticsViewModel.cs,Refresh,The following statement contains a magic number: Cameras.Add(new NamedValue<int>("Raw"' 10));
Magic Number,CameraControl.ViewModel,StatisticsViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\StatisticsViewModel.cs,Refresh,The following statement contains a magic number: Cameras.Add(new NamedValue<int>("Jpg"' 90));
Magic Number,CameraControl.ViewModel,TimelapseViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\TimelapseViewModel.cs,StartL,The following statement contains a magic number: try              {                    // construct a scheduler factory                  ISchedulerFactory schedFact = new StdSchedulerFactory();                    // get a scheduler' start the schedular before triggers or anything else                  if (sched == null)                  {                      sched = schedFact.GetScheduler().Result;                  }                    // create job                  IJobDetail job = JobBuilder.Create<SimpleJob>()                      .WithIdentity("job1"' "group1")                      .Build();                    // create trigger                    var triggerB = TriggerBuilder.Create()                      .WithIdentity("trigger1"' "group1");                    if (StartIn)                  {                      triggerB =                          triggerB.StartAt(DateBuilder.FutureDate(                              (StartHour * 60 * 60) + (StartMinute * 60) + StartSecond'                              IntervalUnit.Second));                    }                    if (StartAt)                  {                      triggerB =                          triggerB.StartAt(DateBuilder.DateOf(StartHour' StartMinute' StartSecond' StartDate.Day'                              StartDate.Month' StartDate.Year));                  }                  if (StartDaily)                  {                      ISet<DayOfWeek> days = new HashSet<DayOfWeek>();                      if (StartDay0)                          days.Add(DayOfWeek.Sunday);                      if (StartDay1)                          days.Add(DayOfWeek.Monday);                      if (StartDay2)                          days.Add(DayOfWeek.Tuesday);                      if (StartDay3)                          days.Add(DayOfWeek.Wednesday);                      if (StartDay4)                          days.Add(DayOfWeek.Thursday);                      if (StartDay5)                          days.Add(DayOfWeek.Friday);                      if (StartDay6)                          days.Add(DayOfWeek.Saturday);                        triggerB =                          triggerB.WithDailyTimeIntervalSchedule(                              x =>                                  x.WithIntervalInSeconds(TimeBetweenShots)                                      .WithMisfireHandlingInstructionFireAndProceed()                                      .StartingDailyAt(new TimeOfDay(StartHour' StartMinute' StartSecond))                                      .EndingDailyAt(new TimeOfDay(StopHour' StopMinute' StopSecond))                                      .OnDaysOfTheWeek(days)                          );                  }                  else                  {                        if (StopAtPhotos)                      {                          triggerB =                              triggerB.WithSimpleSchedule(                                  x =>                                      x.WithIntervalInSeconds(TimeBetweenShots)                                          .WithRepeatCount(StopCaptureCount)                                          .WithMisfireHandlingInstructionNowWithExistingCount());                      }                      else if (StopIn)                      {                          triggerB =                              triggerB.WithSimpleSchedule(                                  x =>                                      x.WithIntervalInSeconds(TimeBetweenShots)                                          .WithMisfireHandlingInstructionNowWithExistingCount()                                          .WithRepeatCount(((StopHour * 60 * 60) + (StopMinute * 60) + StopSecond) /                                                           TimeBetweenShots));                      }                      else                      {                          triggerB =                              triggerB.WithSimpleSchedule(                                  x =>                                      x.WithIntervalInSeconds(TimeBetweenShots)                                          .WithMisfireHandlingInstructionNowWithExistingCount()                                          .RepeatForever());                      }                        if (StopAt)                      {                          triggerB =                              triggerB.EndAt(DateBuilder.DateOf(StopHour' StopMinute' StopSecond' StopDate.Day'                                  StopDate.Month'                                  StopDate.Year));                      }                  }                    trigger = triggerB.Build();                      // Schedule the job using the job and trigger                   sched.ScheduleJob(job' trigger);                  sched.Start();                    if (_bracketingViewModel != null)                      _bracketingViewModel.Stop();                  _bracketingViewModel = null;                  IsRunning = true;                  _timeLapseStartTime = DateTime.Now;                  _lastCaptureTime = DateTime.Now;                  Log.Debug("Timelapse start");                  _totalCaptures = 0;                  _timer.Interval = 1000;                  _timer.Start();                  _lastTime = DateTime.Now;                  TimeLapseSettings.Started = true;                  ServiceProvider.Settings.Save(ServiceProvider.Settings.DefaultSession);              }              catch (Exception e)              {                  MessageBox.Show("Unable to start timelapse " + e.Message);                  Log.Debug("Unable to start timelapse "' e);              }
Magic Number,CameraControl.ViewModel,TimelapseViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\TimelapseViewModel.cs,StartL,The following statement contains a magic number: try              {                    // construct a scheduler factory                  ISchedulerFactory schedFact = new StdSchedulerFactory();                    // get a scheduler' start the schedular before triggers or anything else                  if (sched == null)                  {                      sched = schedFact.GetScheduler().Result;                  }                    // create job                  IJobDetail job = JobBuilder.Create<SimpleJob>()                      .WithIdentity("job1"' "group1")                      .Build();                    // create trigger                    var triggerB = TriggerBuilder.Create()                      .WithIdentity("trigger1"' "group1");                    if (StartIn)                  {                      triggerB =                          triggerB.StartAt(DateBuilder.FutureDate(                              (StartHour * 60 * 60) + (StartMinute * 60) + StartSecond'                              IntervalUnit.Second));                    }                    if (StartAt)                  {                      triggerB =                          triggerB.StartAt(DateBuilder.DateOf(StartHour' StartMinute' StartSecond' StartDate.Day'                              StartDate.Month' StartDate.Year));                  }                  if (StartDaily)                  {                      ISet<DayOfWeek> days = new HashSet<DayOfWeek>();                      if (StartDay0)                          days.Add(DayOfWeek.Sunday);                      if (StartDay1)                          days.Add(DayOfWeek.Monday);                      if (StartDay2)                          days.Add(DayOfWeek.Tuesday);                      if (StartDay3)                          days.Add(DayOfWeek.Wednesday);                      if (StartDay4)                          days.Add(DayOfWeek.Thursday);                      if (StartDay5)                          days.Add(DayOfWeek.Friday);                      if (StartDay6)                          days.Add(DayOfWeek.Saturday);                        triggerB =                          triggerB.WithDailyTimeIntervalSchedule(                              x =>                                  x.WithIntervalInSeconds(TimeBetweenShots)                                      .WithMisfireHandlingInstructionFireAndProceed()                                      .StartingDailyAt(new TimeOfDay(StartHour' StartMinute' StartSecond))                                      .EndingDailyAt(new TimeOfDay(StopHour' StopMinute' StopSecond))                                      .OnDaysOfTheWeek(days)                          );                  }                  else                  {                        if (StopAtPhotos)                      {                          triggerB =                              triggerB.WithSimpleSchedule(                                  x =>                                      x.WithIntervalInSeconds(TimeBetweenShots)                                          .WithRepeatCount(StopCaptureCount)                                          .WithMisfireHandlingInstructionNowWithExistingCount());                      }                      else if (StopIn)                      {                          triggerB =                              triggerB.WithSimpleSchedule(                                  x =>                                      x.WithIntervalInSeconds(TimeBetweenShots)                                          .WithMisfireHandlingInstructionNowWithExistingCount()                                          .WithRepeatCount(((StopHour * 60 * 60) + (StopMinute * 60) + StopSecond) /                                                           TimeBetweenShots));                      }                      else                      {                          triggerB =                              triggerB.WithSimpleSchedule(                                  x =>                                      x.WithIntervalInSeconds(TimeBetweenShots)                                          .WithMisfireHandlingInstructionNowWithExistingCount()                                          .RepeatForever());                      }                        if (StopAt)                      {                          triggerB =                              triggerB.EndAt(DateBuilder.DateOf(StopHour' StopMinute' StopSecond' StopDate.Day'                                  StopDate.Month'                                  StopDate.Year));                      }                  }                    trigger = triggerB.Build();                      // Schedule the job using the job and trigger                   sched.ScheduleJob(job' trigger);                  sched.Start();                    if (_bracketingViewModel != null)                      _bracketingViewModel.Stop();                  _bracketingViewModel = null;                  IsRunning = true;                  _timeLapseStartTime = DateTime.Now;                  _lastCaptureTime = DateTime.Now;                  Log.Debug("Timelapse start");                  _totalCaptures = 0;                  _timer.Interval = 1000;                  _timer.Start();                  _lastTime = DateTime.Now;                  TimeLapseSettings.Started = true;                  ServiceProvider.Settings.Save(ServiceProvider.Settings.DefaultSession);              }              catch (Exception e)              {                  MessageBox.Show("Unable to start timelapse " + e.Message);                  Log.Debug("Unable to start timelapse "' e);              }
Magic Number,CameraControl.ViewModel,TimelapseViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\TimelapseViewModel.cs,StartL,The following statement contains a magic number: try              {                    // construct a scheduler factory                  ISchedulerFactory schedFact = new StdSchedulerFactory();                    // get a scheduler' start the schedular before triggers or anything else                  if (sched == null)                  {                      sched = schedFact.GetScheduler().Result;                  }                    // create job                  IJobDetail job = JobBuilder.Create<SimpleJob>()                      .WithIdentity("job1"' "group1")                      .Build();                    // create trigger                    var triggerB = TriggerBuilder.Create()                      .WithIdentity("trigger1"' "group1");                    if (StartIn)                  {                      triggerB =                          triggerB.StartAt(DateBuilder.FutureDate(                              (StartHour * 60 * 60) + (StartMinute * 60) + StartSecond'                              IntervalUnit.Second));                    }                    if (StartAt)                  {                      triggerB =                          triggerB.StartAt(DateBuilder.DateOf(StartHour' StartMinute' StartSecond' StartDate.Day'                              StartDate.Month' StartDate.Year));                  }                  if (StartDaily)                  {                      ISet<DayOfWeek> days = new HashSet<DayOfWeek>();                      if (StartDay0)                          days.Add(DayOfWeek.Sunday);                      if (StartDay1)                          days.Add(DayOfWeek.Monday);                      if (StartDay2)                          days.Add(DayOfWeek.Tuesday);                      if (StartDay3)                          days.Add(DayOfWeek.Wednesday);                      if (StartDay4)                          days.Add(DayOfWeek.Thursday);                      if (StartDay5)                          days.Add(DayOfWeek.Friday);                      if (StartDay6)                          days.Add(DayOfWeek.Saturday);                        triggerB =                          triggerB.WithDailyTimeIntervalSchedule(                              x =>                                  x.WithIntervalInSeconds(TimeBetweenShots)                                      .WithMisfireHandlingInstructionFireAndProceed()                                      .StartingDailyAt(new TimeOfDay(StartHour' StartMinute' StartSecond))                                      .EndingDailyAt(new TimeOfDay(StopHour' StopMinute' StopSecond))                                      .OnDaysOfTheWeek(days)                          );                  }                  else                  {                        if (StopAtPhotos)                      {                          triggerB =                              triggerB.WithSimpleSchedule(                                  x =>                                      x.WithIntervalInSeconds(TimeBetweenShots)                                          .WithRepeatCount(StopCaptureCount)                                          .WithMisfireHandlingInstructionNowWithExistingCount());                      }                      else if (StopIn)                      {                          triggerB =                              triggerB.WithSimpleSchedule(                                  x =>                                      x.WithIntervalInSeconds(TimeBetweenShots)                                          .WithMisfireHandlingInstructionNowWithExistingCount()                                          .WithRepeatCount(((StopHour * 60 * 60) + (StopMinute * 60) + StopSecond) /                                                           TimeBetweenShots));                      }                      else                      {                          triggerB =                              triggerB.WithSimpleSchedule(                                  x =>                                      x.WithIntervalInSeconds(TimeBetweenShots)                                          .WithMisfireHandlingInstructionNowWithExistingCount()                                          .RepeatForever());                      }                        if (StopAt)                      {                          triggerB =                              triggerB.EndAt(DateBuilder.DateOf(StopHour' StopMinute' StopSecond' StopDate.Day'                                  StopDate.Month'                                  StopDate.Year));                      }                  }                    trigger = triggerB.Build();                      // Schedule the job using the job and trigger                   sched.ScheduleJob(job' trigger);                  sched.Start();                    if (_bracketingViewModel != null)                      _bracketingViewModel.Stop();                  _bracketingViewModel = null;                  IsRunning = true;                  _timeLapseStartTime = DateTime.Now;                  _lastCaptureTime = DateTime.Now;                  Log.Debug("Timelapse start");                  _totalCaptures = 0;                  _timer.Interval = 1000;                  _timer.Start();                  _lastTime = DateTime.Now;                  TimeLapseSettings.Started = true;                  ServiceProvider.Settings.Save(ServiceProvider.Settings.DefaultSession);              }              catch (Exception e)              {                  MessageBox.Show("Unable to start timelapse " + e.Message);                  Log.Debug("Unable to start timelapse "' e);              }
Magic Number,CameraControl.ViewModel,TimelapseViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\TimelapseViewModel.cs,StartL,The following statement contains a magic number: try              {                    // construct a scheduler factory                  ISchedulerFactory schedFact = new StdSchedulerFactory();                    // get a scheduler' start the schedular before triggers or anything else                  if (sched == null)                  {                      sched = schedFact.GetScheduler().Result;                  }                    // create job                  IJobDetail job = JobBuilder.Create<SimpleJob>()                      .WithIdentity("job1"' "group1")                      .Build();                    // create trigger                    var triggerB = TriggerBuilder.Create()                      .WithIdentity("trigger1"' "group1");                    if (StartIn)                  {                      triggerB =                          triggerB.StartAt(DateBuilder.FutureDate(                              (StartHour * 60 * 60) + (StartMinute * 60) + StartSecond'                              IntervalUnit.Second));                    }                    if (StartAt)                  {                      triggerB =                          triggerB.StartAt(DateBuilder.DateOf(StartHour' StartMinute' StartSecond' StartDate.Day'                              StartDate.Month' StartDate.Year));                  }                  if (StartDaily)                  {                      ISet<DayOfWeek> days = new HashSet<DayOfWeek>();                      if (StartDay0)                          days.Add(DayOfWeek.Sunday);                      if (StartDay1)                          days.Add(DayOfWeek.Monday);                      if (StartDay2)                          days.Add(DayOfWeek.Tuesday);                      if (StartDay3)                          days.Add(DayOfWeek.Wednesday);                      if (StartDay4)                          days.Add(DayOfWeek.Thursday);                      if (StartDay5)                          days.Add(DayOfWeek.Friday);                      if (StartDay6)                          days.Add(DayOfWeek.Saturday);                        triggerB =                          triggerB.WithDailyTimeIntervalSchedule(                              x =>                                  x.WithIntervalInSeconds(TimeBetweenShots)                                      .WithMisfireHandlingInstructionFireAndProceed()                                      .StartingDailyAt(new TimeOfDay(StartHour' StartMinute' StartSecond))                                      .EndingDailyAt(new TimeOfDay(StopHour' StopMinute' StopSecond))                                      .OnDaysOfTheWeek(days)                          );                  }                  else                  {                        if (StopAtPhotos)                      {                          triggerB =                              triggerB.WithSimpleSchedule(                                  x =>                                      x.WithIntervalInSeconds(TimeBetweenShots)                                          .WithRepeatCount(StopCaptureCount)                                          .WithMisfireHandlingInstructionNowWithExistingCount());                      }                      else if (StopIn)                      {                          triggerB =                              triggerB.WithSimpleSchedule(                                  x =>                                      x.WithIntervalInSeconds(TimeBetweenShots)                                          .WithMisfireHandlingInstructionNowWithExistingCount()                                          .WithRepeatCount(((StopHour * 60 * 60) + (StopMinute * 60) + StopSecond) /                                                           TimeBetweenShots));                      }                      else                      {                          triggerB =                              triggerB.WithSimpleSchedule(                                  x =>                                      x.WithIntervalInSeconds(TimeBetweenShots)                                          .WithMisfireHandlingInstructionNowWithExistingCount()                                          .RepeatForever());                      }                        if (StopAt)                      {                          triggerB =                              triggerB.EndAt(DateBuilder.DateOf(StopHour' StopMinute' StopSecond' StopDate.Day'                                  StopDate.Month'                                  StopDate.Year));                      }                  }                    trigger = triggerB.Build();                      // Schedule the job using the job and trigger                   sched.ScheduleJob(job' trigger);                  sched.Start();                    if (_bracketingViewModel != null)                      _bracketingViewModel.Stop();                  _bracketingViewModel = null;                  IsRunning = true;                  _timeLapseStartTime = DateTime.Now;                  _lastCaptureTime = DateTime.Now;                  Log.Debug("Timelapse start");                  _totalCaptures = 0;                  _timer.Interval = 1000;                  _timer.Start();                  _lastTime = DateTime.Now;                  TimeLapseSettings.Started = true;                  ServiceProvider.Settings.Save(ServiceProvider.Settings.DefaultSession);              }              catch (Exception e)              {                  MessageBox.Show("Unable to start timelapse " + e.Message);                  Log.Debug("Unable to start timelapse "' e);              }
Magic Number,CameraControl.ViewModel,TimelapseViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\TimelapseViewModel.cs,StartL,The following statement contains a magic number: try              {                    // construct a scheduler factory                  ISchedulerFactory schedFact = new StdSchedulerFactory();                    // get a scheduler' start the schedular before triggers or anything else                  if (sched == null)                  {                      sched = schedFact.GetScheduler().Result;                  }                    // create job                  IJobDetail job = JobBuilder.Create<SimpleJob>()                      .WithIdentity("job1"' "group1")                      .Build();                    // create trigger                    var triggerB = TriggerBuilder.Create()                      .WithIdentity("trigger1"' "group1");                    if (StartIn)                  {                      triggerB =                          triggerB.StartAt(DateBuilder.FutureDate(                              (StartHour * 60 * 60) + (StartMinute * 60) + StartSecond'                              IntervalUnit.Second));                    }                    if (StartAt)                  {                      triggerB =                          triggerB.StartAt(DateBuilder.DateOf(StartHour' StartMinute' StartSecond' StartDate.Day'                              StartDate.Month' StartDate.Year));                  }                  if (StartDaily)                  {                      ISet<DayOfWeek> days = new HashSet<DayOfWeek>();                      if (StartDay0)                          days.Add(DayOfWeek.Sunday);                      if (StartDay1)                          days.Add(DayOfWeek.Monday);                      if (StartDay2)                          days.Add(DayOfWeek.Tuesday);                      if (StartDay3)                          days.Add(DayOfWeek.Wednesday);                      if (StartDay4)                          days.Add(DayOfWeek.Thursday);                      if (StartDay5)                          days.Add(DayOfWeek.Friday);                      if (StartDay6)                          days.Add(DayOfWeek.Saturday);                        triggerB =                          triggerB.WithDailyTimeIntervalSchedule(                              x =>                                  x.WithIntervalInSeconds(TimeBetweenShots)                                      .WithMisfireHandlingInstructionFireAndProceed()                                      .StartingDailyAt(new TimeOfDay(StartHour' StartMinute' StartSecond))                                      .EndingDailyAt(new TimeOfDay(StopHour' StopMinute' StopSecond))                                      .OnDaysOfTheWeek(days)                          );                  }                  else                  {                        if (StopAtPhotos)                      {                          triggerB =                              triggerB.WithSimpleSchedule(                                  x =>                                      x.WithIntervalInSeconds(TimeBetweenShots)                                          .WithRepeatCount(StopCaptureCount)                                          .WithMisfireHandlingInstructionNowWithExistingCount());                      }                      else if (StopIn)                      {                          triggerB =                              triggerB.WithSimpleSchedule(                                  x =>                                      x.WithIntervalInSeconds(TimeBetweenShots)                                          .WithMisfireHandlingInstructionNowWithExistingCount()                                          .WithRepeatCount(((StopHour * 60 * 60) + (StopMinute * 60) + StopSecond) /                                                           TimeBetweenShots));                      }                      else                      {                          triggerB =                              triggerB.WithSimpleSchedule(                                  x =>                                      x.WithIntervalInSeconds(TimeBetweenShots)                                          .WithMisfireHandlingInstructionNowWithExistingCount()                                          .RepeatForever());                      }                        if (StopAt)                      {                          triggerB =                              triggerB.EndAt(DateBuilder.DateOf(StopHour' StopMinute' StopSecond' StopDate.Day'                                  StopDate.Month'                                  StopDate.Year));                      }                  }                    trigger = triggerB.Build();                      // Schedule the job using the job and trigger                   sched.ScheduleJob(job' trigger);                  sched.Start();                    if (_bracketingViewModel != null)                      _bracketingViewModel.Stop();                  _bracketingViewModel = null;                  IsRunning = true;                  _timeLapseStartTime = DateTime.Now;                  _lastCaptureTime = DateTime.Now;                  Log.Debug("Timelapse start");                  _totalCaptures = 0;                  _timer.Interval = 1000;                  _timer.Start();                  _lastTime = DateTime.Now;                  TimeLapseSettings.Started = true;                  ServiceProvider.Settings.Save(ServiceProvider.Settings.DefaultSession);              }              catch (Exception e)              {                  MessageBox.Show("Unable to start timelapse " + e.Message);                  Log.Debug("Unable to start timelapse "' e);              }
Magic Number,CameraControl.ViewModel,TimelapseViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\TimelapseViewModel.cs,StartL,The following statement contains a magic number: try              {                    // construct a scheduler factory                  ISchedulerFactory schedFact = new StdSchedulerFactory();                    // get a scheduler' start the schedular before triggers or anything else                  if (sched == null)                  {                      sched = schedFact.GetScheduler().Result;                  }                    // create job                  IJobDetail job = JobBuilder.Create<SimpleJob>()                      .WithIdentity("job1"' "group1")                      .Build();                    // create trigger                    var triggerB = TriggerBuilder.Create()                      .WithIdentity("trigger1"' "group1");                    if (StartIn)                  {                      triggerB =                          triggerB.StartAt(DateBuilder.FutureDate(                              (StartHour * 60 * 60) + (StartMinute * 60) + StartSecond'                              IntervalUnit.Second));                    }                    if (StartAt)                  {                      triggerB =                          triggerB.StartAt(DateBuilder.DateOf(StartHour' StartMinute' StartSecond' StartDate.Day'                              StartDate.Month' StartDate.Year));                  }                  if (StartDaily)                  {                      ISet<DayOfWeek> days = new HashSet<DayOfWeek>();                      if (StartDay0)                          days.Add(DayOfWeek.Sunday);                      if (StartDay1)                          days.Add(DayOfWeek.Monday);                      if (StartDay2)                          days.Add(DayOfWeek.Tuesday);                      if (StartDay3)                          days.Add(DayOfWeek.Wednesday);                      if (StartDay4)                          days.Add(DayOfWeek.Thursday);                      if (StartDay5)                          days.Add(DayOfWeek.Friday);                      if (StartDay6)                          days.Add(DayOfWeek.Saturday);                        triggerB =                          triggerB.WithDailyTimeIntervalSchedule(                              x =>                                  x.WithIntervalInSeconds(TimeBetweenShots)                                      .WithMisfireHandlingInstructionFireAndProceed()                                      .StartingDailyAt(new TimeOfDay(StartHour' StartMinute' StartSecond))                                      .EndingDailyAt(new TimeOfDay(StopHour' StopMinute' StopSecond))                                      .OnDaysOfTheWeek(days)                          );                  }                  else                  {                        if (StopAtPhotos)                      {                          triggerB =                              triggerB.WithSimpleSchedule(                                  x =>                                      x.WithIntervalInSeconds(TimeBetweenShots)                                          .WithRepeatCount(StopCaptureCount)                                          .WithMisfireHandlingInstructionNowWithExistingCount());                      }                      else if (StopIn)                      {                          triggerB =                              triggerB.WithSimpleSchedule(                                  x =>                                      x.WithIntervalInSeconds(TimeBetweenShots)                                          .WithMisfireHandlingInstructionNowWithExistingCount()                                          .WithRepeatCount(((StopHour * 60 * 60) + (StopMinute * 60) + StopSecond) /                                                           TimeBetweenShots));                      }                      else                      {                          triggerB =                              triggerB.WithSimpleSchedule(                                  x =>                                      x.WithIntervalInSeconds(TimeBetweenShots)                                          .WithMisfireHandlingInstructionNowWithExistingCount()                                          .RepeatForever());                      }                        if (StopAt)                      {                          triggerB =                              triggerB.EndAt(DateBuilder.DateOf(StopHour' StopMinute' StopSecond' StopDate.Day'                                  StopDate.Month'                                  StopDate.Year));                      }                  }                    trigger = triggerB.Build();                      // Schedule the job using the job and trigger                   sched.ScheduleJob(job' trigger);                  sched.Start();                    if (_bracketingViewModel != null)                      _bracketingViewModel.Stop();                  _bracketingViewModel = null;                  IsRunning = true;                  _timeLapseStartTime = DateTime.Now;                  _lastCaptureTime = DateTime.Now;                  Log.Debug("Timelapse start");                  _totalCaptures = 0;                  _timer.Interval = 1000;                  _timer.Start();                  _lastTime = DateTime.Now;                  TimeLapseSettings.Started = true;                  ServiceProvider.Settings.Save(ServiceProvider.Settings.DefaultSession);              }              catch (Exception e)              {                  MessageBox.Show("Unable to start timelapse " + e.Message);                  Log.Debug("Unable to start timelapse "' e);              }
Magic Number,CameraControl.ViewModel,TimelapseViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\TimelapseViewModel.cs,StartL,The following statement contains a magic number: try              {                    // construct a scheduler factory                  ISchedulerFactory schedFact = new StdSchedulerFactory();                    // get a scheduler' start the schedular before triggers or anything else                  if (sched == null)                  {                      sched = schedFact.GetScheduler().Result;                  }                    // create job                  IJobDetail job = JobBuilder.Create<SimpleJob>()                      .WithIdentity("job1"' "group1")                      .Build();                    // create trigger                    var triggerB = TriggerBuilder.Create()                      .WithIdentity("trigger1"' "group1");                    if (StartIn)                  {                      triggerB =                          triggerB.StartAt(DateBuilder.FutureDate(                              (StartHour * 60 * 60) + (StartMinute * 60) + StartSecond'                              IntervalUnit.Second));                    }                    if (StartAt)                  {                      triggerB =                          triggerB.StartAt(DateBuilder.DateOf(StartHour' StartMinute' StartSecond' StartDate.Day'                              StartDate.Month' StartDate.Year));                  }                  if (StartDaily)                  {                      ISet<DayOfWeek> days = new HashSet<DayOfWeek>();                      if (StartDay0)                          days.Add(DayOfWeek.Sunday);                      if (StartDay1)                          days.Add(DayOfWeek.Monday);                      if (StartDay2)                          days.Add(DayOfWeek.Tuesday);                      if (StartDay3)                          days.Add(DayOfWeek.Wednesday);                      if (StartDay4)                          days.Add(DayOfWeek.Thursday);                      if (StartDay5)                          days.Add(DayOfWeek.Friday);                      if (StartDay6)                          days.Add(DayOfWeek.Saturday);                        triggerB =                          triggerB.WithDailyTimeIntervalSchedule(                              x =>                                  x.WithIntervalInSeconds(TimeBetweenShots)                                      .WithMisfireHandlingInstructionFireAndProceed()                                      .StartingDailyAt(new TimeOfDay(StartHour' StartMinute' StartSecond))                                      .EndingDailyAt(new TimeOfDay(StopHour' StopMinute' StopSecond))                                      .OnDaysOfTheWeek(days)                          );                  }                  else                  {                        if (StopAtPhotos)                      {                          triggerB =                              triggerB.WithSimpleSchedule(                                  x =>                                      x.WithIntervalInSeconds(TimeBetweenShots)                                          .WithRepeatCount(StopCaptureCount)                                          .WithMisfireHandlingInstructionNowWithExistingCount());                      }                      else if (StopIn)                      {                          triggerB =                              triggerB.WithSimpleSchedule(                                  x =>                                      x.WithIntervalInSeconds(TimeBetweenShots)                                          .WithMisfireHandlingInstructionNowWithExistingCount()                                          .WithRepeatCount(((StopHour * 60 * 60) + (StopMinute * 60) + StopSecond) /                                                           TimeBetweenShots));                      }                      else                      {                          triggerB =                              triggerB.WithSimpleSchedule(                                  x =>                                      x.WithIntervalInSeconds(TimeBetweenShots)                                          .WithMisfireHandlingInstructionNowWithExistingCount()                                          .RepeatForever());                      }                        if (StopAt)                      {                          triggerB =                              triggerB.EndAt(DateBuilder.DateOf(StopHour' StopMinute' StopSecond' StopDate.Day'                                  StopDate.Month'                                  StopDate.Year));                      }                  }                    trigger = triggerB.Build();                      // Schedule the job using the job and trigger                   sched.ScheduleJob(job' trigger);                  sched.Start();                    if (_bracketingViewModel != null)                      _bracketingViewModel.Stop();                  _bracketingViewModel = null;                  IsRunning = true;                  _timeLapseStartTime = DateTime.Now;                  _lastCaptureTime = DateTime.Now;                  Log.Debug("Timelapse start");                  _totalCaptures = 0;                  _timer.Interval = 1000;                  _timer.Start();                  _lastTime = DateTime.Now;                  TimeLapseSettings.Started = true;                  ServiceProvider.Settings.Save(ServiceProvider.Settings.DefaultSession);              }              catch (Exception e)              {                  MessageBox.Show("Unable to start timelapse " + e.Message);                  Log.Debug("Unable to start timelapse "' e);              }
Magic Number,CameraControl.windows,BulbWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,BulbWnd,The following statement contains a magic number: CaptureTime = 60;
Magic Number,CameraControl.windows,BulbWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,BulbWnd,The following statement contains a magic number: PhdWait = 5;
Magic Number,CameraControl.windows,BulbWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,ExecuteCommand,The following statement contains a magic number: if (cmd.StartsWith("Bulb_"))              {                  var vals = cmd.Split('_');                  if (vals.Count() > 2)                  {                      switch (vals[1])                      {                          case "CaptureTime":                              CaptureTime = GetValue(vals' CaptureTime);                               break;                          case "NumOfPhotos":                              NumOfPhotos = GetValue(vals' NumOfPhotos);                              break;                          case "WaitTime":                              WaitTime = GetValue(vals' WaitTime);                              break;                          case "PhdWait":                              PhdWait = GetValue(vals' PhdWait);                              break;                          case "AutomaticGuiding":                              AutomaticGuiding = GetValue(vals' 0) == 1;                              break;                          case "PhdType":                              PhdType = GetValue(vals' PhdType);                              break;                      }                  }              }
Magic Number,CameraControl.windows,BulbWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,GetValue,The following statement contains a magic number: if (int.TryParse(cmd[2]' out x))                  return x;
Magic Number,CameraControl.windows,BulbWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,PhdGuiding,The following statement contains a magic number: try              {                  Event = "PhdGuiding";                  TcpClient socket = new TcpClient("localhost"' 4300);                  Thread.Sleep(200);                  switch (movetype)                  {                      case 1:                          SendReceiveTest2(socket' 3);                          break;                      case 2:                          SendReceiveTest2(socket' 4);                          break;                      case 3:                          SendReceiveTest2(socket' 5);                          break;                      case 4:                          SendReceiveTest2(socket' 12);                          break;                      case 5:                          SendReceiveTest2(socket' 13);                          break;                  }                  socket.Close();                  CountDown = PhdWait;                  for (var i = 1; i < PhdWait + 1; i++)                  {                      CountDown--;                      Thread.Sleep(1000);                  }                  Event = "";              }              catch (Exception exception)              {                  StaticHelper.Instance.SystemMessage = "PHDGuiding error " + exception.Message;                  Log.Error("PHDGuiding error"' exception);              }
Magic Number,CameraControl.windows,BulbWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,PhdGuiding,The following statement contains a magic number: try              {                  Event = "PhdGuiding";                  TcpClient socket = new TcpClient("localhost"' 4300);                  Thread.Sleep(200);                  switch (movetype)                  {                      case 1:                          SendReceiveTest2(socket' 3);                          break;                      case 2:                          SendReceiveTest2(socket' 4);                          break;                      case 3:                          SendReceiveTest2(socket' 5);                          break;                      case 4:                          SendReceiveTest2(socket' 12);                          break;                      case 5:                          SendReceiveTest2(socket' 13);                          break;                  }                  socket.Close();                  CountDown = PhdWait;                  for (var i = 1; i < PhdWait + 1; i++)                  {                      CountDown--;                      Thread.Sleep(1000);                  }                  Event = "";              }              catch (Exception exception)              {                  StaticHelper.Instance.SystemMessage = "PHDGuiding error " + exception.Message;                  Log.Error("PHDGuiding error"' exception);              }
Magic Number,CameraControl.windows,BulbWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,PhdGuiding,The following statement contains a magic number: try              {                  Event = "PhdGuiding";                  TcpClient socket = new TcpClient("localhost"' 4300);                  Thread.Sleep(200);                  switch (movetype)                  {                      case 1:                          SendReceiveTest2(socket' 3);                          break;                      case 2:                          SendReceiveTest2(socket' 4);                          break;                      case 3:                          SendReceiveTest2(socket' 5);                          break;                      case 4:                          SendReceiveTest2(socket' 12);                          break;                      case 5:                          SendReceiveTest2(socket' 13);                          break;                  }                  socket.Close();                  CountDown = PhdWait;                  for (var i = 1; i < PhdWait + 1; i++)                  {                      CountDown--;                      Thread.Sleep(1000);                  }                  Event = "";              }              catch (Exception exception)              {                  StaticHelper.Instance.SystemMessage = "PHDGuiding error " + exception.Message;                  Log.Error("PHDGuiding error"' exception);              }
Magic Number,CameraControl.windows,BulbWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,PhdGuiding,The following statement contains a magic number: try              {                  Event = "PhdGuiding";                  TcpClient socket = new TcpClient("localhost"' 4300);                  Thread.Sleep(200);                  switch (movetype)                  {                      case 1:                          SendReceiveTest2(socket' 3);                          break;                      case 2:                          SendReceiveTest2(socket' 4);                          break;                      case 3:                          SendReceiveTest2(socket' 5);                          break;                      case 4:                          SendReceiveTest2(socket' 12);                          break;                      case 5:                          SendReceiveTest2(socket' 13);                          break;                  }                  socket.Close();                  CountDown = PhdWait;                  for (var i = 1; i < PhdWait + 1; i++)                  {                      CountDown--;                      Thread.Sleep(1000);                  }                  Event = "";              }              catch (Exception exception)              {                  StaticHelper.Instance.SystemMessage = "PHDGuiding error " + exception.Message;                  Log.Error("PHDGuiding error"' exception);              }
Magic Number,CameraControl.windows,BulbWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,PhdGuiding,The following statement contains a magic number: try              {                  Event = "PhdGuiding";                  TcpClient socket = new TcpClient("localhost"' 4300);                  Thread.Sleep(200);                  switch (movetype)                  {                      case 1:                          SendReceiveTest2(socket' 3);                          break;                      case 2:                          SendReceiveTest2(socket' 4);                          break;                      case 3:                          SendReceiveTest2(socket' 5);                          break;                      case 4:                          SendReceiveTest2(socket' 12);                          break;                      case 5:                          SendReceiveTest2(socket' 13);                          break;                  }                  socket.Close();                  CountDown = PhdWait;                  for (var i = 1; i < PhdWait + 1; i++)                  {                      CountDown--;                      Thread.Sleep(1000);                  }                  Event = "";              }              catch (Exception exception)              {                  StaticHelper.Instance.SystemMessage = "PHDGuiding error " + exception.Message;                  Log.Error("PHDGuiding error"' exception);              }
Magic Number,CameraControl.windows,BulbWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,PhdGuiding,The following statement contains a magic number: try              {                  Event = "PhdGuiding";                  TcpClient socket = new TcpClient("localhost"' 4300);                  Thread.Sleep(200);                  switch (movetype)                  {                      case 1:                          SendReceiveTest2(socket' 3);                          break;                      case 2:                          SendReceiveTest2(socket' 4);                          break;                      case 3:                          SendReceiveTest2(socket' 5);                          break;                      case 4:                          SendReceiveTest2(socket' 12);                          break;                      case 5:                          SendReceiveTest2(socket' 13);                          break;                  }                  socket.Close();                  CountDown = PhdWait;                  for (var i = 1; i < PhdWait + 1; i++)                  {                      CountDown--;                      Thread.Sleep(1000);                  }                  Event = "";              }              catch (Exception exception)              {                  StaticHelper.Instance.SystemMessage = "PHDGuiding error " + exception.Message;                  Log.Error("PHDGuiding error"' exception);              }
Magic Number,CameraControl.windows,BulbWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,PhdGuiding,The following statement contains a magic number: try              {                  Event = "PhdGuiding";                  TcpClient socket = new TcpClient("localhost"' 4300);                  Thread.Sleep(200);                  switch (movetype)                  {                      case 1:                          SendReceiveTest2(socket' 3);                          break;                      case 2:                          SendReceiveTest2(socket' 4);                          break;                      case 3:                          SendReceiveTest2(socket' 5);                          break;                      case 4:                          SendReceiveTest2(socket' 12);                          break;                      case 5:                          SendReceiveTest2(socket' 13);                          break;                  }                  socket.Close();                  CountDown = PhdWait;                  for (var i = 1; i < PhdWait + 1; i++)                  {                      CountDown--;                      Thread.Sleep(1000);                  }                  Event = "";              }              catch (Exception exception)              {                  StaticHelper.Instance.SystemMessage = "PHDGuiding error " + exception.Message;                  Log.Error("PHDGuiding error"' exception);              }
Magic Number,CameraControl.windows,BulbWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,PhdGuiding,The following statement contains a magic number: try              {                  Event = "PhdGuiding";                  TcpClient socket = new TcpClient("localhost"' 4300);                  Thread.Sleep(200);                  switch (movetype)                  {                      case 1:                          SendReceiveTest2(socket' 3);                          break;                      case 2:                          SendReceiveTest2(socket' 4);                          break;                      case 3:                          SendReceiveTest2(socket' 5);                          break;                      case 4:                          SendReceiveTest2(socket' 12);                          break;                      case 5:                          SendReceiveTest2(socket' 13);                          break;                  }                  socket.Close();                  CountDown = PhdWait;                  for (var i = 1; i < PhdWait + 1; i++)                  {                      CountDown--;                      Thread.Sleep(1000);                  }                  Event = "";              }              catch (Exception exception)              {                  StaticHelper.Instance.SystemMessage = "PHDGuiding error " + exception.Message;                  Log.Error("PHDGuiding error"' exception);              }
Magic Number,CameraControl.windows,BulbWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,PhdGuiding,The following statement contains a magic number: try              {                  Event = "PhdGuiding";                  TcpClient socket = new TcpClient("localhost"' 4300);                  Thread.Sleep(200);                  switch (movetype)                  {                      case 1:                          SendReceiveTest2(socket' 3);                          break;                      case 2:                          SendReceiveTest2(socket' 4);                          break;                      case 3:                          SendReceiveTest2(socket' 5);                          break;                      case 4:                          SendReceiveTest2(socket' 12);                          break;                      case 5:                          SendReceiveTest2(socket' 13);                          break;                  }                  socket.Close();                  CountDown = PhdWait;                  for (var i = 1; i < PhdWait + 1; i++)                  {                      CountDown--;                      Thread.Sleep(1000);                  }                  Event = "";              }              catch (Exception exception)              {                  StaticHelper.Instance.SystemMessage = "PHDGuiding error " + exception.Message;                  Log.Error("PHDGuiding error"' exception);              }
Magic Number,CameraControl.windows,BulbWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,PhdGuiding,The following statement contains a magic number: try              {                  Event = "PhdGuiding";                  TcpClient socket = new TcpClient("localhost"' 4300);                  Thread.Sleep(200);                  switch (movetype)                  {                      case 1:                          SendReceiveTest2(socket' 3);                          break;                      case 2:                          SendReceiveTest2(socket' 4);                          break;                      case 3:                          SendReceiveTest2(socket' 5);                          break;                      case 4:                          SendReceiveTest2(socket' 12);                          break;                      case 5:                          SendReceiveTest2(socket' 13);                          break;                  }                  socket.Close();                  CountDown = PhdWait;                  for (var i = 1; i < PhdWait + 1; i++)                  {                      CountDown--;                      Thread.Sleep(1000);                  }                  Event = "";              }              catch (Exception exception)              {                  StaticHelper.Instance.SystemMessage = "PHDGuiding error " + exception.Message;                  Log.Error("PHDGuiding error"' exception);              }
Magic Number,CameraControl.windows,BulbWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,PhdGuiding,The following statement contains a magic number: try              {                  Event = "PhdGuiding";                  TcpClient socket = new TcpClient("localhost"' 4300);                  Thread.Sleep(200);                  switch (movetype)                  {                      case 1:                          SendReceiveTest2(socket' 3);                          break;                      case 2:                          SendReceiveTest2(socket' 4);                          break;                      case 3:                          SendReceiveTest2(socket' 5);                          break;                      case 4:                          SendReceiveTest2(socket' 12);                          break;                      case 5:                          SendReceiveTest2(socket' 13);                          break;                  }                  socket.Close();                  CountDown = PhdWait;                  for (var i = 1; i < PhdWait + 1; i++)                  {                      CountDown--;                      Thread.Sleep(1000);                  }                  Event = "";              }              catch (Exception exception)              {                  StaticHelper.Instance.SystemMessage = "PHDGuiding error " + exception.Message;                  Log.Error("PHDGuiding error"' exception);              }
Magic Number,CameraControl.windows,BulbWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,PhdGuiding,The following statement contains a magic number: try              {                  Event = "PhdGuiding";                  TcpClient socket = new TcpClient("localhost"' 4300);                  Thread.Sleep(200);                  switch (movetype)                  {                      case 1:                          SendReceiveTest2(socket' 3);                          break;                      case 2:                          SendReceiveTest2(socket' 4);                          break;                      case 3:                          SendReceiveTest2(socket' 5);                          break;                      case 4:                          SendReceiveTest2(socket' 12);                          break;                      case 5:                          SendReceiveTest2(socket' 13);                          break;                  }                  socket.Close();                  CountDown = PhdWait;                  for (var i = 1; i < PhdWait + 1; i++)                  {                      CountDown--;                      Thread.Sleep(1000);                  }                  Event = "";              }              catch (Exception exception)              {                  StaticHelper.Instance.SystemMessage = "PHDGuiding error " + exception.Message;                  Log.Error("PHDGuiding error"' exception);              }
Magic Number,CameraControl.windows,BulbWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,SendReceiveTest2,The following statement contains a magic number: byte[] bytes = new byte[256];
Magic Number,CameraControl.windows,CameraPropertyWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\CameraPropertyWnd.xaml.cs,btn_identify_Click,The following statement contains a magic number: Thread thread = new Thread(new ThreadStart(delegate                                                           {                                                               for (int i = 0; i < 5; i++)                                                               {                                                                   _cameraDevice.LockCamera();                                                                   Thread.Sleep(800);                                                                   _cameraDevice.UnLockCamera();                                                                   Thread.Sleep(800);                                                               }                                                           }));
Magic Number,CameraControl.windows,CameraPropertyWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\CameraPropertyWnd.xaml.cs,btn_identify_Click,The following statement contains a magic number: Thread thread = new Thread(new ThreadStart(delegate                                                           {                                                               for (int i = 0; i < 5; i++)                                                               {                                                                   _cameraDevice.LockCamera();                                                                   Thread.Sleep(800);                                                                   _cameraDevice.UnLockCamera();                                                                   Thread.Sleep(800);                                                               }                                                           }));
Magic Number,CameraControl.windows,CameraPropertyWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\CameraPropertyWnd.xaml.cs,btn_identify_Click,The following statement contains a magic number: Thread thread = new Thread(new ThreadStart(delegate                                                           {                                                               for (int i = 0; i < 5; i++)                                                               {                                                                   _cameraDevice.LockCamera();                                                                   Thread.Sleep(800);                                                                   _cameraDevice.UnLockCamera();                                                                   Thread.Sleep(800);                                                               }                                                           }));
Magic Number,CameraControl.windows,DownloadPhotosWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\DownloadPhotosWnd.xaml.cs,PopulateImageList,The following statement contains a magic number: foreach (ICameraDevice cameraDevice in ServiceProvider.DeviceManager.ConnectedDevices)              {                  counter++;                  dlg.Progress = counter;                  CameraProperty property = cameraDevice.LoadProperties();                  cameraDevice.DisplayName = property.DeviceName;                  dlg.Label = cameraDevice.DisplayName;                  dlg.Label2 = "";                    try                  {                      var images = cameraDevice.GetObjects(null' ServiceProvider.Settings.LoadThumbsDownload);                      if (images.Count > 0)                      {                          int index = 0;                          foreach (DeviceObject deviceObject in images)                          {                              index++;                              if (!_itembycamera.ContainsKey(cameraDevice))                                  _itembycamera.Add(cameraDevice' new AsyncObservableCollection<FileItem>());                                var fileitem = new FileItem(deviceObject' cameraDevice);                              fileitem.Series = index;                              dlg.Label2 = fileitem.FileName;                                PhotoSession session = (PhotoSession)cameraDevice.AttachedPhotoSession ??                                         ServiceProvider.Settings.DefaultSession;                                // check if file exist with same name from this camera                              fileitem.IsChecked = session.GetFile(deviceObject.FileName' cameraDevice.SerialNumber) ==                                                   null;                                _itembycamera[cameraDevice].Add(fileitem);                              //Items.Add(new FileItem(deviceObject' cameraDevice));                          }                      }                  }                  catch (Exception exception)                  {                      StaticHelper.Instance.SystemMessage = TranslationStrings.LabelErrorLoadingFileList;                      Log.Error("Error loading file list"' exception);                  }                  Thread.Sleep(500);              }
Magic Number,CameraControl.windows,DownloadPhotosWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\DownloadPhotosWnd.xaml.cs,TransferFiles,The following statement contains a magic number: try              {                    DateTime starttime = DateTime.Now;                  long totalbytes = 0;                  bool somethingwrong = false;                  AsyncObservableCollection<FileItem> itemstoExport =                      new AsyncObservableCollection<FileItem>(Items.Where(x => x.IsChecked));                  dlg.MaxValue = itemstoExport.Count;                  dlg.Progress = 0;                  int i = 0;                  foreach (FileItem fileItem in itemstoExport)                  {                      if (fileItem.ItemType == FileItemType.Missing)                          continue;                      if (!fileItem.IsChecked)                          continue;                      dlg.Label = fileItem.FileName;                      dlg.ImageSource = fileItem.Thumbnail;                        PhotoSession session = (PhotoSession) fileItem.Device.AttachedPhotoSession ??                                             ServiceProvider.Settings.DefaultSession;                      if (saveseries)                      {                          // save series in session' to be used in file name generation                           session.Series = fileItem.Series;                      }                        string fileName = "";                        if (!session.UseOriginalFilename)                      {                          //TODO: transfer file first                          fileName =                              session.GetNextFileName(Path.GetExtension(fileItem.FileName)'                                  fileItem.Device' "");                      }                      else                      {                          fileName = Path.Combine(session.Folder' fileItem.FileName);                          if (File.Exists(fileName))                              fileName =                                  StaticHelper.GetUniqueFilename(                                      Path.GetDirectoryName(fileName) + "\\" + Path.GetFileNameWithoutExtension(fileName) +                                      "_"' 0'                                      Path.GetExtension(fileName));                      }                        string dir = Path.GetDirectoryName(fileName);                      if (dir != null && !Directory.Exists(dir))                      {                          Directory.CreateDirectory(dir);                      }                      try                      {                          fileItem.Device.TransferFile(fileItem.DeviceObject.Handle' fileName);                          fileItem.Device.ReleaseResurce(fileItem.DeviceObject.Handle);                          fileItem.Device.TransferProgress = 0;                          fileItem.Device.IsBusy = false;                      }                      catch (Exception exception)                      {                          somethingwrong = true;                          Log.Error("Transfer error"' exception);                      }                        // double check if file was transferred                      if (File.Exists(fileName))                      {                          if (delete)                              fileItem.Device.DeleteObject(fileItem.DeviceObject);                      }                      else                      {                          somethingwrong = true;                      }                      if (!File.Exists(fileName))                      {                          MessageBox.Show("Unable download file. Aborting!");                          break;                      }                      totalbytes += new FileInfo(fileName).Length;                      FileItem item1 = fileItem;                      var serie = fileItem.Series;                      Dispatcher.Invoke(delegate                      {                          var item = session.AddFile(fileName);                          if (saveseries)                              item.Series = serie;                          item.CameraSerial = item1.Device.SerialNumber;                          item.OriginalName = item1.FileName;                      });                      i++;                      dlg.Progress = i;                  }                    Log.Debug("File transfer done");                    if (format)                  {                      dlg.MaxValue = ServiceProvider.DeviceManager.ConnectedDevices.Count;                      dlg.Progress = 0;                      int ii = 0;                      if (!somethingwrong)                      {                          foreach (ICameraDevice connectedDevice in ServiceProvider.DeviceManager.ConnectedDevices)                          {                              try                              {                                  dlg.Label = connectedDevice.DisplayName;                                  ii++;                                  dlg.Progress = ii;                                  Log.Debug("Start format");                                  Log.Debug(connectedDevice.PortName);                                  connectedDevice.FormatStorage(null);                                  Thread.Sleep(200);                                  Log.Debug("Format done");                              }                              catch (Exception exception)                              {                                  Log.Error("Unable to format device "' exception);                              }                          }                      }                      else                      {                          Log.Debug("File transfer failed' format aborted!");                          StaticHelper.Instance.SystemMessage = "File transfer failed' format aborted!";                      }                  }                  dlg.Hide();                  double transfersec = (DateTime.Now - starttime).TotalSeconds;                  Log.Debug(                      string.Format("[BENCHMARK]Total byte transferred ;{0} Total seconds :{1} Speed : {2} Mbyte/sec "'                          totalbytes'                          transfersec' (totalbytes/transfersec/1024/1024).ToString("0000.00")));              }              catch (Exception ex)              {                  Log.Error("Crash on download window "' ex);              }
Magic Number,CameraControl.windows,DownloadPhotosWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\DownloadPhotosWnd.xaml.cs,TransferFiles,The following statement contains a magic number: try              {                    DateTime starttime = DateTime.Now;                  long totalbytes = 0;                  bool somethingwrong = false;                  AsyncObservableCollection<FileItem> itemstoExport =                      new AsyncObservableCollection<FileItem>(Items.Where(x => x.IsChecked));                  dlg.MaxValue = itemstoExport.Count;                  dlg.Progress = 0;                  int i = 0;                  foreach (FileItem fileItem in itemstoExport)                  {                      if (fileItem.ItemType == FileItemType.Missing)                          continue;                      if (!fileItem.IsChecked)                          continue;                      dlg.Label = fileItem.FileName;                      dlg.ImageSource = fileItem.Thumbnail;                        PhotoSession session = (PhotoSession) fileItem.Device.AttachedPhotoSession ??                                             ServiceProvider.Settings.DefaultSession;                      if (saveseries)                      {                          // save series in session' to be used in file name generation                           session.Series = fileItem.Series;                      }                        string fileName = "";                        if (!session.UseOriginalFilename)                      {                          //TODO: transfer file first                          fileName =                              session.GetNextFileName(Path.GetExtension(fileItem.FileName)'                                  fileItem.Device' "");                      }                      else                      {                          fileName = Path.Combine(session.Folder' fileItem.FileName);                          if (File.Exists(fileName))                              fileName =                                  StaticHelper.GetUniqueFilename(                                      Path.GetDirectoryName(fileName) + "\\" + Path.GetFileNameWithoutExtension(fileName) +                                      "_"' 0'                                      Path.GetExtension(fileName));                      }                        string dir = Path.GetDirectoryName(fileName);                      if (dir != null && !Directory.Exists(dir))                      {                          Directory.CreateDirectory(dir);                      }                      try                      {                          fileItem.Device.TransferFile(fileItem.DeviceObject.Handle' fileName);                          fileItem.Device.ReleaseResurce(fileItem.DeviceObject.Handle);                          fileItem.Device.TransferProgress = 0;                          fileItem.Device.IsBusy = false;                      }                      catch (Exception exception)                      {                          somethingwrong = true;                          Log.Error("Transfer error"' exception);                      }                        // double check if file was transferred                      if (File.Exists(fileName))                      {                          if (delete)                              fileItem.Device.DeleteObject(fileItem.DeviceObject);                      }                      else                      {                          somethingwrong = true;                      }                      if (!File.Exists(fileName))                      {                          MessageBox.Show("Unable download file. Aborting!");                          break;                      }                      totalbytes += new FileInfo(fileName).Length;                      FileItem item1 = fileItem;                      var serie = fileItem.Series;                      Dispatcher.Invoke(delegate                      {                          var item = session.AddFile(fileName);                          if (saveseries)                              item.Series = serie;                          item.CameraSerial = item1.Device.SerialNumber;                          item.OriginalName = item1.FileName;                      });                      i++;                      dlg.Progress = i;                  }                    Log.Debug("File transfer done");                    if (format)                  {                      dlg.MaxValue = ServiceProvider.DeviceManager.ConnectedDevices.Count;                      dlg.Progress = 0;                      int ii = 0;                      if (!somethingwrong)                      {                          foreach (ICameraDevice connectedDevice in ServiceProvider.DeviceManager.ConnectedDevices)                          {                              try                              {                                  dlg.Label = connectedDevice.DisplayName;                                  ii++;                                  dlg.Progress = ii;                                  Log.Debug("Start format");                                  Log.Debug(connectedDevice.PortName);                                  connectedDevice.FormatStorage(null);                                  Thread.Sleep(200);                                  Log.Debug("Format done");                              }                              catch (Exception exception)                              {                                  Log.Error("Unable to format device "' exception);                              }                          }                      }                      else                      {                          Log.Debug("File transfer failed' format aborted!");                          StaticHelper.Instance.SystemMessage = "File transfer failed' format aborted!";                      }                  }                  dlg.Hide();                  double transfersec = (DateTime.Now - starttime).TotalSeconds;                  Log.Debug(                      string.Format("[BENCHMARK]Total byte transferred ;{0} Total seconds :{1} Speed : {2} Mbyte/sec "'                          totalbytes'                          transfersec' (totalbytes/transfersec/1024/1024).ToString("0000.00")));              }              catch (Exception ex)              {                  Log.Error("Crash on download window "' ex);              }
Magic Number,CameraControl.windows,DownloadPhotosWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\DownloadPhotosWnd.xaml.cs,TransferFiles,The following statement contains a magic number: try              {                    DateTime starttime = DateTime.Now;                  long totalbytes = 0;                  bool somethingwrong = false;                  AsyncObservableCollection<FileItem> itemstoExport =                      new AsyncObservableCollection<FileItem>(Items.Where(x => x.IsChecked));                  dlg.MaxValue = itemstoExport.Count;                  dlg.Progress = 0;                  int i = 0;                  foreach (FileItem fileItem in itemstoExport)                  {                      if (fileItem.ItemType == FileItemType.Missing)                          continue;                      if (!fileItem.IsChecked)                          continue;                      dlg.Label = fileItem.FileName;                      dlg.ImageSource = fileItem.Thumbnail;                        PhotoSession session = (PhotoSession) fileItem.Device.AttachedPhotoSession ??                                             ServiceProvider.Settings.DefaultSession;                      if (saveseries)                      {                          // save series in session' to be used in file name generation                           session.Series = fileItem.Series;                      }                        string fileName = "";                        if (!session.UseOriginalFilename)                      {                          //TODO: transfer file first                          fileName =                              session.GetNextFileName(Path.GetExtension(fileItem.FileName)'                                  fileItem.Device' "");                      }                      else                      {                          fileName = Path.Combine(session.Folder' fileItem.FileName);                          if (File.Exists(fileName))                              fileName =                                  StaticHelper.GetUniqueFilename(                                      Path.GetDirectoryName(fileName) + "\\" + Path.GetFileNameWithoutExtension(fileName) +                                      "_"' 0'                                      Path.GetExtension(fileName));                      }                        string dir = Path.GetDirectoryName(fileName);                      if (dir != null && !Directory.Exists(dir))                      {                          Directory.CreateDirectory(dir);                      }                      try                      {                          fileItem.Device.TransferFile(fileItem.DeviceObject.Handle' fileName);                          fileItem.Device.ReleaseResurce(fileItem.DeviceObject.Handle);                          fileItem.Device.TransferProgress = 0;                          fileItem.Device.IsBusy = false;                      }                      catch (Exception exception)                      {                          somethingwrong = true;                          Log.Error("Transfer error"' exception);                      }                        // double check if file was transferred                      if (File.Exists(fileName))                      {                          if (delete)                              fileItem.Device.DeleteObject(fileItem.DeviceObject);                      }                      else                      {                          somethingwrong = true;                      }                      if (!File.Exists(fileName))                      {                          MessageBox.Show("Unable download file. Aborting!");                          break;                      }                      totalbytes += new FileInfo(fileName).Length;                      FileItem item1 = fileItem;                      var serie = fileItem.Series;                      Dispatcher.Invoke(delegate                      {                          var item = session.AddFile(fileName);                          if (saveseries)                              item.Series = serie;                          item.CameraSerial = item1.Device.SerialNumber;                          item.OriginalName = item1.FileName;                      });                      i++;                      dlg.Progress = i;                  }                    Log.Debug("File transfer done");                    if (format)                  {                      dlg.MaxValue = ServiceProvider.DeviceManager.ConnectedDevices.Count;                      dlg.Progress = 0;                      int ii = 0;                      if (!somethingwrong)                      {                          foreach (ICameraDevice connectedDevice in ServiceProvider.DeviceManager.ConnectedDevices)                          {                              try                              {                                  dlg.Label = connectedDevice.DisplayName;                                  ii++;                                  dlg.Progress = ii;                                  Log.Debug("Start format");                                  Log.Debug(connectedDevice.PortName);                                  connectedDevice.FormatStorage(null);                                  Thread.Sleep(200);                                  Log.Debug("Format done");                              }                              catch (Exception exception)                              {                                  Log.Error("Unable to format device "' exception);                              }                          }                      }                      else                      {                          Log.Debug("File transfer failed' format aborted!");                          StaticHelper.Instance.SystemMessage = "File transfer failed' format aborted!";                      }                  }                  dlg.Hide();                  double transfersec = (DateTime.Now - starttime).TotalSeconds;                  Log.Debug(                      string.Format("[BENCHMARK]Total byte transferred ;{0} Total seconds :{1} Speed : {2} Mbyte/sec "'                          totalbytes'                          transfersec' (totalbytes/transfersec/1024/1024).ToString("0000.00")));              }              catch (Exception ex)              {                  Log.Error("Crash on download window "' ex);              }
Magic Number,CameraControl.windows,FullScreenWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\FullScreenWnd.xaml.cs,image1_MouseDown,The following statement contains a magic number: if (e.ClickCount >= 2 && e.LeftButton == MouseButtonState.Pressed)                  HideWindow();
Magic Number,CameraControl.windows,FullScreenWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\FullScreenWnd.xaml.cs,ExecuteCommand,The following statement contains a magic number: switch (cmd)              {                  case WindowsCmdConsts.FullScreenWnd_Show:                      Dispatcher.BeginInvoke(new Action(delegate                                                            {                                                                Show();                                                                Activate();                                                                //Topmost = true;                                                                //Topmost = false;                                                                Focus();                                                                if (ServiceProvider.Settings.FullScreenInSecondaryMonitor)                                                                {                                                                    var allScreens =                                                                        System.Windows.Forms.Screen.AllScreens.ToList();                                                                    foreach (var r1 in from item in allScreens where !item.Primary select item.WorkingArea)                                                                    {                                                                        Left = r1.Left;                                                                        Top = r1.Top;                                                                        Width = r1.Width;                                                                        Height = r1.Height;                                                                        Topmost = true;                                                                        break;                                                                    }                                                                }                                                                WindowState = WindowState.Maximized;                                                                WindowStyle = WindowStyle.None;                                                            }));                      break;                  case WindowsCmdConsts.FullScreenWnd_ShowTimed:                      // wait for image preview to be generated                       var startTime = DateTime.Now;                      Thread.Sleep(150);                      while (                          ServiceProvider.Settings.SelectedBitmap != null && (ServiceProvider.Settings.SelectedBitmap.FileItem != null && ServiceProvider.Settings.SelectedBitmap.FileItem.Loading))                      {                          Thread.Sleep(10);                          if ((DateTime.Now - startTime).TotalSeconds > 3)                              break;                      }                      Dispatcher.BeginInvoke(new Action(delegate                                                            {                                                                try                                                                {                                                                    Show();                                                                    Activate();                                                                    Topmost = true;                                                                    Topmost = false;                                                                    Focus();                                                                    if (ServiceProvider.Settings.FullScreenInSecondaryMonitor)                                                                    {                                                                        var allScreens =                                                                            System.Windows.Forms.Screen.AllScreens.ToList();                                                                        foreach (var r1 in from item in allScreens where !item.Primary select item.WorkingArea)                                                                        {                                                                            Left = r1.Left;                                                                            Top = r1.Top;                                                                            Width = r1.Width;                                                                            Height = r1.Height;                                                                            Topmost = true;                                                                            break;                                                                        }                                                                    }                                                                    WindowState = WindowState.Maximized;                                                                    WindowStyle = WindowStyle.None;                                                                      _timer.Stop();                                                                    _timer.Interval = ServiceProvider.Settings.PreviewSeconds *                                                                                      1000;                                                                    _timer.Start();                                                                }                                                                catch (Exception ex)                                                                {                                                                    Log.Error("Full screen "' ex);                                                                }                                                            }));                      break;                  case WindowsCmdConsts.FullScreenWnd_Hide:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           _timer.Stop();                                                           Hide();                                                       }));                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           _timer.Stop();                                                           Hide();                                                           Close();                                                       }));                      break;              }
Magic Number,CameraControl.windows,FullScreenWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\FullScreenWnd.xaml.cs,ExecuteCommand,The following statement contains a magic number: switch (cmd)              {                  case WindowsCmdConsts.FullScreenWnd_Show:                      Dispatcher.BeginInvoke(new Action(delegate                                                            {                                                                Show();                                                                Activate();                                                                //Topmost = true;                                                                //Topmost = false;                                                                Focus();                                                                if (ServiceProvider.Settings.FullScreenInSecondaryMonitor)                                                                {                                                                    var allScreens =                                                                        System.Windows.Forms.Screen.AllScreens.ToList();                                                                    foreach (var r1 in from item in allScreens where !item.Primary select item.WorkingArea)                                                                    {                                                                        Left = r1.Left;                                                                        Top = r1.Top;                                                                        Width = r1.Width;                                                                        Height = r1.Height;                                                                        Topmost = true;                                                                        break;                                                                    }                                                                }                                                                WindowState = WindowState.Maximized;                                                                WindowStyle = WindowStyle.None;                                                            }));                      break;                  case WindowsCmdConsts.FullScreenWnd_ShowTimed:                      // wait for image preview to be generated                       var startTime = DateTime.Now;                      Thread.Sleep(150);                      while (                          ServiceProvider.Settings.SelectedBitmap != null && (ServiceProvider.Settings.SelectedBitmap.FileItem != null && ServiceProvider.Settings.SelectedBitmap.FileItem.Loading))                      {                          Thread.Sleep(10);                          if ((DateTime.Now - startTime).TotalSeconds > 3)                              break;                      }                      Dispatcher.BeginInvoke(new Action(delegate                                                            {                                                                try                                                                {                                                                    Show();                                                                    Activate();                                                                    Topmost = true;                                                                    Topmost = false;                                                                    Focus();                                                                    if (ServiceProvider.Settings.FullScreenInSecondaryMonitor)                                                                    {                                                                        var allScreens =                                                                            System.Windows.Forms.Screen.AllScreens.ToList();                                                                        foreach (var r1 in from item in allScreens where !item.Primary select item.WorkingArea)                                                                        {                                                                            Left = r1.Left;                                                                            Top = r1.Top;                                                                            Width = r1.Width;                                                                            Height = r1.Height;                                                                            Topmost = true;                                                                            break;                                                                        }                                                                    }                                                                    WindowState = WindowState.Maximized;                                                                    WindowStyle = WindowStyle.None;                                                                      _timer.Stop();                                                                    _timer.Interval = ServiceProvider.Settings.PreviewSeconds *                                                                                      1000;                                                                    _timer.Start();                                                                }                                                                catch (Exception ex)                                                                {                                                                    Log.Error("Full screen "' ex);                                                                }                                                            }));                      break;                  case WindowsCmdConsts.FullScreenWnd_Hide:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           _timer.Stop();                                                           Hide();                                                       }));                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           _timer.Stop();                                                           Hide();                                                           Close();                                                       }));                      break;              }
Magic Number,CameraControl.windows,FullScreenWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\FullScreenWnd.xaml.cs,ExecuteCommand,The following statement contains a magic number: switch (cmd)              {                  case WindowsCmdConsts.FullScreenWnd_Show:                      Dispatcher.BeginInvoke(new Action(delegate                                                            {                                                                Show();                                                                Activate();                                                                //Topmost = true;                                                                //Topmost = false;                                                                Focus();                                                                if (ServiceProvider.Settings.FullScreenInSecondaryMonitor)                                                                {                                                                    var allScreens =                                                                        System.Windows.Forms.Screen.AllScreens.ToList();                                                                    foreach (var r1 in from item in allScreens where !item.Primary select item.WorkingArea)                                                                    {                                                                        Left = r1.Left;                                                                        Top = r1.Top;                                                                        Width = r1.Width;                                                                        Height = r1.Height;                                                                        Topmost = true;                                                                        break;                                                                    }                                                                }                                                                WindowState = WindowState.Maximized;                                                                WindowStyle = WindowStyle.None;                                                            }));                      break;                  case WindowsCmdConsts.FullScreenWnd_ShowTimed:                      // wait for image preview to be generated                       var startTime = DateTime.Now;                      Thread.Sleep(150);                      while (                          ServiceProvider.Settings.SelectedBitmap != null && (ServiceProvider.Settings.SelectedBitmap.FileItem != null && ServiceProvider.Settings.SelectedBitmap.FileItem.Loading))                      {                          Thread.Sleep(10);                          if ((DateTime.Now - startTime).TotalSeconds > 3)                              break;                      }                      Dispatcher.BeginInvoke(new Action(delegate                                                            {                                                                try                                                                {                                                                    Show();                                                                    Activate();                                                                    Topmost = true;                                                                    Topmost = false;                                                                    Focus();                                                                    if (ServiceProvider.Settings.FullScreenInSecondaryMonitor)                                                                    {                                                                        var allScreens =                                                                            System.Windows.Forms.Screen.AllScreens.ToList();                                                                        foreach (var r1 in from item in allScreens where !item.Primary select item.WorkingArea)                                                                        {                                                                            Left = r1.Left;                                                                            Top = r1.Top;                                                                            Width = r1.Width;                                                                            Height = r1.Height;                                                                            Topmost = true;                                                                            break;                                                                        }                                                                    }                                                                    WindowState = WindowState.Maximized;                                                                    WindowStyle = WindowStyle.None;                                                                      _timer.Stop();                                                                    _timer.Interval = ServiceProvider.Settings.PreviewSeconds *                                                                                      1000;                                                                    _timer.Start();                                                                }                                                                catch (Exception ex)                                                                {                                                                    Log.Error("Full screen "' ex);                                                                }                                                            }));                      break;                  case WindowsCmdConsts.FullScreenWnd_Hide:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           _timer.Stop();                                                           Hide();                                                       }));                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           _timer.Stop();                                                           Hide();                                                           Close();                                                       }));                      break;              }
Magic Number,CameraControl.windows,FullScreenWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\FullScreenWnd.xaml.cs,ExecuteCommand,The following statement contains a magic number: switch (cmd)              {                  case WindowsCmdConsts.FullScreenWnd_Show:                      Dispatcher.BeginInvoke(new Action(delegate                                                            {                                                                Show();                                                                Activate();                                                                //Topmost = true;                                                                //Topmost = false;                                                                Focus();                                                                if (ServiceProvider.Settings.FullScreenInSecondaryMonitor)                                                                {                                                                    var allScreens =                                                                        System.Windows.Forms.Screen.AllScreens.ToList();                                                                    foreach (var r1 in from item in allScreens where !item.Primary select item.WorkingArea)                                                                    {                                                                        Left = r1.Left;                                                                        Top = r1.Top;                                                                        Width = r1.Width;                                                                        Height = r1.Height;                                                                        Topmost = true;                                                                        break;                                                                    }                                                                }                                                                WindowState = WindowState.Maximized;                                                                WindowStyle = WindowStyle.None;                                                            }));                      break;                  case WindowsCmdConsts.FullScreenWnd_ShowTimed:                      // wait for image preview to be generated                       var startTime = DateTime.Now;                      Thread.Sleep(150);                      while (                          ServiceProvider.Settings.SelectedBitmap != null && (ServiceProvider.Settings.SelectedBitmap.FileItem != null && ServiceProvider.Settings.SelectedBitmap.FileItem.Loading))                      {                          Thread.Sleep(10);                          if ((DateTime.Now - startTime).TotalSeconds > 3)                              break;                      }                      Dispatcher.BeginInvoke(new Action(delegate                                                            {                                                                try                                                                {                                                                    Show();                                                                    Activate();                                                                    Topmost = true;                                                                    Topmost = false;                                                                    Focus();                                                                    if (ServiceProvider.Settings.FullScreenInSecondaryMonitor)                                                                    {                                                                        var allScreens =                                                                            System.Windows.Forms.Screen.AllScreens.ToList();                                                                        foreach (var r1 in from item in allScreens where !item.Primary select item.WorkingArea)                                                                        {                                                                            Left = r1.Left;                                                                            Top = r1.Top;                                                                            Width = r1.Width;                                                                            Height = r1.Height;                                                                            Topmost = true;                                                                            break;                                                                        }                                                                    }                                                                    WindowState = WindowState.Maximized;                                                                    WindowStyle = WindowStyle.None;                                                                      _timer.Stop();                                                                    _timer.Interval = ServiceProvider.Settings.PreviewSeconds *                                                                                      1000;                                                                    _timer.Start();                                                                }                                                                catch (Exception ex)                                                                {                                                                    Log.Error("Full screen "' ex);                                                                }                                                            }));                      break;                  case WindowsCmdConsts.FullScreenWnd_Hide:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           _timer.Stop();                                                           Hide();                                                       }));                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           _timer.Stop();                                                           Hide();                                                           Close();                                                       }));                      break;              }
Magic Number,CameraControl.windows,LiveViewManager,C:\repos\dukus_digiCamControl\CameraControl\windows\LiveViewManager.cs,LiveViewManager,The following statement contains a magic number: try              {                  // xsplit plugin support                   var plugin = TimedBroadcasterPlugin.CreateInstance(                      "F752DC1B-438E-4014-914B-48F249D4C8F1"' null' 1380' 112' 50);                    if (plugin != null)                  {                      plugin.StartTimer();                  }              }              catch (Exception exception)              {                  Log.Error("Unable to start XSplit "' exception);              }
Magic Number,CameraControl.windows,LiveViewManager,C:\repos\dukus_digiCamControl\CameraControl\windows\LiveViewManager.cs,LiveViewManager,The following statement contains a magic number: try              {                  // xsplit plugin support                   var plugin = TimedBroadcasterPlugin.CreateInstance(                      "F752DC1B-438E-4014-914B-48F249D4C8F1"' null' 1380' 112' 50);                    if (plugin != null)                  {                      plugin.StartTimer();                  }              }              catch (Exception exception)              {                  Log.Error("Unable to start XSplit "' exception);              }
Magic Number,CameraControl.windows,LiveViewManager,C:\repos\dukus_digiCamControl\CameraControl\windows\LiveViewManager.cs,LiveViewManager,The following statement contains a magic number: try              {                  // xsplit plugin support                   var plugin = TimedBroadcasterPlugin.CreateInstance(                      "F752DC1B-438E-4014-914B-48F249D4C8F1"' null' 1380' 112' 50);                    if (plugin != null)                  {                      plugin.StartTimer();                  }              }              catch (Exception exception)              {                  Log.Error("Unable to start XSplit "' exception);              }
Magic Number,CameraControl.windows,LiveViewManager,C:\repos\dukus_digiCamControl\CameraControl\windows\LiveViewManager.cs,ExecuteCommand,The following statement contains a magic number: lock (_locker)              {                  switch (cmd)                  {                      case WindowsCmdConsts.LiveViewWnd_Show:                          {                              if (!_register.ContainsKey(param))                              {                                  Application.Current.Dispatcher.Invoke(new Action(delegate                                  {                                      LiveViewWnd wnd = new LiveViewWnd();                                      ServiceProvider.Settings.ApplyTheme(wnd);                                      _register.Add(param' wnd);                                      wnd.Owner = ServiceProvider.PluginManager.SelectedWindow as Window;                                  }));                              }                              NikonBase nikonBase = param as NikonBase;                              if (nikonBase != null && ServiceProvider.Settings.EasyLiveViewControl)                              {                                  CameraPreset preset = new CameraPreset();                                  preset.Get(nikonBase);                                  if (!_presets.ContainsKey(nikonBase))                                      _presets.Add(nikonBase' preset);                                  else                                      _presets[nikonBase] = preset;                                  if (nikonBase.ShutterSpeed.Value == "Bulb")                                  {                                      nikonBase.ShutterSpeed.Value =                                          nikonBase.ShutterSpeed.Values[nikonBase.ShutterSpeed.Values.Count / 2];                                  }                                  nikonBase.FocusMode.Value = nikonBase.FocusMode.Values[0];                                  nikonBase.FNumber.Value = nikonBase.FNumber.Values[0];                              }                              _register[param].ExecuteCommand(cmd' param);                          }                          break;                      case WindowsCmdConsts.LiveViewWnd_Hide:                      {                          if (_register.ContainsKey(param))                              _register[param].ExecuteCommand(cmd' param);                          var nikonBase = param as NikonBase;                          if (ServiceProvider.Settings.EasyLiveViewControl)                          {                              if (nikonBase != null && _presets.ContainsKey(nikonBase))                              {                                  nikonBase.ShutterSpeed.Value = _presets[nikonBase].GetValue("ShutterSpeed");                                  nikonBase.FNumber.Value = _presets[nikonBase].GetValue("FNumber");                                  nikonBase.FocusMode.Value = _presets[nikonBase].GetValue("FocusMode");                              }                          }                      }                          break;                      case CmdConsts.All_Minimize:                      case CmdConsts.All_Close:                          foreach (var liveViewWnd in _register)                          {                              liveViewWnd.Value.ExecuteCommand(cmd' param);                          }                          break;                      default:                          if (cmd.StartsWith("LiveView"))                          {                              foreach (var liveViewWnd in _register)                              {                                  liveViewWnd.Value.ExecuteCommand(cmd' param);                              }                          }                          break;                  }              }
Magic Number,CameraControl.windows,LiveViewWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\LiveViewWnd.xaml.cs,LiveViewManager_PreviewLoaded,The following statement contains a magic number: Task.Factory.StartNew(() =>              {                  Thread.Sleep(500);                  App.Current.BeginInvoke(zoomAndPanControl.ScaleToFit);              });
Magic Number,CameraControl.windows,LiveViewWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\LiveViewWnd.xaml.cs,MetroWindow_PreviewKeyDown,The following statement contains a magic number: if ((DateTime.Now - _focusMoveTime).TotalMilliseconds < 200)                  return;
Magic Number,CameraControl.windows,LiveViewWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\LiveViewWnd.xaml.cs,zoomAndPanControl_MouseWheel,The following statement contains a magic number: if (e.Delta > 0)              {                  zoomAndPanControl.ZoomIn(curContentMousePoint);              }              else if (e.Delta < 0)              {                  // don't allow zoomout les that original image                   if (zoomAndPanControl.ContentScale - 0.2 > zoomAndPanControl.FitScale())                  {                      zoomAndPanControl.ZoomOut(curContentMousePoint);                  }                  else                  {                      zoomAndPanControl.ScaleToFit();                  }              }
Magic Number,CameraControl.windows,LiveViewWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\LiveViewWnd.xaml.cs,zoomAndPanControl_MouseDoubleClick,The following statement contains a magic number: if (zoomAndPanControl.ContentScale <= zoomAndPanControl.FitScale())              {                  zoomAndPanControl.ZoomAboutPoint(4' curContentMousePoint);              }              else              {                  zoomAndPanControl.ScaleToFit();              }
Magic Number,CameraControl.windows,MultipleCameraWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\MultipleCameraWnd.xaml.cs,CapturePhotos,The following statement contains a magic number: Thread thread = new Thread(new ThreadStart(delegate                                                             {                                                                 while (CamerasAreBusy())                                                                 {                                                                 }                                                                 try                                                                 {                                                                     if (UseExternal)                                                                     {                                                                         if (SelectedConfig != null)                                                                         {                                                                             ServiceProvider.ExternalDeviceManager.                                                                                 OpenShutter(SelectedConfig);                                                                             Thread.Sleep(300);                                                                             ServiceProvider.ExternalDeviceManager.                                                                                 CloseShutter(SelectedConfig);                                                                         }                                                                     }                                                                     else                                                                     {                                                                         CameraHelper.CaptureAll(DelaySec);                                                                     }                                                                 }                                                                 catch (Exception exception)                                                                 {                                                                     Log.Error(exception);                                                                 }                                                                   Thread.Sleep(DelaySec);                                                                 if (_photocounter < NumOfPhotos)                                                                     _timer.Start();                                                                 else                                                                 {                                                                     StopCapture();                                                                 }                                                             }));
Magic Number,CameraControl.windows,MultipleCameraWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\MultipleCameraWnd.xaml.cs,Format,The following statement contains a magic number: for (int i = 0; i < ServiceProvider.DeviceManager.ConnectedDevices.Count; i++)              {                  ICameraDevice device = ServiceProvider.DeviceManager.ConnectedDevices[i];                  if (!device.IsChecked)                      continue;                  dlg.Label = device.DisplayName;                  dlg.Progress = i;                  Thread thread = new Thread(() => FormatCard(device));                  thread.Start();                  thread.Join(5 * 1000);              }
Magic Number,CameraControl.windows,MultipleCameraWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\MultipleCameraWnd.xaml.cs,Format,The following statement contains a magic number: for (int i = 0; i < ServiceProvider.DeviceManager.ConnectedDevices.Count; i++)              {                  ICameraDevice device = ServiceProvider.DeviceManager.ConnectedDevices[i];                  if (!device.IsChecked)                      continue;                  dlg.Label = device.DisplayName;                  dlg.Progress = i;                  Thread thread = new Thread(() => FormatCard(device));                  thread.Start();                  thread.Join(5 * 1000);              }
Magic Number,CameraControl.windows,MultipleCameraWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\MultipleCameraWnd.xaml.cs,FormatCard,The following statement contains a magic number: try              {                  connectedDevice.IsBusy = true;                  Log.Debug("Start format");                  Log.Debug(connectedDevice.PortName);                  connectedDevice.FormatStorage(null);                  Thread.Sleep(200);                  Log.Debug("Format done");                  connectedDevice.IsBusy = false;              }              catch (Exception exception)              {                  Log.Error("Unable to format device "' exception);              }
Magic Number,CameraControl.windows,PreviewWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\PreviewWnd.xaml.cs,Image_MouseMove,The following statement contains a magic number: var renderTargetBitmap = new RenderTargetBitmap((int) AssociatedObject.ActualWidth'                  (int) AssociatedObject.ActualHeight'                  96' 96' PixelFormats.Default);
Magic Number,CameraControl.windows,PreviewWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\PreviewWnd.xaml.cs,Image_MouseMove,The following statement contains a magic number: var renderTargetBitmap = new RenderTargetBitmap((int) AssociatedObject.ActualWidth'                  (int) AssociatedObject.ActualHeight'                  96' 96' PixelFormats.Default);
Magic Number,CameraControl.windows,PreviewWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\PreviewWnd.xaml.cs,Image_MouseMove,The following statement contains a magic number: if ((point.X <= renderTargetBitmap.PixelWidth) && (point.Y <= renderTargetBitmap.PixelHeight))              {                  // Create a cropped image at the supplied point coordinates.                  var croppedBitmap = new CroppedBitmap(renderTargetBitmap'                      new Int32Rect((int) point.X' (int) point.Y' 1' 1));                    // Copy the sampled pixel to a byte array.                  var pixels = new byte[4];                  croppedBitmap.CopyPixels(pixels' 4' 0);                    // Assign the sampled color to a SolidColorBrush and return as conversion.                  var SelectedColor = Color.FromArgb(255' pixels[2]' pixels[1]' pixels[0]);                  TextBox.Text = "#" + SelectedColor.ToString().Substring(3);                  Label.Background = new SolidColorBrush(SelectedColor);              }
Magic Number,CameraControl.windows,PreviewWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\PreviewWnd.xaml.cs,Image_MouseMove,The following statement contains a magic number: if ((point.X <= renderTargetBitmap.PixelWidth) && (point.Y <= renderTargetBitmap.PixelHeight))              {                  // Create a cropped image at the supplied point coordinates.                  var croppedBitmap = new CroppedBitmap(renderTargetBitmap'                      new Int32Rect((int) point.X' (int) point.Y' 1' 1));                    // Copy the sampled pixel to a byte array.                  var pixels = new byte[4];                  croppedBitmap.CopyPixels(pixels' 4' 0);                    // Assign the sampled color to a SolidColorBrush and return as conversion.                  var SelectedColor = Color.FromArgb(255' pixels[2]' pixels[1]' pixels[0]);                  TextBox.Text = "#" + SelectedColor.ToString().Substring(3);                  Label.Background = new SolidColorBrush(SelectedColor);              }
Magic Number,CameraControl.windows,PreviewWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\PreviewWnd.xaml.cs,Image_MouseMove,The following statement contains a magic number: if ((point.X <= renderTargetBitmap.PixelWidth) && (point.Y <= renderTargetBitmap.PixelHeight))              {                  // Create a cropped image at the supplied point coordinates.                  var croppedBitmap = new CroppedBitmap(renderTargetBitmap'                      new Int32Rect((int) point.X' (int) point.Y' 1' 1));                    // Copy the sampled pixel to a byte array.                  var pixels = new byte[4];                  croppedBitmap.CopyPixels(pixels' 4' 0);                    // Assign the sampled color to a SolidColorBrush and return as conversion.                  var SelectedColor = Color.FromArgb(255' pixels[2]' pixels[1]' pixels[0]);                  TextBox.Text = "#" + SelectedColor.ToString().Substring(3);                  Label.Background = new SolidColorBrush(SelectedColor);              }
Magic Number,CameraControl.windows,PreviewWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\PreviewWnd.xaml.cs,Image_MouseMove,The following statement contains a magic number: if ((point.X <= renderTargetBitmap.PixelWidth) && (point.Y <= renderTargetBitmap.PixelHeight))              {                  // Create a cropped image at the supplied point coordinates.                  var croppedBitmap = new CroppedBitmap(renderTargetBitmap'                      new Int32Rect((int) point.X' (int) point.Y' 1' 1));                    // Copy the sampled pixel to a byte array.                  var pixels = new byte[4];                  croppedBitmap.CopyPixels(pixels' 4' 0);                    // Assign the sampled color to a SolidColorBrush and return as conversion.                  var SelectedColor = Color.FromArgb(255' pixels[2]' pixels[1]' pixels[0]);                  TextBox.Text = "#" + SelectedColor.ToString().Substring(3);                  Label.Background = new SolidColorBrush(SelectedColor);              }
Magic Number,CameraControl.windows,PreviewWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\PreviewWnd.xaml.cs,Image_MouseMove,The following statement contains a magic number: if ((point.X <= renderTargetBitmap.PixelWidth) && (point.Y <= renderTargetBitmap.PixelHeight))              {                  // Create a cropped image at the supplied point coordinates.                  var croppedBitmap = new CroppedBitmap(renderTargetBitmap'                      new Int32Rect((int) point.X' (int) point.Y' 1' 1));                    // Copy the sampled pixel to a byte array.                  var pixels = new byte[4];                  croppedBitmap.CopyPixels(pixels' 4' 0);                    // Assign the sampled color to a SolidColorBrush and return as conversion.                  var SelectedColor = Color.FromArgb(255' pixels[2]' pixels[1]' pixels[0]);                  TextBox.Text = "#" + SelectedColor.ToString().Substring(3);                  Label.Background = new SolidColorBrush(SelectedColor);              }
Magic Number,CameraControl.windows,PropertyWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\PropertyWnd.xaml.cs,btn_set_Click,The following statement contains a magic number: try              {                  string filename = ServiceProvider.Settings.SelectedBitmap.FileItem.FileName;                  Exiv2Helper.SaveComment(filename' ServiceProvider.Settings.SelectedBitmap.Comment);                  if (                      ServiceProvider.Settings.SelectedBitmap.FileItem.FileInfo.ExifTags.ContainName(                          "Iptc.Application2.Caption"))                      ServiceProvider.Settings.SelectedBitmap.FileItem.FileInfo.ExifTags["Iptc.Application2.Caption"] =                          ServiceProvider.Settings.SelectedBitmap.Comment;                  else                  {                      ServiceProvider.Settings.SelectedBitmap.FileItem.FileInfo.ExifTags.Add(new ValuePair()                                                                                                 {                                                                                                     Name =                                                                                                         "Iptc.Application2.Caption"'                                                                                                     Value =                                                                                                         ServiceProvider.                                                                                                         Settings.                                                                                                         SelectedBitmap.                                                                                                         Comment                                                                                                 });                  }                  ServiceProvider.Settings.SelectedBitmap.FileItem.SaveInfo();                  if (chk_tags.IsChecked == true)                  {                      Exiv2Helper.DelKeyword(filename);                      if (!string.IsNullOrEmpty(ServiceProvider.Settings.DefaultSession.SelectedTag1.Value))                          Exiv2Helper.AddKeyword(filename' ServiceProvider.Settings.DefaultSession.SelectedTag1.Value);                      if (!string.IsNullOrEmpty(ServiceProvider.Settings.DefaultSession.SelectedTag2.Value))                          Exiv2Helper.AddKeyword(filename' ServiceProvider.Settings.DefaultSession.SelectedTag2.Value);                      if (!string.IsNullOrEmpty(ServiceProvider.Settings.DefaultSession.SelectedTag3.Value))                          Exiv2Helper.AddKeyword(filename' ServiceProvider.Settings.DefaultSession.SelectedTag3.Value);                      if (!string.IsNullOrEmpty(ServiceProvider.Settings.DefaultSession.SelectedTag4.Value))                          Exiv2Helper.AddKeyword(filename' ServiceProvider.Settings.DefaultSession.SelectedTag4.Value);                  }                  if (Path.GetFileNameWithoutExtension(filename) != ServiceProvider.Settings.SelectedBitmap.FileName)                  {                      try                      {                          string newfilename = Path.Combine(Path.GetDirectoryName(filename)'                                                            ServiceProvider.Settings.SelectedBitmap.FileName +                                                            Path.GetExtension(filename));                          File.Copy(filename' newfilename);                          File.Delete(filename);                          Thread.Sleep(200);                          int i =                              ServiceProvider.Settings.DefaultSession.Files.IndexOf(                                  ServiceProvider.Settings.SelectedBitmap.FileItem);                          FileItem item = new FileItem(newfilename);                          ServiceProvider.Settings.DefaultSession.Files.Remove(                              ServiceProvider.Settings.SelectedBitmap.FileItem);                          ServiceProvider.Settings.SelectedBitmap.FileItem.RemoveThumbs();                          ServiceProvider.Settings.DefaultSession.Files.Insert(i' item);                          ServiceProvider.WindowsManager.ExecuteCommand(WindowsCmdConsts.Select_Image' item);                      }                      catch (Exception exception)                      {                          MessageBox.Show("Error rename file" + exception.Message);                          Log.Error("Error rename file"' exception);                      }                  }                  btn_set.IsEnabled = true;              }              catch (Exception exception)              {                  Log.Error("Error set property "' exception);                  MessageBox.Show("Error set property !" + exception.Message);              }
Magic Number,CameraControl.XSplit,BroadcasterPlugin,C:\repos\dukus_digiCamControl\CameraControl\XSplit\BroadcasterPlugin.cs,RenderVisual,The following statement contains a magic number: if (this.ConnectionIsReady)              {                  var bmp = new RenderTargetBitmap(width' height' 96' 96' PixelFormats.Default);                    var elementBrush = new VisualBrush(obj);                  var visual = new DrawingVisual();                  var dc = visual.RenderOpen();                    dc.DrawRectangle(elementBrush' null' new Rect(0' 0' width' height));                  dc.Close();                    bmp.Render(visual);                    // The remaining work (format conversion' sending to xsplit) can be done on a seperate thread)                  Task.Factory.StartNew(                      () =>                          {                              var encoder = new BmpBitmapEncoder();                              encoder.Frames.Add(BitmapFrame.Create(bmp));                                using (var stream = new MemoryStream())                              {                                  encoder.Save(stream);                                    stream.Position = 0;                                    byte[] bytes = stream.ToArray();                                    // Length of output data we're going to send.                                  int length = width * height * 4;                                    // Allocate memory for bitmap transfer to COM                                  IntPtr dataptr = Marshal.AllocCoTaskMem(length);                                  Marshal.Copy(bytes' bytes.Length - length' dataptr' length);                                  this.xsplit.SendFrame((uint)width' (uint)height' dataptr.ToInt32());                                    // Send to broadcaster                                  Marshal.FreeCoTaskMem(dataptr);                              }                          });                    return true;              }
Magic Number,CameraControl.XSplit,BroadcasterPlugin,C:\repos\dukus_digiCamControl\CameraControl\XSplit\BroadcasterPlugin.cs,RenderVisual,The following statement contains a magic number: if (this.ConnectionIsReady)              {                  var bmp = new RenderTargetBitmap(width' height' 96' 96' PixelFormats.Default);                    var elementBrush = new VisualBrush(obj);                  var visual = new DrawingVisual();                  var dc = visual.RenderOpen();                    dc.DrawRectangle(elementBrush' null' new Rect(0' 0' width' height));                  dc.Close();                    bmp.Render(visual);                    // The remaining work (format conversion' sending to xsplit) can be done on a seperate thread)                  Task.Factory.StartNew(                      () =>                          {                              var encoder = new BmpBitmapEncoder();                              encoder.Frames.Add(BitmapFrame.Create(bmp));                                using (var stream = new MemoryStream())                              {                                  encoder.Save(stream);                                    stream.Position = 0;                                    byte[] bytes = stream.ToArray();                                    // Length of output data we're going to send.                                  int length = width * height * 4;                                    // Allocate memory for bitmap transfer to COM                                  IntPtr dataptr = Marshal.AllocCoTaskMem(length);                                  Marshal.Copy(bytes' bytes.Length - length' dataptr' length);                                  this.xsplit.SendFrame((uint)width' (uint)height' dataptr.ToInt32());                                    // Send to broadcaster                                  Marshal.FreeCoTaskMem(dataptr);                              }                          });                    return true;              }
Magic Number,CameraControl.XSplit,BroadcasterPlugin,C:\repos\dukus_digiCamControl\CameraControl\XSplit\BroadcasterPlugin.cs,RenderVisual,The following statement contains a magic number: if (this.ConnectionIsReady)              {                  var bmp = new RenderTargetBitmap(width' height' 96' 96' PixelFormats.Default);                    var elementBrush = new VisualBrush(obj);                  var visual = new DrawingVisual();                  var dc = visual.RenderOpen();                    dc.DrawRectangle(elementBrush' null' new Rect(0' 0' width' height));                  dc.Close();                    bmp.Render(visual);                    // The remaining work (format conversion' sending to xsplit) can be done on a seperate thread)                  Task.Factory.StartNew(                      () =>                          {                              var encoder = new BmpBitmapEncoder();                              encoder.Frames.Add(BitmapFrame.Create(bmp));                                using (var stream = new MemoryStream())                              {                                  encoder.Save(stream);                                    stream.Position = 0;                                    byte[] bytes = stream.ToArray();                                    // Length of output data we're going to send.                                  int length = width * height * 4;                                    // Allocate memory for bitmap transfer to COM                                  IntPtr dataptr = Marshal.AllocCoTaskMem(length);                                  Marshal.Copy(bytes' bytes.Length - length' dataptr' length);                                  this.xsplit.SendFrame((uint)width' (uint)height' dataptr.ToInt32());                                    // Send to broadcaster                                  Marshal.FreeCoTaskMem(dataptr);                              }                          });                    return true;              }
Magic Number,CameraControl.XSplit,BroadcasterPlugin,C:\repos\dukus_digiCamControl\CameraControl\XSplit\BroadcasterPlugin.cs,DownloadVisual,The following statement contains a magic number: if (this.ConnectionIsReady)              {                    // The remaining work (format conversion' sending to xsplit) can be done on a seperate thread)                  Task.Factory.StartNew(                      () =>                      {                          try                          {                                if (! ServiceProvider.DeviceManager.LiveViewImage.ContainsKey(                                  ServiceProvider.DeviceManager.SelectedCameraDevice))                                  return;                              if (                                  ServiceProvider.DeviceManager.LiveViewImage[                                      ServiceProvider.DeviceManager.SelectedCameraDevice] == null)                                  return;                                var ms = new MemoryStream(ServiceProvider.DeviceManager.LiveViewImage[ServiceProvider.DeviceManager.SelectedCameraDevice]);                                BitmapImage src = new BitmapImage();                                src.BeginInit();                              src.CacheOption = BitmapCacheOption.OnLoad;                              src.StreamSource = ms;                              src.EndInit();                              WriteableBitmap wb = new WriteableBitmap(new FormatConvertedBitmap(src' PixelFormats.Bgra32' null' 0));                              width = wb.PixelWidth;                              height = wb.PixelHeight;                              var encoder = new BmpBitmapEncoder();                              encoder.Frames.Add(BitmapFrame.Create(wb));                                using (var stream = new MemoryStream())                              {                                  encoder.Save(stream);                                    stream.Position = 0;                                    byte[] bytes = stream.ToArray();                                    // Length of output data we're going to send.                                  int length = width * height * 4;                                    // Allocate memory for bitmap transfer to COM                                  IntPtr dataptr = Marshal.AllocCoTaskMem(length);                                  Marshal.Copy(bytes' bytes.Length - length' dataptr' length);                                  this.xsplit.SendFrame((uint)width' (uint)height' dataptr.ToInt32());                                    // Send to broadcaster                                  Marshal.FreeCoTaskMem(dataptr);                              }                          }                          catch (Exception)                          {                              }                      });                    return true;              }
Missing Default,CameraControl.Controls,TimeControl,C:\repos\dukus_digiCamControl\CameraControl\Controls\TimeControl.xaml.cs,Down,The following switch statement is missing a default case: switch (((Grid)sender).Name)              {                  case "sec":                      if (args.Key == Key.Up)                          this.Seconds++;                      if (args.Key == Key.Down)                          this.Seconds--;                      break;                    case "min":                      if (args.Key == Key.Up)                          this.Minutes++;                      if (args.Key == Key.Down)                          this.Minutes--;                      break;                    case "hour":                      if (args.Key == Key.Up)                          this.Hours++;                      if (args.Key == Key.Down)                          this.Hours--;                      break;              }
Missing Default,CameraControl.Layouts,LayoutBase,C:\repos\dukus_digiCamControl\CameraControl\Layouts\LayoutBase.cs,TriggerEvent,The following switch statement is missing a default case: switch (cmd)                  {                      case WindowsCmdConsts.Next_Image:                          if (ImageLIst.SelectedIndex <                              ImageLIst.Items.Count - 1)                          {                              FileItem item =                                  ImageLIst.SelectedItem as FileItem;                              if (item != null)                              {                                  int ind = ImageLIst.Items.IndexOf(item);                                  ImageLIst.SelectedIndex = ind + 1;                              }                              item = ImageLIst.SelectedItem as FileItem;                              if (item != null)                                  ImageLIst.ScrollIntoView(item);                          }                          break;                      case WindowsCmdConsts.Prev_Image:                          if (ImageLIst.SelectedIndex > 0)                          {                              FileItem item =                                  ImageLIst.SelectedItem as FileItem;                              if (item != null)                              {                                  int ind = ImageLIst.Items.IndexOf(item);                                  ImageLIst.SelectedIndex = ind - 1;                              }                              item = ImageLIst.SelectedItem as FileItem;                              if (item != null)                                  ImageLIst.ScrollIntoView(item);                          }                          break;                      case WindowsCmdConsts.Like_Image:                          if (ImageLIst.SelectedItem != null)                          {                              FileItem item = null;                              if (o != null)                              {                                  item = ServiceProvider.Settings.DefaultSession.GetByName(o as string);                              }                              else                              {                                  item = ImageLIst.SelectedItem as FileItem;                              }                              if (item != null)                              {                                  item.IsLiked = !item.IsLiked;                              }                          }                          break;                      case WindowsCmdConsts.Unlike_Image:                          if (ImageLIst.SelectedItem != null)                          {                              FileItem item = null;                              if (o != null)                              {                                  item =                                      ServiceProvider.Settings.DefaultSession                                          .GetByName(o as string);                              }                              else                              {                                  item = ImageLIst.SelectedItem as FileItem;                              }                              if (item != null)                              {                                  item.IsUnLiked = !item.IsUnLiked;                              }                          }                          break;                      case WindowsCmdConsts.Del_Image:                          {                              DeleteItem();                          }                          break;                      case WindowsCmdConsts.SelectAll_Image:                          {                              ServiceProvider.Settings.DefaultSession.SelectAll();                          }                          break;                      case WindowsCmdConsts.Select_Image:                          FileItem fileItem = o as FileItem;                          if (fileItem != null)                          {                              ImageLIst.SelectedValue = fileItem;                              ImageLIst.ScrollIntoView(fileItem);                          }                          break;                      case WindowsCmdConsts.Refresh_Image:                          RefreshImage();                          break;                      case WindowsCmdConsts.Zoom_Image_Fit:                          ZoomAndPanControl.ScaleToFit();                          break;                      case WindowsCmdConsts.Zoom_Image_100:                          ZoomToFocus();                          LoadFullRes();                          ZoomAndPanControl.ZoomTo(1.0);                          break;                      case WindowsCmdConsts.Zoom_Image_200:                          ZoomToFocus();                          LoadFullRes();                          ZoomAndPanControl.ZoomTo(2.0);                          break;                      case WindowsCmdConsts.RotateLeft:                          {                              FileItem item =                                  ImageLIst.SelectedItem as FileItem;                              if (item != null)                              {                                  item.Rotation--;                                }                          }                          break;                      case WindowsCmdConsts.RotateRight:                          {                              FileItem item =                                  ImageLIst.SelectedItem as FileItem;                              if (item != null)                              {                                  item.Rotation++;                              }                          }                          break;                      case WindowsCmdConsts.ViewExternal:                          OpenInExternalViewer();                          break;                      case WindowsCmdConsts.ViewExplorer:                          OpenInExplorer();                          break;                      case WindowsCmdConsts.RefreshDisplay:                          if (LayoutViewModel.ZoomFit)                              ZoomAndPanControl.ScaleToFit();                          break;                  }
Missing Default,CameraControl,App,C:\repos\dukus_digiCamControl\CameraControl\App.xaml.cs,WindowsManager_Event,The following switch statement is missing a default case: switch (cmd)                  {                      case CmdConsts.Capture:                          Thread thread = new Thread(new ThreadStart(CameraHelper.Capture));                          thread.Start();                          break;                      case CmdConsts.CaptureNoAf:                          CameraHelper.CaptureNoAf();                          break;                      case CmdConsts.CaptureAll:                          CameraHelper.CaptureAll(0);                          break;                      case CmdConsts.StartBulb:                          if (ServiceProvider.DeviceManager.SelectedCameraDevice.GetCapability(CapabilityEnum.Bulb))                          {                              ServiceProvider.DeviceManager.LastCapturedImage[ServiceProvider.DeviceManager.SelectedCameraDevice] = "-";                              ServiceProvider.DeviceManager.SelectedCameraDevice.IsBusy = true;                              ServiceProvider.DeviceManager.SelectedCameraDevice.LockCamera();                              ServiceProvider.DeviceManager.SelectedCameraDevice.StartBulbMode();                          }                          else                          {                              throw new Exception(TranslationStrings.MsgBulbModeNotSupported);                          }                          break;                      case CmdConsts.EndBulb:                          ServiceProvider.DeviceManager.SelectedCameraDevice.EndBulbMode();                          break;                      case CmdConsts.NextSeries:                          if (ServiceProvider.Settings != null) ServiceProvider.Settings.DefaultSession.Series++;                          break;                  }
Missing Default,CameraControl,App,C:\repos\dukus_digiCamControl\CameraControl\App.xaml.cs,WindowsManager_Event,The following switch statement is missing a default case: switch (cmd)                      {                          //case CmdConsts.ResetDevice:                          //        device.ResetDevice();                          //    break;                          case CmdConsts.NextAperture:                              if (device.FNumber != null)                                  device.FNumber.NextValue();                              break;                          case CmdConsts.PrevAperture:                              if (device.FNumber != null)                                  device.FNumber.PrevValue();                              break;                          case CmdConsts.NextIso:                              if (device.IsoNumber != null)                                  device.IsoNumber.NextValue();                              break;                          case CmdConsts.PrevIso:                              if (device.IsoNumber != null)                                  device.IsoNumber.PrevValue();                              break;                          case CmdConsts.NextShutter:                              if (device.ShutterSpeed != null)                                  device.ShutterSpeed.NextValue();                              break;                          case CmdConsts.PrevShutter:                              if (device.ShutterSpeed != null)                                  device.ShutterSpeed.PrevValue();                              break;                          case CmdConsts.NextWhiteBalance:                              if (device.WhiteBalance != null)                                  device.WhiteBalance.NextValue();                              break;                          case CmdConsts.PrevWhiteBalance:                              if (device.WhiteBalance != null)                                  device.WhiteBalance.PrevValue();                              break;                          case CmdConsts.NextExposureCompensation:                              if (device.ExposureCompensation != null)                                  device.ExposureCompensation.NextValue();                              break;                          case CmdConsts.PrevExposureCompensation:                              if (device.ExposureCompensation != null)                                  device.ExposureCompensation.PrevValue();                              break;                          case CmdConsts.NextCamera:                              ServiceProvider.DeviceManager.SelectNextCamera();                              break;                          case CmdConsts.PrevCamera:                              ServiceProvider.DeviceManager.SelectPrevCamera();                              break;                      }
Missing Default,CameraControl,MainWindow,C:\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,WindowsManager_Event,The following switch statement is missing a default case: switch (cmd)              {                  case CmdConsts.SortCameras:                      SortCameras();                      break;                  case WindowsCmdConsts.MainWnd_Message:                      this.ShowMessageAsync(""' o.ToString());                      break;                  case WindowsCmdConsts.SetLayout:                      SetLayout(o.ToString());                      break;                  case WindowsCmdConsts.Restore:                      Dispatcher.BeginInvoke(new Action(delegate                      {                          this.Show();                          this.WindowState = WindowState.Normal;                          this.Activate();                          this.Focus();                      }));                      break;                  case CmdConsts.All_Minimize:                      Dispatcher.Invoke(new Action(delegate                      {                          WindowState = WindowState.Minimized;                      }));                      break;              }
Missing Default,CameraControl,MainWindow,C:\repos\dukus_digiCamControl\CameraControl\MainWindow.xaml.cs,SetLayout,The following switch statement is missing a default case: switch (type)              {                  case LayoutTypeEnum.Normal:                      {                          StackLayout.Children.Clear();                          LayoutNormal control = new LayoutNormal();                          StackLayout.Children.Add(control);                      }                      break;                  case LayoutTypeEnum.Grid:                      {                          StackLayout.Children.Clear();                          LayoutGrid control = new LayoutGrid();                          StackLayout.Children.Add(control);                      }                      break;                  case LayoutTypeEnum.GridRight:                      {                          StackLayout.Children.Clear();                          LayoutGridRight control = new LayoutGridRight();                          StackLayout.Children.Add(control);                      }                      break;              }
Missing Default,CameraControl.ViewModel,BracketingViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BracketingViewModel.cs,_timer_Elapsed,The following switch statement is missing a default case: switch (Mode)                  {                      case 0:                          {                              Camera.ExposureCompensation.Value = Values[Counter];                              CurValue = Values[Counter];                          }                          break;                      case 1:                          {                              Camera.FNumber.Value = Values[Counter];                              CurValue = Values[Counter];                          }                          break;                      case 2:                          {                              Camera.IsoNumber.Value = Values[Counter];                              CurValue = Values[Counter];                          }                          break;                  }
Missing Default,CameraControl.ViewModel,BracketingViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BracketingViewModel.cs,Start,The following switch statement is missing a default case: switch (Mode)                  {                      case 0:                          DefValue = Camera.ExposureCompensation.Value;                          break;                      case 1:                          if (!Camera.FNumber.IsEnabled)                          {                              Error = TranslationStrings.LabelWrongFNumber;                              return;                          }                          DefValue = Camera.FNumber.Value;                          break;                      case 2:                          if (Camera.Mode.Value != "M")                          {                              Error = TranslationStrings.LabelBracketingMMode;                          }                          DefValue = Camera.IsoNumber.Value;                          break;                  }
Missing Default,CameraControl.ViewModel,BracketingViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BracketingViewModel.cs,Stop,The following switch statement is missing a default case: switch (Mode)              {                  case 0:                      Camera.ExposureCompensation.Value = DefValue;                      break;                  case 1:                      Camera.FNumber.Value = DefValue;                      break;                  case 2:                      Camera.IsoNumber.Value = DefValue;                      break;              }
Missing Default,CameraControl.ViewModel,BracketingViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\BracketingViewModel.cs,SetMessage,The following switch statement is missing a default case: switch (Mode)              {                  case 0:                      {                          var vals = GetValues(ExpLowList.ToList()' ExpLow' ExpHigh' ExpCaptureCount);                          if (vals == null || vals.Count == 0)                              return;                          Values = vals;                          foreach (var val in vals)                          {                              Message += (val + "' ");                          }                      }                      break;                  case 1:                      {                          var vals = GetValues(FLowList.ToList()' FLow' FHigh' FCaptureCount);                          if (vals == null || vals.Count == 0)                              return;                          Values = vals;                          foreach (var val in vals)                          {                              Message += (val + "' ");                          }                      }                      break;                  case 2:                      {                          var vals = GetValues(IsoLowList.ToList()' IsoLow' IsoHigh' IsoCaptureCount);                          if (vals == null || vals.Count == 0)                              return;                          Values = vals;                          foreach (var val in vals)                          {                              Message += (val + "' ");                          }                      }                      break;              }
Missing Default,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManagerEvent,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.LiveViewWnd_StartMotionDetection:                      DetectMotion = true;                      TriggerOnMotion = true;                      MotionAction = 1;                      break;                  case WindowsCmdConsts.LiveViewWnd_StopMotionDetection:                      DetectMotion = false;                      break;                  case WindowsCmdConsts.LiveViewWnd_Maximize:                      ShowLeftTab = false;                      break;                  case WindowsCmdConsts.LiveViewWnd_StartRecord:                      RecordMovie();                      break;                  case WindowsCmdConsts.LiveViewWnd_StopRecord:                      StopRecordMovie();                      break;                }
Missing Default,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManager_Event1,The following switch statement is missing a default case: switch (vals[1])                      {                          case "CaptureTime":                              SnapshotCaptureTime = GetValue(vals' SnapshotCaptureTime);                              break;                          case "NumOfPhotos":                              SnapshotCaptureCount = GetValue(vals' SnapshotCaptureCount);                              break;                      }
Missing Default,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,WindowsManager_Event,The following switch statement is missing a default case: switch (cmd)              {                  case CmdConsts.LiveView_Capture:                      CaptureInThread();                      break;                  case CmdConsts.LiveView_CaptureSnapShot:                      CaptureSnapshot();                      break;                  case CmdConsts.LiveView_Focus_Move_Right:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX + ServiceProvider.Settings.FocusMoveStep' LiveViewData.FocusY);                      }                      break;                  case CmdConsts.LiveView_Focus_Move_Left:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX - ServiceProvider.Settings.FocusMoveStep' LiveViewData.FocusY);                      }                      break;                  case CmdConsts.LiveView_Focus_Move_Up:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX' LiveViewData.FocusY - ServiceProvider.Settings.FocusMoveStep);                      }                      break;                  case CmdConsts.LiveView_Focus_Move_Down:                      if (LiveViewData != null && LiveViewData.ImageData != null)                      {                          SetFocusPos(LiveViewData.FocusX' LiveViewData.FocusY + ServiceProvider.Settings.FocusMoveStep);                      }                      break;                  case CmdConsts.LiveView_Zoom_All:                      CameraDevice.LiveViewImageZoomRatio.SetValue(0);                      break;                  case CmdConsts.LiveView_Zoom_25:                      CameraDevice.LiveViewImageZoomRatio.SetValue(1);                      break;                  case CmdConsts.LiveView_Zoom_33:                      CameraDevice.LiveViewImageZoomRatio.SetValue(2);                      break;                  case CmdConsts.LiveView_Zoom_50:                      CameraDevice.LiveViewImageZoomRatio.SetValue(3);                      break;                  case CmdConsts.LiveView_Zoom_66:                      CameraDevice.LiveViewImageZoomRatio.SetValue(4);                      break;                  case CmdConsts.LiveView_Zoom_100:                      CameraDevice.LiveViewImageZoomRatio.SetValue(5);                      break;                  case CmdConsts.LiveView_Focus_M:                      FocusMCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_P:                      FocusPCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_MM:                      FocusMMCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_PP:                      FocusPPCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_MMM:                      FocusMMMCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus_PPP:                      FocusPPPCommand.Execute(null);                      break;                  case CmdConsts.LiveView_Focus:                      AutoFocus();                      break;                  case CmdConsts.LiveView_Preview:                      PreviewCommand.Execute(null);                      break;                  case CmdConsts.LiveView_NoProcess:                      NoProcessing = true;                      break;              }
Missing Default,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,ProcessLiveView,The following switch statement is missing a default case: switch (RotationIndex)              {                  case 0:                      Rotation = 0;                      break;                  case 1:                      Rotation = 90;                      break;                  case 2:                      Rotation = 180;                      break;                  case 3:                      Rotation = 270;                      break;                  case 4:                      Rotation = LiveViewData.Rotation;                      break;              }
Missing Default,CameraControl.ViewModel,LiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\LiveViewViewModel.cs,_focusStackingTimer_Elapsed,The following switch statement is missing a default case: switch (FocusStepSize)                          {                              case 0:                                  SetFocus(dir * (SimpleManualFocus ? ServiceProvider.Settings.SmallFocusStepCanon : ServiceProvider.Settings.SmalFocusStep));                                  break;                              case 1:                                  SetFocus(dir * (SimpleManualFocus ? ServiceProvider.Settings.MediumFocusStepCanon : ServiceProvider.Settings.MediumFocusStep));                                  break;                              case 2:                                  SetFocus(dir * (SimpleManualFocus ? ServiceProvider.Settings.LargeFocusStepCanon : ServiceProvider.Settings.LargeFocusStep));                                  break;                          }
Missing Default,CameraControl.ViewModel,MultipleLiveViewViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\MultipleLiveViewViewModel.cs,WindowsManager_Event,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.MultipleLiveView_Start:                      StartLiveView();                      break;                  case WindowsCmdConsts.MultipleLiveView_Stop:                      StopLiveView();                      break;              }
Missing Default,CameraControl.ViewModel,TimelapseViewModel,C:\repos\dukus_digiCamControl\CameraControl\ViewModel\TimelapseViewModel.cs,WindowsManager_Event,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.TimeLapse_Start:                      StartL();                      break;                  case WindowsCmdConsts.TimeLapse_Stop:                      StopL();                      break;                  case CmdConsts.All_Close:                      sched?.Shutdown();                      break;              }
Missing Default,CameraControl.windows,AstroLiveViewWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\AstroLiveViewWnd.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.AstroLiveViewWnd_Show:                      CameraDevice = param as ICameraDevice;                      if (CameraDevice == null)                          return;                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           DataContext = new AstroLiveViewViewModel(CameraDevice'this);                                                           Owner = ServiceProvider.PluginManager.SelectedWindow as Window;                                                           Show();                                                           Activate();                                                           Focus();                                                       }));                      break;                  case WindowsCmdConsts.AstroLiveViewWnd_Hide:                      try                      {                          ((AstroLiveViewViewModel)DataContext).UnInit();                      }                      catch (Exception exception)                      {                          Log.Error("Unable to stop live view"' exception);                      }                      Hide();                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           Hide();                                                           Close();                                                       }));                      break;              }
Missing Default,CameraControl.windows,BarcodeWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\BarcodeWnd.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.BarcodeWnd_Show:                      Dispatcher.Invoke(new Action(delegate                      {                          if (DataContext == null)                              DataContext = new BarcodeViewModel();                          Owner = ServiceProvider.PluginManager.SelectedWindow as Window;                          Show();                          Activate();                          Focus();                      }));                      break;                  case WindowsCmdConsts.BarcodeWnd_Hide:                      Hide();                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                      {                          Hide();                          Close();                      }));                      break;              }
Missing Default,CameraControl.windows,BrowseWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\BrowseWnd.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.BrowseWnd_Show:                      ServiceProvider.Settings.PropertyChanged += Settings_PropertyChanged;                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           Owner = ServiceProvider.PluginManager.SelectedWindow as Window;                                                           SelectedPhotoSession = ServiceProvider.Settings.DefaultSession;                                                           Show();                                                           Activate();                                                           Focus();                                                       }));                      break;                  case WindowsCmdConsts.BrowseWnd_Hide:                      {                          ServiceProvider.Settings.PropertyChanged -= Settings_PropertyChanged;                          Dispatcher.Invoke(new Action(Hide));                      }                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           Hide();                                                           Close();                                                       }));                      break;              }
Missing Default,CameraControl.windows,BulbWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.BulbWnd_Show:                      CameraDevice = param as ICameraDevice;                      if (CameraDevice == null)                          CameraDevice = ServiceProvider.DeviceManager.SelectedCameraDevice;                      if (CameraDevice == null)                      {                          Log.Debug("No camera for Bulb window !");                          return;                      }                      Dispatcher.Invoke(new Action(delegate                      {                          try                          {                              Init();                              CameraDevice.PhotoCaptured += CameraDevice_PhotoCaptured;                              ServiceProvider.ScriptManager.OutPutMessageReceived += ScriptManager_OutPutMessageReceived;                              //Owner = ServiceProvider.PluginManager.SelectedWindow as Window;                              Show();                              Activate();                              Focus();                          }                          catch (Exception e)                          {                              Log.Error("Bulb window initialization error "' e);                          }                      }));                      break;                  case WindowsCmdConsts.BulbWnd_Hide:                      if (_captureTimer.Enabled)                      {                          StopCaptureThread();                          CameraDevice.UnLockCamera();                      }                      _captureTimer.Stop();                      _waitTimer.Stop();                      ServiceProvider.ScriptManager.OutPutMessageReceived -= ScriptManager_OutPutMessageReceived;                      CameraDevice.PhotoCaptured -= CameraDevice_PhotoCaptured;                      ServiceProvider.ScriptManager.Save(DefaultScript' _defaultScriptFile);                      Hide();                      break;                  case CmdConsts.All_Close:                      ServiceProvider.ScriptManager.OutPutMessageReceived -= ScriptManager_OutPutMessageReceived;                      CameraDevice.PhotoCaptured -= CameraDevice_PhotoCaptured;                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           Hide();                                                           Close();                                                       }));                      break;                  case WindowsCmdConsts.BulbCaptureStart:                      if (IsVisible)                          btn_start_Click(null' null);                      break;                  case WindowsCmdConsts.BulbCaptureStop:                      if (IsVisible)                          btn_stop_Click(null' null);                      break;                  case WindowsCmdConsts.BulbScriptStart:                      if (IsVisible)                          button1_Click(null' null);                      break;                  case WindowsCmdConsts.BulbScriptStop:                      if (IsVisible)                          btn_stop_script_Click(null' null);                      break;              }
Missing Default,CameraControl.windows,BulbWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (vals[1])                      {                          case "CaptureTime":                              CaptureTime = GetValue(vals' CaptureTime);                               break;                          case "NumOfPhotos":                              NumOfPhotos = GetValue(vals' NumOfPhotos);                              break;                          case "WaitTime":                              WaitTime = GetValue(vals' WaitTime);                              break;                          case "PhdWait":                              PhdWait = GetValue(vals' PhdWait);                              break;                          case "AutomaticGuiding":                              AutomaticGuiding = GetValue(vals' 0) == 1;                              break;                          case "PhdType":                              PhdType = GetValue(vals' PhdType);                              break;                      }
Missing Default,CameraControl.windows,BulbWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\BulbWnd.xaml.cs,PhdGuiding,The following switch statement is missing a default case: switch (movetype)                  {                      case 1:                          SendReceiveTest2(socket' 3);                          break;                      case 2:                          SendReceiveTest2(socket' 4);                          break;                      case 3:                          SendReceiveTest2(socket' 5);                          break;                      case 4:                          SendReceiveTest2(socket' 12);                          break;                      case 5:                          SendReceiveTest2(socket' 13);                          break;                  }
Missing Default,CameraControl.windows,CameraPropertyWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\CameraPropertyWnd.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.CameraPropertyWnd_Show:                      PhotoSessionNames.Clear();                      PhotoSessionNames.Add("(None)");                      foreach (PhotoSession photoSession in ServiceProvider.Settings.PhotoSessions)                      {                          PhotoSessionNames.Add(photoSession.Name);                      }                      CameraPresets.Clear();                      CameraPresets.Add("(None)");                      foreach (var cameraPresets in ServiceProvider.Settings.CameraPresets)                      {                          CameraPresets.Add(cameraPresets.Name);                      }                        _cameraDevice = param as ICameraDevice;                      if (_cameraDevice == null)                          return;                      CameraProperty = _cameraDevice.LoadProperties();                      CameraProperty.BeginEdit();                      Dispatcher.Invoke(new Action(delegate                      {                          Owner = ServiceProvider.PluginManager.SelectedWindow as Window;                          Show();                          Activate();                          Focus();                      }));                      break;                  case WindowsCmdConsts.CameraPropertyWnd_Hide:                      CameraProperty = null;                      Hide();                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                                                     {                                                         Hide();                                                         Close();                                                     }));                      break;              }
Missing Default,CameraControl.windows,DownloadPhotosWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\DownloadPhotosWnd.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.DownloadPhotosWnd_Show:                      Dispatcher.BeginInvoke(new Action(delegate                                                       {                                                           if (dlg.IsVisible)                                                               return;                                                           Owner = ServiceProvider.PluginManager.SelectedWindow as Window;                                                           CameraDevice = param as ICameraDevice;                                                           Title = TranslationStrings.DownloadWindowTitle + "-" +                                                                   ServiceProvider.Settings.CameraProperties.Get(                                                                       CameraDevice).                                                                       DeviceName;                                                           if (param == null)                                                               return;                                                           Show();                                                           Activate();                                                           Focus();                                                           dlg.Show();                                                           Items.Clear();                                                           FreeResources();                                                           Thread thread = new Thread(PopulateImageList);                                                           thread.Start();                                                       }));                      break;                  case WindowsCmdConsts.DownloadPhotosWnd_Hide:                      Dispatcher.Invoke(new Action(delegate                      {                          Hide();                          FreeResources();                      }));                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           Hide();                                                           Close();                                                       }));                      break;              }
Missing Default,CameraControl.windows,FullScreenWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\FullScreenWnd.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.FullScreenWnd_Show:                      Dispatcher.BeginInvoke(new Action(delegate                                                            {                                                                Show();                                                                Activate();                                                                //Topmost = true;                                                                //Topmost = false;                                                                Focus();                                                                if (ServiceProvider.Settings.FullScreenInSecondaryMonitor)                                                                {                                                                    var allScreens =                                                                        System.Windows.Forms.Screen.AllScreens.ToList();                                                                    foreach (var r1 in from item in allScreens where !item.Primary select item.WorkingArea)                                                                    {                                                                        Left = r1.Left;                                                                        Top = r1.Top;                                                                        Width = r1.Width;                                                                        Height = r1.Height;                                                                        Topmost = true;                                                                        break;                                                                    }                                                                }                                                                WindowState = WindowState.Maximized;                                                                WindowStyle = WindowStyle.None;                                                            }));                      break;                  case WindowsCmdConsts.FullScreenWnd_ShowTimed:                      // wait for image preview to be generated                       var startTime = DateTime.Now;                      Thread.Sleep(150);                      while (                          ServiceProvider.Settings.SelectedBitmap != null && (ServiceProvider.Settings.SelectedBitmap.FileItem != null && ServiceProvider.Settings.SelectedBitmap.FileItem.Loading))                      {                          Thread.Sleep(10);                          if ((DateTime.Now - startTime).TotalSeconds > 3)                              break;                      }                      Dispatcher.BeginInvoke(new Action(delegate                                                            {                                                                try                                                                {                                                                    Show();                                                                    Activate();                                                                    Topmost = true;                                                                    Topmost = false;                                                                    Focus();                                                                    if (ServiceProvider.Settings.FullScreenInSecondaryMonitor)                                                                    {                                                                        var allScreens =                                                                            System.Windows.Forms.Screen.AllScreens.ToList();                                                                        foreach (var r1 in from item in allScreens where !item.Primary select item.WorkingArea)                                                                        {                                                                            Left = r1.Left;                                                                            Top = r1.Top;                                                                            Width = r1.Width;                                                                            Height = r1.Height;                                                                            Topmost = true;                                                                            break;                                                                        }                                                                    }                                                                    WindowState = WindowState.Maximized;                                                                    WindowStyle = WindowStyle.None;                                                                      _timer.Stop();                                                                    _timer.Interval = ServiceProvider.Settings.PreviewSeconds *                                                                                      1000;                                                                    _timer.Start();                                                                }                                                                catch (Exception ex)                                                                {                                                                    Log.Error("Full screen "' ex);                                                                }                                                            }));                      break;                  case WindowsCmdConsts.FullScreenWnd_Hide:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           _timer.Stop();                                                           Hide();                                                       }));                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           _timer.Stop();                                                           Hide();                                                           Close();                                                       }));                      break;              }
Missing Default,CameraControl.windows,LiveViewWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\LiveViewWnd.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.LiveViewWnd_Show:                      Dispatcher.Invoke(new Action(delegate                          {                              try                              {                                  ICameraDevice cameraparam = param as ICameraDevice;                                  var properties = cameraparam.LoadProperties();                                  if (properties.SaveLiveViewWindow && properties.WindowRect.Width > 0 &&                                      properties.WindowRect.Height > 0)                                  {                                      this.Left = properties.WindowRect.Left;                                      this.Top = properties.WindowRect.Top;                                      this.Width = properties.WindowRect.Width;                                      this.Height = properties.WindowRect.Height;                                  }                                  else                                  {                                      this.WindowState =                                          ((Window) ServiceProvider.PluginManager.SelectedWindow).WindowState;                                  }                                    if (cameraparam == SelectedPortableDevice && IsVisible)                                  {                                      Activate();                                      Focus();                                      return;                                  }                                      DataContext = new LiveViewViewModel(cameraparam' this);                                  SelectedPortableDevice = cameraparam;                                    Show();                                  Activate();                                  Focus();                                }                              catch (Exception exception)                              {                                  Log.Error("Error initialize live view window "' exception);                              }                          }                      ));                      break;                  case WindowsCmdConsts.LiveViewWnd_Hide:                      Dispatcher.Invoke(new Action(delegate                      {                          try                          {                              ICameraDevice cameraparam = ((LiveViewViewModel)DataContext).CameraDevice;                              var properties = cameraparam.LoadProperties();                              if (properties.SaveLiveViewWindow)                              {                                  properties.WindowRect = new Rect(this.Left' this.Top' this.Width' this.Height);                              }                              ((LiveViewViewModel)DataContext).UnInit();                          }                          catch (Exception exception)                          {                              Log.Error("Unable to stop live view"' exception);                          }                          Hide();                          //ServiceProvider.WindowsManager.ExecuteCommand(WindowsCmdConsts.FocusStackingWnd_Hide);                      }));                      break;                  case WindowsCmdConsts.LiveViewWnd_Message:                      {                          Dispatcher.Invoke(new Action(delegate                          {                              if (this.IsLoaded)                                  this.ShowMessageAsync(""' (string)param);                              else                              {                                  MessageBox.Show((string)param);                              }                          }));                      }                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                      {                          if (DataContext != null)                          {                              ICameraDevice cameraparam = ((LiveViewViewModel)DataContext).CameraDevice;                              var properties = cameraparam.LoadProperties();                              if (properties.SaveLiveViewWindow)                              {                                  properties.WindowRect = new Rect(this.Left' this.Top' this.Width' this.Height);                              }                              ((LiveViewViewModel)DataContext).UnInit();                              Hide();                              Close();                          }                      }));                      break;                  case CmdConsts.All_Minimize:                      Dispatcher.Invoke(new Action(delegate                      {                          WindowState = WindowState.Minimized;                      }));                      break;                  case WindowsCmdConsts.LiveViewWnd_Maximize:                      Dispatcher.Invoke(new Action(delegate                      {                          WindowState = WindowState.Maximized;                      }));                      break;              }
Missing Default,CameraControl.windows,MultipleCameraWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\MultipleCameraWnd.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.MultipleCamera_Start:                      Dispatcher.Invoke(() => btn_shot_Click(null' null));                      break;                  case WindowsCmdConsts.MultipleCamera_Stop:                      Dispatcher.Invoke(() => btn_stop_Click(null' null));                      break;                  case WindowsCmdConsts.MultipleCamera_Reset:                      Dispatcher.Invoke(() => btn_resetCounters_Click(null' null));                      break;                  case WindowsCmdConsts.MultipleCameraWnd_Show:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           Owner = ServiceProvider.PluginManager.SelectedWindow as Window;                                                           Show();                                                           Activate();                                                           Focus();                                                       }));                      break;                  case WindowsCmdConsts.MultipleCameraWnd_Hide:                      Hide();                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           Hide();                                                           Close();                                                       }));                      break;              }
Missing Default,CameraControl.windows,MultipleLiveView,C:\repos\dukus_digiCamControl\CameraControl\windows\MultipleLiveView.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.MultipleLiveViewWnd_Show:                      Dispatcher.Invoke(new Action(delegate                      {                          ((MultipleLiveViewViewModel)(DataContext)).InitCameras();                          Owner = ServiceProvider.PluginManager.SelectedWindow as Window;                          Show();                          Activate();                          Focus();                      }));                      break;                  case WindowsCmdConsts.MultipleLiveViewWnd_Hide:                      Dispatcher.BeginInvoke(new Action(Hide));                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                      {                          Hide();                          Close();                      }));                      break;                  case WindowsCmdConsts.MultipleLiveViewWnd_Maximize:                      Dispatcher.Invoke(new Action(delegate                      {                          this.WindowState=WindowState.Maximized;                      }));                      break;              }
Missing Default,CameraControl.windows,PrintWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\PrintWnd.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.PrintWnd_Show:                      Dispatcher.Invoke(new Action(delegate                      {                          var data = new PrintViewModel();                          Owner = (Window)ServiceProvider.PluginManager.SelectedWindow;                          data.LoadPrinterSettings();                          DataContext = data;                          Show();                          Activate();                          Focus();                      }));                      break;                  case WindowsCmdConsts.PrintWnd_Hide:                      Hide();                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                      {                          Hide();                          Close();                      }));                      break;              }
Missing Default,CameraControl.windows,ScriptWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\ScriptWnd.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.ScriptWnd_Show:                      Dispatcher.Invoke(new Action(delegate                      {                          Owner = ServiceProvider.PluginManager.SelectedWindow as Window;                          Show();                          Activate();                          ServiceProvider.ScriptManager.OutPutMessageReceived +=                              ScriptManager_OutPutMessageReceived;                          _manager.Output += manager_Output;                          Focus();                      }));                      break;                  case WindowsCmdConsts.ScriptWnd_Hide:                      ServiceProvider.ScriptManager.OutPutMessageReceived -= ScriptManager_OutPutMessageReceived;                      _manager.Output -= manager_Output;                      Hide();                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                      {                          ServiceProvider.ScriptManager.OutPutMessageReceived -=                              ScriptManager_OutPutMessageReceived;                          Hide();                          Close();                      }));                      break;              }
Missing Default,CameraControl.windows,StatisticsWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\StatisticsWnd.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.StatisticsWnd_Show:                      Dispatcher.Invoke(new Action(delegate                      {                          if (DataContext == null)                              DataContext = new StatisticsViewModel();                          Owner = ServiceProvider.PluginManager.SelectedWindow as Window;                          Show();                          Activate();                          Focus();                      }));                      break;                  case WindowsCmdConsts.StatisticsWnd_Hide:                      Hide();                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                      {                          Hide();                          Close();                      }));                      break;              }
Missing Default,CameraControl.windows,TagSelectorWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\TagSelectorWnd.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.TagSelectorWnd_Show:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           Owner = ServiceProvider.PluginManager.SelectedWindow as Window;                                                           LoadData();                                                           Show();                                                           Activate();                                                           Focus();                                                           ServiceProvider.DeviceManager.PhotoCaptured +=                                                               DeviceManager_PhotoCaptured;                                                       }));                      break;                  case WindowsCmdConsts.TagSelectorWnd_Hide:                      ServiceProvider.DeviceManager.PhotoCaptured -= DeviceManager_PhotoCaptured;                      Hide();                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                                                       {                                                           Hide();                                                           Close();                                                       }));                      break;              }
Missing Default,CameraControl.windows,TimeLapseWnd,C:\repos\dukus_digiCamControl\CameraControl\windows\TimeLapseWnd.xaml.cs,ExecuteCommand,The following switch statement is missing a default case: switch (cmd)              {                  case WindowsCmdConsts.TimeLapseWnd_Show:                      Dispatcher.Invoke(new Action(delegate                      {                          if (DataContext == null)                              DataContext = new TimelapseViewModel();                          Owner = ServiceProvider.PluginManager.SelectedWindow as Window;                          Show();                          Activate();                          Focus();                      }));                      break;                  case WindowsCmdConsts.TimeLapseWnd_Hide:                      Dispatcher.Invoke(new Action(Hide));                      break;                  case CmdConsts.All_Close:                      Dispatcher.Invoke(new Action(delegate                      {                          Hide();                          Close();                      }));                      break;              }
