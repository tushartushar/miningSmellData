Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,Cyclomatic complexity of the method is 8
Complex Method,Capture.Workflow.Core,WorkflowManager,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\WorkflowManager.cs,Load,Cyclomatic complexity of the method is 18
Long Statement,Capture.Workflow.Core.Classes,ServiceProvider,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\ServiceProvider.cs,Configure,The length of the statement  "	Log.Debug ("--------------------------------===========================Application starting===========================--------------------------------"); " is 153.
Long Statement,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,ConvertColor,The length of the statement  "	return (int)color.A << 24 | (int)(byte)((int)color.R * num >> 8) << 16 | (int)(byte)((int)color.G * num >> 8) << 8 | (int)(byte)((int)color.B * num >> 8); " is 154.
Long Statement,Capture.Workflow.Core,WorkflowManager,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\WorkflowManager.cs,DeviceManager_PhotoCaptured,The length of the statement  "		string tempFile = Path.Combine (Settings.Instance.TempFolder' Path.GetRandomFileName () + Path.GetExtension (eventArgs.FileName)); " is 130.
Long Statement,Capture.Workflow.Core,WorkflowManager,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\WorkflowManager.cs,GetLiveView,The length of the statement  "			using (MemoryStream stream = new MemoryStream (liveViewData.ImageData' liveViewData.ImageDataPosition' liveViewData.ImageData.Length - liveViewData.ImageDataPosition)) { " is 169.
Complex Conditional,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The conditional expression  "under && R < treshold && G < treshold && B < treshold"  is complex.
Complex Conditional,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The conditional expression  "over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold"  is complex.
Empty Catch Block,Capture.Workflow.Core.Classes,ServiceProvider,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\ServiceProvider.cs,Configure,The method has an empty catch block.
Empty Catch Block,Capture.Workflow.Core,WorkflowManager,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\WorkflowManager.cs,GetLiveView,The method has an empty catch block.
Magic Number,Capture.Workflow.Core.Classes,ServiceProvider,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\ServiceProvider.cs,Configure,The following statement contains a magic number: if (!isConfigured) {  	// Setup RollingFileAppender  	var fileAppender = new RollingFileAppender {  		Layout = new PatternLayout ("%d [%t]%-5p %c [%x] - %m%n")'  		MaximumFileSize = "7000KB"'  		MaxSizeRollBackups = 2'  		RollingStyle = RollingFileAppender.RollingMode.Size'  		AppendToFile = true'  		File = logFile'  		ImmediateFlush = true'  		LockingModel = new FileAppender.MinimalLock ()'  		Name = "XXXRollingFileAppender"  	};  	fileAppender.ActivateOptions ();  	// IMPORTANT' creates the file  	BasicConfigurator.Configure (fileAppender);  	#if DEBUG  	// Setup TraceAppender  	TraceAppender ta = new TraceAppender ();  	ta.Layout = new PatternLayout ("%d [%t]%-5p %c [%x] - %m%n");  	BasicConfigurator.Configure (ta);  	#endif  }  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Save2Jpg,The following statement contains a magic number: using (FileStream stream = new FileStream (filename' FileMode.Create)) {  	JpegBitmapEncoder encoder = new JpegBitmapEncoder ();  	encoder.Frames.Add (BitmapFrame.Create (source));  	encoder.QualityLevel = 90;  	encoder.Save (stream);  	stream.Close ();  }  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Save2Jpg,The following statement contains a magic number: encoder.QualityLevel = 90;  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: using (BitmapContext bitmapContext = bitmap.GetBitmapContext ()) {  	for (var i = 0; i < bitmapContext.Width * bitmapContext.Height; i++) {  		int num1 = bitmapContext.Pixels [i];  		byte a = (byte)(num1 >> 24);  		int num2 = (int)a;  		if (num2 == 0)  			num2 = 1;  		int num3 = 65280 / num2;  		//Color col = Color.FromArgb(a' (byte)((num1 >> 16 & (int)byte.MaxValue) * num3 >> 8)'  		//                           (byte)((num1 >> 8 & (int)byte.MaxValue) * num3 >> 8)'  		//                           (byte)((num1 & (int)byte.MaxValue) * num3 >> 8));  		byte R = (byte)((num1 >> 16 & Byte.MaxValue) * num3 >> 8);  		byte G = (byte)((num1 >> 8 & Byte.MaxValue) * num3 >> 8);  		byte B = (byte)((num1 & Byte.MaxValue) * num3 >> 8);  		if (under && R < treshold && G < treshold && B < treshold)  			bitmapContext.Pixels [i] = color1;  		if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)  			bitmapContext.Pixels [i] = color2;  	}  }  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: using (BitmapContext bitmapContext = bitmap.GetBitmapContext ()) {  	for (var i = 0; i < bitmapContext.Width * bitmapContext.Height; i++) {  		int num1 = bitmapContext.Pixels [i];  		byte a = (byte)(num1 >> 24);  		int num2 = (int)a;  		if (num2 == 0)  			num2 = 1;  		int num3 = 65280 / num2;  		//Color col = Color.FromArgb(a' (byte)((num1 >> 16 & (int)byte.MaxValue) * num3 >> 8)'  		//                           (byte)((num1 >> 8 & (int)byte.MaxValue) * num3 >> 8)'  		//                           (byte)((num1 & (int)byte.MaxValue) * num3 >> 8));  		byte R = (byte)((num1 >> 16 & Byte.MaxValue) * num3 >> 8);  		byte G = (byte)((num1 >> 8 & Byte.MaxValue) * num3 >> 8);  		byte B = (byte)((num1 & Byte.MaxValue) * num3 >> 8);  		if (under && R < treshold && G < treshold && B < treshold)  			bitmapContext.Pixels [i] = color1;  		if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)  			bitmapContext.Pixels [i] = color2;  	}  }  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: using (BitmapContext bitmapContext = bitmap.GetBitmapContext ()) {  	for (var i = 0; i < bitmapContext.Width * bitmapContext.Height; i++) {  		int num1 = bitmapContext.Pixels [i];  		byte a = (byte)(num1 >> 24);  		int num2 = (int)a;  		if (num2 == 0)  			num2 = 1;  		int num3 = 65280 / num2;  		//Color col = Color.FromArgb(a' (byte)((num1 >> 16 & (int)byte.MaxValue) * num3 >> 8)'  		//                           (byte)((num1 >> 8 & (int)byte.MaxValue) * num3 >> 8)'  		//                           (byte)((num1 & (int)byte.MaxValue) * num3 >> 8));  		byte R = (byte)((num1 >> 16 & Byte.MaxValue) * num3 >> 8);  		byte G = (byte)((num1 >> 8 & Byte.MaxValue) * num3 >> 8);  		byte B = (byte)((num1 & Byte.MaxValue) * num3 >> 8);  		if (under && R < treshold && G < treshold && B < treshold)  			bitmapContext.Pixels [i] = color1;  		if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)  			bitmapContext.Pixels [i] = color2;  	}  }  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: using (BitmapContext bitmapContext = bitmap.GetBitmapContext ()) {  	for (var i = 0; i < bitmapContext.Width * bitmapContext.Height; i++) {  		int num1 = bitmapContext.Pixels [i];  		byte a = (byte)(num1 >> 24);  		int num2 = (int)a;  		if (num2 == 0)  			num2 = 1;  		int num3 = 65280 / num2;  		//Color col = Color.FromArgb(a' (byte)((num1 >> 16 & (int)byte.MaxValue) * num3 >> 8)'  		//                           (byte)((num1 >> 8 & (int)byte.MaxValue) * num3 >> 8)'  		//                           (byte)((num1 & (int)byte.MaxValue) * num3 >> 8));  		byte R = (byte)((num1 >> 16 & Byte.MaxValue) * num3 >> 8);  		byte G = (byte)((num1 >> 8 & Byte.MaxValue) * num3 >> 8);  		byte B = (byte)((num1 & Byte.MaxValue) * num3 >> 8);  		if (under && R < treshold && G < treshold && B < treshold)  			bitmapContext.Pixels [i] = color1;  		if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)  			bitmapContext.Pixels [i] = color2;  	}  }  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: using (BitmapContext bitmapContext = bitmap.GetBitmapContext ()) {  	for (var i = 0; i < bitmapContext.Width * bitmapContext.Height; i++) {  		int num1 = bitmapContext.Pixels [i];  		byte a = (byte)(num1 >> 24);  		int num2 = (int)a;  		if (num2 == 0)  			num2 = 1;  		int num3 = 65280 / num2;  		//Color col = Color.FromArgb(a' (byte)((num1 >> 16 & (int)byte.MaxValue) * num3 >> 8)'  		//                           (byte)((num1 >> 8 & (int)byte.MaxValue) * num3 >> 8)'  		//                           (byte)((num1 & (int)byte.MaxValue) * num3 >> 8));  		byte R = (byte)((num1 >> 16 & Byte.MaxValue) * num3 >> 8);  		byte G = (byte)((num1 >> 8 & Byte.MaxValue) * num3 >> 8);  		byte B = (byte)((num1 & Byte.MaxValue) * num3 >> 8);  		if (under && R < treshold && G < treshold && B < treshold)  			bitmapContext.Pixels [i] = color1;  		if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)  			bitmapContext.Pixels [i] = color2;  	}  }  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: using (BitmapContext bitmapContext = bitmap.GetBitmapContext ()) {  	for (var i = 0; i < bitmapContext.Width * bitmapContext.Height; i++) {  		int num1 = bitmapContext.Pixels [i];  		byte a = (byte)(num1 >> 24);  		int num2 = (int)a;  		if (num2 == 0)  			num2 = 1;  		int num3 = 65280 / num2;  		//Color col = Color.FromArgb(a' (byte)((num1 >> 16 & (int)byte.MaxValue) * num3 >> 8)'  		//                           (byte)((num1 >> 8 & (int)byte.MaxValue) * num3 >> 8)'  		//                           (byte)((num1 & (int)byte.MaxValue) * num3 >> 8));  		byte R = (byte)((num1 >> 16 & Byte.MaxValue) * num3 >> 8);  		byte G = (byte)((num1 >> 8 & Byte.MaxValue) * num3 >> 8);  		byte B = (byte)((num1 & Byte.MaxValue) * num3 >> 8);  		if (under && R < treshold && G < treshold && B < treshold)  			bitmapContext.Pixels [i] = color1;  		if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)  			bitmapContext.Pixels [i] = color2;  	}  }  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: using (BitmapContext bitmapContext = bitmap.GetBitmapContext ()) {  	for (var i = 0; i < bitmapContext.Width * bitmapContext.Height; i++) {  		int num1 = bitmapContext.Pixels [i];  		byte a = (byte)(num1 >> 24);  		int num2 = (int)a;  		if (num2 == 0)  			num2 = 1;  		int num3 = 65280 / num2;  		//Color col = Color.FromArgb(a' (byte)((num1 >> 16 & (int)byte.MaxValue) * num3 >> 8)'  		//                           (byte)((num1 >> 8 & (int)byte.MaxValue) * num3 >> 8)'  		//                           (byte)((num1 & (int)byte.MaxValue) * num3 >> 8));  		byte R = (byte)((num1 >> 16 & Byte.MaxValue) * num3 >> 8);  		byte G = (byte)((num1 >> 8 & Byte.MaxValue) * num3 >> 8);  		byte B = (byte)((num1 & Byte.MaxValue) * num3 >> 8);  		if (under && R < treshold && G < treshold && B < treshold)  			bitmapContext.Pixels [i] = color1;  		if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)  			bitmapContext.Pixels [i] = color2;  	}  }  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: using (BitmapContext bitmapContext = bitmap.GetBitmapContext ()) {  	for (var i = 0; i < bitmapContext.Width * bitmapContext.Height; i++) {  		int num1 = bitmapContext.Pixels [i];  		byte a = (byte)(num1 >> 24);  		int num2 = (int)a;  		if (num2 == 0)  			num2 = 1;  		int num3 = 65280 / num2;  		//Color col = Color.FromArgb(a' (byte)((num1 >> 16 & (int)byte.MaxValue) * num3 >> 8)'  		//                           (byte)((num1 >> 8 & (int)byte.MaxValue) * num3 >> 8)'  		//                           (byte)((num1 & (int)byte.MaxValue) * num3 >> 8));  		byte R = (byte)((num1 >> 16 & Byte.MaxValue) * num3 >> 8);  		byte G = (byte)((num1 >> 8 & Byte.MaxValue) * num3 >> 8);  		byte B = (byte)((num1 & Byte.MaxValue) * num3 >> 8);  		if (under && R < treshold && G < treshold && B < treshold)  			bitmapContext.Pixels [i] = color1;  		if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)  			bitmapContext.Pixels [i] = color2;  	}  }  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: using (BitmapContext bitmapContext = bitmap.GetBitmapContext ()) {  	for (var i = 0; i < bitmapContext.Width * bitmapContext.Height; i++) {  		int num1 = bitmapContext.Pixels [i];  		byte a = (byte)(num1 >> 24);  		int num2 = (int)a;  		if (num2 == 0)  			num2 = 1;  		int num3 = 65280 / num2;  		//Color col = Color.FromArgb(a' (byte)((num1 >> 16 & (int)byte.MaxValue) * num3 >> 8)'  		//                           (byte)((num1 >> 8 & (int)byte.MaxValue) * num3 >> 8)'  		//                           (byte)((num1 & (int)byte.MaxValue) * num3 >> 8));  		byte R = (byte)((num1 >> 16 & Byte.MaxValue) * num3 >> 8);  		byte G = (byte)((num1 >> 8 & Byte.MaxValue) * num3 >> 8);  		byte B = (byte)((num1 & Byte.MaxValue) * num3 >> 8);  		if (under && R < treshold && G < treshold && B < treshold)  			bitmapContext.Pixels [i] = color1;  		if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)  			bitmapContext.Pixels [i] = color2;  	}  }  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: using (BitmapContext bitmapContext = bitmap.GetBitmapContext ()) {  	for (var i = 0; i < bitmapContext.Width * bitmapContext.Height; i++) {  		int num1 = bitmapContext.Pixels [i];  		byte a = (byte)(num1 >> 24);  		int num2 = (int)a;  		if (num2 == 0)  			num2 = 1;  		int num3 = 65280 / num2;  		//Color col = Color.FromArgb(a' (byte)((num1 >> 16 & (int)byte.MaxValue) * num3 >> 8)'  		//                           (byte)((num1 >> 8 & (int)byte.MaxValue) * num3 >> 8)'  		//                           (byte)((num1 & (int)byte.MaxValue) * num3 >> 8));  		byte R = (byte)((num1 >> 16 & Byte.MaxValue) * num3 >> 8);  		byte G = (byte)((num1 >> 8 & Byte.MaxValue) * num3 >> 8);  		byte B = (byte)((num1 & Byte.MaxValue) * num3 >> 8);  		if (under && R < treshold && G < treshold && B < treshold)  			bitmapContext.Pixels [i] = color1;  		if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)  			bitmapContext.Pixels [i] = color2;  	}  }  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: for (var i = 0; i < bitmapContext.Width * bitmapContext.Height; i++) {  	int num1 = bitmapContext.Pixels [i];  	byte a = (byte)(num1 >> 24);  	int num2 = (int)a;  	if (num2 == 0)  		num2 = 1;  	int num3 = 65280 / num2;  	//Color col = Color.FromArgb(a' (byte)((num1 >> 16 & (int)byte.MaxValue) * num3 >> 8)'  	//                           (byte)((num1 >> 8 & (int)byte.MaxValue) * num3 >> 8)'  	//                           (byte)((num1 & (int)byte.MaxValue) * num3 >> 8));  	byte R = (byte)((num1 >> 16 & Byte.MaxValue) * num3 >> 8);  	byte G = (byte)((num1 >> 8 & Byte.MaxValue) * num3 >> 8);  	byte B = (byte)((num1 & Byte.MaxValue) * num3 >> 8);  	if (under && R < treshold && G < treshold && B < treshold)  		bitmapContext.Pixels [i] = color1;  	if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)  		bitmapContext.Pixels [i] = color2;  }  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: for (var i = 0; i < bitmapContext.Width * bitmapContext.Height; i++) {  	int num1 = bitmapContext.Pixels [i];  	byte a = (byte)(num1 >> 24);  	int num2 = (int)a;  	if (num2 == 0)  		num2 = 1;  	int num3 = 65280 / num2;  	//Color col = Color.FromArgb(a' (byte)((num1 >> 16 & (int)byte.MaxValue) * num3 >> 8)'  	//                           (byte)((num1 >> 8 & (int)byte.MaxValue) * num3 >> 8)'  	//                           (byte)((num1 & (int)byte.MaxValue) * num3 >> 8));  	byte R = (byte)((num1 >> 16 & Byte.MaxValue) * num3 >> 8);  	byte G = (byte)((num1 >> 8 & Byte.MaxValue) * num3 >> 8);  	byte B = (byte)((num1 & Byte.MaxValue) * num3 >> 8);  	if (under && R < treshold && G < treshold && B < treshold)  		bitmapContext.Pixels [i] = color1;  	if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)  		bitmapContext.Pixels [i] = color2;  }  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: for (var i = 0; i < bitmapContext.Width * bitmapContext.Height; i++) {  	int num1 = bitmapContext.Pixels [i];  	byte a = (byte)(num1 >> 24);  	int num2 = (int)a;  	if (num2 == 0)  		num2 = 1;  	int num3 = 65280 / num2;  	//Color col = Color.FromArgb(a' (byte)((num1 >> 16 & (int)byte.MaxValue) * num3 >> 8)'  	//                           (byte)((num1 >> 8 & (int)byte.MaxValue) * num3 >> 8)'  	//                           (byte)((num1 & (int)byte.MaxValue) * num3 >> 8));  	byte R = (byte)((num1 >> 16 & Byte.MaxValue) * num3 >> 8);  	byte G = (byte)((num1 >> 8 & Byte.MaxValue) * num3 >> 8);  	byte B = (byte)((num1 & Byte.MaxValue) * num3 >> 8);  	if (under && R < treshold && G < treshold && B < treshold)  		bitmapContext.Pixels [i] = color1;  	if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)  		bitmapContext.Pixels [i] = color2;  }  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: for (var i = 0; i < bitmapContext.Width * bitmapContext.Height; i++) {  	int num1 = bitmapContext.Pixels [i];  	byte a = (byte)(num1 >> 24);  	int num2 = (int)a;  	if (num2 == 0)  		num2 = 1;  	int num3 = 65280 / num2;  	//Color col = Color.FromArgb(a' (byte)((num1 >> 16 & (int)byte.MaxValue) * num3 >> 8)'  	//                           (byte)((num1 >> 8 & (int)byte.MaxValue) * num3 >> 8)'  	//                           (byte)((num1 & (int)byte.MaxValue) * num3 >> 8));  	byte R = (byte)((num1 >> 16 & Byte.MaxValue) * num3 >> 8);  	byte G = (byte)((num1 >> 8 & Byte.MaxValue) * num3 >> 8);  	byte B = (byte)((num1 & Byte.MaxValue) * num3 >> 8);  	if (under && R < treshold && G < treshold && B < treshold)  		bitmapContext.Pixels [i] = color1;  	if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)  		bitmapContext.Pixels [i] = color2;  }  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: for (var i = 0; i < bitmapContext.Width * bitmapContext.Height; i++) {  	int num1 = bitmapContext.Pixels [i];  	byte a = (byte)(num1 >> 24);  	int num2 = (int)a;  	if (num2 == 0)  		num2 = 1;  	int num3 = 65280 / num2;  	//Color col = Color.FromArgb(a' (byte)((num1 >> 16 & (int)byte.MaxValue) * num3 >> 8)'  	//                           (byte)((num1 >> 8 & (int)byte.MaxValue) * num3 >> 8)'  	//                           (byte)((num1 & (int)byte.MaxValue) * num3 >> 8));  	byte R = (byte)((num1 >> 16 & Byte.MaxValue) * num3 >> 8);  	byte G = (byte)((num1 >> 8 & Byte.MaxValue) * num3 >> 8);  	byte B = (byte)((num1 & Byte.MaxValue) * num3 >> 8);  	if (under && R < treshold && G < treshold && B < treshold)  		bitmapContext.Pixels [i] = color1;  	if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)  		bitmapContext.Pixels [i] = color2;  }  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: for (var i = 0; i < bitmapContext.Width * bitmapContext.Height; i++) {  	int num1 = bitmapContext.Pixels [i];  	byte a = (byte)(num1 >> 24);  	int num2 = (int)a;  	if (num2 == 0)  		num2 = 1;  	int num3 = 65280 / num2;  	//Color col = Color.FromArgb(a' (byte)((num1 >> 16 & (int)byte.MaxValue) * num3 >> 8)'  	//                           (byte)((num1 >> 8 & (int)byte.MaxValue) * num3 >> 8)'  	//                           (byte)((num1 & (int)byte.MaxValue) * num3 >> 8));  	byte R = (byte)((num1 >> 16 & Byte.MaxValue) * num3 >> 8);  	byte G = (byte)((num1 >> 8 & Byte.MaxValue) * num3 >> 8);  	byte B = (byte)((num1 & Byte.MaxValue) * num3 >> 8);  	if (under && R < treshold && G < treshold && B < treshold)  		bitmapContext.Pixels [i] = color1;  	if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)  		bitmapContext.Pixels [i] = color2;  }  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: for (var i = 0; i < bitmapContext.Width * bitmapContext.Height; i++) {  	int num1 = bitmapContext.Pixels [i];  	byte a = (byte)(num1 >> 24);  	int num2 = (int)a;  	if (num2 == 0)  		num2 = 1;  	int num3 = 65280 / num2;  	//Color col = Color.FromArgb(a' (byte)((num1 >> 16 & (int)byte.MaxValue) * num3 >> 8)'  	//                           (byte)((num1 >> 8 & (int)byte.MaxValue) * num3 >> 8)'  	//                           (byte)((num1 & (int)byte.MaxValue) * num3 >> 8));  	byte R = (byte)((num1 >> 16 & Byte.MaxValue) * num3 >> 8);  	byte G = (byte)((num1 >> 8 & Byte.MaxValue) * num3 >> 8);  	byte B = (byte)((num1 & Byte.MaxValue) * num3 >> 8);  	if (under && R < treshold && G < treshold && B < treshold)  		bitmapContext.Pixels [i] = color1;  	if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)  		bitmapContext.Pixels [i] = color2;  }  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: for (var i = 0; i < bitmapContext.Width * bitmapContext.Height; i++) {  	int num1 = bitmapContext.Pixels [i];  	byte a = (byte)(num1 >> 24);  	int num2 = (int)a;  	if (num2 == 0)  		num2 = 1;  	int num3 = 65280 / num2;  	//Color col = Color.FromArgb(a' (byte)((num1 >> 16 & (int)byte.MaxValue) * num3 >> 8)'  	//                           (byte)((num1 >> 8 & (int)byte.MaxValue) * num3 >> 8)'  	//                           (byte)((num1 & (int)byte.MaxValue) * num3 >> 8));  	byte R = (byte)((num1 >> 16 & Byte.MaxValue) * num3 >> 8);  	byte G = (byte)((num1 >> 8 & Byte.MaxValue) * num3 >> 8);  	byte B = (byte)((num1 & Byte.MaxValue) * num3 >> 8);  	if (under && R < treshold && G < treshold && B < treshold)  		bitmapContext.Pixels [i] = color1;  	if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)  		bitmapContext.Pixels [i] = color2;  }  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: for (var i = 0; i < bitmapContext.Width * bitmapContext.Height; i++) {  	int num1 = bitmapContext.Pixels [i];  	byte a = (byte)(num1 >> 24);  	int num2 = (int)a;  	if (num2 == 0)  		num2 = 1;  	int num3 = 65280 / num2;  	//Color col = Color.FromArgb(a' (byte)((num1 >> 16 & (int)byte.MaxValue) * num3 >> 8)'  	//                           (byte)((num1 >> 8 & (int)byte.MaxValue) * num3 >> 8)'  	//                           (byte)((num1 & (int)byte.MaxValue) * num3 >> 8));  	byte R = (byte)((num1 >> 16 & Byte.MaxValue) * num3 >> 8);  	byte G = (byte)((num1 >> 8 & Byte.MaxValue) * num3 >> 8);  	byte B = (byte)((num1 & Byte.MaxValue) * num3 >> 8);  	if (under && R < treshold && G < treshold && B < treshold)  		bitmapContext.Pixels [i] = color1;  	if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)  		bitmapContext.Pixels [i] = color2;  }  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: for (var i = 0; i < bitmapContext.Width * bitmapContext.Height; i++) {  	int num1 = bitmapContext.Pixels [i];  	byte a = (byte)(num1 >> 24);  	int num2 = (int)a;  	if (num2 == 0)  		num2 = 1;  	int num3 = 65280 / num2;  	//Color col = Color.FromArgb(a' (byte)((num1 >> 16 & (int)byte.MaxValue) * num3 >> 8)'  	//                           (byte)((num1 >> 8 & (int)byte.MaxValue) * num3 >> 8)'  	//                           (byte)((num1 & (int)byte.MaxValue) * num3 >> 8));  	byte R = (byte)((num1 >> 16 & Byte.MaxValue) * num3 >> 8);  	byte G = (byte)((num1 >> 8 & Byte.MaxValue) * num3 >> 8);  	byte B = (byte)((num1 & Byte.MaxValue) * num3 >> 8);  	if (under && R < treshold && G < treshold && B < treshold)  		bitmapContext.Pixels [i] = color1;  	if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)  		bitmapContext.Pixels [i] = color2;  }  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)  	bitmapContext.Pixels [i] = color2;  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)  	bitmapContext.Pixels [i] = color2;  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)  	bitmapContext.Pixels [i] = color2;  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,ConvertColor,The following statement contains a magic number: return (int)color.A << 24 | (int)(byte)((int)color.R * num >> 8) << 16 | (int)(byte)((int)color.G * num >> 8) << 8 | (int)(byte)((int)color.B * num >> 8);  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,ConvertColor,The following statement contains a magic number: return (int)color.A << 24 | (int)(byte)((int)color.R * num >> 8) << 16 | (int)(byte)((int)color.G * num >> 8) << 8 | (int)(byte)((int)color.B * num >> 8);  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,ConvertColor,The following statement contains a magic number: return (int)color.A << 24 | (int)(byte)((int)color.R * num >> 8) << 16 | (int)(byte)((int)color.G * num >> 8) << 8 | (int)(byte)((int)color.B * num >> 8);  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,ConvertColor,The following statement contains a magic number: return (int)color.A << 24 | (int)(byte)((int)color.R * num >> 8) << 16 | (int)(byte)((int)color.G * num >> 8) << 8 | (int)(byte)((int)color.B * num >> 8);  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,ConvertColor,The following statement contains a magic number: return (int)color.A << 24 | (int)(byte)((int)color.R * num >> 8) << 16 | (int)(byte)((int)color.G * num >> 8) << 8 | (int)(byte)((int)color.B * num >> 8);  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,ConvertColor,The following statement contains a magic number: return (int)color.A << 24 | (int)(byte)((int)color.R * num >> 8) << 16 | (int)(byte)((int)color.G * num >> 8) << 8 | (int)(byte)((int)color.B * num >> 8);  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,WaitForFile,The following statement contains a magic number: while (IsFileLocked (file) && retry > 0) {  	Thread.Sleep (100);  	retry--;  }  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,WaitForFile,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,Capture.Workflow.Core.Classes,Utils,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,UrlExists,The following statement contains a magic number: request.Timeout = 5000;  
Magic Number,Capture.Workflow.Core,WorkflowManager,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\WorkflowManager.cs,WorkflowManager,The following statement contains a magic number: _liveViewTimer.Interval = TimeSpan.FromMilliseconds (40);  
Magic Number,Capture.Workflow.Core,WorkflowManager,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\WorkflowManager.cs,DeviceManager_PhotoCaptured,The following statement contains a magic number: try {  	string tempFile = Path.Combine (Settings.Instance.TempFolder' Path.GetRandomFileName () + Path.GetExtension (eventArgs.FileName));  	Utils.CreateFolder (tempFile);  	if (File.Exists (tempFile))  		File.Delete (tempFile);  	eventArgs.CameraDevice.TransferFile (eventArgs.Handle' tempFile);  	FileItem item = new FileItem () {  		FileName = tempFile'  		Thumb = Utils.LoadImage (tempFile' 200' 0)  	};  	FileItems.Add (item);  	FileItem = item;  	item.ThumbFile = Path.GetTempFileName ();  	Utils.Save2Jpg (Utils.LoadImage (tempFile' 800' 0)' item.ThumbFile);  	OnMessage (new MessageEventArgs (Messages.PhotoDownloaded' FileItem));  } catch (Exception ex) {  	Log.Error ("Error transfer file"' ex);  }  
Magic Number,Capture.Workflow.Core,WorkflowManager,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\WorkflowManager.cs,DeviceManager_PhotoCaptured,The following statement contains a magic number: try {  	string tempFile = Path.Combine (Settings.Instance.TempFolder' Path.GetRandomFileName () + Path.GetExtension (eventArgs.FileName));  	Utils.CreateFolder (tempFile);  	if (File.Exists (tempFile))  		File.Delete (tempFile);  	eventArgs.CameraDevice.TransferFile (eventArgs.Handle' tempFile);  	FileItem item = new FileItem () {  		FileName = tempFile'  		Thumb = Utils.LoadImage (tempFile' 200' 0)  	};  	FileItems.Add (item);  	FileItem = item;  	item.ThumbFile = Path.GetTempFileName ();  	Utils.Save2Jpg (Utils.LoadImage (tempFile' 800' 0)' item.ThumbFile);  	OnMessage (new MessageEventArgs (Messages.PhotoDownloaded' FileItem));  } catch (Exception ex) {  	Log.Error ("Error transfer file"' ex);  }  
Magic Number,Capture.Workflow.Core,WorkflowManager,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\WorkflowManager.cs,DeviceManager_PhotoCaptured,The following statement contains a magic number: Utils.Save2Jpg (Utils.LoadImage (tempFile' 800' 0)' item.ThumbFile);  
Missing Default,Capture.Workflow.Core,WorkflowManager,F:\newReposMay17\dukus_digiCamControl\Capture.Workflow.Core\WorkflowManager.cs,OnMessage,The following switch statement is missing a default case: switch (e.Name) {  case Messages.StartLiveView:  	_liveViewTimer.Start ();  	break;  case Messages.StopLiveView:  	_liveViewTimer.Stop ();  	break;  }  
