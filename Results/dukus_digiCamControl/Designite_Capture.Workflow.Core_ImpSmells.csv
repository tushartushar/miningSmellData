Implementation smell,Namespace,Class,File,Method,Description
Long Method,SQLite,TableQuery<T>,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Database\SQLite.cs,CompileExpr,The method has 159 lines of code.
Long Method,Capture.Workflow.Core,WorkflowManager,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\WorkflowManager.cs,Load,The method has 118 lines of code.
Complex Method,SQLite,SQLiteConnection,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Database\SQLite.cs,CreateTable,Cyclomatic complexity of the method is 9
Complex Method,Capture.Workflow.Core,WorkflowManager,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\WorkflowManager.cs,Load,Cyclomatic complexity of the method is 17
Long Parameter List,SQLite,SQLite3,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Database\SQLite.cs,Prepare2,The method has 5 parameters. Parameters: db' sql' numBytes' stmt' pzTail
Long Parameter List,SQLite,SQLite3,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Database\SQLite.cs,BindText,The method has 5 parameters. Parameters: stmt' index' val' n' free
Long Parameter List,SQLite,SQLite3,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Database\SQLite.cs,BindBlob,The method has 5 parameters. Parameters: stmt' index' val' n' free
Long Statement,Capture.Workflow.Core.Classes,ServiceProvider,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\ServiceProvider.cs,Configure,The length of the statement  "                "--------------------------------===========================Application starting===========================--------------------------------"); " is 142.
Long Statement,SQLite,SQLiteConnection,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Database\SQLite.cs,Execute,The length of the statement  "				Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0)); " is 129.
Long Statement,SQLite,SQLiteConnection,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Database\SQLite.cs,ExecuteScalar,The length of the statement  "				Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0)); " is 129.
Long Statement,SQLite,SQLiteConnection,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Database\SQLite.cs,DoSavePointExecute,The length of the statement  "			throw new ArgumentException ("savePoint is not valid' and should be the result of a call to SaveTransactionPoint."' "savePoint"); " is 129.
Long Statement,SQLite,SQLiteConnection,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Database\SQLite.cs,Update,The length of the statement  "				if (ex.Result == SQLite3.Result.Constraint && SQLite3.ExtendedErrCode (this.Handle) == SQLite3.ExtendedResult.ConstraintNotNull) { " is 130.
Long Statement,SQLite,Orm,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Database\SQLite.cs,SqlType,The length of the statement  "			if (clrType == typeof(Boolean) || clrType == typeof(Byte) || clrType == typeof(UInt16) || clrType == typeof(SByte) || clrType == typeof(Int16) || clrType == typeof(Int32)) { " is 173.
Long Statement,SQLite,PreparedSqlLiteInsertCommand,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Database\SQLite.cs,ExecuteNonQuery,The length of the statement  "			} else if (r == SQLite3.Result.Constraint && SQLite3.ExtendedErrCode (Connection.Handle) == SQLite3.ExtendedResult.ConstraintNotNull) { " is 135.
Long Statement,SQLite,TableQuery<T>,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Database\SQLite.cs,GenerateCommand,The length of the statement  "					var t = string.Join ("' "' _orderBys.Select (o => "\"" + o.ColumnName + "\"" + (o.Ascending ? "" : " desc")).ToArray ()); " is 121.
Long Statement,SQLite,TableQuery<T>,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Database\SQLite.cs,CompileExpr,The length of the statement  "					if (val != null && val is System.Collections.IEnumerable && !(val is string) && !(val is System.Collections.Generic.IEnumerable<byte>)) { " is 137.
Long Statement,CSScriptNativeApi,CodeDomSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.native.cs,LoadMethod_Static,The length of the statement  "                // Note: you can use GetStaticMethodWithArgs for higher precision method search: GetStaticMethodWithArgs("*.SayHello"' typeof(string));  " is 135.
Long Statement,Capture.Workflow.Core.Scripting,ScriptEngine,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting\ScriptEngine.cs,GetVariablesAssign,The length of the statement  "                res+=string.Format("{0} = ({1}){2}.WorkFlow.Variables[\"{0}\"].GetAsObject();\n"'variable.Name'variable.GetCSType()'varPrefix); " is 127.
Long Statement,Capture.Workflow.Core,WorkflowManager,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\WorkflowManager.cs,GetLiveView,The length of the statement  "                        stream.Write(liveViewData.ImageData' liveViewData.ImageDataPosition' liveViewData.ImageData.Length - liveViewData.ImageDataPosition); " is 133.
Complex Conditional,Capture.Workflow.Core.Classes,Utils,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The conditional expression  "under && R < treshold && G < treshold && B < treshold"  is complex.
Complex Conditional,Capture.Workflow.Core.Classes,Utils,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The conditional expression  "over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold"  is complex.
Complex Conditional,SQLite,Column,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Database\SQLite.cs,Column,The conditional expression  "!Indices.Any()                      && !IsPK                      && ((createFlags & CreateFlags.ImplicitIndex) == CreateFlags.ImplicitIndex)                      && Name.EndsWith (Orm.ImplicitIndexSuffix' StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,SQLite,Orm,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Database\SQLite.cs,SqlType,The conditional expression  "clrType == typeof(Boolean) || clrType == typeof(Byte) || clrType == typeof(UInt16) || clrType == typeof(SByte) || clrType == typeof(Int16) || clrType == typeof(Int32)"  is complex.
Complex Conditional,SQLite,SQLiteCommand,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Database\SQLite.cs,BindParameter,The conditional expression  "value is Byte || value is UInt16 || value is SByte || value is Int16"  is complex.
Complex Conditional,SQLite,TableQuery<T>,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Database\SQLite.cs,CompileExpr,The conditional expression  "val != null && val is System.Collections.IEnumerable && !(val is string) && !(val is System.Collections.Generic.IEnumerable<byte>)"  is complex.
Empty Catch Block,Capture.Workflow.Core.Classes,ServiceProvider,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\ServiceProvider.cs,Configure,The method has an empty catch block.
Empty Catch Block,Capture.Workflow.Core,WorkflowManager,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\WorkflowManager.cs,GetLiveView,The method has an empty catch block.
Magic Number,Capture.Workflow.Core.Classes,QueueManager,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\QueueManager.cs,Process,The following statement contains a magic number: while (true)              {                  try                  {                      var items = WorkflowManager.Instance.Database.GetList();                      Count = items.Count;                      foreach (var item in items)                      {                          IWorkflowQueueCommand command;                          if (_loadedCommands.ContainsKey(item.Action))                          {                              command = _loadedCommands[item.Action];                          }                          else                          {                              command = WorkflowManager.Instance.GetQueueCommandPlugin(item.Action);                              _loadedCommands.Add(item.Action' command);                          }                            try                          {                              item.Done = command.ExecuteQueue(item);                          }                          catch (Exception e)                          {                              //// prevent multiple log for same error                              //if (string.IsNullOrEmpty(ErrorMessage))                              //{                              //    Log.Error("Queue error"' e);                              //}                              ErrorMessage = e.Message;                              item.Error = e.Message;                          }                              if (item.Done == true)                          {                              Count--;                              ErrorMessage = "";                          }                          WorkflowManager.Instance.Database.Save(item);                          Thread.Sleep(150);                          if (_shouldStop)                          {                              break;                          }                      }                  }                  catch (Exception ex)                  {                      ErrorMessage = ex.Message;                      Log.Error("Queue error"' ex);                  }                  if (_shouldStop)                  {                      break;                  }                  Thread.Sleep(500);              }
Magic Number,Capture.Workflow.Core.Classes,QueueManager,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\QueueManager.cs,Process,The following statement contains a magic number: while (true)              {                  try                  {                      var items = WorkflowManager.Instance.Database.GetList();                      Count = items.Count;                      foreach (var item in items)                      {                          IWorkflowQueueCommand command;                          if (_loadedCommands.ContainsKey(item.Action))                          {                              command = _loadedCommands[item.Action];                          }                          else                          {                              command = WorkflowManager.Instance.GetQueueCommandPlugin(item.Action);                              _loadedCommands.Add(item.Action' command);                          }                            try                          {                              item.Done = command.ExecuteQueue(item);                          }                          catch (Exception e)                          {                              //// prevent multiple log for same error                              //if (string.IsNullOrEmpty(ErrorMessage))                              //{                              //    Log.Error("Queue error"' e);                              //}                              ErrorMessage = e.Message;                              item.Error = e.Message;                          }                              if (item.Done == true)                          {                              Count--;                              ErrorMessage = "";                          }                          WorkflowManager.Instance.Database.Save(item);                          Thread.Sleep(150);                          if (_shouldStop)                          {                              break;                          }                      }                  }                  catch (Exception ex)                  {                      ErrorMessage = ex.Message;                      Log.Error("Queue error"' ex);                  }                  if (_shouldStop)                  {                      break;                  }                  Thread.Sleep(500);              }
Magic Number,Capture.Workflow.Core.Classes,ServiceProvider,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\ServiceProvider.cs,Configure,The following statement contains a magic number: if (!isConfigured)              {                  // Setup RollingFileAppender                  var fileAppender = new RollingFileAppender                  {                      Layout =                          new PatternLayout(                          "%d [%t]%-5p %c [%x] - %m%n")'                      MaximumFileSize = "7000KB"'                      MaxSizeRollBackups = 2'                      RollingStyle = RollingFileAppender.RollingMode.Size'                      AppendToFile = true'                      File = logFile'                      ImmediateFlush = true'                      LockingModel = new FileAppender.MinimalLock()'                      Name = "XXXRollingFileAppender"                  };                  fileAppender.ActivateOptions(); // IMPORTANT' creates the file                  BasicConfigurator.Configure(fileAppender);  #if DEBUG                  // Setup TraceAppender                  TraceAppender ta = new TraceAppender();                  ta.Layout = new PatternLayout("%d [%t]%-5p %c [%x] - %m%n");                  BasicConfigurator.Configure(ta);  #endif              }
Magic Number,Capture.Workflow.Core.Classes,Utils,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Save2Jpg,The following statement contains a magic number: encoder.QualityLevel = 90;
Magic Number,Capture.Workflow.Core.Classes,Utils,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: int treshold = 2;
Magic Number,Capture.Workflow.Core.Classes,Utils,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: using (BitmapContext bitmapContext = bitmap.GetBitmapContext())              {                  for (var i = 0; i < bitmapContext.Width * bitmapContext.Height; i++)                  {                      int num1 = bitmapContext.Pixels[i];                      byte a = (byte)(num1 >> 24);                      int num2 = (int)a;                      if (num2 == 0)                          num2 = 1;                      int num3 = 65280 / num2;                      //Color col = Color.FromArgb(a' (byte)((num1 >> 16 & (int)byte.MaxValue) * num3 >> 8)'                      //                           (byte)((num1 >> 8 & (int)byte.MaxValue) * num3 >> 8)'                      //                           (byte)((num1 & (int)byte.MaxValue) * num3 >> 8));                      byte R = (byte)((num1 >> 16 & Byte.MaxValue) * num3 >> 8);                      byte G = (byte)((num1 >> 8 & Byte.MaxValue) * num3 >> 8);                      byte B = (byte)((num1 & Byte.MaxValue) * num3 >> 8);                        if (under && R < treshold && G < treshold && B < treshold)                          bitmapContext.Pixels[i] = color1;                      if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)                          bitmapContext.Pixels[i] = color2;                  }              }
Magic Number,Capture.Workflow.Core.Classes,Utils,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: using (BitmapContext bitmapContext = bitmap.GetBitmapContext())              {                  for (var i = 0; i < bitmapContext.Width * bitmapContext.Height; i++)                  {                      int num1 = bitmapContext.Pixels[i];                      byte a = (byte)(num1 >> 24);                      int num2 = (int)a;                      if (num2 == 0)                          num2 = 1;                      int num3 = 65280 / num2;                      //Color col = Color.FromArgb(a' (byte)((num1 >> 16 & (int)byte.MaxValue) * num3 >> 8)'                      //                           (byte)((num1 >> 8 & (int)byte.MaxValue) * num3 >> 8)'                      //                           (byte)((num1 & (int)byte.MaxValue) * num3 >> 8));                      byte R = (byte)((num1 >> 16 & Byte.MaxValue) * num3 >> 8);                      byte G = (byte)((num1 >> 8 & Byte.MaxValue) * num3 >> 8);                      byte B = (byte)((num1 & Byte.MaxValue) * num3 >> 8);                        if (under && R < treshold && G < treshold && B < treshold)                          bitmapContext.Pixels[i] = color1;                      if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)                          bitmapContext.Pixels[i] = color2;                  }              }
Magic Number,Capture.Workflow.Core.Classes,Utils,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: using (BitmapContext bitmapContext = bitmap.GetBitmapContext())              {                  for (var i = 0; i < bitmapContext.Width * bitmapContext.Height; i++)                  {                      int num1 = bitmapContext.Pixels[i];                      byte a = (byte)(num1 >> 24);                      int num2 = (int)a;                      if (num2 == 0)                          num2 = 1;                      int num3 = 65280 / num2;                      //Color col = Color.FromArgb(a' (byte)((num1 >> 16 & (int)byte.MaxValue) * num3 >> 8)'                      //                           (byte)((num1 >> 8 & (int)byte.MaxValue) * num3 >> 8)'                      //                           (byte)((num1 & (int)byte.MaxValue) * num3 >> 8));                      byte R = (byte)((num1 >> 16 & Byte.MaxValue) * num3 >> 8);                      byte G = (byte)((num1 >> 8 & Byte.MaxValue) * num3 >> 8);                      byte B = (byte)((num1 & Byte.MaxValue) * num3 >> 8);                        if (under && R < treshold && G < treshold && B < treshold)                          bitmapContext.Pixels[i] = color1;                      if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)                          bitmapContext.Pixels[i] = color2;                  }              }
Magic Number,Capture.Workflow.Core.Classes,Utils,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: using (BitmapContext bitmapContext = bitmap.GetBitmapContext())              {                  for (var i = 0; i < bitmapContext.Width * bitmapContext.Height; i++)                  {                      int num1 = bitmapContext.Pixels[i];                      byte a = (byte)(num1 >> 24);                      int num2 = (int)a;                      if (num2 == 0)                          num2 = 1;                      int num3 = 65280 / num2;                      //Color col = Color.FromArgb(a' (byte)((num1 >> 16 & (int)byte.MaxValue) * num3 >> 8)'                      //                           (byte)((num1 >> 8 & (int)byte.MaxValue) * num3 >> 8)'                      //                           (byte)((num1 & (int)byte.MaxValue) * num3 >> 8));                      byte R = (byte)((num1 >> 16 & Byte.MaxValue) * num3 >> 8);                      byte G = (byte)((num1 >> 8 & Byte.MaxValue) * num3 >> 8);                      byte B = (byte)((num1 & Byte.MaxValue) * num3 >> 8);                        if (under && R < treshold && G < treshold && B < treshold)                          bitmapContext.Pixels[i] = color1;                      if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)                          bitmapContext.Pixels[i] = color2;                  }              }
Magic Number,Capture.Workflow.Core.Classes,Utils,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: using (BitmapContext bitmapContext = bitmap.GetBitmapContext())              {                  for (var i = 0; i < bitmapContext.Width * bitmapContext.Height; i++)                  {                      int num1 = bitmapContext.Pixels[i];                      byte a = (byte)(num1 >> 24);                      int num2 = (int)a;                      if (num2 == 0)                          num2 = 1;                      int num3 = 65280 / num2;                      //Color col = Color.FromArgb(a' (byte)((num1 >> 16 & (int)byte.MaxValue) * num3 >> 8)'                      //                           (byte)((num1 >> 8 & (int)byte.MaxValue) * num3 >> 8)'                      //                           (byte)((num1 & (int)byte.MaxValue) * num3 >> 8));                      byte R = (byte)((num1 >> 16 & Byte.MaxValue) * num3 >> 8);                      byte G = (byte)((num1 >> 8 & Byte.MaxValue) * num3 >> 8);                      byte B = (byte)((num1 & Byte.MaxValue) * num3 >> 8);                        if (under && R < treshold && G < treshold && B < treshold)                          bitmapContext.Pixels[i] = color1;                      if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)                          bitmapContext.Pixels[i] = color2;                  }              }
Magic Number,Capture.Workflow.Core.Classes,Utils,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: using (BitmapContext bitmapContext = bitmap.GetBitmapContext())              {                  for (var i = 0; i < bitmapContext.Width * bitmapContext.Height; i++)                  {                      int num1 = bitmapContext.Pixels[i];                      byte a = (byte)(num1 >> 24);                      int num2 = (int)a;                      if (num2 == 0)                          num2 = 1;                      int num3 = 65280 / num2;                      //Color col = Color.FromArgb(a' (byte)((num1 >> 16 & (int)byte.MaxValue) * num3 >> 8)'                      //                           (byte)((num1 >> 8 & (int)byte.MaxValue) * num3 >> 8)'                      //                           (byte)((num1 & (int)byte.MaxValue) * num3 >> 8));                      byte R = (byte)((num1 >> 16 & Byte.MaxValue) * num3 >> 8);                      byte G = (byte)((num1 >> 8 & Byte.MaxValue) * num3 >> 8);                      byte B = (byte)((num1 & Byte.MaxValue) * num3 >> 8);                        if (under && R < treshold && G < treshold && B < treshold)                          bitmapContext.Pixels[i] = color1;                      if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)                          bitmapContext.Pixels[i] = color2;                  }              }
Magic Number,Capture.Workflow.Core.Classes,Utils,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: using (BitmapContext bitmapContext = bitmap.GetBitmapContext())              {                  for (var i = 0; i < bitmapContext.Width * bitmapContext.Height; i++)                  {                      int num1 = bitmapContext.Pixels[i];                      byte a = (byte)(num1 >> 24);                      int num2 = (int)a;                      if (num2 == 0)                          num2 = 1;                      int num3 = 65280 / num2;                      //Color col = Color.FromArgb(a' (byte)((num1 >> 16 & (int)byte.MaxValue) * num3 >> 8)'                      //                           (byte)((num1 >> 8 & (int)byte.MaxValue) * num3 >> 8)'                      //                           (byte)((num1 & (int)byte.MaxValue) * num3 >> 8));                      byte R = (byte)((num1 >> 16 & Byte.MaxValue) * num3 >> 8);                      byte G = (byte)((num1 >> 8 & Byte.MaxValue) * num3 >> 8);                      byte B = (byte)((num1 & Byte.MaxValue) * num3 >> 8);                        if (under && R < treshold && G < treshold && B < treshold)                          bitmapContext.Pixels[i] = color1;                      if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)                          bitmapContext.Pixels[i] = color2;                  }              }
Magic Number,Capture.Workflow.Core.Classes,Utils,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: using (BitmapContext bitmapContext = bitmap.GetBitmapContext())              {                  for (var i = 0; i < bitmapContext.Width * bitmapContext.Height; i++)                  {                      int num1 = bitmapContext.Pixels[i];                      byte a = (byte)(num1 >> 24);                      int num2 = (int)a;                      if (num2 == 0)                          num2 = 1;                      int num3 = 65280 / num2;                      //Color col = Color.FromArgb(a' (byte)((num1 >> 16 & (int)byte.MaxValue) * num3 >> 8)'                      //                           (byte)((num1 >> 8 & (int)byte.MaxValue) * num3 >> 8)'                      //                           (byte)((num1 & (int)byte.MaxValue) * num3 >> 8));                      byte R = (byte)((num1 >> 16 & Byte.MaxValue) * num3 >> 8);                      byte G = (byte)((num1 >> 8 & Byte.MaxValue) * num3 >> 8);                      byte B = (byte)((num1 & Byte.MaxValue) * num3 >> 8);                        if (under && R < treshold && G < treshold && B < treshold)                          bitmapContext.Pixels[i] = color1;                      if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)                          bitmapContext.Pixels[i] = color2;                  }              }
Magic Number,Capture.Workflow.Core.Classes,Utils,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: using (BitmapContext bitmapContext = bitmap.GetBitmapContext())              {                  for (var i = 0; i < bitmapContext.Width * bitmapContext.Height; i++)                  {                      int num1 = bitmapContext.Pixels[i];                      byte a = (byte)(num1 >> 24);                      int num2 = (int)a;                      if (num2 == 0)                          num2 = 1;                      int num3 = 65280 / num2;                      //Color col = Color.FromArgb(a' (byte)((num1 >> 16 & (int)byte.MaxValue) * num3 >> 8)'                      //                           (byte)((num1 >> 8 & (int)byte.MaxValue) * num3 >> 8)'                      //                           (byte)((num1 & (int)byte.MaxValue) * num3 >> 8));                      byte R = (byte)((num1 >> 16 & Byte.MaxValue) * num3 >> 8);                      byte G = (byte)((num1 >> 8 & Byte.MaxValue) * num3 >> 8);                      byte B = (byte)((num1 & Byte.MaxValue) * num3 >> 8);                        if (under && R < treshold && G < treshold && B < treshold)                          bitmapContext.Pixels[i] = color1;                      if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)                          bitmapContext.Pixels[i] = color2;                  }              }
Magic Number,Capture.Workflow.Core.Classes,Utils,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,Highlight,The following statement contains a magic number: using (BitmapContext bitmapContext = bitmap.GetBitmapContext())              {                  for (var i = 0; i < bitmapContext.Width * bitmapContext.Height; i++)                  {                      int num1 = bitmapContext.Pixels[i];                      byte a = (byte)(num1 >> 24);                      int num2 = (int)a;                      if (num2 == 0)                          num2 = 1;                      int num3 = 65280 / num2;                      //Color col = Color.FromArgb(a' (byte)((num1 >> 16 & (int)byte.MaxValue) * num3 >> 8)'                      //                           (byte)((num1 >> 8 & (int)byte.MaxValue) * num3 >> 8)'                      //                           (byte)((num1 & (int)byte.MaxValue) * num3 >> 8));                      byte R = (byte)((num1 >> 16 & Byte.MaxValue) * num3 >> 8);                      byte G = (byte)((num1 >> 8 & Byte.MaxValue) * num3 >> 8);                      byte B = (byte)((num1 & Byte.MaxValue) * num3 >> 8);                        if (under && R < treshold && G < treshold && B < treshold)                          bitmapContext.Pixels[i] = color1;                      if (over && R > 255 - treshold && G > 255 - treshold && B > 255 - treshold)                          bitmapContext.Pixels[i] = color2;                  }              }
Magic Number,Capture.Workflow.Core.Classes,Utils,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,ConvertColor,The following statement contains a magic number: return (int)color.A << 24 | (int)(byte)((int)color.R * num >> 8) << 16 |                     (int)(byte)((int)color.G * num >> 8) << 8 | (int)(byte)((int)color.B * num >> 8);
Magic Number,Capture.Workflow.Core.Classes,Utils,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,ConvertColor,The following statement contains a magic number: return (int)color.A << 24 | (int)(byte)((int)color.R * num >> 8) << 16 |                     (int)(byte)((int)color.G * num >> 8) << 8 | (int)(byte)((int)color.B * num >> 8);
Magic Number,Capture.Workflow.Core.Classes,Utils,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,ConvertColor,The following statement contains a magic number: return (int)color.A << 24 | (int)(byte)((int)color.R * num >> 8) << 16 |                     (int)(byte)((int)color.G * num >> 8) << 8 | (int)(byte)((int)color.B * num >> 8);
Magic Number,Capture.Workflow.Core.Classes,Utils,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,ConvertColor,The following statement contains a magic number: return (int)color.A << 24 | (int)(byte)((int)color.R * num >> 8) << 16 |                     (int)(byte)((int)color.G * num >> 8) << 8 | (int)(byte)((int)color.B * num >> 8);
Magic Number,Capture.Workflow.Core.Classes,Utils,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,ConvertColor,The following statement contains a magic number: return (int)color.A << 24 | (int)(byte)((int)color.R * num >> 8) << 16 |                     (int)(byte)((int)color.G * num >> 8) << 8 | (int)(byte)((int)color.B * num >> 8);
Magic Number,Capture.Workflow.Core.Classes,Utils,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,ConvertColor,The following statement contains a magic number: return (int)color.A << 24 | (int)(byte)((int)color.R * num >> 8) << 16 |                     (int)(byte)((int)color.G * num >> 8) << 8 | (int)(byte)((int)color.B * num >> 8);
Magic Number,Capture.Workflow.Core.Classes,Utils,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,SmoothHistogram,The following statement contains a magic number: double[] mask = new double[] { 0.25' 0.5' 0.25 };
Magic Number,Capture.Workflow.Core.Classes,Utils,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,SmoothHistogram,The following statement contains a magic number: double[] mask = new double[] { 0.25' 0.5' 0.25 };
Magic Number,Capture.Workflow.Core.Classes,Utils,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,SmoothHistogram,The following statement contains a magic number: double[] mask = new double[] { 0.25' 0.5' 0.25 };
Magic Number,Capture.Workflow.Core.Classes,Utils,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,WaitForFile,The following statement contains a magic number: int retry = 15;
Magic Number,Capture.Workflow.Core.Classes,Utils,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,WaitForFile,The following statement contains a magic number: while (IsFileLocked(file) && retry > 0)              {                  Thread.Sleep(100);                  retry--;              }
Magic Number,Capture.Workflow.Core.Classes,Utils,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\Utils.cs,UrlExists,The following statement contains a magic number: request.Timeout = 5000;
Magic Number,SQLite,SQLiteConnection,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Database\SQLite.cs,SQLiteConnection,The following statement contains a magic number: BusyTimeout = TimeSpan.FromSeconds (0.1);
Magic Number,SQLite,SQLiteConnection,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Database\SQLite.cs,Execute,The following statement contains a magic number: if (TimeExecution) {  				_sw.Stop ();  				_elapsedMilliseconds += _sw.ElapsedMilliseconds;  				Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0));  			}
Magic Number,SQLite,SQLiteConnection,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Database\SQLite.cs,ExecuteScalar,The following statement contains a magic number: if (TimeExecution) {  				_sw.Stop ();  				_elapsedMilliseconds += _sw.ElapsedMilliseconds;  				Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0));  			}
Magic Number,SQLite,SQLiteConnection,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Database\SQLite.cs,DoSavePointExecute,The following statement contains a magic number: if (firstLen >= 2 && savepoint.Length > firstLen + 1) {  				int depth;  				if (Int32.TryParse (savepoint.Substring (firstLen + 1)' out depth)) {  					// TODO: Mild race here' but inescapable without locking almost everywhere.  					if (0 <= depth && depth < _transactionDepth) {  #if NETFX_CORE                          Volatile.Write (ref _transactionDepth' depth);  #elif SILVERLIGHT  						_transactionDepth = depth;  #else                          Thread.VolatileWrite (ref _transactionDepth' depth);  #endif                          Execute (cmd + savepoint);  						return;  					}  				}  			}
Magic Number,SQLite,SQLiteCommand,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Database\SQLite.cs,BindParameter,The following statement contains a magic number: if (value == null) {  				SQLite3.BindNull (stmt' index);  			} else {  				if (value is Int32) {  					SQLite3.BindInt (stmt' index' (int)value);  				} else if (value is String) {  					SQLite3.BindText (stmt' index' (string)value' -1' NegativePointer);  				} else if (value is Byte || value is UInt16 || value is SByte || value is Int16) {  					SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));  				} else if (value is Boolean) {  					SQLite3.BindInt (stmt' index' (bool)value ? 1 : 0);  				} else if (value is UInt32 || value is Int64) {  					SQLite3.BindInt64 (stmt' index' Convert.ToInt64 (value));  				} else if (value is Single || value is Double || value is Decimal) {  					SQLite3.BindDouble (stmt' index' Convert.ToDouble (value));  				} else if (value is TimeSpan) {  					SQLite3.BindInt64(stmt' index' ((TimeSpan)value).Ticks);  				} else if (value is DateTime) {  					if (storeDateTimeAsTicks) {  						SQLite3.BindInt64 (stmt' index' ((DateTime)value).Ticks);  					}  					else {  						SQLite3.BindText (stmt' index' ((DateTime)value).ToString ("yyyy-MM-dd HH:mm:ss")' -1' NegativePointer);  					}  				} else if (value is DateTimeOffset) {  					SQLite3.BindInt64 (stmt' index' ((DateTimeOffset)value).UtcTicks);  #if !NETFX_CORE  				} else if (value.GetType().IsEnum) {  #else  				} else if (value.GetType().GetTypeInfo().IsEnum) {  #endif  					SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));                  } else if (value is byte[]){                      SQLite3.BindBlob(stmt' index' (byte[]) value' ((byte[]) value).Length' NegativePointer);                  } else if (value is Guid) {                      SQLite3.BindText(stmt' index' ((Guid)value).ToString()' 72' NegativePointer);                  } else {                      throw new NotSupportedException("Cannot store type: " + value.GetType());                  }  			}
Magic Number,SQLite,TableQuery<T>,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Database\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr == null) {  				throw new NotSupportedException ("Expression is NULL");  			} else if (expr is BinaryExpression) {  				var bin = (BinaryExpression)expr;  				  				var leftr = CompileExpr (bin.Left' queryArgs);  				var rightr = CompileExpr (bin.Right' queryArgs);    				//If either side is a parameter and is null' then handle the other side specially (for "is null"/"is not null")  				string text;  				if (leftr.CommandText == "?" && leftr.Value == null)  					text = CompileNullBinaryExpression(bin' rightr);  				else if (rightr.CommandText == "?" && rightr.Value == null)  					text = CompileNullBinaryExpression(bin' leftr);  				else  					text = "(" + leftr.CommandText + " " + GetSqlName(bin) + " " + rightr.CommandText + ")";  				return new CompileResult { CommandText = text };  			} else if (expr.NodeType == ExpressionType.Call) {  				  				var call = (MethodCallExpression)expr;  				var args = new CompileResult[call.Arguments.Count];  				var obj = call.Object != null ? CompileExpr (call.Object' queryArgs) : null;  				  				for (var i = 0; i < args.Length; i++) {  					args [i] = CompileExpr (call.Arguments [i]' queryArgs);  				}  				  				var sqlCall = "";  				  				if (call.Method.Name == "Like" && args.Length == 2) {  					sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  				}  				else if (call.Method.Name == "Contains" && args.Length == 2) {  					sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  				}  				else if (call.Method.Name == "Contains" && args.Length == 1) {  					if (call.Object != null && call.Object.Type == typeof(string)) {  						sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  					}  					else {  						sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  					}  				}  				else if (call.Method.Name == "StartsWith" && args.Length == 1) {  					sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  				}  				else if (call.Method.Name == "EndsWith" && args.Length == 1) {  					sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  				}  				else if (call.Method.Name == "Equals" && args.Length == 1) {  					sqlCall = "(" + obj.CommandText + " = (" + args[0].CommandText + "))";  				} else if (call.Method.Name == "ToLower") {  					sqlCall = "(lower(" + obj.CommandText + "))";   				} else if (call.Method.Name == "ToUpper") {  					sqlCall = "(upper(" + obj.CommandText + "))";   				} else {  					sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  				}  				return new CompileResult { CommandText = sqlCall };  				  			} else if (expr.NodeType == ExpressionType.Constant) {  				var c = (ConstantExpression)expr;  				queryArgs.Add (c.Value);  				return new CompileResult {  					CommandText = "?"'  					Value = c.Value  				};  			} else if (expr.NodeType == ExpressionType.Convert) {  				var u = (UnaryExpression)expr;  				var ty = u.Type;  				var valr = CompileExpr (u.Operand' queryArgs);  				return new CompileResult {  					CommandText = valr.CommandText'  					Value = valr.Value != null ? ConvertTo (valr.Value' ty) : null  				};  			} else if (expr.NodeType == ExpressionType.MemberAccess) {  				var mem = (MemberExpression)expr;  				  				if (mem.Expression!=null && mem.Expression.NodeType == ExpressionType.Parameter) {  					//  					// This is a column of our table' output just the column name  					// Need to translate it if that column name is mapped  					//  					var columnName = Table.FindColumnWithPropertyName (mem.Member.Name).Name;  					return new CompileResult { CommandText = "\"" + columnName + "\"" };  				} else {  					object obj = null;  					if (mem.Expression != null) {  						var r = CompileExpr (mem.Expression' queryArgs);  						if (r.Value == null) {  							throw new NotSupportedException ("Member access failed to compile expression");  						}  						if (r.CommandText == "?") {  							queryArgs.RemoveAt (queryArgs.Count - 1);  						}  						obj = r.Value;  					}  					  					//  					// Get the member value  					//  					object val = null;  					  #if !NETFX_CORE  					if (mem.Member.MemberType == MemberTypes.Property) {  #else  					if (mem.Member is PropertyInfo) {  #endif  						var m = (PropertyInfo)mem.Member;  						val = m.GetValue (obj' null);  #if !NETFX_CORE  					} else if (mem.Member.MemberType == MemberTypes.Field) {  #else  					} else if (mem.Member is FieldInfo) {  #endif  #if SILVERLIGHT  						val = Expression.Lambda (expr).Compile ().DynamicInvoke ();  #else  						var m = (FieldInfo)mem.Member;  						val = m.GetValue (obj);  #endif  					} else {  #if !NETFX_CORE  						throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType);  #else  						throw new NotSupportedException ("MemberExpr: " + mem.Member.DeclaringType);  #endif  					}  					  					//  					// Work special magic for enumerables  					//  					if (val != null && val is System.Collections.IEnumerable && !(val is string) && !(val is System.Collections.Generic.IEnumerable<byte>)) {  						var sb = new System.Text.StringBuilder();  						sb.Append("(");  						var head = "";  						foreach (var a in (System.Collections.IEnumerable)val) {  							queryArgs.Add(a);  							sb.Append(head);  							sb.Append("?");  							head = "'";  						}  						sb.Append(")");  						return new CompileResult {  							CommandText = sb.ToString()'  							Value = val  						};  					}  					else {  						queryArgs.Add (val);  						return new CompileResult {  							CommandText = "?"'  							Value = val  						};  					}  				}  			}
Magic Number,SQLite,TableQuery<T>,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Database\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr == null) {  				throw new NotSupportedException ("Expression is NULL");  			} else if (expr is BinaryExpression) {  				var bin = (BinaryExpression)expr;  				  				var leftr = CompileExpr (bin.Left' queryArgs);  				var rightr = CompileExpr (bin.Right' queryArgs);    				//If either side is a parameter and is null' then handle the other side specially (for "is null"/"is not null")  				string text;  				if (leftr.CommandText == "?" && leftr.Value == null)  					text = CompileNullBinaryExpression(bin' rightr);  				else if (rightr.CommandText == "?" && rightr.Value == null)  					text = CompileNullBinaryExpression(bin' leftr);  				else  					text = "(" + leftr.CommandText + " " + GetSqlName(bin) + " " + rightr.CommandText + ")";  				return new CompileResult { CommandText = text };  			} else if (expr.NodeType == ExpressionType.Call) {  				  				var call = (MethodCallExpression)expr;  				var args = new CompileResult[call.Arguments.Count];  				var obj = call.Object != null ? CompileExpr (call.Object' queryArgs) : null;  				  				for (var i = 0; i < args.Length; i++) {  					args [i] = CompileExpr (call.Arguments [i]' queryArgs);  				}  				  				var sqlCall = "";  				  				if (call.Method.Name == "Like" && args.Length == 2) {  					sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  				}  				else if (call.Method.Name == "Contains" && args.Length == 2) {  					sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  				}  				else if (call.Method.Name == "Contains" && args.Length == 1) {  					if (call.Object != null && call.Object.Type == typeof(string)) {  						sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  					}  					else {  						sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  					}  				}  				else if (call.Method.Name == "StartsWith" && args.Length == 1) {  					sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  				}  				else if (call.Method.Name == "EndsWith" && args.Length == 1) {  					sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  				}  				else if (call.Method.Name == "Equals" && args.Length == 1) {  					sqlCall = "(" + obj.CommandText + " = (" + args[0].CommandText + "))";  				} else if (call.Method.Name == "ToLower") {  					sqlCall = "(lower(" + obj.CommandText + "))";   				} else if (call.Method.Name == "ToUpper") {  					sqlCall = "(upper(" + obj.CommandText + "))";   				} else {  					sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  				}  				return new CompileResult { CommandText = sqlCall };  				  			} else if (expr.NodeType == ExpressionType.Constant) {  				var c = (ConstantExpression)expr;  				queryArgs.Add (c.Value);  				return new CompileResult {  					CommandText = "?"'  					Value = c.Value  				};  			} else if (expr.NodeType == ExpressionType.Convert) {  				var u = (UnaryExpression)expr;  				var ty = u.Type;  				var valr = CompileExpr (u.Operand' queryArgs);  				return new CompileResult {  					CommandText = valr.CommandText'  					Value = valr.Value != null ? ConvertTo (valr.Value' ty) : null  				};  			} else if (expr.NodeType == ExpressionType.MemberAccess) {  				var mem = (MemberExpression)expr;  				  				if (mem.Expression!=null && mem.Expression.NodeType == ExpressionType.Parameter) {  					//  					// This is a column of our table' output just the column name  					// Need to translate it if that column name is mapped  					//  					var columnName = Table.FindColumnWithPropertyName (mem.Member.Name).Name;  					return new CompileResult { CommandText = "\"" + columnName + "\"" };  				} else {  					object obj = null;  					if (mem.Expression != null) {  						var r = CompileExpr (mem.Expression' queryArgs);  						if (r.Value == null) {  							throw new NotSupportedException ("Member access failed to compile expression");  						}  						if (r.CommandText == "?") {  							queryArgs.RemoveAt (queryArgs.Count - 1);  						}  						obj = r.Value;  					}  					  					//  					// Get the member value  					//  					object val = null;  					  #if !NETFX_CORE  					if (mem.Member.MemberType == MemberTypes.Property) {  #else  					if (mem.Member is PropertyInfo) {  #endif  						var m = (PropertyInfo)mem.Member;  						val = m.GetValue (obj' null);  #if !NETFX_CORE  					} else if (mem.Member.MemberType == MemberTypes.Field) {  #else  					} else if (mem.Member is FieldInfo) {  #endif  #if SILVERLIGHT  						val = Expression.Lambda (expr).Compile ().DynamicInvoke ();  #else  						var m = (FieldInfo)mem.Member;  						val = m.GetValue (obj);  #endif  					} else {  #if !NETFX_CORE  						throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType);  #else  						throw new NotSupportedException ("MemberExpr: " + mem.Member.DeclaringType);  #endif  					}  					  					//  					// Work special magic for enumerables  					//  					if (val != null && val is System.Collections.IEnumerable && !(val is string) && !(val is System.Collections.Generic.IEnumerable<byte>)) {  						var sb = new System.Text.StringBuilder();  						sb.Append("(");  						var head = "";  						foreach (var a in (System.Collections.IEnumerable)val) {  							queryArgs.Add(a);  							sb.Append(head);  							sb.Append("?");  							head = "'";  						}  						sb.Append(")");  						return new CompileResult {  							CommandText = sb.ToString()'  							Value = val  						};  					}  					else {  						queryArgs.Add (val);  						return new CompileResult {  							CommandText = "?"'  							Value = val  						};  					}  				}  			}
Magic Number,CSScriptEvaluatorApi,HostApp,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.evaluator.cs,Profile,The following statement contains a magic number: var count = 20;
Magic Number,CSScriptEvaluatorApi,EvaluatorSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.evaluator.cs,CompileMethod_Instance,The following statement contains a magic number: var result = script.Sqr(7);
Magic Number,CSScriptEvaluatorApi,EvaluatorSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.evaluator.cs,CreateDelegate,The following statement contains a magic number: var r = sqr(3);
Magic Number,CSScriptEvaluatorApi,EvaluatorSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.evaluator.cs,LoadDelegate,The following statement contains a magic number: int result = product(3' 2);
Magic Number,CSScriptEvaluatorApi,EvaluatorSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.evaluator.cs,LoadDelegate,The following statement contains a magic number: int result = product(3' 2);
Magic Number,CSScriptEvaluatorApi,EvaluatorSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.evaluator.cs,LoadCode,The following statement contains a magic number: int result = script.Sum(1' 2);
Magic Number,CSScriptEvaluatorApi,EvaluatorSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.evaluator.cs,LoadMethod,The following statement contains a magic number: int result = script.Sum(1' 2);
Magic Number,CSScriptEvaluatorApi,EvaluatorSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.evaluator.cs,LoadMethodWithInterface,The following statement contains a magic number: int result = script.Sum(1' 2);
Magic Number,CSScriptEvaluatorApi,EvaluatorSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.evaluator.cs,LoadCode_WithInterface,The following statement contains a magic number: int result = script.Sum(1' 2);
Magic Number,CSScriptEvaluatorApi,EvaluatorSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.evaluator.cs,LoadCode_WithDuckTypedInterface,The following statement contains a magic number: int result = script.Sum(1' 2);
Magic Number,CSScriptEvaluatorApi,EvaluatorSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.evaluator.cs,PerformanceTest,The following statement contains a magic number: var r = script.Sqr(3);
Magic Number,CSScriptEvaluatorApi,EvaluatorSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.evaluator.cs,DebugTest,The following statement contains a magic number: var r = script.Sum(3' 4);
Magic Number,CSScriptEvaluatorApi,EvaluatorSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.evaluator.cs,DebugTest,The following statement contains a magic number: var r = script.Sum(3' 4);
Magic Number,CSScriptEvaluatorExtensions,HostApp,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.Extensions.cs,Test,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,CSScriptEvaluatorExtensions,AsyncSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.Extensions.cs,LoadDelegateAsync,The following statement contains a magic number: Console.WriteLine("   End of {0}: {1}"' nameof(LoadDelegateAsync)' product(4' 2));
Magic Number,CSScriptEvaluatorExtensions,AsyncSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.Extensions.cs,LoadDelegateAsync,The following statement contains a magic number: Console.WriteLine("   End of {0}: {1}"' nameof(LoadDelegateAsync)' product(4' 2));
Magic Number,CSScriptEvaluatorExtensions,AsyncSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.Extensions.cs,LoadMethodAsync,The following statement contains a magic number: Console.WriteLine("   End of {0}: {1}"' nameof(LoadMethodAsync)' script.Div(15' 3));
Magic Number,CSScriptEvaluatorExtensions,AsyncSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.Extensions.cs,LoadMethodAsync,The following statement contains a magic number: Console.WriteLine("   End of {0}: {1}"' nameof(LoadMethodAsync)' script.Div(15' 3));
Magic Number,CSScriptEvaluatorExtensions,AsyncSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.Extensions.cs,LoadCodeAsync,The following statement contains a magic number: Console.WriteLine("   End of {0}: {1}"' nameof(LoadCodeAsync)' calc.Sum(1' 2));
Magic Number,CSScriptEvaluatorExtensions,AsyncSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.Extensions.cs,CreateDelegateAsync,The following statement contains a magic number: Console.WriteLine("   End of {0}: {1}"' nameof(CreateDelegateAsync)' product(15' 3));
Magic Number,CSScriptEvaluatorExtensions,AsyncSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.Extensions.cs,CreateDelegateAsync,The following statement contains a magic number: Console.WriteLine("   End of {0}: {1}"' nameof(CreateDelegateAsync)' product(15' 3));
Magic Number,CSScriptEvaluatorExtensions,AsyncSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.Extensions.cs,CompileCodeAsync,The following statement contains a magic number: Console.WriteLine("   End of {0}: {1}"' nameof(CompileCodeAsync)' calc.Sum(15' 3));
Magic Number,CSScriptEvaluatorExtensions,AsyncSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.Extensions.cs,CompileCodeAsync,The following statement contains a magic number: Console.WriteLine("   End of {0}: {1}"' nameof(CompileCodeAsync)' calc.Sum(15' 3));
Magic Number,CSScriptEvaluatorExtensions,AsyncSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.Extensions.cs,RemoteAsynch,The following statement contains a magic number: Console.WriteLine("   End of {0}: {1}"' nameof(RemoteAsynch)' sum(1' 2));
Magic Number,CSScriptEvaluatorExtensions,UnloadingSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.Extensions.cs,CreateDelegateRemotely,The following statement contains a magic number: Console.WriteLine("{0}: {1}"' nameof(CreateDelegateRemotely)' sum(15' 3));
Magic Number,CSScriptEvaluatorExtensions,UnloadingSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.Extensions.cs,CreateDelegateRemotely,The following statement contains a magic number: Console.WriteLine("{0}: {1}"' nameof(CreateDelegateRemotely)' sum(15' 3));
Magic Number,CSScriptEvaluatorExtensions,UnloadingSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.Extensions.cs,LoadCodeRemotely,The following statement contains a magic number: Console.WriteLine("{0}: {1}"' nameof(LoadCodeRemotely)' script.Sum(15' 3));
Magic Number,CSScriptEvaluatorExtensions,UnloadingSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.Extensions.cs,LoadCodeRemotely,The following statement contains a magic number: Console.WriteLine("{0}: {1}"' nameof(LoadCodeRemotely)' script.Sum(15' 3));
Magic Number,CSScriptEvaluatorExtensions,UnloadingSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.Extensions.cs,LoadCodeRemotelyWithInterface,The following statement contains a magic number: Console.WriteLine("{0}: {1}"' nameof(LoadCodeRemotelyWithInterface)' script.Sum(15' 3));
Magic Number,CSScriptEvaluatorExtensions,UnloadingSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.Extensions.cs,LoadCodeRemotelyWithInterface,The following statement contains a magic number: Console.WriteLine("{0}: {1}"' nameof(LoadCodeRemotelyWithInterface)' script.Sum(15' 3));
Magic Number,CSScriptEvaluatorExtensions,UnloadingSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.Extensions.cs,LoadMethodRemotely,The following statement contains a magic number: Console.WriteLine("{0}: {1}"' nameof(LoadMethodRemotely)' script.Sum(15' 3));
Magic Number,CSScriptEvaluatorExtensions,UnloadingSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.Extensions.cs,LoadMethodRemotely,The following statement contains a magic number: Console.WriteLine("{0}: {1}"' nameof(LoadMethodRemotely)' script.Sum(15' 3));
Magic Number,CSScriptEvaluatorExtensions,UnloadingSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.Extensions.cs,KeepRemoteObjectAlive,The following statement contains a magic number: sumSponsor = sum.ExtendLifeFromMinutes(30);
Magic Number,CSScriptNativeApi,CodeDomSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.native.cs,LoadMethod_Instance,The following statement contains a magic number: var result = script.Sqr(7);
Magic Number,CSScriptNativeApi,CodeDomSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.native.cs,CreateFunc,The following statement contains a magic number: int r = Sqr(3);
Magic Number,CSScriptNativeApi,CodeDomSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.native.cs,LoadCode,The following statement contains a magic number: int result = script.Sum(1' 2);
Magic Number,CSScriptNativeApi,CodeDomSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.native.cs,LoadCodeWithConfig,The following statement contains a magic number: try                  {                      File.WriteAllText(file' @"using System;                                                public class Script                                                {                                                    public int Sum(int a' int b)                                                    {                                                        return a+b;                                                    }                                                }");                        var settings = new Settings();                      //settings = null; // set to null to foll back to defaults                         dynamic script = CSScript.LoadWithConfig(file' null' false' settings' "/define:TEST")                                               .CreateObject("*");                        int result = script.Sum(1' 2);                  }                  finally                  {                      if (File.Exists(file))                          File.Delete(file);                  }
Magic Number,CSScriptNativeApi,CodeDomSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.native.cs,LoadCode_WithInterface,The following statement contains a magic number: int result = calc.Sum(1' 2);
Magic Number,CSScriptNativeApi,CodeDomSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.native.cs,LoadCode_WithDuckTypedInterface,The following statement contains a magic number: int result = calc.Sum(1' 2);
Magic Number,CSScriptNativeApi,CodeDomSamples,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Scripting.native.cs,DebugTest,The following statement contains a magic number: int result = script.Sum(1' 2);
Magic Number,Capture.Workflow.Core,WorkflowManager,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\WorkflowManager.cs,WorkflowManager,The following statement contains a magic number: _liveViewTimer.Interval = TimeSpan.FromMilliseconds(20);
Magic Number,Capture.Workflow.Core,WorkflowManager,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\WorkflowManager.cs,GetLargeThumbnail,The following statement contains a magic number: if (item != null)              {                  lock (_lock)                  {                      try                      {                          var bitmap = Utils.LoadImage(WorkflowManager.Instance.SelectedItem.TempFile' PreviewSize' 0);                          using (MemoryStream stream = new MemoryStream())                          {                              Utils.Save2Jpg(bitmap' stream);                              Context.FileItem = item;                              Context.ImageStream = stream;                              OnMessage(new MessageEventArgs(Messages.ThumbChanged' FileItem) {Context = Context});                              stream.Seek(0' SeekOrigin.Begin);                              item.Thumb = Utils.LoadImage(stream' 200);                              stream.Seek(0' SeekOrigin.Begin);                              return Utils.LoadImage(stream);                          }                      }                      catch (Exception e)                      {                          Log.Debug("Unable to create thumbnail"' e);                      }                      Context.ImageStream = null;                  }              }
Magic Number,Capture.Workflow.Core,WorkflowManager,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\WorkflowManager.cs,DeviceManager_PhotoCaptured,The following statement contains a magic number: try              {                  // if no workflow loaded do nothing                   if (Context?.WorkFlow == null)                      return;                    string tempFile = Path.Combine(Settings.Instance.TempFolder'                      Path.GetRandomFileName() + Path.GetExtension(eventArgs.FileName));                    // set in varieable the captured file original name                  Context?.WorkFlow?.Variables.SetValue("CapturedFileName"'                      Path.GetFileNameWithoutExtension(eventArgs.FileName));                    Utils.CreateFolder(tempFile);                    if (File.Exists(tempFile))                      File.Delete(tempFile);                    eventArgs.CameraDevice.TransferFile(eventArgs.Handle' tempFile);                  eventArgs.CameraDevice.ReleaseResurce(eventArgs);                    if (!Context.CaptureEnabled)                  {                      // files should be transferred anyway if capture is enabled or not                      // to prevent camera buffer fill up                       Utils.DeleteFile(tempFile);                      Log.Debug("File transfer disabled");                      return;                  }                    FileItem item = new FileItem()                  {                      TempFile = tempFile'                      Thumb = Utils.LoadImage(tempFile' 200)'                      Variables = Context.WorkFlow.Variables.GetItemVariables()                  };                  Bitmap = Utils.LoadImage(tempFile' 1090);                  FileItems.Add(item);                  FileItem = item;                  Context.FileItem = FileItem;                    Utils.WaitForFile(tempFile);                  Context.FileItem = item;                  OnMessage(new MessageEventArgs(Messages.PhotoDownloaded' FileItem) {Context = Context});                  OnMessage(new MessageEventArgs(Messages.FileTransferred' Context) {Context = Context});              }              catch (Exception ex)              {                  Log.Error("Error transfer file"' ex);              }
Magic Number,Capture.Workflow.Core,WorkflowManager,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\WorkflowManager.cs,DeviceManager_PhotoCaptured,The following statement contains a magic number: try              {                  // if no workflow loaded do nothing                   if (Context?.WorkFlow == null)                      return;                    string tempFile = Path.Combine(Settings.Instance.TempFolder'                      Path.GetRandomFileName() + Path.GetExtension(eventArgs.FileName));                    // set in varieable the captured file original name                  Context?.WorkFlow?.Variables.SetValue("CapturedFileName"'                      Path.GetFileNameWithoutExtension(eventArgs.FileName));                    Utils.CreateFolder(tempFile);                    if (File.Exists(tempFile))                      File.Delete(tempFile);                    eventArgs.CameraDevice.TransferFile(eventArgs.Handle' tempFile);                  eventArgs.CameraDevice.ReleaseResurce(eventArgs);                    if (!Context.CaptureEnabled)                  {                      // files should be transferred anyway if capture is enabled or not                      // to prevent camera buffer fill up                       Utils.DeleteFile(tempFile);                      Log.Debug("File transfer disabled");                      return;                  }                    FileItem item = new FileItem()                  {                      TempFile = tempFile'                      Thumb = Utils.LoadImage(tempFile' 200)'                      Variables = Context.WorkFlow.Variables.GetItemVariables()                  };                  Bitmap = Utils.LoadImage(tempFile' 1090);                  FileItems.Add(item);                  FileItem = item;                  Context.FileItem = FileItem;                    Utils.WaitForFile(tempFile);                  Context.FileItem = item;                  OnMessage(new MessageEventArgs(Messages.PhotoDownloaded' FileItem) {Context = Context});                  OnMessage(new MessageEventArgs(Messages.FileTransferred' Context) {Context = Context});              }              catch (Exception ex)              {                  Log.Error("Error transfer file"' ex);              }
Magic Number,Capture.Workflow.Core,WorkflowManager,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\WorkflowManager.cs,LoadPlugins,The following statement contains a magic number: try              {                  var pluginAssembly = Assembly.LoadFrom(assemblyFile);                  if (pluginAssembly == null)                  {                      Log.Error("Error loading assembly");                      return;                  }                  Type[] exportedTypes = pluginAssembly.GetExportedTypes();                  foreach (var exportedType in exportedTypes)                  {                      var attribute = exportedType.GetCustomAttribute<PluginTypeAttribute>();                      var attributeDes = exportedType.GetCustomAttribute<DescriptionAttribute>();                      var attributeName = exportedType.GetCustomAttribute<DisplayNameAttribute>();                      var attributeIcon = exportedType.GetCustomAttribute<IconAttribute>();                        if (attribute != null)                      {                          var plugin=new PluginInfo()                          {                              Type = attribute.PluginType'                              Class = exportedType.AssemblyQualifiedName'                              Description = attributeDes?.Description'                              Name = attributeName?.DisplayName'                              Icon = attributeIcon?.Icon                          };                          Log.Debug("Loading plugin " + plugin.Type.ToString().PadRight(15) + "=>" +                                    plugin.Name.PadRight(25) + "=>" + plugin.Class);                            Plugins.Add(plugin);                      }                  }              }              catch (Exception ex)              {                  Log.Error("Unable to load plugins"' ex);              }
Magic Number,Capture.Workflow.Core,WorkflowManager,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\WorkflowManager.cs,LoadPlugins,The following statement contains a magic number: try              {                  var pluginAssembly = Assembly.LoadFrom(assemblyFile);                  if (pluginAssembly == null)                  {                      Log.Error("Error loading assembly");                      return;                  }                  Type[] exportedTypes = pluginAssembly.GetExportedTypes();                  foreach (var exportedType in exportedTypes)                  {                      var attribute = exportedType.GetCustomAttribute<PluginTypeAttribute>();                      var attributeDes = exportedType.GetCustomAttribute<DescriptionAttribute>();                      var attributeName = exportedType.GetCustomAttribute<DisplayNameAttribute>();                      var attributeIcon = exportedType.GetCustomAttribute<IconAttribute>();                        if (attribute != null)                      {                          var plugin=new PluginInfo()                          {                              Type = attribute.PluginType'                              Class = exportedType.AssemblyQualifiedName'                              Description = attributeDes?.Description'                              Name = attributeName?.DisplayName'                              Icon = attributeIcon?.Icon                          };                          Log.Debug("Loading plugin " + plugin.Type.ToString().PadRight(15) + "=>" +                                    plugin.Name.PadRight(25) + "=>" + plugin.Class);                            Plugins.Add(plugin);                      }                  }              }              catch (Exception ex)              {                  Log.Error("Unable to load plugins"' ex);              }
Missing Default,Capture.Workflow.Core.Classes,Variable,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\Variable.cs,GetAsObject,The following switch statement is missing a default case: switch (VariableType)              {                  case VariableTypeEnum.String:                      return Value;                  case VariableTypeEnum.Number:                  {                      double d = 0;                      if (double.TryParse(Value' NumberStyles.Any' CultureInfo.InvariantCulture' out d))                      {                          return d;                      }                      break;                  }                  case VariableTypeEnum.Boolean:                  {                      return Value != null && Value.ToLower().Trim() == "true";                      break;                  }                  case VariableTypeEnum.Date:                  {                      DateTime dateTime;                      if (DateTime.TryParse(Value' CultureInfo.InvariantCulture' DateTimeStyles.AssumeLocal'                          out dateTime))                      {                          return dateTime;                      }                      break;                  }              }
Missing Default,Capture.Workflow.Core.Classes,Variable,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\Variable.cs,GetCSType,The following switch statement is missing a default case: switch (VariableType)              {                  case VariableTypeEnum.String:                      return "string";                  case VariableTypeEnum.Number:                      return "double";                  case VariableTypeEnum.Boolean:                      return "bool";                  case VariableTypeEnum.Date:                      return "DateTime";              }
Missing Default,Capture.Workflow.Core.Classes,Variable,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Classes\Variable.cs,GetAsCsString,The following switch statement is missing a default case: switch (VariableType)              {                  case VariableTypeEnum.String:                      return "public string " + Name + " = @\"" + Value + "\"";                  case VariableTypeEnum.Number:                  {                      double d = 0;                      if (double.TryParse(Value' NumberStyles.Any' CultureInfo.InvariantCulture' out d))                      {                          return "public double " + Name + " = " + Value + "";                      }                      break;                  }                  case VariableTypeEnum.Boolean:                  {                      return "public bool " + Name + " = " + ((Value != null && Value.ToLower().Trim() == "true")                                 ? "true"                                 : "false" + "");                  }                  case VariableTypeEnum.Date:                  {                                                DateTime dateTime;                      if (DateTime.TryParse(Value' CultureInfo.InvariantCulture' DateTimeStyles.AssumeLocal'                          out dateTime))                      {                          return "public DateTime " + Name + " = DateTime.FromFileTimeUtc(" + dateTime.ToFileTimeUtc() +                                 ")";                      }                      break;                  }              }
Missing Default,SQLite,SQLiteConnection,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Database\SQLite.cs,BeginTransaction,The following switch statement is missing a default case: switch (sqlExp.Result) {  						case SQLite3.Result.IOError:  						case SQLite3.Result.Full:  						case SQLite3.Result.Busy:  						case SQLite3.Result.NoMem:  						case SQLite3.Result.Interrupt:  							RollbackTo (null' true);  							break;  						}
Missing Default,SQLite,SQLiteConnection,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\Database\SQLite.cs,SaveTransactionPoint,The following switch statement is missing a default case: switch (sqlExp.Result) {  					case SQLite3.Result.IOError:  					case SQLite3.Result.Full:  					case SQLite3.Result.Busy:  					case SQLite3.Result.NoMem:  					case SQLite3.Result.Interrupt:  						RollbackTo (null' true);  						break;  					}
Missing Default,Capture.Workflow.Core,WorkflowManager,C:\repos\dukus_digiCamControl\Capture.Workflow.Core\WorkflowManager.cs,OnMessage,The following switch statement is missing a default case: switch (e.Name)              {                  case Messages.StartLiveView:                      _frames = 0;                      _startTime = DateTime.Now;                      _liveViewTimer.Start();                      break;                  case Messages.StopLiveView:                      _liveViewTimer.Stop();                      break;                  case Messages.ShowMessage:                      MessageBox.Show(e.Param.ToString());                      break;                  case Messages.SaveVariables:                  case Messages.SessionFinished:                      SaveVariables(e.Context.WorkFlow);                      break;                  case Messages.ThumbCreate:                      UpdateThumbAsync();                      break;                  case Messages.NextPhoto:                      if (SelectedItem != null)                      {                          var i = FileItems.IndexOf(SelectedItem);                          i++;                          if (i < FileItems.Count)                          {                              SelectedItem = FileItems[i];                          }                      }                      UpdateThumbAsync();                      break;                  case Messages.PrevPhoto:                      if (SelectedItem != null)                      {                          var i = FileItems.IndexOf(SelectedItem);                          i--;                          if (i > -1)                          {                              SelectedItem = FileItems[i];                          }                      }                      UpdateThumbAsync();                      break;                  case Messages.DeletePhoto:                  {                      if (SelectedItem == null || FileItems.Count == 0)                          return;                      var i = FileItems.IndexOf(SelectedItem);                      SelectedItem.Clear();                      FileItems.Remove(SelectedItem);                                            if (i >= FileItems.Count)                          i--;                      if (i >= 0 && FileItems.Count > 0)                          SelectedItem = FileItems[i];                      UpdateThumbAsync();                  }                      break;                  case Messages.ClearPhotos:                  {                      foreach (var item in FileItems)                      {                          item.Clear();                      }                      FileItems.Clear();                      SelectedItem = null;                      UpdateThumbAsync();                      break;                  }              }
