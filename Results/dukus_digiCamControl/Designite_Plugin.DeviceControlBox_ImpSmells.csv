Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Plugin.DeviceControl,WaterDropWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\Plugin.DeviceControl\WaterDropWnd.xaml.cs,sp_DataReceived,Cyclomatic complexity of the method is 11
Empty Catch Block,Plugin.DeviceControl,WaterDropWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\Plugin.DeviceControl\WaterDropWnd.xaml.cs,MetroWindow_Closed,The method has an empty catch block.
Magic Number,Plugin.DeviceControl,WaterDropWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\Plugin.DeviceControl\WaterDropWnd.xaml.cs,btn_start_Click,The following statement contains a magic number: _timer.Interval = GetTotalLength() + 100;
Magic Number,Plugin.DeviceControl,WaterDropWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\Plugin.DeviceControl\WaterDropWnd.xaml.cs,OpenPort,The following statement contains a magic number: sp.BaudRate = 9600;
Magic Number,Plugin.DeviceControl,WaterDropWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\Plugin.DeviceControl\WaterDropWnd.xaml.cs,OpenPort,The following statement contains a magic number: sp.WriteTimeout = 3500;
Missing Default,Plugin.DeviceControl,WaterDropWnd,D:\research\architectureSmells\repos\dukus_digiCamControl\Plugin.DeviceControl\WaterDropWnd.xaml.cs,sp_DataReceived,The following switch statement is missing a default case: switch (command)                          {                              case "camera_timer":                                  Dispatcher.Invoke(new Action(delegate { slider_cmera.Value = value; }));                                  break;                              case "drop1_time":                                  Dispatcher.Invoke(new Action(delegate { slider_drop1.Value = value; }));                                  break;                              case "drop_wait_time":                                  Dispatcher.Invoke(new Action(delegate { slider_drop_wait.Value = value; }));                                  break;                              case "drop2_wait_time":                                  Dispatcher.Invoke(new Action(delegate { slider_drop2_wait.Value = value; }));                                  break;                              case "drop2_time":                                  Dispatcher.Invoke(new Action(delegate { slider_drop2.Value = value; }));                                  break;                              case "drop3_time":                                  Dispatcher.Invoke(new Action(delegate { slider_drop3.Value = value; }));                                  break;                              case "flash_time":                                  Dispatcher.Invoke(new Action(delegate { slider_flash.Value = value; }));                                  break;                              case "sound":                                  Dispatcher.Invoke(new Action(delegate { prg_threshold.Value = value; }));                                  break;                          }
