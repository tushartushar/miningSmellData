Implementation smell,Namespace,Class,File,Method,Description
Long Method,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,Insert,The method has 118 lines of code.
Complex Method,Vulcano.Engine.Carga,CargadorCatalogos,C:\repos\manologomez_Vulcano\Vulcano.Engine\Carga\CargadorCatalogos.cs,Cargar,Cyclomatic complexity of the method is 8
Complex Method,Vulcano.Engine.Carga,CargadorFichas,C:\repos\manologomez_Vulcano\Vulcano.Engine\Carga\CargadorFichas.cs,CargarFichas,Cyclomatic complexity of the method is 12
Complex Method,Vulcano.Engine.Carga,CargadorFichasExcel,C:\repos\manologomez_Vulcano\Vulcano.Engine\Carga\CargadorFichasExcel.cs,CargarFichas,Cyclomatic complexity of the method is 12
Complex Method,Vulcano.Engine,RepoGeneral,C:\repos\manologomez_Vulcano\Vulcano.Engine\Repositorios.cs,BorrarResultados,Cyclomatic complexity of the method is 11
Complex Method,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,CommonConstruct,Cyclomatic complexity of the method is 9
Complex Method,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,AddParam,Cyclomatic complexity of the method is 12
Complex Method,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,Query,Cyclomatic complexity of the method is 10
Complex Method,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,Query,Cyclomatic complexity of the method is 13
Complex Method,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,Insert,Cyclomatic complexity of the method is 43
Complex Method,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,Update,Cyclomatic complexity of the method is 13
Long Parameter List,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,BuildPageQueries,The method has 6 parameters.
Long Parameter List,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,FindSplitPoint,The method has 5 parameters.
Long Parameter List,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,Update,The method has 5 parameters.
Long Statement,Vulcano.Engine,RepoGeneral,C:\repos\manologomez_Vulcano\Vulcano.Engine\Repositorios.cs,BorrarResultados,The length of the statement  "	q.SetString ("proceso"' proceso).SetString ("tipo"' tipo).SetString ("ciudad"' ciudad.Nombre).SetParameter ("id_ciudad"' ciudad.Id); " is 132.
Long Statement,Vulcano.Engine,Utils,C:\repos\manologomez_Vulcano\Vulcano.Engine\Utils.cs,GetScriptingEngine,The length of the statement  "	factory.AddReference (typeof(FichaIndicadores)).AddReference (typeof(SqlDataClasses.SqlHelper)).AddReference (typeof(UtilidadesGenerales.ReflectionUtil))//.AddReference(typeof(Dapper.SqlMapper)) " is 194.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,CommonConstruct,The length of the statement  "	if (_dbType == DBType.MySql && _connectionString != null && _connectionString.IndexOf ("Allow User Variables=true") >= 0) " is 121.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,ProcessParams,The length of the statement  "				throw new ArgumentOutOfRangeException (string.Format ("Parameter '@{0}' specified but only {1} parameters supplied (in `{2}`)"' paramIndex' args_src.Length' _sql)); " is 164.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,ProcessParams,The length of the statement  "				throw new ArgumentException (string.Format ("Parameter '@{0}' specified but none of the passed arguments have a property with this name (in '{1}')"' param' _sql)); " is 163.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,ProcessParams,The length of the statement  "		if ((arg_val as System.Collections.IEnumerable) != null && (arg_val as string) == null && (arg_val as byte[]) == null) { " is 120.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,SplitSqlForPaging,The length of the statement  "		sqlCount = sql.Substring (0' g.Index) + "COUNT(" + m.Groups [1].ToString ().Trim () + ") " + sql.Substring (g.Index + g.Length); " is 128.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,BuildPageQueries,The length of the statement  "		sqlPage = string.Format ("SELECT * FROM (SELECT ROW_NUMBER() OVER ({0}) peta_rn' {1}) peta_paged WHERE peta_rn>@{2} AND peta_rn<=@{3}"' sqlOrderBy == null ? "ORDER BY (SELECT NULL)" : sqlOrderBy' sqlSelectRemoved' args.Length' args.Length + 1); " is 244.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,Query,The length of the statement  "			var factory = pd.GetFactory (cmd.CommandText' _sharedConnection.ConnectionString' ForceDateTimesToUtc' 0' r.FieldCount' r) as Func<IDataReader' T>; " is 147.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,GetAutoMapper,The length of the statement  "					throw new InvalidOperationException (string.Format ("Can't auto join {0} as {1} has more than one property of type {0}"' types [i]' types [j])); " is 144.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,FindSplitPoint,The length of the statement  "		return PocoData.ForType (typeThis).GetFactory (sql' _sharedConnection.ConnectionString' ForceDateTimesToUtc' pos' r.FieldCount - pos' r); " is 137.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,FindSplitPoint,The length of the statement  "		if (usedColumns.ContainsKey (fieldName) || (!pdThis.Columns.ContainsKey (fieldName) && pdNext.Columns.ContainsKey (fieldName))) { " is 129.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,FindSplitPoint,The length of the statement  "			return pdThis.GetFactory (sql' _sharedConnection.ConnectionString' ForceDateTimesToUtc' firstColumn' pos - firstColumn' r); " is 123.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,FindSplitPoint,The length of the statement  "	throw new InvalidOperationException (string.Format ("Couldn't find split point between {0} and {1}"' typeThis' typeNext)); " is 122.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,CreateMultiPocoFactory,The length of the statement  "	return (Func<IDataReader' object' TRet>)m.CreateDelegate (typeof(Func<IDataReader' object' TRet>)' new MultiPocoFactory () { " is 124.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,Exists,The length of the statement  "	return FirstOrDefault<T> (string.Format ("WHERE {0}=@0"' EscapeSqlIdentifier (PocoData.ForType (typeof(T)).TableInfo.PrimaryKey))' primaryKey) != null; " is 151.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,Single,The length of the statement  "	return Single<T> (string.Format ("WHERE {0}=@0"' EscapeSqlIdentifier (PocoData.ForType (typeof(T)).TableInfo.PrimaryKey))' primaryKey); " is 135.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,SingleOrDefault,The length of the statement  "	return SingleOrDefault<T> (string.Format ("WHERE {0}=@0"' EscapeSqlIdentifier (PocoData.ForType (typeof(T)).TableInfo.PrimaryKey))' primaryKey); " is 144.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,Insert,The length of the statement  "				cmd.CommandText = string.Format ("INSERT INTO {0} ({1}) VALUES ({2})"' EscapeTableName (tableName)' string.Join ("'"' names.ToArray ())' string.Join ("'"' values.ToArray ())); " is 175.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,Update,The length of the statement  "				cmd.CommandText = string.Format ("UPDATE {0} SET {1} WHERE {2} = {3}{4}"' EscapeTableName (tableName)' sb.ToString ()' EscapeSqlIdentifier (primaryKeyName)' _paramPrefix' index++); " is 180.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,Delete,The length of the statement  "	var sql = string.Format ("DELETE FROM {0} WHERE {1}=@0"' EscapeTableName (tableName)' EscapeSqlIdentifier (primaryKeyName)); " is 124.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,IsNew,The length of the statement  "			throw new ArgumentException (string.Format ("The object doesn't have a property matching the primary key column name '{0}'"' primaryKeyName)); " is 142.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,IsNew,The length of the statement  "		throw new InvalidOperationException ("IsNew() and Save() are only supported on tables with auto-increment/identity primary key columns"); " is 137.
Complex Conditional,Vulcano.Engine,Utils,C:\repos\manologomez_Vulcano\Vulcano.Engine\Utils.cs,GetNumero,The conditional expression  "valor is float || valor is int || valor is long || valor is double"  is complex.
Magic Number,Vulcano.Engine.Carga,CargadorCatalogos,C:\repos\manologomez_Vulcano\Vulcano.Engine\Carga\CargadorCatalogos.cs,Cargar,The following statement contains a magic number: try {  	book = SpreadsheetFactory.GetWorkbook (file);  	var sheet = book.Sheets [0];  	var catalogos = new Dictionary<string' Catalogo> ();  	for (i = 2; i <= sheet.NumRows; i++) {  		var formato = sheet.GetString ("C"' i);  		if (string.IsNullOrEmpty (formato))  			break;  		var valor = sheet.GetString ("G"' i) ?? "";  		var codigo = sheet.GetString ("E"' i) ?? "";  		if (valor == "" || codigo == "")  			continue;  		if (!catalogos.ContainsKey (formato))  			catalogos [formato] = new Catalogo {  				Nombre = formato  			};  		var mapa = catalogos [formato];  		var key = Utils.MakeKey (sheet.GetString ("D"' i)' // categoria  		codigo);  		mapa.Equivalencias [key] = valor;  		// TODO: esto podria crear choques y reemplazos' verificar o cambiar de estructura de datos  		var ambito1 = sheet.GetString ("H"' i);  		var ambito2 = sheet.GetString ("I"' i);  		if (!string.IsNullOrEmpty (ambito1)) {  			key = Utils.MakeKey (ambito1' codigo);  			mapa.Equivalencias [key] = valor;  		}  		if (!string.IsNullOrEmpty (ambito2)) {  			key = Utils.MakeKey (ambito2' codigo);  			mapa.Equivalencias [key] = valor;  		}  	}  	return catalogos;  }  catch (Exception ex) {  	throw new ApplicationException ("Error en fila " + i' ex);  }  finally {  	if (book is IDisposable)  		(book as IDisposable).Dispose ();  }  
Magic Number,Vulcano.Engine.Carga,CargadorCatalogos,C:\repos\manologomez_Vulcano\Vulcano.Engine\Carga\CargadorCatalogos.cs,Cargar,The following statement contains a magic number: for (i = 2; i <= sheet.NumRows; i++) {  	var formato = sheet.GetString ("C"' i);  	if (string.IsNullOrEmpty (formato))  		break;  	var valor = sheet.GetString ("G"' i) ?? "";  	var codigo = sheet.GetString ("E"' i) ?? "";  	if (valor == "" || codigo == "")  		continue;  	if (!catalogos.ContainsKey (formato))  		catalogos [formato] = new Catalogo {  			Nombre = formato  		};  	var mapa = catalogos [formato];  	var key = Utils.MakeKey (sheet.GetString ("D"' i)' // categoria  	codigo);  	mapa.Equivalencias [key] = valor;  	// TODO: esto podria crear choques y reemplazos' verificar o cambiar de estructura de datos  	var ambito1 = sheet.GetString ("H"' i);  	var ambito2 = sheet.GetString ("I"' i);  	if (!string.IsNullOrEmpty (ambito1)) {  		key = Utils.MakeKey (ambito1' codigo);  		mapa.Equivalencias [key] = valor;  	}  	if (!string.IsNullOrEmpty (ambito2)) {  		key = Utils.MakeKey (ambito2' codigo);  		mapa.Equivalencias [key] = valor;  	}  }  
Magic Number,Vulcano.Engine.Carga,CargadorCatalogos,C:\repos\manologomez_Vulcano\Vulcano.Engine\Carga\CargadorCatalogos.cs,Cargar,The following statement contains a magic number: i = 2
Magic Number,Vulcano.Engine.Carga,CargadorFichas,C:\repos\manologomez_Vulcano\Vulcano.Engine\Carga\CargadorFichas.cs,CargarFichas,The following statement contains a magic number: foreach (var sheet in book.Sheets) {  	var ficha = new FichaIndicadores {  		Nombre = sheet.Name'  		Descripcion = sheet.GetString ("A3")  	};  	lista.Add (ficha);  	bool fin = false;  	var start = valoresStart;  	while (!fin) {  		var valor = sheet.GetString (start' 2);  		if (string.IsNullOrEmpty (valor) || valor == "valores" || ficha.Temas.Contains (valor))  			fin = true;  		else  			ficha.Temas.Add (valor);  		start++;  	}  	var last = "";  	var countAme = ficha.Temas.Count;  	var numFicha = 0;  	for (int i = 3; i <= sheet.NumRows; i++) {  		var expresion = sheet.GetString ("F"' i) ?? "";  		if (expresion == "")  			break;  		var codigo = sheet.GetString ("B"' i) ?? "";  		if (codigo != "" && codigo != last) {  			numFicha++;  			var v = new Variable (countAme) {  				Codigo = codigo'  				Orden = numFicha  			};  			v.Nombre = sheet.GetString ("D"' i);  			start = valoresStart + countAme + 1;  			for (int j = 0; j < countAme; j++) {  				v.Ponderaciones [j] = sheet.GetFloat (start' i);  				start += 2;  			}  			ficha.Variables [codigo] = v;  			var extra = sheet.GetString ("C"' i) ?? "";  			if (extra.Contains ("int"))  				v.Tipo = "int";  			if (extra.Contains ("script"))  				v.EsScript = true;  			last = codigo;  		}  		var valor = new ValorVariable (countAme);  		valor.Descripcion = sheet.GetString ("E"' i);  		valor.Expresion = expresion;  		for (int j = 0; j < countAme; j++) {  			valor.Puntajes [j] = sheet.GetFloat (j + valoresStart' i);  		}  		ficha.Variables [last].Valores.Add (valor);  	}  }  
Magic Number,Vulcano.Engine.Carga,CargadorFichas,C:\repos\manologomez_Vulcano\Vulcano.Engine\Carga\CargadorFichas.cs,CargarFichas,The following statement contains a magic number: foreach (var sheet in book.Sheets) {  	var ficha = new FichaIndicadores {  		Nombre = sheet.Name'  		Descripcion = sheet.GetString ("A3")  	};  	lista.Add (ficha);  	bool fin = false;  	var start = valoresStart;  	while (!fin) {  		var valor = sheet.GetString (start' 2);  		if (string.IsNullOrEmpty (valor) || valor == "valores" || ficha.Temas.Contains (valor))  			fin = true;  		else  			ficha.Temas.Add (valor);  		start++;  	}  	var last = "";  	var countAme = ficha.Temas.Count;  	var numFicha = 0;  	for (int i = 3; i <= sheet.NumRows; i++) {  		var expresion = sheet.GetString ("F"' i) ?? "";  		if (expresion == "")  			break;  		var codigo = sheet.GetString ("B"' i) ?? "";  		if (codigo != "" && codigo != last) {  			numFicha++;  			var v = new Variable (countAme) {  				Codigo = codigo'  				Orden = numFicha  			};  			v.Nombre = sheet.GetString ("D"' i);  			start = valoresStart + countAme + 1;  			for (int j = 0; j < countAme; j++) {  				v.Ponderaciones [j] = sheet.GetFloat (start' i);  				start += 2;  			}  			ficha.Variables [codigo] = v;  			var extra = sheet.GetString ("C"' i) ?? "";  			if (extra.Contains ("int"))  				v.Tipo = "int";  			if (extra.Contains ("script"))  				v.EsScript = true;  			last = codigo;  		}  		var valor = new ValorVariable (countAme);  		valor.Descripcion = sheet.GetString ("E"' i);  		valor.Expresion = expresion;  		for (int j = 0; j < countAme; j++) {  			valor.Puntajes [j] = sheet.GetFloat (j + valoresStart' i);  		}  		ficha.Variables [last].Valores.Add (valor);  	}  }  
Magic Number,Vulcano.Engine.Carga,CargadorFichas,C:\repos\manologomez_Vulcano\Vulcano.Engine\Carga\CargadorFichas.cs,CargarFichas,The following statement contains a magic number: foreach (var sheet in book.Sheets) {  	var ficha = new FichaIndicadores {  		Nombre = sheet.Name'  		Descripcion = sheet.GetString ("A3")  	};  	lista.Add (ficha);  	bool fin = false;  	var start = valoresStart;  	while (!fin) {  		var valor = sheet.GetString (start' 2);  		if (string.IsNullOrEmpty (valor) || valor == "valores" || ficha.Temas.Contains (valor))  			fin = true;  		else  			ficha.Temas.Add (valor);  		start++;  	}  	var last = "";  	var countAme = ficha.Temas.Count;  	var numFicha = 0;  	for (int i = 3; i <= sheet.NumRows; i++) {  		var expresion = sheet.GetString ("F"' i) ?? "";  		if (expresion == "")  			break;  		var codigo = sheet.GetString ("B"' i) ?? "";  		if (codigo != "" && codigo != last) {  			numFicha++;  			var v = new Variable (countAme) {  				Codigo = codigo'  				Orden = numFicha  			};  			v.Nombre = sheet.GetString ("D"' i);  			start = valoresStart + countAme + 1;  			for (int j = 0; j < countAme; j++) {  				v.Ponderaciones [j] = sheet.GetFloat (start' i);  				start += 2;  			}  			ficha.Variables [codigo] = v;  			var extra = sheet.GetString ("C"' i) ?? "";  			if (extra.Contains ("int"))  				v.Tipo = "int";  			if (extra.Contains ("script"))  				v.EsScript = true;  			last = codigo;  		}  		var valor = new ValorVariable (countAme);  		valor.Descripcion = sheet.GetString ("E"' i);  		valor.Expresion = expresion;  		for (int j = 0; j < countAme; j++) {  			valor.Puntajes [j] = sheet.GetFloat (j + valoresStart' i);  		}  		ficha.Variables [last].Valores.Add (valor);  	}  }  
Magic Number,Vulcano.Engine.Carga,CargadorFichas,C:\repos\manologomez_Vulcano\Vulcano.Engine\Carga\CargadorFichas.cs,CargarFichas,The following statement contains a magic number: while (!fin) {  	var valor = sheet.GetString (start' 2);  	if (string.IsNullOrEmpty (valor) || valor == "valores" || ficha.Temas.Contains (valor))  		fin = true;  	else  		ficha.Temas.Add (valor);  	start++;  }  
Magic Number,Vulcano.Engine.Carga,CargadorFichas,C:\repos\manologomez_Vulcano\Vulcano.Engine\Carga\CargadorFichas.cs,CargarFichas,The following statement contains a magic number: for (int i = 3; i <= sheet.NumRows; i++) {  	var expresion = sheet.GetString ("F"' i) ?? "";  	if (expresion == "")  		break;  	var codigo = sheet.GetString ("B"' i) ?? "";  	if (codigo != "" && codigo != last) {  		numFicha++;  		var v = new Variable (countAme) {  			Codigo = codigo'  			Orden = numFicha  		};  		v.Nombre = sheet.GetString ("D"' i);  		start = valoresStart + countAme + 1;  		for (int j = 0; j < countAme; j++) {  			v.Ponderaciones [j] = sheet.GetFloat (start' i);  			start += 2;  		}  		ficha.Variables [codigo] = v;  		var extra = sheet.GetString ("C"' i) ?? "";  		if (extra.Contains ("int"))  			v.Tipo = "int";  		if (extra.Contains ("script"))  			v.EsScript = true;  		last = codigo;  	}  	var valor = new ValorVariable (countAme);  	valor.Descripcion = sheet.GetString ("E"' i);  	valor.Expresion = expresion;  	for (int j = 0; j < countAme; j++) {  		valor.Puntajes [j] = sheet.GetFloat (j + valoresStart' i);  	}  	ficha.Variables [last].Valores.Add (valor);  }  
Magic Number,Vulcano.Engine.Carga,CargadorFichas,C:\repos\manologomez_Vulcano\Vulcano.Engine\Carga\CargadorFichas.cs,CargarFichas,The following statement contains a magic number: for (int i = 3; i <= sheet.NumRows; i++) {  	var expresion = sheet.GetString ("F"' i) ?? "";  	if (expresion == "")  		break;  	var codigo = sheet.GetString ("B"' i) ?? "";  	if (codigo != "" && codigo != last) {  		numFicha++;  		var v = new Variable (countAme) {  			Codigo = codigo'  			Orden = numFicha  		};  		v.Nombre = sheet.GetString ("D"' i);  		start = valoresStart + countAme + 1;  		for (int j = 0; j < countAme; j++) {  			v.Ponderaciones [j] = sheet.GetFloat (start' i);  			start += 2;  		}  		ficha.Variables [codigo] = v;  		var extra = sheet.GetString ("C"' i) ?? "";  		if (extra.Contains ("int"))  			v.Tipo = "int";  		if (extra.Contains ("script"))  			v.EsScript = true;  		last = codigo;  	}  	var valor = new ValorVariable (countAme);  	valor.Descripcion = sheet.GetString ("E"' i);  	valor.Expresion = expresion;  	for (int j = 0; j < countAme; j++) {  		valor.Puntajes [j] = sheet.GetFloat (j + valoresStart' i);  	}  	ficha.Variables [last].Valores.Add (valor);  }  
Magic Number,Vulcano.Engine.Carga,CargadorFichas,C:\repos\manologomez_Vulcano\Vulcano.Engine\Carga\CargadorFichas.cs,CargarFichas,The following statement contains a magic number: if (codigo != "" && codigo != last) {  	numFicha++;  	var v = new Variable (countAme) {  		Codigo = codigo'  		Orden = numFicha  	};  	v.Nombre = sheet.GetString ("D"' i);  	start = valoresStart + countAme + 1;  	for (int j = 0; j < countAme; j++) {  		v.Ponderaciones [j] = sheet.GetFloat (start' i);  		start += 2;  	}  	ficha.Variables [codigo] = v;  	var extra = sheet.GetString ("C"' i) ?? "";  	if (extra.Contains ("int"))  		v.Tipo = "int";  	if (extra.Contains ("script"))  		v.EsScript = true;  	last = codigo;  }  
Magic Number,Vulcano.Engine.Carga,CargadorFichas,C:\repos\manologomez_Vulcano\Vulcano.Engine\Carga\CargadorFichas.cs,CargarFichas,The following statement contains a magic number: for (int j = 0; j < countAme; j++) {  	v.Ponderaciones [j] = sheet.GetFloat (start' i);  	start += 2;  }  
Magic Number,Vulcano.Engine.Carga,CargadorFichas,C:\repos\manologomez_Vulcano\Vulcano.Engine\Carga\CargadorFichas.cs,CargarFichas,The following statement contains a magic number: start += 2;  
Magic Number,Vulcano.Engine.Carga,CargadorMapeos,C:\repos\manologomez_Vulcano\Vulcano.Engine\Carga\CargadorMapeos.cs,Cargar,The following statement contains a magic number: foreach (var sheet in excel.Sheets) {  	if (sheet.Name.StartsWith ("_"))  		continue;  	var mapa = new MapeosFuente {  		Fuente = sheet.Name  	};  	lista [mapa.Fuente] = mapa;  	for (int i = 2; i <= sheet.NumRows; i++) {  		var codigo = sheet.GetString ("A"' i);  		if (string.IsNullOrEmpty (codigo))  			break;  		if (codigo == "_reglas_") {  			mapa.ScriptReglas = sheet.GetString ("B"' i);  			break;  		}  		var mapeo = new MapeoCampo ();  		mapeo.CodigoVariable = codigo;  		mapeo.Campo = sheet.GetString ("B"' i);  		mapeo.Fuente = sheet.GetString ("C"' i);  		mapeo.Tipo = sheet.GetString ("D"' i);  		mapeo.Catalogo = sheet.GetString ("E"' i);  		mapeo.Expresion = sheet.GetString ("F"' i);  		mapa.Campos [codigo] = mapeo;  	}  }  
Magic Number,Vulcano.Engine.Carga,CargadorMapeos,C:\repos\manologomez_Vulcano\Vulcano.Engine\Carga\CargadorMapeos.cs,Cargar,The following statement contains a magic number: for (int i = 2; i <= sheet.NumRows; i++) {  	var codigo = sheet.GetString ("A"' i);  	if (string.IsNullOrEmpty (codigo))  		break;  	if (codigo == "_reglas_") {  		mapa.ScriptReglas = sheet.GetString ("B"' i);  		break;  	}  	var mapeo = new MapeoCampo ();  	mapeo.CodigoVariable = codigo;  	mapeo.Campo = sheet.GetString ("B"' i);  	mapeo.Fuente = sheet.GetString ("C"' i);  	mapeo.Tipo = sheet.GetString ("D"' i);  	mapeo.Catalogo = sheet.GetString ("E"' i);  	mapeo.Expresion = sheet.GetString ("F"' i);  	mapa.Campos [codigo] = mapeo;  }  
Magic Number,Vulcano.Engine.Carga,CargadorFichasExcel,C:\repos\manologomez_Vulcano\Vulcano.Engine\Carga\CargadorFichasExcel.cs,CargarFichas,The following statement contains a magic number: foreach (var sheet in book.Sheets) {  	var ficha = new FichaIndicadores {  		Nombre = sheet.Name'  		Descripcion = sheet.GetString ("A3")  	};  	lista.Add (ficha);  	bool fin = false;  	var start = valoresStart;  	while (!fin) {  		var valor = sheet.GetString (start' 2);  		if (string.IsNullOrEmpty (valor) || valor == "valores" || ficha.Temas.Contains (valor))  			fin = true;  		else  			ficha.Temas.Add (valor);  		start++;  	}  	var last = "";  	var countAme = ficha.Temas.Count;  	var numFicha = 0;  	for (int i = 3; i <= sheet.NumRows; i++) {  		var expresion = sheet.GetString ("F"' i) ?? "";  		if (expresion == "")  			break;  		var codigo = sheet.GetString ("B"' i) ?? "";  		if (codigo != "" && codigo != last) {  			numFicha++;  			var v = new Variable (countAme) {  				Codigo = codigo'  				Orden = numFicha  			};  			v.Nombre = sheet.GetString ("D"' i);  			start = valoresStart + countAme + 1;  			for (int j = 0; j < countAme; j++) {  				v.Ponderaciones [j] = sheet.GetFloat (start' i);  				start += 2;  			}  			ficha.Variables [codigo] = v;  			var extra = sheet.GetString ("C"' i) ?? "";  			if (extra.Contains ("int"))  				v.Tipo = "int";  			if (extra.Contains ("script"))  				v.EsScript = true;  			last = codigo;  		}  		var valor = new ValorVariable (countAme);  		valor.Descripcion = sheet.GetString ("E"' i);  		valor.Expresion = expresion;  		for (int j = 0; j < countAme; j++) {  			valor.Puntajes [j] = sheet.GetFloat (j + valoresStart' i);  		}  		ficha.Variables [last].Valores.Add (valor);  	}  }  
Magic Number,Vulcano.Engine.Carga,CargadorFichasExcel,C:\repos\manologomez_Vulcano\Vulcano.Engine\Carga\CargadorFichasExcel.cs,CargarFichas,The following statement contains a magic number: foreach (var sheet in book.Sheets) {  	var ficha = new FichaIndicadores {  		Nombre = sheet.Name'  		Descripcion = sheet.GetString ("A3")  	};  	lista.Add (ficha);  	bool fin = false;  	var start = valoresStart;  	while (!fin) {  		var valor = sheet.GetString (start' 2);  		if (string.IsNullOrEmpty (valor) || valor == "valores" || ficha.Temas.Contains (valor))  			fin = true;  		else  			ficha.Temas.Add (valor);  		start++;  	}  	var last = "";  	var countAme = ficha.Temas.Count;  	var numFicha = 0;  	for (int i = 3; i <= sheet.NumRows; i++) {  		var expresion = sheet.GetString ("F"' i) ?? "";  		if (expresion == "")  			break;  		var codigo = sheet.GetString ("B"' i) ?? "";  		if (codigo != "" && codigo != last) {  			numFicha++;  			var v = new Variable (countAme) {  				Codigo = codigo'  				Orden = numFicha  			};  			v.Nombre = sheet.GetString ("D"' i);  			start = valoresStart + countAme + 1;  			for (int j = 0; j < countAme; j++) {  				v.Ponderaciones [j] = sheet.GetFloat (start' i);  				start += 2;  			}  			ficha.Variables [codigo] = v;  			var extra = sheet.GetString ("C"' i) ?? "";  			if (extra.Contains ("int"))  				v.Tipo = "int";  			if (extra.Contains ("script"))  				v.EsScript = true;  			last = codigo;  		}  		var valor = new ValorVariable (countAme);  		valor.Descripcion = sheet.GetString ("E"' i);  		valor.Expresion = expresion;  		for (int j = 0; j < countAme; j++) {  			valor.Puntajes [j] = sheet.GetFloat (j + valoresStart' i);  		}  		ficha.Variables [last].Valores.Add (valor);  	}  }  
Magic Number,Vulcano.Engine.Carga,CargadorFichasExcel,C:\repos\manologomez_Vulcano\Vulcano.Engine\Carga\CargadorFichasExcel.cs,CargarFichas,The following statement contains a magic number: foreach (var sheet in book.Sheets) {  	var ficha = new FichaIndicadores {  		Nombre = sheet.Name'  		Descripcion = sheet.GetString ("A3")  	};  	lista.Add (ficha);  	bool fin = false;  	var start = valoresStart;  	while (!fin) {  		var valor = sheet.GetString (start' 2);  		if (string.IsNullOrEmpty (valor) || valor == "valores" || ficha.Temas.Contains (valor))  			fin = true;  		else  			ficha.Temas.Add (valor);  		start++;  	}  	var last = "";  	var countAme = ficha.Temas.Count;  	var numFicha = 0;  	for (int i = 3; i <= sheet.NumRows; i++) {  		var expresion = sheet.GetString ("F"' i) ?? "";  		if (expresion == "")  			break;  		var codigo = sheet.GetString ("B"' i) ?? "";  		if (codigo != "" && codigo != last) {  			numFicha++;  			var v = new Variable (countAme) {  				Codigo = codigo'  				Orden = numFicha  			};  			v.Nombre = sheet.GetString ("D"' i);  			start = valoresStart + countAme + 1;  			for (int j = 0; j < countAme; j++) {  				v.Ponderaciones [j] = sheet.GetFloat (start' i);  				start += 2;  			}  			ficha.Variables [codigo] = v;  			var extra = sheet.GetString ("C"' i) ?? "";  			if (extra.Contains ("int"))  				v.Tipo = "int";  			if (extra.Contains ("script"))  				v.EsScript = true;  			last = codigo;  		}  		var valor = new ValorVariable (countAme);  		valor.Descripcion = sheet.GetString ("E"' i);  		valor.Expresion = expresion;  		for (int j = 0; j < countAme; j++) {  			valor.Puntajes [j] = sheet.GetFloat (j + valoresStart' i);  		}  		ficha.Variables [last].Valores.Add (valor);  	}  }  
Magic Number,Vulcano.Engine.Carga,CargadorFichasExcel,C:\repos\manologomez_Vulcano\Vulcano.Engine\Carga\CargadorFichasExcel.cs,CargarFichas,The following statement contains a magic number: while (!fin) {  	var valor = sheet.GetString (start' 2);  	if (string.IsNullOrEmpty (valor) || valor == "valores" || ficha.Temas.Contains (valor))  		fin = true;  	else  		ficha.Temas.Add (valor);  	start++;  }  
Magic Number,Vulcano.Engine.Carga,CargadorFichasExcel,C:\repos\manologomez_Vulcano\Vulcano.Engine\Carga\CargadorFichasExcel.cs,CargarFichas,The following statement contains a magic number: for (int i = 3; i <= sheet.NumRows; i++) {  	var expresion = sheet.GetString ("F"' i) ?? "";  	if (expresion == "")  		break;  	var codigo = sheet.GetString ("B"' i) ?? "";  	if (codigo != "" && codigo != last) {  		numFicha++;  		var v = new Variable (countAme) {  			Codigo = codigo'  			Orden = numFicha  		};  		v.Nombre = sheet.GetString ("D"' i);  		start = valoresStart + countAme + 1;  		for (int j = 0; j < countAme; j++) {  			v.Ponderaciones [j] = sheet.GetFloat (start' i);  			start += 2;  		}  		ficha.Variables [codigo] = v;  		var extra = sheet.GetString ("C"' i) ?? "";  		if (extra.Contains ("int"))  			v.Tipo = "int";  		if (extra.Contains ("script"))  			v.EsScript = true;  		last = codigo;  	}  	var valor = new ValorVariable (countAme);  	valor.Descripcion = sheet.GetString ("E"' i);  	valor.Expresion = expresion;  	for (int j = 0; j < countAme; j++) {  		valor.Puntajes [j] = sheet.GetFloat (j + valoresStart' i);  	}  	ficha.Variables [last].Valores.Add (valor);  }  
Magic Number,Vulcano.Engine.Carga,CargadorFichasExcel,C:\repos\manologomez_Vulcano\Vulcano.Engine\Carga\CargadorFichasExcel.cs,CargarFichas,The following statement contains a magic number: for (int i = 3; i <= sheet.NumRows; i++) {  	var expresion = sheet.GetString ("F"' i) ?? "";  	if (expresion == "")  		break;  	var codigo = sheet.GetString ("B"' i) ?? "";  	if (codigo != "" && codigo != last) {  		numFicha++;  		var v = new Variable (countAme) {  			Codigo = codigo'  			Orden = numFicha  		};  		v.Nombre = sheet.GetString ("D"' i);  		start = valoresStart + countAme + 1;  		for (int j = 0; j < countAme; j++) {  			v.Ponderaciones [j] = sheet.GetFloat (start' i);  			start += 2;  		}  		ficha.Variables [codigo] = v;  		var extra = sheet.GetString ("C"' i) ?? "";  		if (extra.Contains ("int"))  			v.Tipo = "int";  		if (extra.Contains ("script"))  			v.EsScript = true;  		last = codigo;  	}  	var valor = new ValorVariable (countAme);  	valor.Descripcion = sheet.GetString ("E"' i);  	valor.Expresion = expresion;  	for (int j = 0; j < countAme; j++) {  		valor.Puntajes [j] = sheet.GetFloat (j + valoresStart' i);  	}  	ficha.Variables [last].Valores.Add (valor);  }  
Magic Number,Vulcano.Engine.Carga,CargadorFichasExcel,C:\repos\manologomez_Vulcano\Vulcano.Engine\Carga\CargadorFichasExcel.cs,CargarFichas,The following statement contains a magic number: if (codigo != "" && codigo != last) {  	numFicha++;  	var v = new Variable (countAme) {  		Codigo = codigo'  		Orden = numFicha  	};  	v.Nombre = sheet.GetString ("D"' i);  	start = valoresStart + countAme + 1;  	for (int j = 0; j < countAme; j++) {  		v.Ponderaciones [j] = sheet.GetFloat (start' i);  		start += 2;  	}  	ficha.Variables [codigo] = v;  	var extra = sheet.GetString ("C"' i) ?? "";  	if (extra.Contains ("int"))  		v.Tipo = "int";  	if (extra.Contains ("script"))  		v.EsScript = true;  	last = codigo;  }  
Magic Number,Vulcano.Engine.Carga,CargadorFichasExcel,C:\repos\manologomez_Vulcano\Vulcano.Engine\Carga\CargadorFichasExcel.cs,CargarFichas,The following statement contains a magic number: for (int j = 0; j < countAme; j++) {  	v.Ponderaciones [j] = sheet.GetFloat (start' i);  	start += 2;  }  
Magic Number,Vulcano.Engine.Carga,CargadorFichasExcel,C:\repos\manologomez_Vulcano\Vulcano.Engine\Carga\CargadorFichasExcel.cs,CargarFichas,The following statement contains a magic number: start += 2;  
Magic Number,Vulcano.Engine,Procesador,C:\repos\manologomez_Vulcano\Vulcano.Engine\Procesador.cs,Calcular2,The following statement contains a magic number: Grabador.Guardar (Resultados' (i' msg) =>  {  	if (i % 500 == 0) {  		Print ("Guardados " + i);  		Progreso (i' msg);  	}  	if (msg == "total")  		Print ("Fin guardar");  });  
Magic Number,Vulcano.Engine,Procesador,C:\repos\manologomez_Vulcano\Vulcano.Engine\Procesador.cs,Calcular2,The following statement contains a magic number: if (i % 500 == 0) {  	Print ("Guardados " + i);  	Progreso (i' msg);  }  
Magic Number,Vulcano.Engine.Dominio,FichaIndicadores,C:\repos\manologomez_Vulcano\Vulcano.Engine\Dominio\FichaIndicadores.cs,Leyenda,The following statement contains a magic number: foreach (var par in Leyendas.Where (p => p.Value != null && p.Value.Length == 2)) {  	var rango = par.Value;  	if (total >= rango [0] && total < rango [1])  		return par.Key;  }  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,Database,The following statement contains a magic number: _sharedConnectionDepth = 2;  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (item == null) {  	p.Value = DBNull.Value;  }  else {  	var t = item.GetType ();  	if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int  	 {  		p.Value = (int)item;  	}  	else if (t == typeof(Guid)) {  		p.Value = item.ToString ();  		p.DbType = DbType.String;  		p.Size = 40;  	}  	else if (t == typeof(string)) {  		p.Size = Math.Max ((item as string).Length + 1' 4000);  		// Help query plan caching by using common size  		p.Value = item;  	}  	else if (t == typeof(AnsiString)) {  		// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  		p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  		p.Value = (item as AnsiString).Value;  		p.DbType = DbType.AnsiString;  	}  	else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  		p.Value = ((bool)item) ? 1 : 0;  	}  	else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  		//geography is the equivalent SQL Server Type  		p.Value = item;  	}  	else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  		//geography is the equivalent SQL Server Type  		p.Value = item;  	}  	else {  		p.Value = item;  	}  }  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (item == null) {  	p.Value = DBNull.Value;  }  else {  	var t = item.GetType ();  	if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int  	 {  		p.Value = (int)item;  	}  	else if (t == typeof(Guid)) {  		p.Value = item.ToString ();  		p.DbType = DbType.String;  		p.Size = 40;  	}  	else if (t == typeof(string)) {  		p.Size = Math.Max ((item as string).Length + 1' 4000);  		// Help query plan caching by using common size  		p.Value = item;  	}  	else if (t == typeof(AnsiString)) {  		// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  		p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  		p.Value = (item as AnsiString).Value;  		p.DbType = DbType.AnsiString;  	}  	else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  		p.Value = ((bool)item) ? 1 : 0;  	}  	else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  		//geography is the equivalent SQL Server Type  		p.Value = item;  	}  	else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  		//geography is the equivalent SQL Server Type  		p.Value = item;  	}  	else {  		p.Value = item;  	}  }  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (item == null) {  	p.Value = DBNull.Value;  }  else {  	var t = item.GetType ();  	if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int  	 {  		p.Value = (int)item;  	}  	else if (t == typeof(Guid)) {  		p.Value = item.ToString ();  		p.DbType = DbType.String;  		p.Size = 40;  	}  	else if (t == typeof(string)) {  		p.Size = Math.Max ((item as string).Length + 1' 4000);  		// Help query plan caching by using common size  		p.Value = item;  	}  	else if (t == typeof(AnsiString)) {  		// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  		p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  		p.Value = (item as AnsiString).Value;  		p.DbType = DbType.AnsiString;  	}  	else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  		p.Value = ((bool)item) ? 1 : 0;  	}  	else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  		//geography is the equivalent SQL Server Type  		p.Value = item;  	}  	else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  		//geography is the equivalent SQL Server Type  		p.Value = item;  	}  	else {  		p.Value = item;  	}  }  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int   {  	p.Value = (int)item;  }  else if (t == typeof(Guid)) {  	p.Value = item.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int   {  	p.Value = (int)item;  }  else if (t == typeof(Guid)) {  	p.Value = item.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int   {  	p.Value = (int)item;  }  else if (t == typeof(Guid)) {  	p.Value = item.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(Guid)) {  	p.Value = item.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(Guid)) {  	p.Value = item.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(Guid)) {  	p.Value = item.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: p.Size = 40;  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: p.Size = Math.Max ((item as string).Length + 1' 4000);  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  
Magic Number,PetaPoco,Sql,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,Build,The following statement contains a magic number: if (!String.IsNullOrEmpty (_sql)) {  	// Add SQL to the string  	if (sb.Length > 0) {  		sb.Append ("\n");  	}  	var sql = Database.ProcessParams (_sql' _args' args);  	if (Is (lhs' "WHERE ") && Is (this' "WHERE "))  		sql = "AND " + sql.Substring (6);  	if (Is (lhs' "ORDER BY ") && Is (this' "ORDER BY "))  		sql = "' " + sql.Substring (9);  	sb.Append (sql);  }  
Magic Number,PetaPoco,Sql,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,Build,The following statement contains a magic number: if (!String.IsNullOrEmpty (_sql)) {  	// Add SQL to the string  	if (sb.Length > 0) {  		sb.Append ("\n");  	}  	var sql = Database.ProcessParams (_sql' _args' args);  	if (Is (lhs' "WHERE ") && Is (this' "WHERE "))  		sql = "AND " + sql.Substring (6);  	if (Is (lhs' "ORDER BY ") && Is (this' "ORDER BY "))  		sql = "' " + sql.Substring (9);  	sb.Append (sql);  }  
Magic Number,PetaPoco,Sql,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,Build,The following statement contains a magic number: if (Is (lhs' "WHERE ") && Is (this' "WHERE "))  	sql = "AND " + sql.Substring (6);  
Magic Number,PetaPoco,Sql,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,Build,The following statement contains a magic number: sql = "AND " + sql.Substring (6);  
Magic Number,PetaPoco,Sql,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,Build,The following statement contains a magic number: if (Is (lhs' "ORDER BY ") && Is (this' "ORDER BY "))  	sql = "' " + sql.Substring (9);  
Magic Number,PetaPoco,Sql,C:\repos\manologomez_Vulcano\Vulcano.Engine\Models\PetaPoco.cs,Build,The following statement contains a magic number: sql = "' " + sql.Substring (9);  
Missing Default,Vulcano.Engine,RepoGeneral,C:\repos\manologomez_Vulcano\Vulcano.Engine\Repositorios.cs,BorrarResultados,The following switch statement is missing a default case: switch (parametro.Key) {  case "Proceso":  	form.Proceso = txt;  	break;  case "Tipo":  	form.Tipo = txt;  	break;  case "Canton":  	form.Ciudad = txt;  	break;  }  
