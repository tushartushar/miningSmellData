Implementation smell,Namespace,Class,File,Method,Description
Long Method,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,Insert,The method has 118 lines of code.
Complex Method,Vulcano.App.Reportes,TablaOcurrencias,C:\repos\manologomez_Vulcano\Vulcano.App\Reportes\TablaOcurrencias.cs,Generar,Cyclomatic complexity of the method is 8
Complex Method,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,CommonConstruct,Cyclomatic complexity of the method is 9
Complex Method,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,AddParam,Cyclomatic complexity of the method is 12
Complex Method,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,Query,Cyclomatic complexity of the method is 10
Complex Method,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,Query,Cyclomatic complexity of the method is 13
Complex Method,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,Insert,Cyclomatic complexity of the method is 43
Complex Method,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,Update,Cyclomatic complexity of the method is 13
Long Parameter List,Vulcano.App.Reportes,ExportadorExcel,C:\repos\manologomez_Vulcano\Vulcano.App\Reportes\ExportadorExcel.cs,GuardarRedes,The method has 5 parameters.
Long Parameter List,Vulcano.App.Reportes,TablaOcurrencias,C:\repos\manologomez_Vulcano\Vulcano.App\Reportes\TablaOcurrencias.cs,Generar,The method has 5 parameters.
Long Parameter List,Vulcano.App.Reportes,TablaOcurrencias,C:\repos\manologomez_Vulcano\Vulcano.App\Reportes\TablaOcurrencias.cs,AddTable,The method has 5 parameters.
Long Parameter List,Vulcano.App.Redes,FuenteRedes,C:\repos\manologomez_Vulcano\Vulcano.App\Redes\FuenteRedes.cs,LlenarTabla,The method has 5 parameters.
Long Parameter List,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,BuildPageQueries,The method has 6 parameters.
Long Parameter List,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,FindSplitPoint,The method has 5 parameters.
Long Parameter List,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,Update,The method has 5 parameters.
Long Statement,Vulcano.App,Bootstrapper,C:\repos\manologomez_Vulcano\Vulcano.App\Bootstrapper.cs,Init,The length of the statement  "	Container.Register (AllTypes.FromThisAssembly ().BasedOn<IFuenteDatos> ().WithService.FirstInterface ().LifestyleTransient ()); " is 127.
Long Statement,Vulcano.App,Bootstrapper,C:\repos\manologomez_Vulcano\Vulcano.App\Bootstrapper.cs,Init,The length of the statement  "	Container.Register (AllTypes.FromThisAssembly ().BasedOn<IProcesoEspecial> ().WithService.FirstInterface ().LifestyleTransient ()); " is 131.
Long Statement,Vulcano.App,FrmMain,C:\repos\manologomez_Vulcano\Vulcano.App\FrmMain.cs,PushMessage,The length of the statement  "			sb.AppendLine ("-- inner exception").AppendLine (e.Error.InnerException.Message).AppendLine (e.Error.InnerException.StackTrace); " is 128.
Long Statement,Vulcano.App.Implementaciones,FuenteBasePredios,C:\repos\manologomez_Vulcano\Vulcano.App\Implementaciones\FuenteBasePredios.cs,CodManzana,The length of the statement  "	return string.Format ("{0}{1}{2}"' fuente.GetString ("c_zona")' fuente.GetString ("c_sector")' fuente.GetString ("c_manzana")); " is 127.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,CommonConstruct,The length of the statement  "	if (_dbType == DBType.MySql && _connectionString != null && _connectionString.IndexOf ("Allow User Variables=true") >= 0) " is 121.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,ProcessParams,The length of the statement  "				throw new ArgumentOutOfRangeException (string.Format ("Parameter '@{0}' specified but only {1} parameters supplied (in `{2}`)"' paramIndex' args_src.Length' _sql)); " is 164.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,ProcessParams,The length of the statement  "				throw new ArgumentException (string.Format ("Parameter '@{0}' specified but none of the passed arguments have a property with this name (in '{1}')"' param' _sql)); " is 163.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,ProcessParams,The length of the statement  "		if ((arg_val as System.Collections.IEnumerable) != null && (arg_val as string) == null && (arg_val as byte[]) == null) { " is 120.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,SplitSqlForPaging,The length of the statement  "		sqlCount = sql.Substring (0' g.Index) + "COUNT(" + m.Groups [1].ToString ().Trim () + ") " + sql.Substring (g.Index + g.Length); " is 128.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,BuildPageQueries,The length of the statement  "		sqlPage = string.Format ("SELECT * FROM (SELECT ROW_NUMBER() OVER ({0}) peta_rn' {1}) peta_paged WHERE peta_rn>@{2} AND peta_rn<=@{3}"' sqlOrderBy == null ? "ORDER BY (SELECT NULL)" : sqlOrderBy' sqlSelectRemoved' args.Length' args.Length + 1); " is 244.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,Query,The length of the statement  "			var factory = pd.GetFactory (cmd.CommandText' _sharedConnection.ConnectionString' ForceDateTimesToUtc' 0' r.FieldCount' r) as Func<IDataReader' T>; " is 147.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,GetAutoMapper,The length of the statement  "					throw new InvalidOperationException (string.Format ("Can't auto join {0} as {1} has more than one property of type {0}"' types [i]' types [j])); " is 144.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,FindSplitPoint,The length of the statement  "		return PocoData.ForType (typeThis).GetFactory (sql' _sharedConnection.ConnectionString' ForceDateTimesToUtc' pos' r.FieldCount - pos' r); " is 137.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,FindSplitPoint,The length of the statement  "		if (usedColumns.ContainsKey (fieldName) || (!pdThis.Columns.ContainsKey (fieldName) && pdNext.Columns.ContainsKey (fieldName))) { " is 129.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,FindSplitPoint,The length of the statement  "			return pdThis.GetFactory (sql' _sharedConnection.ConnectionString' ForceDateTimesToUtc' firstColumn' pos - firstColumn' r); " is 123.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,FindSplitPoint,The length of the statement  "	throw new InvalidOperationException (string.Format ("Couldn't find split point between {0} and {1}"' typeThis' typeNext)); " is 122.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,CreateMultiPocoFactory,The length of the statement  "	return (Func<IDataReader' object' TRet>)m.CreateDelegate (typeof(Func<IDataReader' object' TRet>)' new MultiPocoFactory () { " is 124.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,Exists,The length of the statement  "	return FirstOrDefault<T> (string.Format ("WHERE {0}=@0"' EscapeSqlIdentifier (PocoData.ForType (typeof(T)).TableInfo.PrimaryKey))' primaryKey) != null; " is 151.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,Single,The length of the statement  "	return Single<T> (string.Format ("WHERE {0}=@0"' EscapeSqlIdentifier (PocoData.ForType (typeof(T)).TableInfo.PrimaryKey))' primaryKey); " is 135.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,SingleOrDefault,The length of the statement  "	return SingleOrDefault<T> (string.Format ("WHERE {0}=@0"' EscapeSqlIdentifier (PocoData.ForType (typeof(T)).TableInfo.PrimaryKey))' primaryKey); " is 144.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,Insert,The length of the statement  "				cmd.CommandText = string.Format ("INSERT INTO {0} ({1}) VALUES ({2})"' EscapeTableName (tableName)' string.Join ("'"' names.ToArray ())' string.Join ("'"' values.ToArray ())); " is 175.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,Update,The length of the statement  "				cmd.CommandText = string.Format ("UPDATE {0} SET {1} WHERE {2} = {3}{4}"' EscapeTableName (tableName)' sb.ToString ()' EscapeSqlIdentifier (primaryKeyName)' _paramPrefix' index++); " is 180.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,Delete,The length of the statement  "	var sql = string.Format ("DELETE FROM {0} WHERE {1}=@0"' EscapeTableName (tableName)' EscapeSqlIdentifier (primaryKeyName)); " is 124.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,IsNew,The length of the statement  "			throw new ArgumentException (string.Format ("The object doesn't have a property matching the primary key column name '{0}'"' primaryKeyName)); " is 142.
Long Statement,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,IsNew,The length of the statement  "		throw new InvalidOperationException ("IsNew() and Save() are only supported on tables with auto-increment/identity primary key columns"); " is 137.
Magic Number,Vulcano.App,FrmMain,C:\repos\manologomez_Vulcano\Vulcano.App\FrmMain.cs,FrmMain_Load,The following statement contains a magic number: editorScript.TextEditorProperties.Font = new Font (font.FontFamily' 8);  
Magic Number,Vulcano.App,FrmMain,C:\repos\manologomez_Vulcano\Vulcano.App\FrmMain.cs,BtnTestFuente_Click,The following statement contains a magic number: try {  	var fuente = fuentesFactory.Fuentes.FirstOrDefault (x => x.Name == aux);  	var city = ComboCiudad.ComboBox.SelectedItem as Ciudad;  	var total = fuente.Total (city);  	var lista = fuente.Valores (city' 10);  	var msg = string.Format ("Probando canton {0}' fuente{1}"' city.Nombre' fuente.Name);  	LogMessage (msg);  	if (lista == null || lista.Count == 0) {  		MessageBox.Show ("No vinieron datos");  		return;  	}  	LogMessage ("Total: " + total);  	var sb = new StringBuilder ("Primero: ").AppendLine ();  	var uno = lista.First ();  	var json1 = JsonConvert.SerializeObject (uno' Formatting.Indented);  	sb.AppendLine (json1);  	if (lista.Count > 1) {  		var rand = new Random ().Next (0' lista.Count - 1);  		var obj = lista [rand];  		var json2 = JsonConvert.SerializeObject (obj' Formatting.Indented);  		sb.AppendLine ("Al azar:" + rand).AppendLine (json2);  	}  	sb.AppendFormat ("Total Registros: {0}"' total).AppendLine ();  	var frm = new FrmDebug ();  	frm.SetData (msg' sb.ToString ());  	frm.Show ();  }  catch (Exception ex) {  	LogMessage ("Error en prueba fuente:" + ex.Message' ex);  }  
Magic Number,Vulcano.App.Especiales,ProcesoManzanas,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesoManzanas.cs,CalcularManzanas,The following statement contains a magic number: foreach (var grupo in grupos) {  	var res = ProcesosUtils.CrearRes (grupo.First ());  	res.Nombre = grupo.Key;  	res.Tipo_item = "manzana";  	res.Codigo = grupo.Key;  	res.Numcomponentes = grupo.Count ();  	res.Completo = grupo.Average (x => x.Completo);  	//var filtrados = grupo.Where(x => x.Completo.HasValue && x.Completo == 1);  	float area = 0;  	var map = new Dictionary<int' float> ();  	//foreach (var dato in filtrados) {  	foreach (var dato in grupo) {  		if (dato.Area == null || dato.Completo == null || dato.Completo.Value < Tolerancia)  			continue;  		res.Numevaluados += 1;  		area += dato.Area.Value;  		// OJO que aqu� se debe generalizar m�s para que coja todos los indicadores  		ProcesosUtils.Adicionar (map' 1' dato.Indicador1' dato.Area);  		ProcesosUtils.Adicionar (map' 2' dato.Indicador2' dato.Area);  		ProcesosUtils.Adicionar (map' 3' dato.Indicador3' dato.Area);  		ProcesosUtils.Adicionar (map' 4' dato.Indicador4' dato.Area);  	}  	if (area > 0) {  		var keys = map.Keys.ToList ();  		foreach (var key in keys) {  			map [key] = map [key] / area;  		}  		ProcesosUtils.LlenarResultado (map' res);  		res.Area = area;  	}  	nuevos.Add (res);  }  
Magic Number,Vulcano.App.Especiales,ProcesoManzanas,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesoManzanas.cs,CalcularManzanas,The following statement contains a magic number: foreach (var grupo in grupos) {  	var res = ProcesosUtils.CrearRes (grupo.First ());  	res.Nombre = grupo.Key;  	res.Tipo_item = "manzana";  	res.Codigo = grupo.Key;  	res.Numcomponentes = grupo.Count ();  	res.Completo = grupo.Average (x => x.Completo);  	//var filtrados = grupo.Where(x => x.Completo.HasValue && x.Completo == 1);  	float area = 0;  	var map = new Dictionary<int' float> ();  	//foreach (var dato in filtrados) {  	foreach (var dato in grupo) {  		if (dato.Area == null || dato.Completo == null || dato.Completo.Value < Tolerancia)  			continue;  		res.Numevaluados += 1;  		area += dato.Area.Value;  		// OJO que aqu� se debe generalizar m�s para que coja todos los indicadores  		ProcesosUtils.Adicionar (map' 1' dato.Indicador1' dato.Area);  		ProcesosUtils.Adicionar (map' 2' dato.Indicador2' dato.Area);  		ProcesosUtils.Adicionar (map' 3' dato.Indicador3' dato.Area);  		ProcesosUtils.Adicionar (map' 4' dato.Indicador4' dato.Area);  	}  	if (area > 0) {  		var keys = map.Keys.ToList ();  		foreach (var key in keys) {  			map [key] = map [key] / area;  		}  		ProcesosUtils.LlenarResultado (map' res);  		res.Area = area;  	}  	nuevos.Add (res);  }  
Magic Number,Vulcano.App.Especiales,ProcesoManzanas,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesoManzanas.cs,CalcularManzanas,The following statement contains a magic number: foreach (var grupo in grupos) {  	var res = ProcesosUtils.CrearRes (grupo.First ());  	res.Nombre = grupo.Key;  	res.Tipo_item = "manzana";  	res.Codigo = grupo.Key;  	res.Numcomponentes = grupo.Count ();  	res.Completo = grupo.Average (x => x.Completo);  	//var filtrados = grupo.Where(x => x.Completo.HasValue && x.Completo == 1);  	float area = 0;  	var map = new Dictionary<int' float> ();  	//foreach (var dato in filtrados) {  	foreach (var dato in grupo) {  		if (dato.Area == null || dato.Completo == null || dato.Completo.Value < Tolerancia)  			continue;  		res.Numevaluados += 1;  		area += dato.Area.Value;  		// OJO que aqu� se debe generalizar m�s para que coja todos los indicadores  		ProcesosUtils.Adicionar (map' 1' dato.Indicador1' dato.Area);  		ProcesosUtils.Adicionar (map' 2' dato.Indicador2' dato.Area);  		ProcesosUtils.Adicionar (map' 3' dato.Indicador3' dato.Area);  		ProcesosUtils.Adicionar (map' 4' dato.Indicador4' dato.Area);  	}  	if (area > 0) {  		var keys = map.Keys.ToList ();  		foreach (var key in keys) {  			map [key] = map [key] / area;  		}  		ProcesosUtils.LlenarResultado (map' res);  		res.Area = area;  	}  	nuevos.Add (res);  }  
Magic Number,Vulcano.App.Especiales,ProcesoManzanas,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesoManzanas.cs,CalcularManzanas,The following statement contains a magic number: foreach (var dato in grupo) {  	if (dato.Area == null || dato.Completo == null || dato.Completo.Value < Tolerancia)  		continue;  	res.Numevaluados += 1;  	area += dato.Area.Value;  	// OJO que aqu� se debe generalizar m�s para que coja todos los indicadores  	ProcesosUtils.Adicionar (map' 1' dato.Indicador1' dato.Area);  	ProcesosUtils.Adicionar (map' 2' dato.Indicador2' dato.Area);  	ProcesosUtils.Adicionar (map' 3' dato.Indicador3' dato.Area);  	ProcesosUtils.Adicionar (map' 4' dato.Indicador4' dato.Area);  }  
Magic Number,Vulcano.App.Especiales,ProcesoManzanas,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesoManzanas.cs,CalcularManzanas,The following statement contains a magic number: foreach (var dato in grupo) {  	if (dato.Area == null || dato.Completo == null || dato.Completo.Value < Tolerancia)  		continue;  	res.Numevaluados += 1;  	area += dato.Area.Value;  	// OJO que aqu� se debe generalizar m�s para que coja todos los indicadores  	ProcesosUtils.Adicionar (map' 1' dato.Indicador1' dato.Area);  	ProcesosUtils.Adicionar (map' 2' dato.Indicador2' dato.Area);  	ProcesosUtils.Adicionar (map' 3' dato.Indicador3' dato.Area);  	ProcesosUtils.Adicionar (map' 4' dato.Indicador4' dato.Area);  }  
Magic Number,Vulcano.App.Especiales,ProcesoManzanas,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesoManzanas.cs,CalcularManzanas,The following statement contains a magic number: foreach (var dato in grupo) {  	if (dato.Area == null || dato.Completo == null || dato.Completo.Value < Tolerancia)  		continue;  	res.Numevaluados += 1;  	area += dato.Area.Value;  	// OJO que aqu� se debe generalizar m�s para que coja todos los indicadores  	ProcesosUtils.Adicionar (map' 1' dato.Indicador1' dato.Area);  	ProcesosUtils.Adicionar (map' 2' dato.Indicador2' dato.Area);  	ProcesosUtils.Adicionar (map' 3' dato.Indicador3' dato.Area);  	ProcesosUtils.Adicionar (map' 4' dato.Indicador4' dato.Area);  }  
Magic Number,Vulcano.App.Especiales,ProcesoManzanas,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesoManzanas.cs,CalcularManzanas,The following statement contains a magic number: ProcesosUtils.Adicionar (map' 2' dato.Indicador2' dato.Area);  
Magic Number,Vulcano.App.Especiales,ProcesoManzanas,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesoManzanas.cs,CalcularManzanas,The following statement contains a magic number: ProcesosUtils.Adicionar (map' 3' dato.Indicador3' dato.Area);  
Magic Number,Vulcano.App.Especiales,ProcesoManzanas,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesoManzanas.cs,CalcularManzanas,The following statement contains a magic number: ProcesosUtils.Adicionar (map' 4' dato.Indicador4' dato.Area);  
Magic Number,Vulcano.App.Especiales,ProcesoPredios,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesoPredios.cs,Procesar,The following statement contains a magic number: try {  	var lista = AgruparPredios (ciudad);  	Print ("Resultados: " + lista.Count);  	if (lista.Count > 0) {  		var first = lista [0];  		Print ("Borrando...");  		var borrados = RepoGeneral.BorrarResultados (first.Proceso' first.Tipo_item' ciudad);  		Print ("Borrados: " + borrados);  		Print ("Guardando...");  		Grabador.Guardar (lista' (num' msg) =>  {  			if (num % 100 == 0)  				Print ("Guardados " + num);  		});  		Print ("Terminado");  	}  }  catch (Exception ex) {  	Print ("Error: " + ex.Message' ex);  }  
Magic Number,Vulcano.App.Especiales,ProcesoPredios,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesoPredios.cs,Procesar,The following statement contains a magic number: if (lista.Count > 0) {  	var first = lista [0];  	Print ("Borrando...");  	var borrados = RepoGeneral.BorrarResultados (first.Proceso' first.Tipo_item' ciudad);  	Print ("Borrados: " + borrados);  	Print ("Guardando...");  	Grabador.Guardar (lista' (num' msg) =>  {  		if (num % 100 == 0)  			Print ("Guardados " + num);  	});  	Print ("Terminado");  }  
Magic Number,Vulcano.App.Especiales,ProcesoPredios,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesoPredios.cs,Procesar,The following statement contains a magic number: Grabador.Guardar (lista' (num' msg) =>  {  	if (num % 100 == 0)  		Print ("Guardados " + num);  });  
Magic Number,Vulcano.App.Especiales,ProcesoPredios,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesoPredios.cs,Procesar,The following statement contains a magic number: if (num % 100 == 0)  	Print ("Guardados " + num);  
Magic Number,Vulcano.App.Especiales,ProcesoPredios,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesoPredios.cs,AgruparPredios,The following statement contains a magic number: foreach (var grupo in grupos) {  	var first = grupo.First ();  	var res = ProcesosUtils.CrearRes (first);  	res.Id_item = first.Id_item;  	res.Nombre = first.Nombre;  	res.Codigo = first.Codigo;  	res.Codigo2 = first.Codigo3;  	res.Tipo_item = "predio";  	res.Numcomponentes = grupo.Count ();  	res.Completo = grupo.Average (x => x.Completo);  	float area = 0;  	var map = new Dictionary<int' float> ();  	foreach (var dato in grupo) {  		if (dato.Area == null || dato.Completo == null || dato.Completo.Value < Tolerancia)  			continue;  		res.Numevaluados += 1;  		area += dato.Area.Value;  		ProcesosUtils.Adicionar (map' 1' dato.Indicador1' dato.Area);  		ProcesosUtils.Adicionar (map' 2' dato.Indicador2' dato.Area);  		ProcesosUtils.Adicionar (map' 3' dato.Indicador3' dato.Area);  		ProcesosUtils.Adicionar (map' 4' dato.Indicador4' dato.Area);  	}  	if (area > 0) {  		var keys = map.Keys.ToList ();  		foreach (var key in keys) {  			map [key] = map [key] / area;  		}  		ProcesosUtils.LlenarResultado (map' res);  		res.Area = area;  	}  	nuevos.Add (res);  }  
Magic Number,Vulcano.App.Especiales,ProcesoPredios,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesoPredios.cs,AgruparPredios,The following statement contains a magic number: foreach (var grupo in grupos) {  	var first = grupo.First ();  	var res = ProcesosUtils.CrearRes (first);  	res.Id_item = first.Id_item;  	res.Nombre = first.Nombre;  	res.Codigo = first.Codigo;  	res.Codigo2 = first.Codigo3;  	res.Tipo_item = "predio";  	res.Numcomponentes = grupo.Count ();  	res.Completo = grupo.Average (x => x.Completo);  	float area = 0;  	var map = new Dictionary<int' float> ();  	foreach (var dato in grupo) {  		if (dato.Area == null || dato.Completo == null || dato.Completo.Value < Tolerancia)  			continue;  		res.Numevaluados += 1;  		area += dato.Area.Value;  		ProcesosUtils.Adicionar (map' 1' dato.Indicador1' dato.Area);  		ProcesosUtils.Adicionar (map' 2' dato.Indicador2' dato.Area);  		ProcesosUtils.Adicionar (map' 3' dato.Indicador3' dato.Area);  		ProcesosUtils.Adicionar (map' 4' dato.Indicador4' dato.Area);  	}  	if (area > 0) {  		var keys = map.Keys.ToList ();  		foreach (var key in keys) {  			map [key] = map [key] / area;  		}  		ProcesosUtils.LlenarResultado (map' res);  		res.Area = area;  	}  	nuevos.Add (res);  }  
Magic Number,Vulcano.App.Especiales,ProcesoPredios,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesoPredios.cs,AgruparPredios,The following statement contains a magic number: foreach (var grupo in grupos) {  	var first = grupo.First ();  	var res = ProcesosUtils.CrearRes (first);  	res.Id_item = first.Id_item;  	res.Nombre = first.Nombre;  	res.Codigo = first.Codigo;  	res.Codigo2 = first.Codigo3;  	res.Tipo_item = "predio";  	res.Numcomponentes = grupo.Count ();  	res.Completo = grupo.Average (x => x.Completo);  	float area = 0;  	var map = new Dictionary<int' float> ();  	foreach (var dato in grupo) {  		if (dato.Area == null || dato.Completo == null || dato.Completo.Value < Tolerancia)  			continue;  		res.Numevaluados += 1;  		area += dato.Area.Value;  		ProcesosUtils.Adicionar (map' 1' dato.Indicador1' dato.Area);  		ProcesosUtils.Adicionar (map' 2' dato.Indicador2' dato.Area);  		ProcesosUtils.Adicionar (map' 3' dato.Indicador3' dato.Area);  		ProcesosUtils.Adicionar (map' 4' dato.Indicador4' dato.Area);  	}  	if (area > 0) {  		var keys = map.Keys.ToList ();  		foreach (var key in keys) {  			map [key] = map [key] / area;  		}  		ProcesosUtils.LlenarResultado (map' res);  		res.Area = area;  	}  	nuevos.Add (res);  }  
Magic Number,Vulcano.App.Especiales,ProcesoPredios,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesoPredios.cs,AgruparPredios,The following statement contains a magic number: foreach (var dato in grupo) {  	if (dato.Area == null || dato.Completo == null || dato.Completo.Value < Tolerancia)  		continue;  	res.Numevaluados += 1;  	area += dato.Area.Value;  	ProcesosUtils.Adicionar (map' 1' dato.Indicador1' dato.Area);  	ProcesosUtils.Adicionar (map' 2' dato.Indicador2' dato.Area);  	ProcesosUtils.Adicionar (map' 3' dato.Indicador3' dato.Area);  	ProcesosUtils.Adicionar (map' 4' dato.Indicador4' dato.Area);  }  
Magic Number,Vulcano.App.Especiales,ProcesoPredios,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesoPredios.cs,AgruparPredios,The following statement contains a magic number: foreach (var dato in grupo) {  	if (dato.Area == null || dato.Completo == null || dato.Completo.Value < Tolerancia)  		continue;  	res.Numevaluados += 1;  	area += dato.Area.Value;  	ProcesosUtils.Adicionar (map' 1' dato.Indicador1' dato.Area);  	ProcesosUtils.Adicionar (map' 2' dato.Indicador2' dato.Area);  	ProcesosUtils.Adicionar (map' 3' dato.Indicador3' dato.Area);  	ProcesosUtils.Adicionar (map' 4' dato.Indicador4' dato.Area);  }  
Magic Number,Vulcano.App.Especiales,ProcesoPredios,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesoPredios.cs,AgruparPredios,The following statement contains a magic number: foreach (var dato in grupo) {  	if (dato.Area == null || dato.Completo == null || dato.Completo.Value < Tolerancia)  		continue;  	res.Numevaluados += 1;  	area += dato.Area.Value;  	ProcesosUtils.Adicionar (map' 1' dato.Indicador1' dato.Area);  	ProcesosUtils.Adicionar (map' 2' dato.Indicador2' dato.Area);  	ProcesosUtils.Adicionar (map' 3' dato.Indicador3' dato.Area);  	ProcesosUtils.Adicionar (map' 4' dato.Indicador4' dato.Area);  }  
Magic Number,Vulcano.App.Especiales,ProcesoPredios,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesoPredios.cs,AgruparPredios,The following statement contains a magic number: ProcesosUtils.Adicionar (map' 2' dato.Indicador2' dato.Area);  
Magic Number,Vulcano.App.Especiales,ProcesoPredios,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesoPredios.cs,AgruparPredios,The following statement contains a magic number: ProcesosUtils.Adicionar (map' 3' dato.Indicador3' dato.Area);  
Magic Number,Vulcano.App.Especiales,ProcesoPredios,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesoPredios.cs,AgruparPredios,The following statement contains a magic number: ProcesosUtils.Adicionar (map' 4' dato.Indicador4' dato.Area);  
Magic Number,Vulcano.App.Especiales,ProcesosUtils,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesosUtils.cs,LlenarResultado,The following statement contains a magic number: if (map.ContainsKey (2))  	res.Indicador2 = map [2];  
Magic Number,Vulcano.App.Especiales,ProcesosUtils,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesosUtils.cs,LlenarResultado,The following statement contains a magic number: if (map.ContainsKey (2))  	res.Indicador2 = map [2];  
Magic Number,Vulcano.App.Especiales,ProcesosUtils,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesosUtils.cs,LlenarResultado,The following statement contains a magic number: res.Indicador2 = map [2];  
Magic Number,Vulcano.App.Especiales,ProcesosUtils,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesosUtils.cs,LlenarResultado,The following statement contains a magic number: if (map.ContainsKey (3))  	res.Indicador3 = map [3];  
Magic Number,Vulcano.App.Especiales,ProcesosUtils,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesosUtils.cs,LlenarResultado,The following statement contains a magic number: if (map.ContainsKey (3))  	res.Indicador3 = map [3];  
Magic Number,Vulcano.App.Especiales,ProcesosUtils,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesosUtils.cs,LlenarResultado,The following statement contains a magic number: res.Indicador3 = map [3];  
Magic Number,Vulcano.App.Especiales,ProcesosUtils,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesosUtils.cs,LlenarResultado,The following statement contains a magic number: if (map.ContainsKey (4))  	res.Indicador4 = map [4];  
Magic Number,Vulcano.App.Especiales,ProcesosUtils,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesosUtils.cs,LlenarResultado,The following statement contains a magic number: if (map.ContainsKey (4))  	res.Indicador4 = map [4];  
Magic Number,Vulcano.App.Especiales,ProcesosUtils,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesosUtils.cs,LlenarResultado,The following statement contains a magic number: res.Indicador4 = map [4];  
Magic Number,Vulcano.App.Especiales,ProcesosUtils,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesosUtils.cs,LlenarResultado,The following statement contains a magic number: if (map.ContainsKey (5))  	res.Indicador5 = map [5];  
Magic Number,Vulcano.App.Especiales,ProcesosUtils,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesosUtils.cs,LlenarResultado,The following statement contains a magic number: if (map.ContainsKey (5))  	res.Indicador5 = map [5];  
Magic Number,Vulcano.App.Especiales,ProcesosUtils,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesosUtils.cs,LlenarResultado,The following statement contains a magic number: res.Indicador5 = map [5];  
Magic Number,Vulcano.App.Especiales,ProcesosUtils,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesosUtils.cs,LlenarResultado,The following statement contains a magic number: if (map.ContainsKey (6))  	res.Indicador6 = map [6];  
Magic Number,Vulcano.App.Especiales,ProcesosUtils,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesosUtils.cs,LlenarResultado,The following statement contains a magic number: if (map.ContainsKey (6))  	res.Indicador6 = map [6];  
Magic Number,Vulcano.App.Especiales,ProcesosUtils,C:\repos\manologomez_Vulcano\Vulcano.App\Especiales\ProcesosUtils.cs,LlenarResultado,The following statement contains a magic number: res.Indicador6 = map [6];  
Magic Number,Vulcano.App.Reportes,HistogramaIndicadores,C:\repos\manologomez_Vulcano\Vulcano.App\Reportes\HistogramaIndicadores.cs,LLenarHoja,The following statement contains a magic number: LlenarTabla (i' 3' sheet' "construccion");  
Magic Number,Vulcano.App.Reportes,HistogramaIndicadores,C:\repos\manologomez_Vulcano\Vulcano.App\Reportes\HistogramaIndicadores.cs,LLenarHoja,The following statement contains a magic number: LlenarTabla (i' 19' sheet' "manzana");  
Magic Number,Vulcano.App.Reportes,HistogramaIndicadores,C:\repos\manologomez_Vulcano\Vulcano.App\Reportes\HistogramaIndicadores.cs,LLenarHoja,The following statement contains a magic number: LlenarTabla (i' 35' sheet' "predio");  
Magic Number,Vulcano.App.Reportes,HistogramaIndicadores,C:\repos\manologomez_Vulcano\Vulcano.App\Reportes\HistogramaIndicadores.cs,LlenarTabla,The following statement contains a magic number: for (int j = 0; j < 10; j++) {  	var v = dt.Rows [0] [j];  	var real = j + offset;  	sheet.Cells ["B" + real].Value = v;  }  
Magic Number,Vulcano.App.Reportes,HistogramaIndicadores,C:\repos\manologomez_Vulcano\Vulcano.App\Reportes\HistogramaIndicadores.cs,LlenarTabla,The following statement contains a magic number: sheet.Cells ["B" + (offset + 10)].Value = dt.Rows [0] ["total"];  
Magic Number,Vulcano.App.Reportes,ExportadorExcel,C:\repos\manologomez_Vulcano\Vulcano.App\Reportes\ExportadorExcel.cs,CrearHoja,The following statement contains a magic number: i = 2;  
Magic Number,Vulcano.App.Reportes,ExportadorExcel,C:\repos\manologomez_Vulcano\Vulcano.App\Reportes\ExportadorExcel.cs,CrearHoja,The following statement contains a magic number: foreach (var res in lista) {  	var col = 1;  	SetValue (sheet.Cells [i' col++]' res.Canton);  	SetValue (sheet.Cells [i' col++]' res.Tipo_item);  	SetValue (sheet.Cells [i' col++]' res.Proceso);  	SetValue (sheet.Cells [i' col++]' res.Nombre);  	SetValue (sheet.Cells [i' col++]' res.Codigo);  	SetValue (sheet.Cells [i' col++]' res.Codigo2);  	SetValue (sheet.Cells [i' col++]' res.Completo);  	SetValue (sheet.Cells [i' col++]' res.Numevaluados);  	SetValue (sheet.Cells [i' col++]' res.Numcomponentes);  	for (int j = 1; j <= Ficha.Temas.Count; j++) {  		var f = ValorInd (res' j);  		SetValue (sheet.Cells [i' col++]' f);  	}  	SetValue (sheet.Cells [i' col++]' res.Fecha);  	SetValue (sheet.Cells [i' col++]' res.Area);  	//sheet.Cells[i' col++].Value = res.Fecha;  	//sheet.Cells[i' col++].Value = res.Area;  	if (i % 500 == 0)  		AppNotifier.Print ("Generados " + i);  	i++;  }  
Magic Number,Vulcano.App.Reportes,ExportadorExcel,C:\repos\manologomez_Vulcano\Vulcano.App\Reportes\ExportadorExcel.cs,CrearHoja,The following statement contains a magic number: if (i % 500 == 0)  	AppNotifier.Print ("Generados " + i);  
Magic Number,Vulcano.App.Reportes,ExportadorExcel,C:\repos\manologomez_Vulcano\Vulcano.App\Reportes\ExportadorExcel.cs,ValorInd,The following statement contains a magic number: switch (num) {  case 1:  	return res.Indicador1;  case 2:  	return res.Indicador2;  case 3:  	return res.Indicador3;  case 4:  	return res.Indicador4;  case 5:  	return res.Indicador5;  case 6:  	return res.Indicador6;  }  
Magic Number,Vulcano.App.Reportes,ExportadorExcel,C:\repos\manologomez_Vulcano\Vulcano.App\Reportes\ExportadorExcel.cs,ValorInd,The following statement contains a magic number: switch (num) {  case 1:  	return res.Indicador1;  case 2:  	return res.Indicador2;  case 3:  	return res.Indicador3;  case 4:  	return res.Indicador4;  case 5:  	return res.Indicador5;  case 6:  	return res.Indicador6;  }  
Magic Number,Vulcano.App.Reportes,ExportadorExcel,C:\repos\manologomez_Vulcano\Vulcano.App\Reportes\ExportadorExcel.cs,ValorInd,The following statement contains a magic number: switch (num) {  case 1:  	return res.Indicador1;  case 2:  	return res.Indicador2;  case 3:  	return res.Indicador3;  case 4:  	return res.Indicador4;  case 5:  	return res.Indicador5;  case 6:  	return res.Indicador6;  }  
Magic Number,Vulcano.App.Reportes,ExportadorExcel,C:\repos\manologomez_Vulcano\Vulcano.App\Reportes\ExportadorExcel.cs,ValorInd,The following statement contains a magic number: switch (num) {  case 1:  	return res.Indicador1;  case 2:  	return res.Indicador2;  case 3:  	return res.Indicador3;  case 4:  	return res.Indicador4;  case 5:  	return res.Indicador5;  case 6:  	return res.Indicador6;  }  
Magic Number,Vulcano.App.Reportes,ExportadorExcel,C:\repos\manologomez_Vulcano\Vulcano.App\Reportes\ExportadorExcel.cs,ValorInd,The following statement contains a magic number: switch (num) {  case 1:  	return res.Indicador1;  case 2:  	return res.Indicador2;  case 3:  	return res.Indicador3;  case 4:  	return res.Indicador4;  case 5:  	return res.Indicador5;  case 6:  	return res.Indicador6;  }  
Magic Number,Vulcano.App.Reportes,TablaOcurrencias,C:\repos\manologomez_Vulcano\Vulcano.App\Reportes\TablaOcurrencias.cs,Generar,The following statement contains a magic number: using (var pck = new ExcelPackage (new FileInfo (destino))) {  	foreach (var par in tablas) {  		var tuple = par.Value;  		var tabla = tuple.Item1;  		// tabla primaria  		var ws = pck.Workbook.Worksheets.Add (tabla.TableName);  		AddTable (1' 1' ws' tabla);  		var row = tabla.Rows.Count + 3;  		ws.Cells [row' 1].Value = "Tolerancia";  		ws.Cells [row' 1].Style.Font.Bold = true;  		ws.Cells [row' 2].Value = Tolerancia;  		ws.Cells [row' 2].Style.Font.Bold = true;  		ws.Row (1).Style.Font.Bold = true;  		// tabla porcentaje  		row += 2;  		AddTable (row' 1' ws' tuple.Item2' true);  		ws.Row (row).Style.Font.Bold = true;  	}  	pck.Save ();  }  
Magic Number,Vulcano.App.Reportes,TablaOcurrencias,C:\repos\manologomez_Vulcano\Vulcano.App\Reportes\TablaOcurrencias.cs,Generar,The following statement contains a magic number: using (var pck = new ExcelPackage (new FileInfo (destino))) {  	foreach (var par in tablas) {  		var tuple = par.Value;  		var tabla = tuple.Item1;  		// tabla primaria  		var ws = pck.Workbook.Worksheets.Add (tabla.TableName);  		AddTable (1' 1' ws' tabla);  		var row = tabla.Rows.Count + 3;  		ws.Cells [row' 1].Value = "Tolerancia";  		ws.Cells [row' 1].Style.Font.Bold = true;  		ws.Cells [row' 2].Value = Tolerancia;  		ws.Cells [row' 2].Style.Font.Bold = true;  		ws.Row (1).Style.Font.Bold = true;  		// tabla porcentaje  		row += 2;  		AddTable (row' 1' ws' tuple.Item2' true);  		ws.Row (row).Style.Font.Bold = true;  	}  	pck.Save ();  }  
Magic Number,Vulcano.App.Reportes,TablaOcurrencias,C:\repos\manologomez_Vulcano\Vulcano.App\Reportes\TablaOcurrencias.cs,Generar,The following statement contains a magic number: using (var pck = new ExcelPackage (new FileInfo (destino))) {  	foreach (var par in tablas) {  		var tuple = par.Value;  		var tabla = tuple.Item1;  		// tabla primaria  		var ws = pck.Workbook.Worksheets.Add (tabla.TableName);  		AddTable (1' 1' ws' tabla);  		var row = tabla.Rows.Count + 3;  		ws.Cells [row' 1].Value = "Tolerancia";  		ws.Cells [row' 1].Style.Font.Bold = true;  		ws.Cells [row' 2].Value = Tolerancia;  		ws.Cells [row' 2].Style.Font.Bold = true;  		ws.Row (1).Style.Font.Bold = true;  		// tabla porcentaje  		row += 2;  		AddTable (row' 1' ws' tuple.Item2' true);  		ws.Row (row).Style.Font.Bold = true;  	}  	pck.Save ();  }  
Magic Number,Vulcano.App.Reportes,TablaOcurrencias,C:\repos\manologomez_Vulcano\Vulcano.App\Reportes\TablaOcurrencias.cs,Generar,The following statement contains a magic number: using (var pck = new ExcelPackage (new FileInfo (destino))) {  	foreach (var par in tablas) {  		var tuple = par.Value;  		var tabla = tuple.Item1;  		// tabla primaria  		var ws = pck.Workbook.Worksheets.Add (tabla.TableName);  		AddTable (1' 1' ws' tabla);  		var row = tabla.Rows.Count + 3;  		ws.Cells [row' 1].Value = "Tolerancia";  		ws.Cells [row' 1].Style.Font.Bold = true;  		ws.Cells [row' 2].Value = Tolerancia;  		ws.Cells [row' 2].Style.Font.Bold = true;  		ws.Row (1).Style.Font.Bold = true;  		// tabla porcentaje  		row += 2;  		AddTable (row' 1' ws' tuple.Item2' true);  		ws.Row (row).Style.Font.Bold = true;  	}  	pck.Save ();  }  
Magic Number,Vulcano.App.Reportes,TablaOcurrencias,C:\repos\manologomez_Vulcano\Vulcano.App\Reportes\TablaOcurrencias.cs,Generar,The following statement contains a magic number: foreach (var par in tablas) {  	var tuple = par.Value;  	var tabla = tuple.Item1;  	// tabla primaria  	var ws = pck.Workbook.Worksheets.Add (tabla.TableName);  	AddTable (1' 1' ws' tabla);  	var row = tabla.Rows.Count + 3;  	ws.Cells [row' 1].Value = "Tolerancia";  	ws.Cells [row' 1].Style.Font.Bold = true;  	ws.Cells [row' 2].Value = Tolerancia;  	ws.Cells [row' 2].Style.Font.Bold = true;  	ws.Row (1).Style.Font.Bold = true;  	// tabla porcentaje  	row += 2;  	AddTable (row' 1' ws' tuple.Item2' true);  	ws.Row (row).Style.Font.Bold = true;  }  
Magic Number,Vulcano.App.Reportes,TablaOcurrencias,C:\repos\manologomez_Vulcano\Vulcano.App\Reportes\TablaOcurrencias.cs,Generar,The following statement contains a magic number: foreach (var par in tablas) {  	var tuple = par.Value;  	var tabla = tuple.Item1;  	// tabla primaria  	var ws = pck.Workbook.Worksheets.Add (tabla.TableName);  	AddTable (1' 1' ws' tabla);  	var row = tabla.Rows.Count + 3;  	ws.Cells [row' 1].Value = "Tolerancia";  	ws.Cells [row' 1].Style.Font.Bold = true;  	ws.Cells [row' 2].Value = Tolerancia;  	ws.Cells [row' 2].Style.Font.Bold = true;  	ws.Row (1).Style.Font.Bold = true;  	// tabla porcentaje  	row += 2;  	AddTable (row' 1' ws' tuple.Item2' true);  	ws.Row (row).Style.Font.Bold = true;  }  
Magic Number,Vulcano.App.Reportes,TablaOcurrencias,C:\repos\manologomez_Vulcano\Vulcano.App\Reportes\TablaOcurrencias.cs,Generar,The following statement contains a magic number: foreach (var par in tablas) {  	var tuple = par.Value;  	var tabla = tuple.Item1;  	// tabla primaria  	var ws = pck.Workbook.Worksheets.Add (tabla.TableName);  	AddTable (1' 1' ws' tabla);  	var row = tabla.Rows.Count + 3;  	ws.Cells [row' 1].Value = "Tolerancia";  	ws.Cells [row' 1].Style.Font.Bold = true;  	ws.Cells [row' 2].Value = Tolerancia;  	ws.Cells [row' 2].Style.Font.Bold = true;  	ws.Row (1).Style.Font.Bold = true;  	// tabla porcentaje  	row += 2;  	AddTable (row' 1' ws' tuple.Item2' true);  	ws.Row (row).Style.Font.Bold = true;  }  
Magic Number,Vulcano.App.Reportes,TablaOcurrencias,C:\repos\manologomez_Vulcano\Vulcano.App\Reportes\TablaOcurrencias.cs,Generar,The following statement contains a magic number: foreach (var par in tablas) {  	var tuple = par.Value;  	var tabla = tuple.Item1;  	// tabla primaria  	var ws = pck.Workbook.Worksheets.Add (tabla.TableName);  	AddTable (1' 1' ws' tabla);  	var row = tabla.Rows.Count + 3;  	ws.Cells [row' 1].Value = "Tolerancia";  	ws.Cells [row' 1].Style.Font.Bold = true;  	ws.Cells [row' 2].Value = Tolerancia;  	ws.Cells [row' 2].Style.Font.Bold = true;  	ws.Row (1).Style.Font.Bold = true;  	// tabla porcentaje  	row += 2;  	AddTable (row' 1' ws' tuple.Item2' true);  	ws.Row (row).Style.Font.Bold = true;  }  
Magic Number,Vulcano.App.Reportes,TablaOcurrencias,C:\repos\manologomez_Vulcano\Vulcano.App\Reportes\TablaOcurrencias.cs,Generar,The following statement contains a magic number: ws.Cells [row' 2].Value = Tolerancia;  
Magic Number,Vulcano.App.Reportes,TablaOcurrencias,C:\repos\manologomez_Vulcano\Vulcano.App\Reportes\TablaOcurrencias.cs,Generar,The following statement contains a magic number: ws.Cells [row' 2].Style.Font.Bold = true;  
Magic Number,Vulcano.App.Reportes,TablaOcurrencias,C:\repos\manologomez_Vulcano\Vulcano.App\Reportes\TablaOcurrencias.cs,Generar,The following statement contains a magic number: row += 2;  
Magic Number,Vulcano.App.Redes,ProcesadorRedes,C:\repos\manologomez_Vulcano\Vulcano.App\Redes\ProcesadorRedes.cs,Procesar,The following statement contains a magic number: Grabador.Guardar (Resultados' (i' msg) =>  {  	if (i % 500 == 0) {  		AppNotifier.Print ("Guardados " + i);  	}  	if (msg == "total")  		AppNotifier.Print ("Fin guardar");  });  
Magic Number,Vulcano.App.Redes,ProcesadorRedes,C:\repos\manologomez_Vulcano\Vulcano.App\Redes\ProcesadorRedes.cs,Procesar,The following statement contains a magic number: if (i % 500 == 0) {  	AppNotifier.Print ("Guardados " + i);  }  
Magic Number,Vulcano.App.Redes,FuenteRedes,C:\repos\manologomez_Vulcano\Vulcano.App\Redes\FuenteRedes.cs,LlenarTabla,The following statement contains a magic number: for (int i = row; i <= total; i++) {  	var codigo = sheet.GetString ("B"' i);  	if (string.IsNullOrEmpty (codigo))  		break;  	// IMPORTANTE  	var f = new ValoresFuente {  		Tipo = ficha.Nombre'  		IdItem = total++'  		Codigo1 = codigo  	};  	var nombre = sheet.GetString ("C"' i);  	f.Codigo2 = string.IsNullOrEmpty (nombre) ? codigo : nombre;  	var off = 3;  	foreach (var v in listaVars) {  		off++;  		f [v.Codigo] = sheet.GetString (off' i);  	}  	lista.Add (f);  }  
Magic Number,Vulcano.App.Redes,FuenteRedes,C:\repos\manologomez_Vulcano\Vulcano.App\Redes\FuenteRedes.cs,BuscarTablas,The following statement contains a magic number: for (int i = 2; i <= total; i++) {  	var txt = sheet.GetString ("A"' i) ?? "";  	if (txt != "Canton")  		continue;  	var nombre = sheet.Name;  	if (buscarNombre) {  		nombre = sheet.GetString ("A"' i - 1);  		if (string.IsNullOrEmpty (nombre))  			continue;  	}  	var t = Tuple.Create (i + 1' nombre);  	lista.Add (t);  }  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,Database,The following statement contains a magic number: _sharedConnectionDepth = 2;  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (item == null) {  	p.Value = DBNull.Value;  }  else {  	var t = item.GetType ();  	if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int  	 {  		p.Value = (int)item;  	}  	else if (t == typeof(Guid)) {  		p.Value = item.ToString ();  		p.DbType = DbType.String;  		p.Size = 40;  	}  	else if (t == typeof(string)) {  		p.Size = Math.Max ((item as string).Length + 1' 4000);  		// Help query plan caching by using common size  		p.Value = item;  	}  	else if (t == typeof(AnsiString)) {  		// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  		p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  		p.Value = (item as AnsiString).Value;  		p.DbType = DbType.AnsiString;  	}  	else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  		p.Value = ((bool)item) ? 1 : 0;  	}  	else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  		//geography is the equivalent SQL Server Type  		p.Value = item;  	}  	else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  		//geography is the equivalent SQL Server Type  		p.Value = item;  	}  	else {  		p.Value = item;  	}  }  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (item == null) {  	p.Value = DBNull.Value;  }  else {  	var t = item.GetType ();  	if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int  	 {  		p.Value = (int)item;  	}  	else if (t == typeof(Guid)) {  		p.Value = item.ToString ();  		p.DbType = DbType.String;  		p.Size = 40;  	}  	else if (t == typeof(string)) {  		p.Size = Math.Max ((item as string).Length + 1' 4000);  		// Help query plan caching by using common size  		p.Value = item;  	}  	else if (t == typeof(AnsiString)) {  		// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  		p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  		p.Value = (item as AnsiString).Value;  		p.DbType = DbType.AnsiString;  	}  	else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  		p.Value = ((bool)item) ? 1 : 0;  	}  	else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  		//geography is the equivalent SQL Server Type  		p.Value = item;  	}  	else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  		//geography is the equivalent SQL Server Type  		p.Value = item;  	}  	else {  		p.Value = item;  	}  }  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (item == null) {  	p.Value = DBNull.Value;  }  else {  	var t = item.GetType ();  	if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int  	 {  		p.Value = (int)item;  	}  	else if (t == typeof(Guid)) {  		p.Value = item.ToString ();  		p.DbType = DbType.String;  		p.Size = 40;  	}  	else if (t == typeof(string)) {  		p.Size = Math.Max ((item as string).Length + 1' 4000);  		// Help query plan caching by using common size  		p.Value = item;  	}  	else if (t == typeof(AnsiString)) {  		// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  		p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  		p.Value = (item as AnsiString).Value;  		p.DbType = DbType.AnsiString;  	}  	else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  		p.Value = ((bool)item) ? 1 : 0;  	}  	else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  		//geography is the equivalent SQL Server Type  		p.Value = item;  	}  	else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type  	 {  		p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  		//geography is the equivalent SQL Server Type  		p.Value = item;  	}  	else {  		p.Value = item;  	}  }  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int   {  	p.Value = (int)item;  }  else if (t == typeof(Guid)) {  	p.Value = item.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int   {  	p.Value = (int)item;  }  else if (t == typeof(Guid)) {  	p.Value = item.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t.IsEnum)// PostgreSQL .NET driver wont cast enum to int   {  	p.Value = (int)item;  }  else if (t == typeof(Guid)) {  	p.Value = item.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(Guid)) {  	p.Value = item.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(Guid)) {  	p.Value = item.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(Guid)) {  	p.Value = item.ToString ();  	p.DbType = DbType.String;  	p.Size = 40;  }  else if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: p.Size = 40;  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(string)) {  	p.Size = Math.Max ((item as string).Length + 1' 4000);  	// Help query plan caching by using common size  	p.Value = item;  }  else if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: p.Size = Math.Max ((item as string).Length + 1' 4000);  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: if (t == typeof(AnsiString)) {  	// Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar  	p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  	p.Value = (item as AnsiString).Value;  	p.DbType = DbType.AnsiString;  }  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL) {  	p.Value = ((bool)item) ? 1 : 0;  }  else if (item.GetType ().Name == "SqlGeography")//SqlGeography is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geography"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else if (item.GetType ().Name == "SqlGeometry")//SqlGeometry is a CLR Type   {  	p.GetType ().GetProperty ("UdtTypeName").SetValue (p' "geometry"' null);  	//geography is the equivalent SQL Server Type  	p.Value = item;  }  else {  	p.Value = item;  }  
Magic Number,PetaPoco,Database,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,AddParam,The following statement contains a magic number: p.Size = Math.Max ((item as AnsiString).Value.Length + 1' 4000);  
Magic Number,PetaPoco,Sql,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,Build,The following statement contains a magic number: if (!String.IsNullOrEmpty (_sql)) {  	// Add SQL to the string  	if (sb.Length > 0) {  		sb.Append ("\n");  	}  	var sql = Database.ProcessParams (_sql' _args' args);  	if (Is (lhs' "WHERE ") && Is (this' "WHERE "))  		sql = "AND " + sql.Substring (6);  	if (Is (lhs' "ORDER BY ") && Is (this' "ORDER BY "))  		sql = "' " + sql.Substring (9);  	sb.Append (sql);  }  
Magic Number,PetaPoco,Sql,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,Build,The following statement contains a magic number: if (!String.IsNullOrEmpty (_sql)) {  	// Add SQL to the string  	if (sb.Length > 0) {  		sb.Append ("\n");  	}  	var sql = Database.ProcessParams (_sql' _args' args);  	if (Is (lhs' "WHERE ") && Is (this' "WHERE "))  		sql = "AND " + sql.Substring (6);  	if (Is (lhs' "ORDER BY ") && Is (this' "ORDER BY "))  		sql = "' " + sql.Substring (9);  	sb.Append (sql);  }  
Magic Number,PetaPoco,Sql,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,Build,The following statement contains a magic number: if (Is (lhs' "WHERE ") && Is (this' "WHERE "))  	sql = "AND " + sql.Substring (6);  
Magic Number,PetaPoco,Sql,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,Build,The following statement contains a magic number: sql = "AND " + sql.Substring (6);  
Magic Number,PetaPoco,Sql,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,Build,The following statement contains a magic number: if (Is (lhs' "ORDER BY ") && Is (this' "ORDER BY "))  	sql = "' " + sql.Substring (9);  
Magic Number,PetaPoco,Sql,C:\repos\manologomez_Vulcano\Vulcano.App\Models\PetaPoco.cs,Build,The following statement contains a magic number: sql = "' " + sql.Substring (9);  
Missing Default,Vulcano.App.Reportes,ExportadorExcel,C:\repos\manologomez_Vulcano\Vulcano.App\Reportes\ExportadorExcel.cs,ValorInd,The following switch statement is missing a default case: switch (num) {  case 1:  	return res.Indicador1;  case 2:  	return res.Indicador2;  case 3:  	return res.Indicador3;  case 4:  	return res.Indicador4;  case 5:  	return res.Indicador5;  case 6:  	return res.Indicador6;  }  
