Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Kernys.Bson,SimpleBSON,C:\repos\kernys_Kernys.Bson\Kernys.Bson\SimpleBSON.cs,decodeElement,The following statement contains a magic number: if(elementType == 0x01) { // Double  				name = decodeCString ();  				return new BSONValue (mBinaryReader.ReadDouble());    			} else if(elementType == 0x02) { // String  				name = decodeCString ();  				return new BSONValue (decodeString());    			} else if(elementType == 0x03) { // Document  				name = decodeCString ();  				return decodeDocument ();    			} else if(elementType == 0x04) { // Array  				name = decodeCString ();  				return decodeArray ();    			} else if(elementType == 0x05) { // Binary  				name = decodeCString ();  				int length = mBinaryReader.ReadInt32 ();  				byte binaryType = mBinaryReader.ReadByte ();    				return new BSONValue(mBinaryReader.ReadBytes (length));    			} else if(elementType == 0x08) { // Boolean  				name = decodeCString ();  				return new BSONValue (mBinaryReader.ReadBoolean());    			} else if(elementType == 0x09) { // DateTime  				name = decodeCString ();  				Int64 time = mBinaryReader.ReadInt64 ();  				return new BSONValue (new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc) + new TimeSpan(time*10000));  			} else if(elementType == 0x0A) { // None  				name = decodeCString ();  				return new BSONValue ();  			} else if(elementType == 0x10) { // Int32  				name = decodeCString ();  				return new BSONValue (mBinaryReader.ReadInt32());  			} else if(elementType == 0x12) { // Int64  				name = decodeCString ();  				return new BSONValue (mBinaryReader.ReadInt64());  			}
Magic Number,Kernys.Bson,SimpleBSON,C:\repos\kernys_Kernys.Bson\Kernys.Bson\SimpleBSON.cs,decodeElement,The following statement contains a magic number: if(elementType == 0x01) { // Double  				name = decodeCString ();  				return new BSONValue (mBinaryReader.ReadDouble());    			} else if(elementType == 0x02) { // String  				name = decodeCString ();  				return new BSONValue (decodeString());    			} else if(elementType == 0x03) { // Document  				name = decodeCString ();  				return decodeDocument ();    			} else if(elementType == 0x04) { // Array  				name = decodeCString ();  				return decodeArray ();    			} else if(elementType == 0x05) { // Binary  				name = decodeCString ();  				int length = mBinaryReader.ReadInt32 ();  				byte binaryType = mBinaryReader.ReadByte ();    				return new BSONValue(mBinaryReader.ReadBytes (length));    			} else if(elementType == 0x08) { // Boolean  				name = decodeCString ();  				return new BSONValue (mBinaryReader.ReadBoolean());    			} else if(elementType == 0x09) { // DateTime  				name = decodeCString ();  				Int64 time = mBinaryReader.ReadInt64 ();  				return new BSONValue (new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc) + new TimeSpan(time*10000));  			} else if(elementType == 0x0A) { // None  				name = decodeCString ();  				return new BSONValue ();  			} else if(elementType == 0x10) { // Int32  				name = decodeCString ();  				return new BSONValue (mBinaryReader.ReadInt32());  			} else if(elementType == 0x12) { // Int64  				name = decodeCString ();  				return new BSONValue (mBinaryReader.ReadInt64());  			}
Magic Number,Kernys.Bson,SimpleBSON,C:\repos\kernys_Kernys.Bson\Kernys.Bson\SimpleBSON.cs,decodeDocument,The following statement contains a magic number: int length = mBinaryReader.ReadInt32 ()-4;
Magic Number,Kernys.Bson,SimpleBSON,C:\repos\kernys_Kernys.Bson\Kernys.Bson\SimpleBSON.cs,encodeDocument,The following statement contains a magic number: bw.Write ((Int32)(dms.Position+4+1));
Magic Number,Kernys.Bson,SimpleBSON,C:\repos\kernys_Kernys.Bson\Kernys.Bson\SimpleBSON.cs,encodeUTCDateTime,The following statement contains a magic number: if(dt.Kind == DateTimeKind.Local) {  				span = (dt - new DateTime (1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).ToLocalTime());				  			}  			else {  				span = dt - new DateTime (1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc);				  			}
Magic Number,Kernys.Bson,SimpleBSON,C:\repos\kernys_Kernys.Bson\Kernys.Bson\SimpleBSON.cs,encodeUTCDateTime,The following statement contains a magic number: if(dt.Kind == DateTimeKind.Local) {  				span = (dt - new DateTime (1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).ToLocalTime());				  			}  			else {  				span = dt - new DateTime (1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc);				  			}
Magic Number,Kernys.Bson,SimpleBSON,C:\repos\kernys_Kernys.Bson\Kernys.Bson\SimpleBSON.cs,encodeUTCDateTime,The following statement contains a magic number: byte []buf = BitConverter.GetBytes ((Int64)(span.TotalSeconds * 1000));
Missing Default,Kernys.Bson,SimpleBSON,C:\repos\kernys_Kernys.Bson\Kernys.Bson\SimpleBSON.cs,encodeElement,The following switch statement is missing a default case: switch (v.valueType) {  			case BSONValue.ValueType.Double:  				ms.WriteByte (0x01);  				encodeCString (ms' name);  				encodeDouble (ms' v.doubleValue);  				return;  				case BSONValue.ValueType.String:  				ms.WriteByte (0x02);  				encodeCString (ms' name);  				encodeString (ms' v.stringValue);  				return;  				case BSONValue.ValueType.Object:  				ms.WriteByte (0x03);  				encodeCString (ms' name);  				encodeDocument(ms' v as BSONObject);  				return;  				case BSONValue.ValueType.Array:  				ms.WriteByte (0x04);  				encodeCString (ms' name);  				encodeArray (ms' v as BSONArray);  				return;  				case BSONValue.ValueType.Binary:  				ms.WriteByte (0x05);  				encodeCString (ms' name);  				encodeBinary (ms' v.binaryValue);  				return;  				case BSONValue.ValueType.Boolean:  					ms.WriteByte (0x08);  					encodeCString (ms' name);  					encodeBool (ms' v.boolValue);  				return;  				case BSONValue.ValueType.UTCDateTime:  				ms.WriteByte (0x09);  				encodeCString (ms' name);  				encodeUTCDateTime (ms' v.dateTimeValue);  				return;  				case BSONValue.ValueType.None:  				ms.WriteByte (0x0A);  				encodeCString (ms' name);  				return;  				case BSONValue.ValueType.Int32:  				ms.WriteByte (0x10);  				encodeCString (ms' name);  				encodeInt32 (ms' v.int32Value);  				return;  				case BSONValue.ValueType.Int64:  				ms.WriteByte (0x12);  				encodeCString (ms' name);  				encodeInt64 (ms' v.int64Value);  				return;  			}
