Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ItemRepeater,RepeatEngine,C:\repos\countersoft_App-ItemRepeater\ItemRepeater.cs,Run,Cyclomatic complexity of the method is 13
Complex Method,ItemRepeater,Repeater,C:\repos\countersoft_App-ItemRepeater\Repeater.cs,GetRepeatingModel,Cyclomatic complexity of the method is 14
Complex Method,ItemRepeater,Repeater,C:\repos\countersoft_App-ItemRepeater\Repeater.cs,Create,Cyclomatic complexity of the method is 19
Long Parameter List,ItemRepeater,Repeater,C:\repos\countersoft_App-ItemRepeater\Repeater.cs,Create,The method has 6 parameters.
Long Statement,ItemRepeater,RepeatEngine,C:\repos\countersoft_App-ItemRepeater\ItemRepeater.cs,Run,The length of the statement  "			IssueDto lastRepeated = issueManager.GetLastCreatedIssueForOriginator (IssueOriginatorType.Repeat' issue.Id.ToString ()); " is 121.
Long Statement,ItemRepeater,RepeatEngine,C:\repos\countersoft_App-ItemRepeater\ItemRepeater.cs,Run,The length of the statement  "				if (issue.Entity.StartDate.HasValue && issue.Entity.DueDate.HasValue && issue.Entity.StartDate != new DateTime () && issue.Entity.DueDate != new DateTime ()) { " is 159.
Long Statement,ItemRepeater,RepeatEngine,C:\repos\countersoft_App-ItemRepeater\ItemRepeater.cs,GetInterval,The length of the statement  "	if (data == null || data.Value == null || (data.Value.Cron.IsEmpty () && data.Value.IntervalInHours.GetValueOrDefault () == 0 && data.Value.IntervalInMinutes.GetValueOrDefault () == 0)) { " is 187.
Long Statement,ItemRepeater,Repeater,C:\repos\countersoft_App-ItemRepeater\Repeater.cs,GetRepeatingModel,The length of the statement  "		filter = HttpSessionManager.GetFilter (CurrentCard.Id' IssuesFilter.CreateProjectFilter (CurrentUser.Entity.Id' CurrentProject.Entity.Id)); " is 139.
Long Statement,ItemRepeater,Repeater,C:\repos\countersoft_App-ItemRepeater\Repeater.cs,GetRepeatingModel,The length of the statement  "	model.Filter = IssueFilterHelper.PopulateModel (model.Filter' filter' transformedFilter' PermissionsManager' ItemFilterManager' IssueFilterHelper.GetViewableFields (filter' ProjectManager' MetaManager)' false); " is 210.
Long Statement,ItemRepeater,Repeater,C:\repos\countersoft_App-ItemRepeater\Repeater.cs,GetRepeatingModel,The length of the statement  "	var allIssuesRelatedRepeating = allIssues.Count > 0 ? allIssues.FindAll (s => s.Repeated.HasValue () || s.Entity.OriginatorData.HasValue () && s.Entity.OriginatorType == IssueOriginatorType.Repeat) : new List<IssueDto> (); " is 222.
Long Statement,ItemRepeater,Repeater,C:\repos\countersoft_App-ItemRepeater\Repeater.cs,GetRepeatingModel,The length of the statement  "	var masterIssues = allIssuesRelatedRepeating.Count > 0 ? allIssuesRelatedRepeating.FindAll (i => i.Repeated.HasValue ()) : new List<IssueDto> (); " is 145.
Long Statement,ItemRepeater,Repeater,C:\repos\countersoft_App-ItemRepeater\Repeater.cs,GetRepeatingModel,The length of the statement  "			item.RepeatedItems = allIssuesRelatedRepeating.FindAll (s => s.OriginatorData.HasValue () && s.OriginatorData.Equals (masterIssue.Entity.Id.ToString ())); " is 154.
Long Statement,ItemRepeater,Repeater,C:\repos\countersoft_App-ItemRepeater\Repeater.cs,GetRepeatingModel,The length of the statement  "				IssueDto lastRepeated = IssueManager.GetLastCreatedIssueForOriginator (IssueOriginatorType.Repeat' masterIssue.Id.ToString ()); " is 127.
Long Statement,ItemRepeater,Repeater,C:\repos\countersoft_App-ItemRepeater\Repeater.cs,Create,The length of the statement  "		var previousItemsToDelete = repeatedIssues.FindAll (c => c.Created.Date () >= startDateTime.Value && c.Created.Date () <= endDateTime.Value && !closedStatuses.Contains (c.Entity.StatusId)); " is 189.
Long Statement,ItemRepeater,Repeater,C:\repos\countersoft_App-ItemRepeater\Repeater.cs,Create,The length of the statement  "		IssueDto lastRepeated = IssueManager.GetLastCreatedIssueForOriginator (IssueOriginatorType.Repeat' issue.Id.ToString ()); " is 121.
Long Statement,ItemRepeater,Repeater,C:\repos\countersoft_App-ItemRepeater\Repeater.cs,Create,The length of the statement  "			List<IssueDto> tmpRepeatedIssues = IssueManager.GetItemsForOriginator (IssueOriginatorType.Repeat' issue.Id.ToString ()); " is 121.
Long Statement,ItemRepeater,Repeater,C:\repos\countersoft_App-ItemRepeater\Repeater.cs,Create,The length of the statement  "			if (issue.Entity.StartDate.HasValue && issue.Entity.DueDate.HasValue && issue.Entity.StartDate != new DateTime () && issue.Entity.DueDate != new DateTime ()) { " is 159.
Complex Conditional,ItemRepeater,RepeatEngine,C:\repos\countersoft_App-ItemRepeater\ItemRepeater.cs,Run,The conditional expression  "issue.Entity.StartDate.HasValue && issue.Entity.DueDate.HasValue && issue.Entity.StartDate != new DateTime () && issue.Entity.DueDate != new DateTime ()"  is complex.
Complex Conditional,ItemRepeater,RepeatEngine,C:\repos\countersoft_App-ItemRepeater\ItemRepeater.cs,GetInterval,The conditional expression  "data == null || data.Value == null || (data.Value.Cron.IsEmpty () && data.Value.IntervalInHours.GetValueOrDefault () == 0 && data.Value.IntervalInMinutes.GetValueOrDefault () == 0)"  is complex.
Complex Conditional,ItemRepeater,Repeater,C:\repos\countersoft_App-ItemRepeater\Repeater.cs,Create,The conditional expression  "issue.Entity.StartDate.HasValue && issue.Entity.DueDate.HasValue && issue.Entity.StartDate != new DateTime () && issue.Entity.DueDate != new DateTime ()"  is complex.
Magic Number,ItemRepeater,RepeatEngine,C:\repos\countersoft_App-ItemRepeater\ItemRepeater.cs,GetInterval,The following statement contains a magic number: if (data == null || data.Value == null || (data.Value.Cron.IsEmpty () && data.Value.IntervalInHours.GetValueOrDefault () == 0 && data.Value.IntervalInMinutes.GetValueOrDefault () == 0)) {  	return new TimerJobSchedule (60);  }  
Magic Number,ItemRepeater,RepeatEngine,C:\repos\countersoft_App-ItemRepeater\ItemRepeater.cs,GetInterval,The following statement contains a magic number: return new TimerJobSchedule (60);  
Magic Number,ItemRepeater,Repeater,C:\repos\countersoft_App-ItemRepeater\Repeater.cs,Create,The following statement contains a magic number: if (((endDateTime.Value - DateTime.Today).TotalDays / 365) > 3) {  	endDateTime = DateTime.Today.AddYears (3);  	if (startDateTime > endDateTime)  		startDateTime = endDateTime;  }  
Magic Number,ItemRepeater,Repeater,C:\repos\countersoft_App-ItemRepeater\Repeater.cs,Create,The following statement contains a magic number: if (((endDateTime.Value - DateTime.Today).TotalDays / 365) > 3) {  	endDateTime = DateTime.Today.AddYears (3);  	if (startDateTime > endDateTime)  		startDateTime = endDateTime;  }  
Magic Number,ItemRepeater,Repeater,C:\repos\countersoft_App-ItemRepeater\Repeater.cs,Create,The following statement contains a magic number: if (((endDateTime.Value - DateTime.Today).TotalDays / 365) > 3) {  	endDateTime = DateTime.Today.AddYears (3);  	if (startDateTime > endDateTime)  		startDateTime = endDateTime;  }  
Magic Number,ItemRepeater,Repeater,C:\repos\countersoft_App-ItemRepeater\Repeater.cs,Create,The following statement contains a magic number: endDateTime = DateTime.Today.AddYears (3);  
Magic Number,ItemRepeater,Repeater,C:\repos\countersoft_App-ItemRepeater\Repeater.cs,Create,The following statement contains a magic number: for (DateTime date = startDateTime.Value; date <= endDateTime.Value; date = date.AddDays (1)) {  	repeat.CurrentDateTime = date.Date ();  	IssueDto lastRepeated = IssueManager.GetLastCreatedIssueForOriginator (IssueOriginatorType.Repeat' issue.Id.ToString ());  	DateTime lastRepeatedDate = issue.Created;  	if (lastRepeated != null && lastRepeated.Entity.IsExisting)  		lastRepeatedDate = lastRepeated.Created;  	if (repeat.MaximumRepeats > 0) {  		repeatedIssues = IssueManager.GetItemsForOriginator (IssueOriginatorType.Repeat' issue.Id.ToString ());  		if (repeatedIssues != null && repeatedIssues.Count >= repeat.MaximumRepeats)  			continue;  	}  	//If last item was created into the future do this  	if (lastRepeatedDate > date.Date ()) {  		List<IssueDto> tmpRepeatedIssues = IssueManager.GetItemsForOriginator (IssueOriginatorType.Repeat' issue.Id.ToString ());  		List<IssueDto> ItemsBeforeStartDate = tmpRepeatedIssues.FindAll (i => i.Created < date.Date ());  		if (ItemsBeforeStartDate.Count == 0) {  			lastRepeatedDate = issue.Created;  		}  		else {  			lastRepeatedDate = ItemsBeforeStartDate.OrderBy ("Created").Last ().Created;  		}  	}  	if (repeat.NeedsToRepeat (lastRepeatedDate)) {  		var customFields = issue.CustomFields;  		issue.Attachments = new List<IssueAttachmentDto> ();  		issue.Entity.Repeated = string.Empty;  		issue.Entity.OriginatorData = issue.Entity.Id.ToString ();  		issue.Entity.OriginatorType = IssueOriginatorType.Repeat;  		issue.Entity.ParentIssueId = null;  		issue.Entity.IsParent = false;  		issue.Entity.StatusId = 0;  		issue.Entity.ResolutionId = 0;  		if (issue.Entity.StartDate.HasValue && issue.Entity.DueDate.HasValue && issue.Entity.StartDate != new DateTime () && issue.Entity.DueDate != new DateTime ()) {  			TimeSpan tsDates = issue.Entity.DueDate.Value - issue.Entity.StartDate.Value;  			issue.Entity.DueDate = date.AddDays (tsDates.TotalDays);  			issue.Entity.StartDate = date.Date ();  		}  		else {  			issue.Entity.StartDate = null;  			issue.Entity.DueDate = null;  		}  		int issueId = issue.Id;  		issue.Entity.Created = date;  		IssueDto repeated = IssueManager.Create (issue.Entity);  		if (repeated.Entity.Id > 0) {  			string statment = "update gemini_issues set created = @created where issueid = @issueid";  			SQLService.Instance.ExecuteQuery (statment' new {  				created = new DateTime (date.Year' date.Month' date.Day' 8' 0' 0).ToUtc (UserContext.User.TimeZone)'  				issueid = repeated.Entity.Id  			});  		}  		if (customFields != null && customFields.Count > 0) {  			foreach (var field in customFields) {  				try {  					field.Entity.Id = 0;  					field.Entity.IssueId = repeated.Entity.Id;  					field.Entity.ProjectId = repeated.Entity.ProjectId;  					CustomFieldManager.Update (new CustomFieldData (field.Entity));  				}  				catch (Exception ex) {  					LogException (ex);  				}  			}  		}  		if (repeatedLinkType != null) {  			IssueManager.IssueLinkCreate (repeated.Entity.Id' issueId' repeatedLinkType.Id);  		}  	}  }  
Magic Number,ItemRepeater,Repeater,C:\repos\countersoft_App-ItemRepeater\Repeater.cs,Create,The following statement contains a magic number: if (repeat.NeedsToRepeat (lastRepeatedDate)) {  	var customFields = issue.CustomFields;  	issue.Attachments = new List<IssueAttachmentDto> ();  	issue.Entity.Repeated = string.Empty;  	issue.Entity.OriginatorData = issue.Entity.Id.ToString ();  	issue.Entity.OriginatorType = IssueOriginatorType.Repeat;  	issue.Entity.ParentIssueId = null;  	issue.Entity.IsParent = false;  	issue.Entity.StatusId = 0;  	issue.Entity.ResolutionId = 0;  	if (issue.Entity.StartDate.HasValue && issue.Entity.DueDate.HasValue && issue.Entity.StartDate != new DateTime () && issue.Entity.DueDate != new DateTime ()) {  		TimeSpan tsDates = issue.Entity.DueDate.Value - issue.Entity.StartDate.Value;  		issue.Entity.DueDate = date.AddDays (tsDates.TotalDays);  		issue.Entity.StartDate = date.Date ();  	}  	else {  		issue.Entity.StartDate = null;  		issue.Entity.DueDate = null;  	}  	int issueId = issue.Id;  	issue.Entity.Created = date;  	IssueDto repeated = IssueManager.Create (issue.Entity);  	if (repeated.Entity.Id > 0) {  		string statment = "update gemini_issues set created = @created where issueid = @issueid";  		SQLService.Instance.ExecuteQuery (statment' new {  			created = new DateTime (date.Year' date.Month' date.Day' 8' 0' 0).ToUtc (UserContext.User.TimeZone)'  			issueid = repeated.Entity.Id  		});  	}  	if (customFields != null && customFields.Count > 0) {  		foreach (var field in customFields) {  			try {  				field.Entity.Id = 0;  				field.Entity.IssueId = repeated.Entity.Id;  				field.Entity.ProjectId = repeated.Entity.ProjectId;  				CustomFieldManager.Update (new CustomFieldData (field.Entity));  			}  			catch (Exception ex) {  				LogException (ex);  			}  		}  	}  	if (repeatedLinkType != null) {  		IssueManager.IssueLinkCreate (repeated.Entity.Id' issueId' repeatedLinkType.Id);  	}  }  
Magic Number,ItemRepeater,Repeater,C:\repos\countersoft_App-ItemRepeater\Repeater.cs,Create,The following statement contains a magic number: if (repeated.Entity.Id > 0) {  	string statment = "update gemini_issues set created = @created where issueid = @issueid";  	SQLService.Instance.ExecuteQuery (statment' new {  		created = new DateTime (date.Year' date.Month' date.Day' 8' 0' 0).ToUtc (UserContext.User.TimeZone)'  		issueid = repeated.Entity.Id  	});  }  
Magic Number,ItemRepeater,Repeater,C:\repos\countersoft_App-ItemRepeater\Repeater.cs,Create,The following statement contains a magic number: SQLService.Instance.ExecuteQuery (statment' new {  	created = new DateTime (date.Year' date.Month' date.Day' 8' 0' 0).ToUtc (UserContext.User.TimeZone)'  	issueid = repeated.Entity.Id  });  
