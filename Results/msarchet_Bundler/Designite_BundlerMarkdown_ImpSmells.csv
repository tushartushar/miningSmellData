Implementation smell,Namespace,Class,File,Method,Description
Long Method,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,GetBlockPattern,The method has 127 lines of code.
Complex Method,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,handleTrailingParens,Cyclomatic complexity of the method is 9
Long Parameter List,BundlerMarkdown,BundlerMarkdown,C:\repos\msarchet_Bundler\BundlerMarkdown\BundlerMarkdown.cs,BundlerMarkdown,The method has 5 parameters. Parameters: next' fileResolver' bundleResolver' templatePath' routes
Long Parameter List,BundlerMiddleware,BundlerMarkdown,C:\repos\msarchet_Bundler\BundlerMarkdown\BundlerMarkdown.cs,BundlerMarkdown,The method has 5 parameters. Parameters: next' fileResolver' bundleResolver' templatePath' routes
Long Statement,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,AnchorRefShortcutEvaluator,The length of the statement  "            string linkID = Regex.Replace(linkText.ToLowerInvariant()' @"[ ]*\n[ ]*"' " ");  // lower case and remove newlines / extra spaces " is 129.
Long Statement,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,ProcessListItems,The length of the statement  "                    if (!isInsideParagraphlessListItem) // only the outer-most item should run this' otherwise it's run multiple times for the inner ones " is 133.
Long Statement,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,BlockQuoteEvaluator,The length of the statement  "            bq = Regex.Replace(bq' @"(\s*<pre>.+?</pre>)"' new MatchEvaluator(BlockQuoteEvaluator2)' RegexOptions.IgnorePatternWhitespace | RegexOptions.Singleline); " is 153.
Long Statement,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,handleTrailingParens,The length of the statement  "            // We're not using a *real* lookbehind' because of links with in links' like <a href="http://web.archive.org/web/20121130000728/http://www.google.com/"> " is 152.
Long Statement,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,DoAutoLinks,The length of the statement  "                text = Regex.Replace(text' pattern' new MatchEvaluator(EmailEvaluator)' RegexOptions.IgnoreCase | RegexOptions.IgnorePatternWhitespace); " is 136.
Long Statement,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,EscapeSpecialCharsWithinTagAttributes,The length of the statement  "                    if (_autoHyperlink && value.StartsWith("<!")) // escape slashes in comments to prevent autolinking there -- http://meta.stackoverflow.com/questions/95987/html-comment-containing-url-breaks-if-followed-by-another-html-comment " is 224.
Magic Number,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,FormParagraphs,The following statement contains a magic number: for (int i = 0; i < grafs.Length; i++)              {                  if (grafs[i].StartsWith("\x1AH"))                  {                      // unhashify HTML blocks                      if (unhash)                      {                          int sanityCheck = 50; // just for safety' guard against an infinite loop                          bool keepGoing = true; // as long as replacements where made' keep going                          while (keepGoing && sanityCheck > 0)                          {                              keepGoing = false;                              grafs[i] = _htmlBlockHash.Replace(grafs[i]' match =>                              {                                  keepGoing = true;                                  return _htmlBlocks[match.Value];                              });                              sanityCheck--;                          }                          /* if (keepGoing)                          {                              // Logging of an infinite loop goes here.                              // If such a thing should happen' please open a new issue on http://code.google.com/p/markdownsharp/                              // with the input that caused it.                          }*/                      }                  }                  else                  {                      // do span level processing inside the block' then wrap result in <p> tags                      grafs[i] = _leadingWhitespace.Replace(RunSpanGamut(grafs[i])' "<p>") + "</p>";                  }              }
Magic Number,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,LinkEvaluator,The following statement contains a magic number: _urls[linkID] = EncodeAmpsAndAngles(match.Groups[2].Value);
Magic Number,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,LinkEvaluator,The following statement contains a magic number: if (match.Groups[3] != null && match.Groups[3].Length > 0)                  _titles[linkID] = match.Groups[3].Value.Replace("\""' "&quot;");
Magic Number,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,LinkEvaluator,The following statement contains a magic number: if (match.Groups[3] != null && match.Groups[3].Length > 0)                  _titles[linkID] = match.Groups[3].Value.Replace("\""' "&quot;");
Magic Number,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,LinkEvaluator,The following statement contains a magic number: if (match.Groups[3] != null && match.Groups[3].Length > 0)                  _titles[linkID] = match.Groups[3].Value.Replace("\""' "&quot;");
Magic Number,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,AnchorRefEvaluator,The following statement contains a magic number: string linkText = SaveFromAutoLinking(match.Groups[2].Value);
Magic Number,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,AnchorRefEvaluator,The following statement contains a magic number: string linkID = match.Groups[3].Value.ToLowerInvariant();
Magic Number,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,AnchorRefShortcutEvaluator,The following statement contains a magic number: string linkText = SaveFromAutoLinking(match.Groups[2].Value);
Magic Number,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,AnchorInlineEvaluator,The following statement contains a magic number: string linkText = SaveFromAutoLinking(match.Groups[2].Value);
Magic Number,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,AnchorInlineEvaluator,The following statement contains a magic number: string url = match.Groups[3].Value;
Magic Number,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,AnchorInlineEvaluator,The following statement contains a magic number: string title = match.Groups[6].Value;
Magic Number,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,AnchorInlineEvaluator,The following statement contains a magic number: if (url.StartsWith("<") && url.EndsWith(">"))                  url = url.Substring(1' url.Length - 2);
Magic Number,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,ImageReferenceEvaluator,The following statement contains a magic number: string altText = match.Groups[2].Value;
Magic Number,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,ImageReferenceEvaluator,The following statement contains a magic number: string linkID = match.Groups[3].Value.ToLowerInvariant();
Magic Number,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,ImageInlineEvaluator,The following statement contains a magic number: string alt = match.Groups[2].Value;
Magic Number,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,ImageInlineEvaluator,The following statement contains a magic number: string url = match.Groups[3].Value;
Magic Number,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,ImageInlineEvaluator,The following statement contains a magic number: string title = match.Groups[6].Value;
Magic Number,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,ImageInlineEvaluator,The following statement contains a magic number: if (url.StartsWith("<") && url.EndsWith(">"))                  url = url.Substring(1' url.Length - 2);
Magic Number,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,SetextHeaderEvaluator,The following statement contains a magic number: int level = match.Groups[2].Value.StartsWith("=") ? 1 : 2;
Magic Number,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,SetextHeaderEvaluator,The following statement contains a magic number: int level = match.Groups[2].Value.StartsWith("=") ? 1 : 2;
Magic Number,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,AtxHeaderEvaluator,The following statement contains a magic number: string header = match.Groups[2].Value;
Magic Number,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,GetListEvaluator,The following statement contains a magic number: return new MatchEvaluator(match =>              {                  string list = match.Groups[1].Value;                  string listType = Regex.IsMatch(match.Groups[3].Value' _markerUL) ? "ul" : "ol";                  string result;                    result = ProcessListItems(list' listType == "ul" ? _markerUL : _markerOL' isInsideParagraphlessListItem);                    result = string.Format("<{0}>\n{1}</{0}>\n"' listType' result);                  return result;              });
Magic Number,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,ProcessListItems,The following statement contains a magic number: MatchEvaluator ListItemEvaluator = (Match match) =>              {                  string item = match.Groups[3].Value;                    bool endsWithDoubleNewline = item.EndsWith("\n\n");                  bool containsDoubleNewline = endsWithDoubleNewline || item.Contains("\n\n");                    if (containsDoubleNewline || lastItemHadADoubleNewline)                      // we could correct any bad indentation here..                      item = RunBlockGamut(Outdent(item) + "\n"' unhash: false);                  else                  {                      // recursion for sub-lists                      item = DoLists(Outdent(item)' isInsideParagraphlessListItem: true);                      item = item.TrimEnd('\n');                      if (!isInsideParagraphlessListItem) // only the outer-most item should run this' otherwise it's run multiple times for the inner ones                          item = RunSpanGamut(item);                  }                  lastItemHadADoubleNewline = endsWithDoubleNewline;                  return string.Format("<li>{0}</li>\n"' item);              };
Magic Number,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,CodeSpanEvaluator,The following statement contains a magic number: string span = match.Groups[2].Value;
Magic Number,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,handleTrailingParens,The following statement contains a magic number: var protocol = match.Groups[2].Value;
Magic Number,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,handleTrailingParens,The following statement contains a magic number: var link = match.Groups[3].Value;
Magic Number,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,EncodeEmailAddress,The following statement contains a magic number: var sb = new StringBuilder(addr.Length * 5);
Magic Number,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,EncodeEmailAddress,The following statement contains a magic number: foreach (char c in addr)              {                  r = rand.Next(1' 100);                  if ((r > 90 || c == ':') && c != '@')                      sb.Append(c);                         // m                  else if (r < 45)                      sb.AppendFormat("&#x{0:x};"' (int)c); // &#x6D                  else                      sb.AppendFormat("&#{0};"' (int)c);    // &#109              }
Magic Number,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,EncodeEmailAddress,The following statement contains a magic number: foreach (char c in addr)              {                  r = rand.Next(1' 100);                  if ((r > 90 || c == ':') && c != '@')                      sb.Append(c);                         // m                  else if (r < 45)                      sb.AppendFormat("&#x{0:x};"' (int)c); // &#x6D                  else                      sb.AppendFormat("&#{0};"' (int)c);    // &#109              }
Magic Number,MarkdownSharp,Markdown,C:\repos\msarchet_Bundler\BundlerMarkdown\markdownsharp.cs,EncodeEmailAddress,The following statement contains a magic number: foreach (char c in addr)              {                  r = rand.Next(1' 100);                  if ((r > 90 || c == ':') && c != '@')                      sb.Append(c);                         // m                  else if (r < 45)                      sb.AppendFormat("&#x{0:x};"' (int)c); // &#x6D                  else                      sb.AppendFormat("&#{0};"' (int)c);    // &#109              }
