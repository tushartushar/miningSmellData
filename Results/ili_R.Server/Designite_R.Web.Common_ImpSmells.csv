Implementation smell,Namespace,Class,File,Method,Description
Complex Method,R.Web.Common.Providers,RMembershipProvider,C:\repos\ili_R.Server\R.Web\R.Web-Common\Providers\RMembershipProvider.cs,Initialize,Cyclomatic complexity of the method is 12
Complex Method,R.Web.Common.Providers,RMembershipProvider,C:\repos\ili_R.Server\R.Web\R.Web-Common\Providers\RMembershipProvider.cs,Encode,Cyclomatic complexity of the method is 14
Complex Method,R.Web.Common.Providers,RMembershipProvider,C:\repos\ili_R.Server\R.Web\R.Web-Common\Providers\RMembershipProvider.cs,CreateUser,Cyclomatic complexity of the method is 12
Long Parameter List,R.Web.Common.Providers,RMembershipProvider,C:\repos\ili_R.Server\R.Web\R.Web-Common\Providers\RMembershipProvider.cs,CreateUser,The method has 8 parameters.
Long Parameter List,R.Web.Common.Providers,RMembershipProvider,C:\repos\ili_R.Server\R.Web\R.Web-Common\Providers\RMembershipProvider.cs,FindUsersByEmail,The method has 5 parameters.
Long Parameter List,R.Web.Common.Providers,RMembershipProvider,C:\repos\ili_R.Server\R.Web\R.Web-Common\Providers\RMembershipProvider.cs,FindUsersByName,The method has 5 parameters.
Long Parameter List,R.Web.Common.Providers,RProfileProvider,C:\repos\ili_R.Server\R.Web\R.Web-Common\Providers\RProfileProvider.cs,GetAllInactiveProfiles,The method has 5 parameters.
Long Parameter List,R.Web.Common.Providers,RProfileProvider,C:\repos\ili_R.Server\R.Web\R.Web-Common\Providers\RProfileProvider.cs,FindInactiveProfilesByUserName,The method has 6 parameters.
Long Parameter List,R.Web.Common.Providers,RProfileProvider,C:\repos\ili_R.Server\R.Web\R.Web-Common\Providers\RProfileProvider.cs,FindProfilesByUserName,The method has 5 parameters.
Long Statement,R.Web.Common.Providers,RMembershipProvider,C:\repos\ili_R.Server\R.Web\R.Web-Common\Providers\RMembershipProvider.cs,Convert,The length of the statement  "	return new MembershipUser (Name' account.LoginName' account.ID' account.Email' account.PasswordQuestion' account.Values ["About"]' account.IsApproved' account.IsLockedOut' account.CreateDate' account.LastLoginDate' account.LastActivityDate' account.LastUpdateDate' account.EndBanDate ?? DateTime.MinValue); " is 306.
Long Statement,R.Web.Common.Providers,RMembershipProvider,C:\repos\ili_R.Server\R.Web\R.Web-Common\Providers\RMembershipProvider.cs,ValidatePassword,The length of the statement  "	if (!string.IsNullOrEmpty (PasswordStrengthRegularExpression) && !Regex.IsMatch (password' PasswordStrengthRegularExpression)) " is 126.
Long Statement,R.Web.Common.Providers,RMembershipProvider,C:\repos\ili_R.Server\R.Web\R.Web-Common\Providers\RMembershipProvider.cs,ResetPassword,The length of the statement  "	string newPassword = Membership.GeneratePassword (MinRequiredPasswordLength < 10 ? 10 : _minRequiredPasswordLength' MinRequiredNonAlphanumericCharacters); " is 154.
Long Statement,R.Web.Common.Providers,RProfileProvider,C:\repos\ili_R.Server\R.Web\R.Web-Common\Providers\RProfileProvider.cs,DeleteInactiveProfiles,The length of the statement  "	return (authenticationOption & ProfileAuthenticationOption.Authenticated) != 0 ? _accountManager.DeleteInactiveAccount (userInactiveSinceDate) : 0; " is 147.
Long Statement,R.Web.Common.Providers,RProfileProvider,C:\repos\ili_R.Server\R.Web\R.Web-Common\Providers\RProfileProvider.cs,GetNumberOfInactiveProfiles,The length of the statement  "	return (authenticationOption & ProfileAuthenticationOption.Authenticated) != 0 ? _accountManager.GetInactiveAccountCountSince (userInactiveSinceDate) : 0; " is 154.
Long Statement,R.Web.Common.Providers,RProfileProvider,C:\repos\ili_R.Server\R.Web\R.Web-Common\Providers\RProfileProvider.cs,FindInactiveProfilesByUserName,The length of the statement  "	throw new NotImplementedException ("The method 'RProfileProvider.FindInactiveProfilesByUserName(...)' is not implemented."); " is 124.
Empty Catch Block,R.Web.Common.Providers,RProfileProvider,C:\repos\ili_R.Server\R.Web\R.Web-Common\Providers\RProfileProvider.cs,DeleteProfiles,The method has an empty catch block.
Magic Number,R.Web.Common.Providers,RMembershipProvider,C:\repos\ili_R.Server\R.Web\R.Web-Common\Providers\RMembershipProvider.cs,Initialize,The following statement contains a magic number: _activationWindow = GetValue (config ["activationWindow"]' 60 * 24);  
Magic Number,R.Web.Common.Providers,RMembershipProvider,C:\repos\ili_R.Server\R.Web\R.Web-Common\Providers\RMembershipProvider.cs,Initialize,The following statement contains a magic number: _activationWindow = GetValue (config ["activationWindow"]' 60 * 24);  
Magic Number,R.Web.Common.Providers,RMembershipProvider,C:\repos\ili_R.Server\R.Web\R.Web-Common\Providers\RMembershipProvider.cs,Initialize,The following statement contains a magic number: _maxInvalidPasswordAttempts = GetValue (config ["maxInvalidPasswordAttempts"]' 5);  
Magic Number,R.Web.Common.Providers,RMembershipProvider,C:\repos\ili_R.Server\R.Web\R.Web-Common\Providers\RMembershipProvider.cs,GetPassword,The following statement contains a magic number: if (encodedAnswer != acc.PasswordAnswer) {  	Thread.Sleep (2000);  	throw new MembershipPasswordException ("Answer is invalid.");  }  
Magic Number,R.Web.Common.Providers,RMembershipProvider,C:\repos\ili_R.Server\R.Web\R.Web-Common\Providers\RMembershipProvider.cs,GetPassword,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,R.Web.Common.Providers,RMembershipProvider,C:\repos\ili_R.Server\R.Web\R.Web-Common\Providers\RMembershipProvider.cs,ResetPassword,The following statement contains a magic number: if (encodedAnswer != acc.PasswordAnswer) {  	Thread.Sleep (2000);  	throw new MembershipPasswordException ("Answer is invalid.");  }  
Magic Number,R.Web.Common.Providers,RMembershipProvider,C:\repos\ili_R.Server\R.Web\R.Web-Common\Providers\RMembershipProvider.cs,ResetPassword,The following statement contains a magic number: Thread.Sleep (2000);  
Missing Default,R.Web.Common.Providers,RMembershipProvider,C:\repos\ili_R.Server\R.Web\R.Web-Common\Providers\RMembershipProvider.cs,Initialize,The following switch statement is missing a default case: switch (config ["passwordFormat"]) {  case "Clear":  	_passwordFormat = MembershipPasswordFormat.Clear;  	break;  case "Encrypted":  	_passwordFormat = MembershipPasswordFormat.Encrypted;  	break;  case "Hashed":  	_passwordFormat = MembershipPasswordFormat.Hashed;  	break;  }  
Missing Default,R.Web.Common.Providers,RMembershipProvider,C:\repos\ili_R.Server\R.Web\R.Web-Common\Providers\RMembershipProvider.cs,VerifyPassword,The following switch statement is missing a default case: switch (account.PasswordFormat) {  case RPFormat.Clear:  	return account.Password == password;  case RPFormat.Hashed:  	return account.Password == CryptoService.ComputeHash (password' account.PasswordSalt);  case RPFormat.Encrypted:  	return account.Password == CryptoService.Decrypt (password' account.PasswordSalt);  }  
