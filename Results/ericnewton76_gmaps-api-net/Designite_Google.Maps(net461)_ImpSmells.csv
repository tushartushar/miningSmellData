Implementation smell,Namespace,Class,File,Method,Description
Long Method,Google.Maps,JsonEnumTypeConverter,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\JsonEnumTypeConverter.cs,AsAddressType,The method has 100 lines of code.
Long Method,Google.Maps,JsonEnumTypeConverter,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\JsonEnumTypeConverter.cs,AsPlaceType,The method has 364 lines of code.
Complex Method,Google.Maps,GoogleSigned,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\GoogleSigned.cs,FromValueString,Cyclomatic complexity of the method is 8
Complex Method,Google.Maps,JsonEnumTypeConverter,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\JsonEnumTypeConverter.cs,AsAddressType,Cyclomatic complexity of the method is 31
Complex Method,Google.Maps,JsonEnumTypeConverter,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\JsonEnumTypeConverter.cs,AsPlaceType,Cyclomatic complexity of the method is 119
Complex Method,Google.Maps.Places,AutocompleteRequest,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\Places\Autocomplete\AutocompleteRequest.cs,ToUri,Cyclomatic complexity of the method is 8
Complex Method,Google.Maps.Places,NearbySearchRequest,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\Places\NearbySearchRequest.cs,ToUri,Cyclomatic complexity of the method is 11
Complex Method,Google.Maps.Places,RadarSearchRequest,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\Places\RadarSearchRequest.cs,ToUri,Cyclomatic complexity of the method is 8
Complex Method,Google.Maps.Places,TextSearchRequest,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\Places\TextSearchRequest.cs,ToUri,Cyclomatic complexity of the method is 10
Complex Method,Google.Maps.StaticMaps,StaticMapRequest,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\StaticMaps\StaticMapRequest.cs,GetPathsStr,Cyclomatic complexity of the method is 13
Complex Method,Google.Maps.StaticMaps,StaticMapRequest,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\StaticMaps\StaticMapRequest.cs,GetMarkersStr,Cyclomatic complexity of the method is 17
Long Statement,Google.Maps,ComponentFilter,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\ComponentFilter.cs,ToUrlParameters,The length of the statement  "			var parametersList = parameters.Where(p => !(string.IsNullOrEmpty(p.Value) || p.Value.Trim().Length == 0)).Select(p => p.Key + ":" + p.Value); " is 142.
Long Statement,Google.Maps,Constants,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\Constants.cs,CheckFieldOfViewRange,The length of the statement  "			const string FIELD_OF_VIEW_PARAMETER_RANGE = "Field of view value must be greater or equal to 1 and less than or equal to 120."; " is 128.
Long Statement,Google.Maps.Direction,DirectionRequest,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\Direction\DirectionRequest.cs,EnsureWaypoints,The length of the statement  "			if(_waypoints == null) _waypoints = new List<Location>(); //may use a static readonly empty list instead of creating one everytime. " is 131.
Long Statement,Google.Maps.Geocoding,GeocodingRequest,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\Geocoding\GeocodingRequest.cs,ToUri,The length of the statement  "			if (Address == null && String.IsNullOrWhiteSpace(PlaceId)) throw new InvalidOperationException("Address/LatLng or PlaceId is required"); " is 136.
Long Statement,Google.Maps.Internal,RequestUtils,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\Internal\RequestUtils.cs,GetLatLngCollectionStr,The length of the statement  "				System.Text.StringBuilder sb = new StringBuilder(countOfItems * 22); // normally latlng's are -40.454545'-90.454545 so I picked a "larger than average" of 22 digits. " is 165.
Long Statement,Google.Maps.Places,PlacesRequest,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\Places\PlacesRequest.cs,ValidateRequest,The length of the statement  "			if(this.Minprice.HasValue && (this.Minprice < 0 || this.Minprice > 4)) throw new ArgumentException("Minprice property must have a value between 0 and 4 inclusive."); " is 165.
Long Statement,Google.Maps.Places,PlacesRequest,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\Places\PlacesRequest.cs,ValidateRequest,The length of the statement  "			if(this.Maxprice.HasValue && (this.Maxprice < 0 || this.Maxprice > 4)) throw new ArgumentException("Maxprice property must have a value between 0 and 4 inclusive."); " is 165.
Long Statement,Google.Maps.StaticMaps,StaticMapRequest,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\StaticMaps\StaticMapRequest.cs,GetPathEncoded,The length of the statement  "			catch(InvalidCastException ex) { throw new InvalidOperationException("Encountered a point specified as a location.  Encoding only supports all points in LatLng types."' ex); } " is 175.
Long Statement,Google.Maps.StaticMaps,StaticMapRequest,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\StaticMaps\StaticMapRequest.cs,GetMarkersStr,The length of the statement  "				if (string.IsNullOrEmpty(current.Label) == false && !(current.MarkerSize == MarkerSizes.Tiny || current.MarkerSize == MarkerSizes.Small)) " is 137.
Long Statement,Google.Maps.StreetView,StreetViewRequest,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\StreetView\StreetViewRequest.cs,WriteBitmapOutputParameters,The length of the statement  "			qs.Append("size"' string.Format(System.Globalization.CultureInfo.InvariantCulture' "{0}x{1}"' Size.Width' Size.Height)); " is 120.
Complex Conditional,Google.Maps.Places,NearbySearchRequest,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\Places\NearbySearchRequest.cs,ValidateRequest,The conditional expression  "string.IsNullOrEmpty(Keyword) && string.IsNullOrEmpty(Name) && (Types == null || !Types.Any())"  is complex.
Magic Number,Google.Maps,Constants,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\Constants.cs,Constants,The following statement contains a magic number: S_ExpectedScaleValues = new int[] { 1' 2' 4 };
Magic Number,Google.Maps,Constants,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\Constants.cs,Constants,The following statement contains a magic number: S_ExpectedScaleValues = new int[] { 1' 2' 4 };
Magic Number,Google.Maps,Constants,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\Constants.cs,CheckHeadingRange,The following statement contains a magic number: value > 360
Magic Number,Google.Maps,Constants,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\Constants.cs,CheckPitchRange,The following statement contains a magic number: value < -90 || value > 90
Magic Number,Google.Maps,Constants,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\Constants.cs,CheckPitchRange,The following statement contains a magic number: value < -90 || value > 90
Magic Number,Google.Maps,Constants,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\Constants.cs,CheckFieldOfViewRange,The following statement contains a magic number: value < 1 || value > 120
Magic Number,Google.Maps,GoogleSigned,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\GoogleSigned.cs,FromValueString,The following statement contains a magic number: string[] check = new string[2] { ""' "" };
Magic Number,Google.Maps,GoogleSigned,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\GoogleSigned.cs,FromValueString,The following statement contains a magic number: idString = check[0].Substring(7);
Magic Number,Google.Maps,GoogleSigned,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\GoogleSigned.cs,FromValueString,The following statement contains a magic number: usablePrivateKey = check[1].Substring(7);
Magic Number,Google.Maps,LatLng,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\LatLng.cs,ToString,The following statement contains a magic number: System.Text.StringBuilder sb = new System.Text.StringBuilder(50);
Magic Number,Google.Maps,LatLng,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\LatLng.cs,Parse,The following statement contains a magic number: parts.Length != 2
Magic Number,Google.Maps,LatLng,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\LatLng.cs,GetHashCode,The following statement contains a magic number: int hash = 13;
Magic Number,Google.Maps,LatLng,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\LatLng.cs,GetHashCode,The following statement contains a magic number: hash += (hash * 7) + this.Latitude.GetHashCode();
Magic Number,Google.Maps,LatLng,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\LatLng.cs,GetHashCode,The following statement contains a magic number: hash += (hash * 7) + this.Longitude.GetHashCode();
Magic Number,Google.Maps,MapColor,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\MapColor.cs,To24BitColorString,The following statement contains a magic number: return String.Format("0x{0:X6}"' value >> 8);
Magic Number,Google.Maps,MapColor,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\MapColor.cs,FromArgb,The following statement contains a magic number: return FromArgb(255' red' green' blue);
Magic Number,Google.Maps,MapColor,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\MapColor.cs,FromArgb,The following statement contains a magic number: color.value = (uint)(((uint)red << 24) + (green << 16) + (blue << 8) + alpha);
Magic Number,Google.Maps,MapColor,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\MapColor.cs,FromArgb,The following statement contains a magic number: color.value = (uint)(((uint)red << 24) + (green << 16) + (blue << 8) + alpha);
Magic Number,Google.Maps,MapColor,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\MapColor.cs,FromArgb,The following statement contains a magic number: color.value = (uint)(((uint)red << 24) + (green << 16) + (blue << 8) + alpha);
Magic Number,Google.Maps,PolylineEncoder,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\PolylineEncoder.cs,EncodeCoordinates,The following statement contains a magic number: double oneEFive = Convert.ToDouble(1e5);
Magic Number,Google.Maps,PolylineEncoder,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\PolylineEncoder.cs,Decode,The following statement contains a magic number: next5bits = (int)polylinechars[index++] - 63;
Magic Number,Google.Maps,PolylineEncoder,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\PolylineEncoder.cs,Decode,The following statement contains a magic number: sum |= (next5bits & 31) << shifter;
Magic Number,Google.Maps,PolylineEncoder,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\PolylineEncoder.cs,Decode,The following statement contains a magic number: shifter += 5;
Magic Number,Google.Maps,PolylineEncoder,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\PolylineEncoder.cs,Decode,The following statement contains a magic number: next5bits = (int)polylinechars[index++] - 63;
Magic Number,Google.Maps,PolylineEncoder,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\PolylineEncoder.cs,Decode,The following statement contains a magic number: sum |= (next5bits & 31) << shifter;
Magic Number,Google.Maps,PolylineEncoder,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\PolylineEncoder.cs,Decode,The following statement contains a magic number: shifter += 5;
Magic Number,Google.Maps,PolylineEncoder,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\PolylineEncoder.cs,Decode,The following statement contains a magic number: index >= polylinechars.Length && next5bits >= 32
Magic Number,Google.Maps,PolylineEncoder,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\PolylineEncoder.cs,Decode,The following statement contains a magic number: LatLng point = new LatLng(  					latitude: Convert.ToDouble(currentLat) / 100000.0'  					longitude: Convert.ToDouble(currentLng) / 100000.0  				);
Magic Number,Google.Maps,PolylineEncoder,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\PolylineEncoder.cs,Decode,The following statement contains a magic number: LatLng point = new LatLng(  					latitude: Convert.ToDouble(currentLat) / 100000.0'  					longitude: Convert.ToDouble(currentLng) / 100000.0  				);
Magic Number,Google.Maps,PolylineEncoder,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\PolylineEncoder.cs,EncodeNumber,The following statement contains a magic number: encodeString.Append((char)((0x20 | (num & 0x1f)) + 63));
Magic Number,Google.Maps,PolylineEncoder,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\PolylineEncoder.cs,EncodeNumber,The following statement contains a magic number: num >>= 5;
Magic Number,Google.Maps,PolylineEncoder,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\PolylineEncoder.cs,EncodeNumber,The following statement contains a magic number: encodeString.Append((char)(num + 63));
Magic Number,Google.Maps,ViaLatLng,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\ViaLatLng.cs,ToString,The following statement contains a magic number: System.Text.StringBuilder sb = new System.Text.StringBuilder(50);
Magic Number,Google.Maps,ViaLatLng,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\ViaLatLng.cs,Parse,The following statement contains a magic number: parts.Length != 2
Magic Number,Google.Maps,ViaLatLng,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\ViaLatLng.cs,GetHashCode,The following statement contains a magic number: int hash = 13;
Magic Number,Google.Maps,ViaLatLng,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\ViaLatLng.cs,GetHashCode,The following statement contains a magic number: hash += (hash * 7) + this.Latitude.GetHashCode();
Magic Number,Google.Maps,ViaLatLng,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\ViaLatLng.cs,GetHashCode,The following statement contains a magic number: hash += (hash * 7) + this.Longitude.GetHashCode();
Magic Number,Google.Maps.Places,PlacesRequest,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\Places\PlacesRequest.cs,ValidateRequest,The following statement contains a magic number: this.Minprice.HasValue && (this.Minprice < 0 || this.Minprice > 4)
Magic Number,Google.Maps.Places,PlacesRequest,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\Places\PlacesRequest.cs,ValidateRequest,The following statement contains a magic number: this.Maxprice.HasValue && (this.Maxprice < 0 || this.Maxprice > 4)
Magic Number,Google.Maps.Places,PlacesRequest,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\Places\PlacesRequest.cs,ValidateRequest,The following statement contains a magic number: Radius.HasValue && Radius.Value > 50000
Magic Number,Google.Maps.Shared,AddressComponent,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\Shared\AddressComponent.cs,GetHashCode,The following statement contains a magic number: int hash = 13;
Magic Number,Google.Maps.Shared,AddressComponent,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\Shared\AddressComponent.cs,GetHashCode,The following statement contains a magic number: hash += (hash * 7) + (this.ShortName ?? "").GetHashCode();
Magic Number,Google.Maps.Shared,AddressComponent,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\Shared\AddressComponent.cs,GetHashCode,The following statement contains a magic number: hash += (hash * 7) + (this.LongName ?? "").GetHashCode();
Magic Number,Google.Maps.Shared,AddressComponent,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\Shared\AddressComponent.cs,GetHashCode,The following statement contains a magic number: hash += (hash * 7) + type.GetHashCode();
Magic Number,Google.Maps.StaticMaps,StaticMapRequest,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\StaticMaps\StaticMapRequest.cs,StaticMapRequest,The following statement contains a magic number: this.Size = new MapSize(512' 512);
Magic Number,Google.Maps.StaticMaps,StaticMapRequest,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\StaticMaps\StaticMapRequest.cs,StaticMapRequest,The following statement contains a magic number: this.Size = new MapSize(512' 512);
Magic Number,Google.Maps.StaticMaps,StaticMapRequest,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\StaticMaps\StaticMapRequest.cs,GetMarkersStr,The following statement contains a magic number: System.Text.StringBuilder sb = new System.Text.StringBuilder(200);
Magic Number,Google.Maps.StaticMaps,StaticMapService,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\StaticMaps\StaticMapService.cs,StreamToArray,The following statement contains a magic number: const int BYTE_BUFFER_LENGTH = 4096;
Magic Number,Google.Maps.StreetView,StreetViewRequest,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\StreetView\StreetViewRequest.cs,StreetViewRequest,The following statement contains a magic number: this.Size = new MapSize(512' 512);
Magic Number,Google.Maps.StreetView,StreetViewRequest,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\StreetView\StreetViewRequest.cs,StreetViewRequest,The following statement contains a magic number: this.Size = new MapSize(512' 512);
Magic Number,Google.Maps.StreetView,StreetViewService,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\StreetView\StreetViewService.cs,StreamToArray,The following statement contains a magic number: const int BYTE_BUFFER_LENGTH = 4096;
Magic Number,Google.Maps.TimeZone,TimeZoneRequest,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\TimeZone\TimeZoneRequest.cs,ToUri,The following statement contains a magic number: DateTime epoch = new DateTime(1970' 1' 1' 0' 0' 0' 0);
Missing Default,Google.Maps,JsonEnumTypeConverter,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\JsonEnumTypeConverter.cs,AsResponseStatus,The following switch statement is missing a default case: switch(s)  			{  				case "OK":  					result = ServiceResponseStatus.Ok;  					break;  				case "ZERO_RESULTS":  					result = ServiceResponseStatus.ZeroResults;  					break;  				case "OVER_QUERY_LIMIT":  					result = ServiceResponseStatus.OverQueryLimit;  					break;  				case "REQUEST_DENIED":  					result = ServiceResponseStatus.RequestDenied;  					break;  				case "INVALID_REQUEST":  					result = ServiceResponseStatus.InvalidRequest;  					break;  				case "MAX_WAYPOINTS_EXCEEDED":  					result = ServiceResponseStatus.MaxWaypointsExceeded;  					break;  				case "NOT_FOUND":  					result = ServiceResponseStatus.NotFound;  					break;  			}
Missing Default,Google.Maps,JsonEnumTypeConverter,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\JsonEnumTypeConverter.cs,AsAddressType,The following switch statement is missing a default case: switch(s)  			{  				case "street_address":  					result = AddressType.StreetAddress;  					break;  				case "route":  					result = AddressType.Route;  					break;  				case "intersection":  					result = AddressType.Intersection;  					break;  				case "political":  					result = AddressType.Political;  					break;  				case "country":  					result = AddressType.Country;  					break;  				case "administrative_area_level_1":  					result = AddressType.AdministrativeAreaLevel1;  					break;  				case "administrative_area_level_2":  					result = AddressType.AdministrativeAreaLevel2;  					break;  				case "administrative_area_level_3":  					result = AddressType.AdministrativeAreaLevel3;  					break;  				case "colloquial_area":  					result = AddressType.ColloquialArea;  					break;  				case "locality":  					result = AddressType.Locality;  					break;  				case "sublocality":  					result = AddressType.Sublocality;  					break;  				case "sublocality_level_1":  					result = AddressType.SublocalityLevel1;  					break;  				case "sublocality_level_2":  					result = AddressType.SublocalityLevel2;  					break;  				case "sublocality_level_3":  					result = AddressType.SublocalityLevel3;  					break;  				case "sublocality_level_4":  					result = AddressType.SublocalityLevel4;  					break;  				case "sublocality_level_5":  					result = AddressType.SublocalityLevel5;  					break;  				case "neighborhood":  					result = AddressType.Neighborhood;  					break;  				case "premise":  					result = AddressType.Premise;  					break;  				case "subpremise":  					result = AddressType.Subpremise;  					break;  				case "postal_code":  					result = AddressType.PostalCode;  					break;  				case "postal_town":  					result = AddressType.PostalTown;  					break;  				case "postal_code_prefix":  					result = AddressType.PostalCodePrefix;  					break;                  case "postal_code_suffix":                      result = AddressType.PostalCodeSuffix;                      break;  				case "natural_feature":  					result = AddressType.NaturalFeature;  					break;  				case "airport":  					result = AddressType.Airport;  					break;  				case "park":  					result = AddressType.Park;  					break;  				case "point_of_interest":  					result = AddressType.PointOfInterest;  					break;  				case "post_box":  					result = AddressType.PostBox;  					break;  				case "street_number":  					result = AddressType.StreetNumber;  					break;  				case "floor":  					result = AddressType.Floor;  					break;  				case "room":  					result = AddressType.Room;  					break;  			}
Missing Default,Google.Maps,JsonEnumTypeConverter,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\JsonEnumTypeConverter.cs,AsPlaceType,The following switch statement is missing a default case: switch(s)  			{  				case "accounting":  					result = Places.PlaceType.Accounting;  					break;  				case "airport":  					result = Places.PlaceType.Airport;  					break;  				case "amusement_park":  					result = Places.PlaceType.AmusementPark;  					break;  				case "aquarium":  					result = Places.PlaceType.Aquarium;  					break;  				case "art_gallery":  					result = Places.PlaceType.ArtGallery;  					break;  				case "atm":  					result = Places.PlaceType.ATM;  					break;  				case "bakery":  					result = Places.PlaceType.Bakery;  					break;  				case "bank":  					result = Places.PlaceType.Bank;  					break;  				case "bar":  					result = Places.PlaceType.Bar;  					break;  				case "beauty_salon":  					result = Places.PlaceType.BeautySalon;  					break;  				case "bicycle_store":  					result = Places.PlaceType.BicycleStore;  					break;  				case "book_store":  					result = Places.PlaceType.BookStore;  					break;  				case "bowling_alley":  					result = Places.PlaceType.BowlingAlley;  					break;  				case "bus_station":  					result = Places.PlaceType.BusStation;  					break;  				case "cafe":  					result = Places.PlaceType.Cafe;  					break;  				case "campground":  					result = Places.PlaceType.Campground;  					break;  				case "car_dealer":  					result = Places.PlaceType.CarDealer;  					break;  				case "car_rental":  					result = Places.PlaceType.CarRental;  					break;  				case "car_repair":  					result = Places.PlaceType.CarRepair;  					break;  				case "car_wash":  					result = Places.PlaceType.CarRepair;  					break;  				case "casino":  					result = Places.PlaceType.Casino;  					break;  				case "cemetery":  					result = Places.PlaceType.Cemetery;  					break;  				case "church":  					result = Places.PlaceType.Church;  					break;  				case "city_hall":  					result = Places.PlaceType.CityHall;  					break;  				case "clothing_store":  					result = Places.PlaceType.ClothingStore;  					break;  				case "convenience_store":  					result = Places.PlaceType.ConvenienceStore;  					break;  				case "courthouse":  					result = Places.PlaceType.CourtHouse;  					break;  				case "dentist":  					result = Places.PlaceType.Dentist;  					break;  				case "department_store":  					result = Places.PlaceType.DepartmentStore;  					break;  				case "doctor":  					result = Places.PlaceType.Doctor;  					break;  				case "electrician":  					result = Places.PlaceType.Electrician;  					break;  				case "electronics_store":  					result = Places.PlaceType.ElectronicsStore;  					break;  				case "embassy":  					result = Places.PlaceType.Embassy;  					break;  				case "fire_station":  					result = Places.PlaceType.FireStation;  					break;  				case "florist":  					result = Places.PlaceType.Florist;  					break;  				case "funeral_home":  					result = Places.PlaceType.FuneralHome;  					break;  				case "furniture_store":  					result = Places.PlaceType.FurnitureStore;  					break;  				case "gas_station":  					result = Places.PlaceType.GasStation;  					break;  				case "gym":  					result = Places.PlaceType.Gym;  					break;  				case "hair_care":  					result = Places.PlaceType.HairCare;  					break;  				case "hardware_store":  					result = Places.PlaceType.HardwareStore;  					break;  				case "hindu_temple":  					result = Places.PlaceType.HinduTemple;  					break;  				case "home_goods_store":  					result = Places.PlaceType.HomeGoodsStore;  					break;  				case "hospital":  					result = Places.PlaceType.Hospital;  					break;  				case "insurance_agency":  					result = Places.PlaceType.InsuranceAgency;  					break;  				case "jewelry_store":  					result = Places.PlaceType.JewelryStore;  					break;  				case "laundry":  					result = Places.PlaceType.Laundry;  					break;  				case "lawyer":  					result = Places.PlaceType.Lawyer;  					break;  				case "library":  					result = Places.PlaceType.Library;  					break;  				case "liquor_store":  					result = Places.PlaceType.LiquorStore;  					break;  				case "local_government_office":  					result = Places.PlaceType.LocalGovermentOffice;  					break;  				case "locksmith":  					result = Places.PlaceType.Locksmith;  					break;  				case "lodging":  					result = Places.PlaceType.Lodging;  					break;  				case "meal_delivery":  					result = Places.PlaceType.MealDelivery;  					break;  				case "meal_takeaway":  					result = Places.PlaceType.MealTakeaway;  					break;  				case "mosque":  					result = Places.PlaceType.Mosque;  					break;  				case "movie_rental":  					result = Places.PlaceType.MovieRental;  					break;  				case "movie_theater":  					result = Places.PlaceType.MovieTheater;  					break;  				case "moving_company":  					result = Places.PlaceType.MovingCompany;  					break;  				case "museum":  					result = Places.PlaceType.Museum;  					break;  				case "night_club":  					result = Places.PlaceType.NightClub;  					break;  				case "painter":  					result = Places.PlaceType.Painter;  					break;  				case "park":  					result = Places.PlaceType.Park;  					break;  				case "parking":  					result = Places.PlaceType.Parking;  					break;  				case "pet_store":  					result = Places.PlaceType.PetStore;  					break;  				case "pharmacy":  					result = Places.PlaceType.Pharmacy;  					break;  				case "physiotherapist":  					result = Places.PlaceType.Physiotherapist;  					break;  				case "plumber":  					result = Places.PlaceType.Plumber;  					break;  				case "police":  					result = Places.PlaceType.Police;  					break;  				case "post_office":  					result = Places.PlaceType.PostOffice;  					break;  				case "real_estate_agency":  					result = Places.PlaceType.RealEstateAgency;  					break;  				case "restaurant":  					result = Places.PlaceType.Restaurant;  					break;  				case "roofing_contractor":  					result = Places.PlaceType.RoofingContractor;  					break;  				case "rv_park":  					result = Places.PlaceType.RVPark;  					break;  				case "school":  					result = Places.PlaceType.School;  					break;  				case "shoe_store":  					result = Places.PlaceType.ShoeStore;  					break;  				case "shopping_mall":  					result = Places.PlaceType.ShoppingMall;  					break;  				case "spa":  					result = Places.PlaceType.Spa;  					break;  				case "stadium":  					result = Places.PlaceType.Stadium;  					break;  				case "storage":  					result = Places.PlaceType.Storage;  					break;  				case "store":  					result = Places.PlaceType.Store;  					break;  				case "subway_station":  					result = Places.PlaceType.SubwayStation;  					break;  				case "synagogue":  					result = Places.PlaceType.Synagogue;  					break;  				case "taxi_stand":  					result = Places.PlaceType.TaxiStand;  					break;  				case "train_station":  					result = Places.PlaceType.TrainStation;  					break;  				case "travel_agency":  					result = Places.PlaceType.TravelAgency;  					break;  				case "university":  					result = Places.PlaceType.University;  					break;  				case "veterinary_care":  					result = Places.PlaceType.VeterinaryCare;  					break;  				case "zoo":  					result = Places.PlaceType.Zoo;  					break;  				case "administrative_area_level_1":  					result = Places.PlaceType.AdministrativeAreaLevel1;  					break;  				case "administrative_area_level_2":  					result = Places.PlaceType.AdministrativeAreaLevel2;  					break;  				case "administrative_area_level_3":  					result = Places.PlaceType.AdministrativeAreaLevel3;  					break;  				case "colloquial_area":  					result = Places.PlaceType.ColloquialArea;  					break;  				case "country":  					result = Places.PlaceType.Country;  					break;  				case "floor":  					result = Places.PlaceType.Floor;  					break;  				case "geocode":  					result = Places.PlaceType.Geocode;  					break;  				case "intersection":  					result = Places.PlaceType.Intersection;  					break;  				case "locality":  					result = Places.PlaceType.Locality;  					break;  				case "natural_feature":  					result = Places.PlaceType.NaturalFeature;  					break;  				case "neighborhood":  					result = Places.PlaceType.Neighborhood;  					break;  				case "political":  					result = Places.PlaceType.Political;  					break;  				case "point_of_interest":  					result = Places.PlaceType.PointOfInterest;  					break;  				case "post_box":  					result = Places.PlaceType.PostBox;  					break;  				case "postal_code":  					result = Places.PlaceType.PostalCode;  					break;  				case "postal_code_prefix":  					result = Places.PlaceType.PostalCodePrefix;  					break;  				case "postal_town":  					result = Places.PlaceType.PostalTown;  					break;  				case "premise":  					result = Places.PlaceType.Premise;  					break;  				case "room":  					result = Places.PlaceType.Room;  					break;  				case "route":  					result = Places.PlaceType.Route;  					break;  				case "street_address":  					result = Places.PlaceType.StreetAddress;  					break;  				case "street_number":  					result = Places.PlaceType.StreetNumber;  					break;  				case "sublocality":  					result = Places.PlaceType.Sublocality;  					break;  				case "sublocality_level_4":  					result = Places.PlaceType.SublocalityLevel4;  					break;  				case "sublocality_level_5":  					result = Places.PlaceType.SublocalityLevel5;  					break;  				case "sublocality_level_3":  					result = Places.PlaceType.SublocalityLevel3;  					break;  				case "sublocality_level_2":  					result = Places.PlaceType.SublocalityLevel2;  					break;  				case "sublocality_level_1":  					result = Places.PlaceType.SublocalityLevel1;  					break;  				case "subpremise":  					result = Places.PlaceType.Subpremise;  					break;  				case "transit_station":  					result = Places.PlaceType.TransitStation;  					break;  			}
Missing Default,Google.Maps,JsonEnumTypeConverter,D:\research\architectureSmells\repos\ericnewton76_gmaps-api-net\src\Google.Maps\JsonEnumTypeConverter.cs,AsLocationType,The following switch statement is missing a default case: switch(s)  			{  				case "ROOFTOP":  					result = LocationType.Rooftop;  					break;  				case "RANGE_INTERPOLATED":  					result = LocationType.RangeInterpolated;  					break;  				case "GEOMETRIC_CENTER":  					result = LocationType.GeometricCenter;  					break;  				case "APPROXIMATE":  					result = LocationType.Approximate;  					break;  			}
