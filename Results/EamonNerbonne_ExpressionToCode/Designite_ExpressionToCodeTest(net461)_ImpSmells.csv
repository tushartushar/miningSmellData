Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ExpressionToCodeTest,AnonymousObjectFormattingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\AnonymousObjectFormattingTest.cs,AnonymousObjectsInArrayExpression,The length of the statement  "            var config = ExpressionToCodeConfiguration.DefaultCodeGenConfiguration.WithAnnotator(CodeAnnotators.ValuesOnStalksCodeAnnotator); " is 129.
Long Statement,ExpressionToCodeTest,ApiStabilityTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ApiStabilityTest.cs,PrettyPrintTypeHeader,The length of the statement  "            var suffix = !inheritanceTypes.Any() || type.GetTypeInfo().IsEnum ? "" : " : " + string.Join("' "' inheritanceTypes.Select(ObjectToCode.ToCSharpFriendlyTypeName)); " is 163.
Long Statement,ExpressionToCodeTest,ApprovalTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ApprovalTest.cs,Verify,The length of the statement  "            var filedir = Path.GetDirectoryName(filepath) ?? throw new InvalidOperationException("path " + filepath + " has no directory"); " is 127.
Long Statement,ExpressionToCodeTest,BlockExpressionTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\BlockExpressionTest.cs,BlockVariablesTest,The length of the statement  "            Assert.Equal(@"{ int p; int x; p = x; }"' ExpressionToCode.ToCode(Expression.Block(typeof(void)' new[] { p' x }' assignment)));" is 127.
Long Statement,ExpressionToCodeTest,BlockExpressionTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\BlockExpressionTest.cs,MultipleStatementsBlockTest,The length of the statement  "            Assert.Equal(@"{ int p; p = 1; p += 5; }"' ExpressionToCode.ToCode(Expression.Block(typeof(void)' new[] { p }' assignment' addAssignment)));" is 140.
Long Statement,ExpressionToCodeTest,EnumerableFormattingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EnumerableFormattingTest.cs,LongArraysDoNotBreakIfSoConfigured,The length of the statement  "            Assert.Equal("new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13 }"' config.ComplexObjectToPseudoCode(Enumerable.Range(1' 13).ToArray())); " is 137.
Long Statement,ExpressionToCodeTest,EnumTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EnumTests.cs,NullableEnumCornerCases_FullNames,The length of the statement  "            var exprToCode = ExpressionToCodeConfiguration.DefaultCodeGenConfiguration.WithObjectStringifier(ObjectStringify.WithFullTypeNames).GetExpressionToCode(); " is 154.
Long Statement,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,EqualsOpDetected,The length of the statement  "            Assert.Equal(EqualityExpressionClass.EqualsOp' EqualityExpressions.CheckForEquality(() => new DateTime(2011' 05' 17) == DateTime.Today)); " is 137.
Long Statement,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,NotEqualsOpDetected,The length of the statement  "            Assert.Equal(EqualityExpressionClass.NotEqualsOp' EqualityExpressions.CheckForEquality(() => new DateTime(2011' 05' 17) != DateTime.Today)); " is 140.
Long Statement,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,EquatableDetected,The length of the statement  "            Assert.Equal(EqualityExpressionClass.EquatableEquals' EqualityExpressions.CheckForEquality(() => ((IEquatable<string>)bla).Equals(bla2string))); " is 144.
Long Statement,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,EquatableDetected,The length of the statement  "            Assert.Equal(EqualityExpressionClass.EquatableEquals' EqualityExpressions.CheckForEquality(() => bla.Equals(bla2string))); " is 122.
Long Statement,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,EquatableDetected,The length of the statement  "            Assert.Equal(EqualityExpressionClass.EquatableEquals' EqualityExpressions.CheckForEquality(() => new DateTime(2011' 05' 17).Equals(DateTime.Today))); " is 149.
Long Statement,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,NoneDetected,The length of the statement  "            Assert.Equal(EqualityExpressionClass.None' EqualityExpressions.CheckForEquality(() => bla.StartsWith("bla"' StringComparison.Ordinal))); " is 136.
Long Statement,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,NoneDetected,The length of the statement  "            Assert.Equal(EqualityExpressionClass.None' EqualityExpressions.CheckForEquality(() => DateTime.Equals(new DateTime(2011' 05' 17)' DateTime.Today))); " is 148.
Long Statement,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,ObjectEqualsDetected,The length of the statement  "            Assert.Equal(EqualityExpressionClass.ObjectEquals' EqualityExpressions.CheckForEquality(() => bla2object.Equals(bla2object))); " is 126.
Long Statement,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,ObjectEqualsStaticDetected,The length of the statement  "            Assert.Equal(EqualityExpressionClass.ObjectEqualsStatic' EqualityExpressions.CheckForEquality(() => Equals(bla' null))); " is 120.
Long Statement,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,ObjectReferenceEqualsDetected,The length of the statement  "            Assert.Equal(EqualityExpressionClass.ObjectReferenceEquals' EqualityExpressions.CheckForEquality(() => ReferenceEquals(bla2object' bla2object))); " is 145.
Long Statement,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,ObjectReferenceEqualsDetected,The length of the statement  "            Assert.Equal(EqualityExpressionClass.ObjectReferenceEquals' EqualityExpressions.CheckForEquality(() => ReferenceEquals(null' null))); " is 133.
Long Statement,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,SequenceEqualsDetected,The length of the statement  "            Assert.Equal(EqualityExpressionClass.SequenceEqual' EqualityExpressions.CheckForEquality(() => bla.AsEnumerable().SequenceEqual(bla2string))); " is 142.
Long Statement,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,SequenceEqualsDetected,The length of the statement  "            Assert.Equal(EqualityExpressionClass.SequenceEqual' EqualityExpressions.CheckForEquality(() => new[] { 'b'' 'l'' 'a' }.SequenceEqual(bla2string))); " is 147.
Long Statement,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,StringEqDisagreement,The length of the statement  "                EqualityExpressions.DisagreeingEqualities(ExpressionToCodeConfiguration.DefaultAssertionConfiguration' () => ReferenceEquals(1000.ToString(CultureInfo.InvariantCulture)' 10 + "00")) " is 181.
Long Statement,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,StringEqDisagreement,The length of the statement  "                EqualityExpressions.DisagreeingEqualities(ExpressionToCodeConfiguration.DefaultAssertionConfiguration' () => 1000.ToString(CultureInfo.InvariantCulture).Equals(10 + "00")).ToArray()' " is 182.
Long Statement,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,MembersDefault,The length of the statement  "#pragma warning disable CS8602 // Dereference of a possibly null reference. - these are false positives' because the code isn't executed' it's stringified. " is 155.
Long Statement,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,MembersDefault,The length of the statement  "#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type. - these are false positives' because the code isn't executed' it's stringified. " is 173.
Long Statement,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,FullTypeName_ForNestedType,The length of the statement  "            var code = ExpressionToCodeConfiguration.DefaultCodeGenConfiguration.WithObjectStringifier(ObjectStringify.WithFullTypeNames) " is 125.
Long Statement,ExpressionToCodeTest,NestedClassTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\NestedClassTest.cs,GenericNested,The length of the statement  "            Assert.Equal("() => null as Parent.NestedGen<Parent.NestedGen<object>>"' ExpressionToCode.ToCode(() => null as Parent.NestedGen<Parent.NestedGen<object>>)); " is 156.
Long Statement,ExpressionToCodeTest,NestedClassTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\NestedClassTest.cs,NestedInGeneric,The length of the statement  "            Assert.Equal("() => null as ParentGen<ParentGen<string>.Nested>.Nested"' ExpressionToCode.ToCode(() => null as ParentGen<ParentGen<string>.Nested>.Nested)); " is 156.
Long Statement,ExpressionToCodeTest,NestedClassTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\NestedClassTest.cs,GenericNestedInGeneric,The length of the statement  "            Assert.Equal("() => null as ParentGen<int>.NestedGen<string>"' ExpressionToCode.ToCode(() => null as ParentGen<int>.NestedGen<string>)); " is 136.
Long Statement,ExpressionToCodeTest,PAssertTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\PAssertTest.cs,TestBasicStalks,The length of the statement  "            Assert.Equal(@"TimeSpan.FromMilliseconds(10.0).CompareTo(TimeSpan.FromMinutes(1.0)) > 0  :  assertion failed"' msgLines[0]); " is 124.
Long Statement,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ComplexObjectToPseudoCodeSupportsComplexTuples,The length of the statement  "            Assert.Equal("(1' (\"2\"' new[] { \"2b\" })' new[] { 3 }' 4' null' 6' 7' 8' 9)"' ObjectToCode.ComplexObjectToPseudoCode(actual)); " is 129.
Magic Number,ExpressionToCodeTest,AnonymousObjectFormattingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\AnonymousObjectFormattingTest.cs,AnonymousObjectsInArrayExpression,The following statement contains a magic number: var arr = new[] { new { Name = "hmm"' Val = (object)3' }' new { Name = "foo"' Val = (object)"test" } };
Magic Number,ExpressionToCodeTest,AnonymousObjectFormattingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\AnonymousObjectFormattingTest.cs,MessyEnumerablesOfAnonymousObjects,The following statement contains a magic number: var foo = new {                  A_long_string = string.Join("##"' Enumerable.Range(0' 100)) + "suffix"'                  A_short_string = "short"'                  A_long_enumerable = Enumerable.Range(0' 1000)              };
Magic Number,ExpressionToCodeTest,AnonymousObjectFormattingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\AnonymousObjectFormattingTest.cs,MessyEnumerablesOfAnonymousObjects,The following statement contains a magic number: var foo = new {                  A_long_string = string.Join("##"' Enumerable.Range(0' 100)) + "suffix"'                  A_short_string = "short"'                  A_long_enumerable = Enumerable.Range(0' 1000)              };
Magic Number,ExpressionToCodeTest,BlockExpressionTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\BlockExpressionTest.cs,MultipleStatementsBlockTest,The following statement contains a magic number: Expression addAssignment = Expression.AddAssign(p' Expression.Constant(5));
Magic Number,ExpressionToCodeTest,BlockExpressionTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\BlockExpressionTest.cs,MultipleStatementWithReturnBlockTest,The following statement contains a magic number: Expression addAssignment = Expression.AddAssign(p' Expression.Constant(5));
Magic Number,ExpressionToCodeTest,CSharpFriendlyTypeNameTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\CSharpFriendlyTypeNameTest.cs,ConstructedSingleDimOfMultiDimArray,The following statement contains a magic number: var v = new[] { new object[2' 3] };
Magic Number,ExpressionToCodeTest,CSharpFriendlyTypeNameTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\CSharpFriendlyTypeNameTest.cs,ConstructedSingleDimOfMultiDimArray,The following statement contains a magic number: var v = new[] { new object[2' 3] };
Magic Number,ExpressionToCodeTest,EnumerableFormattingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EnumerableFormattingTest.cs,LongArraysDoNotBreakIfSoConfigured,The following statement contains a magic number: Assert.Equal("new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13 }"' config.ComplexObjectToPseudoCode(Enumerable.Range(1' 13).ToArray()));
Magic Number,ExpressionToCodeTest,EnumerableFormattingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EnumerableFormattingTest.cs,EnumerableElisionIsConfigurable,The following statement contains a magic number: var config = ExpressionToCodeConfiguration.DefaultCodeGenConfiguration.WithPrintedListLengthLimit(3);
Magic Number,ExpressionToCodeTest,EnumerableFormattingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EnumerableFormattingTest.cs,EnumerableElisionIsConfigurable,The following statement contains a magic number: Assert.Equal("{ 1' 2' 3' ... }"' config.ComplexObjectToPseudoCode(Enumerable.Range(1' 13)));
Magic Number,ExpressionToCodeTest,EnumerableFormattingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EnumerableFormattingTest.cs,NestedArraysUseProperConfig,The following statement contains a magic number: var config = ExpressionToCodeConfiguration.DefaultCodeGenConfiguration.WithPrintedListLengthLimit(3);
Magic Number,ExpressionToCodeTest,EnumerableFormattingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EnumerableFormattingTest.cs,NestedArraysUseProperConfig,The following statement contains a magic number: ApprovalTest.Verify(                  config.ComplexObjectToPseudoCode(                      new[] {                          null'                          new {                              A = 3'                              B = new[] { 1' 2' 3' 4' 5 }                          }                      }));
Magic Number,ExpressionToCodeTest,EnumerableFormattingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EnumerableFormattingTest.cs,NestedArraysUseProperConfig,The following statement contains a magic number: ApprovalTest.Verify(                  config.ComplexObjectToPseudoCode(                      new[] {                          null'                          new {                              A = 3'                              B = new[] { 1' 2' 3' 4' 5 }                          }                      }));
Magic Number,ExpressionToCodeTest,EnumerableFormattingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EnumerableFormattingTest.cs,NestedArraysUseProperConfig,The following statement contains a magic number: ApprovalTest.Verify(                  config.ComplexObjectToPseudoCode(                      new[] {                          null'                          new {                              A = 3'                              B = new[] { 1' 2' 3' 4' 5 }                          }                      }));
Magic Number,ExpressionToCodeTest,EnumerableFormattingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EnumerableFormattingTest.cs,NestedArraysUseProperConfig,The following statement contains a magic number: ApprovalTest.Verify(                  config.ComplexObjectToPseudoCode(                      new[] {                          null'                          new {                              A = 3'                              B = new[] { 1' 2' 3' 4' 5 }                          }                      }));
Magic Number,ExpressionToCodeTest,EnumerableFormattingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EnumerableFormattingTest.cs,NestedArraysUseProperConfig,The following statement contains a magic number: ApprovalTest.Verify(                  config.ComplexObjectToPseudoCode(                      new[] {                          null'                          new {                              A = 3'                              B = new[] { 1' 2' 3' 4' 5 }                          }                      }));
Magic Number,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,EqualsOpDetected,The following statement contains a magic number: Assert.Equal(EqualityExpressionClass.EqualsOp' EqualityExpressions.CheckForEquality(() => new DateTime(2011' 05' 17) == DateTime.Today));
Magic Number,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,EqualsOpDetected,The following statement contains a magic number: Assert.Equal(EqualityExpressionClass.EqualsOp' EqualityExpressions.CheckForEquality(() => new DateTime(2011' 05' 17) == DateTime.Today));
Magic Number,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,EqualsOpDetected,The following statement contains a magic number: Assert.Equal(EqualityExpressionClass.EqualsOp' EqualityExpressions.CheckForEquality(() => new DateTime(2011' 05' 17) == DateTime.Today));
Magic Number,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,NotEqualsOpDetected,The following statement contains a magic number: Assert.Equal(EqualityExpressionClass.NotEqualsOp' EqualityExpressions.CheckForEquality(() => new DateTime(2011' 05' 17) != DateTime.Today));
Magic Number,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,NotEqualsOpDetected,The following statement contains a magic number: Assert.Equal(EqualityExpressionClass.NotEqualsOp' EqualityExpressions.CheckForEquality(() => new DateTime(2011' 05' 17) != DateTime.Today));
Magic Number,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,NotEqualsOpDetected,The following statement contains a magic number: Assert.Equal(EqualityExpressionClass.NotEqualsOp' EqualityExpressions.CheckForEquality(() => new DateTime(2011' 05' 17) != DateTime.Today));
Magic Number,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,EquatableDetected,The following statement contains a magic number: Assert.Equal(EqualityExpressionClass.EquatableEquals' EqualityExpressions.CheckForEquality(() => new DateTime(2011' 05' 17).Equals(DateTime.Today)));
Magic Number,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,EquatableDetected,The following statement contains a magic number: Assert.Equal(EqualityExpressionClass.EquatableEquals' EqualityExpressions.CheckForEquality(() => new DateTime(2011' 05' 17).Equals(DateTime.Today)));
Magic Number,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,EquatableDetected,The following statement contains a magic number: Assert.Equal(EqualityExpressionClass.EquatableEquals' EqualityExpressions.CheckForEquality(() => new DateTime(2011' 05' 17).Equals(DateTime.Today)));
Magic Number,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,NoneDetected,The following statement contains a magic number: Assert.Equal(EqualityExpressionClass.None' EqualityExpressions.CheckForEquality(() => DateTime.Equals(new DateTime(2011' 05' 17)' DateTime.Today)));
Magic Number,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,NoneDetected,The following statement contains a magic number: Assert.Equal(EqualityExpressionClass.None' EqualityExpressions.CheckForEquality(() => DateTime.Equals(new DateTime(2011' 05' 17)' DateTime.Today)));
Magic Number,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,NoneDetected,The following statement contains a magic number: Assert.Equal(EqualityExpressionClass.None' EqualityExpressions.CheckForEquality(() => DateTime.Equals(new DateTime(2011' 05' 17)' DateTime.Today)));
Magic Number,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,ObjectEqualsStaticDetected,The following statement contains a magic number: Assert.Equal(EqualityExpressionClass.ObjectEqualsStatic' EqualityExpressions.CheckForEquality(() => Equals(null' 42)));
Magic Number,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,StringEqDisagreement,The following statement contains a magic number: Assert.Equal(                  EqualityExpressions.DisagreeingEqualities(ExpressionToCodeConfiguration.DefaultAssertionConfiguration' () => ReferenceEquals(1000.ToString(CultureInfo.InvariantCulture)' 10 + "00"))                      .OrderBy(x => x)'                  eqclasses(                          EqualityExpressionClass.EqualsOp'                          EqualityExpressionClass.NotEqualsOp'                          EqualityExpressionClass.ObjectEquals'                          EqualityExpressionClass.ObjectEqualsStatic'                          EqualityExpressionClass.EquatableEquals'                          EqualityExpressionClass.SequenceEqual'                          EqualityExpressionClass.StructuralEquals                      )                      .OrderBy(x => x));
Magic Number,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,StringEqDisagreement,The following statement contains a magic number: Assert.Equal(                  EqualityExpressions.DisagreeingEqualities(ExpressionToCodeConfiguration.DefaultAssertionConfiguration' () => ReferenceEquals(1000.ToString(CultureInfo.InvariantCulture)' 10 + "00"))                      .OrderBy(x => x)'                  eqclasses(                          EqualityExpressionClass.EqualsOp'                          EqualityExpressionClass.NotEqualsOp'                          EqualityExpressionClass.ObjectEquals'                          EqualityExpressionClass.ObjectEqualsStatic'                          EqualityExpressionClass.EquatableEquals'                          EqualityExpressionClass.SequenceEqual'                          EqualityExpressionClass.StructuralEquals                      )                      .OrderBy(x => x));
Magic Number,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,StringEqDisagreement,The following statement contains a magic number: Assert.Equal(                  EqualityExpressions.DisagreeingEqualities(ExpressionToCodeConfiguration.DefaultAssertionConfiguration' () => 1000.ToString(CultureInfo.InvariantCulture).Equals(10 + "00")).ToArray()'                  eqclasses(EqualityExpressionClass.ObjectReferenceEquals));
Magic Number,ExpressionToCodeTest,EqualityComparingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\EqualityComparingTest.cs,StringEqDisagreement,The following statement contains a magic number: Assert.Equal(                  EqualityExpressions.DisagreeingEqualities(ExpressionToCodeConfiguration.DefaultAssertionConfiguration' () => 1000.ToString(CultureInfo.InvariantCulture).Equals(10 + "00")).ToArray()'                  eqclasses(EqualityExpressionClass.ObjectReferenceEquals));
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,AddOperator,The following statement contains a magic number: Assert.Equal(                  @"() => 1 + x + 2 == 4"'                  ExpressionToCode.ToCode(() => 1 + x + 2 == 4));
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,AddOperator,The following statement contains a magic number: Assert.Equal(                  @"() => 1 + x + 2 == 4"'                  ExpressionToCode.ToCode(() => 1 + x + 2 == 4));
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,IndexerAccess,The following statement contains a magic number: var dict = Enumerable.Range(1' 20).ToDictionary(n => n.ToString());
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,IndexerAccess,The following statement contains a magic number: Assert.Equal(                  @"() => dict[""3""] == 3"'                  ExpressionToCode.ToCode(() => dict["3"] == 3));
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,MembersBuiltin,The following statement contains a magic number: Assert.Equal(                  @"() => 1.23m.ToString()"'                  // ReSharper disable once SpecifyACultureInStringConversionExplicitly                  ExpressionToCode.ToCode(() => 1.23m.ToString()));
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,MembersBuiltin,The following statement contains a magic number: Assert.Equal(                  @"() => ""abc"".Length == 3"'                  ExpressionToCode.ToCode(() => "abc".Length == 3));
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,MethodGroupAsExtensionMethod,The following statement contains a magic number: var actual = ExpressionToCode.ToCode(() => (Func<bool>)new[] { 2000' 2004' 2008' 2012 }.Any);
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,MethodGroupAsExtensionMethod,The following statement contains a magic number: var actual = ExpressionToCode.ToCode(() => (Func<bool>)new[] { 2000' 2004' 2008' 2012 }.Any);
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,MethodGroupAsExtensionMethod,The following statement contains a magic number: var actual = ExpressionToCode.ToCode(() => (Func<bool>)new[] { 2000' 2004' 2008' 2012 }.Any);
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,MethodGroupAsExtensionMethod,The following statement contains a magic number: var actual = ExpressionToCode.ToCode(() => (Func<bool>)new[] { 2000' 2004' 2008' 2012 }.Any);
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,MethodGroupConstant,The following statement contains a magic number: Assert.Equal(                  @"() => Array.TrueForAll(new[] { 2000' 2004' 2008' 2012 }' (Predicate<int>)DateTime.IsLeapYear)"'                  ExpressionToCode.ToCode(() => Array.TrueForAll(new[] { 2000' 2004' 2008' 2012 }' DateTime.IsLeapYear)));
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,MethodGroupConstant,The following statement contains a magic number: Assert.Equal(                  @"() => Array.TrueForAll(new[] { 2000' 2004' 2008' 2012 }' (Predicate<int>)DateTime.IsLeapYear)"'                  ExpressionToCode.ToCode(() => Array.TrueForAll(new[] { 2000' 2004' 2008' 2012 }' DateTime.IsLeapYear)));
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,MethodGroupConstant,The following statement contains a magic number: Assert.Equal(                  @"() => Array.TrueForAll(new[] { 2000' 2004' 2008' 2012 }' (Predicate<int>)DateTime.IsLeapYear)"'                  ExpressionToCode.ToCode(() => Array.TrueForAll(new[] { 2000' 2004' 2008' 2012 }' DateTime.IsLeapYear)));
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,MethodGroupConstant,The following statement contains a magic number: Assert.Equal(                  @"() => Array.TrueForAll(new[] { 2000' 2004' 2008' 2012 }' (Predicate<int>)DateTime.IsLeapYear)"'                  ExpressionToCode.ToCode(() => Array.TrueForAll(new[] { 2000' 2004' 2008' 2012 }' DateTime.IsLeapYear)));
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,MethodGroupConstant,The following statement contains a magic number: Assert.Equal(                  @"() => new[] { 2000' 2004' 2008' 2012 }.All((Func<int' bool>)set.Add)"'                  ExpressionToCode.ToCode(() => new[] { 2000' 2004' 2008' 2012 }.All(set.Add)));
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,MethodGroupConstant,The following statement contains a magic number: Assert.Equal(                  @"() => new[] { 2000' 2004' 2008' 2012 }.All((Func<int' bool>)set.Add)"'                  ExpressionToCode.ToCode(() => new[] { 2000' 2004' 2008' 2012 }.All(set.Add)));
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,MethodGroupConstant,The following statement contains a magic number: Assert.Equal(                  @"() => new[] { 2000' 2004' 2008' 2012 }.All((Func<int' bool>)set.Add)"'                  ExpressionToCode.ToCode(() => new[] { 2000' 2004' 2008' 2012 }.All(set.Add)));
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,MethodGroupConstant,The following statement contains a magic number: Assert.Equal(                  @"() => new[] { 2000' 2004' 2008' 2012 }.All((Func<int' bool>)set.Add)"'                  ExpressionToCode.ToCode(() => new[] { 2000' 2004' 2008' 2012 }.All(set.Add)));
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,NestedLambda_NoParameters,The following statement contains a magic number: Assert.Equal(                  @"() => call(() => 42)"'                  ExpressionToCode.ToCode(() => call(() => 42))              );
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,NestedLambda_OneParameter,The following statement contains a magic number: Assert.Equal(                  @"() => new[] { 37' 42 }.Select(x => x * 2)"'                  ExpressionToCode.ToCode(() => new[] { 37' 42 }.Select(x => x * 2))              );
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,NestedLambda_OneParameter,The following statement contains a magic number: Assert.Equal(                  @"() => new[] { 37' 42 }.Select(x => x * 2)"'                  ExpressionToCode.ToCode(() => new[] { 37' 42 }.Select(x => x * 2))              );
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,NestedLambda_OneParameter,The following statement contains a magic number: Assert.Equal(                  @"() => new[] { 37' 42 }.Select(x => x * 2)"'                  ExpressionToCode.ToCode(() => new[] { 37' 42 }.Select(x => x * 2))              );
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,NestedLambda_MultipleOverloads,The following statement contains a magic number: Assert.Equal(                  @"() => Fizz(x => x == 37)"'                  ExpressionToCode.ToCode(() => Fizz(x => x == 37))              );
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,NotOperator,The following statement contains a magic number: var y = 3;
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,NotOperator,The following statement contains a magic number: byte z = 42;
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,StringConcat,The following statement contains a magic number: Assert.Equal(                  @"() => ((""a\n\\b"" ?? x) + x).Length == 2 ? false : true"'                  // ReSharper disable once SimplifyConditionalTernaryExpression  #pragma warning disable 162                  ExpressionToCode.ToCode(() => (("a\n\\b" ?? x) + x).Length == 2 ? false : true));
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,StaticMethodWithRefAndOutModifiers,The following statement contains a magic number: Assert.Equal(                  @"() => ClassA.MethodWithOutAndRefParam(ref x' out y' 3)"'                  ExpressionToCode.ToCode(() => ClassA.MethodWithOutAndRefParam(ref x' out y' 3)));
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,ConstructorMethodWithRefAndOutModifiers,The following statement contains a magic number: var x = 42;
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,ExtensionMethodWithRefAndOutModifiers,The following statement contains a magic number: var x = 42;
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,ExtensionMethodWithRefAndOutModifiers,The following statement contains a magic number: Assert.Equal(                  @"() => DateTime.Now.AnExtensionMethod(ref x' 5' out y)"'                  ExpressionToCode.ToCode(() => DateTime.Now.AnExtensionMethod(ref x' 5' out y)));
Magic Number,ExpressionToCodeTest,ExpressionToCodeLibTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,DelegateCallWithRefAndOutModifiers,The following statement contains a magic number: var x = 42;
Magic Number,ExpressionToCodeTest,ClassWithClosure,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,GetExpression,The following statement contains a magic number: var arr = new[] { 37 };
Magic Number,ExpressionToCodeTest,ClassA,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,MethodWithOutAndRefParam,The following statement contains a magic number: output = x == 4 ? default(object?) : input;
Magic Number,ExpressionToCodeTest,ClassA,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionToCodeLibTest.cs,DoAssert,The following statement contains a magic number: x = 37;
Magic Number,ExpressionToCodeTest,ExpressionWithNameTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ExpressionWithNameTest.cs,TheGenericMethod_ToNameOf,The following statement contains a magic number: var actual = ExpressionToCode.GetNameIn(() => TheGenericMethod<int>(2));
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,TypeParameters,The following statement contains a magic number: Assert.Equal(1337' StaticTestClass.Consume(12));
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,TypeParameters,The following statement contains a magic number: Assert.Equal(1337' StaticTestClass.Consume(12));
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,TypeParameters,The following statement contains a magic number: Assert.Equal(42' StaticTestClass.Consume<int>(12));
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,TypeParameters,The following statement contains a magic number: Assert.Equal(42' StaticTestClass.Consume<int>(12));
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,TypeParameters,The following statement contains a magic number: Assert.Equal(42' StaticTestClass.Consume('a'));
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,TypeParameters,The following statement contains a magic number: Assert.Equal(42' StaticTestClass.IndirectConsume(12));
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,TypeParameters,The following statement contains a magic number: Assert.Equal(42' StaticTestClass.IndirectConsume(12));
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,TypeParameters,The following statement contains a magic number: Assert.Equal(                  @"() => 1337 == StaticTestClass.Consume(12)"'                  ExpressionToCode.ToCode(() => 1337 == StaticTestClass.Consume(12))              );
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,TypeParameters,The following statement contains a magic number: Assert.Equal(                  @"() => 1337 == StaticTestClass.Consume(12)"'                  ExpressionToCode.ToCode(() => 1337 == StaticTestClass.Consume(12))              );
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,TypeParameters,The following statement contains a magic number: Assert.Equal(                  @"() => 42 == StaticTestClass.Consume('a')"'                  ExpressionToCode.ToCode(() => 42 == StaticTestClass.Consume('a'))              );
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,TypeParameters,The following statement contains a magic number: Assert.Equal(                  @"() => 42 == StaticTestClass.IndirectConsume(12)"'                  ExpressionToCode.ToCode(() => 42 == StaticTestClass.IndirectConsume(12))              );
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,TypeParameters,The following statement contains a magic number: Assert.Equal(                  @"() => 42 == StaticTestClass.IndirectConsume(12)"'                  ExpressionToCode.ToCode(() => 42 == StaticTestClass.IndirectConsume(12))              );
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,TypeParameters,The following statement contains a magic number: Assert.Equal(                  @"() => 42 == StaticTestClass.Consume<int>(12)"'                  ExpressionToCode.ToCode(() => 42 == StaticTestClass.Consume<int>(12))              );
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,TypeParameters,The following statement contains a magic number: Assert.Equal(                  @"() => 42 == StaticTestClass.Consume<int>(12)"'                  ExpressionToCode.ToCode(() => 42 == StaticTestClass.Consume<int>(12))              );
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,TypeParameters2,The following statement contains a magic number: Assert.Equal(                  @"() => new[] { 1' 2' 3 }.First()"'                  ExpressionToCode.ToCode(() => new[] { 1' 2' 3 }.First())              );
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,TypeParameters2,The following statement contains a magic number: Assert.Equal(                  @"() => new[] { 1' 2' 3 }.First()"'                  ExpressionToCode.ToCode(() => new[] { 1' 2' 3 }.First())              );
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,TypeParameters2,The following statement contains a magic number: Assert.Equal(                  @"() => new[] { 1' 2' 3 }.Select(x => x.ToString())"'                  ExpressionToCode.ToCode(() => new[] { 1' 2' 3 }.Select(x => x.ToString()))              );
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,TypeParameters2,The following statement contains a magic number: Assert.Equal(                  @"() => new[] { 1' 2' 3 }.Select(x => x.ToString())"'                  ExpressionToCode.ToCode(() => new[] { 1' 2' 3 }.Select(x => x.ToString()))              );
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,GenericConstructor,The following statement contains a magic number: Assert.Equal(                  @"() => new GenericClass<int>(3)"'                  ExpressionToCode.ToCode(() => new GenericClass<int>(3))              );
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,GenericConstructor,The following statement contains a magic number: Assert.Equal(                  @"() => new GenericSubClass<IEnumerable<int>' int>(new[] { 3 })"'                  ExpressionToCode.ToCode(() => new GenericSubClass<IEnumerable<int>' int>(new[] { 3 }))              );
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,MethodInGenericClass,The following statement contains a magic number: Assert.Equal(                  @"() => new GenericClass<int>(3).IsSet(3)"'                  ExpressionToCode.ToCode(() => new GenericClass<int>(3).IsSet(3))              );
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,MethodInGenericClass,The following statement contains a magic number: Assert.Equal(                  @"() => new GenericClass<int>(3).IsSet(3)"'                  ExpressionToCode.ToCode(() => new GenericClass<int>(3).IsSet(3))              );
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,CannotInferWithoutTParam,The following statement contains a magic number: Assert.Equal(                  @"() => StaticTestClass.TEqualsInt<int>(3)"'                  ExpressionToCode.ToCode(() => StaticTestClass.TEqualsInt<int>(3))              );
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,CannotInferWithoutTParam,The following statement contains a magic number: Assert.Equal(                  @"() => StaticTestClass.TEqualsInt<string>(3)"'                  ExpressionToCode.ToCode(() => StaticTestClass.TEqualsInt<string>(3))              );
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,CanInferDirect,The following statement contains a magic number: Assert.Equal(                  @"() => StaticTestClass.TwoArgsOneGeneric(3' 3)"'                  ExpressionToCode.ToCode(() => StaticTestClass.TwoArgsOneGeneric(3' 3))              );
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,CanInferDirect,The following statement contains a magic number: Assert.Equal(                  @"() => StaticTestClass.TwoArgsOneGeneric(3' 3)"'                  ExpressionToCode.ToCode(() => StaticTestClass.TwoArgsOneGeneric(3' 3))              );
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,CanInferDirect,The following statement contains a magic number: Assert.Equal(                  @"() => StaticTestClass.TwoArgsOneGeneric(3' ""3"")"'                  ExpressionToCode.ToCode(() => StaticTestClass.TwoArgsOneGeneric(3' "3"))              );
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,CanInferTwoArg,The following statement contains a magic number: Assert.Equal(                  @"() => StaticTestClass.TwoArgsTwoGeneric(3' 3)"'                  ExpressionToCode.ToCode(() => StaticTestClass.TwoArgsTwoGeneric(3' 3))              );
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,CanInferTwoArg,The following statement contains a magic number: Assert.Equal(                  @"() => StaticTestClass.TwoArgsTwoGeneric(3' 3)"'                  ExpressionToCode.ToCode(() => StaticTestClass.TwoArgsTwoGeneric(3' 3))              );
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,CanInferTwoArg,The following statement contains a magic number: Assert.Equal(                  @"() => StaticTestClass.TwoArgsTwoGeneric(3' new object())"'                  ExpressionToCode.ToCode(() => StaticTestClass.TwoArgsTwoGeneric(3' new object()))              );
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,CanInferTwoArg,The following statement contains a magic number: var x = 37;
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,CanInferTwoArg,The following statement contains a magic number: var y = 42.0;
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,CanInferIndirect,The following statement contains a magic number: Assert.True(GenericClass<int>.IsEnumerableOfType(new[] { 3' 4 }));
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,CanInferIndirect,The following statement contains a magic number: Assert.True(GenericClass<int>.IsEnumerableOfType(new[] { 3' 4 }));
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,CanInferIndirect,The following statement contains a magic number: Assert.True(GenericClass<int>.IsFuncOfType(() => 3));
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,CanInferIndirect,The following statement contains a magic number: Assert.True(!GenericClass<int>.IsFuncOfType(() => 3.0));
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,CanInferIndirect,The following statement contains a magic number: Assert.Equal(                  @"() => GenericClass<int>.IsEnumerableOfType(new[] { 3' 4 })"'                  ExpressionToCode.ToCode(() => GenericClass<int>.IsEnumerableOfType(new[] { 3' 4 }))              );
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,CanInferIndirect,The following statement contains a magic number: Assert.Equal(                  @"() => GenericClass<int>.IsEnumerableOfType(new[] { 3' 4 })"'                  ExpressionToCode.ToCode(() => GenericClass<int>.IsEnumerableOfType(new[] { 3' 4 }))              );
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,CanInferIndirect,The following statement contains a magic number: Assert.Equal(                  @"() => GenericClass<int>.IsFuncOfType(() => 3)"'                  ExpressionToCode.ToCode(() => GenericClass<int>.IsFuncOfType(() => 3))              );
Magic Number,ExpressionToCodeTest,TestGenerics,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\GenericsTestClasses.cs,CanInferIndirect,The following statement contains a magic number: Assert.Equal(                  @"() => !GenericClass<int>.IsFuncOfType(() => 3.0)"'                  ExpressionToCode.ToCode(() => !GenericClass<int>.IsFuncOfType(() => 3.0))              );
Magic Number,ExpressionToCodeTest,ImplicitCastingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ImplicitCastingTest.cs,NotImplicitCast,The following statement contains a magic number: byte z = 42;
Magic Number,ExpressionToCodeTest,ImplicitCastingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ImplicitCastingTest.cs,AvoidsImplicitCastWhenTargetTypeIsAGenericArgument,The following statement contains a magic number: var x = 37;
Magic Number,ExpressionToCodeTest,ImplicitCastingTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ImplicitCastingTest.cs,AvoidsImplicitCastWhenTargetTypeIsAGenericArgument,The following statement contains a magic number: var y = 42.0;
Magic Number,ExpressionToCodeTest,PAssertTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\PAssertTest.cs,TestBasicStalks,The following statement contains a magic number: var msgLines = PAssertLines(                  () =>                      config.Assert(                          () =>                              TimeSpan.FromMilliseconds(10.0).CompareTo(TimeSpan.FromMinutes(1.0)) > 0                      ));
Magic Number,ExpressionToCodeTest,PAssertTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\PAssertTest.cs,NoValuesForBoringCasts,The following statement contains a magic number: var msgLines = PAssertLines(                  () =>                      config.Assert(                          () =>                              Equals(3' 4)                      ));
Magic Number,ExpressionToCodeTest,PAssertTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\PAssertTest.cs,NoValuesForBoringCasts,The following statement contains a magic number: var msgLines = PAssertLines(                  () =>                      config.Assert(                          () =>                              Equals(3' 4)                      ));
Magic Number,ExpressionToCodeTest,PAssertTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\PAssertTest.cs,ValuesForNonBoringCasts,The following statement contains a magic number: Assert.Equal(2' (object)msgLines[1].Count(c => c == '│'));
Magic Number,ExpressionToCodeTest,PAssertTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\PAssertTest.cs,AppendsSingleLineMessageBeforeStalks,The following statement contains a magic number: Assert.Equal(3' (object)msgLines.Length);
Magic Number,ExpressionToCodeTest,PAssertTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\PAssertTest.cs,PrependsMultiLineMessage,The following statement contains a magic number: Assert.Equal(@"x == 1"' (object)msgLines[2]);
Magic Number,ExpressionToCodeTest,PAssertTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\PAssertTest.cs,PrependsMultiLineMessage,The following statement contains a magic number: Assert.Equal(5' (object)msgLines.Length);
Magic Number,ExpressionToCodeTest,StringInterpolationTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\StringInterpolationTest.cs,ForcedInterpolationWithTernaryArgumentNeedsParens,The following statement contains a magic number: Assert.Equal(                  @"() => Interpolation($""abc {(aBoolean ? 1 : 2)} Z"")"'                  ExpressionToCode.ToCode(() => Interpolation($"abc {(aBoolean ? 1 : 2)} Z")));
Magic Number,ExpressionToCodeTest,StringInterpolationTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\StringInterpolationTest.cs,InterpolationWithThreeArgs,The following statement contains a magic number: var jkl = 123;
Magic Number,ExpressionToCodeTest,StringInterpolationTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\StringInterpolationTest.cs,InterpolationWithThreeArgs,The following statement contains a magic number: Assert.Equal(                  @"() => $""abc {37} def {null} ghi {jkl} mno"""'                  ExpressionToCode.ToCode(() => $"abc {37} def {null} ghi {jkl} mno"));
Magic Number,ExpressionToCodeTest,StringInterpolationTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\StringInterpolationTest.cs,InterpolationWithFourArgs,The following statement contains a magic number: var jkl = 123;
Magic Number,ExpressionToCodeTest,StringInterpolationTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\StringInterpolationTest.cs,InterpolationWithFourArgs,The following statement contains a magic number: var p = 2;
Magic Number,ExpressionToCodeTest,StringInterpolationTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\StringInterpolationTest.cs,InterpolationWithFourArgs,The following statement contains a magic number: var q = 3;
Magic Number,ExpressionToCodeTest,StringInterpolationTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\StringInterpolationTest.cs,InterpolationWithFourArgs,The following statement contains a magic number: var r = 4;
Magic Number,ExpressionToCodeTest,StringInterpolationTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\StringInterpolationTest.cs,InterpolationWithFourArgs,The following statement contains a magic number: Assert.Equal(                  @"() => $""abc {37} def {null} ghi {jkl} mno {p + q + r} stu"""'                  ExpressionToCode.ToCode(() => $"abc {37} def {null} ghi {jkl} mno {p + q + r} stu"));
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,AplusBapproved,The following statement contains a magic number: var a = 2;
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,AplusBapproved,The following statement contains a magic number: var b = 5;
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,AplusBapproved,The following statement contains a magic number: ApprovalTest.Verify(AnnotateAsAssertion(() => a + b > 3));
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,Binary_expressions_with_nesting,The following statement contains a magic number: var a = 2;
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,Binary_expressions_with_nesting,The following statement contains a magic number: var b = 5;
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,Binary_expressions_with_nesting,The following statement contains a magic number: var c = 3.45;
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,Binary_expressions_with_nesting,The following statement contains a magic number: ApprovalTest.Verify(AnnotateAsAssertion(() => a < b && (c > -a || c > b) && b < 10));
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,DealsOkWithEnumerablesOfAnonymousObjects,The following statement contains a magic number: var foo = new {                  A_long_string = string.Join("##"' Enumerable.Range(0' 100)) + "suffix"'                  A_short_string = "short"'                  A_long_enumerable = Enumerable.Range(0' 1000)              };
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,DealsOkWithEnumerablesOfAnonymousObjects,The following statement contains a magic number: var foo = new {                  A_long_string = string.Join("##"' Enumerable.Range(0' 100)) + "suffix"'                  A_short_string = "short"'                  A_long_enumerable = Enumerable.Range(0' 1000)              };
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,DealsOkWithObjectsContainingLongMultilineStrings,The following statement contains a magic number: var wallOfText =                  string.Join(                      ""'                      Enumerable.Range(0' 100)                          .Select(                              line =>                                  $"line {line}:".PadRight(10)                                  + string.Join(                                      ""'                                      Enumerable.Range(2' 20).Select(n => $"{n * 10'9};")                                  ) + "\n"                          )                  );
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,DealsOkWithObjectsContainingLongMultilineStrings,The following statement contains a magic number: var wallOfText =                  string.Join(                      ""'                      Enumerable.Range(0' 100)                          .Select(                              line =>                                  $"line {line}:".PadRight(10)                                  + string.Join(                                      ""'                                      Enumerable.Range(2' 20).Select(n => $"{n * 10'9};")                                  ) + "\n"                          )                  );
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,DealsOkWithObjectsContainingLongMultilineStrings,The following statement contains a magic number: var wallOfText =                  string.Join(                      ""'                      Enumerable.Range(0' 100)                          .Select(                              line =>                                  $"line {line}:".PadRight(10)                                  + string.Join(                                      ""'                                      Enumerable.Range(2' 20).Select(n => $"{n * 10'9};")                                  ) + "\n"                          )                  );
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,DealsOkWithObjectsContainingLongMultilineStrings,The following statement contains a magic number: var wallOfText =                  string.Join(                      ""'                      Enumerable.Range(0' 100)                          .Select(                              line =>                                  $"line {line}:".PadRight(10)                                  + string.Join(                                      ""'                                      Enumerable.Range(2' 20).Select(n => $"{n * 10'9};")                                  ) + "\n"                          )                  );
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,DealsOkWithObjectsContainingLongMultilineStrings,The following statement contains a magic number: var wallOfText =                  string.Join(                      ""'                      Enumerable.Range(0' 100)                          .Select(                              line =>                                  $"line {line}:".PadRight(10)                                  + string.Join(                                      ""'                                      Enumerable.Range(2' 20).Select(n => $"{n * 10'9};")                                  ) + "\n"                          )                  );
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,DealsOkWithObjectsContainingLongMultilineStrings,The following statement contains a magic number: var wallOfText =                  string.Join(                      ""'                      Enumerable.Range(0' 100)                          .Select(                              line =>                                  $"line {line}:".PadRight(10)                                  + string.Join(                                      ""'                                      Enumerable.Range(2' 20).Select(n => $"{n * 10'9};")                                  ) + "\n"                          )                  );
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,DealsOkWithObjectsContainingLongMultilineStrings,The following statement contains a magic number: ApprovalTest.Verify(                  AnnotateAsAssertion(                      () => new {                          A_wall_of_text = wallOfText'                          A_short_string = "short"'                          A_long_enumerable = Enumerable.Range(0' 1000)                      }                  ));
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,MessyStructureElidesNeatly,The following statement contains a magic number: ApprovalTest.Verify(                  AnnotateAsAssertion(                      // ReSharper disable once RedundantLogicalConditionalExpressionOperand                      () => hmm[1] == hmm[2] || hmm[4] == hmm[int.Parse(hmm[8].ToString())] || false                  ));
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,MessyStructureElidesNeatly,The following statement contains a magic number: ApprovalTest.Verify(                  AnnotateAsAssertion(                      // ReSharper disable once RedundantLogicalConditionalExpressionOperand                      () => hmm[1] == hmm[2] || hmm[4] == hmm[int.Parse(hmm[8].ToString())] || false                  ));
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,MessyStructureElidesNeatly,The following statement contains a magic number: ApprovalTest.Verify(                  AnnotateAsAssertion(                      // ReSharper disable once RedundantLogicalConditionalExpressionOperand                      () => hmm[1] == hmm[2] || hmm[4] == hmm[int.Parse(hmm[8].ToString())] || false                  ));
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,MethodCallsAndArrayLiterals,The following statement contains a magic number: var a = 2;
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,MethodCallsAndArrayLiterals,The following statement contains a magic number: var b = 5;
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,MethodCallsAndArrayLiterals,The following statement contains a magic number: ApprovalTest.Verify(AnnotateAsAssertion(() => Math.Max(a' b) > new[] { 3' 8' 13' 4 }.Average()));
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,MethodCallsAndArrayLiterals,The following statement contains a magic number: ApprovalTest.Verify(AnnotateAsAssertion(() => Math.Max(a' b) > new[] { 3' 8' 13' 4 }.Average()));
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,MethodCallsAndArrayLiterals,The following statement contains a magic number: ApprovalTest.Verify(AnnotateAsAssertion(() => Math.Max(a' b) > new[] { 3' 8' 13' 4 }.Average()));
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,MethodCallsAndArrayLiterals,The following statement contains a magic number: ApprovalTest.Verify(AnnotateAsAssertion(() => Math.Max(a' b) > new[] { 3' 8' 13' 4 }.Average()));
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,NestedArrayAccess,The following statement contains a magic number: var a = 2;
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,NestedArrayAccess,The following statement contains a magic number: var b = 5;
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,NestedArrayAccess,The following statement contains a magic number: var nums = Enumerable.Range(10' 10).ToArray();
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,NestedArrayAccess,The following statement contains a magic number: var nums = Enumerable.Range(10' 10).ToArray();
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,NestedArrayAccess,The following statement contains a magic number: ApprovalTest.Verify(AnnotateAsAssertion(() => nums[a + b] < 7));
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,NestedArrayAccessWithOuterAnd,The following statement contains a magic number: var a = 2;
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,NestedArrayAccessWithOuterAnd,The following statement contains a magic number: var b = 5;
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,NestedArrayAccessWithOuterAnd,The following statement contains a magic number: var nums = Enumerable.Range(10' 10).ToArray();
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,NestedArrayAccessWithOuterAnd,The following statement contains a magic number: var nums = Enumerable.Range(10' 10).ToArray();
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,NestedArrayAccessWithOuterAnd,The following statement contains a magic number: ApprovalTest.Verify(AnnotateAsAssertion(() => a < b && nums[a + b] < 7 && b < 10));
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,NestedArrayAccessWithOuterAnd,The following statement contains a magic number: ApprovalTest.Verify(AnnotateAsAssertion(() => a < b && nums[a + b] < 7 && b < 10));
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,NodesThatAreUndescribableAreNotDescribed,The following statement contains a magic number: var list = new List<int> { 1' 2' 3' 3' 2' 1 };
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,NodesThatAreUndescribableAreNotDescribed,The following statement contains a magic number: var list = new List<int> { 1' 2' 3' 3' 2' 1 };
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,NodesThatAreUndescribableAreNotDescribed,The following statement contains a magic number: var list = new List<int> { 1' 2' 3' 3' 2' 1 };
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,NodesThatAreUndescribableAreNotDescribed,The following statement contains a magic number: var list = new List<int> { 1' 2' 3' 3' 2' 1 };
Magic Number,ExpressionToCodeTest,SubExpressionPerLineCodeAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\SubExpressionPerLineCodeAnnotatorTest.cs,NodesThatAreUndescribableAreNotDescribed,The following statement contains a magic number: ApprovalTest.Verify(AnnotateAsAssertion(() => list.Select(e => e + 1).Count() == 5));
Magic Number,ExpressionToCodeTest,ToValuedCodeTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ToValuedCodeTest.cs,GenericMethodCall,The following statement contains a magic number: var actual = ExpressionToCode.ToValuedCode(() => TheGenericMethod<int>(2));
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,AplusBapproved,The following statement contains a magic number: var a = 2;
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,AplusBapproved,The following statement contains a magic number: var b = 5;
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,AplusBapproved,The following statement contains a magic number: ApprovalTest.Verify(AnnotateAsAssertion(() => a + b > 3));
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,Binary_expressions_with_nesting,The following statement contains a magic number: var a = 2;
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,Binary_expressions_with_nesting,The following statement contains a magic number: var b = 5;
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,Binary_expressions_with_nesting,The following statement contains a magic number: var c = 3.45;
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,Binary_expressions_with_nesting,The following statement contains a magic number: ApprovalTest.Verify(AnnotateAsAssertion(() => a < b && (c > -a || c > b) && b < 10));
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,DealsOkWithEnumerablesOfAnonymousObjects,The following statement contains a magic number: var foo = new {                  A_long_string = string.Join("##"' Enumerable.Range(0' 100)) + "suffix"'                  A_short_string = "short"'                  A_long_enumerable = Enumerable.Range(0' 1000)              };
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,DealsOkWithEnumerablesOfAnonymousObjects,The following statement contains a magic number: var foo = new {                  A_long_string = string.Join("##"' Enumerable.Range(0' 100)) + "suffix"'                  A_short_string = "short"'                  A_long_enumerable = Enumerable.Range(0' 1000)              };
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,DealsOkWithObjectsContainingLongMultilineStrings,The following statement contains a magic number: var wallOfText =                  string.Join(                      ""'                      Enumerable.Range(0' 100)                          .Select(                              line =>                                  $"line {line}:".PadRight(10)                                  + string.Join(                                      ""'                                      Enumerable.Range(2' 20).Select(n => $"{n * 10'9};")                                  ) + "\n"                          )                  );
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,DealsOkWithObjectsContainingLongMultilineStrings,The following statement contains a magic number: var wallOfText =                  string.Join(                      ""'                      Enumerable.Range(0' 100)                          .Select(                              line =>                                  $"line {line}:".PadRight(10)                                  + string.Join(                                      ""'                                      Enumerable.Range(2' 20).Select(n => $"{n * 10'9};")                                  ) + "\n"                          )                  );
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,DealsOkWithObjectsContainingLongMultilineStrings,The following statement contains a magic number: var wallOfText =                  string.Join(                      ""'                      Enumerable.Range(0' 100)                          .Select(                              line =>                                  $"line {line}:".PadRight(10)                                  + string.Join(                                      ""'                                      Enumerable.Range(2' 20).Select(n => $"{n * 10'9};")                                  ) + "\n"                          )                  );
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,DealsOkWithObjectsContainingLongMultilineStrings,The following statement contains a magic number: var wallOfText =                  string.Join(                      ""'                      Enumerable.Range(0' 100)                          .Select(                              line =>                                  $"line {line}:".PadRight(10)                                  + string.Join(                                      ""'                                      Enumerable.Range(2' 20).Select(n => $"{n * 10'9};")                                  ) + "\n"                          )                  );
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,DealsOkWithObjectsContainingLongMultilineStrings,The following statement contains a magic number: var wallOfText =                  string.Join(                      ""'                      Enumerable.Range(0' 100)                          .Select(                              line =>                                  $"line {line}:".PadRight(10)                                  + string.Join(                                      ""'                                      Enumerable.Range(2' 20).Select(n => $"{n * 10'9};")                                  ) + "\n"                          )                  );
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,DealsOkWithObjectsContainingLongMultilineStrings,The following statement contains a magic number: var wallOfText =                  string.Join(                      ""'                      Enumerable.Range(0' 100)                          .Select(                              line =>                                  $"line {line}:".PadRight(10)                                  + string.Join(                                      ""'                                      Enumerable.Range(2' 20).Select(n => $"{n * 10'9};")                                  ) + "\n"                          )                  );
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,DealsOkWithObjectsContainingLongMultilineStrings,The following statement contains a magic number: ApprovalTest.Verify(                  AnnotateAsAssertion(                      () => new {                          A_wall_of_text = wallOfText'                          A_short_string = "short"'                          A_long_enumerable = Enumerable.Range(0' 1000)                      }                  ));
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,MessyStructureElidesNeatly,The following statement contains a magic number: ApprovalTest.Verify(                  AnnotateAsAssertion(                      // ReSharper disable once RedundantLogicalConditionalExpressionOperand                      () => hmm[1] == hmm[2] || hmm[4] == hmm[int.Parse(hmm[8].ToString())] || false                  ));
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,MessyStructureElidesNeatly,The following statement contains a magic number: ApprovalTest.Verify(                  AnnotateAsAssertion(                      // ReSharper disable once RedundantLogicalConditionalExpressionOperand                      () => hmm[1] == hmm[2] || hmm[4] == hmm[int.Parse(hmm[8].ToString())] || false                  ));
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,MessyStructureElidesNeatly,The following statement contains a magic number: ApprovalTest.Verify(                  AnnotateAsAssertion(                      // ReSharper disable once RedundantLogicalConditionalExpressionOperand                      () => hmm[1] == hmm[2] || hmm[4] == hmm[int.Parse(hmm[8].ToString())] || false                  ));
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,MethodCallsAndArrayLiterals,The following statement contains a magic number: var a = 2;
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,MethodCallsAndArrayLiterals,The following statement contains a magic number: var b = 5;
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,MethodCallsAndArrayLiterals,The following statement contains a magic number: ApprovalTest.Verify(AnnotateAsAssertion(() => Math.Max(a' b) > new[] { 3' 8' 13' 4 }.Average()));
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,MethodCallsAndArrayLiterals,The following statement contains a magic number: ApprovalTest.Verify(AnnotateAsAssertion(() => Math.Max(a' b) > new[] { 3' 8' 13' 4 }.Average()));
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,MethodCallsAndArrayLiterals,The following statement contains a magic number: ApprovalTest.Verify(AnnotateAsAssertion(() => Math.Max(a' b) > new[] { 3' 8' 13' 4 }.Average()));
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,MethodCallsAndArrayLiterals,The following statement contains a magic number: ApprovalTest.Verify(AnnotateAsAssertion(() => Math.Max(a' b) > new[] { 3' 8' 13' 4 }.Average()));
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,NestedArrayAccess,The following statement contains a magic number: var a = 2;
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,NestedArrayAccess,The following statement contains a magic number: var b = 5;
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,NestedArrayAccess,The following statement contains a magic number: var nums = Enumerable.Range(10' 10).ToArray();
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,NestedArrayAccess,The following statement contains a magic number: var nums = Enumerable.Range(10' 10).ToArray();
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,NestedArrayAccess,The following statement contains a magic number: ApprovalTest.Verify(AnnotateAsAssertion(() => nums[a + b] < 7));
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,NestedArrayAccessWithOuterAnd,The following statement contains a magic number: var a = 2;
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,NestedArrayAccessWithOuterAnd,The following statement contains a magic number: var b = 5;
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,NestedArrayAccessWithOuterAnd,The following statement contains a magic number: var nums = Enumerable.Range(10' 10).ToArray();
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,NestedArrayAccessWithOuterAnd,The following statement contains a magic number: var nums = Enumerable.Range(10' 10).ToArray();
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,NestedArrayAccessWithOuterAnd,The following statement contains a magic number: ApprovalTest.Verify(AnnotateAsAssertion(() => a < b && nums[a + b] < 7 && b < 10));
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,NestedArrayAccessWithOuterAnd,The following statement contains a magic number: ApprovalTest.Verify(AnnotateAsAssertion(() => a < b && nums[a + b] < 7 && b < 10));
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,NodesThatAreUndescribableAreNotDescribed,The following statement contains a magic number: var list = new List<int> { 1' 2' 3' 3' 2' 1 };
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,NodesThatAreUndescribableAreNotDescribed,The following statement contains a magic number: var list = new List<int> { 1' 2' 3' 3' 2' 1 };
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,NodesThatAreUndescribableAreNotDescribed,The following statement contains a magic number: var list = new List<int> { 1' 2' 3' 3' 2' 1 };
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,NodesThatAreUndescribableAreNotDescribed,The following statement contains a magic number: var list = new List<int> { 1' 2' 3' 3' 2' 1 };
Magic Number,ExpressionToCodeTest,ValueOnStalksAnnotatorTest,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueOnStalksAnnotatorTest.cs,NodesThatAreUndescribableAreNotDescribed,The following statement contains a magic number: ApprovalTest.Verify(AnnotateAsAssertion(() => list.Select(e => e + 1).Count() == 5));
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ExpressionWithValueTupleEqualsCanCompile,The following statement contains a magic number: var tupleA = (1' 3);
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,FastExpressionCompileValueTupleEqualsWorks,The following statement contains a magic number: var tuple = (1' 3);
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,AssertingOnValueTupleEqualsWorks,The following statement contains a magic number: var tuple = (1' 3);
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ToCSharpFriendlyTypeNameSupportsTuples,The following statement contains a magic number: var actual = (1' "2"' new[] { 1' 2' 3 });
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ToCSharpFriendlyTypeNameSupportsTuples,The following statement contains a magic number: var actual = (1' "2"' new[] { 1' 2' 3 });
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ToCSharpFriendlyTypeNameSupportsLooongTuples,The following statement contains a magic number: var actual = (1' 2' 3' 4' 5' 6' 7' 8' 9' 10);
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ToCSharpFriendlyTypeNameSupportsLooongTuples,The following statement contains a magic number: var actual = (1' 2' 3' 4' 5' 6' 7' 8' 9' 10);
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ToCSharpFriendlyTypeNameSupportsLooongTuples,The following statement contains a magic number: var actual = (1' 2' 3' 4' 5' 6' 7' 8' 9' 10);
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ToCSharpFriendlyTypeNameSupportsLooongTuples,The following statement contains a magic number: var actual = (1' 2' 3' 4' 5' 6' 7' 8' 9' 10);
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ToCSharpFriendlyTypeNameSupportsLooongTuples,The following statement contains a magic number: var actual = (1' 2' 3' 4' 5' 6' 7' 8' 9' 10);
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ToCSharpFriendlyTypeNameSupportsLooongTuples,The following statement contains a magic number: var actual = (1' 2' 3' 4' 5' 6' 7' 8' 9' 10);
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ToCSharpFriendlyTypeNameSupportsLooongTuples,The following statement contains a magic number: var actual = (1' 2' 3' 4' 5' 6' 7' 8' 9' 10);
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ToCSharpFriendlyTypeNameSupportsLooongTuples,The following statement contains a magic number: var actual = (1' 2' 3' 4' 5' 6' 7' 8' 9' 10);
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ToCSharpFriendlyTypeNameSupportsLooongTuples,The following statement contains a magic number: var actual = (1' 2' 3' 4' 5' 6' 7' 8' 9' 10);
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ToCSharpFriendlyTypeNameSupportsNestedTuples,The following statement contains a magic number: var actual = (1' 2' ((3' 4)' 5)' 6' 7' 8);
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ToCSharpFriendlyTypeNameSupportsNestedTuples,The following statement contains a magic number: var actual = (1' 2' ((3' 4)' 5)' 6' 7' 8);
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ToCSharpFriendlyTypeNameSupportsNestedTuples,The following statement contains a magic number: var actual = (1' 2' ((3' 4)' 5)' 6' 7' 8);
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ToCSharpFriendlyTypeNameSupportsNestedTuples,The following statement contains a magic number: var actual = (1' 2' ((3' 4)' 5)' 6' 7' 8);
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ToCSharpFriendlyTypeNameSupportsNestedTuples,The following statement contains a magic number: var actual = (1' 2' ((3' 4)' 5)' 6' 7' 8);
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ToCSharpFriendlyTypeNameSupportsNestedTuples,The following statement contains a magic number: var actual = (1' 2' ((3' 4)' 5)' 6' 7' 8);
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ToCSharpFriendlyTypeNameSupportsNestedTuples,The following statement contains a magic number: var actual = (1' 2' ((3' 4)' 5)' 6' 7' 8);
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ComplexObjectToPseudoCodeSupportsTuples,The following statement contains a magic number: var actual = (1' "2"' new[] { 1' 2' 3 });
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ComplexObjectToPseudoCodeSupportsTuples,The following statement contains a magic number: var actual = (1' "2"' new[] { 1' 2' 3 });
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ComplexObjectToPseudoCodeSupportsComplexTuples,The following statement contains a magic number: var actual = (1' ("2"' new[] { "2b" })' new[] { 3 }' 4' default(string)' 6' 7' 8' 9);
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ComplexObjectToPseudoCodeSupportsComplexTuples,The following statement contains a magic number: var actual = (1' ("2"' new[] { "2b" })' new[] { 3 }' 4' default(string)' 6' 7' 8' 9);
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ComplexObjectToPseudoCodeSupportsComplexTuples,The following statement contains a magic number: var actual = (1' ("2"' new[] { "2b" })' new[] { 3 }' 4' default(string)' 6' 7' 8' 9);
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ComplexObjectToPseudoCodeSupportsComplexTuples,The following statement contains a magic number: var actual = (1' ("2"' new[] { "2b" })' new[] { 3 }' 4' default(string)' 6' 7' 8' 9);
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ComplexObjectToPseudoCodeSupportsComplexTuples,The following statement contains a magic number: var actual = (1' ("2"' new[] { "2b" })' new[] { 3 }' 4' default(string)' 6' 7' 8' 9);
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ComplexObjectToPseudoCodeSupportsComplexTuples,The following statement contains a magic number: var actual = (1' ("2"' new[] { "2b" })' new[] { 3 }' 4' default(string)' 6' 7' 8' 9);
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ComplexObjectToPseudoCodeSupportsTuplesWithTrailingTuples,The following statement contains a magic number: var actual = (1' 2' 3' 4' 5' 6' 7' (8' 9' 10));
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ComplexObjectToPseudoCodeSupportsTuplesWithTrailingTuples,The following statement contains a magic number: var actual = (1' 2' 3' 4' 5' 6' 7' (8' 9' 10));
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ComplexObjectToPseudoCodeSupportsTuplesWithTrailingTuples,The following statement contains a magic number: var actual = (1' 2' 3' 4' 5' 6' 7' (8' 9' 10));
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ComplexObjectToPseudoCodeSupportsTuplesWithTrailingTuples,The following statement contains a magic number: var actual = (1' 2' 3' 4' 5' 6' 7' (8' 9' 10));
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ComplexObjectToPseudoCodeSupportsTuplesWithTrailingTuples,The following statement contains a magic number: var actual = (1' 2' 3' 4' 5' 6' 7' (8' 9' 10));
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ComplexObjectToPseudoCodeSupportsTuplesWithTrailingTuples,The following statement contains a magic number: var actual = (1' 2' 3' 4' 5' 6' 7' (8' 9' 10));
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ComplexObjectToPseudoCodeSupportsTuplesWithTrailingTuples,The following statement contains a magic number: var actual = (1' 2' 3' 4' 5' 6' 7' (8' 9' 10));
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ComplexObjectToPseudoCodeSupportsTuplesWithTrailingTuples,The following statement contains a magic number: var actual = (1' 2' 3' 4' 5' 6' 7' (8' 9' 10));
Magic Number,ExpressionToCodeTest,ValueTupleTests,D:\research\architectureSmells\repos\EamonNerbonne_ExpressionToCode\ExpressionToCodeTest\ValueTupleTests.cs,ComplexObjectToPseudoCodeSupportsTuplesWithTrailingTuples,The following statement contains a magic number: var actual = (1' 2' 3' 4' 5' 6' 7' (8' 9' 10));
