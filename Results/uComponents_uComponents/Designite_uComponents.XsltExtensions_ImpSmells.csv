Implementation smell,Namespace,Class,File,Method,Description
Complex Method,uComponents.XsltExtensions,Cms,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Cms-Helper.cs,AppendContentType,Cyclomatic complexity of the method is 8
Complex Method,uComponents.XsltExtensions,Cms,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Cms-Helper.cs,AppendDocumentType,Cyclomatic complexity of the method is 11
Complex Method,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,GetPrettyDate,Cyclomatic complexity of the method is 13
Complex Method,uComponents.XsltExtensions,Urls,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Urls.cs,GuessNiceUrl,Cyclomatic complexity of the method is 11
Long Parameter List,uComponents.XsltExtensions,Cms,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Cms-Helper.cs,AppendContentType,The method has 5 parameters. Parameters: xd' elementName' contentType' includeTabs' includePropertyTypes
Long Parameter List,uComponents.XsltExtensions,Cms,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Cms-Helper.cs,AppendDocumentType,The method has 5 parameters. Parameters: xd' docType' includeTabs' includePropertyTypes' includeAllowedTemplates
Long Parameter List,uComponents.XsltExtensions,Email,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Email.cs,SendMail,The method has 6 parameters. Parameters: from' to' subject' body' isHtml' useSSL
Long Parameter List,uComponents.XsltExtensions,Strings,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Strings.cs,Coalesce,The method has 5 parameters. Parameters: arg1' arg2' arg3' arg4' arg5
Long Parameter List,uComponents.XsltExtensions,Strings,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Strings.cs,Format,The method has 5 parameters. Parameters: format' arg1' arg2' arg3' arg4
Long Parameter List,uComponents.XsltExtensions,Strings,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Strings.cs,Format,The method has 6 parameters. Parameters: format' arg1' arg2' arg3' arg4' arg5
Long Statement,uComponents.XsltExtensions,Cms,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Cms-Helper.cs,AppendContentType,The length of the statement  "						nodePropertyType.Attributes.Append(XmlHelper.AddAttribute(xd' "dataTypeId"' propertyType.DataTypeDefinition.Id.ToString())); " is 124.
Long Statement,uComponents.XsltExtensions,Cms,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Cms-Helper.cs,AppendContentType,The length of the statement  "						nodePropertyType.Attributes.Append(XmlHelper.AddAttribute(xd' "dataTypeGuid"' propertyType.DataTypeDefinition.UniqueId.ToString())); " is 132.
Long Statement,uComponents.XsltExtensions,Cms,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Cms-Helper.cs,AppendDocumentType,The length of the statement  "						nodeTemplate.Attributes.Append(XmlHelper.AddAttribute(xd' "isDefaultTemplate"' (template.Id == docType.DefaultTemplate).ToString())); " is 133.
Long Statement,uComponents.XsltExtensions,Email,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Email.cs,IsValidEmail,The length of the statement  "			var pattern = @"^(?!\.)(""([^""\r\\]|\\[""\r\\])*""|([-a-z0-9!#$%&'*+/=?^_`{|}~]|(?<!\.)\.)*)(?<!\.)@[a-z0-9][\w\.-]*[a-z0-9]\.[a-z][a-z\.]*[a-z]$"; " is 148.
Long Statement,uComponents.XsltExtensions,Random,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Random.cs,GenerateRandomString,The length of the statement  "			var evaluator = new MatchEvaluator(delegate(Match m) { return characters[random.Next(characters.Length + 1)].ToString(); }); " is 124.
Long Statement,uComponents.XsltExtensions,Request,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Request.cs,ServerVariables,The length of the statement  "			return ConvertNameValueCollectionToXPathNodeIterator("Request.ServerVariables"' HttpContext.Current.Request.ServerVariables); " is 125.
Long Statement,uComponents.XsltExtensions,Request,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Request.cs,Cookies,The length of the statement  "				xd.DocumentElement.AppendChild(XmlHelper.AddTextNode(xd' "error"' string.Concat("The Request.Cookies object is empty."))); " is 122.
Long Statement,uComponents.XsltExtensions,Request,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Request.cs,ConvertNameValueCollectionToXPathNodeIterator,The length of the statement  "				xd.DocumentElement.AppendChild(XmlHelper.AddTextNode(xd' "error"' string.Concat("The "' rootName' " object is empty."))); " is 121.
Long Statement,uComponents.XsltExtensions,Search,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Search.cs,AdvancedSearch,The length of the statement  "					//        criteria = criteria.ParentId(parentId).Compile(); // 'parentID' isn't currently indexed by Examine/Lucene (only stored). " is 130.
Long Statement,uComponents.XsltExtensions,Search,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Search.cs,AdvancedSearch,The length of the statement  "					//    if (partsDate.Length > 2 && DateTime.TryParse(partsDate[1]' out startDate) && DateTime.TryParse(partsDate[2]' out endDate)) " is 129.
Long Statement,uComponents.XsltExtensions,Search,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Search.cs,GetResultsAsXml,The length of the statement  "			var attributes = new List<string>() { "id"' "nodeName"' "updateDate"' "writerName"' "path"' "nodeTypeAlias"' "parentID"' "loginName"' "email" }; " is 144.
Long Statement,uComponents.XsltExtensions,Urls,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Urls.cs,GuessNiceUrl,The length of the statement  "					nodeName = node.GetProperty(URLNAME) != null && !string.IsNullOrEmpty(node.GetProperty(URLNAME).Value) ? node.GetProperty(URLNAME).Value : node.Name; " is 149.
Long Statement,uComponents.XsltExtensions,Urls,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Urls.cs,GuessNiceUrl,The length of the statement  "					nodeName = doc.getProperty(URLNAME) != null && doc.getProperty(URLNAME).Value != null && !string.IsNullOrEmpty(doc.getProperty(URLNAME).Value.ToString()) ? doc.getProperty(URLNAME).Value.ToString() : doc.Text; " is 209.
Long Statement,uComponents.XsltExtensions,Urls,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Urls.cs,GuessNiceUrl,The length of the statement  "						string parentUrl = nodeParentId > 0 && !(level == 2 && GlobalSettings.HideTopLevelNodeFromPath) ? parentNode.NiceUrl : string.Empty; " is 132.
Long Statement,uComponents.XsltExtensions,Xml,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Xml.cs,GetXmlDocument,The length of the statement  "				HttpContext.Current.Cache.Insert(cacheKey' xmlDocument' new CacheDependency(filename)' DateTime.Now.Add(new TimeSpan(0' 0' cacheInSeconds))' TimeSpan.Zero' CacheItemPriority.Low' null); " is 185.
Long Statement,uComponents.XsltExtensions,Xml,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Xml.cs,GetXmlDocumentByUrl,The length of the statement  "				document.LoadXml(string.Format("<error url=\"{0}\">{1}</error>"' HttpContext.Current.Server.HtmlEncode(url)' exception)); " is 121.
Long Statement,uComponents.XsltExtensions,Xml,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Xml.cs,GetXmlDocumentByUrl,The length of the statement  "				HttpContext.Current.Cache.Insert(cacheKey' xmlDocumentByUrl' null' DateTime.Now.Add(new TimeSpan(0' 0' cacheInSeconds))' TimeSpan.Zero' CacheItemPriority.Low' null); " is 165.
Complex Conditional,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,ParseExact,The conditional expression  "!string.IsNullOrEmpty(date) &&  				!string.IsNullOrEmpty(inputFormat) &&  				!string.IsNullOrEmpty(outputFormat) &&  				DateTime.TryParseExact(date' inputFormat' CultureInfo.InvariantCulture' DateTimeStyles.None' out result)"  is complex.
Empty Catch Block,uComponents.XsltExtensions,Cms,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Cms-Helper.cs,GetTemplateAlias,The method has an empty catch block.
Empty Catch Block,uComponents.XsltExtensions,Cms,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Cms-Helper.cs,GetUniqueId,The method has an empty catch block.
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,GetPrettyDate,The following statement contains a magic number: if (DateTime.TryParse(date' out d))  			{  				// 1. Get time span elapsed since the date.  				var s = DateTime.Now.Subtract(d);    				// 2. Get total number of days elapsed.  				var dayDiff = (int)s.TotalDays;    				// 3. Get total number of seconds elapsed.  				var secDiff = (int)s.TotalSeconds;    				// 4. Don't allow out of range values.  				if (dayDiff < 0 || dayDiff >= 31)  				{  					return FormatDateTime(date' format); // d.ToString(format);  				}    				// 5. Handle same-day times.  				if (dayDiff == 0)  				{  					// A. Less than one minute ago.  					if (secDiff < 60)  					{  						return "just now";  					}    					// B. Less than 2 minutes ago.  					if (secDiff < 120)  					{  						return "1 minute ago";  					}    					// C.Less than one hour ago.  					if (secDiff < 3600)  					{  						return string.Format("{0} minutes ago"' Math.Floor((double)secDiff / 60));  					}    					// D. Less than 2 hours ago.  					if (secDiff < 7200)  					{  						return "1 hour ago";  					}    					// E. Less than one day ago.  					if (secDiff < 86400)  					{  						return string.Format("{0} hours ago"' Math.Floor((double)secDiff / 3600));  					}  				}    				// 6. Handle previous days.  				if (dayDiff == 1)  				{  					return "yesterday";  				}    				if (dayDiff < 7)  				{  					return string.Format("{0} days ago"' dayDiff);  				}    				if (dayDiff < 14)  				{  					return "1 week ago";  				}    				if (dayDiff < 31)  				{  					return string.Format("{0} weeks ago"' Math.Ceiling((double)dayDiff / 7));  				}  			}
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,GetPrettyDate,The following statement contains a magic number: if (DateTime.TryParse(date' out d))  			{  				// 1. Get time span elapsed since the date.  				var s = DateTime.Now.Subtract(d);    				// 2. Get total number of days elapsed.  				var dayDiff = (int)s.TotalDays;    				// 3. Get total number of seconds elapsed.  				var secDiff = (int)s.TotalSeconds;    				// 4. Don't allow out of range values.  				if (dayDiff < 0 || dayDiff >= 31)  				{  					return FormatDateTime(date' format); // d.ToString(format);  				}    				// 5. Handle same-day times.  				if (dayDiff == 0)  				{  					// A. Less than one minute ago.  					if (secDiff < 60)  					{  						return "just now";  					}    					// B. Less than 2 minutes ago.  					if (secDiff < 120)  					{  						return "1 minute ago";  					}    					// C.Less than one hour ago.  					if (secDiff < 3600)  					{  						return string.Format("{0} minutes ago"' Math.Floor((double)secDiff / 60));  					}    					// D. Less than 2 hours ago.  					if (secDiff < 7200)  					{  						return "1 hour ago";  					}    					// E. Less than one day ago.  					if (secDiff < 86400)  					{  						return string.Format("{0} hours ago"' Math.Floor((double)secDiff / 3600));  					}  				}    				// 6. Handle previous days.  				if (dayDiff == 1)  				{  					return "yesterday";  				}    				if (dayDiff < 7)  				{  					return string.Format("{0} days ago"' dayDiff);  				}    				if (dayDiff < 14)  				{  					return "1 week ago";  				}    				if (dayDiff < 31)  				{  					return string.Format("{0} weeks ago"' Math.Ceiling((double)dayDiff / 7));  				}  			}
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,GetPrettyDate,The following statement contains a magic number: if (DateTime.TryParse(date' out d))  			{  				// 1. Get time span elapsed since the date.  				var s = DateTime.Now.Subtract(d);    				// 2. Get total number of days elapsed.  				var dayDiff = (int)s.TotalDays;    				// 3. Get total number of seconds elapsed.  				var secDiff = (int)s.TotalSeconds;    				// 4. Don't allow out of range values.  				if (dayDiff < 0 || dayDiff >= 31)  				{  					return FormatDateTime(date' format); // d.ToString(format);  				}    				// 5. Handle same-day times.  				if (dayDiff == 0)  				{  					// A. Less than one minute ago.  					if (secDiff < 60)  					{  						return "just now";  					}    					// B. Less than 2 minutes ago.  					if (secDiff < 120)  					{  						return "1 minute ago";  					}    					// C.Less than one hour ago.  					if (secDiff < 3600)  					{  						return string.Format("{0} minutes ago"' Math.Floor((double)secDiff / 60));  					}    					// D. Less than 2 hours ago.  					if (secDiff < 7200)  					{  						return "1 hour ago";  					}    					// E. Less than one day ago.  					if (secDiff < 86400)  					{  						return string.Format("{0} hours ago"' Math.Floor((double)secDiff / 3600));  					}  				}    				// 6. Handle previous days.  				if (dayDiff == 1)  				{  					return "yesterday";  				}    				if (dayDiff < 7)  				{  					return string.Format("{0} days ago"' dayDiff);  				}    				if (dayDiff < 14)  				{  					return "1 week ago";  				}    				if (dayDiff < 31)  				{  					return string.Format("{0} weeks ago"' Math.Ceiling((double)dayDiff / 7));  				}  			}
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,GetPrettyDate,The following statement contains a magic number: if (DateTime.TryParse(date' out d))  			{  				// 1. Get time span elapsed since the date.  				var s = DateTime.Now.Subtract(d);    				// 2. Get total number of days elapsed.  				var dayDiff = (int)s.TotalDays;    				// 3. Get total number of seconds elapsed.  				var secDiff = (int)s.TotalSeconds;    				// 4. Don't allow out of range values.  				if (dayDiff < 0 || dayDiff >= 31)  				{  					return FormatDateTime(date' format); // d.ToString(format);  				}    				// 5. Handle same-day times.  				if (dayDiff == 0)  				{  					// A. Less than one minute ago.  					if (secDiff < 60)  					{  						return "just now";  					}    					// B. Less than 2 minutes ago.  					if (secDiff < 120)  					{  						return "1 minute ago";  					}    					// C.Less than one hour ago.  					if (secDiff < 3600)  					{  						return string.Format("{0} minutes ago"' Math.Floor((double)secDiff / 60));  					}    					// D. Less than 2 hours ago.  					if (secDiff < 7200)  					{  						return "1 hour ago";  					}    					// E. Less than one day ago.  					if (secDiff < 86400)  					{  						return string.Format("{0} hours ago"' Math.Floor((double)secDiff / 3600));  					}  				}    				// 6. Handle previous days.  				if (dayDiff == 1)  				{  					return "yesterday";  				}    				if (dayDiff < 7)  				{  					return string.Format("{0} days ago"' dayDiff);  				}    				if (dayDiff < 14)  				{  					return "1 week ago";  				}    				if (dayDiff < 31)  				{  					return string.Format("{0} weeks ago"' Math.Ceiling((double)dayDiff / 7));  				}  			}
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,GetPrettyDate,The following statement contains a magic number: if (DateTime.TryParse(date' out d))  			{  				// 1. Get time span elapsed since the date.  				var s = DateTime.Now.Subtract(d);    				// 2. Get total number of days elapsed.  				var dayDiff = (int)s.TotalDays;    				// 3. Get total number of seconds elapsed.  				var secDiff = (int)s.TotalSeconds;    				// 4. Don't allow out of range values.  				if (dayDiff < 0 || dayDiff >= 31)  				{  					return FormatDateTime(date' format); // d.ToString(format);  				}    				// 5. Handle same-day times.  				if (dayDiff == 0)  				{  					// A. Less than one minute ago.  					if (secDiff < 60)  					{  						return "just now";  					}    					// B. Less than 2 minutes ago.  					if (secDiff < 120)  					{  						return "1 minute ago";  					}    					// C.Less than one hour ago.  					if (secDiff < 3600)  					{  						return string.Format("{0} minutes ago"' Math.Floor((double)secDiff / 60));  					}    					// D. Less than 2 hours ago.  					if (secDiff < 7200)  					{  						return "1 hour ago";  					}    					// E. Less than one day ago.  					if (secDiff < 86400)  					{  						return string.Format("{0} hours ago"' Math.Floor((double)secDiff / 3600));  					}  				}    				// 6. Handle previous days.  				if (dayDiff == 1)  				{  					return "yesterday";  				}    				if (dayDiff < 7)  				{  					return string.Format("{0} days ago"' dayDiff);  				}    				if (dayDiff < 14)  				{  					return "1 week ago";  				}    				if (dayDiff < 31)  				{  					return string.Format("{0} weeks ago"' Math.Ceiling((double)dayDiff / 7));  				}  			}
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,GetPrettyDate,The following statement contains a magic number: if (DateTime.TryParse(date' out d))  			{  				// 1. Get time span elapsed since the date.  				var s = DateTime.Now.Subtract(d);    				// 2. Get total number of days elapsed.  				var dayDiff = (int)s.TotalDays;    				// 3. Get total number of seconds elapsed.  				var secDiff = (int)s.TotalSeconds;    				// 4. Don't allow out of range values.  				if (dayDiff < 0 || dayDiff >= 31)  				{  					return FormatDateTime(date' format); // d.ToString(format);  				}    				// 5. Handle same-day times.  				if (dayDiff == 0)  				{  					// A. Less than one minute ago.  					if (secDiff < 60)  					{  						return "just now";  					}    					// B. Less than 2 minutes ago.  					if (secDiff < 120)  					{  						return "1 minute ago";  					}    					// C.Less than one hour ago.  					if (secDiff < 3600)  					{  						return string.Format("{0} minutes ago"' Math.Floor((double)secDiff / 60));  					}    					// D. Less than 2 hours ago.  					if (secDiff < 7200)  					{  						return "1 hour ago";  					}    					// E. Less than one day ago.  					if (secDiff < 86400)  					{  						return string.Format("{0} hours ago"' Math.Floor((double)secDiff / 3600));  					}  				}    				// 6. Handle previous days.  				if (dayDiff == 1)  				{  					return "yesterday";  				}    				if (dayDiff < 7)  				{  					return string.Format("{0} days ago"' dayDiff);  				}    				if (dayDiff < 14)  				{  					return "1 week ago";  				}    				if (dayDiff < 31)  				{  					return string.Format("{0} weeks ago"' Math.Ceiling((double)dayDiff / 7));  				}  			}
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,GetPrettyDate,The following statement contains a magic number: if (DateTime.TryParse(date' out d))  			{  				// 1. Get time span elapsed since the date.  				var s = DateTime.Now.Subtract(d);    				// 2. Get total number of days elapsed.  				var dayDiff = (int)s.TotalDays;    				// 3. Get total number of seconds elapsed.  				var secDiff = (int)s.TotalSeconds;    				// 4. Don't allow out of range values.  				if (dayDiff < 0 || dayDiff >= 31)  				{  					return FormatDateTime(date' format); // d.ToString(format);  				}    				// 5. Handle same-day times.  				if (dayDiff == 0)  				{  					// A. Less than one minute ago.  					if (secDiff < 60)  					{  						return "just now";  					}    					// B. Less than 2 minutes ago.  					if (secDiff < 120)  					{  						return "1 minute ago";  					}    					// C.Less than one hour ago.  					if (secDiff < 3600)  					{  						return string.Format("{0} minutes ago"' Math.Floor((double)secDiff / 60));  					}    					// D. Less than 2 hours ago.  					if (secDiff < 7200)  					{  						return "1 hour ago";  					}    					// E. Less than one day ago.  					if (secDiff < 86400)  					{  						return string.Format("{0} hours ago"' Math.Floor((double)secDiff / 3600));  					}  				}    				// 6. Handle previous days.  				if (dayDiff == 1)  				{  					return "yesterday";  				}    				if (dayDiff < 7)  				{  					return string.Format("{0} days ago"' dayDiff);  				}    				if (dayDiff < 14)  				{  					return "1 week ago";  				}    				if (dayDiff < 31)  				{  					return string.Format("{0} weeks ago"' Math.Ceiling((double)dayDiff / 7));  				}  			}
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,GetPrettyDate,The following statement contains a magic number: if (DateTime.TryParse(date' out d))  			{  				// 1. Get time span elapsed since the date.  				var s = DateTime.Now.Subtract(d);    				// 2. Get total number of days elapsed.  				var dayDiff = (int)s.TotalDays;    				// 3. Get total number of seconds elapsed.  				var secDiff = (int)s.TotalSeconds;    				// 4. Don't allow out of range values.  				if (dayDiff < 0 || dayDiff >= 31)  				{  					return FormatDateTime(date' format); // d.ToString(format);  				}    				// 5. Handle same-day times.  				if (dayDiff == 0)  				{  					// A. Less than one minute ago.  					if (secDiff < 60)  					{  						return "just now";  					}    					// B. Less than 2 minutes ago.  					if (secDiff < 120)  					{  						return "1 minute ago";  					}    					// C.Less than one hour ago.  					if (secDiff < 3600)  					{  						return string.Format("{0} minutes ago"' Math.Floor((double)secDiff / 60));  					}    					// D. Less than 2 hours ago.  					if (secDiff < 7200)  					{  						return "1 hour ago";  					}    					// E. Less than one day ago.  					if (secDiff < 86400)  					{  						return string.Format("{0} hours ago"' Math.Floor((double)secDiff / 3600));  					}  				}    				// 6. Handle previous days.  				if (dayDiff == 1)  				{  					return "yesterday";  				}    				if (dayDiff < 7)  				{  					return string.Format("{0} days ago"' dayDiff);  				}    				if (dayDiff < 14)  				{  					return "1 week ago";  				}    				if (dayDiff < 31)  				{  					return string.Format("{0} weeks ago"' Math.Ceiling((double)dayDiff / 7));  				}  			}
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,GetPrettyDate,The following statement contains a magic number: if (DateTime.TryParse(date' out d))  			{  				// 1. Get time span elapsed since the date.  				var s = DateTime.Now.Subtract(d);    				// 2. Get total number of days elapsed.  				var dayDiff = (int)s.TotalDays;    				// 3. Get total number of seconds elapsed.  				var secDiff = (int)s.TotalSeconds;    				// 4. Don't allow out of range values.  				if (dayDiff < 0 || dayDiff >= 31)  				{  					return FormatDateTime(date' format); // d.ToString(format);  				}    				// 5. Handle same-day times.  				if (dayDiff == 0)  				{  					// A. Less than one minute ago.  					if (secDiff < 60)  					{  						return "just now";  					}    					// B. Less than 2 minutes ago.  					if (secDiff < 120)  					{  						return "1 minute ago";  					}    					// C.Less than one hour ago.  					if (secDiff < 3600)  					{  						return string.Format("{0} minutes ago"' Math.Floor((double)secDiff / 60));  					}    					// D. Less than 2 hours ago.  					if (secDiff < 7200)  					{  						return "1 hour ago";  					}    					// E. Less than one day ago.  					if (secDiff < 86400)  					{  						return string.Format("{0} hours ago"' Math.Floor((double)secDiff / 3600));  					}  				}    				// 6. Handle previous days.  				if (dayDiff == 1)  				{  					return "yesterday";  				}    				if (dayDiff < 7)  				{  					return string.Format("{0} days ago"' dayDiff);  				}    				if (dayDiff < 14)  				{  					return "1 week ago";  				}    				if (dayDiff < 31)  				{  					return string.Format("{0} weeks ago"' Math.Ceiling((double)dayDiff / 7));  				}  			}
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,GetPrettyDate,The following statement contains a magic number: if (DateTime.TryParse(date' out d))  			{  				// 1. Get time span elapsed since the date.  				var s = DateTime.Now.Subtract(d);    				// 2. Get total number of days elapsed.  				var dayDiff = (int)s.TotalDays;    				// 3. Get total number of seconds elapsed.  				var secDiff = (int)s.TotalSeconds;    				// 4. Don't allow out of range values.  				if (dayDiff < 0 || dayDiff >= 31)  				{  					return FormatDateTime(date' format); // d.ToString(format);  				}    				// 5. Handle same-day times.  				if (dayDiff == 0)  				{  					// A. Less than one minute ago.  					if (secDiff < 60)  					{  						return "just now";  					}    					// B. Less than 2 minutes ago.  					if (secDiff < 120)  					{  						return "1 minute ago";  					}    					// C.Less than one hour ago.  					if (secDiff < 3600)  					{  						return string.Format("{0} minutes ago"' Math.Floor((double)secDiff / 60));  					}    					// D. Less than 2 hours ago.  					if (secDiff < 7200)  					{  						return "1 hour ago";  					}    					// E. Less than one day ago.  					if (secDiff < 86400)  					{  						return string.Format("{0} hours ago"' Math.Floor((double)secDiff / 3600));  					}  				}    				// 6. Handle previous days.  				if (dayDiff == 1)  				{  					return "yesterday";  				}    				if (dayDiff < 7)  				{  					return string.Format("{0} days ago"' dayDiff);  				}    				if (dayDiff < 14)  				{  					return "1 week ago";  				}    				if (dayDiff < 31)  				{  					return string.Format("{0} weeks ago"' Math.Ceiling((double)dayDiff / 7));  				}  			}
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,GetPrettyDate,The following statement contains a magic number: if (DateTime.TryParse(date' out d))  			{  				// 1. Get time span elapsed since the date.  				var s = DateTime.Now.Subtract(d);    				// 2. Get total number of days elapsed.  				var dayDiff = (int)s.TotalDays;    				// 3. Get total number of seconds elapsed.  				var secDiff = (int)s.TotalSeconds;    				// 4. Don't allow out of range values.  				if (dayDiff < 0 || dayDiff >= 31)  				{  					return FormatDateTime(date' format); // d.ToString(format);  				}    				// 5. Handle same-day times.  				if (dayDiff == 0)  				{  					// A. Less than one minute ago.  					if (secDiff < 60)  					{  						return "just now";  					}    					// B. Less than 2 minutes ago.  					if (secDiff < 120)  					{  						return "1 minute ago";  					}    					// C.Less than one hour ago.  					if (secDiff < 3600)  					{  						return string.Format("{0} minutes ago"' Math.Floor((double)secDiff / 60));  					}    					// D. Less than 2 hours ago.  					if (secDiff < 7200)  					{  						return "1 hour ago";  					}    					// E. Less than one day ago.  					if (secDiff < 86400)  					{  						return string.Format("{0} hours ago"' Math.Floor((double)secDiff / 3600));  					}  				}    				// 6. Handle previous days.  				if (dayDiff == 1)  				{  					return "yesterday";  				}    				if (dayDiff < 7)  				{  					return string.Format("{0} days ago"' dayDiff);  				}    				if (dayDiff < 14)  				{  					return "1 week ago";  				}    				if (dayDiff < 31)  				{  					return string.Format("{0} weeks ago"' Math.Ceiling((double)dayDiff / 7));  				}  			}
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,GetPrettyDate,The following statement contains a magic number: if (DateTime.TryParse(date' out d))  			{  				// 1. Get time span elapsed since the date.  				var s = DateTime.Now.Subtract(d);    				// 2. Get total number of days elapsed.  				var dayDiff = (int)s.TotalDays;    				// 3. Get total number of seconds elapsed.  				var secDiff = (int)s.TotalSeconds;    				// 4. Don't allow out of range values.  				if (dayDiff < 0 || dayDiff >= 31)  				{  					return FormatDateTime(date' format); // d.ToString(format);  				}    				// 5. Handle same-day times.  				if (dayDiff == 0)  				{  					// A. Less than one minute ago.  					if (secDiff < 60)  					{  						return "just now";  					}    					// B. Less than 2 minutes ago.  					if (secDiff < 120)  					{  						return "1 minute ago";  					}    					// C.Less than one hour ago.  					if (secDiff < 3600)  					{  						return string.Format("{0} minutes ago"' Math.Floor((double)secDiff / 60));  					}    					// D. Less than 2 hours ago.  					if (secDiff < 7200)  					{  						return "1 hour ago";  					}    					// E. Less than one day ago.  					if (secDiff < 86400)  					{  						return string.Format("{0} hours ago"' Math.Floor((double)secDiff / 3600));  					}  				}    				// 6. Handle previous days.  				if (dayDiff == 1)  				{  					return "yesterday";  				}    				if (dayDiff < 7)  				{  					return string.Format("{0} days ago"' dayDiff);  				}    				if (dayDiff < 14)  				{  					return "1 week ago";  				}    				if (dayDiff < 31)  				{  					return string.Format("{0} weeks ago"' Math.Ceiling((double)dayDiff / 7));  				}  			}
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,IsLeapYear,The following statement contains a magic number: if (DateTime.TryParse(date' out result))  			{  				// test if number of days in Feburary is 29  				return (DateTime.DaysInMonth(result.Year' 2).Equals(29));  			}
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,IsLeapYear,The following statement contains a magic number: if (DateTime.TryParse(date' out result))  			{  				// test if number of days in Feburary is 29  				return (DateTime.DaysInMonth(result.Year' 2).Equals(29));  			}
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,ToUnixTime,The following statement contains a magic number: var unixEpoch = new DateTime(1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc);
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,GetDayNumberSuffix,The following statement contains a magic number: switch (date.Day)  			{  				case 1:  				case 21:  				case 31:  					return @"\s\t";  				case 2:  				case 22:  					return @"\n\d";  				case 3:  				case 23:  					return @"\r\d";  				default:  					return @"\t\h";  			}
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,GetDayNumberSuffix,The following statement contains a magic number: switch (date.Day)  			{  				case 1:  				case 21:  				case 31:  					return @"\s\t";  				case 2:  				case 22:  					return @"\n\d";  				case 3:  				case 23:  					return @"\r\d";  				default:  					return @"\t\h";  			}
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,GetDayNumberSuffix,The following statement contains a magic number: switch (date.Day)  			{  				case 1:  				case 21:  				case 31:  					return @"\s\t";  				case 2:  				case 22:  					return @"\n\d";  				case 3:  				case 23:  					return @"\r\d";  				default:  					return @"\t\h";  			}
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,GetDayNumberSuffix,The following statement contains a magic number: switch (date.Day)  			{  				case 1:  				case 21:  				case 31:  					return @"\s\t";  				case 2:  				case 22:  					return @"\n\d";  				case 3:  				case 23:  					return @"\r\d";  				default:  					return @"\t\h";  			}
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,GetDayNumberSuffix,The following statement contains a magic number: switch (date.Day)  			{  				case 1:  				case 21:  				case 31:  					return @"\s\t";  				case 2:  				case 22:  					return @"\n\d";  				case 3:  				case 23:  					return @"\r\d";  				default:  					return @"\t\h";  			}
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,GetDayNumberSuffix,The following statement contains a magic number: switch (date.Day)  			{  				case 1:  				case 21:  				case 31:  					return @"\s\t";  				case 2:  				case 22:  					return @"\n\d";  				case 3:  				case 23:  					return @"\r\d";  				default:  					return @"\t\h";  			}
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,WorkdaysDiff,The following statement contains a magic number: var start = ((int)startDate.DayOfWeek == 0 ? 7 : (int)startDate.DayOfWeek);
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,WorkdaysDiff,The following statement contains a magic number: var end = ((int)endDate.DayOfWeek == 0 ? 7 : (int)endDate.DayOfWeek);
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,WorkdaysDiff,The following statement contains a magic number: if (start <= end)  			{  				return (((diff.Days / 7) * 5) + Math.Max((Math.Min((end + 1)' 6) - start)' 0));  			}
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,WorkdaysDiff,The following statement contains a magic number: if (start <= end)  			{  				return (((diff.Days / 7) * 5) + Math.Max((Math.Min((end + 1)' 6) - start)' 0));  			}
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,WorkdaysDiff,The following statement contains a magic number: if (start <= end)  			{  				return (((diff.Days / 7) * 5) + Math.Max((Math.Min((end + 1)' 6) - start)' 0));  			}
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,WorkdaysDiff,The following statement contains a magic number: return (((diff.Days / 7) * 5) + Math.Min((end + 6) - Math.Min(start' 6)' 5));
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,WorkdaysDiff,The following statement contains a magic number: return (((diff.Days / 7) * 5) + Math.Min((end + 6) - Math.Min(start' 6)' 5));
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,WorkdaysDiff,The following statement contains a magic number: return (((diff.Days / 7) * 5) + Math.Min((end + 6) - Math.Min(start' 6)' 5));
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,WorkdaysDiff,The following statement contains a magic number: return (((diff.Days / 7) * 5) + Math.Min((end + 6) - Math.Min(start' 6)' 5));
Magic Number,uComponents.XsltExtensions,Dates,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Dates.cs,WorkdaysDiff,The following statement contains a magic number: return (((diff.Days / 7) * 5) + Math.Min((end + 6) - Math.Min(start' 6)' 5));
Magic Number,uComponents.XsltExtensions,Exceptions,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Exceptions.cs,ToXml,The following statement contains a magic number: if (exception.StackTrace != null)  			{  				root.Add  				(  					new XElement("StackTrace"'  						from frame in exception.StackTrace.Split('\n')  						let prettierFrame = frame.Substring(6).Trim()  						select new XElement("Frame"' prettierFrame))  				);  			}
Magic Number,uComponents.XsltExtensions,IO,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\IO.cs,FormatFileSize,The following statement contains a magic number: var place = Convert.ToInt32(Math.Floor(Math.Log(filesize' 1024)));
Magic Number,uComponents.XsltExtensions,IO,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\IO.cs,FormatFileSize,The following statement contains a magic number: var num = Math.Round(filesize / Math.Pow(1024' place)' 1);
Magic Number,uComponents.XsltExtensions,Strings,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Strings.cs,TruncateInner,The following statement contains a magic number: var half = (maxLength - 3) / 2;
Magic Number,uComponents.XsltExtensions,Strings,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Strings.cs,TruncateInner,The following statement contains a magic number: var half = (maxLength - 3) / 2;
Magic Number,uComponents.XsltExtensions,Strings,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Strings.cs,TruncateInner,The following statement contains a magic number: var left = input.Substring(0' (maxLength - 3) - right.Length).TrimEnd();
Magic Number,uComponents.XsltExtensions,Urls,C:\repos\uComponents_uComponents\src\uComponents.XsltExtensions\Urls.cs,GuessNiceUrl,The following statement contains a magic number: if (!niceUrl.StartsWith(Constants.Common.HTTP) || !published)  			{  				const string URLNAME = Constants.Umbraco.Content.UrlName; // "umbracoUrlName";  				var hasDomain = false;  				var domain = HttpContext.Current.Request.ServerVariables["SERVER_NAME"].ToLower();  				string nodeName;  				string nodePath;  				int nodeParentId;    				// if the node is published' get from the nodeFactory  				if (published)  				{  					nodeName = node.GetProperty(URLNAME) != null && !string.IsNullOrEmpty(node.GetProperty(URLNAME).Value) ? node.GetProperty(URLNAME).Value : node.Name;  					nodePath = node.Path;  					nodeParentId = node.Parent != null ? node.Parent.Id : uQuery.RootNodeId;  				}  				else  				{  					// otherwise' get from the Document object.  					var doc = new umbraco.cms.businesslogic.web.Document(nodeId);  					nodeName = doc.getProperty(URLNAME) != null && doc.getProperty(URLNAME).Value != null && !string.IsNullOrEmpty(doc.getProperty(URLNAME).Value.ToString()) ? doc.getProperty(URLNAME).Value.ToString() : doc.Text;  					nodePath = doc.Path;  					nodeParentId = doc.ParentId;  				}    				// check if the node has a domain associated.  				if (UmbracoSettings.UseDomainPrefixes)  				{  					// get the path  					var path = nodePath.Split(Constants.Common.SLASH);    					// loop through each part of the path in reverse order  					for (int i = path.Length - 1; i >= 0; i--)  					{  						int partId;  						if (int.TryParse(path[i]' out partId))  						{  							var domains = umbraco.cms.businesslogic.web.Domain.GetDomainsById(partId);  							if (domains != null && domains.Length > 0)  							{  								hasDomain = true;  								domain = domains[0].Name;  								break;  							}  						}  					}  				}    				// if the node is unpublished...  				if (!published)  				{  					// get the published node for the parent node.  					var parentNode = new Node(nodeParentId);  					if (parentNode.Path != null || (nodeParentId == uQuery.RootNodeId && !hasDomain))  					{  						int level = parentNode.Path.Split(Constants.Common.COMMA).Length;  						string parentUrl = nodeParentId > 0 && !(level == 2 && GlobalSettings.HideTopLevelNodeFromPath) ? parentNode.NiceUrl : string.Empty;  						string urlName = string.Concat(Constants.Common.SLASH' url.FormatUrl(nodeName.ToLower()));  						string fileExtension = GlobalSettings.UseDirectoryUrls ? string.Empty : Constants.Common.DOTASPX;    						// construct the NiceUrl for the unpublished node.  						niceUrl = string.Concat(parentUrl.Replace(Constants.Common.DOTASPX' string.Empty)' urlName' fileExtension);  					}  				}    				// if the node has a domain' and is unpublished' use the domain.  				if (niceUrl == Constants.Common.HASH && hasDomain)  				{  					niceUrl = string.Concat(Constants.Common.HTTP' domain);  				}    				// if the NiceUrl doesn't start with 'http://' (and isn't '#') then prepend it.  				if (!niceUrl.StartsWith(Constants.Common.HTTP) && niceUrl != Constants.Common.HASH)  				{  					niceUrl = string.Concat(Constants.Common.HTTP' domain' niceUrl);  				}  			}
