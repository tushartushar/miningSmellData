Implementation smell,Namespace,Class,File,Method,Description
Long Method,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,CreateChildControls,The method has 485 lines of code.
Long Method,uComponents.DataTypes.ImagePoint,ImagePointDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ImagePoint\ImagePointDataEditor.cs,ConfigureControls,The method has 112 lines of code.
Long Method,uComponents.DataTypes.SubTabs,SubTabsDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SubTabs\SubTabsDataEditor.cs,CreateChildControls,The method has 103 lines of code.
Long Method,uComponents.DataTypes.UrlPicker.Dto,UrlPickerState,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\UrlPicker\Dto\UrlPickerState.cs,Deserialize,The method has 140 lines of code.
Long Method,uComponents.DataTypes.UrlPicker,UrlPickerPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\UrlPicker\UrlPickerPreValueEditor.cs,Save,The method has 102 lines of code.
Complex Method,uComponents.DataTypes.CheckBoxTree,CheckBoxTreeDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CheckBoxTree\CheckBoxTreeDataEditor.cs,OnLoad,Cyclomatic complexity of the method is 9
Complex Method,uComponents.DataTypes.DataTypeGrid.Handlers.DataTypes,XPathAutocompleteDataTypeHandler,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\Handlers\DataTypes\XPathAutocompleteDataTypeHandler.cs,GetDisplayValue,Cyclomatic complexity of the method is 12
Complex Method,uComponents.DataTypes.DataTypeGrid.Handlers.DataTypes,XPathDropDownListDataTypeHandler,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\Handlers\DataTypes\XPathDropDownListDataTypeHandler.cs,GetDisplayValue,Cyclomatic complexity of the method is 12
Complex Method,uComponents.DataTypes.DataTypeGrid.Model,StoredValueRowCollection,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\Model\StoredValueRowCollection.cs,StoredValueRowCollection,Cyclomatic complexity of the method is 10
Complex Method,uComponents.DataTypes.DataTypeGrid.Model,GridRowCollection,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\Model\GridRowCollection.cs,GridRowCollection,Cyclomatic complexity of the method is 9
Complex Method,uComponents.DataTypes.ImagePoint,ImagePoint,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ImagePoint\ImagePoint.cs,LoadPropertyValue,Cyclomatic complexity of the method is 12
Complex Method,uComponents.DataTypes.TextstringArray,TextstringArrayControl,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\TextstringArray\TextstringArrayControl.cs,OnPreRender,Cyclomatic complexity of the method is 9
Complex Method,uComponents.DataTypes.TextstringArray,TextstringArrayControl,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\TextstringArray\TextstringArrayControl.cs,Render,Cyclomatic complexity of the method is 8
Complex Method,uComponents.DataTypes.TextstringArray,TextstringArrayData,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\TextstringArray\TextstringArrayData.cs,ToXMl,Cyclomatic complexity of the method is 8
Complex Method,uComponents.DataTypes.UrlPicker,UrlPickerPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\UrlPicker\UrlPickerPreValueEditor.cs,OnLoad,Cyclomatic complexity of the method is 8
Long Identifier,uComponents.DataTypes.CheckBoxTree,CheckBoxTreePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CheckBoxTree\CheckBoxTreePreValueEditor.cs,,The length of the parameter treeStartNodeXPathRequiredFieldValidator is 40.
Long Identifier,uComponents.DataTypes.CheckBoxTree,CheckBoxTreePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CheckBoxTree\CheckBoxTreePreValueEditor.cs,,The length of the parameter treeStartNodeXPathCustomValidator is 33.
Long Identifier,uComponents.DataTypes.CheckBoxTree,CheckBoxTreePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CheckBoxTree\CheckBoxTreePreValueEditor.cs,,The length of the parameter selectableTreeNodesXPathTextBox is 31.
Long Identifier,uComponents.DataTypes.CheckBoxTree,CheckBoxTreePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CheckBoxTree\CheckBoxTreePreValueEditor.cs,,The length of the parameter selectableTreeNodesXPathCustomValidator is 39.
Long Identifier,uComponents.DataTypes.CheckBoxTree,CheckBoxTreePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CheckBoxTree\CheckBoxTreePreValueEditor.cs,,The length of the parameter selectExpandOptionDropDownList is 30.
Long Identifier,uComponents.DataTypes.PropertyPicker,PropertyPickerPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\PropertyPicker\PropertyPickerPrevalueEditor.cs,,The length of the parameter includeDefaultAttributesCheckBox is 32.
Long Identifier,uComponents.DataTypes.Similarity,SimilarityDataType,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Similarity\SimilarityDataType.cs,,The length of the parameter _similarityPickerPrevalueEditor is 31.
Long Identifier,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListPreValueEditor.cs,,The length of the parameter limitToRegularExpressionValidator is 33.
Long Identifier,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListPreValueEditor.cs,,The length of the parameter listHeightRegularExpressionValidator is 36.
Long Identifier,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListPreValueEditor.cs,,The length of the parameter minItemsRegularExpressionValidator is 34.
Long Identifier,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListPreValueEditor.cs,,The length of the parameter maxItemsRegularExpressionValidator is 34.
Long Statement,uComponents.DataTypes.CharLimit,CharLimitControl,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CharLimit\CharLimitControl.cs,CreateChildControls,The length of the statement  "			this.TextBoxControl.CssClass = this.Options.TextBoxMode == TextBoxMode.SingleLine ? "CharLimit umbEditorTextField" : "CharLimit umbEditorTextFieldMultiple"; " is 156.
Long Statement,uComponents.DataTypes.CharLimit,CharLimitControl,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CharLimit\CharLimitControl.cs,Render,The length of the statement  "				message = String.Format("You have gone past the limit of {0}. Total: {1} characters."' this.Options.Limit' this.Text.Length); " is 125.
Long Statement,uComponents.DataTypes.CharLimit,CharLimitControl,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CharLimit\CharLimitControl.cs,Render,The length of the statement  "			// in the case where they've Not enforced the character limit' entered too many characters' and then turned 'enforce' on. " is 121.
Long Statement,uComponents.DataTypes.CharLimit,CharLimitControl,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CharLimit\CharLimitControl.cs,Render,The length of the statement  "				message = String.Format("You used {0} characters. You are only allowed {1} characters."' this.Text.Length' this.Options.Limit); " is 127.
Long Statement,uComponents.DataTypes.CharLimit,CharLimitControl,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CharLimit\CharLimitControl.cs,Render,The length of the statement  "			var javascript = string.Concat("<script type='text/javascript'>jQuery(window).load(function(){"' javascriptMethod' "});</script>"); " is 131.
Long Statement,uComponents.DataTypes.CheckBoxTree,CheckBoxTreeDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CheckBoxTree\CheckBoxTreeDataEditor.cs,OnInit,The length of the statement  "			this.minSelectionCustomValidator.ServerValidate += new ServerValidateEventHandler(this.MinSelectionCustomValidator_ServerValidate); " is 131.
Long Statement,uComponents.DataTypes.CheckBoxTree,CheckBoxTreeDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CheckBoxTree\CheckBoxTreeDataEditor.cs,OnInit,The length of the statement  "			this.maxSelectionCustomValidator.ServerValidate += new ServerValidateEventHandler(this.MaxSelectionCustomValidator_ServerValidate); " is 131.
Long Statement,uComponents.DataTypes.CheckBoxTree,CheckBoxTreeDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CheckBoxTree\CheckBoxTreeDataEditor.cs,OnInit,The length of the statement  "			var documentType = UmbracoContext.Current.Application.Services.ContentTypeService.GetContentType(property.PropertyType.ContentTypeId); " is 134.
Long Statement,uComponents.DataTypes.CheckBoxTree,CheckBoxTreeDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CheckBoxTree\CheckBoxTreeDataEditor.cs,OnInit,The length of the statement  "				this.minSelectionCustomValidator.ErrorMessage = string.Concat("The "' property.PropertyType.Alias' " field in the "' propertyGroup.Name' " tab requires a minimum of "' this.options.MinSelection.ToString()' " selections<br/>"); " is 226.
Long Statement,uComponents.DataTypes.CheckBoxTree,CheckBoxTreeDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CheckBoxTree\CheckBoxTreeDataEditor.cs,OnInit,The length of the statement  "				this.maxSelectionCustomValidator.ErrorMessage = string.Concat("The "' property.PropertyType.Alias' " field in the "' propertyGroup.Name' " tab has exceeded the maximum number of selections<br/>"); " is 196.
Long Statement,uComponents.DataTypes.CheckBoxTree,CheckBoxTreeDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CheckBoxTree\CheckBoxTreeDataEditor.cs,OnLoad,The length of the statement  "			this.RegisterEmbeddedClientResource("uComponents.DataTypes.CheckBoxTree.CheckBoxTree.js"' ClientDependencyType.Javascript); " is 123.
Long Statement,uComponents.DataTypes.CheckBoxTree,CheckBoxTreeDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CheckBoxTree\CheckBoxTreeDataEditor.cs,OnLoad,The length of the statement  "			ScriptManager.RegisterStartupScript(this' typeof(CheckBoxTreeDataEditor)' this.ClientID + "_init"' startupScript' false); " is 121.
Long Statement,uComponents.DataTypes.CheckBoxTree,CheckBoxTreePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CheckBoxTree\CheckBoxTreePreValueEditor.cs,CreateChildControls,The length of the statement  "			this.treeStartNodeXPathCustomValidator.ServerValidate += new ServerValidateEventHandler(this.XPathCustomValidator_ServerValidate); " is 130.
Long Statement,uComponents.DataTypes.CheckBoxTree,CheckBoxTreePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CheckBoxTree\CheckBoxTreePreValueEditor.cs,CreateChildControls,The length of the statement  "			this.selectableTreeNodesXPathCustomValidator.ServerValidate += new ServerValidateEventHandler(this.XPathCustomValidator_ServerValidate); " is 136.
Long Statement,uComponents.DataTypes.CheckBoxTree,CheckBoxTreePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CheckBoxTree\CheckBoxTreePreValueEditor.cs,Save,The length of the statement  "				this.Options.AutoSelectionOption = (CheckBoxTreeOptions.AutoSelectionOptions)this.autoSelectionDropDownList.SelectedIndex; " is 122.
Long Statement,uComponents.DataTypes.CheckBoxTree,CheckBoxTreePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CheckBoxTree\CheckBoxTreePreValueEditor.cs,RenderContents,The length of the statement  "			writer.AddPrevalueRow("XPath Start Node"' "first matched node will be the root of the tree"' this.treeStartNodeXPathTextBox' this.treeStartNodeXPathRequiredFieldValidator' this.treeStartNodeXPathCustomValidator); " is 212.
Long Statement,uComponents.DataTypes.CheckBoxTree,CheckBoxTreePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CheckBoxTree\CheckBoxTreePreValueEditor.cs,RenderContents,The length of the statement  "			writer.AddPrevalueRow("XPath Filter"' "not required - only matched nodes will have checkboxes"' this.selectableTreeNodesXPathTextBox' this.selectableTreeNodesXPathCustomValidator); " is 180.
Long Statement,uComponents.DataTypes.CheckBoxTree,CheckBoxTreePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CheckBoxTree\CheckBoxTreePreValueEditor.cs,RenderContents,The length of the statement  "			writer.AddPrevalueRow("Auto Selection"' "ensure a top down or bottom up tree selection"' this.autoSelectionDropDownList); " is 121.
Long Statement,uComponents.DataTypes.CheckBoxTree,CheckBoxTreePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CheckBoxTree\CheckBoxTreePreValueEditor.cs,RenderContents,The length of the statement  "			writer.AddPrevalueRow("Expand Options"' "on load' select whether to collapse all' expand all or only selected branches."' this.selectExpandOptionDropDownList); " is 159.
Long Statement,uComponents.DataTypes.CountryPicker,CountryPickerDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CountryPicker\CountryPickerDataEditor.cs,FillWithIsoCountries,The length of the statement  "			var countries = cultures.Select(cultureInfo => new RegionInfo(cultureInfo.Name)).Select(regionInfo => regionInfo.DisplayName).ToList(); " is 135.
Long Statement,uComponents.DataTypes.DataTypeGrid.Handlers.DataTypes,ColorPickerDataTypeHandler,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\Handlers\DataTypes\ColorPickerDataTypeHandler.cs,GetDisplayValue,The length of the statement  "                return string.Format("<span style='display: inline-block; font-size: 0.9em; border: 1px solid {1}; line-height: 18px; padding: 0 3px; background-color: #{0}; color: {1};'>{2}</span>"' value' ColorTranslator.ToHtml(contrastColor)' color.Name); " is 242.
Long Statement,uComponents.DataTypes.DataTypeGrid.Handlers.DataTypes,DateDataTypeHandler,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\Handlers\DataTypes\DateDataTypeHandler.cs,GetDisplayValue,The length of the statement  "                return d.ToString(CultureInfo.CreateSpecificCulture(HttpContext.Current.Request.UserLanguages[0]).DateTimeFormat.ShortDatePattern); " is 131.
Long Statement,uComponents.DataTypes.DataTypeGrid.Handlers.DataTypes,IncrementalTextBoxDataTypeHandler,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\Handlers\DataTypes\IncrementalTextBoxDataTypeHandler.cs,Configure,The length of the statement  "            eventArgs.Container.Page.ClientScript.RegisterClientScriptInclude(eventArgs.Container.Page.GetType()' "jquery.alphanumeric"' "/umbraco_client/ui/jquery.alphanumeric.js"); " is 170.
Long Statement,uComponents.DataTypes.DataTypeGrid.Handlers.DataTypes,UrlPickerDataTypeHandler,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\Handlers\DataTypes\UrlPickerDataTypeHandler.cs,Configure,The length of the statement  "            if (dataType.Data.Value != null && !string.IsNullOrEmpty(dataType.Data.Value.ToString()) && dataType.ContentEditor.State == null) " is 129.
Long Statement,uComponents.DataTypes.DataTypeGrid.Handlers.DataTypes,UrlPickerDataTypeHandler,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\Handlers\DataTypes\UrlPickerDataTypeHandler.cs,GetDisplayValue,The length of the statement  "            if (dataType.Data.Value != null && !string.IsNullOrEmpty(dataType.Data.Value.ToString()) && dataType.ContentEditor.State == null) " is 129.
Long Statement,uComponents.DataTypes.DataTypeGrid.Handlers.DataTypes,XPathAutocompleteDataTypeHandler,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\Handlers\DataTypes\XPathAutocompleteDataTypeHandler.cs,GetDisplayValue,The length of the statement  "                            displayValue += string.Format("<a href='editContent.aspx?id={0}' title='Edit content'>{1}</a>"' valueAttribute.Value' textAttribute.Value); " is 139.
Long Statement,uComponents.DataTypes.DataTypeGrid.Handlers.DataTypes,XPathAutocompleteDataTypeHandler,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\Handlers\DataTypes\XPathAutocompleteDataTypeHandler.cs,GetDisplayValue,The length of the statement  "                            displayValue += string.Format("<a href='editMedia.aspx?id={0}' title='Edit media'>{1}</a>"' valueAttribute.Value' textAttribute.Value); " is 135.
Long Statement,uComponents.DataTypes.DataTypeGrid.Handlers.DataTypes,XPathAutocompleteDataTypeHandler,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\Handlers\DataTypes\XPathAutocompleteDataTypeHandler.cs,GetDisplayValue,The length of the statement  "                            displayValue += string.Format("<a href='editMedia.aspx?id={0}' title='Edit member'>{1}</a>"' valueAttribute.Value' textAttribute.Value); " is 136.
Long Statement,uComponents.DataTypes.DataTypeGrid.Handlers.DataTypes,XpathCheckBoxListDataTypeHandler,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\Handlers\DataTypes\XPathCheckBoxListDataTypeHandler.cs,GetDisplayValue,The length of the statement  "                        displayValue += string.Format("<a href='editContent.aspx?id={0}' title='Edit content'>{1}</a>"' document.Id' document.Name); " is 124.
Long Statement,uComponents.DataTypes.DataTypeGrid.Handlers.DataTypes,XPathDropDownListDataTypeHandler,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\Handlers\DataTypes\XPathDropDownListDataTypeHandler.cs,GetDisplayValue,The length of the statement  "                var optionsField = typeof(XPathDropDownListDataEditor).GetField("options"' BindingFlags.Instance | BindingFlags.NonPublic); " is 123.
Long Statement,uComponents.DataTypes.DataTypeGrid,DataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\DataEditor.cs,GenerateHeaderRow,The length of the statement  "			tr.Cells.Add(new TableHeaderCell { CssClass = "actions"' Text = Helper.Dictionary.GetDictionaryItem("Actions"' "Actions") }); " is 125.
Long Statement,uComponents.DataTypes.DataTypeGrid,DataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\DataEditor.cs,GenerateValidationControls,The length of the statement  "					HttpContext.Current.Trace.Warn("DataTypeGrid"' "EditorControl (" + config.Value.DataTypeName + ") does not support validation"' ex); " is 132.
Long Statement,uComponents.DataTypes.DataTypeGrid,DataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\DataEditor.cs,GenerateValidationControls,The length of the statement  "			if (!string.IsNullOrEmpty(this.ColumnConfigurations.First(x => x.Alias == config.Alias).ValidationExpression) && control != null) " is 129.
Long Statement,uComponents.DataTypes.DataTypeGrid,DataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\DataEditor.cs,GetDataTablesTranslation,The length of the statement  "					@"<script type=""text/javascript"">$.fn.uComponents().dictionary().dataTablesTranslation = {{""sEmptyTable"":""{0}""'""sInfo"":""{1}""'""sInfoEmpty"":""{2}""'""sInfoFiltered"":""{3}""'""sInfoPostFix"":""{4}""'""sInfoThousands"":""{5}""'""sLengthMenu"":""{6}""'""sLoadingRecords"":""{7}""'""sProcessing"":""{8}""'""sSearch"":""{9}""'""sZeroRecords"":""{10}""'""oPaginate"": {{""sFirst"":""{11}""'""sLast"":""{12}""'""sNext"":""{13}""'""sPrevious"":""{14}""}}'""oAria"":{{""sSortAscending"":""{15}""'""sSortDescending"":""{16}""}}}}</script>"' " is 541.
Long Statement,uComponents.DataTypes.DataTypeGrid,DataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\DataEditor.cs,CreateChildControls,The length of the statement  "			// this.Data.Value = "<items><item id='1'><name nodeName='Name' nodeType='-88' >Anna</name><age nodeName='Age' nodeType='-51' >25</age><picture nodeName='Picture' nodeType='1035' ></picture></item><item id='6'><name nodeName='Name' nodeType='-88' >Ove</name><gender nodeName='Gender' nodeType='-88'>Male</gender><age nodeName='Age' nodeType='-51' >23</age><picture nodeName='Picture' nodeType='1035' ></picture></item></items>"; " is 428.
Long Statement,uComponents.DataTypes.DataTypeGrid,DataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\DataEditor.cs,CreateChildControls,The length of the statement  "			this.DataTablesTranslation = new LiteralControl() { ID = "DataTablesTranslation"' Text = this.GetDataTablesTranslation() }; " is 123.
Long Statement,uComponents.DataTypes.DataTypeGrid,DataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\DataEditor.cs,CreateChildControls,The length of the statement  "			this.Value = new HiddenField() { ID = "Value"' Value = this.data.Value != null ? this.data.Value.ToString() : string.Empty }; " is 125.
Long Statement,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,CreateChildControls,The length of the statement  "            this.newPreValue = new PreValueRow() { Id = this.prevalueEditorSettingsHandler.GetAvailableId(this.DataType.DataTypeDefinitionId) }; " is 132.
Long Statement,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,CreateChildControls,The length of the statement  "            this.accordionContainer = new Panel { ID = "dtg_accordion_" + this.DataType.DataTypeDefinitionId' CssClass = "dtg_accordion" }; " is 127.
Long Statement,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,CreateChildControls,The length of the statement  "                        Helper.Dictionary.GetDictionaryItem("VisibleDescription"' "Whether this column is visible in the grid. <br/>(it can still be edited)"))' " is 136.
Long Statement,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,CreateChildControls,The length of the statement  "                    Helper.Dictionary.GetDictionaryItem("ValidationDescription"' "The regular expression used for validation. Leave empty to disable"))' " is 132.
Long Statement,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,CreateChildControls,The length of the statement  "                var icnEditError = new HtmlGenericControl("span") { InnerText = Helper.Dictionary.GetDictionaryItem("Error"' "Error") }; " is 120.
Long Statement,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,CreateChildControls,The length of the statement  "                var txtEditAlias = new TextBox() { ID = "editAlias_" + this.preValues.IndexOf(s)' CssClass = "editAlias"' Text = s.Alias }; " is 123.
Long Statement,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,CreateChildControls,The length of the statement  "                var chkEditMandatory = new CheckBox() { ID = "editMandatory_" + this.preValues.IndexOf(s)' CssClass = "editMandatory"' Checked = s.Mandatory }; " is 143.
Long Statement,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,CreateChildControls,The length of the statement  "                var chkEditVisible = new CheckBox() { ID = "editVisible_" + this.preValues.IndexOf(s)' CssClass = "editVisible"' Checked = s.Visible }; " is 135.
Long Statement,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,CreateChildControls,The length of the statement  "                                                     Helper.Dictionary.GetDictionaryItem("VisibleDescription"' "Whether this column is visible in the grid. <br/>(it can still be edited)"))' " is 136.
Long Statement,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,CreateChildControls,The length of the statement  "                        Helper.Dictionary.GetDictionaryItem("ValidationDescription"' "The regular expression used for validation. Leave empty to disable"))' " is 132.
Long Statement,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,RenderContents,The length of the statement  "            this.AddPrevalueRow(writer' Helper.Dictionary.GetDictionaryItem("ShowLabel"' "Show Label")' Helper.Dictionary.GetDictionaryItem("ShowLabelDescription"' "Show datatype name above grid")' this.showLabel); " is 202.
Long Statement,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,RenderContents,The length of the statement  "            this.AddPrevalueRow(writer' Helper.Dictionary.GetDictionaryItem("ShowGridHeader"' "Show Grid Header")' Helper.Dictionary.GetDictionaryItem("ShowGridHeaderDescription"' "Show grid header with search box")' this.showHeader); " is 222.
Long Statement,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,RenderContents,The length of the statement  "            this.AddPrevalueRow(writer' Helper.Dictionary.GetDictionaryItem("ShowGridFooter"' "Show Grid Footer")' Helper.Dictionary.GetDictionaryItem("ShowGridFooterDescription"' "Show grid footer with paging and total rows")' this.showFooter); " is 233.
Long Statement,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,RenderContents,The length of the statement  "            this.AddPrevalueRow(writer' Helper.Dictionary.GetDictionaryItem("ReadOnly"' "Read Only")' Helper.Dictionary.GetDictionaryItem("ReadOnlyDescription"' "Lock the grid for editing")' this.readOnly); " is 194.
Long Statement,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,RenderContents,The length of the statement  "            this.AddPrevalueRow(writer' Helper.Dictionary.GetDictionaryItem("TableHeight"' "Table Height")' Helper.Dictionary.GetDictionaryItem("TableHeightDescription"' "The grid height")' new Control[] { this.tableHeight' this.tableHeightValidator }); " is 241.
Long Statement,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,RenderContents,The length of the statement  "                "var UMBRACO_FORCE_SAFE_ALIAS = true; var UMBRACO_FORCE_SAFE_ALIAS_VALIDCHARS = '_-abcdefghijklmnopqrstuvwxyz1234567890'; var UMBRACO_FORCE_SAFE_ALIAS_INVALID_FIRST_CHARS = '01234567890';function safeAlias(alias) { if (UMBRACO_FORCE_SAFE_ALIAS) { var safeAlias = ''; var aliasLength = alias.length; for (var i = 0; i < aliasLength; i++) { currentChar = alias.substring(i' i + 1); if (UMBRACO_FORCE_SAFE_ALIAS_VALIDCHARS.indexOf(currentChar.toLowerCase()) > -1) { if (safeAlias == '' && UMBRACO_FORCE_SAFE_ALIAS_INVALID_FIRST_CHARS.indexOf(currentChar.toLowerCase()) > 0) { currentChar = ''; } else { if (safeAlias.length == 0) currentChar = currentChar.toLowerCase(); if (i < aliasLength - 1 && safeAlias != '' && alias.substring(i - 1' i) == ' ') currentChar = currentChar.toUpperCase(); safeAlias += currentChar; } } } return safeAlias; } else { return alias; } }"; " is 867.
Long Statement,uComponents.DataTypes.DataTypeGrid.Extensions,DtgDataEditorExtensions,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\Extensions\DataEditorExtensions.cs,AddCssDtgClientDependencies,The length of the statement  "            ctl.RegisterEmbeddedClientResource("uComponents.DataTypes.DataTypeGrid.Css.DTG_DataEditor.css"' ClientDependencyType.Css); " is 122.
Long Statement,uComponents.DataTypes.DataTypeGrid.Extensions,DtgDataEditorExtensions,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\Extensions\DataEditorExtensions.cs,AddJsDtgClientDependencies,The length of the statement  "            ctl.RegisterEmbeddedClientResource("uComponents.DataTypes.DataTypeGrid.Scripts.jquery.dataTables.min.js"' ClientDependencyType.Javascript); " is 139.
Long Statement,uComponents.DataTypes.DataTypeGrid.Extensions,DtgDataEditorExtensions,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\Extensions\DataEditorExtensions.cs,AddJsDtgClientDependencies,The length of the statement  "            ctl.RegisterEmbeddedClientResource("uComponents.DataTypes.Shared.Resources.Scripts.jquery.ucomponents.js"' ClientDependencyType.Javascript); " is 140.
Long Statement,uComponents.DataTypes.DataTypeGrid.Extensions,DtgDataEditorExtensions,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\Extensions\DataEditorExtensions.cs,AddJsDtgClientDependencies,The length of the statement  "            ctl.RegisterEmbeddedClientResource("uComponents.DataTypes.Shared.Resources.Scripts.jquery.ucomponents.dictionary.js"' ClientDependencyType.Javascript); " is 151.
Long Statement,uComponents.DataTypes.DataTypeGrid.Extensions,DtgDataEditorExtensions,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\Extensions\DataEditorExtensions.cs,AddJsDtgClientDependencies,The length of the statement  "            ctl.RegisterEmbeddedClientResource("uComponents.DataTypes.DataTypeGrid.Scripts.DTG_DataEditor.js"' ClientDependencyType.Javascript); " is 132.
Long Statement,uComponents.DataTypes.DataTypeGrid.ServiceLocators,DataTypeHandlerServiceLocator,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\ServiceLocators\DataTypeHandlerServiceLocator.cs,GetPropertyValue,The length of the statement  "                var m = f.GetType().GetMethods().Where(x => x.Name == "GetPropertyValue").First(x => x.GetGenericArguments().Count() == 1); " is 123.
Long Statement,uComponents.DataTypes.DropdownCheckList,DDCList_DataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DropdownCheckList\DDCList_DataEditor.cs,OnLoad,The length of the statement  "			this.RegisterEmbeddedClientResource("uComponents.DataTypes.DropdownCheckList.Styles.uiDropdownchecklist.css"' ClientDependencyType.Css); " is 136.
Long Statement,uComponents.DataTypes.DropdownCheckList,DDCList_DataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DropdownCheckList\DDCList_DataEditor.cs,OnLoad,The length of the statement  "			this.RegisterEmbeddedClientResource("uComponents.DataTypes.DropdownCheckList.Scripts.ui.dropdownchecklist.js"' ClientDependencyType.Javascript); " is 144.
Long Statement,uComponents.DataTypes.DropdownCheckList,DDCList_DataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DropdownCheckList\DDCList_DataEditor.cs,Render,The length of the statement  "			var pickedValues = this.PickedValues.Split(new[] { Constants.Common.COMMA }' StringSplitOptions.RemoveEmptyEntries).Select(v => v.Trim()).ToList(); " is 147.
Long Statement,uComponents.DataTypes.DropdownCheckList,DDCList_DataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DropdownCheckList\DDCList_DataEditor.cs,Render,The length of the statement  "			var javascript = string.Concat("<script type='text/javascript'>jQuery(document).ready(function() { "' functions' "});</script>"); " is 129.
Long Statement,uComponents.DataTypes.ElasticTextBox,ETB_Control,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ElasticTextBox\ETB_Control.cs,OnLoad,The length of the statement  "			this.RegisterEmbeddedClientResource("uComponents.DataTypes.ElasticTextBox.Scripts.jquery.elastic.js"' ClientDependencyType.Javascript); " is 135.
Long Statement,uComponents.DataTypes.ElasticTextBox,ETB_Control,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ElasticTextBox\ETB_Control.cs,Render,The length of the statement  "			var javascript = string.Concat("<script type='text/javascript'>jQuery(window).load(function(){"' javascriptMethod' "});</script>"); " is 131.
Long Statement,uComponents.DataTypes.ElasticTextBox,ETB_PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ElasticTextBox\ETB_PrevalueEditor.cs,OnInit,The length of the statement  "			this.RegisterEmbeddedClientResource("uComponents.DataTypes.ElasticTextBox.Scripts.jquery.elastic.js"' ClientDependencyType.Javascript); " is 135.
Long Statement,uComponents.DataTypes.ElasticTextBox,ETB_PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ElasticTextBox\ETB_PrevalueEditor.cs,RenderContents,The length of the statement  "			writer.AddPrevalueRow("CSS:"' "You can use any inline CSS to style the Elastic TextBox.<br/>Note: When using the 'font-size' property' for best results' use 'px' values' ('em' and '%' values can render incorrectly)."' this.TextBoxCss); " is 235.
Long Statement,uComponents.DataTypes.ElasticTextBox,ETB_PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ElasticTextBox\ETB_PrevalueEditor.cs,RenderContents,The length of the statement  "			var javascriptDefaults = string.Format("var dimensions = ';height:{0}px;width:{1}px;'"' this.TextBoxHeight.Text' this.TextBoxWidth.Text); " is 137.
Long Statement,uComponents.DataTypes.ElasticTextBox,ETB_PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ElasticTextBox\ETB_PrevalueEditor.cs,RenderContents,The length of the statement  "			var javascriptLivePreview = string.Format("jQuery('#{1}').keyup(function(){{ jQuery('#{0}').attr('style'' jQuery(this).val() + dimensions).elastic(); }});"' this.Preview.ClientID' this.TextBoxCss.ClientID); " is 206.
Long Statement,uComponents.DataTypes.ElasticTextBox,ETB_PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ElasticTextBox\ETB_PrevalueEditor.cs,RenderContents,The length of the statement  "			var javascript = string.Concat("<script type='text/javascript'>jQuery(window).load(function(){"' javascriptDefaults' Environment.NewLine' javascriptLoadElastic' Environment.NewLine' javascriptLivePreview' "});</script>"); " is 221.
Long Statement,uComponents.DataTypes.EnumDropDownList,EnumDropDownListDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\EnumDropDownList\EnumDropDownListDataEditor.cs,OnLoad,The length of the statement  "            // OA: Need to check if this.data.Value is not null to prevent YSODs in some cases where it is actually null' like when the editor is not directly on a document type. " is 166.
Long Statement,uComponents.DataTypes.EnumDropDownList,EnumDropDownListDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\EnumDropDownList\EnumDropDownListDataEditor.cs,Save,The length of the statement  "            // OA: the property id will be 0 if the editor is rendered without being directly on a document type' so we need to check to prevent YSODs here. " is 144.
Long Statement,uComponents.DataTypes.EnumDropDownList,EnumDropDownListDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\EnumDropDownList\EnumDropDownListDataEditor.cs,Save,The length of the statement  "					var documentType = UmbracoContext.Current.Application.Services.ContentTypeService.GetContentType(property.PropertyType.ContentTypeId); " is 134.
Long Statement,uComponents.DataTypes.EnumDropDownList,EnumDropDownListDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\EnumDropDownList\EnumDropDownListDataEditor.cs,Save,The length of the statement  "						this.customValidator.ErrorMessage = ui.Text("errorHandling"' "errorMandatory"' new[] { property.PropertyType.Alias' propertyGroup.Name }' User.GetCurrent()); " is 157.
Long Statement,uComponents.DataTypes.FileDropDownList,FileDropDownListControl,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\FileDropDownList\FileDropDownListControl.cs,CreateChildControls,The length of the statement  "				this.Controls.Add(new LiteralControl(string.Concat("<div style='display:none;white-space:pre;width:500px;'><small>"' ex' "</small></div>"))); " is 141.
Long Statement,uComponents.DataTypes.FileDropDownList,FileDropDownListPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\FileDropDownList\FileDropDownListPrevalueEditor.cs,RenderContents,The length of the statement  "			writer.AddPrevalueRow("Directory:"' "The directory to list the files from' relative to the root of the website."' this.TextBoxDirectory); " is 137.
Long Statement,uComponents.DataTypes.FileDropDownList,FileDropDownListPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\FileDropDownList\FileDropDownListPrevalueEditor.cs,RenderContents,The length of the statement  "			writer.AddPrevalueRow("Search Pattern:"' "The pattern to match the files. e.g. <code>*.css</code>"' this.TextBoxSearchPattern); " is 127.
Long Statement,uComponents.DataTypes.FileDropDownList,FileDropDownListPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\FileDropDownList\FileDropDownListPrevalueEditor.cs,RenderContents,The length of the statement  "			writer.AddPrevalueRow("Use Directories:"' "Select this option to display sub-directories instead of files."' this.CheckBoxUseDirectories); " is 138.
Long Statement,uComponents.DataTypes.FilePicker,FP_Control,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\FilePicker\FP_Control.cs,CreateChildControls,The length of the statement  "			anchor.Attributes.Add("onclick"' string.Format("javascript:UmbClientMgr.openModalWindow('{0}/plugins/uComponents/Shared/Pages/DirectoryBrowser.aspx?target={1}&path={2}'' 'Choose a file or a folder'' true' 400' 500' 0' 0); return false;"' GlobalSettings.Path' this.TextBoxControl.ClientID' this.SelectedDirectory)); " is 314.
Long Statement,uComponents.DataTypes.FilePicker,FP_DataType,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\FilePicker\FP_DataType.cs,m_Control_Init,The length of the statement  "			this.m_Control.SelectedDirectory = ((FP_PrevalueEditor)this.PrevalueEditor).SelectedDirectory.Replace("~/"' string.Empty); " is 122.
Long Statement,uComponents.DataTypes.FilePicker,FP_PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\FilePicker\FP_PrevalueEditor.cs,RenderContents,The length of the statement  "			writer.AddPrevalueRow("Directory:"' "The directory to start the folder browser from' it must be relative to the root of the website."' this.RootDirectory); " is 155.
Long Statement,uComponents.DataTypes.ImagePoint,ImagePointDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ImagePoint\ImagePointDataEditor.cs,CreateChildControls,The length of the statement  "            this.markerImage.ImageUrl = this.Page.ClientScript.GetWebResourceUrl(this.GetType()' "uComponents.DataTypes.ImagePoint.ImagePointMarker.png"); " is 142.
Long Statement,uComponents.DataTypes.ImagePoint,ImagePointDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ImagePoint\ImagePointDataEditor.cs,ConfigureControls,The length of the statement  "                                // get a collection of all documents that could potentially have this imagepoint datatype instance' sharing the same image " is 122.
Long Statement,uComponents.DataTypes.ImagePoint,ImagePointDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ImagePoint\ImagePointDataEditor.cs,ConfigureControls,The length of the statement  "                                // drill down and get all documents' but stop descending a path if an imagePropertyAlias is found - any descendants of that would use a different image " is 151.
Long Statement,uComponents.DataTypes.ImagePoint,ImagePointDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ImagePoint\ImagePointDataEditor.cs,ConfigureControls,The length of the statement  "                                foreach (Document document in documents.Where(x => x.GenericProperties.Select(y => y.PropertyType.DataTypeDefinition.Id).Contains(currentDataTypeDefinitionId))) " is 160.
Long Statement,uComponents.DataTypes.ImagePoint,ImagePointDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ImagePoint\ImagePointDataEditor.cs,ConfigureControls,The length of the statement  "                                    this.CreateGhostImages(document.GenericProperties.Where(x => x.PropertyType.DataTypeDefinition.Id == currentDataTypeDefinitionId && x.Id != currentPropertyId)); " is 160.
Long Statement,uComponents.DataTypes.ImagePoint,ImagePointDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ImagePoint\ImagePointDataEditor.cs,ConfigureControls,The length of the statement  "                                foreach(Media mediaItem in media.Where(x => x.GenericProperties.Select(y => y.PropertyType.DataTypeDefinition.Id).Contains(currentDataTypeDefinitionId))) " is 153.
Long Statement,uComponents.DataTypes.ImagePoint,ImagePointDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ImagePoint\ImagePointDataEditor.cs,ConfigureControls,The length of the statement  "                                    this.CreateGhostImages(mediaItem.GenericProperties.Where(x => x.PropertyType.DataTypeDefinition.Id == currentDataTypeDefinitionId && x.Id != currentPropertyId)); " is 161.
Long Statement,uComponents.DataTypes.ImagePoint,ImagePointDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ImagePoint\ImagePointDataEditor.cs,CreateGhostImages,The length of the statement  "                    ghostImage.ImageUrl = this.Page.ClientScript.GetWebResourceUrl(this.GetType()' "uComponents.DataTypes.ImagePoint.ImagePointGhost.png"); " is 135.
Long Statement,uComponents.DataTypes.ImagePoint,ImagePointDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ImagePoint\ImagePointDataEditor.cs,CreateGhostImages,The length of the statement  "                        // if the properties are on the same item' then label with property name' otherwise default to labeling with the node / media or member name " is 140.
Long Statement,uComponents.DataTypes.ImagePoint,ImagePointPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ImagePoint\ImagePointPreValueEditor.cs,OnPreRender,The length of the statement  "            ListItem[] imagePropertyAliasListItems = this.imagePropertyAliasPicker.Items.Cast<ListItem>().OrderBy(x => x.Text).ToArray(); " is 125.
Long Statement,uComponents.DataTypes.ImagePoint,ImagePointPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ImagePoint\ImagePointPreValueEditor.cs,RenderContents,The length of the statement  "            writer.AddPrevalueRow("Image Property Alias"' "(recursive) property to use as source for image"' this.imagePropertyAliasPicker); " is 128.
Long Statement,uComponents.DataTypes.ImagePoint,ImagePointPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ImagePoint\ImagePointPreValueEditor.cs,RenderContents,The length of the statement  "            writer.AddPrevalueRow("Show Neighbours"' "show other points using this datatype' with the same image"' this.showNeighboursCheckBox); " is 132.
Long Statement,uComponents.DataTypes.IncrementalTextBox,IT_DataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\IncrementalTextBox\IT_DataEditor.cs,OnLoad,The length of the statement  "			this.RegisterEmbeddedClientResource("uComponents.DataTypes.IncrementalTextBox.Scripts.jquery.increment.js"' ClientDependencyType.Javascript); " is 141.
Long Statement,uComponents.DataTypes.IncrementalTextBox,IT_DataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\IncrementalTextBox\IT_DataEditor.cs,OnLoad,The length of the statement  "			this.RegisterEmbeddedClientResource("uComponents.DataTypes.IncrementalTextBox.Styles.IncrementalTextBox.css"' ClientDependencyType.Css); " is 136.
Long Statement,uComponents.DataTypes.IncrementalTextBox,IT_DataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\IncrementalTextBox\IT_DataEditor.cs,Render,The length of the statement  "".Replace("{0}"' TextBoxValue.ClientID).Replace("{1}"' m_prevalues.MinValue.ToString()).Replace("{2}"' m_prevalues.MaxValue.ToString()).Replace("{3}"'m_prevalues.IncrementValue.ToString()); " is 189.
Long Statement,uComponents.DataTypes.IncrementalTextBox,IT_PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\IncrementalTextBox\IT_PrevalueEditor.cs,RenderContents,The length of the statement  "			writer.AddPrevalueRow("Increment value by:"' this.IncrementValueTextBox' this.incrementValNumberReq' this.incrementValNumberRex); " is 129.
Long Statement,uComponents.DataTypes.IncrementalTextBox,IT_PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\IncrementalTextBox\IT_PrevalueEditor.cs,Save,The length of the statement  "			// need to lock this operation since multiple inserts are happening and if 2 threads reach here at the same time' there could be issues. " is 136.
Long Statement,uComponents.DataTypes.MultipleDates,MD_DataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\MultipleDates\MD_DataEditor.cs,OnLoad,The length of the statement  "			this.RegisterEmbeddedClientResource("uComponents.DataTypes.MultipleDates.scripts.main.js"' ClientDependencyType.Javascript); " is 124.
Long Statement,uComponents.DataTypes.MultipleDates,MD_DataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\MultipleDates\MD_DataEditor.cs,OnLoad,The length of the statement  "			this.RegisterEmbeddedClientResource("uComponents.DataTypes.MultipleDates.css.MultipleDates.css"' ClientDependencyType.Css); " is 123.
Long Statement,uComponents.DataTypes.MultipleDates,MD_DataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\MultipleDates\MD_DataEditor.cs,Render,The length of the statement  "			writer.AddAttribute(HtmlTextWriterAttribute.Onclick' "addItem('{0}' 'jQuery('#{1} input.hasDatepicker').val()''{2}');".Replace("{0}"' dateListId).Replace("{1}"' multilpeDateContainer).Replace("{2}"' this.SelectedValues.ClientID)); " is 230.
Long Statement,uComponents.DataTypes.MultipleDates,MD_DataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\MultipleDates\MD_DataEditor.cs,Render,The length of the statement  "			foreach (string dateValue in this.SelectedValues.Value.Split(new char[] { ''' }' StringSplitOptions.RemoveEmptyEntries)) " is 120.
Long Statement,uComponents.DataTypes.MultipleDates,MD_DataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\MultipleDates\MD_DataEditor.cs,Render,The length of the statement  "				writer.AddAttribute(HtmlTextWriterAttribute.Onclick' "removeItem(this''" + this.SelectedValues.ClientID + "'''" + dateValue + "');"); " is 133.
Long Statement,uComponents.DataTypes.MultipleDates,MD_DataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\MultipleDates\MD_DataEditor.cs,Render,The length of the statement  "			string javascript = @"<script type='text/javascript'>jQuery(document).ready(function(){ jQuery('#{0} input.hasDatepicker').attr('disabled'''disabled');  });</script>".Replace("{0}"' multilpeDateContainer); " is 205.
Long Statement,uComponents.DataTypes.MultiUrlPicker,MultiUrlPickerExtensions,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\MultiUrlPicker\MultiUrlPickerExtensions.cs,AddCssMultiUrlPickerClientDependencies,The length of the statement  "            ctl.RegisterEmbeddedClientResource("uComponents.DataTypes.MultiUrlPicker.MultiUrlPickerStyles.css"' ClientDependencyType.Css); " is 126.
Long Statement,uComponents.DataTypes.MultiUrlPicker,MultiUrlPickerExtensions,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\MultiUrlPicker\MultiUrlPickerExtensions.cs,AddJsMultiUrlPickerClientDependencies,The length of the statement  "            ctl.RegisterEmbeddedClientResource("uComponents.DataTypes.Shared.Resources.Scripts.json2.js"' ClientDependencyType.Javascript); " is 127.
Long Statement,uComponents.DataTypes.MultiUrlPicker,MultiUrlPickerExtensions,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\MultiUrlPicker\MultiUrlPickerExtensions.cs,AddJsMultiUrlPickerClientDependencies,The length of the statement  "            ctl.RegisterEmbeddedClientResource("uComponents.DataTypes.MultiUrlPicker.MultiUrlPickerScripts.js"' ClientDependencyType.Javascript); " is 133.
Long Statement,uComponents.DataTypes.Notes,NotesPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Notes\NotesPrevalueEditor.cs,OnInit,The length of the statement  "            this.Page.ClientScript.RegisterClientScriptInclude("TinyMCE"' this.ResolveUrl(SystemDirectories.UmbracoClient) + "/tinymce3/tiny_mce_src.js"); " is 142.
Long Statement,uComponents.DataTypes.Notes,NotesPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Notes\NotesPrevalueEditor.cs,RenderContents,The length of the statement  "    theme_advanced_buttons1 : 'bold'italic'underline'|'justifyleft'justifycenter'justifyright'formatselect'bullist'numlist'|'outdent'indent'|'link'unlink'anchor'image'|'code'preview'' " is 179.
Long Statement,uComponents.DataTypes.Notes,NotesPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Notes\NotesPrevalueEditor.cs,Save,The length of the statement  "                Value = Notes.Text = HttpUtility.HtmlDecode(Notes.Text)'// Due to bug in TinyMCE' need to reset Notes.Text to unencoded value " is 125.
Long Statement,uComponents.DataTypes.PropertyPicker,PropertyPickerDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\PropertyPicker\PropertyPickerDataEditor.cs,Save,The length of the statement  "				var documentType = UmbracoContext.Current.Application.Services.ContentTypeService.GetContentType(property.PropertyType.ContentTypeId); " is 134.
Long Statement,uComponents.DataTypes.PropertyPicker,PropertyPickerDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\PropertyPicker\PropertyPickerDataEditor.cs,Save,The length of the statement  "					this.customValidator.ErrorMessage = ui.Text("errorHandling"' "errorMandatory"' new[] { property.PropertyType.Alias' tab.Name }' User.GetCurrent()); " is 147.
Long Statement,uComponents.DataTypes.PropertyPicker,PropertyPickerDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\PropertyPicker\PropertyPickerDataEditor.cs,GetDefaultAttributes,The length of the statement  "			var defaultAttributes = new List<string>() { "@id"' "@version"' "@parentID"' "@level"' "@writerID"' "@nodeType"' "@template"' "@sortOrder"' "@createDate"' "@updateDate"' "@nodeName"' "@writerName"' "@nodeTypeAlias"' "@path"' "@urlName" }; " is 238.
Long Statement,uComponents.DataTypes.PropertyPicker,PropertyPickerPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\PropertyPicker\PropertyPickerPrevalueEditor.cs,CreateChildControls,The length of the statement  "			this.objectTypesDropDownList.SelectedIndexChanged += new EventHandler(this.objectTypesDropDownList_SelectedIndexChanged); " is 121.
Long Statement,uComponents.DataTypes.PropertyPicker,PropertyPickerPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\PropertyPicker\PropertyPickerPrevalueEditor.cs,CreateChildControls,The length of the statement  "			this.objectTypesDropDownList.Items.Add(new ListItem(uQuery.UmbracoObjectType.DocumentType.GetFriendlyName()' uQuery.UmbracoObjectType.DocumentType.GetGuid().ToString())); " is 170.
Long Statement,uComponents.DataTypes.PropertyPicker,PropertyPickerPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\PropertyPicker\PropertyPickerPrevalueEditor.cs,CreateChildControls,The length of the statement  "			this.objectTypesDropDownList.Items.Add(new ListItem(uQuery.UmbracoObjectType.MediaType.GetFriendlyName()' uQuery.UmbracoObjectType.MediaType.GetGuid().ToString())); " is 164.
Long Statement,uComponents.DataTypes.PropertyPicker,PropertyPickerPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\PropertyPicker\PropertyPickerPrevalueEditor.cs,CreateChildControls,The length of the statement  "			this.objectTypesDropDownList.Items.Add(new ListItem(uQuery.UmbracoObjectType.MemberType.GetFriendlyName()' uQuery.UmbracoObjectType.MemberType.GetGuid().ToString())); " is 166.
Long Statement,uComponents.DataTypes.PropertyPicker,PropertyPickerPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\PropertyPicker\PropertyPickerPrevalueEditor.cs,CreateChildControls,The length of the statement  "			this.Controls.AddPrevalueControls(this.objectTypesDropDownList' this.contentTypesDropDownList' this.includeDefaultAttributesCheckBox); " is 134.
Long Statement,uComponents.DataTypes.PropertyPicker,PropertyPickerPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\PropertyPicker\PropertyPickerPrevalueEditor.cs,RenderContents,The length of the statement  "			writer.AddPrevalueRow("Include default attributes?"' "This option includes all the default attribute properties for the given content type; e.g. @id' @nodeName' etc."' this.includeDefaultAttributesCheckBox); " is 207.
Long Statement,uComponents.DataTypes.PropertyPicker,PropertyPickerPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\PropertyPicker\PropertyPickerPrevalueEditor.cs,SetSourceContentTypes,The length of the statement  "			this.contentTypesDropDownList.Items.Add(new ListItem(string.Concat(ui.Text("general"' "choose")' "...")' string.Empty)); " is 120.
Long Statement,uComponents.DataTypes.RelationLinks,RelationLinksDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\RelationLinks\RelationLinksDataEditor.cs,BuildLinkToRelated,The length of the statement  "                // use macro for markup - to execute a macro' at least one item must be published - as context needed to execute macro ? " is 120.
Long Statement,uComponents.DataTypes.RelationLinks,RelationLinksDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\RelationLinks\RelationLinksDataEditor.cs,BuildLinkToRelated,The length of the statement  "                    contextNode = uQuery.GetNodesByXPath(string.Concat("descendant::*[@parentID = "' uQuery.RootNodeId' "]")).FirstOrDefault(); " is 123.
Long Statement,uComponents.DataTypes.RelationLinks,RelationLinksDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\RelationLinks\RelationLinksDataEditor.cs,OnLoad,The length of the statement  "			this.RegisterEmbeddedClientResource("uComponents.DataTypes.RelationLinks.RelationLinks.js"' ClientDependencyType.Javascript); " is 125.
Long Statement,uComponents.DataTypes.RelationLinks,RelationLinksPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\RelationLinks\RelationLinksPreValueEditor.cs,RenderContents,The length of the statement  "            writer.AddPrevalueRow("Relation Type"' "queries this relation type using the id of the current document / media or member"' this.relationTypeDropDownList); " is 155.
Long Statement,uComponents.DataTypes.RelationLinks,RelationLinksPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\RelationLinks\RelationLinksPreValueEditor.cs,RenderContents,The length of the statement  "            writer.AddPrevalueRow("Macro Alias"' "(optional) for custom rendering - expects a number parameter named 'id'"' this.macroDropDownList); " is 136.
Long Statement,uComponents.DataTypes.RenderMacro,RenderMacroDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\RenderMacro\RenderMacroDataEditor.cs,OnInit,The length of the statement  "					this.Controls.Add(new Literal() { Text = "<em>There are no published content nodes (yet)' therefore the macro can not be rendered.</em>" }); " is 140.
Long Statement,uComponents.DataTypes.RenderMacro,RenderMacroPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\RenderMacro\RenderMacroPrevalueEditor.cs,CreateChildControls,The length of the statement  "			this.Styles = new Literal() { ID = "Styles"' Text = "<style type='text/css'>.macroeditor h4' .macroeditor .macroDelete {display:none;}</style>" }; " is 146.
Long Statement,uComponents.DataTypes.RenderMacro,RenderMacroPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\RenderMacro\RenderMacroPrevalueEditor.cs,RenderContents,The length of the statement  "			writer.AddPrevalueRow(string.Empty' "Please note: If a document is unpublished or is used on a non-content section (e.g. media' member or custom)' then the root content node (usually your homepage) will be used as the context."' this.Styles); " is 242.
Long Statement,uComponents.DataTypes.Shared.AjaxUpload,AjaxUploadHandler,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Shared\AjaxUpload\AjaxUploadHandler.cs,ProcessRequest,The length of the statement  "                context.Response.StatusDescription = string.Format("You must include a parameter named '{0}'' which is a non-negative integer describing the subfolder under '{1}/' to save to."' m_IdParam' m_SavePath); " is 201.
Long Statement,uComponents.DataTypes.Shared.AjaxUpload,AjaxUploadHandler,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Shared\AjaxUpload\AjaxUploadHandler.cs,ProcessRequest,The length of the statement  "                        //    context.Response.StatusDescription = string.Format("File '{0}/{1}/{2}' already exists"' m_SavePath' id' shortFileName); " is 125.
Long Statement,uComponents.DataTypes.Shared.AjaxUpload,AjaxUploadHandler,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Shared\AjaxUpload\AjaxUploadHandler.cs,ProcessRequest,The length of the statement  "                            context.Response.StatusDescription = string.Format("File '{0}/{1}/{2}' could not be saved"' m_SavePath' id' shortFileName); " is 123.
Long Statement,uComponents.DataTypes.Shared.Enums,EnumHelper,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Shared\Enums\EnumHelper.cs,GetEnumListAttributeValues,The length of the statement  "					if (customAttributeData.Constructor.DeclaringType != null && (new []{ "EnumDropDownListAttribute"' "EnumCheckBoxListAttribute" }.Contains(customAttributeData.Constructor.DeclaringType.Name) && customAttributeData.NamedArguments != null)) " is 237.
Long Statement,uComponents.DataTypes.Shared.PrevalueEditors,AbstractJsonPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Shared\PrevalueEditors\AbstractJsonPrevalueEditor.cs,GetPreValueOptions,The length of the statement  "						LogHelper.Error<T>(string.Concat("uComponents: AbstractJsonPrevalueEditor.GetPreValueOptions<T> Exception."' ex.Message)' ex); " is 126.
Long Statement,uComponents.DataTypes.Shared.PrevalueEditors,AbstractPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Shared\PrevalueEditors\AbstractPrevalueEditor.cs,OnInit,The length of the statement  "			this.RegisterEmbeddedClientResource(typeof(AbstractPrevalueEditor)' Constants.PrevalueEditorCssResourcePath' ClientDependencyType.Css); " is 135.
Long Statement,uComponents.DataTypes.Shared.PrevalueEditors,AbstractPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Shared\PrevalueEditors\AbstractPrevalueEditor.cs,RenderBeginTag,The length of the statement  "			writer.AddAttribute(HtmlTextWriterAttribute.Href' string.Concat(this.DocumentationUrl' "?v="' HttpUtility.UrlEncode(infoVersion))); " is 131.
Long Statement,uComponents.DataTypes.Shared.PrevalueEditors,AbstractPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Shared\PrevalueEditors\AbstractPrevalueEditor.cs,RenderBeginTag,The length of the statement  "			writer.AddAttribute(HtmlTextWriterAttribute.Title' Helper.Dictionary.GetDictionaryItem("DocumentationForUComponents"' "View documentation for this component")); " is 160.
Long Statement,uComponents.DataTypes.Shared.PrevalueEditors,DefaultPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Shared\PrevalueEditors\DefaultPrevalueEditor.cs,OnInit,The length of the statement  "			this.RegisterEmbeddedClientResource(typeof(DefaultPrevalueEditor)' Constants.PrevalueEditorCssResourcePath' ClientDependencyType.Css); " is 134.
Long Statement,uComponents.DataTypes.Shared.PrevalueEditors,KeyValuePrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Shared\PrevalueEditors\KeyValuePrevalueEditor.cs,OnInit,The length of the statement  "			this.RegisterEmbeddedClientResource(typeof(KeyValuePrevalueEditor)' Constants.PrevalueEditorCssResourcePath' ClientDependencyType.Css); " is 135.
Long Statement,uComponents.DataTypes.Shared.PrevalueEditors,NoDBOptionsKeyValuePrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Shared\PrevalueEditors\NoDBOptionsKeyValuePrevalueEditor.cs,OnInit,The length of the statement  "			this.RegisterEmbeddedClientResource(typeof(NoDBOptionsKeyValuePrevalueEditor)' Constants.PrevalueEditorCssResourcePath' ClientDependencyType.Css); " is 146.
Long Statement,uComponents.DataTypes.Shared.PrevalueEditors,NoDBOptionsKeyValuePrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Shared\PrevalueEditors\NoDBOptionsKeyValuePrevalueEditor.cs,CreateChildControls,The length of the statement  "			this.RequiredControl = new RequiredFieldValidator() { ID = "requiredField"' ForeColor = Color.Red' ControlToValidate = this.TextControl.ID' ErrorMessage = " Field is required" }; " is 178.
Long Statement,uComponents.DataTypes.Similarity,MoreUmbracoDocsLikeThis,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Similarity\MoreUmbracoDocsLikeThis.cs,GetLuceneDocNo,The length of the statement  "			var parser = new QueryParser(Lucene.Net.Util.Version.LUCENE_29' "__NodeId"' new StandardAnalyzer(Lucene.Net.Util.Version.LUCENE_29)); " is 133.
Long Statement,uComponents.DataTypes.Similarity,SimilarityDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Similarity\SimilarityDataEditor.cs,OnLoad,The length of the statement  "            this.RegisterEmbeddedClientResource("uComponents.DataTypes.Similarity.SimilarityScripts.js"' ClientDependencyType.Javascript); " is 126.
Long Statement,uComponents.DataTypes.Similarity,SimilarityDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Similarity\SimilarityDataEditor.cs,SearchResults_ItemDataBound,The length of the statement  "                    litSelectNodeName.Text = string.Format("<i>{0}</i>"' Helper.Dictionary.GetDictionaryItem("NodeNoLongerExists"' "NODE NO LONGER EXISTS")); " is 137.
Long Statement,uComponents.DataTypes.Similarity,SimilarityDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Similarity\SimilarityDataEditor.cs,RenderTooltip,The length of the statement  "            //this.Page.Controls.AddAt(0' new LiteralControl("<div id='MNTPTooltip'><div class='throbber'></div><div class='tooltipInfo'></div></div>")); " is 141.
Long Statement,uComponents.DataTypes.Similarity,SimilarityDataType,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Similarity\SimilarityDataType.cs,_mControl_Init,The length of the statement  "            var properties = ((SimilarityPrevalueEditor)PrevalueEditor).SelectedProperties.Split(new[] { Constants.Common.COMMA }).ToList(); " is 128.
Long Statement,uComponents.DataTypes.Similarity,SimilarityPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Similarity\SimilarityPrevalueEditor.cs,Render,The length of the statement  "            writer.AddPrevalueRow("Properties to search on :"' "Please select properties to search on "' this._propertiesToSearchOn); " is 121.
Long Statement,uComponents.DataTypes.Similarity,SimilarityPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Similarity\SimilarityPrevalueEditor.cs,Render,The length of the statement  "            writer.AddPrevalueRow("Index to search on"' "Please select umbraco index to search' please note this will not work with media index"' this._indexToSearch); " is 155.
Long Statement,uComponents.DataTypes.Similarity.Net,MoreLikeThis,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Similarity\Net\MoreLikeThis.cs,Like,The length of the statement  "			return Like(new System.IO.StreamReader(((System.Net.HttpWebRequest)System.Net.WebRequest.Create(u)).GetResponse().GetResponseStream()' System.Text.Encoding.Default)); " is 166.
Long Statement,uComponents.DataTypes.Similarity.Net,MoreLikeThis,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Similarity\Net\MoreLikeThis.cs,RetrieveInterestingTerms,The length of the statement  "			int lim = maxQueryTerms; // have to be careful' retrieveTerms returns all words but that's probably not useful to our caller... " is 127.
Long Statement,uComponents.DataTypes.SqlAutoComplete,SqlAutoCompleteBase,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlAutoComplete\SqlAutoCompleteBase.cs,GetOptions,The length of the statement  "			return (SqlAutoCompleteOptions)HttpContext.Current.Cache[string.Concat(DataTypeConstants.SqlAutoCompleteId' "_options_"' datatypeDefinitionId)]; " is 144.
Long Statement,uComponents.DataTypes.SqlAutoComplete,SqlAutoCompleteBase,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlAutoComplete\SqlAutoCompleteBase.cs,GetData,The length of the statement  "				selectedValues = XDocument.Parse(selectedItemsXml).Descendants("Item").Select(x => x.Attribute("Value").Value).ToArray(); " is 121.
Long Statement,uComponents.DataTypes.SqlAutoComplete,SqlAutoCompleteDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlAutoComplete\SqlAutoCompleteDataEditor.cs,CreateChildControls,The length of the statement  "            //div.Attributes.Add("data-min-items"' this.options.MinItems.ToString()); -- not required client side - TODO: could visually indicate number required ? " is 151.
Long Statement,uComponents.DataTypes.SqlAutoComplete,SqlAutoCompleteDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlAutoComplete\SqlAutoCompleteDataEditor.cs,OnLoad,The length of the statement  "            this.RegisterEmbeddedClientResource("uComponents.DataTypes.SqlAutoComplete.SqlAutoComplete.css"' ClientDependencyType.Css); " is 123.
Long Statement,uComponents.DataTypes.SqlAutoComplete,SqlAutoCompleteDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlAutoComplete\SqlAutoCompleteDataEditor.cs,OnLoad,The length of the statement  "            this.RegisterEmbeddedClientResource("uComponents.DataTypes.SqlAutoComplete.SqlAutoComplete.js"' ClientDependencyType.Javascript); " is 129.
Long Statement,uComponents.DataTypes.SqlAutoComplete,SqlAutoCompleteDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlAutoComplete\SqlAutoCompleteDataEditor.cs,OnLoad,The length of the statement  "            ScriptManager.RegisterStartupScript(this' typeof(SqlAutoCompleteDataEditor)' this.ClientID + "_init"' startupScript' false); " is 124.
Long Statement,uComponents.DataTypes.SqlAutoComplete,SqlAutoCompleteDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlAutoComplete\SqlAutoCompleteDataEditor.cs,OnLoad,The length of the statement  "            HttpContext.Current.Cache[string.Concat(DataTypeConstants.SqlAutoCompleteId' "_options_"' this.DataTypeDefinitionId)] = this.options; " is 133.
Long Statement,uComponents.DataTypes.SqlAutoComplete,SqlAutoCompleteDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlAutoComplete\SqlAutoCompleteDataEditor.cs,Save,The length of the statement  "            // fail safe check as UI shouldn't allow excess items to be selected (datatype configuration could have been changed since data was stored) " is 139.
Long Statement,uComponents.DataTypes.SqlAutoComplete,SqlAutoCompleteDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlAutoComplete\SqlAutoCompleteDataEditor.cs,Save,The length of the statement  "                this.customValidator.ErrorMessage = ui.Text("errorHandling"' "errorRegExpWithoutTab"' property.PropertyType.Name' User.GetCurrent()); " is 133.
Long Statement,uComponents.DataTypes.SqlAutoComplete,SqlAutoCompletePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlAutoComplete\SqlAutoCompletePreValueEditor.cs,CreateChildControls,The length of the statement  "                this.connectionStringDropDownList.Items.Add(new ListItem(connectionStringSettings.Name' connectionStringSettings.Name)); " is 120.
Long Statement,uComponents.DataTypes.SqlAutoComplete,SqlAutoCompletePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlAutoComplete\SqlAutoCompletePreValueEditor.cs,Save,The length of the statement  "                HttpContext.Current.Cache.Remove(string.Concat(DataTypeConstants.SqlAutoCompleteId' "_options_"' this.DataType.DataTypeDefinitionId)); " is 134.
Long Statement,uComponents.DataTypes.SqlAutoComplete,SqlAutoCompletePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlAutoComplete\SqlAutoCompletePreValueEditor.cs,RenderContents,The length of the statement  "            writer.AddPrevalueRow("SQL Expression"' @" expects a result set with two fields : 'Text' and 'Value' - can include the tokens : @currentId and @autoCompleteText"' this.sqlTextBox' this.sqlRequiredFieldValidator' this.sqlCustomValidator); " is 237.
Long Statement,uComponents.DataTypes.SqlAutoComplete,SqlAutoCompletePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlAutoComplete\SqlAutoCompletePreValueEditor.cs,RenderContents,The length of the statement  "            writer.AddPrevalueRow("Connection String"' "add items to the web.config &lt;connectionStrings /&gt; section to list here"' this.connectionStringDropDownList); " is 158.
Long Statement,uComponents.DataTypes.SqlAutoComplete,SqlAutoCompletePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlAutoComplete\SqlAutoCompletePreValueEditor.cs,RenderContents,The length of the statement  "            writer.AddPrevalueRow("Min Length"' "number of chars in the autocomplete text box before querying for data"' this.minLengthDropDownList); " is 137.
Long Statement,uComponents.DataTypes.SqlAutoComplete,SqlAutoCompletePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlAutoComplete\SqlAutoCompletePreValueEditor.cs,RenderContents,The length of the statement  "            writer.AddPrevalueRow("Max Suggestions"' "max number of items to return as autocomplete suggestions - 0 means no limit"' this.maxSuggestionsTextBox); " is 149.
Long Statement,uComponents.DataTypes.SqlAutoComplete,SqlAutoCompletePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlAutoComplete\SqlAutoCompletePreValueEditor.cs,RenderContents,The length of the statement  "            writer.AddPrevalueRow("Allow Duplicates"' "when checked' duplicate values can be selected"' this.allowDuplicatesCheckBox); " is 122.
Long Statement,uComponents.DataTypes.SqlCheckBoxList,SqlCheckBoxListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlCheckBoxList\SqlCheckBoxListPreValueEditor.cs,CreateChildControls,The length of the statement  "				this.connectionStringDropDownList.Items.Add(new ListItem(connectionStringSettings.Name' connectionStringSettings.Name)); " is 120.
Long Statement,uComponents.DataTypes.SqlCheckBoxList,SqlCheckBoxListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlCheckBoxList\SqlCheckBoxListPreValueEditor.cs,RenderContents,The length of the statement  "			writer.AddPrevalueRow("SQL Expression"' "expects a result set with two fields : 'Text' and 'Value' - can include the token: @currentId"' this.sqlTextBox' this.sqlRequiredFieldValidator' this.sqlCustomValidator); " is 211.
Long Statement,uComponents.DataTypes.SqlCheckBoxList,SqlCheckBoxListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlCheckBoxList\SqlCheckBoxListPreValueEditor.cs,RenderContents,The length of the statement  "			writer.AddPrevalueRow("Connection String"' "add items to the web.config &lt;connectionStrings /&gt; section to list here"' this.connectionStringDropDownList); " is 158.
Long Statement,uComponents.DataTypes.SqlDropDownList,SqlDropDownListDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlDropDownList\SqlDropDownListDataEditor.cs,Save,The length of the statement  "				var documentType = UmbracoContext.Current.Application.Services.ContentTypeService.GetContentType(property.PropertyType.ContentTypeId); " is 134.
Long Statement,uComponents.DataTypes.SqlDropDownList,SqlDropDownListDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlDropDownList\SqlDropDownListDataEditor.cs,Save,The length of the statement  "					this.customValidator.ErrorMessage = ui.Text("errorHandling"' "errorMandatory"' new string[] { property.PropertyType.Name' tab.Name }' User.GetCurrent()); " is 153.
Long Statement,uComponents.DataTypes.SqlDropDownList,SqlDropDownListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlDropDownList\SqlDropDownListPreValueEditor.cs,CreateChildControls,The length of the statement  "				this.connectionStringDropDownList.Items.Add(new ListItem(connectionStringSettings.Name' connectionStringSettings.Name)); " is 120.
Long Statement,uComponents.DataTypes.SqlDropDownList,SqlDropDownListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlDropDownList\SqlDropDownListPreValueEditor.cs,RenderContents,The length of the statement  "			writer.AddPrevalueRow("SQL Expression"' "expects a result set with two fields : 'Text' and 'Value' - can include the token: @currentId"' this.sqlTextBox' this.sqlRequiredFieldValidator' this.sqlCustomValidator); " is 211.
Long Statement,uComponents.DataTypes.SqlDropDownList,SqlDropDownListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlDropDownList\SqlDropDownListPreValueEditor.cs,RenderContents,The length of the statement  "			writer.AddPrevalueRow("Connection String"' "add items to the web.config &lt;connectionStrings /&gt; section to list here"' this.connectionStringDropDownList); " is 158.
Long Statement,uComponents.DataTypes.SubTabs,SubTabsDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SubTabs\SubTabsDataEditor.cs,CreateChildControls,The length of the statement  "                            subTabButton.Attributes.Add("data-tab"' tab.Name); // added an attribute to identify which tab this button relates to' as haven't yet calculated the other parms to pass into activateSubTab() " is 190.
Long Statement,uComponents.DataTypes.SubTabs,SubTabsDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SubTabs\SubTabsDataEditor.cs,CreateChildControls,The length of the statement  "                            var hostTabAnchor = $('li#' + $(subTabsPanel).parentsUntil('div.tabpagescrollinglayer'' 'div.tabpageContent').parent().attr('id').replace('layer_contentlayer'' '') + ' > a'); " is 174.
Long Statement,uComponents.DataTypes.SubTabs,SubTabsDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SubTabs\SubTabsDataEditor.cs,CreateChildControls,The length of the statement  "                            // init the first sub tab' and if it's already lit (by Umbraco) then pass in true on the last param so that it's toggled into action " is 132.
Long Statement,uComponents.DataTypes.SubTabs,SubTabsDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SubTabs\SubTabsDataEditor.cs,CreateChildControls,The length of the statement  "                            activateSubTab(hostTabAnchor' subTabsPanel' '" + this.options.SubTabType.ToString() + @"'' $(hostTabAnchor).parent('li').hasClass('tabOn'));  " is 140.
Long Statement,uComponents.DataTypes.SubTabs,SubTabsDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SubTabs\SubTabsDataEditor.cs,CreateChildControls,The length of the statement  "                            $(hostTabAnchor).click(function() { activateSubTab(this' subTabsPanel' '" + this.options.SubTabType.ToString() + @"'' true); }); " is 128.
Long Statement,uComponents.DataTypes.SubTabs,SubTabsDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SubTabs\SubTabsDataEditor.cs,CreateChildControls,The length of the statement  "                                // disable the button being clicked (this allows us to also identify which tab should be activated within the activateSubTab method - or set a flag ?) " is 150.
Long Statement,uComponents.DataTypes.SubTabs,SubTabsDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SubTabs\SubTabsDataEditor.cs,CreateChildControls,The length of the statement  "                ScriptManager.RegisterStartupScript(this' typeof(SubTabsDataEditor)' this.ClientID + "_init"' stringBuilder.ToString()' false); " is 127.
Long Statement,uComponents.DataTypes.SubTabs,SubTabsPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SubTabs\SubTabsPreValueEditor.cs,CreateChildControls,The length of the statement  "                    items.Add(new ListItem(string.Format("<span style=\"font-weight:normal !important;\">{0} : </span> {1}"' contentType.Name' propertyGroup.Name)' propertyGroup.Id.ToString())); " is 174.
Long Statement,uComponents.DataTypes.TextstringArray,TextstringArrayControl,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\TextstringArray\TextstringArrayControl.cs,OnLoad,The length of the statement  "			this.RegisterEmbeddedClientResource("uComponents.DataTypes.Shared.Resources.Scripts.json2.js"' ClientDependencyType.Javascript); " is 128.
Long Statement,uComponents.DataTypes.TextstringArray,TextstringArrayControl,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\TextstringArray\TextstringArrayControl.cs,OnLoad,The length of the statement  "			this.RegisterEmbeddedClientResource("uComponents.DataTypes.TextstringArray.TextstringArray.css"' ClientDependencyType.Css); " is 123.
Long Statement,uComponents.DataTypes.TextstringArray,TextstringArrayControl,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\TextstringArray\TextstringArrayControl.cs,OnLoad,The length of the statement  "			this.RegisterEmbeddedClientResource("uComponents.DataTypes.TextstringArray.TextstringArray.js"' ClientDependencyType.Javascript); " is 129.
Long Statement,uComponents.DataTypes.TextstringArray,TextstringArrayControl,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\TextstringArray\TextstringArrayControl.cs,OnPreRender,The length of the statement  "						var newCells = new string(Constants.Common.COMMA' diff - 1).Split(new[] { Constants.Common.COMMA }' StringSplitOptions.None); " is 125.
Long Statement,uComponents.DataTypes.TextstringArray,TextstringArrayControl,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\TextstringArray\TextstringArrayControl.cs,OnPreRender,The length of the statement  "			var emptyRow = new string(Constants.Common.COMMA' this.Options.ItemsPerRow - 1).Split(new[] { Constants.Common.COMMA }' StringSplitOptions.None); " is 145.
Long Statement,uComponents.DataTypes.TextstringArray,TextstringArrayControl,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\TextstringArray\TextstringArrayControl.cs,Render,The length of the statement  "				writer.WriteLine("<a href='#add' class='textstring-row-add' title='Add a new row'><img src='{0}/images/small_plus.png' /></a>"' GlobalSettings.Path); " is 149.
Long Statement,uComponents.DataTypes.TextstringArray,TextstringArrayControl,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\TextstringArray\TextstringArrayControl.cs,Render,The length of the statement  "				writer.WriteLine("<a href='#remove' class='textstring-row-remove' title='Remove this row'><img src='{0}/images/small_minus.png' /></a>"' GlobalSettings.Path); " is 158.
Long Statement,uComponents.DataTypes.TextstringArray,TextstringArrayControl,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\TextstringArray\TextstringArrayControl.cs,Render,The length of the statement  "					writer.WriteLine("<div class='textstring-row-sort' title='Re-order this row' style='background: url({0}/images/sort.png) no-repeat 0 2px;'></div>"' GlobalSettings.Path); " is 169.
Long Statement,uComponents.DataTypes.TextstringArray,TextstringArrayControl,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\TextstringArray\TextstringArrayControl.cs,Render,The length of the statement  "			var javascriptMethod = string.Concat("new jQuery.textstringArray($('#"' this.ClientID' "')' { hiddenId: '#"' this.SelectedValues.ClientID' "'' minimum: "' this.Options.MinimumRows' "' maximum: "' this.Options.MaximumRows' "});"); " is 229.
Long Statement,uComponents.DataTypes.TextstringArray,TextstringArrayControl,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\TextstringArray\TextstringArrayControl.cs,Render,The length of the statement  "			var javascript = string.Concat("<script type='text/javascript'>jQuery(window).load(function(){"' javascriptMethod' "});</script>"); " is 131.
Long Statement,uComponents.DataTypes.TextstringArray,TextstringArrayPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\TextstringArray\TextstringArrayPrevalueEditor.cs,RenderContents,The length of the statement  "			writer.AddPrevalueRow("Show Column Labels?"' "Enter a label for each column; you may also use dictionary item syntax (e.g. <code>[#dictionaryItem]</code>). (Optional - blank labels are acceptable)"' this.CheckBoxShowColumnLabels); " is 230.
Long Statement,uComponents.DataTypes.TextstringArray,TextstringArrayPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\TextstringArray\TextstringArrayPrevalueEditor.cs,RenderContents,The length of the statement  "			writer.AddPrevalueRow("Maximum:"' "Maximum number of rows to display. Use -1 for unlimited rows."' this.TextBoxMaximumRows); " is 124.
Long Statement,uComponents.DataTypes.ToggleBox,TB_Control,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ToggleBox\TB_Control.cs,OnLoad,The length of the statement  "			this.RegisterEmbeddedClientResource("uComponents.DataTypes.ToggleBox.Scripts.jquery.togglebox.js"' ClientDependencyType.Javascript); " is 132.
Long Statement,uComponents.DataTypes.ToggleBox,TB_Control,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ToggleBox\TB_Control.cs,Render,The length of the statement  "			var javascriptMethod = string.Format("jQuery('#{0}').checkToggle({{ {1} bypass_skin: true }});"' this.CheckBoxControl.ClientID' options); " is 137.
Long Statement,uComponents.DataTypes.ToggleBox,TB_Control,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ToggleBox\TB_Control.cs,Render,The length of the statement  "			var javascript = string.Concat("<script type='text/javascript'>jQuery(window).load(function(){ "' javascriptMethod' " });</script>"); " is 133.
Long Statement,uComponents.DataTypes.ToggleBox,TB_PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ToggleBox\TB_PrevalueEditor.cs,OnInit,The length of the statement  "			this.RegisterEmbeddedClientResource("uComponents.DataTypes.Shared.Resources.Scripts.mColorPicker.js"' ClientDependencyType.Javascript); " is 135.
Long Statement,uComponents.DataTypes.ToggleBox,TB_PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ToggleBox\TB_PrevalueEditor.cs,CreateChildControls,The length of the statement  "			this.Controls.AddPrevalueControls(this.DefaultValue' this.OffBackgroundColor' this.OffText' this.OnBackgroundColor' this.OnText); " is 129.
Long Statement,uComponents.DataTypes.ToggleBox,TB_PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ToggleBox\TB_PrevalueEditor.cs,RenderContents,The length of the statement  "			writer.AddPrevalueRow("Default state"' "The initial position for the ToggleBox on the edit page' either 'on' or 'off'"' this.DefaultValue); " is 139.
Long Statement,uComponents.DataTypes.UrlPicker.Services,UrlPickerService,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\UrlPicker\Services\UrlPickerService.cs,MediaNodeUrl,The length of the statement  "            // Github Issue #30 - A 500 server error is thrown when a local Umbraco media file is attempted to be loaded/added in Umbraco 6.2.5 " is 131.
Long Statement,uComponents.DataTypes.UrlPicker,UrlPickerExtensions,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\UrlPicker\UrlPickerExtensions.cs,AddJsUrlPickerClientDependencies,The length of the statement  "			ctl.RegisterEmbeddedClientResource("uComponents.DataTypes.Shared.Resources.Scripts.json2.js"' ClientDependencyType.Javascript); " is 127.
Long Statement,uComponents.DataTypes.UrlPicker,UrlPickerExtensions,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\UrlPicker\UrlPickerExtensions.cs,AddJsUrlPickerClientDependencies,The length of the statement  "			ctl.RegisterEmbeddedClientResource("uComponents.DataTypes.Shared.Resources.Scripts.jquery.form.js"' ClientDependencyType.Javascript); " is 133.
Long Statement,uComponents.DataTypes.UrlPicker,UrlPickerExtensions,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\UrlPicker\UrlPickerExtensions.cs,AddJsUrlPickerClientDependencies,The length of the statement  "			ctl.RegisterEmbeddedClientResource("uComponents.DataTypes.UrlPicker.UrlPickerScripts.js"' ClientDependencyType.Javascript); " is 123.
Long Statement,uComponents.DataTypes.UrlPicker,UrlPickerPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\UrlPicker\UrlPickerPreValueEditor.cs,CreateChildControls,The length of the statement  "            this.Controls.AddPrevalueControls(ModeSelector' DefaultModeDropDown' DataFormatDropDown' EnableTitleCheckbox' EnableNewWindowCheckbox); " is 135.
Long Statement,uComponents.DataTypes.UrlPicker,UrlPickerPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\UrlPicker\UrlPickerPreValueEditor.cs,Render,The length of the statement  "            writer.AddPrevalueRow("Default mode:"' "Choose a mode which is shown for empty instances of this data type"' this.DefaultModeDropDown); " is 135.
Long Statement,uComponents.DataTypes.UrlPicker,UrlPickerPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\UrlPicker\UrlPickerPreValueEditor.cs,Render,The length of the statement  "            writer.AddPrevalueRow("Allow new window:"' "User can specify link to open in new window"' this.EnableNewWindowCheckbox); " is 120.
Long Statement,uComponents.DataTypes.UserPicker,UserPickerPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\UserPicker\UserPickerPrevalueEditor.cs,Save,The length of the statement  "			options.SelectedUserTypes = this.UserTypesList.Items.Cast<ListItem>().Where(i => i.Selected == true).Select(i => i.Value).ToArray(); " is 132.
Long Statement,uComponents.DataTypes.XmlDropDownList,XmlDropDownListPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XmlDropDownList\XmlDropDownListPrevalueEditor.cs,CreateChildControls,The length of the statement  "			this.Controls.AddPrevalueControls(this.PathPickerXmlFilePath' this.TextBoxXPathExpression' this.TextBoxTextColumn' this.TextBoxValueColumn); " is 140.
Long Statement,uComponents.DataTypes.XmlDropDownList,XmlDropDownListPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XmlDropDownList\XmlDropDownListPrevalueEditor.cs,RenderContents,The length of the statement  "			writer.AddPrevalueRow("XPath Expression:"' "The XPath expression to select the nodes used in the XML file."' this.TextBoxXPathExpression); " is 138.
Long Statement,uComponents.DataTypes.XmlDropDownList,XmlDropDownListPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XmlDropDownList\XmlDropDownListPrevalueEditor.cs,RenderContents,The length of the statement  "			writer.AddPrevalueRow("Text column:"' "The name (or XPath expression) of the field used for the item's display text."' this.TextBoxTextColumn); " is 143.
Long Statement,uComponents.DataTypes.XmlDropDownList,XmlDropDownListPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XmlDropDownList\XmlDropDownListPrevalueEditor.cs,RenderContents,The length of the statement  "			writer.AddPrevalueRow("Value column:"' "The name (or XPath expression) of the field used for the item's value."' this.TextBoxValueColumn); " is 138.
Long Statement,uComponents.DataTypes.XPathAutoComplete,XPathAutoCompleteBase,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathAutoComplete\XPathAutoCompleteBase.cs,GetOptions,The length of the statement  "            return (XPathAutoCompleteOptions)HttpContext.Current.Cache[string.Concat(DataTypeConstants.XPathAutoCompleteId' "_options_"' datatypeDefinitionId)]; " is 148.
Long Statement,uComponents.DataTypes.XPathAutoComplete,XPathAutoCompleteBase,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathAutoComplete\XPathAutoCompleteBase.cs,GetIndex,The length of the statement  "            // a sorted list is used for populated' so that it's quick to find duplicates when adding items' and this can be converted to a List for returning (so that a binary search can be used) " is 184.
Long Statement,uComponents.DataTypes.XPathAutoComplete,XPathAutoCompleteBase,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathAutoComplete\XPathAutoCompleteBase.cs,GetIndex,The length of the statement  "                    foreach (KeyValuePair<string' int> keyValuePair in uQuery.GetNodesByXPath(options.XPath).Select(x => new KeyValuePair<string' int>(x.Name' x.Id))) " is 146.
Long Statement,uComponents.DataTypes.XPathAutoComplete,XPathAutoCompleteBase,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathAutoComplete\XPathAutoCompleteBase.cs,GetIndex,The length of the statement  "                    foreach (KeyValuePair<string' int> keyValuePair in uQuery.GetMediaByXPath(options.XPath).Select(x => new KeyValuePair<string' int>(x.Text' x.Id))) " is 146.
Long Statement,uComponents.DataTypes.XPathAutoComplete,XPathAutoCompleteBase,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathAutoComplete\XPathAutoCompleteBase.cs,GetIndex,The length of the statement  "                    foreach (KeyValuePair<string' int> keyValuePair in uQuery.GetMembersByXPath(options.XPath).Select(x => new KeyValuePair<string' int>(x.Text' x.Id))) " is 148.
Long Statement,uComponents.DataTypes.XPathAutoComplete,XPathAutoCompleteBase,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathAutoComplete\XPathAutoCompleteBase.cs,GetData,The length of the statement  "                // get the index to search on from the cache (index contains all strings used for autocomplete comparrision + the Ids to which they relate) " is 139.
Long Statement,uComponents.DataTypes.XPathAutoComplete,XPathAutoCompleteBase,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathAutoComplete\XPathAutoCompleteBase.cs,GetData,The length of the statement  "                // TODO: [HR] implement a BinarySearch on the index looking for the first match' and then another binary search looking for the first non match from that point " is 159.
Long Statement,uComponents.DataTypes.XPathAutoComplete,XPathAutoCompleteDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathAutoComplete\XPathAutoCompleteDataEditor.cs,CreateChildControls,The length of the statement  "            //div.Attributes.Add("data-min-items"' this.options.MinItems.ToString()); -- not required client side - TODO: could visually indicate number required ? " is 151.
Long Statement,uComponents.DataTypes.XPathAutoComplete,XPathAutoCompleteDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathAutoComplete\XPathAutoCompleteDataEditor.cs,OnLoad,The length of the statement  "            this.RegisterEmbeddedClientResource("uComponents.DataTypes.XPathAutoComplete.XPathAutoComplete.css"' ClientDependencyType.Css); " is 127.
Long Statement,uComponents.DataTypes.XPathAutoComplete,XPathAutoCompleteDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathAutoComplete\XPathAutoCompleteDataEditor.cs,OnLoad,The length of the statement  "            this.RegisterEmbeddedClientResource("uComponents.DataTypes.XPathAutoComplete.XPathAutoComplete.js"' ClientDependencyType.Javascript); " is 133.
Long Statement,uComponents.DataTypes.XPathAutoComplete,XPathAutoCompleteDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathAutoComplete\XPathAutoCompleteDataEditor.cs,OnLoad,The length of the statement  "            ScriptManager.RegisterStartupScript(this' typeof(XPathAutoCompleteDataEditor)' this.ClientID + "_init"' startupScript' false); " is 126.
Long Statement,uComponents.DataTypes.XPathAutoComplete,XPathAutoCompleteDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathAutoComplete\XPathAutoCompleteDataEditor.cs,OnLoad,The length of the statement  "            HttpContext.Current.Cache[string.Concat(DataTypeConstants.XPathAutoCompleteId' "_options_"' this.DataTypeDefinitionId)] = this.options; " is 135.
Long Statement,uComponents.DataTypes.XPathAutoComplete,XPathAutoCompleteDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathAutoComplete\XPathAutoCompleteDataEditor.cs,Save,The length of the statement  "            // fail safe check as UI shouldn't allow excess items to be selected (datatype configuration could have been changed since data was stored) " is 139.
Long Statement,uComponents.DataTypes.XPathAutoComplete,XPathAutoCompleteDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathAutoComplete\XPathAutoCompleteDataEditor.cs,Save,The length of the statement  "                this.customValidator.ErrorMessage = ui.Text("errorHandling"' "errorRegExpWithoutTab"' property.PropertyType.Name' User.GetCurrent()); " is 133.
Long Statement,uComponents.DataTypes.XPathAutoComplete,XPathAutoCompletePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathAutoComplete\XPathAutoCompletePreValueEditor.cs,CreateChildControls,The length of the statement  "            this.typeRadioButtonList.Items.Add(new ListItem(uQuery.UmbracoObjectType.Document.GetFriendlyName()' uQuery.UmbracoObjectType.Document.GetGuid().ToString())); " is 158.
Long Statement,uComponents.DataTypes.XPathAutoComplete,XPathAutoCompletePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathAutoComplete\XPathAutoCompletePreValueEditor.cs,CreateChildControls,The length of the statement  "            this.typeRadioButtonList.Items.Add(new ListItem(uQuery.UmbracoObjectType.Media.GetFriendlyName()' uQuery.UmbracoObjectType.Media.GetGuid().ToString())); " is 152.
Long Statement,uComponents.DataTypes.XPathAutoComplete,XPathAutoCompletePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathAutoComplete\XPathAutoCompletePreValueEditor.cs,CreateChildControls,The length of the statement  "            this.typeRadioButtonList.Items.Add(new ListItem(uQuery.UmbracoObjectType.Member.GetFriendlyName()' uQuery.UmbracoObjectType.Member.GetGuid().ToString())); " is 154.
Long Statement,uComponents.DataTypes.XPathAutoComplete,XPathAutoCompletePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathAutoComplete\XPathAutoCompletePreValueEditor.cs,Save,The length of the statement  "                HttpContext.Current.Cache.Remove(string.Concat(DataTypeConstants.XPathAutoCompleteId' "_options_"' this.DataType.DataTypeDefinitionId)); " is 136.
Long Statement,uComponents.DataTypes.XPathAutoComplete,XPathAutoCompletePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathAutoComplete\XPathAutoCompletePreValueEditor.cs,RenderContents,The length of the statement  "            writer.AddPrevalueRow("XPath Expression"' @"expects a result set of node' meda or member elements"' this.xPathTextBox' this.xPathRequiredFieldValidator' this.xPathCustomValidator); " is 180.
Long Statement,uComponents.DataTypes.XPathAutoComplete,XPathAutoCompletePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathAutoComplete\XPathAutoCompletePreValueEditor.cs,RenderContents,The length of the statement  "            writer.AddPrevalueRow("Min Length"' "number of chars in the autocomplete text box before querying for data"' this.minLengthDropDownList); " is 137.
Long Statement,uComponents.DataTypes.XPathAutoComplete,XPathAutoCompletePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathAutoComplete\XPathAutoCompletePreValueEditor.cs,RenderContents,The length of the statement  "            writer.AddPrevalueRow("Max Suggestions"' "max number of items to return as autocomplete suggestions - 0 means no limit"' this.maxSuggestionsTextBox); " is 149.
Long Statement,uComponents.DataTypes.XPathAutoComplete,XPathAutoCompletePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathAutoComplete\XPathAutoCompletePreValueEditor.cs,RenderContents,The length of the statement  "            writer.AddPrevalueRow("Allow Duplicates"' "when checked' duplicate values can be selected"' this.allowDuplicatesCheckBox); " is 122.
Long Statement,umbraco.editorControls.XPathRadioButtonList,XPathRadioButtonListDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathRadioButtonList\XPathRadioButtonListDataEditor.cs,Save,The length of the statement  "                    this.customValidator.ErrorMessage = ui.Text("errorHandling"' "errorMandatory"' new string[] { property.PropertyType.Alias' tab.Caption }' User.GetCurrent()); " is 157.
Long Statement,umbraco.editorControls.XPathRadioButtonList,XPathRadioButtonListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathRadioButtonList\XPathRadioButtonListPreValueEditor.cs,CreateChildControls,The length of the statement  "            this.typeRadioButtonList.Items.Add(new ListItem(uQuery.UmbracoObjectType.Document.GetFriendlyName()' uQuery.UmbracoObjectType.Document.GetGuid().ToString())); " is 158.
Long Statement,umbraco.editorControls.XPathRadioButtonList,XPathRadioButtonListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathRadioButtonList\XPathRadioButtonListPreValueEditor.cs,CreateChildControls,The length of the statement  "            this.typeRadioButtonList.Items.Add(new ListItem(uQuery.UmbracoObjectType.Media.GetFriendlyName()' uQuery.UmbracoObjectType.Media.GetGuid().ToString())); " is 152.
Long Statement,umbraco.editorControls.XPathRadioButtonList,XPathRadioButtonListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathRadioButtonList\XPathRadioButtonListPreValueEditor.cs,CreateChildControls,The length of the statement  "            this.typeRadioButtonList.Items.Add(new ListItem(uQuery.UmbracoObjectType.Member.GetFriendlyName()' uQuery.UmbracoObjectType.Member.GetGuid().ToString())); " is 154.
Long Statement,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListDataEditor.cs,CreateChildControls,The length of the statement  "                    "property-alias-" + this.Editor.ID.Replace("prop_"' string.Empty)); // http://our.umbraco.org/forum/developers/extending-umbraco/7452-Document-type-alias-in-custom-datatype " is 172.
Long Statement,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListDataEditor.cs,OnLoad,The length of the statement  "                ClientDependencyLoader clientDependencyLoader = ClientDependencyLoader.GetInstance(new HttpContextWrapper(HttpContext.Current)); " is 128.
Long Statement,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListDataEditor.cs,OnLoad,The length of the statement  "            this.RegisterEmbeddedClientResource("uComponents.DataTypes.XPathTemplatableList.XPathTemplatableList.css"' ClientDependencyType.Css); " is 133.
Long Statement,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListDataEditor.cs,OnLoad,The length of the statement  "            this.RegisterEmbeddedClientResource("uComponents.DataTypes.XPathTemplatableList.XPathTemplatableList.js"' ClientDependencyType.Javascript); " is 139.
Long Statement,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListDataEditor.cs,OnLoad,The length of the statement  "            // if selecting a js file' it'll read in the contents of that file server side' and pass that string as a callback to the datatype init function " is 144.
Long Statement,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListDataEditor.cs,OnLoad,The length of the statement  "            ScriptManager.RegisterStartupScript(this' typeof(XPathTemplatableListDataEditor)' this.ClientID + "_init"' startupScript' false); " is 129.
Long Statement,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListPreValueEditor.cs,OnLoad,The length of the statement  "            // check to see if this control is being loaded for the first time (could be a postback of a different datatype - having changed the render control setting) " is 156.
Long Statement,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListPreValueEditor.cs,OnLoad,The length of the statement  "                this.typeRadioButtonList.Items.Add(new ListItem(uQuery.UmbracoObjectType.Document.GetFriendlyName()' uQuery.UmbracoObjectType.Document.GetGuid().ToString())); " is 158.
Long Statement,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListPreValueEditor.cs,OnLoad,The length of the statement  "                this.typeRadioButtonList.Items.Add(new ListItem(uQuery.UmbracoObjectType.Media.GetFriendlyName()' uQuery.UmbracoObjectType.Media.GetGuid().ToString())); " is 152.
Long Statement,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListPreValueEditor.cs,OnLoad,The length of the statement  "                this.typeRadioButtonList.Items.Add(new ListItem(uQuery.UmbracoObjectType.Member.GetFriendlyName()' uQuery.UmbracoObjectType.Member.GetGuid().ToString())); " is 154.
Long Statement,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListPreValueEditor.cs,OnLoad,The length of the statement  "                this.scriptFileDropDownList.DataSource = this.GetAllFilesForDropDownList(HostingEnvironment.MapPath("~/scripts/")' "*.js"); " is 123.
Long Statement,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListPreValueEditor.cs,XPathCustomValidator_ServerValidate,The length of the statement  "            uQuery.UmbracoObjectType umbracoObjectType = uQuery.GetUmbracoObjectType(new Guid(this.typeRadioButtonList.SelectedValue)); " is 123.
Long Statement,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListPreValueEditor.cs,Save,The length of the statement  "                    this.Options.SortDirection = (ListSortDirection)Enum.Parse(typeof(ListSortDirection)' this.sortDirectionRadioButtonList.SelectedValue); " is 135.
Long Statement,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListPreValueEditor.cs,RenderContents,The length of the statement  "            writer.AddPrevalueRow("XPath Expression"' @"expects a result set of node' meda or member elements"' this.xPathTextBox' this.xPathRequiredFieldValidator' this.xPathCustomValidator); " is 180.
Long Statement,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListPreValueEditor.cs,RenderContents,The length of the statement  "            writer.AddPrevalueRow("Limit To"' "limit the source data count - 0 means no limit"' this.limitToTextBox' this.limitToRegularExpressionValidator); " is 145.
Long Statement,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListPreValueEditor.cs,RenderContents,The length of the statement  "            writer.AddPrevalueRow("List Height"' "px height of the source list - 0 means not set / no scrolling"' this.listHeightTextBox' this.listHeightRegularExpressionValidator); " is 169.
Long Statement,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListPreValueEditor.cs,RenderContents,The length of the statement  "            writer.AddPrevalueRow("Css File"' "can use classes: .xpath-templatable-list.datatype-id-" + this.DataType.DataTypeDefinitionId + ".property-alias-????"' this.cssFileDropDownList); " is 179.
Long Statement,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListPreValueEditor.cs,RenderContents,The length of the statement  "            writer.AddPrevalueRow("Script File"' "contents passed as callback parameter to datatype initialization (can use classes above)"' this.scriptFileDropDownList); " is 158.
Long Statement,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListPreValueEditor.cs,RenderContents,The length of the statement  "            writer.AddPrevalueRow("Min Items"' "number of items that must be selected"' this.minItemsTextBox' this.minItemsRegularExpressionValidator' this.minItemsCustomValidator); " is 169.
Long Statement,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListPreValueEditor.cs,RenderContents,The length of the statement  "            writer.AddPrevalueRow("Max Items"' "number of items that can be selected - 0 means no limit"' this.maxItemsTextBox' this.maxItemsCustomValidator); // BUG: this.maxItemsRegularExpressionValidator doens't work here ! " is 214.
Long Statement,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListPreValueEditor.cs,RenderContents,The length of the statement  "            writer.AddPrevalueRow("Allow Duplicates"' "when checked' duplicate values can be selected"' this.allowDuplicatesCheckBox); " is 122.
Complex Conditional,uComponents.DataTypes.UrlPicker,UrlPickerPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\UrlPicker\UrlPickerPreValueEditor.cs,Save,The conditional expression  "DataFormatDropDown == null ||                      DefaultModeDropDown == null ||                      ModeSelector == null ||                      EnableTitleCheckbox == null ||                      EnableNewWindowCheckbox == null"  is complex.
Empty Catch Block,uComponents.DataTypes.EnumCheckBoxList,EnumCheckBoxListDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\EnumCheckBoxList\EnumCheckBoxListDataEditor.cs,CreateChildControls,The method has an empty catch block.
Empty Catch Block,uComponents.DataTypes.EnumDropDownList,EnumDropDownListDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\EnumDropDownList\EnumDropDownListDataEditor.cs,CreateChildControls,The method has an empty catch block.
Magic Number,uComponents.DataTypes.CharLimit,CharLimitPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CharLimit\CharLimitPrevalueEditor.cs,Save,The following statement contains a magic number: if (int.TryParse(this.CharLimitValue.Text' out limit))  			{  				if (limit == 0)  				{  					limit = 100;  				}    				options.Limit = limit;  			}
Magic Number,uComponents.DataTypes.CheckBoxTree,CheckBoxTreePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CheckBoxTree\CheckBoxTreePreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.minSelectionTextBox.Width = 30;
Magic Number,uComponents.DataTypes.CheckBoxTree,CheckBoxTreePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CheckBoxTree\CheckBoxTreePreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.minSelectionTextBox.MaxLength = 2;
Magic Number,uComponents.DataTypes.CheckBoxTree,CheckBoxTreePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CheckBoxTree\CheckBoxTreePreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.maxSelectionTextBox.Width = 30;
Magic Number,uComponents.DataTypes.CheckBoxTree,CheckBoxTreePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CheckBoxTree\CheckBoxTreePreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.maxSelectionTextBox.MaxLength = 2;
Magic Number,uComponents.DataTypes.CountryPicker,CountryPickerPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\CountryPicker\CountryPickerPreValueEditor.cs,Save,The following statement contains a magic number: lock (m_Locker)  			{  				var vals = PreValues.GetPreValues(this.m_DataType.DataTypeDefinitionId);  				if (vals.Count >= 1)  				{  					// update  					((PreValue)vals[0]).Value = this._pickerType.SelectedValue;    					((PreValue)vals[0]).Save();  				}  				else  				{  					// insert  					PreValue.MakeNew(this.m_DataType.DataTypeDefinitionId' this._pickerType.SelectedValue);  				}    				// store the xpath  				if (vals.Count >= 2)  				{  					// update  					((PreValue)vals[1]).Value = this._chooseTextBox.Text;  					((PreValue)vals[1]).Save();  				}  				else  				{  					// insert  					PreValue.MakeNew(this.m_DataType.DataTypeDefinitionId' this._chooseTextBox.Text);  				}    			}
Magic Number,uComponents.DataTypes.DataTypeGrid.Handlers.DataTypes,ColorPickerDataTypeHandler,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\Handlers\DataTypes\ColorPickerDataTypeHandler.cs,GetContrastColor,The following statement contains a magic number: var a = 1 - (((0.299 * color.R) + (0.587 * color.G) + (0.114 * color.B)) / 255);
Magic Number,uComponents.DataTypes.DataTypeGrid.Handlers.DataTypes,ColorPickerDataTypeHandler,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\Handlers\DataTypes\ColorPickerDataTypeHandler.cs,GetContrastColor,The following statement contains a magic number: var a = 1 - (((0.299 * color.R) + (0.587 * color.G) + (0.114 * color.B)) / 255);
Magic Number,uComponents.DataTypes.DataTypeGrid.Handlers.DataTypes,ColorPickerDataTypeHandler,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\Handlers\DataTypes\ColorPickerDataTypeHandler.cs,GetContrastColor,The following statement contains a magic number: var a = 1 - (((0.299 * color.R) + (0.587 * color.G) + (0.114 * color.B)) / 255);
Magic Number,uComponents.DataTypes.DataTypeGrid.Handlers.DataTypes,ColorPickerDataTypeHandler,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\Handlers\DataTypes\ColorPickerDataTypeHandler.cs,GetContrastColor,The following statement contains a magic number: var a = 1 - (((0.299 * color.R) + (0.587 * color.G) + (0.114 * color.B)) / 255);
Magic Number,uComponents.DataTypes.DataTypeGrid.Handlers.DataTypes,ColorPickerDataTypeHandler,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\Handlers\DataTypes\ColorPickerDataTypeHandler.cs,GetContrastColor,The following statement contains a magic number: var d = a < 0.5 ? 0 : 255;
Magic Number,uComponents.DataTypes.DataTypeGrid.Handlers.DataTypes,ColorPickerDataTypeHandler,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\Handlers\DataTypes\ColorPickerDataTypeHandler.cs,GetContrastColor,The following statement contains a magic number: var d = a < 0.5 ? 0 : 255;
Magic Number,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,Save,The following statement contains a magic number: lock (Locker)              {                  var prevalues = new List<object>();                    // Set settings                  if (this.settings == null)                  {                      this.settings = this.prevalueEditorSettingsHandler.GetPrevalueEditorSettings(this.DataType.DataTypeDefinitionId);                  }                    this.Settings.ShowLabel = this.showLabel != null && this.showLabel.Checked;                  this.Settings.ShowGridHeader = this.showHeader != null && this.showHeader.Checked;                  this.Settings.ShowGridFooter = this.showFooter != null && this.showFooter.Checked;                  this.Settings.ReadOnly = this.readOnly != null && this.readOnly.Checked;                  this.Settings.TableHeight = this.tableHeight != null ? int.Parse(this.tableHeight.Text) : 300;                  prevalues.Add(this.Settings);                    // Add existing prevalues;                  foreach (var t in this.preValues)                  {                      var parsedprevalue = ParsePrevalue(t);                        if (parsedprevalue != null)                      {                          prevalues.Add(parsedprevalue);                      }                  }                    // Add last (new) prevalue                  var newprevalue = ParsePrevalue(this.newPreValue);                    if (newprevalue != null)                  {                      prevalues.Add(newprevalue);                  }                    if (prevalues.Count > 0)                  {                      // Delete former values                      PreValues.DeleteByDataTypeDefinition(this.DataType.DataTypeDefinitionId);                        // Add new values                      this.AddPrevalues(prevalues);                        // Must not refresh on initial load. [LK]                      if (prevalues.Count > 1)                      {                          // Reload IFrame to show changes                          this.Page.Response.Redirect(this.Page.Request.Url.ToString());                      }                  }              }
Magic Number,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,CreateChildControls,The following statement contains a magic number: var txtNewValidation = new TextBox()              {                  ID = "newValidation"'                  TextMode = TextBoxMode.MultiLine'                  Rows = 2'                  Columns = 20'                  CssClass = "newValidation"              };
Magic Number,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,CreateChildControls,The following statement contains a magic number: var txtNewValidation = new TextBox()              {                  ID = "newValidation"'                  TextMode = TextBoxMode.MultiLine'                  Rows = 2'                  Columns = 20'                  CssClass = "newValidation"              };
Magic Number,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,CreateChildControls,The following statement contains a magic number: foreach (var s in this.preValues)              {                  var editProperty = new Panel() { ID = "editProperty_" + s.Id.ToString()' CssClass = "editProperty" };                    var editDataType = ddlNewType.Items.FindByValue(s.DataTypeId.ToString());                    var editPropertyHeader = new Panel() { CssClass = "propertyHeader" };                  var editPropertyTitle = new HtmlGenericControl("h3")                  {                      InnerText =                          string.Format(                              "{0} ({1})' {2}: {3}"'                              s.Name.StartsWith("#")                                  ? uQuery.GetDictionaryItem(                                      s.Name.Substring(                                          1' s.Name.Length - 1)'                                      s.Name.Substring(                                          1' s.Name.Length - 1))                                  : s.Name'                              s.Alias'                              uQuery.GetDictionaryItem("Type"' "Type")'                              editDataType != null                                  ? editDataType.Text                                  : "ERROR: This datatype is not supported")                  };                    editPropertyTitle.Attributes["class"] = "propertyTitle";                    var lnkDelete = new LinkButton                  {                      CssClass = "DeleteProperty ui-button ui-widget ui-state-default ui-corner-all ui-button-icon-only"'                      Text =                          "<span class='ui-button-icon-primary ui-icon ui-icon-close'>&nbsp;</span><span class='ui-button-text'>Delete</span>"'                      OnClientClick =                          "return confirm('"                          +                          uQuery.GetDictionaryItem(                              "AreYouSureYouWantToDeleteThisColumn"' "Are you sure you want to delete this column")                          + "?');"'                      CommandArgument = s.Id.ToString()'                      CommandName = "Delete"                  };                  lnkDelete.Command += this.OnDeleteCommand;                    var icnEditError = new HtmlGenericControl("span") { InnerText = Helper.Dictionary.GetDictionaryItem("Error"' "Error") };                  icnEditError.Attributes["class"] = "ErrorProperty";                    editPropertyHeader.Controls.Add(editPropertyTitle);                  editPropertyHeader.Controls.Add(lnkDelete);                  editPropertyHeader.Controls.Add(icnEditError);                    var editPropertyControls = new Panel() { CssClass = "propertyControls" };                    editPropertyControls.Controls.Add(new LiteralControl() { Text = "<ul>" });                    // NAME                  editPropertyControls.Controls.Add(new LiteralControl() { Text = "<li>" });                    // Instantiate controls                  var txtEditName = new TextBox() { ID = "editName_" + this.preValues.IndexOf(s)' CssClass = "editName"' Text = s.Name };                  var lblEditName = new Label()                  {                      AssociatedControlID = txtEditName.ClientID'                      Text = string.Format(                          "{0}<br/><small class='description'>{1}</small>"'                          Helper.Dictionary.GetDictionaryItem("Name"' "Name")'                          Helper.Dictionary.GetDictionaryItem("NameDescription"' "The column display name"))'                      CssClass = "label"                  };                  var valEditName = new RequiredFieldValidator()                  {                      ID = "editNameValidator_" + this.preValues.IndexOf(s)'                      CssClass = "validator"'                      ControlToValidate = txtEditName.ClientID'                      Display = ValidatorDisplay.Dynamic'                      ErrorMessage = "You must specify a name"                  };                    // Add controls to control                  editPropertyControls.Controls.Add(lblEditName);                  editPropertyControls.Controls.Add(txtEditName);                  editPropertyControls.Controls.Add(valEditName);                  s.Controls.Add(txtEditName);                  editPropertyControls.Controls.Add(new LiteralControl() { Text = "</li>" });                      // ALIAS                  editPropertyControls.Controls.Add(new LiteralControl() { Text = "<li>" });                    // Instantiate controls                  var txtEditAlias = new TextBox() { ID = "editAlias_" + this.preValues.IndexOf(s)' CssClass = "editAlias"' Text = s.Alias };                  var lblEditAlias = new Label()                  {                      AssociatedControlID = txtEditAlias.ClientID'                      Text = string.Format(                          "{0}<br/><small class='description'>{1}</small>"'                          Helper.Dictionary.GetDictionaryItem("Alias"' "Alias")'                          Helper.Dictionary.GetDictionaryItem("AliasDescription"' "The column alias"))'                      CssClass = "label"                  };                  var valEditAlias = new RequiredFieldValidator()                  {                      ID = "editAliasValidator_" + this.preValues.IndexOf(s)'                      CssClass = "validator"'                      ControlToValidate = txtEditAlias.ClientID'                      Display = ValidatorDisplay.Dynamic'                      ErrorMessage = "You must specify an alias"                  };                  var valEditAliasExists = new CustomValidator()                  {                      ID = "editAliasExistsValidator_" + this.preValues.IndexOf(s)'                      CssClass = "validator exists"'                      ControlToValidate = txtEditAlias.ClientID'                      Display = ValidatorDisplay.Dynamic'                      ClientValidationFunction = "ValidateAliasExists"'                      ErrorMessage = "Alias already exists!"                  };                  valEditAliasExists.ServerValidate += this.OnEditAliasServerValidate;                    // Add controls to control                  editPropertyControls.Controls.Add(lblEditAlias);                  editPropertyControls.Controls.Add(txtEditAlias);                  editPropertyControls.Controls.Add(valEditAlias);                  editPropertyControls.Controls.Add(valEditAliasExists);                  s.Controls.Add(txtEditAlias);                  editPropertyControls.Controls.Add(new LiteralControl() { Text = "</li>" });                      // DATATYPE                  editPropertyControls.Controls.Add(new LiteralControl() { Text = "<li>" });                    // Instantiate controls                  var ddlEditType = this.prevalueEditorControlFactory.BuildDataTypeDropDownList();                  ddlEditType.ID = "editDataType_" + this.preValues.IndexOf(s);                  var lblEditType = new Label()                  {                      AssociatedControlID = ddlEditType.ClientID'                      Text = string.Format(                          "{0}<br/><small class='description'>{1}</small>"'                          Helper.Dictionary.GetDictionaryItem("Datatype"' "Datatype")'                          Helper.Dictionary.GetDictionaryItem("DatatypeDescription"' "The column data editor"))'                      CssClass = "label"                  };                    // Add controls to control                  editPropertyControls.Controls.Add(lblEditType);                  ddlEditType.SelectedValue = s.DataTypeId.ToString();                  editPropertyControls.Controls.Add(ddlEditType);                  s.Controls.Add(ddlEditType);                  editPropertyControls.Controls.Add(new LiteralControl() { Text = "</li>" });                      // MANDATORY                  editPropertyControls.Controls.Add(new LiteralControl() { Text = "<li>" });                    // Instantiate controls                  var chkEditMandatory = new CheckBox() { ID = "editMandatory_" + this.preValues.IndexOf(s)' CssClass = "editMandatory"' Checked = s.Mandatory };                  var lblEditMandatory = new Label()                  {                      AssociatedControlID = chkEditMandatory.ClientID'                      Text = string.Format(                          "{0}<br/><small class='description'>{1}</small>"'                          Helper.Dictionary.GetDictionaryItem("Mandatory"' "Mandatory")'                          Helper.Dictionary.GetDictionaryItem("MandatoryDescription"' "Whether this column is mandatory"))'                      CssClass = "label"                  };                    // Add controls to control                  editPropertyControls.Controls.Add(lblEditMandatory);                  editPropertyControls.Controls.Add(chkEditMandatory);                  s.Controls.Add(chkEditMandatory);                  editPropertyControls.Controls.Add(new LiteralControl() { Text = "</li>" });                      // VISIBLE                  editPropertyControls.Controls.Add(new LiteralControl() { Text = "<li>" });                    // Instantiate controls                  var chkEditVisible = new CheckBox() { ID = "editVisible_" + this.preValues.IndexOf(s)' CssClass = "editVisible"' Checked = s.Visible };                  var lblEditVisible = new Label()                                           {                                               AssociatedControlID = chkEditVisible.ClientID'                                               Text =                                                   string.Format(                                                       "{0}<br/><small class='description'>{1}</small>"'                                                       Helper.Dictionary.GetDictionaryItem("Visible"' "Visible")'                                                       Helper.Dictionary.GetDictionaryItem("VisibleDescription"' "Whether this column is visible in the grid. <br/>(it can still be edited)"))'                                               CssClass = "label"                                           };                    // Add controls to control                  editPropertyControls.Controls.Add(lblEditVisible);                  editPropertyControls.Controls.Add(chkEditVisible);                  s.Controls.Add(chkEditVisible);                  editPropertyControls.Controls.Add(new LiteralControl() { Text = "</li>" });                      // VALIDATION                  editPropertyControls.Controls.Add(new LiteralControl() { Text = "<li>" });                    // Instantiate control                  var txtEditValidation = new TextBox()                  {                      ID = "editValidation_" + this.preValues.IndexOf(s)'                      TextMode = TextBoxMode.MultiLine'                      Rows = 2'                      Columns = 20'                      CssClass = "editValidation"'                      Text = s.ValidationExpression                  };                  var lblEditValidation = new Label()                  {                      AssociatedControlID = txtEditValidation.ClientID'                      Text = string.Format(                          "{0}<br/><small class='description'>{1}</small>"'                          Helper.Dictionary.GetDictionaryItem("Validation"' "Validation")'                          Helper.Dictionary.GetDictionaryItem("ValidationDescription"' "The regular expression used for validation. Leave empty to disable"))'                      CssClass = "label"                  };                  var lnkEditValidation = new HyperLink                  {                      CssClass = "validationLink"'                      NavigateUrl = "#"'                      Text =                          Helper.Dictionary.GetDictionaryItem(                              "SearchForARegularExpression"' "Search for a regular expression")                  };                  var valEditValidation = new CustomValidator()                  {                      ID = "editValidationValidator_" + this.preValues.IndexOf(s)'                      CssClass = "validator"'                      ControlToValidate = txtEditValidation.ClientID'                      Display = ValidatorDisplay.Dynamic'                      ClientValidationFunction = "ValidateRegex"'                      ErrorMessage =                          Helper.Dictionary.GetDictionaryItem(                              "ValidationStringIsNotValid"' "Validation string is not valid")                  };                  valEditValidation.ServerValidate += this.OnEditRegexServerValidate;                    // Add controls to control                  editPropertyControls.Controls.Add(lblEditValidation);                  editPropertyControls.Controls.Add(txtEditValidation);                  editPropertyControls.Controls.Add(valEditValidation);                  editPropertyControls.Controls.Add(new LiteralControl() { Text = "<br/>" });                  editPropertyControls.Controls.Add(lnkEditValidation);                  s.Controls.Add(txtEditValidation);                    editPropertyControls.Controls.Add(new LiteralControl() { Text = "</li>" });                      // SORT ORDER                    // Instantiate controls                  var hdnEditSortOrderWrapper = new Panel() { CssClass = "sortOrder" };                  var hdnEditSortOrder = new HiddenField() { Value = s.SortOrder.ToString() };                  hdnEditSortOrderWrapper.Controls.Add(hdnEditSortOrder);                  editPropertyControls.Controls.Add(hdnEditSortOrderWrapper);                  s.Controls.Add(hdnEditSortOrder);                      editPropertyControls.Controls.Add(new LiteralControl() { Text = "</ul>" });                    editProperty.Controls.Add(editPropertyHeader);                  editProperty.Controls.Add(editPropertyControls);                    this.accordionContainer.Controls.Add(editProperty);              }
Magic Number,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,CreateChildControls,The following statement contains a magic number: foreach (var s in this.preValues)              {                  var editProperty = new Panel() { ID = "editProperty_" + s.Id.ToString()' CssClass = "editProperty" };                    var editDataType = ddlNewType.Items.FindByValue(s.DataTypeId.ToString());                    var editPropertyHeader = new Panel() { CssClass = "propertyHeader" };                  var editPropertyTitle = new HtmlGenericControl("h3")                  {                      InnerText =                          string.Format(                              "{0} ({1})' {2}: {3}"'                              s.Name.StartsWith("#")                                  ? uQuery.GetDictionaryItem(                                      s.Name.Substring(                                          1' s.Name.Length - 1)'                                      s.Name.Substring(                                          1' s.Name.Length - 1))                                  : s.Name'                              s.Alias'                              uQuery.GetDictionaryItem("Type"' "Type")'                              editDataType != null                                  ? editDataType.Text                                  : "ERROR: This datatype is not supported")                  };                    editPropertyTitle.Attributes["class"] = "propertyTitle";                    var lnkDelete = new LinkButton                  {                      CssClass = "DeleteProperty ui-button ui-widget ui-state-default ui-corner-all ui-button-icon-only"'                      Text =                          "<span class='ui-button-icon-primary ui-icon ui-icon-close'>&nbsp;</span><span class='ui-button-text'>Delete</span>"'                      OnClientClick =                          "return confirm('"                          +                          uQuery.GetDictionaryItem(                              "AreYouSureYouWantToDeleteThisColumn"' "Are you sure you want to delete this column")                          + "?');"'                      CommandArgument = s.Id.ToString()'                      CommandName = "Delete"                  };                  lnkDelete.Command += this.OnDeleteCommand;                    var icnEditError = new HtmlGenericControl("span") { InnerText = Helper.Dictionary.GetDictionaryItem("Error"' "Error") };                  icnEditError.Attributes["class"] = "ErrorProperty";                    editPropertyHeader.Controls.Add(editPropertyTitle);                  editPropertyHeader.Controls.Add(lnkDelete);                  editPropertyHeader.Controls.Add(icnEditError);                    var editPropertyControls = new Panel() { CssClass = "propertyControls" };                    editPropertyControls.Controls.Add(new LiteralControl() { Text = "<ul>" });                    // NAME                  editPropertyControls.Controls.Add(new LiteralControl() { Text = "<li>" });                    // Instantiate controls                  var txtEditName = new TextBox() { ID = "editName_" + this.preValues.IndexOf(s)' CssClass = "editName"' Text = s.Name };                  var lblEditName = new Label()                  {                      AssociatedControlID = txtEditName.ClientID'                      Text = string.Format(                          "{0}<br/><small class='description'>{1}</small>"'                          Helper.Dictionary.GetDictionaryItem("Name"' "Name")'                          Helper.Dictionary.GetDictionaryItem("NameDescription"' "The column display name"))'                      CssClass = "label"                  };                  var valEditName = new RequiredFieldValidator()                  {                      ID = "editNameValidator_" + this.preValues.IndexOf(s)'                      CssClass = "validator"'                      ControlToValidate = txtEditName.ClientID'                      Display = ValidatorDisplay.Dynamic'                      ErrorMessage = "You must specify a name"                  };                    // Add controls to control                  editPropertyControls.Controls.Add(lblEditName);                  editPropertyControls.Controls.Add(txtEditName);                  editPropertyControls.Controls.Add(valEditName);                  s.Controls.Add(txtEditName);                  editPropertyControls.Controls.Add(new LiteralControl() { Text = "</li>" });                      // ALIAS                  editPropertyControls.Controls.Add(new LiteralControl() { Text = "<li>" });                    // Instantiate controls                  var txtEditAlias = new TextBox() { ID = "editAlias_" + this.preValues.IndexOf(s)' CssClass = "editAlias"' Text = s.Alias };                  var lblEditAlias = new Label()                  {                      AssociatedControlID = txtEditAlias.ClientID'                      Text = string.Format(                          "{0}<br/><small class='description'>{1}</small>"'                          Helper.Dictionary.GetDictionaryItem("Alias"' "Alias")'                          Helper.Dictionary.GetDictionaryItem("AliasDescription"' "The column alias"))'                      CssClass = "label"                  };                  var valEditAlias = new RequiredFieldValidator()                  {                      ID = "editAliasValidator_" + this.preValues.IndexOf(s)'                      CssClass = "validator"'                      ControlToValidate = txtEditAlias.ClientID'                      Display = ValidatorDisplay.Dynamic'                      ErrorMessage = "You must specify an alias"                  };                  var valEditAliasExists = new CustomValidator()                  {                      ID = "editAliasExistsValidator_" + this.preValues.IndexOf(s)'                      CssClass = "validator exists"'                      ControlToValidate = txtEditAlias.ClientID'                      Display = ValidatorDisplay.Dynamic'                      ClientValidationFunction = "ValidateAliasExists"'                      ErrorMessage = "Alias already exists!"                  };                  valEditAliasExists.ServerValidate += this.OnEditAliasServerValidate;                    // Add controls to control                  editPropertyControls.Controls.Add(lblEditAlias);                  editPropertyControls.Controls.Add(txtEditAlias);                  editPropertyControls.Controls.Add(valEditAlias);                  editPropertyControls.Controls.Add(valEditAliasExists);                  s.Controls.Add(txtEditAlias);                  editPropertyControls.Controls.Add(new LiteralControl() { Text = "</li>" });                      // DATATYPE                  editPropertyControls.Controls.Add(new LiteralControl() { Text = "<li>" });                    // Instantiate controls                  var ddlEditType = this.prevalueEditorControlFactory.BuildDataTypeDropDownList();                  ddlEditType.ID = "editDataType_" + this.preValues.IndexOf(s);                  var lblEditType = new Label()                  {                      AssociatedControlID = ddlEditType.ClientID'                      Text = string.Format(                          "{0}<br/><small class='description'>{1}</small>"'                          Helper.Dictionary.GetDictionaryItem("Datatype"' "Datatype")'                          Helper.Dictionary.GetDictionaryItem("DatatypeDescription"' "The column data editor"))'                      CssClass = "label"                  };                    // Add controls to control                  editPropertyControls.Controls.Add(lblEditType);                  ddlEditType.SelectedValue = s.DataTypeId.ToString();                  editPropertyControls.Controls.Add(ddlEditType);                  s.Controls.Add(ddlEditType);                  editPropertyControls.Controls.Add(new LiteralControl() { Text = "</li>" });                      // MANDATORY                  editPropertyControls.Controls.Add(new LiteralControl() { Text = "<li>" });                    // Instantiate controls                  var chkEditMandatory = new CheckBox() { ID = "editMandatory_" + this.preValues.IndexOf(s)' CssClass = "editMandatory"' Checked = s.Mandatory };                  var lblEditMandatory = new Label()                  {                      AssociatedControlID = chkEditMandatory.ClientID'                      Text = string.Format(                          "{0}<br/><small class='description'>{1}</small>"'                          Helper.Dictionary.GetDictionaryItem("Mandatory"' "Mandatory")'                          Helper.Dictionary.GetDictionaryItem("MandatoryDescription"' "Whether this column is mandatory"))'                      CssClass = "label"                  };                    // Add controls to control                  editPropertyControls.Controls.Add(lblEditMandatory);                  editPropertyControls.Controls.Add(chkEditMandatory);                  s.Controls.Add(chkEditMandatory);                  editPropertyControls.Controls.Add(new LiteralControl() { Text = "</li>" });                      // VISIBLE                  editPropertyControls.Controls.Add(new LiteralControl() { Text = "<li>" });                    // Instantiate controls                  var chkEditVisible = new CheckBox() { ID = "editVisible_" + this.preValues.IndexOf(s)' CssClass = "editVisible"' Checked = s.Visible };                  var lblEditVisible = new Label()                                           {                                               AssociatedControlID = chkEditVisible.ClientID'                                               Text =                                                   string.Format(                                                       "{0}<br/><small class='description'>{1}</small>"'                                                       Helper.Dictionary.GetDictionaryItem("Visible"' "Visible")'                                                       Helper.Dictionary.GetDictionaryItem("VisibleDescription"' "Whether this column is visible in the grid. <br/>(it can still be edited)"))'                                               CssClass = "label"                                           };                    // Add controls to control                  editPropertyControls.Controls.Add(lblEditVisible);                  editPropertyControls.Controls.Add(chkEditVisible);                  s.Controls.Add(chkEditVisible);                  editPropertyControls.Controls.Add(new LiteralControl() { Text = "</li>" });                      // VALIDATION                  editPropertyControls.Controls.Add(new LiteralControl() { Text = "<li>" });                    // Instantiate control                  var txtEditValidation = new TextBox()                  {                      ID = "editValidation_" + this.preValues.IndexOf(s)'                      TextMode = TextBoxMode.MultiLine'                      Rows = 2'                      Columns = 20'                      CssClass = "editValidation"'                      Text = s.ValidationExpression                  };                  var lblEditValidation = new Label()                  {                      AssociatedControlID = txtEditValidation.ClientID'                      Text = string.Format(                          "{0}<br/><small class='description'>{1}</small>"'                          Helper.Dictionary.GetDictionaryItem("Validation"' "Validation")'                          Helper.Dictionary.GetDictionaryItem("ValidationDescription"' "The regular expression used for validation. Leave empty to disable"))'                      CssClass = "label"                  };                  var lnkEditValidation = new HyperLink                  {                      CssClass = "validationLink"'                      NavigateUrl = "#"'                      Text =                          Helper.Dictionary.GetDictionaryItem(                              "SearchForARegularExpression"' "Search for a regular expression")                  };                  var valEditValidation = new CustomValidator()                  {                      ID = "editValidationValidator_" + this.preValues.IndexOf(s)'                      CssClass = "validator"'                      ControlToValidate = txtEditValidation.ClientID'                      Display = ValidatorDisplay.Dynamic'                      ClientValidationFunction = "ValidateRegex"'                      ErrorMessage =                          Helper.Dictionary.GetDictionaryItem(                              "ValidationStringIsNotValid"' "Validation string is not valid")                  };                  valEditValidation.ServerValidate += this.OnEditRegexServerValidate;                    // Add controls to control                  editPropertyControls.Controls.Add(lblEditValidation);                  editPropertyControls.Controls.Add(txtEditValidation);                  editPropertyControls.Controls.Add(valEditValidation);                  editPropertyControls.Controls.Add(new LiteralControl() { Text = "<br/>" });                  editPropertyControls.Controls.Add(lnkEditValidation);                  s.Controls.Add(txtEditValidation);                    editPropertyControls.Controls.Add(new LiteralControl() { Text = "</li>" });                      // SORT ORDER                    // Instantiate controls                  var hdnEditSortOrderWrapper = new Panel() { CssClass = "sortOrder" };                  var hdnEditSortOrder = new HiddenField() { Value = s.SortOrder.ToString() };                  hdnEditSortOrderWrapper.Controls.Add(hdnEditSortOrder);                  editPropertyControls.Controls.Add(hdnEditSortOrderWrapper);                  s.Controls.Add(hdnEditSortOrder);                      editPropertyControls.Controls.Add(new LiteralControl() { Text = "</ul>" });                    editProperty.Controls.Add(editPropertyHeader);                  editProperty.Controls.Add(editPropertyControls);                    this.accordionContainer.Controls.Add(editProperty);              }
Magic Number,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,ParsePrevalue,The following statement contains a magic number: if (t != null && t.Controls.Count == 7)              {                  // Get values                  var name = t.Controls[0] != null ? ((TextBox)t.Controls[0]).Text : null;                  var alias = t.Controls[1] != null ? ((TextBox)t.Controls[1]).Text : null;                  var dataTypeId = t.Controls[2] != null ? int.Parse(((DropDownList)t.Controls[2]).SelectedValue) : 0;                  var mandatory = t.Controls[3] != null ? ((CheckBox)t.Controls[3]).Checked : false;                  var visible = t.Controls[4] != null ? ((CheckBox)t.Controls[4]).Checked : true;                  var validation = t.Controls[5] != null ? ((TextBox)t.Controls[5]).Text : null;                  var sortOrder = t.Controls[6] != null ? int.Parse(((HiddenField)t.Controls[6]).Value) : 0;                    if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(alias))                  {                      // Set the options                      var preValueRow = new BasePreValueRow()                      {                          Id = t.Id'                          Name = name'                          Alias = alias'                          DataTypeId = dataTypeId'                          Mandatory = mandatory'                          Visible = visible'                          ValidationExpression = validation'                          SortOrder = sortOrder                      };                        // Add new value to database                      return preValueRow;                  }              }
Magic Number,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,ParsePrevalue,The following statement contains a magic number: if (t != null && t.Controls.Count == 7)              {                  // Get values                  var name = t.Controls[0] != null ? ((TextBox)t.Controls[0]).Text : null;                  var alias = t.Controls[1] != null ? ((TextBox)t.Controls[1]).Text : null;                  var dataTypeId = t.Controls[2] != null ? int.Parse(((DropDownList)t.Controls[2]).SelectedValue) : 0;                  var mandatory = t.Controls[3] != null ? ((CheckBox)t.Controls[3]).Checked : false;                  var visible = t.Controls[4] != null ? ((CheckBox)t.Controls[4]).Checked : true;                  var validation = t.Controls[5] != null ? ((TextBox)t.Controls[5]).Text : null;                  var sortOrder = t.Controls[6] != null ? int.Parse(((HiddenField)t.Controls[6]).Value) : 0;                    if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(alias))                  {                      // Set the options                      var preValueRow = new BasePreValueRow()                      {                          Id = t.Id'                          Name = name'                          Alias = alias'                          DataTypeId = dataTypeId'                          Mandatory = mandatory'                          Visible = visible'                          ValidationExpression = validation'                          SortOrder = sortOrder                      };                        // Add new value to database                      return preValueRow;                  }              }
Magic Number,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,ParsePrevalue,The following statement contains a magic number: if (t != null && t.Controls.Count == 7)              {                  // Get values                  var name = t.Controls[0] != null ? ((TextBox)t.Controls[0]).Text : null;                  var alias = t.Controls[1] != null ? ((TextBox)t.Controls[1]).Text : null;                  var dataTypeId = t.Controls[2] != null ? int.Parse(((DropDownList)t.Controls[2]).SelectedValue) : 0;                  var mandatory = t.Controls[3] != null ? ((CheckBox)t.Controls[3]).Checked : false;                  var visible = t.Controls[4] != null ? ((CheckBox)t.Controls[4]).Checked : true;                  var validation = t.Controls[5] != null ? ((TextBox)t.Controls[5]).Text : null;                  var sortOrder = t.Controls[6] != null ? int.Parse(((HiddenField)t.Controls[6]).Value) : 0;                    if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(alias))                  {                      // Set the options                      var preValueRow = new BasePreValueRow()                      {                          Id = t.Id'                          Name = name'                          Alias = alias'                          DataTypeId = dataTypeId'                          Mandatory = mandatory'                          Visible = visible'                          ValidationExpression = validation'                          SortOrder = sortOrder                      };                        // Add new value to database                      return preValueRow;                  }              }
Magic Number,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,ParsePrevalue,The following statement contains a magic number: if (t != null && t.Controls.Count == 7)              {                  // Get values                  var name = t.Controls[0] != null ? ((TextBox)t.Controls[0]).Text : null;                  var alias = t.Controls[1] != null ? ((TextBox)t.Controls[1]).Text : null;                  var dataTypeId = t.Controls[2] != null ? int.Parse(((DropDownList)t.Controls[2]).SelectedValue) : 0;                  var mandatory = t.Controls[3] != null ? ((CheckBox)t.Controls[3]).Checked : false;                  var visible = t.Controls[4] != null ? ((CheckBox)t.Controls[4]).Checked : true;                  var validation = t.Controls[5] != null ? ((TextBox)t.Controls[5]).Text : null;                  var sortOrder = t.Controls[6] != null ? int.Parse(((HiddenField)t.Controls[6]).Value) : 0;                    if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(alias))                  {                      // Set the options                      var preValueRow = new BasePreValueRow()                      {                          Id = t.Id'                          Name = name'                          Alias = alias'                          DataTypeId = dataTypeId'                          Mandatory = mandatory'                          Visible = visible'                          ValidationExpression = validation'                          SortOrder = sortOrder                      };                        // Add new value to database                      return preValueRow;                  }              }
Magic Number,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,ParsePrevalue,The following statement contains a magic number: if (t != null && t.Controls.Count == 7)              {                  // Get values                  var name = t.Controls[0] != null ? ((TextBox)t.Controls[0]).Text : null;                  var alias = t.Controls[1] != null ? ((TextBox)t.Controls[1]).Text : null;                  var dataTypeId = t.Controls[2] != null ? int.Parse(((DropDownList)t.Controls[2]).SelectedValue) : 0;                  var mandatory = t.Controls[3] != null ? ((CheckBox)t.Controls[3]).Checked : false;                  var visible = t.Controls[4] != null ? ((CheckBox)t.Controls[4]).Checked : true;                  var validation = t.Controls[5] != null ? ((TextBox)t.Controls[5]).Text : null;                  var sortOrder = t.Controls[6] != null ? int.Parse(((HiddenField)t.Controls[6]).Value) : 0;                    if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(alias))                  {                      // Set the options                      var preValueRow = new BasePreValueRow()                      {                          Id = t.Id'                          Name = name'                          Alias = alias'                          DataTypeId = dataTypeId'                          Mandatory = mandatory'                          Visible = visible'                          ValidationExpression = validation'                          SortOrder = sortOrder                      };                        // Add new value to database                      return preValueRow;                  }              }
Magic Number,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,ParsePrevalue,The following statement contains a magic number: if (t != null && t.Controls.Count == 7)              {                  // Get values                  var name = t.Controls[0] != null ? ((TextBox)t.Controls[0]).Text : null;                  var alias = t.Controls[1] != null ? ((TextBox)t.Controls[1]).Text : null;                  var dataTypeId = t.Controls[2] != null ? int.Parse(((DropDownList)t.Controls[2]).SelectedValue) : 0;                  var mandatory = t.Controls[3] != null ? ((CheckBox)t.Controls[3]).Checked : false;                  var visible = t.Controls[4] != null ? ((CheckBox)t.Controls[4]).Checked : true;                  var validation = t.Controls[5] != null ? ((TextBox)t.Controls[5]).Text : null;                  var sortOrder = t.Controls[6] != null ? int.Parse(((HiddenField)t.Controls[6]).Value) : 0;                    if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(alias))                  {                      // Set the options                      var preValueRow = new BasePreValueRow()                      {                          Id = t.Id'                          Name = name'                          Alias = alias'                          DataTypeId = dataTypeId'                          Mandatory = mandatory'                          Visible = visible'                          ValidationExpression = validation'                          SortOrder = sortOrder                      };                        // Add new value to database                      return preValueRow;                  }              }
Magic Number,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,ParsePrevalue,The following statement contains a magic number: if (t != null && t.Controls.Count == 7)              {                  // Get values                  var name = t.Controls[0] != null ? ((TextBox)t.Controls[0]).Text : null;                  var alias = t.Controls[1] != null ? ((TextBox)t.Controls[1]).Text : null;                  var dataTypeId = t.Controls[2] != null ? int.Parse(((DropDownList)t.Controls[2]).SelectedValue) : 0;                  var mandatory = t.Controls[3] != null ? ((CheckBox)t.Controls[3]).Checked : false;                  var visible = t.Controls[4] != null ? ((CheckBox)t.Controls[4]).Checked : true;                  var validation = t.Controls[5] != null ? ((TextBox)t.Controls[5]).Text : null;                  var sortOrder = t.Controls[6] != null ? int.Parse(((HiddenField)t.Controls[6]).Value) : 0;                    if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(alias))                  {                      // Set the options                      var preValueRow = new BasePreValueRow()                      {                          Id = t.Id'                          Name = name'                          Alias = alias'                          DataTypeId = dataTypeId'                          Mandatory = mandatory'                          Visible = visible'                          ValidationExpression = validation'                          SortOrder = sortOrder                      };                        // Add new value to database                      return preValueRow;                  }              }
Magic Number,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,ParsePrevalue,The following statement contains a magic number: if (t != null && t.Controls.Count == 7)              {                  // Get values                  var name = t.Controls[0] != null ? ((TextBox)t.Controls[0]).Text : null;                  var alias = t.Controls[1] != null ? ((TextBox)t.Controls[1]).Text : null;                  var dataTypeId = t.Controls[2] != null ? int.Parse(((DropDownList)t.Controls[2]).SelectedValue) : 0;                  var mandatory = t.Controls[3] != null ? ((CheckBox)t.Controls[3]).Checked : false;                  var visible = t.Controls[4] != null ? ((CheckBox)t.Controls[4]).Checked : true;                  var validation = t.Controls[5] != null ? ((TextBox)t.Controls[5]).Text : null;                  var sortOrder = t.Controls[6] != null ? int.Parse(((HiddenField)t.Controls[6]).Value) : 0;                    if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(alias))                  {                      // Set the options                      var preValueRow = new BasePreValueRow()                      {                          Id = t.Id'                          Name = name'                          Alias = alias'                          DataTypeId = dataTypeId'                          Mandatory = mandatory'                          Visible = visible'                          ValidationExpression = validation'                          SortOrder = sortOrder                      };                        // Add new value to database                      return preValueRow;                  }              }
Magic Number,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,ParsePrevalue,The following statement contains a magic number: if (t != null && t.Controls.Count == 7)              {                  // Get values                  var name = t.Controls[0] != null ? ((TextBox)t.Controls[0]).Text : null;                  var alias = t.Controls[1] != null ? ((TextBox)t.Controls[1]).Text : null;                  var dataTypeId = t.Controls[2] != null ? int.Parse(((DropDownList)t.Controls[2]).SelectedValue) : 0;                  var mandatory = t.Controls[3] != null ? ((CheckBox)t.Controls[3]).Checked : false;                  var visible = t.Controls[4] != null ? ((CheckBox)t.Controls[4]).Checked : true;                  var validation = t.Controls[5] != null ? ((TextBox)t.Controls[5]).Text : null;                  var sortOrder = t.Controls[6] != null ? int.Parse(((HiddenField)t.Controls[6]).Value) : 0;                    if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(alias))                  {                      // Set the options                      var preValueRow = new BasePreValueRow()                      {                          Id = t.Id'                          Name = name'                          Alias = alias'                          DataTypeId = dataTypeId'                          Mandatory = mandatory'                          Visible = visible'                          ValidationExpression = validation'                          SortOrder = sortOrder                      };                        // Add new value to database                      return preValueRow;                  }              }
Magic Number,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,ParsePrevalue,The following statement contains a magic number: if (t != null && t.Controls.Count == 7)              {                  // Get values                  var name = t.Controls[0] != null ? ((TextBox)t.Controls[0]).Text : null;                  var alias = t.Controls[1] != null ? ((TextBox)t.Controls[1]).Text : null;                  var dataTypeId = t.Controls[2] != null ? int.Parse(((DropDownList)t.Controls[2]).SelectedValue) : 0;                  var mandatory = t.Controls[3] != null ? ((CheckBox)t.Controls[3]).Checked : false;                  var visible = t.Controls[4] != null ? ((CheckBox)t.Controls[4]).Checked : true;                  var validation = t.Controls[5] != null ? ((TextBox)t.Controls[5]).Text : null;                  var sortOrder = t.Controls[6] != null ? int.Parse(((HiddenField)t.Controls[6]).Value) : 0;                    if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(alias))                  {                      // Set the options                      var preValueRow = new BasePreValueRow()                      {                          Id = t.Id'                          Name = name'                          Alias = alias'                          DataTypeId = dataTypeId'                          Mandatory = mandatory'                          Visible = visible'                          ValidationExpression = validation'                          SortOrder = sortOrder                      };                        // Add new value to database                      return preValueRow;                  }              }
Magic Number,uComponents.DataTypes.DataTypeGrid,PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\PrevalueEditor.cs,ParsePrevalue,The following statement contains a magic number: if (t != null && t.Controls.Count == 7)              {                  // Get values                  var name = t.Controls[0] != null ? ((TextBox)t.Controls[0]).Text : null;                  var alias = t.Controls[1] != null ? ((TextBox)t.Controls[1]).Text : null;                  var dataTypeId = t.Controls[2] != null ? int.Parse(((DropDownList)t.Controls[2]).SelectedValue) : 0;                  var mandatory = t.Controls[3] != null ? ((CheckBox)t.Controls[3]).Checked : false;                  var visible = t.Controls[4] != null ? ((CheckBox)t.Controls[4]).Checked : true;                  var validation = t.Controls[5] != null ? ((TextBox)t.Controls[5]).Text : null;                  var sortOrder = t.Controls[6] != null ? int.Parse(((HiddenField)t.Controls[6]).Value) : 0;                    if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(alias))                  {                      // Set the options                      var preValueRow = new BasePreValueRow()                      {                          Id = t.Id'                          Name = name'                          Alias = alias'                          DataTypeId = dataTypeId'                          Mandatory = mandatory'                          Visible = visible'                          ValidationExpression = validation'                          SortOrder = sortOrder                      };                        // Add new value to database                      return preValueRow;                  }              }
Magic Number,uComponents.DataTypes.DataTypeGrid.Model,PreValueEditorSettings,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\DataTypeGrid\Model\PreValueSettings.cs,PreValueEditorSettings,The following statement contains a magic number: this.TableHeight = 300;
Magic Number,uComponents.DataTypes.ElasticTextBox,ETB_PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ElasticTextBox\ETB_PrevalueEditor.cs,Save,The following statement contains a magic number: if (int.TryParse(this.TextBoxHeight.Text' out height))  			{  				if (height == 0)  				{  					height = 400;  				}    				options.Height = height;  			}
Magic Number,uComponents.DataTypes.ElasticTextBox,ETB_PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ElasticTextBox\ETB_PrevalueEditor.cs,Save,The following statement contains a magic number: if (int.TryParse(this.TextBoxWidth.Text' out width))  			{  				if (width == 0)  				{  					width = 490;  				}    				options.Width = width;  			}
Magic Number,uComponents.DataTypes.ElasticTextBox,ETB_PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ElasticTextBox\ETB_PrevalueEditor.cs,CreateChildControls,The following statement contains a magic number: this.TextBoxCss = new TextBox() { ID = "Css"' CssClass = "guiInputText"' Width = Unit.Pixel(500) };
Magic Number,uComponents.DataTypes.FilePicker,FP_Control,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\FilePicker\FP_Control.cs,CreateChildControls,The following statement contains a magic number: this.TextBoxControl.Width = Unit.Pixel(330);
Magic Number,uComponents.DataTypes.ImagePoint,ImagePointDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ImagePoint\ImagePointDataEditor.cs,CreateChildControls,The following statement contains a magic number: this.xTextBox.MaxLength = 4;
Magic Number,uComponents.DataTypes.ImagePoint,ImagePointDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ImagePoint\ImagePointDataEditor.cs,CreateChildControls,The following statement contains a magic number: this.yTextBox.MaxLength = 4;
Magic Number,uComponents.DataTypes.ImagePoint,ImagePointDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ImagePoint\ImagePointDataEditor.cs,CreateGhostImages,The following statement contains a magic number: foreach(Property property in properties)              {                  ImagePoint imagePoint = new ImagePoint();                  ((uQuery.IGetProperty)imagePoint).LoadPropertyValue(property.Value.ToString());                    if (imagePoint.HasCoordinate)                  {                      Image ghostImage = new Image();                                            ghostImage.ImageUrl = this.Page.ClientScript.GetWebResourceUrl(this.GetType()' "uComponents.DataTypes.ImagePoint.ImagePointGhost.png");                      ghostImage.CssClass = "ghost";                        // using sql here' else would have to query document and media seperately                      using(IRecordsReader iRecordsReader = uQuery.SqlHelper.ExecuteReader(@"                                                                                              SELECT  A.contentNodeId AS 'Id''   		                                                                                            B.text AS 'Name''  		                                                                                            C.Name AS 'PropertyName'    			                                                                                FROM    cmsPropertyData A  			                                                                                        LEFT OUTER JOIN umbracoNode B ON A.ContentNodeId = B.Id  			                                                                                        LEFT OUTER JOIN cmsPropertyType C ON A.propertytypeid = C.id    			                                                                                WHERE   A.id = @propertyDataId"'                                                                                              uQuery.SqlHelper.CreateParameter("propertyDataId"' property.Id)))                      {                          iRecordsReader.Read(); // there should only be a single row returned                            // if the properties are on the same item' then label with property name' otherwise default to labeling with the node / media or member name                          if (iRecordsReader.Get<int>("Id") == this.CurrentContentId)                          {                              ghostImage.ToolTip = iRecordsReader.Get<string>("PropertyName");                          }                          else                          {                              ghostImage.ToolTip = iRecordsReader.Get<string>("Name");                          }                      }                        ghostImage.Style.Add(HtmlTextWriterStyle.Left' (imagePoint.X - 7).ToString() + "px");                      ghostImage.Style.Add(HtmlTextWriterStyle.Top' (imagePoint.Y - 7).ToString() + "px");                        areaDiv.Controls.Add(ghostImage);                  }              }
Magic Number,uComponents.DataTypes.ImagePoint,ImagePointDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ImagePoint\ImagePointDataEditor.cs,CreateGhostImages,The following statement contains a magic number: foreach(Property property in properties)              {                  ImagePoint imagePoint = new ImagePoint();                  ((uQuery.IGetProperty)imagePoint).LoadPropertyValue(property.Value.ToString());                    if (imagePoint.HasCoordinate)                  {                      Image ghostImage = new Image();                                            ghostImage.ImageUrl = this.Page.ClientScript.GetWebResourceUrl(this.GetType()' "uComponents.DataTypes.ImagePoint.ImagePointGhost.png");                      ghostImage.CssClass = "ghost";                        // using sql here' else would have to query document and media seperately                      using(IRecordsReader iRecordsReader = uQuery.SqlHelper.ExecuteReader(@"                                                                                              SELECT  A.contentNodeId AS 'Id''   		                                                                                            B.text AS 'Name''  		                                                                                            C.Name AS 'PropertyName'    			                                                                                FROM    cmsPropertyData A  			                                                                                        LEFT OUTER JOIN umbracoNode B ON A.ContentNodeId = B.Id  			                                                                                        LEFT OUTER JOIN cmsPropertyType C ON A.propertytypeid = C.id    			                                                                                WHERE   A.id = @propertyDataId"'                                                                                              uQuery.SqlHelper.CreateParameter("propertyDataId"' property.Id)))                      {                          iRecordsReader.Read(); // there should only be a single row returned                            // if the properties are on the same item' then label with property name' otherwise default to labeling with the node / media or member name                          if (iRecordsReader.Get<int>("Id") == this.CurrentContentId)                          {                              ghostImage.ToolTip = iRecordsReader.Get<string>("PropertyName");                          }                          else                          {                              ghostImage.ToolTip = iRecordsReader.Get<string>("Name");                          }                      }                        ghostImage.Style.Add(HtmlTextWriterStyle.Left' (imagePoint.X - 7).ToString() + "px");                      ghostImage.Style.Add(HtmlTextWriterStyle.Top' (imagePoint.Y - 7).ToString() + "px");                        areaDiv.Controls.Add(ghostImage);                  }              }
Magic Number,uComponents.DataTypes.ImagePoint,ImagePointPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ImagePoint\ImagePointPreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.widthTextBox.Width = 30;
Magic Number,uComponents.DataTypes.ImagePoint,ImagePointPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ImagePoint\ImagePointPreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.widthTextBox.MaxLength = 4;
Magic Number,uComponents.DataTypes.ImagePoint,ImagePointPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ImagePoint\ImagePointPreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.heightTextBox.Width = 30;
Magic Number,uComponents.DataTypes.ImagePoint,ImagePointPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ImagePoint\ImagePointPreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.heightTextBox.MaxLength = 4;
Magic Number,uComponents.DataTypes.Shared.macroRenderings,propertyTypePicker,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Shared\macroRenderings\propertyTypePicker.cs,OnInit,The following statement contains a magic number: if (_multiple)  			{  				this.SelectionMode = System.Web.UI.WebControls.ListSelectionMode.Multiple;  				this.Rows = 5;  				this.Multiple = true;  			}  			else  			{  				this.Rows = 1;  				this.Items.Add(new ListItem(""' ""));  				this.SelectionMode = ListSelectionMode.Single;  			}
Magic Number,uComponents.DataTypes.IncrementalTextBox,IT_PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\IncrementalTextBox\IT_PrevalueEditor.cs,Save,The following statement contains a magic number: lock (m_Locker)  			{  				var vals = PreValues.GetPreValues(this.m_DataType.DataTypeDefinitionId);  				if (vals.Count > 0)  				{  					// update  					((PreValue)vals[0]).Value = this.MinValueTextBox.Text;  					((PreValue)vals[0]).Save();  				}  				else  				{  					// insert  					PreValue.MakeNew(this.m_DataType.DataTypeDefinitionId' this.MinValueTextBox.Text);  				}    				if (vals.Count > 1)  				{  					// update  					((PreValue)vals[1]).Value = this.MaxValueTextBox.Text;  					((PreValue)vals[1]).Save();  				}  				else  				{  					// insert  					PreValue.MakeNew(this.m_DataType.DataTypeDefinitionId' this.MaxValueTextBox.Text);  				}    				if (vals.Count > 2)  				{  					// update  					((PreValue)vals[2]).Value = this.IncrementValueTextBox.Text;  					((PreValue)vals[2]).Save();  				}  				else  				{  					// insert  					PreValue.MakeNew(this.m_DataType.DataTypeDefinitionId' this.IncrementValueTextBox.Text);  				}  			}
Magic Number,uComponents.DataTypes.IncrementalTextBox,IT_PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\IncrementalTextBox\IT_PrevalueEditor.cs,Save,The following statement contains a magic number: lock (m_Locker)  			{  				var vals = PreValues.GetPreValues(this.m_DataType.DataTypeDefinitionId);  				if (vals.Count > 0)  				{  					// update  					((PreValue)vals[0]).Value = this.MinValueTextBox.Text;  					((PreValue)vals[0]).Save();  				}  				else  				{  					// insert  					PreValue.MakeNew(this.m_DataType.DataTypeDefinitionId' this.MinValueTextBox.Text);  				}    				if (vals.Count > 1)  				{  					// update  					((PreValue)vals[1]).Value = this.MaxValueTextBox.Text;  					((PreValue)vals[1]).Save();  				}  				else  				{  					// insert  					PreValue.MakeNew(this.m_DataType.DataTypeDefinitionId' this.MaxValueTextBox.Text);  				}    				if (vals.Count > 2)  				{  					// update  					((PreValue)vals[2]).Value = this.IncrementValueTextBox.Text;  					((PreValue)vals[2]).Save();  				}  				else  				{  					// insert  					PreValue.MakeNew(this.m_DataType.DataTypeDefinitionId' this.IncrementValueTextBox.Text);  				}  			}
Magic Number,uComponents.DataTypes.IncrementalTextBox,IT_PrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\IncrementalTextBox\IT_PrevalueEditor.cs,Save,The following statement contains a magic number: lock (m_Locker)  			{  				var vals = PreValues.GetPreValues(this.m_DataType.DataTypeDefinitionId);  				if (vals.Count > 0)  				{  					// update  					((PreValue)vals[0]).Value = this.MinValueTextBox.Text;  					((PreValue)vals[0]).Save();  				}  				else  				{  					// insert  					PreValue.MakeNew(this.m_DataType.DataTypeDefinitionId' this.MinValueTextBox.Text);  				}    				if (vals.Count > 1)  				{  					// update  					((PreValue)vals[1]).Value = this.MaxValueTextBox.Text;  					((PreValue)vals[1]).Save();  				}  				else  				{  					// insert  					PreValue.MakeNew(this.m_DataType.DataTypeDefinitionId' this.MaxValueTextBox.Text);  				}    				if (vals.Count > 2)  				{  					// update  					((PreValue)vals[2]).Value = this.IncrementValueTextBox.Text;  					((PreValue)vals[2]).Save();  				}  				else  				{  					// insert  					PreValue.MakeNew(this.m_DataType.DataTypeDefinitionId' this.IncrementValueTextBox.Text);  				}  			}
Magic Number,uComponents.DataTypes.Shared.AjaxUpload,AjaxUploadHandler,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Shared\AjaxUpload\AjaxUploadHandler.cs,ProcessRequest,The following statement contains a magic number: if (!int.TryParse(context.Request[m_IdParam]' out id) || id < 0)              {                  context.Response.StatusCode = 400;                  context.Response.StatusDescription = string.Format("You must include a parameter named '{0}'' which is a non-negative integer describing the subfolder under '{1}/' to save to."' m_IdParam' m_SavePath);                  WriteResponseBody(context);                  return;              }
Magic Number,uComponents.DataTypes.Shared.AjaxUpload,AjaxUploadHandler,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Shared\AjaxUpload\AjaxUploadHandler.cs,ProcessRequest,The following statement contains a magic number: foreach (string key in context.Request.Files)              {                  // Get the HttpPostedFile                  var file = context.Request.Files[key];                    // Check if this param is a file' and that the file is meant for this                  // handler (via the GUID).  Also check it isn't a null entry.                  if (key.Contains(Guid) && !string.IsNullOrEmpty(file.FileName.Trim()) && file.ContentLength > 0)                  {                      // Create the directory for this transaction                      var directory = IOHelper.MapPath(path);                        var shortFileName = Path.GetFileName(file.FileName);                      var fullFileName = directory + shortFileName;                        // Save file                      lock (m_Locker)                      {                          Directory.CreateDirectory(directory);                            //if (File.Exists(fullFileName))                          //{                          //    context.Response.StatusCode = 500;                          //    context.Response.StatusDescription = string.Format("File '{0}/{1}/{2}' already exists"' m_SavePath' id' shortFileName);                          //    WriteResponseBody(context);                          //    return;                          //}                            try                          {                              file.SaveAs(fullFileName);                          }                          catch (Exception)                          {                              context.Response.StatusCode = 500;                              context.Response.StatusDescription = string.Format("File '{0}/{1}/{2}' could not be saved"' m_SavePath' id' shortFileName);                              WriteResponseBody(context);                              return;                          }                            // Log file                          savedFiles.Add(string.Format("{0}/{1}/{2}"' m_SavePath.TrimStart('~')' id' shortFileName));                      }                  }              }
Magic Number,uComponents.DataTypes.Shared.AjaxUpload,AjaxUploadHandler,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Shared\AjaxUpload\AjaxUploadHandler.cs,ProcessRequest,The following statement contains a magic number: if (savedFiles.Count == 0)              {                  context.Response.StatusCode = 400;                  context.Response.StatusDescription = "You must post at least one file";                  WriteResponseBody(context);                  return;              }
Magic Number,uComponents.DataTypes.Shared.AjaxUpload,AjaxUploadHandler,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Shared\AjaxUpload\AjaxUploadHandler.cs,ProcessRequest,The following statement contains a magic number: context.Response.StatusCode = 200;
Magic Number,uComponents.DataTypes.Similarity,SimilarityPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Similarity\SimilarityPrevalueEditor.cs,Save,The following statement contains a magic number: lock (m_Locker)              {                  var vals = PreValues.GetPreValues(this.m_DataType.DataTypeDefinitionId);                  string selectedValuesAsCsv = GetSelectedPropertyAliases();                  if (vals.Count >= 1)                  {                        // update                      ((PreValue)vals[0]).Value = selectedValuesAsCsv;                      ((PreValue)vals[0]).Save();                  }                  else                  {                      // insert                      PreValue.MakeNew(this.m_DataType.DataTypeDefinitionId' selectedValuesAsCsv);                  }                    if (vals.Count >= 2)                  {                      //update                      ((PreValue)vals[1]).Value = _txtMaxResults.Text;                      ((PreValue)vals[1]).Save();                    }                  else                  {                      //insert                      PreValue.MakeNew(m_DataType.DataTypeDefinitionId' _txtMaxResults.Text);                  }                  if (vals.Count >= 3)                  {                      //update                      ((PreValue)vals[2]).Value = _indexToSearch.SelectedValue;                      ((PreValue)vals[2]).Save();                    }                  else                  {                      //insert                      PreValue.MakeNew(m_DataType.DataTypeDefinitionId' _indexToSearch.SelectedValue);                  }              }
Magic Number,uComponents.DataTypes.Similarity,SimilarityPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Similarity\SimilarityPrevalueEditor.cs,Save,The following statement contains a magic number: lock (m_Locker)              {                  var vals = PreValues.GetPreValues(this.m_DataType.DataTypeDefinitionId);                  string selectedValuesAsCsv = GetSelectedPropertyAliases();                  if (vals.Count >= 1)                  {                        // update                      ((PreValue)vals[0]).Value = selectedValuesAsCsv;                      ((PreValue)vals[0]).Save();                  }                  else                  {                      // insert                      PreValue.MakeNew(this.m_DataType.DataTypeDefinitionId' selectedValuesAsCsv);                  }                    if (vals.Count >= 2)                  {                      //update                      ((PreValue)vals[1]).Value = _txtMaxResults.Text;                      ((PreValue)vals[1]).Save();                    }                  else                  {                      //insert                      PreValue.MakeNew(m_DataType.DataTypeDefinitionId' _txtMaxResults.Text);                  }                  if (vals.Count >= 3)                  {                      //update                      ((PreValue)vals[2]).Value = _indexToSearch.SelectedValue;                      ((PreValue)vals[2]).Save();                    }                  else                  {                      //insert                      PreValue.MakeNew(m_DataType.DataTypeDefinitionId' _indexToSearch.SelectedValue);                  }              }
Magic Number,uComponents.DataTypes.Similarity,SimilarityPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Similarity\SimilarityPrevalueEditor.cs,Save,The following statement contains a magic number: lock (m_Locker)              {                  var vals = PreValues.GetPreValues(this.m_DataType.DataTypeDefinitionId);                  string selectedValuesAsCsv = GetSelectedPropertyAliases();                  if (vals.Count >= 1)                  {                        // update                      ((PreValue)vals[0]).Value = selectedValuesAsCsv;                      ((PreValue)vals[0]).Save();                  }                  else                  {                      // insert                      PreValue.MakeNew(this.m_DataType.DataTypeDefinitionId' selectedValuesAsCsv);                  }                    if (vals.Count >= 2)                  {                      //update                      ((PreValue)vals[1]).Value = _txtMaxResults.Text;                      ((PreValue)vals[1]).Save();                    }                  else                  {                      //insert                      PreValue.MakeNew(m_DataType.DataTypeDefinitionId' _txtMaxResults.Text);                  }                  if (vals.Count >= 3)                  {                      //update                      ((PreValue)vals[2]).Value = _indexToSearch.SelectedValue;                      ((PreValue)vals[2]).Save();                    }                  else                  {                      //insert                      PreValue.MakeNew(m_DataType.DataTypeDefinitionId' _indexToSearch.SelectedValue);                  }              }
Magic Number,uComponents.DataTypes.Similarity,SimilarityPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Similarity\SimilarityPrevalueEditor.cs,Save,The following statement contains a magic number: lock (m_Locker)              {                  var vals = PreValues.GetPreValues(this.m_DataType.DataTypeDefinitionId);                  string selectedValuesAsCsv = GetSelectedPropertyAliases();                  if (vals.Count >= 1)                  {                        // update                      ((PreValue)vals[0]).Value = selectedValuesAsCsv;                      ((PreValue)vals[0]).Save();                  }                  else                  {                      // insert                      PreValue.MakeNew(this.m_DataType.DataTypeDefinitionId' selectedValuesAsCsv);                  }                    if (vals.Count >= 2)                  {                      //update                      ((PreValue)vals[1]).Value = _txtMaxResults.Text;                      ((PreValue)vals[1]).Save();                    }                  else                  {                      //insert                      PreValue.MakeNew(m_DataType.DataTypeDefinitionId' _txtMaxResults.Text);                  }                  if (vals.Count >= 3)                  {                      //update                      ((PreValue)vals[2]).Value = _indexToSearch.SelectedValue;                      ((PreValue)vals[2]).Save();                    }                  else                  {                      //insert                      PreValue.MakeNew(m_DataType.DataTypeDefinitionId' _indexToSearch.SelectedValue);                  }              }
Magic Number,uComponents.DataTypes.Similarity.Net,MoreLikeThis,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Similarity\Net\MoreLikeThis.cs,CreateQuery,The following statement contains a magic number: while (((cur = q.Pop()) != null))  			{  				System.Object[] ar = (System.Object[])cur;  				TermQuery tq = new TermQuery(new Term((System.String)ar[1]' (System.String)ar[0]));    				if (boost)  				{  					if (qterms == 0)  					{  						bestScore = (float)((System.Single)ar[2]);  					}  					float myScore = (float)((System.Single)ar[2]);    					tq.SetBoost(myScore / bestScore);  				}    				try  				{  					query.Add(tq' BooleanClause.Occur.SHOULD);  				}  				catch (BooleanQuery.TooManyClauses)  				{  					break;  				}    				qterms++;  				if (maxQueryTerms > 0 && qterms >= maxQueryTerms)  				{  					break;  				}  			}
Magic Number,uComponents.DataTypes.Similarity.Net,MoreLikeThis,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Similarity\Net\MoreLikeThis.cs,CreateQuery,The following statement contains a magic number: while (((cur = q.Pop()) != null))  			{  				System.Object[] ar = (System.Object[])cur;  				TermQuery tq = new TermQuery(new Term((System.String)ar[1]' (System.String)ar[0]));    				if (boost)  				{  					if (qterms == 0)  					{  						bestScore = (float)((System.Single)ar[2]);  					}  					float myScore = (float)((System.Single)ar[2]);    					tq.SetBoost(myScore / bestScore);  				}    				try  				{  					query.Add(tq' BooleanClause.Occur.SHOULD);  				}  				catch (BooleanQuery.TooManyClauses)  				{  					break;  				}    				qterms++;  				if (maxQueryTerms > 0 && qterms >= maxQueryTerms)  				{  					break;  				}  			}
Magic Number,uComponents.DataTypes.Similarity.Net,MoreLikeThis,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Similarity\Net\MoreLikeThis.cs,Main,The following statement contains a magic number: for (int i = 0; i < System.Math.Min(25' len); i++)  			{  				Document d = hits.Doc(i);  				System.String summary = d.Get("summary");  				o.WriteLine("score  : " + hits.Score(i));  				o.WriteLine("url    : " + d.Get("url"));  				o.WriteLine("\ttitle  : " + d.Get("title"));  				if (summary != null)  					o.WriteLine("\tsummary: " + d.Get("summary"));  				o.WriteLine();  			}
Magic Number,uComponents.DataTypes.Similarity.Net,FreqQ,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Similarity\Net\MoreLikeThis.cs,LessThan,The following statement contains a magic number: System.Single fa = (System.Single)aa[2];
Magic Number,uComponents.DataTypes.Similarity.Net,FreqQ,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Similarity\Net\MoreLikeThis.cs,LessThan,The following statement contains a magic number: System.Single fb = (System.Single)bb[2];
Magic Number,uComponents.DataTypes.SqlAutoComplete,SqlAutoCompletePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlAutoComplete\SqlAutoCompletePreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.sqlTextBox.Rows = 10;
Magic Number,uComponents.DataTypes.SqlAutoComplete,SqlAutoCompletePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlAutoComplete\SqlAutoCompletePreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.sqlTextBox.Columns = 60;
Magic Number,uComponents.DataTypes.SqlAutoComplete,SqlAutoCompletePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlAutoComplete\SqlAutoCompletePreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.maxSuggestionsTextBox.Width = 30;
Magic Number,uComponents.DataTypes.SqlAutoComplete,SqlAutoCompletePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlAutoComplete\SqlAutoCompletePreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.maxSuggestionsTextBox.MaxLength = 2;
Magic Number,uComponents.DataTypes.SqlAutoComplete,SqlAutoCompletePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlAutoComplete\SqlAutoCompletePreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.minItemsTextBox.Width = 30;
Magic Number,uComponents.DataTypes.SqlAutoComplete,SqlAutoCompletePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlAutoComplete\SqlAutoCompletePreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.minItemsTextBox.MaxLength = 2;
Magic Number,uComponents.DataTypes.SqlAutoComplete,SqlAutoCompletePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlAutoComplete\SqlAutoCompletePreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.maxItemsTextBox.Width = 30;
Magic Number,uComponents.DataTypes.SqlAutoComplete,SqlAutoCompletePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlAutoComplete\SqlAutoCompletePreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.maxItemsTextBox.MaxLength = 2;
Magic Number,uComponents.DataTypes.SqlCheckBoxList,SqlCheckBoxListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlCheckBoxList\SqlCheckBoxListPreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.sqlTextBox.Rows = 10;
Magic Number,uComponents.DataTypes.SqlCheckBoxList,SqlCheckBoxListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlCheckBoxList\SqlCheckBoxListPreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.sqlTextBox.Columns = 60;
Magic Number,uComponents.DataTypes.SqlDropDownList,SqlDropDownListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlDropDownList\SqlDropDownListPreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.sqlTextBox.Rows = 10;
Magic Number,uComponents.DataTypes.SqlDropDownList,SqlDropDownListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SqlDropDownList\SqlDropDownListPreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.sqlTextBox.Columns = 60;
Magic Number,uComponents.DataTypes.TextstringArray,TextstringArrayControl,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\TextstringArray\TextstringArrayControl.cs,Render,The following statement contains a magic number: if (this.Options.ShowColumnLabels)  			{  				var labels = this.Options.ColumnLabels.Split(new[] { Environment.NewLine }' StringSplitOptions.None);    				if (labels != null && labels.Length > 0)  				{  					writer.AddAttribute(HtmlTextWriterAttribute.Class' "textstring-header-row");  					writer.RenderBeginTag(HtmlTextWriterTag.Div);    					foreach (string label in labels)  					{  						var displayLabel = label;  						if (displayLabel.Length > 3 && displayLabel.StartsWith("[#") && displayLabel.EndsWith("]"))  						{  							var key = displayLabel.Substring(2' label.Length - 3);  							displayLabel = uQuery.GetDictionaryItem(key' key);  						}    						writer.AddAttribute(HtmlTextWriterAttribute.Class' "textstring-header-row-col");  						writer.RenderBeginTag(HtmlTextWriterTag.Div);  						writer.WriteLine(displayLabel);  						writer.RenderEndTag(); // </div> .textstring-header-row-col  					}    					writer.RenderEndTag();  				}  			}
Magic Number,uComponents.DataTypes.TextstringArray,TextstringArrayControl,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\TextstringArray\TextstringArrayControl.cs,Render,The following statement contains a magic number: if (this.Options.ShowColumnLabels)  			{  				var labels = this.Options.ColumnLabels.Split(new[] { Environment.NewLine }' StringSplitOptions.None);    				if (labels != null && labels.Length > 0)  				{  					writer.AddAttribute(HtmlTextWriterAttribute.Class' "textstring-header-row");  					writer.RenderBeginTag(HtmlTextWriterTag.Div);    					foreach (string label in labels)  					{  						var displayLabel = label;  						if (displayLabel.Length > 3 && displayLabel.StartsWith("[#") && displayLabel.EndsWith("]"))  						{  							var key = displayLabel.Substring(2' label.Length - 3);  							displayLabel = uQuery.GetDictionaryItem(key' key);  						}    						writer.AddAttribute(HtmlTextWriterAttribute.Class' "textstring-header-row-col");  						writer.RenderBeginTag(HtmlTextWriterTag.Div);  						writer.WriteLine(displayLabel);  						writer.RenderEndTag(); // </div> .textstring-header-row-col  					}    					writer.RenderEndTag();  				}  			}
Magic Number,uComponents.DataTypes.TextstringArray,TextstringArrayControl,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\TextstringArray\TextstringArrayControl.cs,Render,The following statement contains a magic number: if (this.Options.ShowColumnLabels)  			{  				var labels = this.Options.ColumnLabels.Split(new[] { Environment.NewLine }' StringSplitOptions.None);    				if (labels != null && labels.Length > 0)  				{  					writer.AddAttribute(HtmlTextWriterAttribute.Class' "textstring-header-row");  					writer.RenderBeginTag(HtmlTextWriterTag.Div);    					foreach (string label in labels)  					{  						var displayLabel = label;  						if (displayLabel.Length > 3 && displayLabel.StartsWith("[#") && displayLabel.EndsWith("]"))  						{  							var key = displayLabel.Substring(2' label.Length - 3);  							displayLabel = uQuery.GetDictionaryItem(key' key);  						}    						writer.AddAttribute(HtmlTextWriterAttribute.Class' "textstring-header-row-col");  						writer.RenderBeginTag(HtmlTextWriterTag.Div);  						writer.WriteLine(displayLabel);  						writer.RenderEndTag(); // </div> .textstring-header-row-col  					}    					writer.RenderEndTag();  				}  			}
Magic Number,uComponents.DataTypes.TextstringArray,TextstringArrayPrevalueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\TextstringArray\TextstringArrayPrevalueEditor.cs,Save,The following statement contains a magic number: if (itemsPerRow == 0)  			{  				itemsPerRow = 2;  			}
Magic Number,uComponents.DataTypes.UrlPicker.Dto,UrlPickerState,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\UrlPicker\Dto\UrlPickerState.cs,Deserialize,The following statement contains a magic number: try              {                  switch (impliedDataFormat)                  {                      case UrlPickerDataFormat.Xml:                          var dataNode = XElement.Parse(serializedState);                            // Carefully try to get values out.  This is in case new versions add                          // to the XML                          var modeAttribute = dataNode.Attribute("mode");                          if (modeAttribute != null)                          {                              state.Mode = (UrlPickerMode)Enum.Parse(typeof(UrlPickerMode)' modeAttribute.Value' false);                          }                            var newWindowElement = dataNode.Element("new-window");                          if (newWindowElement != null)                          {                              state.NewWindow = bool.Parse(newWindowElement.Value);                          }                            var nodeIdElement = dataNode.Element("node-id");                          if (nodeIdElement != null)                          {                              int nodeId;                              if (int.TryParse(nodeIdElement.Value' out nodeId))                              {                                  state.NodeId = nodeId;                              }                          }                            var urlElement = dataNode.Element("url");                          if (urlElement != null)                          {                              state.Url = urlElement.Value;                          }                            var linkTitleElement = dataNode.Element("link-title");                          if (linkTitleElement != null && !string.IsNullOrEmpty(linkTitleElement.Value))                          {                              state.Title = linkTitleElement.Value;                          }                            break;                      case UrlPickerDataFormat.Csv:                            var parameters = serializedState.Split(''');                            if (parameters.Length > 0)                          {                              state.Mode = (UrlPickerMode)Enum.Parse(typeof(UrlPickerMode)' parameters[0]' false);                          }                          if (parameters.Length > 1)                          {                              state.NewWindow = bool.Parse(parameters[1]);                          }                          if (parameters.Length > 2)                          {                              int nodeId;                              if (int.TryParse(parameters[2]' out nodeId))                              {                                  state.NodeId = nodeId;                              }                          }                          if (parameters.Length > 3)                          {                              state.Url = parameters[3].Replace("&#45;"' "'");                          }                          if (parameters.Length > 4)                          {                              if (!string.IsNullOrEmpty(parameters[4]))                              {                                  state.Title = parameters[4].Replace("&#45;"' "'");                              }                          }                            break;                      case UrlPickerDataFormat.Json:                            var jss = new JavaScriptSerializer();                          state = jss.Deserialize<UrlPickerState>(serializedState);                            // Check for old states                          var untypedState = jss.DeserializeObject(serializedState);                          if (untypedState is Dictionary<string' object>)                          {                              var dictState = (Dictionary<string' object>)untypedState;                                if (dictState.ContainsKey("LinkTitle"))                              {                                  state.Title = (string)dictState["LinkTitle"];                                    if (dictState.ContainsKey("NewWindow"))                                  {                                      // There was a short period where the UrlPickerMode values were                                      // integers starting with zero' instead of one.  This period only                                      // existed when both the "LinkTitle" and "NewWindow" keys were                                      // used.                                      state.Mode = (UrlPickerMode)((int)dictState["Mode"] + 1);                                  }                              }                          }                            break;                      default:                          throw new NotImplementedException();                  }                                     // If the mode is a content node' get the url for the node                   if (state.Mode == UrlPickerMode.Content && state.NodeId.HasValue && UmbracoContext.Current != null)                   {                       var n = uQuery.GetNode(state.NodeId.Value);                       var url = n != null ? n.Url : "#";                           if (!string.IsNullOrWhiteSpace(url))                       {                           state.Url = url;                       }                         if (string.IsNullOrWhiteSpace(state.Title) && n != null)                       {                           state.Title = n.Name;                       }                   }              }              catch (Exception)              {                  // Could not be deserialised' return null                  state = null;              }
Magic Number,uComponents.DataTypes.UrlPicker.Dto,UrlPickerState,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\UrlPicker\Dto\UrlPickerState.cs,Deserialize,The following statement contains a magic number: try              {                  switch (impliedDataFormat)                  {                      case UrlPickerDataFormat.Xml:                          var dataNode = XElement.Parse(serializedState);                            // Carefully try to get values out.  This is in case new versions add                          // to the XML                          var modeAttribute = dataNode.Attribute("mode");                          if (modeAttribute != null)                          {                              state.Mode = (UrlPickerMode)Enum.Parse(typeof(UrlPickerMode)' modeAttribute.Value' false);                          }                            var newWindowElement = dataNode.Element("new-window");                          if (newWindowElement != null)                          {                              state.NewWindow = bool.Parse(newWindowElement.Value);                          }                            var nodeIdElement = dataNode.Element("node-id");                          if (nodeIdElement != null)                          {                              int nodeId;                              if (int.TryParse(nodeIdElement.Value' out nodeId))                              {                                  state.NodeId = nodeId;                              }                          }                            var urlElement = dataNode.Element("url");                          if (urlElement != null)                          {                              state.Url = urlElement.Value;                          }                            var linkTitleElement = dataNode.Element("link-title");                          if (linkTitleElement != null && !string.IsNullOrEmpty(linkTitleElement.Value))                          {                              state.Title = linkTitleElement.Value;                          }                            break;                      case UrlPickerDataFormat.Csv:                            var parameters = serializedState.Split(''');                            if (parameters.Length > 0)                          {                              state.Mode = (UrlPickerMode)Enum.Parse(typeof(UrlPickerMode)' parameters[0]' false);                          }                          if (parameters.Length > 1)                          {                              state.NewWindow = bool.Parse(parameters[1]);                          }                          if (parameters.Length > 2)                          {                              int nodeId;                              if (int.TryParse(parameters[2]' out nodeId))                              {                                  state.NodeId = nodeId;                              }                          }                          if (parameters.Length > 3)                          {                              state.Url = parameters[3].Replace("&#45;"' "'");                          }                          if (parameters.Length > 4)                          {                              if (!string.IsNullOrEmpty(parameters[4]))                              {                                  state.Title = parameters[4].Replace("&#45;"' "'");                              }                          }                            break;                      case UrlPickerDataFormat.Json:                            var jss = new JavaScriptSerializer();                          state = jss.Deserialize<UrlPickerState>(serializedState);                            // Check for old states                          var untypedState = jss.DeserializeObject(serializedState);                          if (untypedState is Dictionary<string' object>)                          {                              var dictState = (Dictionary<string' object>)untypedState;                                if (dictState.ContainsKey("LinkTitle"))                              {                                  state.Title = (string)dictState["LinkTitle"];                                    if (dictState.ContainsKey("NewWindow"))                                  {                                      // There was a short period where the UrlPickerMode values were                                      // integers starting with zero' instead of one.  This period only                                      // existed when both the "LinkTitle" and "NewWindow" keys were                                      // used.                                      state.Mode = (UrlPickerMode)((int)dictState["Mode"] + 1);                                  }                              }                          }                            break;                      default:                          throw new NotImplementedException();                  }                                     // If the mode is a content node' get the url for the node                   if (state.Mode == UrlPickerMode.Content && state.NodeId.HasValue && UmbracoContext.Current != null)                   {                       var n = uQuery.GetNode(state.NodeId.Value);                       var url = n != null ? n.Url : "#";                           if (!string.IsNullOrWhiteSpace(url))                       {                           state.Url = url;                       }                         if (string.IsNullOrWhiteSpace(state.Title) && n != null)                       {                           state.Title = n.Name;                       }                   }              }              catch (Exception)              {                  // Could not be deserialised' return null                  state = null;              }
Magic Number,uComponents.DataTypes.UrlPicker.Dto,UrlPickerState,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\UrlPicker\Dto\UrlPickerState.cs,Deserialize,The following statement contains a magic number: try              {                  switch (impliedDataFormat)                  {                      case UrlPickerDataFormat.Xml:                          var dataNode = XElement.Parse(serializedState);                            // Carefully try to get values out.  This is in case new versions add                          // to the XML                          var modeAttribute = dataNode.Attribute("mode");                          if (modeAttribute != null)                          {                              state.Mode = (UrlPickerMode)Enum.Parse(typeof(UrlPickerMode)' modeAttribute.Value' false);                          }                            var newWindowElement = dataNode.Element("new-window");                          if (newWindowElement != null)                          {                              state.NewWindow = bool.Parse(newWindowElement.Value);                          }                            var nodeIdElement = dataNode.Element("node-id");                          if (nodeIdElement != null)                          {                              int nodeId;                              if (int.TryParse(nodeIdElement.Value' out nodeId))                              {                                  state.NodeId = nodeId;                              }                          }                            var urlElement = dataNode.Element("url");                          if (urlElement != null)                          {                              state.Url = urlElement.Value;                          }                            var linkTitleElement = dataNode.Element("link-title");                          if (linkTitleElement != null && !string.IsNullOrEmpty(linkTitleElement.Value))                          {                              state.Title = linkTitleElement.Value;                          }                            break;                      case UrlPickerDataFormat.Csv:                            var parameters = serializedState.Split(''');                            if (parameters.Length > 0)                          {                              state.Mode = (UrlPickerMode)Enum.Parse(typeof(UrlPickerMode)' parameters[0]' false);                          }                          if (parameters.Length > 1)                          {                              state.NewWindow = bool.Parse(parameters[1]);                          }                          if (parameters.Length > 2)                          {                              int nodeId;                              if (int.TryParse(parameters[2]' out nodeId))                              {                                  state.NodeId = nodeId;                              }                          }                          if (parameters.Length > 3)                          {                              state.Url = parameters[3].Replace("&#45;"' "'");                          }                          if (parameters.Length > 4)                          {                              if (!string.IsNullOrEmpty(parameters[4]))                              {                                  state.Title = parameters[4].Replace("&#45;"' "'");                              }                          }                            break;                      case UrlPickerDataFormat.Json:                            var jss = new JavaScriptSerializer();                          state = jss.Deserialize<UrlPickerState>(serializedState);                            // Check for old states                          var untypedState = jss.DeserializeObject(serializedState);                          if (untypedState is Dictionary<string' object>)                          {                              var dictState = (Dictionary<string' object>)untypedState;                                if (dictState.ContainsKey("LinkTitle"))                              {                                  state.Title = (string)dictState["LinkTitle"];                                    if (dictState.ContainsKey("NewWindow"))                                  {                                      // There was a short period where the UrlPickerMode values were                                      // integers starting with zero' instead of one.  This period only                                      // existed when both the "LinkTitle" and "NewWindow" keys were                                      // used.                                      state.Mode = (UrlPickerMode)((int)dictState["Mode"] + 1);                                  }                              }                          }                            break;                      default:                          throw new NotImplementedException();                  }                                     // If the mode is a content node' get the url for the node                   if (state.Mode == UrlPickerMode.Content && state.NodeId.HasValue && UmbracoContext.Current != null)                   {                       var n = uQuery.GetNode(state.NodeId.Value);                       var url = n != null ? n.Url : "#";                           if (!string.IsNullOrWhiteSpace(url))                       {                           state.Url = url;                       }                         if (string.IsNullOrWhiteSpace(state.Title) && n != null)                       {                           state.Title = n.Name;                       }                   }              }              catch (Exception)              {                  // Could not be deserialised' return null                  state = null;              }
Magic Number,uComponents.DataTypes.UrlPicker.Dto,UrlPickerState,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\UrlPicker\Dto\UrlPickerState.cs,Deserialize,The following statement contains a magic number: try              {                  switch (impliedDataFormat)                  {                      case UrlPickerDataFormat.Xml:                          var dataNode = XElement.Parse(serializedState);                            // Carefully try to get values out.  This is in case new versions add                          // to the XML                          var modeAttribute = dataNode.Attribute("mode");                          if (modeAttribute != null)                          {                              state.Mode = (UrlPickerMode)Enum.Parse(typeof(UrlPickerMode)' modeAttribute.Value' false);                          }                            var newWindowElement = dataNode.Element("new-window");                          if (newWindowElement != null)                          {                              state.NewWindow = bool.Parse(newWindowElement.Value);                          }                            var nodeIdElement = dataNode.Element("node-id");                          if (nodeIdElement != null)                          {                              int nodeId;                              if (int.TryParse(nodeIdElement.Value' out nodeId))                              {                                  state.NodeId = nodeId;                              }                          }                            var urlElement = dataNode.Element("url");                          if (urlElement != null)                          {                              state.Url = urlElement.Value;                          }                            var linkTitleElement = dataNode.Element("link-title");                          if (linkTitleElement != null && !string.IsNullOrEmpty(linkTitleElement.Value))                          {                              state.Title = linkTitleElement.Value;                          }                            break;                      case UrlPickerDataFormat.Csv:                            var parameters = serializedState.Split(''');                            if (parameters.Length > 0)                          {                              state.Mode = (UrlPickerMode)Enum.Parse(typeof(UrlPickerMode)' parameters[0]' false);                          }                          if (parameters.Length > 1)                          {                              state.NewWindow = bool.Parse(parameters[1]);                          }                          if (parameters.Length > 2)                          {                              int nodeId;                              if (int.TryParse(parameters[2]' out nodeId))                              {                                  state.NodeId = nodeId;                              }                          }                          if (parameters.Length > 3)                          {                              state.Url = parameters[3].Replace("&#45;"' "'");                          }                          if (parameters.Length > 4)                          {                              if (!string.IsNullOrEmpty(parameters[4]))                              {                                  state.Title = parameters[4].Replace("&#45;"' "'");                              }                          }                            break;                      case UrlPickerDataFormat.Json:                            var jss = new JavaScriptSerializer();                          state = jss.Deserialize<UrlPickerState>(serializedState);                            // Check for old states                          var untypedState = jss.DeserializeObject(serializedState);                          if (untypedState is Dictionary<string' object>)                          {                              var dictState = (Dictionary<string' object>)untypedState;                                if (dictState.ContainsKey("LinkTitle"))                              {                                  state.Title = (string)dictState["LinkTitle"];                                    if (dictState.ContainsKey("NewWindow"))                                  {                                      // There was a short period where the UrlPickerMode values were                                      // integers starting with zero' instead of one.  This period only                                      // existed when both the "LinkTitle" and "NewWindow" keys were                                      // used.                                      state.Mode = (UrlPickerMode)((int)dictState["Mode"] + 1);                                  }                              }                          }                            break;                      default:                          throw new NotImplementedException();                  }                                     // If the mode is a content node' get the url for the node                   if (state.Mode == UrlPickerMode.Content && state.NodeId.HasValue && UmbracoContext.Current != null)                   {                       var n = uQuery.GetNode(state.NodeId.Value);                       var url = n != null ? n.Url : "#";                           if (!string.IsNullOrWhiteSpace(url))                       {                           state.Url = url;                       }                         if (string.IsNullOrWhiteSpace(state.Title) && n != null)                       {                           state.Title = n.Name;                       }                   }              }              catch (Exception)              {                  // Could not be deserialised' return null                  state = null;              }
Magic Number,uComponents.DataTypes.UrlPicker.Dto,UrlPickerState,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\UrlPicker\Dto\UrlPickerState.cs,Deserialize,The following statement contains a magic number: try              {                  switch (impliedDataFormat)                  {                      case UrlPickerDataFormat.Xml:                          var dataNode = XElement.Parse(serializedState);                            // Carefully try to get values out.  This is in case new versions add                          // to the XML                          var modeAttribute = dataNode.Attribute("mode");                          if (modeAttribute != null)                          {                              state.Mode = (UrlPickerMode)Enum.Parse(typeof(UrlPickerMode)' modeAttribute.Value' false);                          }                            var newWindowElement = dataNode.Element("new-window");                          if (newWindowElement != null)                          {                              state.NewWindow = bool.Parse(newWindowElement.Value);                          }                            var nodeIdElement = dataNode.Element("node-id");                          if (nodeIdElement != null)                          {                              int nodeId;                              if (int.TryParse(nodeIdElement.Value' out nodeId))                              {                                  state.NodeId = nodeId;                              }                          }                            var urlElement = dataNode.Element("url");                          if (urlElement != null)                          {                              state.Url = urlElement.Value;                          }                            var linkTitleElement = dataNode.Element("link-title");                          if (linkTitleElement != null && !string.IsNullOrEmpty(linkTitleElement.Value))                          {                              state.Title = linkTitleElement.Value;                          }                            break;                      case UrlPickerDataFormat.Csv:                            var parameters = serializedState.Split(''');                            if (parameters.Length > 0)                          {                              state.Mode = (UrlPickerMode)Enum.Parse(typeof(UrlPickerMode)' parameters[0]' false);                          }                          if (parameters.Length > 1)                          {                              state.NewWindow = bool.Parse(parameters[1]);                          }                          if (parameters.Length > 2)                          {                              int nodeId;                              if (int.TryParse(parameters[2]' out nodeId))                              {                                  state.NodeId = nodeId;                              }                          }                          if (parameters.Length > 3)                          {                              state.Url = parameters[3].Replace("&#45;"' "'");                          }                          if (parameters.Length > 4)                          {                              if (!string.IsNullOrEmpty(parameters[4]))                              {                                  state.Title = parameters[4].Replace("&#45;"' "'");                              }                          }                            break;                      case UrlPickerDataFormat.Json:                            var jss = new JavaScriptSerializer();                          state = jss.Deserialize<UrlPickerState>(serializedState);                            // Check for old states                          var untypedState = jss.DeserializeObject(serializedState);                          if (untypedState is Dictionary<string' object>)                          {                              var dictState = (Dictionary<string' object>)untypedState;                                if (dictState.ContainsKey("LinkTitle"))                              {                                  state.Title = (string)dictState["LinkTitle"];                                    if (dictState.ContainsKey("NewWindow"))                                  {                                      // There was a short period where the UrlPickerMode values were                                      // integers starting with zero' instead of one.  This period only                                      // existed when both the "LinkTitle" and "NewWindow" keys were                                      // used.                                      state.Mode = (UrlPickerMode)((int)dictState["Mode"] + 1);                                  }                              }                          }                            break;                      default:                          throw new NotImplementedException();                  }                                     // If the mode is a content node' get the url for the node                   if (state.Mode == UrlPickerMode.Content && state.NodeId.HasValue && UmbracoContext.Current != null)                   {                       var n = uQuery.GetNode(state.NodeId.Value);                       var url = n != null ? n.Url : "#";                           if (!string.IsNullOrWhiteSpace(url))                       {                           state.Url = url;                       }                         if (string.IsNullOrWhiteSpace(state.Title) && n != null)                       {                           state.Title = n.Name;                       }                   }              }              catch (Exception)              {                  // Could not be deserialised' return null                  state = null;              }
Magic Number,uComponents.DataTypes.UrlPicker.Dto,UrlPickerState,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\UrlPicker\Dto\UrlPickerState.cs,Deserialize,The following statement contains a magic number: try              {                  switch (impliedDataFormat)                  {                      case UrlPickerDataFormat.Xml:                          var dataNode = XElement.Parse(serializedState);                            // Carefully try to get values out.  This is in case new versions add                          // to the XML                          var modeAttribute = dataNode.Attribute("mode");                          if (modeAttribute != null)                          {                              state.Mode = (UrlPickerMode)Enum.Parse(typeof(UrlPickerMode)' modeAttribute.Value' false);                          }                            var newWindowElement = dataNode.Element("new-window");                          if (newWindowElement != null)                          {                              state.NewWindow = bool.Parse(newWindowElement.Value);                          }                            var nodeIdElement = dataNode.Element("node-id");                          if (nodeIdElement != null)                          {                              int nodeId;                              if (int.TryParse(nodeIdElement.Value' out nodeId))                              {                                  state.NodeId = nodeId;                              }                          }                            var urlElement = dataNode.Element("url");                          if (urlElement != null)                          {                              state.Url = urlElement.Value;                          }                            var linkTitleElement = dataNode.Element("link-title");                          if (linkTitleElement != null && !string.IsNullOrEmpty(linkTitleElement.Value))                          {                              state.Title = linkTitleElement.Value;                          }                            break;                      case UrlPickerDataFormat.Csv:                            var parameters = serializedState.Split(''');                            if (parameters.Length > 0)                          {                              state.Mode = (UrlPickerMode)Enum.Parse(typeof(UrlPickerMode)' parameters[0]' false);                          }                          if (parameters.Length > 1)                          {                              state.NewWindow = bool.Parse(parameters[1]);                          }                          if (parameters.Length > 2)                          {                              int nodeId;                              if (int.TryParse(parameters[2]' out nodeId))                              {                                  state.NodeId = nodeId;                              }                          }                          if (parameters.Length > 3)                          {                              state.Url = parameters[3].Replace("&#45;"' "'");                          }                          if (parameters.Length > 4)                          {                              if (!string.IsNullOrEmpty(parameters[4]))                              {                                  state.Title = parameters[4].Replace("&#45;"' "'");                              }                          }                            break;                      case UrlPickerDataFormat.Json:                            var jss = new JavaScriptSerializer();                          state = jss.Deserialize<UrlPickerState>(serializedState);                            // Check for old states                          var untypedState = jss.DeserializeObject(serializedState);                          if (untypedState is Dictionary<string' object>)                          {                              var dictState = (Dictionary<string' object>)untypedState;                                if (dictState.ContainsKey("LinkTitle"))                              {                                  state.Title = (string)dictState["LinkTitle"];                                    if (dictState.ContainsKey("NewWindow"))                                  {                                      // There was a short period where the UrlPickerMode values were                                      // integers starting with zero' instead of one.  This period only                                      // existed when both the "LinkTitle" and "NewWindow" keys were                                      // used.                                      state.Mode = (UrlPickerMode)((int)dictState["Mode"] + 1);                                  }                              }                          }                            break;                      default:                          throw new NotImplementedException();                  }                                     // If the mode is a content node' get the url for the node                   if (state.Mode == UrlPickerMode.Content && state.NodeId.HasValue && UmbracoContext.Current != null)                   {                       var n = uQuery.GetNode(state.NodeId.Value);                       var url = n != null ? n.Url : "#";                           if (!string.IsNullOrWhiteSpace(url))                       {                           state.Url = url;                       }                         if (string.IsNullOrWhiteSpace(state.Title) && n != null)                       {                           state.Title = n.Name;                       }                   }              }              catch (Exception)              {                  // Could not be deserialised' return null                  state = null;              }
Magic Number,uComponents.DataTypes.UrlPicker.Dto,UrlPickerState,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\UrlPicker\Dto\UrlPickerState.cs,Deserialize,The following statement contains a magic number: try              {                  switch (impliedDataFormat)                  {                      case UrlPickerDataFormat.Xml:                          var dataNode = XElement.Parse(serializedState);                            // Carefully try to get values out.  This is in case new versions add                          // to the XML                          var modeAttribute = dataNode.Attribute("mode");                          if (modeAttribute != null)                          {                              state.Mode = (UrlPickerMode)Enum.Parse(typeof(UrlPickerMode)' modeAttribute.Value' false);                          }                            var newWindowElement = dataNode.Element("new-window");                          if (newWindowElement != null)                          {                              state.NewWindow = bool.Parse(newWindowElement.Value);                          }                            var nodeIdElement = dataNode.Element("node-id");                          if (nodeIdElement != null)                          {                              int nodeId;                              if (int.TryParse(nodeIdElement.Value' out nodeId))                              {                                  state.NodeId = nodeId;                              }                          }                            var urlElement = dataNode.Element("url");                          if (urlElement != null)                          {                              state.Url = urlElement.Value;                          }                            var linkTitleElement = dataNode.Element("link-title");                          if (linkTitleElement != null && !string.IsNullOrEmpty(linkTitleElement.Value))                          {                              state.Title = linkTitleElement.Value;                          }                            break;                      case UrlPickerDataFormat.Csv:                            var parameters = serializedState.Split(''');                            if (parameters.Length > 0)                          {                              state.Mode = (UrlPickerMode)Enum.Parse(typeof(UrlPickerMode)' parameters[0]' false);                          }                          if (parameters.Length > 1)                          {                              state.NewWindow = bool.Parse(parameters[1]);                          }                          if (parameters.Length > 2)                          {                              int nodeId;                              if (int.TryParse(parameters[2]' out nodeId))                              {                                  state.NodeId = nodeId;                              }                          }                          if (parameters.Length > 3)                          {                              state.Url = parameters[3].Replace("&#45;"' "'");                          }                          if (parameters.Length > 4)                          {                              if (!string.IsNullOrEmpty(parameters[4]))                              {                                  state.Title = parameters[4].Replace("&#45;"' "'");                              }                          }                            break;                      case UrlPickerDataFormat.Json:                            var jss = new JavaScriptSerializer();                          state = jss.Deserialize<UrlPickerState>(serializedState);                            // Check for old states                          var untypedState = jss.DeserializeObject(serializedState);                          if (untypedState is Dictionary<string' object>)                          {                              var dictState = (Dictionary<string' object>)untypedState;                                if (dictState.ContainsKey("LinkTitle"))                              {                                  state.Title = (string)dictState["LinkTitle"];                                    if (dictState.ContainsKey("NewWindow"))                                  {                                      // There was a short period where the UrlPickerMode values were                                      // integers starting with zero' instead of one.  This period only                                      // existed when both the "LinkTitle" and "NewWindow" keys were                                      // used.                                      state.Mode = (UrlPickerMode)((int)dictState["Mode"] + 1);                                  }                              }                          }                            break;                      default:                          throw new NotImplementedException();                  }                                     // If the mode is a content node' get the url for the node                   if (state.Mode == UrlPickerMode.Content && state.NodeId.HasValue && UmbracoContext.Current != null)                   {                       var n = uQuery.GetNode(state.NodeId.Value);                       var url = n != null ? n.Url : "#";                           if (!string.IsNullOrWhiteSpace(url))                       {                           state.Url = url;                       }                         if (string.IsNullOrWhiteSpace(state.Title) && n != null)                       {                           state.Title = n.Name;                       }                   }              }              catch (Exception)              {                  // Could not be deserialised' return null                  state = null;              }
Magic Number,uComponents.DataTypes.UrlPicker,UrlPickerPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\UrlPicker\UrlPickerPreValueEditor.cs,Save,The following statement contains a magic number: if (this.Page.IsValid)              {                  if (DataFormatDropDown == null ||                      DefaultModeDropDown == null ||                      ModeSelector == null ||                      EnableTitleCheckbox == null ||                      EnableNewWindowCheckbox == null)                  {                      return;                  }                    DataType.DBType = umbraco.cms.businesslogic.datatype.DBTypes.Ntext;                    // If none are selected that's no good - you need to have at least one.  So                  // we shall select all of the modes in this case.                  if (!ModeSelector.Items.Cast<ListItem>().Any(x => x.Selected))                  {                      ModeSelector.Items.Cast<ListItem>().ToList().ForEach(x => x.Selected = true);                  }                    // Get selected items                  var allowedModesDataSet = ModeSelector.Items.Cast<ListItem>()                      .Where(x => x.Selected)                      .Select(y => y.Text)                      .ToList();                    // Generate "AllowedModes" data string to save - this needs to be the same format as the config above                  var allowedModesDataString = string.Join("|"' allowedModesDataSet.ToArray());                    // Validate Default Mode' set to the first allowed mode if it's not allowed                  if (!allowedModesDataSet.Contains(DefaultModeDropDown.SelectedItem.Text))                  {                      // Set selected default mode                      var selectedDefaultModeItem = DefaultModeDropDown.Items.FindByText(allowedModesDataSet.First());                        if (selectedDefaultModeItem != null)                      {                          DefaultModeDropDown.ClearSelection();                          selectedDefaultModeItem.Selected = true;                      }                  }                    // I guess I'd better lock this? or something? should I? better safe than sorry.                  lock (m_Locker)                  {                      var vals = GetPreValues();                        // Only save if one or more items were selected - otherwise this control doesn't make sense!                      if (!string.IsNullOrEmpty(allowedModesDataString))                      {                          if (vals.Count >= 1)                          {                              //update                              ((PreValue)vals[0]).Value = allowedModesDataString;                              ((PreValue)vals[0]).Save();                          }                          else                          {                              //insert                              PreValue.MakeNew(DataType.DataTypeDefinitionId' allowedModesDataString);                          }                      }                        if (vals.Count >= 2)                      {                          //update                          ((PreValue)vals[1]).Value = DataFormatDropDown.SelectedItem.Text;                          ((PreValue)vals[1]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' DataFormatDropDown.SelectedItem.Text);                      }                        if (vals.Count >= 3)                      {                          //update                          ((PreValue)vals[2]).Value = EnableTitleCheckbox.Checked.ToString();                          ((PreValue)vals[2]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' EnableTitleCheckbox.Checked.ToString());                      }                        if (vals.Count >= 4)                      {                          //update                          ((PreValue)vals[3]).Value = EnableNewWindowCheckbox.Checked.ToString();                          ((PreValue)vals[3]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' EnableNewWindowCheckbox.Checked.ToString());                      }                        if (vals.Count >= 5)                      {                          //update                          ((PreValue)vals[4]).Value = DefaultModeDropDown.SelectedItem.Text;                          ((PreValue)vals[4]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' DefaultModeDropDown.SelectedItem.Text);                      }                  }              }
Magic Number,uComponents.DataTypes.UrlPicker,UrlPickerPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\UrlPicker\UrlPickerPreValueEditor.cs,Save,The following statement contains a magic number: if (this.Page.IsValid)              {                  if (DataFormatDropDown == null ||                      DefaultModeDropDown == null ||                      ModeSelector == null ||                      EnableTitleCheckbox == null ||                      EnableNewWindowCheckbox == null)                  {                      return;                  }                    DataType.DBType = umbraco.cms.businesslogic.datatype.DBTypes.Ntext;                    // If none are selected that's no good - you need to have at least one.  So                  // we shall select all of the modes in this case.                  if (!ModeSelector.Items.Cast<ListItem>().Any(x => x.Selected))                  {                      ModeSelector.Items.Cast<ListItem>().ToList().ForEach(x => x.Selected = true);                  }                    // Get selected items                  var allowedModesDataSet = ModeSelector.Items.Cast<ListItem>()                      .Where(x => x.Selected)                      .Select(y => y.Text)                      .ToList();                    // Generate "AllowedModes" data string to save - this needs to be the same format as the config above                  var allowedModesDataString = string.Join("|"' allowedModesDataSet.ToArray());                    // Validate Default Mode' set to the first allowed mode if it's not allowed                  if (!allowedModesDataSet.Contains(DefaultModeDropDown.SelectedItem.Text))                  {                      // Set selected default mode                      var selectedDefaultModeItem = DefaultModeDropDown.Items.FindByText(allowedModesDataSet.First());                        if (selectedDefaultModeItem != null)                      {                          DefaultModeDropDown.ClearSelection();                          selectedDefaultModeItem.Selected = true;                      }                  }                    // I guess I'd better lock this? or something? should I? better safe than sorry.                  lock (m_Locker)                  {                      var vals = GetPreValues();                        // Only save if one or more items were selected - otherwise this control doesn't make sense!                      if (!string.IsNullOrEmpty(allowedModesDataString))                      {                          if (vals.Count >= 1)                          {                              //update                              ((PreValue)vals[0]).Value = allowedModesDataString;                              ((PreValue)vals[0]).Save();                          }                          else                          {                              //insert                              PreValue.MakeNew(DataType.DataTypeDefinitionId' allowedModesDataString);                          }                      }                        if (vals.Count >= 2)                      {                          //update                          ((PreValue)vals[1]).Value = DataFormatDropDown.SelectedItem.Text;                          ((PreValue)vals[1]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' DataFormatDropDown.SelectedItem.Text);                      }                        if (vals.Count >= 3)                      {                          //update                          ((PreValue)vals[2]).Value = EnableTitleCheckbox.Checked.ToString();                          ((PreValue)vals[2]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' EnableTitleCheckbox.Checked.ToString());                      }                        if (vals.Count >= 4)                      {                          //update                          ((PreValue)vals[3]).Value = EnableNewWindowCheckbox.Checked.ToString();                          ((PreValue)vals[3]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' EnableNewWindowCheckbox.Checked.ToString());                      }                        if (vals.Count >= 5)                      {                          //update                          ((PreValue)vals[4]).Value = DefaultModeDropDown.SelectedItem.Text;                          ((PreValue)vals[4]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' DefaultModeDropDown.SelectedItem.Text);                      }                  }              }
Magic Number,uComponents.DataTypes.UrlPicker,UrlPickerPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\UrlPicker\UrlPickerPreValueEditor.cs,Save,The following statement contains a magic number: if (this.Page.IsValid)              {                  if (DataFormatDropDown == null ||                      DefaultModeDropDown == null ||                      ModeSelector == null ||                      EnableTitleCheckbox == null ||                      EnableNewWindowCheckbox == null)                  {                      return;                  }                    DataType.DBType = umbraco.cms.businesslogic.datatype.DBTypes.Ntext;                    // If none are selected that's no good - you need to have at least one.  So                  // we shall select all of the modes in this case.                  if (!ModeSelector.Items.Cast<ListItem>().Any(x => x.Selected))                  {                      ModeSelector.Items.Cast<ListItem>().ToList().ForEach(x => x.Selected = true);                  }                    // Get selected items                  var allowedModesDataSet = ModeSelector.Items.Cast<ListItem>()                      .Where(x => x.Selected)                      .Select(y => y.Text)                      .ToList();                    // Generate "AllowedModes" data string to save - this needs to be the same format as the config above                  var allowedModesDataString = string.Join("|"' allowedModesDataSet.ToArray());                    // Validate Default Mode' set to the first allowed mode if it's not allowed                  if (!allowedModesDataSet.Contains(DefaultModeDropDown.SelectedItem.Text))                  {                      // Set selected default mode                      var selectedDefaultModeItem = DefaultModeDropDown.Items.FindByText(allowedModesDataSet.First());                        if (selectedDefaultModeItem != null)                      {                          DefaultModeDropDown.ClearSelection();                          selectedDefaultModeItem.Selected = true;                      }                  }                    // I guess I'd better lock this? or something? should I? better safe than sorry.                  lock (m_Locker)                  {                      var vals = GetPreValues();                        // Only save if one or more items were selected - otherwise this control doesn't make sense!                      if (!string.IsNullOrEmpty(allowedModesDataString))                      {                          if (vals.Count >= 1)                          {                              //update                              ((PreValue)vals[0]).Value = allowedModesDataString;                              ((PreValue)vals[0]).Save();                          }                          else                          {                              //insert                              PreValue.MakeNew(DataType.DataTypeDefinitionId' allowedModesDataString);                          }                      }                        if (vals.Count >= 2)                      {                          //update                          ((PreValue)vals[1]).Value = DataFormatDropDown.SelectedItem.Text;                          ((PreValue)vals[1]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' DataFormatDropDown.SelectedItem.Text);                      }                        if (vals.Count >= 3)                      {                          //update                          ((PreValue)vals[2]).Value = EnableTitleCheckbox.Checked.ToString();                          ((PreValue)vals[2]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' EnableTitleCheckbox.Checked.ToString());                      }                        if (vals.Count >= 4)                      {                          //update                          ((PreValue)vals[3]).Value = EnableNewWindowCheckbox.Checked.ToString();                          ((PreValue)vals[3]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' EnableNewWindowCheckbox.Checked.ToString());                      }                        if (vals.Count >= 5)                      {                          //update                          ((PreValue)vals[4]).Value = DefaultModeDropDown.SelectedItem.Text;                          ((PreValue)vals[4]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' DefaultModeDropDown.SelectedItem.Text);                      }                  }              }
Magic Number,uComponents.DataTypes.UrlPicker,UrlPickerPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\UrlPicker\UrlPickerPreValueEditor.cs,Save,The following statement contains a magic number: if (this.Page.IsValid)              {                  if (DataFormatDropDown == null ||                      DefaultModeDropDown == null ||                      ModeSelector == null ||                      EnableTitleCheckbox == null ||                      EnableNewWindowCheckbox == null)                  {                      return;                  }                    DataType.DBType = umbraco.cms.businesslogic.datatype.DBTypes.Ntext;                    // If none are selected that's no good - you need to have at least one.  So                  // we shall select all of the modes in this case.                  if (!ModeSelector.Items.Cast<ListItem>().Any(x => x.Selected))                  {                      ModeSelector.Items.Cast<ListItem>().ToList().ForEach(x => x.Selected = true);                  }                    // Get selected items                  var allowedModesDataSet = ModeSelector.Items.Cast<ListItem>()                      .Where(x => x.Selected)                      .Select(y => y.Text)                      .ToList();                    // Generate "AllowedModes" data string to save - this needs to be the same format as the config above                  var allowedModesDataString = string.Join("|"' allowedModesDataSet.ToArray());                    // Validate Default Mode' set to the first allowed mode if it's not allowed                  if (!allowedModesDataSet.Contains(DefaultModeDropDown.SelectedItem.Text))                  {                      // Set selected default mode                      var selectedDefaultModeItem = DefaultModeDropDown.Items.FindByText(allowedModesDataSet.First());                        if (selectedDefaultModeItem != null)                      {                          DefaultModeDropDown.ClearSelection();                          selectedDefaultModeItem.Selected = true;                      }                  }                    // I guess I'd better lock this? or something? should I? better safe than sorry.                  lock (m_Locker)                  {                      var vals = GetPreValues();                        // Only save if one or more items were selected - otherwise this control doesn't make sense!                      if (!string.IsNullOrEmpty(allowedModesDataString))                      {                          if (vals.Count >= 1)                          {                              //update                              ((PreValue)vals[0]).Value = allowedModesDataString;                              ((PreValue)vals[0]).Save();                          }                          else                          {                              //insert                              PreValue.MakeNew(DataType.DataTypeDefinitionId' allowedModesDataString);                          }                      }                        if (vals.Count >= 2)                      {                          //update                          ((PreValue)vals[1]).Value = DataFormatDropDown.SelectedItem.Text;                          ((PreValue)vals[1]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' DataFormatDropDown.SelectedItem.Text);                      }                        if (vals.Count >= 3)                      {                          //update                          ((PreValue)vals[2]).Value = EnableTitleCheckbox.Checked.ToString();                          ((PreValue)vals[2]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' EnableTitleCheckbox.Checked.ToString());                      }                        if (vals.Count >= 4)                      {                          //update                          ((PreValue)vals[3]).Value = EnableNewWindowCheckbox.Checked.ToString();                          ((PreValue)vals[3]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' EnableNewWindowCheckbox.Checked.ToString());                      }                        if (vals.Count >= 5)                      {                          //update                          ((PreValue)vals[4]).Value = DefaultModeDropDown.SelectedItem.Text;                          ((PreValue)vals[4]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' DefaultModeDropDown.SelectedItem.Text);                      }                  }              }
Magic Number,uComponents.DataTypes.UrlPicker,UrlPickerPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\UrlPicker\UrlPickerPreValueEditor.cs,Save,The following statement contains a magic number: if (this.Page.IsValid)              {                  if (DataFormatDropDown == null ||                      DefaultModeDropDown == null ||                      ModeSelector == null ||                      EnableTitleCheckbox == null ||                      EnableNewWindowCheckbox == null)                  {                      return;                  }                    DataType.DBType = umbraco.cms.businesslogic.datatype.DBTypes.Ntext;                    // If none are selected that's no good - you need to have at least one.  So                  // we shall select all of the modes in this case.                  if (!ModeSelector.Items.Cast<ListItem>().Any(x => x.Selected))                  {                      ModeSelector.Items.Cast<ListItem>().ToList().ForEach(x => x.Selected = true);                  }                    // Get selected items                  var allowedModesDataSet = ModeSelector.Items.Cast<ListItem>()                      .Where(x => x.Selected)                      .Select(y => y.Text)                      .ToList();                    // Generate "AllowedModes" data string to save - this needs to be the same format as the config above                  var allowedModesDataString = string.Join("|"' allowedModesDataSet.ToArray());                    // Validate Default Mode' set to the first allowed mode if it's not allowed                  if (!allowedModesDataSet.Contains(DefaultModeDropDown.SelectedItem.Text))                  {                      // Set selected default mode                      var selectedDefaultModeItem = DefaultModeDropDown.Items.FindByText(allowedModesDataSet.First());                        if (selectedDefaultModeItem != null)                      {                          DefaultModeDropDown.ClearSelection();                          selectedDefaultModeItem.Selected = true;                      }                  }                    // I guess I'd better lock this? or something? should I? better safe than sorry.                  lock (m_Locker)                  {                      var vals = GetPreValues();                        // Only save if one or more items were selected - otherwise this control doesn't make sense!                      if (!string.IsNullOrEmpty(allowedModesDataString))                      {                          if (vals.Count >= 1)                          {                              //update                              ((PreValue)vals[0]).Value = allowedModesDataString;                              ((PreValue)vals[0]).Save();                          }                          else                          {                              //insert                              PreValue.MakeNew(DataType.DataTypeDefinitionId' allowedModesDataString);                          }                      }                        if (vals.Count >= 2)                      {                          //update                          ((PreValue)vals[1]).Value = DataFormatDropDown.SelectedItem.Text;                          ((PreValue)vals[1]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' DataFormatDropDown.SelectedItem.Text);                      }                        if (vals.Count >= 3)                      {                          //update                          ((PreValue)vals[2]).Value = EnableTitleCheckbox.Checked.ToString();                          ((PreValue)vals[2]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' EnableTitleCheckbox.Checked.ToString());                      }                        if (vals.Count >= 4)                      {                          //update                          ((PreValue)vals[3]).Value = EnableNewWindowCheckbox.Checked.ToString();                          ((PreValue)vals[3]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' EnableNewWindowCheckbox.Checked.ToString());                      }                        if (vals.Count >= 5)                      {                          //update                          ((PreValue)vals[4]).Value = DefaultModeDropDown.SelectedItem.Text;                          ((PreValue)vals[4]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' DefaultModeDropDown.SelectedItem.Text);                      }                  }              }
Magic Number,uComponents.DataTypes.UrlPicker,UrlPickerPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\UrlPicker\UrlPickerPreValueEditor.cs,Save,The following statement contains a magic number: if (this.Page.IsValid)              {                  if (DataFormatDropDown == null ||                      DefaultModeDropDown == null ||                      ModeSelector == null ||                      EnableTitleCheckbox == null ||                      EnableNewWindowCheckbox == null)                  {                      return;                  }                    DataType.DBType = umbraco.cms.businesslogic.datatype.DBTypes.Ntext;                    // If none are selected that's no good - you need to have at least one.  So                  // we shall select all of the modes in this case.                  if (!ModeSelector.Items.Cast<ListItem>().Any(x => x.Selected))                  {                      ModeSelector.Items.Cast<ListItem>().ToList().ForEach(x => x.Selected = true);                  }                    // Get selected items                  var allowedModesDataSet = ModeSelector.Items.Cast<ListItem>()                      .Where(x => x.Selected)                      .Select(y => y.Text)                      .ToList();                    // Generate "AllowedModes" data string to save - this needs to be the same format as the config above                  var allowedModesDataString = string.Join("|"' allowedModesDataSet.ToArray());                    // Validate Default Mode' set to the first allowed mode if it's not allowed                  if (!allowedModesDataSet.Contains(DefaultModeDropDown.SelectedItem.Text))                  {                      // Set selected default mode                      var selectedDefaultModeItem = DefaultModeDropDown.Items.FindByText(allowedModesDataSet.First());                        if (selectedDefaultModeItem != null)                      {                          DefaultModeDropDown.ClearSelection();                          selectedDefaultModeItem.Selected = true;                      }                  }                    // I guess I'd better lock this? or something? should I? better safe than sorry.                  lock (m_Locker)                  {                      var vals = GetPreValues();                        // Only save if one or more items were selected - otherwise this control doesn't make sense!                      if (!string.IsNullOrEmpty(allowedModesDataString))                      {                          if (vals.Count >= 1)                          {                              //update                              ((PreValue)vals[0]).Value = allowedModesDataString;                              ((PreValue)vals[0]).Save();                          }                          else                          {                              //insert                              PreValue.MakeNew(DataType.DataTypeDefinitionId' allowedModesDataString);                          }                      }                        if (vals.Count >= 2)                      {                          //update                          ((PreValue)vals[1]).Value = DataFormatDropDown.SelectedItem.Text;                          ((PreValue)vals[1]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' DataFormatDropDown.SelectedItem.Text);                      }                        if (vals.Count >= 3)                      {                          //update                          ((PreValue)vals[2]).Value = EnableTitleCheckbox.Checked.ToString();                          ((PreValue)vals[2]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' EnableTitleCheckbox.Checked.ToString());                      }                        if (vals.Count >= 4)                      {                          //update                          ((PreValue)vals[3]).Value = EnableNewWindowCheckbox.Checked.ToString();                          ((PreValue)vals[3]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' EnableNewWindowCheckbox.Checked.ToString());                      }                        if (vals.Count >= 5)                      {                          //update                          ((PreValue)vals[4]).Value = DefaultModeDropDown.SelectedItem.Text;                          ((PreValue)vals[4]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' DefaultModeDropDown.SelectedItem.Text);                      }                  }              }
Magic Number,uComponents.DataTypes.UrlPicker,UrlPickerPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\UrlPicker\UrlPickerPreValueEditor.cs,Save,The following statement contains a magic number: if (this.Page.IsValid)              {                  if (DataFormatDropDown == null ||                      DefaultModeDropDown == null ||                      ModeSelector == null ||                      EnableTitleCheckbox == null ||                      EnableNewWindowCheckbox == null)                  {                      return;                  }                    DataType.DBType = umbraco.cms.businesslogic.datatype.DBTypes.Ntext;                    // If none are selected that's no good - you need to have at least one.  So                  // we shall select all of the modes in this case.                  if (!ModeSelector.Items.Cast<ListItem>().Any(x => x.Selected))                  {                      ModeSelector.Items.Cast<ListItem>().ToList().ForEach(x => x.Selected = true);                  }                    // Get selected items                  var allowedModesDataSet = ModeSelector.Items.Cast<ListItem>()                      .Where(x => x.Selected)                      .Select(y => y.Text)                      .ToList();                    // Generate "AllowedModes" data string to save - this needs to be the same format as the config above                  var allowedModesDataString = string.Join("|"' allowedModesDataSet.ToArray());                    // Validate Default Mode' set to the first allowed mode if it's not allowed                  if (!allowedModesDataSet.Contains(DefaultModeDropDown.SelectedItem.Text))                  {                      // Set selected default mode                      var selectedDefaultModeItem = DefaultModeDropDown.Items.FindByText(allowedModesDataSet.First());                        if (selectedDefaultModeItem != null)                      {                          DefaultModeDropDown.ClearSelection();                          selectedDefaultModeItem.Selected = true;                      }                  }                    // I guess I'd better lock this? or something? should I? better safe than sorry.                  lock (m_Locker)                  {                      var vals = GetPreValues();                        // Only save if one or more items were selected - otherwise this control doesn't make sense!                      if (!string.IsNullOrEmpty(allowedModesDataString))                      {                          if (vals.Count >= 1)                          {                              //update                              ((PreValue)vals[0]).Value = allowedModesDataString;                              ((PreValue)vals[0]).Save();                          }                          else                          {                              //insert                              PreValue.MakeNew(DataType.DataTypeDefinitionId' allowedModesDataString);                          }                      }                        if (vals.Count >= 2)                      {                          //update                          ((PreValue)vals[1]).Value = DataFormatDropDown.SelectedItem.Text;                          ((PreValue)vals[1]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' DataFormatDropDown.SelectedItem.Text);                      }                        if (vals.Count >= 3)                      {                          //update                          ((PreValue)vals[2]).Value = EnableTitleCheckbox.Checked.ToString();                          ((PreValue)vals[2]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' EnableTitleCheckbox.Checked.ToString());                      }                        if (vals.Count >= 4)                      {                          //update                          ((PreValue)vals[3]).Value = EnableNewWindowCheckbox.Checked.ToString();                          ((PreValue)vals[3]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' EnableNewWindowCheckbox.Checked.ToString());                      }                        if (vals.Count >= 5)                      {                          //update                          ((PreValue)vals[4]).Value = DefaultModeDropDown.SelectedItem.Text;                          ((PreValue)vals[4]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' DefaultModeDropDown.SelectedItem.Text);                      }                  }              }
Magic Number,uComponents.DataTypes.UrlPicker,UrlPickerPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\UrlPicker\UrlPickerPreValueEditor.cs,Save,The following statement contains a magic number: if (this.Page.IsValid)              {                  if (DataFormatDropDown == null ||                      DefaultModeDropDown == null ||                      ModeSelector == null ||                      EnableTitleCheckbox == null ||                      EnableNewWindowCheckbox == null)                  {                      return;                  }                    DataType.DBType = umbraco.cms.businesslogic.datatype.DBTypes.Ntext;                    // If none are selected that's no good - you need to have at least one.  So                  // we shall select all of the modes in this case.                  if (!ModeSelector.Items.Cast<ListItem>().Any(x => x.Selected))                  {                      ModeSelector.Items.Cast<ListItem>().ToList().ForEach(x => x.Selected = true);                  }                    // Get selected items                  var allowedModesDataSet = ModeSelector.Items.Cast<ListItem>()                      .Where(x => x.Selected)                      .Select(y => y.Text)                      .ToList();                    // Generate "AllowedModes" data string to save - this needs to be the same format as the config above                  var allowedModesDataString = string.Join("|"' allowedModesDataSet.ToArray());                    // Validate Default Mode' set to the first allowed mode if it's not allowed                  if (!allowedModesDataSet.Contains(DefaultModeDropDown.SelectedItem.Text))                  {                      // Set selected default mode                      var selectedDefaultModeItem = DefaultModeDropDown.Items.FindByText(allowedModesDataSet.First());                        if (selectedDefaultModeItem != null)                      {                          DefaultModeDropDown.ClearSelection();                          selectedDefaultModeItem.Selected = true;                      }                  }                    // I guess I'd better lock this? or something? should I? better safe than sorry.                  lock (m_Locker)                  {                      var vals = GetPreValues();                        // Only save if one or more items were selected - otherwise this control doesn't make sense!                      if (!string.IsNullOrEmpty(allowedModesDataString))                      {                          if (vals.Count >= 1)                          {                              //update                              ((PreValue)vals[0]).Value = allowedModesDataString;                              ((PreValue)vals[0]).Save();                          }                          else                          {                              //insert                              PreValue.MakeNew(DataType.DataTypeDefinitionId' allowedModesDataString);                          }                      }                        if (vals.Count >= 2)                      {                          //update                          ((PreValue)vals[1]).Value = DataFormatDropDown.SelectedItem.Text;                          ((PreValue)vals[1]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' DataFormatDropDown.SelectedItem.Text);                      }                        if (vals.Count >= 3)                      {                          //update                          ((PreValue)vals[2]).Value = EnableTitleCheckbox.Checked.ToString();                          ((PreValue)vals[2]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' EnableTitleCheckbox.Checked.ToString());                      }                        if (vals.Count >= 4)                      {                          //update                          ((PreValue)vals[3]).Value = EnableNewWindowCheckbox.Checked.ToString();                          ((PreValue)vals[3]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' EnableNewWindowCheckbox.Checked.ToString());                      }                        if (vals.Count >= 5)                      {                          //update                          ((PreValue)vals[4]).Value = DefaultModeDropDown.SelectedItem.Text;                          ((PreValue)vals[4]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' DefaultModeDropDown.SelectedItem.Text);                      }                  }              }
Magic Number,uComponents.DataTypes.UrlPicker,UrlPickerPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\UrlPicker\UrlPickerPreValueEditor.cs,Save,The following statement contains a magic number: if (this.Page.IsValid)              {                  if (DataFormatDropDown == null ||                      DefaultModeDropDown == null ||                      ModeSelector == null ||                      EnableTitleCheckbox == null ||                      EnableNewWindowCheckbox == null)                  {                      return;                  }                    DataType.DBType = umbraco.cms.businesslogic.datatype.DBTypes.Ntext;                    // If none are selected that's no good - you need to have at least one.  So                  // we shall select all of the modes in this case.                  if (!ModeSelector.Items.Cast<ListItem>().Any(x => x.Selected))                  {                      ModeSelector.Items.Cast<ListItem>().ToList().ForEach(x => x.Selected = true);                  }                    // Get selected items                  var allowedModesDataSet = ModeSelector.Items.Cast<ListItem>()                      .Where(x => x.Selected)                      .Select(y => y.Text)                      .ToList();                    // Generate "AllowedModes" data string to save - this needs to be the same format as the config above                  var allowedModesDataString = string.Join("|"' allowedModesDataSet.ToArray());                    // Validate Default Mode' set to the first allowed mode if it's not allowed                  if (!allowedModesDataSet.Contains(DefaultModeDropDown.SelectedItem.Text))                  {                      // Set selected default mode                      var selectedDefaultModeItem = DefaultModeDropDown.Items.FindByText(allowedModesDataSet.First());                        if (selectedDefaultModeItem != null)                      {                          DefaultModeDropDown.ClearSelection();                          selectedDefaultModeItem.Selected = true;                      }                  }                    // I guess I'd better lock this? or something? should I? better safe than sorry.                  lock (m_Locker)                  {                      var vals = GetPreValues();                        // Only save if one or more items were selected - otherwise this control doesn't make sense!                      if (!string.IsNullOrEmpty(allowedModesDataString))                      {                          if (vals.Count >= 1)                          {                              //update                              ((PreValue)vals[0]).Value = allowedModesDataString;                              ((PreValue)vals[0]).Save();                          }                          else                          {                              //insert                              PreValue.MakeNew(DataType.DataTypeDefinitionId' allowedModesDataString);                          }                      }                        if (vals.Count >= 2)                      {                          //update                          ((PreValue)vals[1]).Value = DataFormatDropDown.SelectedItem.Text;                          ((PreValue)vals[1]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' DataFormatDropDown.SelectedItem.Text);                      }                        if (vals.Count >= 3)                      {                          //update                          ((PreValue)vals[2]).Value = EnableTitleCheckbox.Checked.ToString();                          ((PreValue)vals[2]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' EnableTitleCheckbox.Checked.ToString());                      }                        if (vals.Count >= 4)                      {                          //update                          ((PreValue)vals[3]).Value = EnableNewWindowCheckbox.Checked.ToString();                          ((PreValue)vals[3]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' EnableNewWindowCheckbox.Checked.ToString());                      }                        if (vals.Count >= 5)                      {                          //update                          ((PreValue)vals[4]).Value = DefaultModeDropDown.SelectedItem.Text;                          ((PreValue)vals[4]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' DefaultModeDropDown.SelectedItem.Text);                      }                  }              }
Magic Number,uComponents.DataTypes.UrlPicker,UrlPickerPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\UrlPicker\UrlPickerPreValueEditor.cs,Save,The following statement contains a magic number: if (this.Page.IsValid)              {                  if (DataFormatDropDown == null ||                      DefaultModeDropDown == null ||                      ModeSelector == null ||                      EnableTitleCheckbox == null ||                      EnableNewWindowCheckbox == null)                  {                      return;                  }                    DataType.DBType = umbraco.cms.businesslogic.datatype.DBTypes.Ntext;                    // If none are selected that's no good - you need to have at least one.  So                  // we shall select all of the modes in this case.                  if (!ModeSelector.Items.Cast<ListItem>().Any(x => x.Selected))                  {                      ModeSelector.Items.Cast<ListItem>().ToList().ForEach(x => x.Selected = true);                  }                    // Get selected items                  var allowedModesDataSet = ModeSelector.Items.Cast<ListItem>()                      .Where(x => x.Selected)                      .Select(y => y.Text)                      .ToList();                    // Generate "AllowedModes" data string to save - this needs to be the same format as the config above                  var allowedModesDataString = string.Join("|"' allowedModesDataSet.ToArray());                    // Validate Default Mode' set to the first allowed mode if it's not allowed                  if (!allowedModesDataSet.Contains(DefaultModeDropDown.SelectedItem.Text))                  {                      // Set selected default mode                      var selectedDefaultModeItem = DefaultModeDropDown.Items.FindByText(allowedModesDataSet.First());                        if (selectedDefaultModeItem != null)                      {                          DefaultModeDropDown.ClearSelection();                          selectedDefaultModeItem.Selected = true;                      }                  }                    // I guess I'd better lock this? or something? should I? better safe than sorry.                  lock (m_Locker)                  {                      var vals = GetPreValues();                        // Only save if one or more items were selected - otherwise this control doesn't make sense!                      if (!string.IsNullOrEmpty(allowedModesDataString))                      {                          if (vals.Count >= 1)                          {                              //update                              ((PreValue)vals[0]).Value = allowedModesDataString;                              ((PreValue)vals[0]).Save();                          }                          else                          {                              //insert                              PreValue.MakeNew(DataType.DataTypeDefinitionId' allowedModesDataString);                          }                      }                        if (vals.Count >= 2)                      {                          //update                          ((PreValue)vals[1]).Value = DataFormatDropDown.SelectedItem.Text;                          ((PreValue)vals[1]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' DataFormatDropDown.SelectedItem.Text);                      }                        if (vals.Count >= 3)                      {                          //update                          ((PreValue)vals[2]).Value = EnableTitleCheckbox.Checked.ToString();                          ((PreValue)vals[2]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' EnableTitleCheckbox.Checked.ToString());                      }                        if (vals.Count >= 4)                      {                          //update                          ((PreValue)vals[3]).Value = EnableNewWindowCheckbox.Checked.ToString();                          ((PreValue)vals[3]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' EnableNewWindowCheckbox.Checked.ToString());                      }                        if (vals.Count >= 5)                      {                          //update                          ((PreValue)vals[4]).Value = DefaultModeDropDown.SelectedItem.Text;                          ((PreValue)vals[4]).Save();                      }                      else                      {                          //insert                          PreValue.MakeNew(DataType.DataTypeDefinitionId' DefaultModeDropDown.SelectedItem.Text);                      }                  }              }
Magic Number,uComponents.DataTypes.XPathAutoComplete,XPathAutoCompletePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathAutoComplete\XPathAutoCompletePreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.maxSuggestionsTextBox.Width = 30;
Magic Number,uComponents.DataTypes.XPathAutoComplete,XPathAutoCompletePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathAutoComplete\XPathAutoCompletePreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.maxSuggestionsTextBox.MaxLength = 2;
Magic Number,uComponents.DataTypes.XPathAutoComplete,XPathAutoCompletePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathAutoComplete\XPathAutoCompletePreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.minItemsTextBox.Width = 30;
Magic Number,uComponents.DataTypes.XPathAutoComplete,XPathAutoCompletePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathAutoComplete\XPathAutoCompletePreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.minItemsTextBox.MaxLength = 2;
Magic Number,uComponents.DataTypes.XPathAutoComplete,XPathAutoCompletePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathAutoComplete\XPathAutoCompletePreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.maxItemsTextBox.Width = 30;
Magic Number,uComponents.DataTypes.XPathAutoComplete,XPathAutoCompletePreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathAutoComplete\XPathAutoCompletePreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.maxItemsTextBox.MaxLength = 2;
Magic Number,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListPreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.limitToTextBox.Width = 30;
Magic Number,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListPreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.limitToTextBox.MaxLength = 2;
Magic Number,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListPreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.listHeightTextBox.Width = 30;
Magic Number,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListPreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.listHeightTextBox.MaxLength = 4;
Magic Number,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListPreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.minItemsTextBox.Width = 30;
Magic Number,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListPreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.minItemsTextBox.MaxLength = 2;
Magic Number,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListPreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.maxItemsTextBox.Width = 30;
Magic Number,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListPreValueEditor.cs,CreateChildControls,The following statement contains a magic number: this.maxItemsTextBox.MaxLength = 2;
Magic Number,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListPreValueEditor.cs,OnLoad,The following statement contains a magic number: if (this.ViewState[this.DataType.Id.ToString()] == null)              {                  // set viewstate so we know this control has rendered for next time                  this.ViewState[this.DataType.Id.ToString()] = true;                                this.typeRadioButtonList.Items.Add(new ListItem(uQuery.UmbracoObjectType.Document.GetFriendlyName()' uQuery.UmbracoObjectType.Document.GetGuid().ToString()));                  this.typeRadioButtonList.Items.Add(new ListItem(uQuery.UmbracoObjectType.Media.GetFriendlyName()' uQuery.UmbracoObjectType.Media.GetGuid().ToString()));                  this.typeRadioButtonList.Items.Add(new ListItem(uQuery.UmbracoObjectType.Member.GetFriendlyName()' uQuery.UmbracoObjectType.Member.GetGuid().ToString()));                    // the oninit event of the propertyTypePicker loads data first                  this.sortOnDropDown.Items.Insert(1' new ListItem("<Name>"' "Name"));                  this.sortOnDropDown.Items.Insert(2' new ListItem("<Update Date>"' "UpdateDate"));                  this.sortOnDropDown.Items.Insert(3' new ListItem("<Create Date>"' "CreateDate"));                                    this.sortDirectionRadioButtonList.Items.Add(new ListItem(ListSortDirection.Ascending.ToString()));                  this.sortDirectionRadioButtonList.Items.Add(new ListItem(ListSortDirection.Descending.ToString()));                                    this.macroDropDownList.DataValueField = "Alias"; // key                  this.macroDropDownList.DataTextField = "Name";                  this.macroDropDownList.DataSource = Macro.GetAll();                  this.macroDropDownList.DataBind();                  this.macroDropDownList.Items.Insert(0' string.Empty);                    this.cssFileDropDownList.DataSource = this.GetAllFilesForDropDownList(HostingEnvironment.MapPath("~/css/")' "*.css");                                  this.cssFileDropDownList.DataBind();                  this.cssFileDropDownList.Items.Insert(0' string.Empty);                    this.scriptFileDropDownList.DataSource = this.GetAllFilesForDropDownList(HostingEnvironment.MapPath("~/scripts/")' "*.js");                  this.scriptFileDropDownList.DataBind();                  this.scriptFileDropDownList.Items.Insert(0' string.Empty);              }
Magic Number,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListPreValueEditor.cs,OnLoad,The following statement contains a magic number: if (this.ViewState[this.DataType.Id.ToString()] == null)              {                  // set viewstate so we know this control has rendered for next time                  this.ViewState[this.DataType.Id.ToString()] = true;                                this.typeRadioButtonList.Items.Add(new ListItem(uQuery.UmbracoObjectType.Document.GetFriendlyName()' uQuery.UmbracoObjectType.Document.GetGuid().ToString()));                  this.typeRadioButtonList.Items.Add(new ListItem(uQuery.UmbracoObjectType.Media.GetFriendlyName()' uQuery.UmbracoObjectType.Media.GetGuid().ToString()));                  this.typeRadioButtonList.Items.Add(new ListItem(uQuery.UmbracoObjectType.Member.GetFriendlyName()' uQuery.UmbracoObjectType.Member.GetGuid().ToString()));                    // the oninit event of the propertyTypePicker loads data first                  this.sortOnDropDown.Items.Insert(1' new ListItem("<Name>"' "Name"));                  this.sortOnDropDown.Items.Insert(2' new ListItem("<Update Date>"' "UpdateDate"));                  this.sortOnDropDown.Items.Insert(3' new ListItem("<Create Date>"' "CreateDate"));                                    this.sortDirectionRadioButtonList.Items.Add(new ListItem(ListSortDirection.Ascending.ToString()));                  this.sortDirectionRadioButtonList.Items.Add(new ListItem(ListSortDirection.Descending.ToString()));                                    this.macroDropDownList.DataValueField = "Alias"; // key                  this.macroDropDownList.DataTextField = "Name";                  this.macroDropDownList.DataSource = Macro.GetAll();                  this.macroDropDownList.DataBind();                  this.macroDropDownList.Items.Insert(0' string.Empty);                    this.cssFileDropDownList.DataSource = this.GetAllFilesForDropDownList(HostingEnvironment.MapPath("~/css/")' "*.css");                                  this.cssFileDropDownList.DataBind();                  this.cssFileDropDownList.Items.Insert(0' string.Empty);                    this.scriptFileDropDownList.DataSource = this.GetAllFilesForDropDownList(HostingEnvironment.MapPath("~/scripts/")' "*.js");                  this.scriptFileDropDownList.DataBind();                  this.scriptFileDropDownList.Items.Insert(0' string.Empty);              }
Missing Default,uComponents.DataTypes.ImagePoint,ImagePointDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\ImagePoint\ImagePointDataEditor.cs,ConfigureControls,The following switch statement is missing a default case: switch (uQuery.GetUmbracoObjectType(this.CurrentContentId))                  {                      case uQuery.UmbracoObjectType.Document:                            Document imageDocument = uQuery.GetDocument(this.CurrentContentId)                                                          .GetAncestorOrSelfDocuments()                                                          .FirstOrDefault(x => x.HasProperty(this.options.ImagePropertyAlias));                            if (imageDocument != null)                          {                              imageUrl = imageDocument.GetProperty<string>(this.options.ImagePropertyAlias);                                if (this.options.ShowNeighbours)                              {                                  // get a collection of all documents that could potentially have this imagepoint datatype instance' sharing the same image                                  List<Document> documents = new List<Document>();                                                                      // add the document containing the shared main image                                  documents.Add(imageDocument);                                     // drill down and get all documents' but stop descending a path if an imagePropertyAlias is found - any descendants of that would use a different image                                  documents.AddRange(imageDocument.GetDescendantDocuments(x => !x.HasProperty(this.options.ImagePropertyAlias)));                                     // for all documents that use this instance of this imagepoint datatype                                  foreach (Document document in documents.Where(x => x.GenericProperties.Select(y => y.PropertyType.DataTypeDefinition.Id).Contains(currentDataTypeDefinitionId)))                                  {                                      // the document may have multiple properties each using this imagepoint datatype instance                                      this.CreateGhostImages(document.GenericProperties.Where(x => x.PropertyType.DataTypeDefinition.Id == currentDataTypeDefinitionId && x.Id != currentPropertyId));                                  }                              }                          }                            break;                        case uQuery.UmbracoObjectType.Media:                            Media imageMedia = uQuery.GetMedia(this.CurrentContentId)                                                      .GetAncestorOrSelfMedia()                                                      .FirstOrDefault(x => x.HasProperty(this.options.ImagePropertyAlias));                          if (imageMedia != null)                          {                              imageUrl = imageMedia.GetProperty<string>(this.options.ImagePropertyAlias);                                if (this.options.ShowNeighbours)                              {                                  List<Media> media = new List<Media>();                                    // add the media item containing the shared main image                                  media.Add(imageMedia);                                    // unfortunately no uQuery extension method' so using a private local                                  media.AddRange(this.GetDescendantMedia(imageMedia' x => !x.HasProperty(this.options.ImagePropertyAlias)));                                    foreach(Media mediaItem in media.Where(x => x.GenericProperties.Select(y => y.PropertyType.DataTypeDefinition.Id).Contains(currentDataTypeDefinitionId)))                                  {                                      this.CreateGhostImages(mediaItem.GenericProperties.Where(x => x.PropertyType.DataTypeDefinition.Id == currentDataTypeDefinitionId && x.Id != currentPropertyId));                                  }                              }                          }                            break;                        case uQuery.UmbracoObjectType.Member:                            imageUrl = uQuery.GetMember(this.CurrentContentId).GetProperty<string>(this.options.ImagePropertyAlias);                            // show neighbours not relevant                            break;                  }
Missing Default,uComponents.DataTypes.RelationLinks,RelationLinksDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\RelationLinks\RelationLinksDataEditor.cs,BuildLinkToRelated,The following switch statement is missing a default case: switch (uQuery.GetUmbracoObjectType(relatedCMSNode.nodeObjectType))  			{  				case uQuery.UmbracoObjectType.Document:    					a.HRef = "javascript:jumpToEditContent(" + relatedCMSNode.Id + ");";    					// WARNING - getting the content icon cia the document api may potentially be slow  					img = "/umbraco/images/umbraco/" + uQuery.GetDocument(relatedCMSNode.Id).ContentTypeIcon;    					break;    				case uQuery.UmbracoObjectType.Media:    					a.HRef = "javascript:jumpToEditMedia(" + relatedCMSNode.Id + ");";  					img = "/umbraco/images/umbraco/" + uQuery.GetMedia(relatedCMSNode.Id).ContentTypeIcon;    					break;    				case uQuery.UmbracoObjectType.Member:    					a.HRef = "javascript:jumpToEditMember(" + relatedCMSNode.Id + ");";  					img = "/umbraco/images/umbraco/" + uQuery.GetMember(relatedCMSNode.Id).ContentTypeIcon;    					break;  			}
Missing Default,uComponents.DataTypes.Shared.Enums,EnumHelper,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\Shared\Enums\EnumHelper.cs,GetEnumListAttributeValues,The following switch statement is missing a default case: switch (customAttributeNamedArguement.MemberInfo.Name)  							{  								case "Text":  									listItem.Text = customAttributeNamedArguement.TypedValue.Value.ToString();  									break;    								case "Value":  									listItem.Value = customAttributeNamedArguement.TypedValue.Value.ToString();  									break;    								case "Enabled":  									listItem.Enabled = (bool)customAttributeNamedArguement.TypedValue.Value;  									break;  							}
Missing Default,uComponents.DataTypes.SubTabs,SubTabsDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SubTabs\SubTabsDataEditor.cs,CreateChildControls,The following switch statement is missing a default case: switch (this.options.SubTabType)                  {                      case SubTabType.Buttons:                            int counter = 0;                            HtmlButton subTabButton;                          foreach (var tab in tabs)                          {                              subTabButton = new HtmlButton { InnerText = tab.Name };                              subTabButton.Attributes.Add("data-tab"' tab.Name); // added an attribute to identify which tab this button relates to' as haven't yet calculated the other parms to pass into activateSubTab()                              if (counter == 0)                              {                                  // if it's the first button' then disable it (this means it's active tab)                                  subTabButton.Disabled = true;                              }                              counter++;                              subTabsPanel.Controls.Add(subTabButton);                          }                            break;                                            case SubTabType.DropDownList:                            var subTabDropDownList = new DropDownList();                          foreach (var tab in tabs)                          {                              subTabDropDownList.Items.Add(new ListItem(tab.Name));                          }                          subTabsPanel.Controls.Add(subTabDropDownList);                            break;                  }
Missing Default,uComponents.DataTypes.SubTabs,SubTabsDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\SubTabs\SubTabsDataEditor.cs,CreateChildControls,The following switch statement is missing a default case: switch (this.options.SubTabType)                  {                      case SubTabType.Buttons:                            stringBuilder.Append(@"                                // look for all buttons that are children of the subTabsPanel' and update their click event                              $(subTabsPanel).children('button').click(function() {                                                            // enable all buttons                                  $(subTabsPanel).children('button').removeAttr('disabled');                                    // disable the button being clicked (this allows us to also identify which tab should be activated within the activateSubTab method - or set a flag ?)                                  $(this).attr('disabled'' true);                                    // activate the sub tab                                  activateSubTab(hostTabAnchor' subTabsPanel' '" + SubTabType.Buttons.ToString() + @"'' true);                                    // prevent the button from causing a submit                                  return false;                              });                            ");                            break;                        case SubTabType.DropDownList:                            stringBuilder.Append(@"                                // find the drop down as a child element of the subTabsPanel (there should only be one select element)                              $(subTabsPanel).children('select').eq(0).change(function() {                                     activateSubTab(hostTabAnchor' subTabsPanel' '" + SubTabType.DropDownList.ToString() + @"'' true);                                 });                            ");                            break;                  }
Missing Default,uComponents.DataTypes.XPathAutoComplete,XPathAutoCompleteBase,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathAutoComplete\XPathAutoCompleteBase.cs,GetIndex,The following switch statement is missing a default case: switch (options.UmbracoObjectType)              {                  case uQuery.UmbracoObjectType.Document:                                                foreach (KeyValuePair<string' int> keyValuePair in uQuery.GetNodesByXPath(options.XPath).Select(x => new KeyValuePair<string' int>(x.Name' x.Id)))                      {                          XPathAutoCompleteBase.AddToSortedList(ref index' keyValuePair);                      }                        break;                    case uQuery.UmbracoObjectType.Media:                        foreach (KeyValuePair<string' int> keyValuePair in uQuery.GetMediaByXPath(options.XPath).Select(x => new KeyValuePair<string' int>(x.Text' x.Id)))                      {                          XPathAutoCompleteBase.AddToSortedList(ref index' keyValuePair);                      }                        break;                    case uQuery.UmbracoObjectType.Member:                        foreach (KeyValuePair<string' int> keyValuePair in uQuery.GetMembersByXPath(options.XPath).Select(x => new KeyValuePair<string' int>(x.Text' x.Id)))                      {                          XPathAutoCompleteBase.AddToSortedList(ref index' keyValuePair);                      }                        break;              }
Missing Default,umbraco.editorControls.XPathRadioButtonList,XPathRadioButtonListDataEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathRadioButtonList\XPathRadioButtonListDataEditor.cs,CreateChildControls,The following switch statement is missing a default case: switch (this.options.UmbracoObjectType)              {                  case uQuery.UmbracoObjectType.Unknown:                  case uQuery.UmbracoObjectType.Document:                        this.radioButtonList.DataSource = uQuery.GetNodesByXPath(this.options.XPath).Where(x => x.Id != -1).ToNameIds();                      break;                    case uQuery.UmbracoObjectType.Media:                        this.radioButtonList.DataSource = uQuery.GetMediaByXPath(this.options.XPath).Where(x => x.Id != -1).ToNameIds();                      break;                    case uQuery.UmbracoObjectType.Member:                        this.radioButtonList.DataSource = uQuery.GetMembersByXPath(this.options.XPath).ToNameIds();                      break;              }
Missing Default,umbraco.editorControls.XPathRadioButtonList,XPathRadioButtonListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathRadioButtonList\XPathRadioButtonListPreValueEditor.cs,XPathCustomValidator_ServerValidate,The following switch statement is missing a default case: switch (this.options.UmbracoObjectType)                  {                      case uQuery.UmbracoObjectType.Document:                          if (uQuery.GetNodesByXPath(xPath).Count() >= 0)                          {                              isValid = true;                          }                            break;                        case uQuery.UmbracoObjectType.Media:                          if (uQuery.GetMediaByXPath(xPath).Count() >= 0)                          {                              isValid = true;                          }                            break;                        case uQuery.UmbracoObjectType.Member:                          if (uQuery.GetMembersByXPath(xPath).Count() >= 0)                          {                              isValid = true;                          }                            break;                  }
Missing Default,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableList,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableList.cs,LoadPropertyValue,The following switch statement is missing a default case: switch (uQuery.GetUmbracoObjectType(typeGuid))                          {                              case uQuery.UmbracoObjectType.Document:                                  this.SelectedNodes = values.Select(uQuery.GetNode);                                  break;                                case uQuery.UmbracoObjectType.Media:                                  this.SelectedMedia = values.Select(uQuery.GetMedia);                                  break;                                case uQuery.UmbracoObjectType.Member:                                  this.SelectedMembers = values.Select(uQuery.GetMember);                                  break;                          }
Missing Default,uComponents.DataTypes.XPathTemplatableList,XPathTemplatableListPreValueEditor,C:\repos\uComponents_uComponents\src\uComponents.DataTypes\XPathTemplatableList\XPathTemplatableListPreValueEditor.cs,XPathCustomValidator_ServerValidate,The following switch statement is missing a default case: switch (umbracoObjectType)                  {                      case uQuery.UmbracoObjectType.Document: uQuery.GetNodesByXPath(xpath);                           break;                      case uQuery.UmbracoObjectType.Media: uQuery.GetMediaByXPath(xpath);                          break;                      case uQuery.UmbracoObjectType.Member: uQuery.GetMembersByXPath(xpath);                          break;                  }
