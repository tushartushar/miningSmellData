Implementation smell,Namespace,Class,File,Method,Description
Complex Method,uComponents.Mapping,ExpressionExtensions,D:\research\architectureSmells\repos\uComponents_uComponents\src\uComponents.Mapping\ExpressionExtensions.cs,TryParsePath,Cyclomatic complexity of the method is 11
Complex Method,uComponents.Mapping,NodeMapper,D:\research\architectureSmells\repos\uComponents_uComponents\src\uComponents.Mapping\NodeMapper.cs,NodeMapper,Cyclomatic complexity of the method is 12
Complex Method,uComponents.Mapping,NodeMapper,D:\research\architectureSmells\repos\uComponents_uComponents\src\uComponents.Mapping\NodeMapper.cs,MapNode,Cyclomatic complexity of the method is 8
Complex Method,uComponents.Mapping,NodeMappingEngine,D:\research\architectureSmells\repos\uComponents_uComponents\src\uComponents.Mapping\NodeMappingEngine.cs,Map,Cyclomatic complexity of the method is 11
Complex Method,uComponents.Mapping.Property,CollectionPropertyMapper,D:\research\architectureSmells\repos\uComponents_uComponents\src\uComponents.Mapping\Property\CollectionPropertyMapper.cs,MapProperty,Cyclomatic complexity of the method is 11
Complex Method,uComponents.Mapping.Property,DefaultPropertyMapper,D:\research\architectureSmells\repos\uComponents_uComponents\src\uComponents.Mapping\Property\DefaultPropertyMapper.cs,GetDefaultMappingForName,Cyclomatic complexity of the method is 19
Complex Method,uComponents.Mapping.Property,PropertyMapperBase,D:\research\architectureSmells\repos\uComponents_uComponents\src\uComponents.Mapping\Property\PropertyMapperBase.cs,GetSourcePropertyValue,Cyclomatic complexity of the method is 8
Complex Method,uComponents.Mapping.Property,SinglePropertyMapper,D:\research\architectureSmells\repos\uComponents_uComponents\src\uComponents.Mapping\Property\SinglePropertyMapper.cs,MapProperty,Cyclomatic complexity of the method is 9
Long Parameter List,uComponents.Mapping.Property,BasicPropertyMapper,D:\research\architectureSmells\repos\uComponents_uComponents\src\uComponents.Mapping\Property\BasicPropertyMapper.cs,BasicPropertyMapper,The method has 5 parameters. Parameters: mapping' sourcePropertyType' nodeMapper' destinationProperty' sourcePropertyAlias
Long Parameter List,uComponents.Mapping.Property,CollectionPropertyMapper,D:\research\architectureSmells\repos\uComponents_uComponents\src\uComponents.Mapping\Property\CollectionPropertyMapper.cs,CollectionPropertyMapper,The method has 5 parameters. Parameters: mapping' sourcePropertyType' nodeMapper' destinationProperty' sourcePropertyAlias
Long Parameter List,uComponents.Mapping.Property,CustomPropertyMapper,D:\research\architectureSmells\repos\uComponents_uComponents\src\uComponents.Mapping\Property\CustomPropertyMapper.cs,CustomPropertyMapper,The method has 5 parameters. Parameters: mapping' requiresInclude' allowCaching' nodeMapper' destinationProperty
Long Parameter List,uComponents.Mapping.Property,SinglePropertyMapper,D:\research\architectureSmells\repos\uComponents_uComponents\src\uComponents.Mapping\Property\SinglePropertyMapper.cs,SinglePropertyMapper,The method has 5 parameters. Parameters: mapping' sourcePropertyType' nodeMapper' destinationProperty' sourcePropertyAlias
Long Statement,uComponents.Mapping,NodeMappingExpression<TDestination>,D:\research\architectureSmells\repos\uComponents_uComponents\src\uComponents.Mapping\NodeMappingExpression.cs,RemoveMappingForProperty,The length of the statement  "                throw new NotSupportedException(string.Format("Cannot remove mapping for a ReadOnly property. Name: '{0}'' Class: '{1}'"' propertyInfo.Name' propertyInfo.DeclaringType.FullName)); " is 179.
Long Statement,uComponents.Mapping,NodeMappingExpression<TDestination>,D:\research\architectureSmells\repos\uComponents_uComponents\src\uComponents.Mapping\NodeMappingExpression.cs,ForProperty,The length of the statement  "                    string.Format("The property type {0} on model {1} is not supported."' propertyType.FullName' typeof(TDestination).FullName) " is 123.
Missing Default,uComponents.Mapping.Property,DefaultPropertyMapper,D:\research\architectureSmells\repos\uComponents_uComponents\src\uComponents.Mapping\Property\DefaultPropertyMapper.cs,GetDefaultMappingForName,The following switch statement is missing a default case: switch (destinationProperty.Name.ToLowerInvariant())              {                  case "createdate":                      propertyExpression = n => n.CreateDate;                      break;                  case "creatorid":                      propertyExpression = n => n.CreatorID;                      break;                  case "creatorname":                      propertyExpression = n => n.CreatorName;                      break;                  case "id":                      propertyExpression = n => n.Id;                      break;                  case "level":                      propertyExpression = n => n.Level;                      break;                  case "name":                      propertyExpression = n => n.Name;                      break;                  case "niceurl":                      propertyExpression = n => n.NiceUrl;                      break;                  case "nodetypealias":                      propertyExpression = n => n.NodeTypeAlias;                      break;                  case "path":                      propertyExpression = n => n.Path;                      break;                  case "sortorder":                      propertyExpression = n => n.SortOrder;                      break;                  case "template":                      propertyExpression = n => n.template;                      break;                  case "updatedate":                      propertyExpression = n => n.UpdateDate;                      break;                  case "url":                      propertyExpression = n => n.Url;                      break;                  case "urlname":                      propertyExpression = n => n.UrlName;                      break;                  case "version":                      propertyExpression = n => n.Version;                      break;                  case "writerid":                      propertyExpression = n => n.WriterID;                      break;                  case "writername":                      propertyExpression = n => n.WriterName;                      break;              }
