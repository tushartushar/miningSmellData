Implementation smell,Namespace,Class,File,Method,Description
Long Method,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,backgroundWorkerRun_DoWork,The method has 142 lines of code.
Complex Method,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,GetSet,Cyclomatic complexity of the method is 10
Complex Method,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,ReadCSV,Cyclomatic complexity of the method is 12
Complex Method,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,WriteCSV,Cyclomatic complexity of the method is 8
Complex Method,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,GetCardType,Cyclomatic complexity of the method is 8
Complex Method,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,backgroundWorkerRun_DoWork,Cyclomatic complexity of the method is 24
Long Parameter List,CIMTool,CsvMap,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,CsvMap,The method has 22 parameters.
Long Statement,CIMTool,FormHelp,C:\repos\detrm_CIMTool\CIMTool\FormHelp.cs,FormHelp_Load,The length of the statement  "	System.Diagnostics.FileVersionInfo info = System.Diagnostics.FileVersionInfo.GetVersionInfo (Application.ExecutablePath); " is 121.
Long Statement,CIMTool,FormHelp,C:\repos\detrm_CIMTool\CIMTool\FormHelp.cs,FormHelp_Load,The length of the statement  "	labelTitle.AppearanceItemCaption.Font = new Font (labelTitle.AppearanceItemCaption.Font.FontFamily' 18f' FontStyle.Bold); " is 121.
Long Statement,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,Enable,The length of the statement  "	barItemProgress.Visibility = backgroundWorkerRun.IsBusy ? DevExpress.XtraBars.BarItemVisibility.Always : DevExpress.XtraBars.BarItemVisibility.Never; " is 149.
Long Statement,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,PromptForChanges,The length of the statement  "		DialogResult result = DevExpress.XtraEditors.XtraMessageBox.Show ("You've processed Authorize.NET data." + System.Environment.NewLine + "Would you like to save the results?"' "Save Changes?"' MessageBoxButtons.YesNoCancel); " is 223.
Long Statement,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,PromptToStop,The length of the statement  "		return DevExpress.XtraEditors.XtraMessageBox.Show ("Stop the current process?"' "Cancel Process?"' MessageBoxButtons.YesNo); " is 124.
Long Statement,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,WarnFileChange,The length of the statement  "		DialogResult result = DevExpress.XtraEditors.XtraMessageBox.Show (String.Format ("The file '{0}' has been modified externally.  Reload?"' fileSystemWatcherMain.Filter)' "File Changed"' MessageBoxButtons.YesNo); " is 210.
Long Statement,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,WarnFileChange,The length of the statement  "			backgroundWorkerLoad.RunWorkerAsync (new FileInfo (Path.Combine (fileSystemWatcherMain.Path' fileSystemWatcherMain.Filter))); " is 125.
Long Statement,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,GetCardType,The length of the statement  "		if (accountId.StartsWith ("300") || accountId.StartsWith ("301") || accountId.StartsWith ("302") || accountId.StartsWith ("303") || accountId.StartsWith ("304") || accountId.StartsWith ("305") || accountId.StartsWith ("36") || accountId.StartsWith ("38")) " is 255.
Long Statement,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,GetCardType,The length of the statement  "		if (accountId.StartsWith ("51") || accountId.StartsWith ("52") || accountId.StartsWith ("53") || accountId.StartsWith ("54") || accountId.StartsWith ("55")) " is 156.
Long Statement,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,backgroundWorkerRun_DoWork,The length of the statement  "		CustomerGateway gateway = new CustomerGateway (args.ApiKey' args.TransactionKey' args.TestMode ? ServiceMode.Test : ServiceMode.Live); " is 134.
Long Statement,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,backgroundWorkerRun_DoWork,The length of the statement  "							worker.ReportProgress (i' String.Format ("Warning: Account type is '{0}' but AccountId is of type '{1}'"' row.AccountType' type)); " is 130.
Long Statement,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,backgroundWorkerRun_DoWork,The length of the statement  "						String profileKey = gateway.AddCreditCard (c.ProfileID' row.AccountId' row.AccountExpireMM' row.AccountExpireYY' row.AccountCSC' billingAddress); " is 145.
Long Statement,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,gridViewMain_ShowGridMenu,The length of the statement  "		DevExpress.Utils.Menu.DXMenuCheckItem checkItem = new DevExpress.Utils.Menu.DXMenuCheckItem ("Autosize Columns?"' view.OptionsView.ColumnAutoWidth); " is 148.
Long Statement,CIMTool,ImportSet,C:\repos\detrm_CIMTool\CIMTool\ImportSet.Designer.cs,GetTypedDataSetSchema,The length of the statement  "			for (global::System.Collections.IEnumerator schemas = xs.Schemas (dsSchema.TargetNamespace).GetEnumerator (); schemas.MoveNext ();) { " is 133.
Complex Conditional,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,GetCardType,The conditional expression  "accountId.StartsWith ("300") || accountId.StartsWith ("301") || accountId.StartsWith ("302") || accountId.StartsWith ("303") || accountId.StartsWith ("304") || accountId.StartsWith ("305") || accountId.StartsWith ("36") || accountId.StartsWith ("38")"  is complex.
Complex Conditional,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,GetCardType,The conditional expression  "accountId.StartsWith ("51") || accountId.StartsWith ("52") || accountId.StartsWith ("53") || accountId.StartsWith ("54") || accountId.StartsWith ("55")"  is complex.
Empty Catch Block,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,FormMain_FormClosed,The method has an empty catch block.
Empty Catch Block,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,FormMain_Load,The method has an empty catch block.
Magic Number,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,ConfigureCSV,The following statement contains a magic number: switch (comboBoxEditCSVQuoteStyle.SelectedIndex) {  case 1: {  	config.QuoteAllFields = true;  	break;  }  case 2: {  	config.QuoteNoFields = true;  	break;  }  default: {  	config.QuoteAllFields = false;  	config.QuoteNoFields = false;  	break;  }  }  
Magic Number,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,GetCardType,The following statement contains a magic number: switch (accountId.Length) {  case 13: {  	if (accountId.StartsWith ("4"))  		return CardType.Visa;  	break;  }  case 14: {  	if (accountId.StartsWith ("300") || accountId.StartsWith ("301") || accountId.StartsWith ("302") || accountId.StartsWith ("303") || accountId.StartsWith ("304") || accountId.StartsWith ("305") || accountId.StartsWith ("36") || accountId.StartsWith ("38"))  		return CardType.DinersClub;  	break;  }  case 15: {  	if (accountId.StartsWith ("34") || accountId.StartsWith ("37"))  		return CardType.AmericanExpress;  	if (accountId.StartsWith ("2014") || accountId.StartsWith ("2149"))  		return CardType.enRoute;  	if (accountId.StartsWith ("2131") || accountId.StartsWith ("1800"))  		return CardType.JCB;  	break;  }  case 16: {  	if (accountId.StartsWith ("51") || accountId.StartsWith ("52") || accountId.StartsWith ("53") || accountId.StartsWith ("54") || accountId.StartsWith ("55"))  		return CardType.MasterCard;  	if (accountId.StartsWith ("4"))  		return CardType.Visa;  	if (accountId.StartsWith ("6011"))  		return CardType.Discover;  	if (accountId.StartsWith ("3"))  		return CardType.JCB;  	break;  }  }  
Magic Number,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,GetCardType,The following statement contains a magic number: switch (accountId.Length) {  case 13: {  	if (accountId.StartsWith ("4"))  		return CardType.Visa;  	break;  }  case 14: {  	if (accountId.StartsWith ("300") || accountId.StartsWith ("301") || accountId.StartsWith ("302") || accountId.StartsWith ("303") || accountId.StartsWith ("304") || accountId.StartsWith ("305") || accountId.StartsWith ("36") || accountId.StartsWith ("38"))  		return CardType.DinersClub;  	break;  }  case 15: {  	if (accountId.StartsWith ("34") || accountId.StartsWith ("37"))  		return CardType.AmericanExpress;  	if (accountId.StartsWith ("2014") || accountId.StartsWith ("2149"))  		return CardType.enRoute;  	if (accountId.StartsWith ("2131") || accountId.StartsWith ("1800"))  		return CardType.JCB;  	break;  }  case 16: {  	if (accountId.StartsWith ("51") || accountId.StartsWith ("52") || accountId.StartsWith ("53") || accountId.StartsWith ("54") || accountId.StartsWith ("55"))  		return CardType.MasterCard;  	if (accountId.StartsWith ("4"))  		return CardType.Visa;  	if (accountId.StartsWith ("6011"))  		return CardType.Discover;  	if (accountId.StartsWith ("3"))  		return CardType.JCB;  	break;  }  }  
Magic Number,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,GetCardType,The following statement contains a magic number: switch (accountId.Length) {  case 13: {  	if (accountId.StartsWith ("4"))  		return CardType.Visa;  	break;  }  case 14: {  	if (accountId.StartsWith ("300") || accountId.StartsWith ("301") || accountId.StartsWith ("302") || accountId.StartsWith ("303") || accountId.StartsWith ("304") || accountId.StartsWith ("305") || accountId.StartsWith ("36") || accountId.StartsWith ("38"))  		return CardType.DinersClub;  	break;  }  case 15: {  	if (accountId.StartsWith ("34") || accountId.StartsWith ("37"))  		return CardType.AmericanExpress;  	if (accountId.StartsWith ("2014") || accountId.StartsWith ("2149"))  		return CardType.enRoute;  	if (accountId.StartsWith ("2131") || accountId.StartsWith ("1800"))  		return CardType.JCB;  	break;  }  case 16: {  	if (accountId.StartsWith ("51") || accountId.StartsWith ("52") || accountId.StartsWith ("53") || accountId.StartsWith ("54") || accountId.StartsWith ("55"))  		return CardType.MasterCard;  	if (accountId.StartsWith ("4"))  		return CardType.Visa;  	if (accountId.StartsWith ("6011"))  		return CardType.Discover;  	if (accountId.StartsWith ("3"))  		return CardType.JCB;  	break;  }  }  
Magic Number,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,GetCardType,The following statement contains a magic number: switch (accountId.Length) {  case 13: {  	if (accountId.StartsWith ("4"))  		return CardType.Visa;  	break;  }  case 14: {  	if (accountId.StartsWith ("300") || accountId.StartsWith ("301") || accountId.StartsWith ("302") || accountId.StartsWith ("303") || accountId.StartsWith ("304") || accountId.StartsWith ("305") || accountId.StartsWith ("36") || accountId.StartsWith ("38"))  		return CardType.DinersClub;  	break;  }  case 15: {  	if (accountId.StartsWith ("34") || accountId.StartsWith ("37"))  		return CardType.AmericanExpress;  	if (accountId.StartsWith ("2014") || accountId.StartsWith ("2149"))  		return CardType.enRoute;  	if (accountId.StartsWith ("2131") || accountId.StartsWith ("1800"))  		return CardType.JCB;  	break;  }  case 16: {  	if (accountId.StartsWith ("51") || accountId.StartsWith ("52") || accountId.StartsWith ("53") || accountId.StartsWith ("54") || accountId.StartsWith ("55"))  		return CardType.MasterCard;  	if (accountId.StartsWith ("4"))  		return CardType.Visa;  	if (accountId.StartsWith ("6011"))  		return CardType.Discover;  	if (accountId.StartsWith ("3"))  		return CardType.JCB;  	break;  }  }  
Magic Number,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,backgroundWorkerRun_DoWork,The following statement contains a magic number: if (args != null) {  	args.Set.AcceptChanges ();  	Regex idPattern = new Regex (@"ID\s(\d+)");  	CustomerGateway gateway = new CustomerGateway (args.ApiKey' args.TransactionKey' args.TestMode ? ServiceMode.Test : ServiceMode.Live);  	int count = args.Set.CsvImport.Count;  	//Send to Authorize.net  	for (int i = 0; i < count && !cancelled; i++) {  		cancelled = worker.WorkerSupportsCancellation && worker.CancellationPending;  		if (cancelled)  			break;  		ImportSet.CsvImportRow row = args.Set.CsvImport [i];  		try {  			row.BeginEdit ();  			row.ClearErrors ();  			row.CIMMessage = string.Empty;  			row.CIMPaymentMessage = string.Empty;  			bool hasAccountId = !String.IsNullOrWhiteSpace (row.AccountId) && row.AccountId.Length > 4;  			bool hasPaymentProfile = !String.IsNullOrWhiteSpace (row.CIMPaymentId);  			bool hasCustomerProfile = !String.IsNullOrWhiteSpace (row.CIMProfileId);  			Customer c = null;  			if (hasCustomerProfile && args.SkipExisting) {  				worker.ReportProgress (i' String.Format ("Skipped customer profile #{0}..."' row.CIMProfileId));  				continue;  			}  			if (hasCustomerProfile) {  				worker.ReportProgress (i' String.Format ("Loading customer profile #{0}..."' row.CIMProfileId));  				c = gateway.GetCustomer (row.CIMProfileId);  				if (c == null) {  					throw new ArgumentException (String.Format ("Customer profile #{0} not found."' row.CIMProfileId));  				}  				else {  					worker.ReportProgress (i' String.Format ("Customer profile #{0} found."' row.CIMProfileId));  				}  			}  			update = (c == null) || args.UpdateExisting;  			if (c == null) {  				try {  					c = gateway.CreateCustomer (row.Email' args.Description' row.SubsId);  					row.CIMProfileId = c.ProfileID;  					worker.ReportProgress (i' String.Format ("Customer profile #{0} created."' c.ProfileID));  				}  				catch (Exception createErr) {  					//Error processing request: E00039 - A duplicate record with ID ######## already exists.  					if (createErr.Message.Contains ("E00039")) {  						Match m = idPattern.Match (createErr.Message);  						if (m.Success && m.Groups [1].Success) {  							row.CIMProfileId = m.Groups [1].Value;  							row.EndEdit ();  							worker.ReportProgress (i' String.Format ("Found customer profile #{0} - Loading..."' row.CIMProfileId));  							c = gateway.GetCustomer (row.CIMProfileId);  							update = args.UpdateExisting;  						}  						else {  							throw createErr;  						}  					}  					else {  						throw createErr;  					}  				}  			}  			Address billingAddress = new Address ();  			billingAddress.City = row.City;  			billingAddress.Country = row.Country;  			billingAddress.Fax = row.Fax;  			billingAddress.First = row.NameFirst;  			billingAddress.Last = row.NameLast;  			billingAddress.Phone = row.Phone;  			billingAddress.State = row.State;  			billingAddress.Street = row.Address;  			billingAddress.Zip = row.Zip;  			if (!String.IsNullOrWhiteSpace (row.Zip4))  				billingAddress.Zip += "-" + row.Zip4;  			if (update) {  				c.BillingAddress = billingAddress;  				c.Description = args.Description;  				if (gateway.UpdateCustomer (c)) {  					worker.ReportProgress (i' String.Format ("Customer profile #{0} updated."' c.ProfileID));  				}  			}  			//Check that account id  			if (hasAccountId) {  				if (!row.AccountId.LuhnCheck ()) {  					worker.ReportProgress (i' "Warning: AccountId did not pass validation!");  				}  				else {  					CardType type = GetCardType (row.AccountId);  					if (String.IsNullOrWhiteSpace (row.AccountType))  						row.AccountType = type.ToString ();  					else if (!row.AccountType.ToLower ().Contains (type.ToString ().ToLower ()))  						worker.ReportProgress (i' String.Format ("Warning: Account type is '{0}' but AccountId is of type '{1}'"' row.AccountType' type));  				}  			}  			String cardId = null;  			PaymentProfile p = null;  			foreach (PaymentProfile pp in c.PaymentProfiles) {  				if (hasPaymentProfile && pp.ProfileID.Equals (row.CIMPaymentId' StringComparison.OrdinalIgnoreCase)) {  					worker.ReportProgress (i' String.Format ("Payment profile #{0} found."' pp.ProfileID));  					p = pp;  					break;  				}  				cardId = row.AccountId.Substring (row.AccountId.Length - 4);  				if (hasAccountId && pp.CardNumber.EndsWith (cardId)) {  					worker.ReportProgress (i' "Found payment profile for given account.");  					row.CIMPaymentId = pp.ProfileID;  					p = pp;  					break;  				}  			}  			if (p == null) {  				try {  					if (hasPaymentProfile)  						throw new ArgumentException (String.Format ("Payment profile #{0} not found."' row.CIMPaymentId));  					String profileKey = gateway.AddCreditCard (c.ProfileID' row.AccountId' row.AccountExpireMM' row.AccountExpireYY' row.AccountCSC' billingAddress);  					row.CIMPaymentId = profileKey;  					worker.ReportProgress (i' String.Format ("Payment profile #{0} created."' profileKey));  				}  				catch (Exception payErr) {  					row.CIMPaymentMessage = payErr.Message;  					worker.ReportProgress (i' payErr);  				}  			}  		}  		catch (Exception ex) {  			row.CIMMessage = ex.Message;  			worker.ReportProgress (i' ex);  		}  		finally {  			row.EndEdit ();  		}  		if (args.RequestDelay > 0)  			System.Threading.Thread.Sleep (args.RequestDelay);  	}  }  
Magic Number,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,backgroundWorkerRun_DoWork,The following statement contains a magic number: if (args != null) {  	args.Set.AcceptChanges ();  	Regex idPattern = new Regex (@"ID\s(\d+)");  	CustomerGateway gateway = new CustomerGateway (args.ApiKey' args.TransactionKey' args.TestMode ? ServiceMode.Test : ServiceMode.Live);  	int count = args.Set.CsvImport.Count;  	//Send to Authorize.net  	for (int i = 0; i < count && !cancelled; i++) {  		cancelled = worker.WorkerSupportsCancellation && worker.CancellationPending;  		if (cancelled)  			break;  		ImportSet.CsvImportRow row = args.Set.CsvImport [i];  		try {  			row.BeginEdit ();  			row.ClearErrors ();  			row.CIMMessage = string.Empty;  			row.CIMPaymentMessage = string.Empty;  			bool hasAccountId = !String.IsNullOrWhiteSpace (row.AccountId) && row.AccountId.Length > 4;  			bool hasPaymentProfile = !String.IsNullOrWhiteSpace (row.CIMPaymentId);  			bool hasCustomerProfile = !String.IsNullOrWhiteSpace (row.CIMProfileId);  			Customer c = null;  			if (hasCustomerProfile && args.SkipExisting) {  				worker.ReportProgress (i' String.Format ("Skipped customer profile #{0}..."' row.CIMProfileId));  				continue;  			}  			if (hasCustomerProfile) {  				worker.ReportProgress (i' String.Format ("Loading customer profile #{0}..."' row.CIMProfileId));  				c = gateway.GetCustomer (row.CIMProfileId);  				if (c == null) {  					throw new ArgumentException (String.Format ("Customer profile #{0} not found."' row.CIMProfileId));  				}  				else {  					worker.ReportProgress (i' String.Format ("Customer profile #{0} found."' row.CIMProfileId));  				}  			}  			update = (c == null) || args.UpdateExisting;  			if (c == null) {  				try {  					c = gateway.CreateCustomer (row.Email' args.Description' row.SubsId);  					row.CIMProfileId = c.ProfileID;  					worker.ReportProgress (i' String.Format ("Customer profile #{0} created."' c.ProfileID));  				}  				catch (Exception createErr) {  					//Error processing request: E00039 - A duplicate record with ID ######## already exists.  					if (createErr.Message.Contains ("E00039")) {  						Match m = idPattern.Match (createErr.Message);  						if (m.Success && m.Groups [1].Success) {  							row.CIMProfileId = m.Groups [1].Value;  							row.EndEdit ();  							worker.ReportProgress (i' String.Format ("Found customer profile #{0} - Loading..."' row.CIMProfileId));  							c = gateway.GetCustomer (row.CIMProfileId);  							update = args.UpdateExisting;  						}  						else {  							throw createErr;  						}  					}  					else {  						throw createErr;  					}  				}  			}  			Address billingAddress = new Address ();  			billingAddress.City = row.City;  			billingAddress.Country = row.Country;  			billingAddress.Fax = row.Fax;  			billingAddress.First = row.NameFirst;  			billingAddress.Last = row.NameLast;  			billingAddress.Phone = row.Phone;  			billingAddress.State = row.State;  			billingAddress.Street = row.Address;  			billingAddress.Zip = row.Zip;  			if (!String.IsNullOrWhiteSpace (row.Zip4))  				billingAddress.Zip += "-" + row.Zip4;  			if (update) {  				c.BillingAddress = billingAddress;  				c.Description = args.Description;  				if (gateway.UpdateCustomer (c)) {  					worker.ReportProgress (i' String.Format ("Customer profile #{0} updated."' c.ProfileID));  				}  			}  			//Check that account id  			if (hasAccountId) {  				if (!row.AccountId.LuhnCheck ()) {  					worker.ReportProgress (i' "Warning: AccountId did not pass validation!");  				}  				else {  					CardType type = GetCardType (row.AccountId);  					if (String.IsNullOrWhiteSpace (row.AccountType))  						row.AccountType = type.ToString ();  					else if (!row.AccountType.ToLower ().Contains (type.ToString ().ToLower ()))  						worker.ReportProgress (i' String.Format ("Warning: Account type is '{0}' but AccountId is of type '{1}'"' row.AccountType' type));  				}  			}  			String cardId = null;  			PaymentProfile p = null;  			foreach (PaymentProfile pp in c.PaymentProfiles) {  				if (hasPaymentProfile && pp.ProfileID.Equals (row.CIMPaymentId' StringComparison.OrdinalIgnoreCase)) {  					worker.ReportProgress (i' String.Format ("Payment profile #{0} found."' pp.ProfileID));  					p = pp;  					break;  				}  				cardId = row.AccountId.Substring (row.AccountId.Length - 4);  				if (hasAccountId && pp.CardNumber.EndsWith (cardId)) {  					worker.ReportProgress (i' "Found payment profile for given account.");  					row.CIMPaymentId = pp.ProfileID;  					p = pp;  					break;  				}  			}  			if (p == null) {  				try {  					if (hasPaymentProfile)  						throw new ArgumentException (String.Format ("Payment profile #{0} not found."' row.CIMPaymentId));  					String profileKey = gateway.AddCreditCard (c.ProfileID' row.AccountId' row.AccountExpireMM' row.AccountExpireYY' row.AccountCSC' billingAddress);  					row.CIMPaymentId = profileKey;  					worker.ReportProgress (i' String.Format ("Payment profile #{0} created."' profileKey));  				}  				catch (Exception payErr) {  					row.CIMPaymentMessage = payErr.Message;  					worker.ReportProgress (i' payErr);  				}  			}  		}  		catch (Exception ex) {  			row.CIMMessage = ex.Message;  			worker.ReportProgress (i' ex);  		}  		finally {  			row.EndEdit ();  		}  		if (args.RequestDelay > 0)  			System.Threading.Thread.Sleep (args.RequestDelay);  	}  }  
Magic Number,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,backgroundWorkerRun_DoWork,The following statement contains a magic number: for (int i = 0; i < count && !cancelled; i++) {  	cancelled = worker.WorkerSupportsCancellation && worker.CancellationPending;  	if (cancelled)  		break;  	ImportSet.CsvImportRow row = args.Set.CsvImport [i];  	try {  		row.BeginEdit ();  		row.ClearErrors ();  		row.CIMMessage = string.Empty;  		row.CIMPaymentMessage = string.Empty;  		bool hasAccountId = !String.IsNullOrWhiteSpace (row.AccountId) && row.AccountId.Length > 4;  		bool hasPaymentProfile = !String.IsNullOrWhiteSpace (row.CIMPaymentId);  		bool hasCustomerProfile = !String.IsNullOrWhiteSpace (row.CIMProfileId);  		Customer c = null;  		if (hasCustomerProfile && args.SkipExisting) {  			worker.ReportProgress (i' String.Format ("Skipped customer profile #{0}..."' row.CIMProfileId));  			continue;  		}  		if (hasCustomerProfile) {  			worker.ReportProgress (i' String.Format ("Loading customer profile #{0}..."' row.CIMProfileId));  			c = gateway.GetCustomer (row.CIMProfileId);  			if (c == null) {  				throw new ArgumentException (String.Format ("Customer profile #{0} not found."' row.CIMProfileId));  			}  			else {  				worker.ReportProgress (i' String.Format ("Customer profile #{0} found."' row.CIMProfileId));  			}  		}  		update = (c == null) || args.UpdateExisting;  		if (c == null) {  			try {  				c = gateway.CreateCustomer (row.Email' args.Description' row.SubsId);  				row.CIMProfileId = c.ProfileID;  				worker.ReportProgress (i' String.Format ("Customer profile #{0} created."' c.ProfileID));  			}  			catch (Exception createErr) {  				//Error processing request: E00039 - A duplicate record with ID ######## already exists.  				if (createErr.Message.Contains ("E00039")) {  					Match m = idPattern.Match (createErr.Message);  					if (m.Success && m.Groups [1].Success) {  						row.CIMProfileId = m.Groups [1].Value;  						row.EndEdit ();  						worker.ReportProgress (i' String.Format ("Found customer profile #{0} - Loading..."' row.CIMProfileId));  						c = gateway.GetCustomer (row.CIMProfileId);  						update = args.UpdateExisting;  					}  					else {  						throw createErr;  					}  				}  				else {  					throw createErr;  				}  			}  		}  		Address billingAddress = new Address ();  		billingAddress.City = row.City;  		billingAddress.Country = row.Country;  		billingAddress.Fax = row.Fax;  		billingAddress.First = row.NameFirst;  		billingAddress.Last = row.NameLast;  		billingAddress.Phone = row.Phone;  		billingAddress.State = row.State;  		billingAddress.Street = row.Address;  		billingAddress.Zip = row.Zip;  		if (!String.IsNullOrWhiteSpace (row.Zip4))  			billingAddress.Zip += "-" + row.Zip4;  		if (update) {  			c.BillingAddress = billingAddress;  			c.Description = args.Description;  			if (gateway.UpdateCustomer (c)) {  				worker.ReportProgress (i' String.Format ("Customer profile #{0} updated."' c.ProfileID));  			}  		}  		//Check that account id  		if (hasAccountId) {  			if (!row.AccountId.LuhnCheck ()) {  				worker.ReportProgress (i' "Warning: AccountId did not pass validation!");  			}  			else {  				CardType type = GetCardType (row.AccountId);  				if (String.IsNullOrWhiteSpace (row.AccountType))  					row.AccountType = type.ToString ();  				else if (!row.AccountType.ToLower ().Contains (type.ToString ().ToLower ()))  					worker.ReportProgress (i' String.Format ("Warning: Account type is '{0}' but AccountId is of type '{1}'"' row.AccountType' type));  			}  		}  		String cardId = null;  		PaymentProfile p = null;  		foreach (PaymentProfile pp in c.PaymentProfiles) {  			if (hasPaymentProfile && pp.ProfileID.Equals (row.CIMPaymentId' StringComparison.OrdinalIgnoreCase)) {  				worker.ReportProgress (i' String.Format ("Payment profile #{0} found."' pp.ProfileID));  				p = pp;  				break;  			}  			cardId = row.AccountId.Substring (row.AccountId.Length - 4);  			if (hasAccountId && pp.CardNumber.EndsWith (cardId)) {  				worker.ReportProgress (i' "Found payment profile for given account.");  				row.CIMPaymentId = pp.ProfileID;  				p = pp;  				break;  			}  		}  		if (p == null) {  			try {  				if (hasPaymentProfile)  					throw new ArgumentException (String.Format ("Payment profile #{0} not found."' row.CIMPaymentId));  				String profileKey = gateway.AddCreditCard (c.ProfileID' row.AccountId' row.AccountExpireMM' row.AccountExpireYY' row.AccountCSC' billingAddress);  				row.CIMPaymentId = profileKey;  				worker.ReportProgress (i' String.Format ("Payment profile #{0} created."' profileKey));  			}  			catch (Exception payErr) {  				row.CIMPaymentMessage = payErr.Message;  				worker.ReportProgress (i' payErr);  			}  		}  	}  	catch (Exception ex) {  		row.CIMMessage = ex.Message;  		worker.ReportProgress (i' ex);  	}  	finally {  		row.EndEdit ();  	}  	if (args.RequestDelay > 0)  		System.Threading.Thread.Sleep (args.RequestDelay);  }  
Magic Number,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,backgroundWorkerRun_DoWork,The following statement contains a magic number: for (int i = 0; i < count && !cancelled; i++) {  	cancelled = worker.WorkerSupportsCancellation && worker.CancellationPending;  	if (cancelled)  		break;  	ImportSet.CsvImportRow row = args.Set.CsvImport [i];  	try {  		row.BeginEdit ();  		row.ClearErrors ();  		row.CIMMessage = string.Empty;  		row.CIMPaymentMessage = string.Empty;  		bool hasAccountId = !String.IsNullOrWhiteSpace (row.AccountId) && row.AccountId.Length > 4;  		bool hasPaymentProfile = !String.IsNullOrWhiteSpace (row.CIMPaymentId);  		bool hasCustomerProfile = !String.IsNullOrWhiteSpace (row.CIMProfileId);  		Customer c = null;  		if (hasCustomerProfile && args.SkipExisting) {  			worker.ReportProgress (i' String.Format ("Skipped customer profile #{0}..."' row.CIMProfileId));  			continue;  		}  		if (hasCustomerProfile) {  			worker.ReportProgress (i' String.Format ("Loading customer profile #{0}..."' row.CIMProfileId));  			c = gateway.GetCustomer (row.CIMProfileId);  			if (c == null) {  				throw new ArgumentException (String.Format ("Customer profile #{0} not found."' row.CIMProfileId));  			}  			else {  				worker.ReportProgress (i' String.Format ("Customer profile #{0} found."' row.CIMProfileId));  			}  		}  		update = (c == null) || args.UpdateExisting;  		if (c == null) {  			try {  				c = gateway.CreateCustomer (row.Email' args.Description' row.SubsId);  				row.CIMProfileId = c.ProfileID;  				worker.ReportProgress (i' String.Format ("Customer profile #{0} created."' c.ProfileID));  			}  			catch (Exception createErr) {  				//Error processing request: E00039 - A duplicate record with ID ######## already exists.  				if (createErr.Message.Contains ("E00039")) {  					Match m = idPattern.Match (createErr.Message);  					if (m.Success && m.Groups [1].Success) {  						row.CIMProfileId = m.Groups [1].Value;  						row.EndEdit ();  						worker.ReportProgress (i' String.Format ("Found customer profile #{0} - Loading..."' row.CIMProfileId));  						c = gateway.GetCustomer (row.CIMProfileId);  						update = args.UpdateExisting;  					}  					else {  						throw createErr;  					}  				}  				else {  					throw createErr;  				}  			}  		}  		Address billingAddress = new Address ();  		billingAddress.City = row.City;  		billingAddress.Country = row.Country;  		billingAddress.Fax = row.Fax;  		billingAddress.First = row.NameFirst;  		billingAddress.Last = row.NameLast;  		billingAddress.Phone = row.Phone;  		billingAddress.State = row.State;  		billingAddress.Street = row.Address;  		billingAddress.Zip = row.Zip;  		if (!String.IsNullOrWhiteSpace (row.Zip4))  			billingAddress.Zip += "-" + row.Zip4;  		if (update) {  			c.BillingAddress = billingAddress;  			c.Description = args.Description;  			if (gateway.UpdateCustomer (c)) {  				worker.ReportProgress (i' String.Format ("Customer profile #{0} updated."' c.ProfileID));  			}  		}  		//Check that account id  		if (hasAccountId) {  			if (!row.AccountId.LuhnCheck ()) {  				worker.ReportProgress (i' "Warning: AccountId did not pass validation!");  			}  			else {  				CardType type = GetCardType (row.AccountId);  				if (String.IsNullOrWhiteSpace (row.AccountType))  					row.AccountType = type.ToString ();  				else if (!row.AccountType.ToLower ().Contains (type.ToString ().ToLower ()))  					worker.ReportProgress (i' String.Format ("Warning: Account type is '{0}' but AccountId is of type '{1}'"' row.AccountType' type));  			}  		}  		String cardId = null;  		PaymentProfile p = null;  		foreach (PaymentProfile pp in c.PaymentProfiles) {  			if (hasPaymentProfile && pp.ProfileID.Equals (row.CIMPaymentId' StringComparison.OrdinalIgnoreCase)) {  				worker.ReportProgress (i' String.Format ("Payment profile #{0} found."' pp.ProfileID));  				p = pp;  				break;  			}  			cardId = row.AccountId.Substring (row.AccountId.Length - 4);  			if (hasAccountId && pp.CardNumber.EndsWith (cardId)) {  				worker.ReportProgress (i' "Found payment profile for given account.");  				row.CIMPaymentId = pp.ProfileID;  				p = pp;  				break;  			}  		}  		if (p == null) {  			try {  				if (hasPaymentProfile)  					throw new ArgumentException (String.Format ("Payment profile #{0} not found."' row.CIMPaymentId));  				String profileKey = gateway.AddCreditCard (c.ProfileID' row.AccountId' row.AccountExpireMM' row.AccountExpireYY' row.AccountCSC' billingAddress);  				row.CIMPaymentId = profileKey;  				worker.ReportProgress (i' String.Format ("Payment profile #{0} created."' profileKey));  			}  			catch (Exception payErr) {  				row.CIMPaymentMessage = payErr.Message;  				worker.ReportProgress (i' payErr);  			}  		}  	}  	catch (Exception ex) {  		row.CIMMessage = ex.Message;  		worker.ReportProgress (i' ex);  	}  	finally {  		row.EndEdit ();  	}  	if (args.RequestDelay > 0)  		System.Threading.Thread.Sleep (args.RequestDelay);  }  
Magic Number,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,backgroundWorkerRun_DoWork,The following statement contains a magic number: try {  	row.BeginEdit ();  	row.ClearErrors ();  	row.CIMMessage = string.Empty;  	row.CIMPaymentMessage = string.Empty;  	bool hasAccountId = !String.IsNullOrWhiteSpace (row.AccountId) && row.AccountId.Length > 4;  	bool hasPaymentProfile = !String.IsNullOrWhiteSpace (row.CIMPaymentId);  	bool hasCustomerProfile = !String.IsNullOrWhiteSpace (row.CIMProfileId);  	Customer c = null;  	if (hasCustomerProfile && args.SkipExisting) {  		worker.ReportProgress (i' String.Format ("Skipped customer profile #{0}..."' row.CIMProfileId));  		continue;  	}  	if (hasCustomerProfile) {  		worker.ReportProgress (i' String.Format ("Loading customer profile #{0}..."' row.CIMProfileId));  		c = gateway.GetCustomer (row.CIMProfileId);  		if (c == null) {  			throw new ArgumentException (String.Format ("Customer profile #{0} not found."' row.CIMProfileId));  		}  		else {  			worker.ReportProgress (i' String.Format ("Customer profile #{0} found."' row.CIMProfileId));  		}  	}  	update = (c == null) || args.UpdateExisting;  	if (c == null) {  		try {  			c = gateway.CreateCustomer (row.Email' args.Description' row.SubsId);  			row.CIMProfileId = c.ProfileID;  			worker.ReportProgress (i' String.Format ("Customer profile #{0} created."' c.ProfileID));  		}  		catch (Exception createErr) {  			//Error processing request: E00039 - A duplicate record with ID ######## already exists.  			if (createErr.Message.Contains ("E00039")) {  				Match m = idPattern.Match (createErr.Message);  				if (m.Success && m.Groups [1].Success) {  					row.CIMProfileId = m.Groups [1].Value;  					row.EndEdit ();  					worker.ReportProgress (i' String.Format ("Found customer profile #{0} - Loading..."' row.CIMProfileId));  					c = gateway.GetCustomer (row.CIMProfileId);  					update = args.UpdateExisting;  				}  				else {  					throw createErr;  				}  			}  			else {  				throw createErr;  			}  		}  	}  	Address billingAddress = new Address ();  	billingAddress.City = row.City;  	billingAddress.Country = row.Country;  	billingAddress.Fax = row.Fax;  	billingAddress.First = row.NameFirst;  	billingAddress.Last = row.NameLast;  	billingAddress.Phone = row.Phone;  	billingAddress.State = row.State;  	billingAddress.Street = row.Address;  	billingAddress.Zip = row.Zip;  	if (!String.IsNullOrWhiteSpace (row.Zip4))  		billingAddress.Zip += "-" + row.Zip4;  	if (update) {  		c.BillingAddress = billingAddress;  		c.Description = args.Description;  		if (gateway.UpdateCustomer (c)) {  			worker.ReportProgress (i' String.Format ("Customer profile #{0} updated."' c.ProfileID));  		}  	}  	//Check that account id  	if (hasAccountId) {  		if (!row.AccountId.LuhnCheck ()) {  			worker.ReportProgress (i' "Warning: AccountId did not pass validation!");  		}  		else {  			CardType type = GetCardType (row.AccountId);  			if (String.IsNullOrWhiteSpace (row.AccountType))  				row.AccountType = type.ToString ();  			else if (!row.AccountType.ToLower ().Contains (type.ToString ().ToLower ()))  				worker.ReportProgress (i' String.Format ("Warning: Account type is '{0}' but AccountId is of type '{1}'"' row.AccountType' type));  		}  	}  	String cardId = null;  	PaymentProfile p = null;  	foreach (PaymentProfile pp in c.PaymentProfiles) {  		if (hasPaymentProfile && pp.ProfileID.Equals (row.CIMPaymentId' StringComparison.OrdinalIgnoreCase)) {  			worker.ReportProgress (i' String.Format ("Payment profile #{0} found."' pp.ProfileID));  			p = pp;  			break;  		}  		cardId = row.AccountId.Substring (row.AccountId.Length - 4);  		if (hasAccountId && pp.CardNumber.EndsWith (cardId)) {  			worker.ReportProgress (i' "Found payment profile for given account.");  			row.CIMPaymentId = pp.ProfileID;  			p = pp;  			break;  		}  	}  	if (p == null) {  		try {  			if (hasPaymentProfile)  				throw new ArgumentException (String.Format ("Payment profile #{0} not found."' row.CIMPaymentId));  			String profileKey = gateway.AddCreditCard (c.ProfileID' row.AccountId' row.AccountExpireMM' row.AccountExpireYY' row.AccountCSC' billingAddress);  			row.CIMPaymentId = profileKey;  			worker.ReportProgress (i' String.Format ("Payment profile #{0} created."' profileKey));  		}  		catch (Exception payErr) {  			row.CIMPaymentMessage = payErr.Message;  			worker.ReportProgress (i' payErr);  		}  	}  }  catch (Exception ex) {  	row.CIMMessage = ex.Message;  	worker.ReportProgress (i' ex);  }  finally {  	row.EndEdit ();  }  
Magic Number,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,backgroundWorkerRun_DoWork,The following statement contains a magic number: try {  	row.BeginEdit ();  	row.ClearErrors ();  	row.CIMMessage = string.Empty;  	row.CIMPaymentMessage = string.Empty;  	bool hasAccountId = !String.IsNullOrWhiteSpace (row.AccountId) && row.AccountId.Length > 4;  	bool hasPaymentProfile = !String.IsNullOrWhiteSpace (row.CIMPaymentId);  	bool hasCustomerProfile = !String.IsNullOrWhiteSpace (row.CIMProfileId);  	Customer c = null;  	if (hasCustomerProfile && args.SkipExisting) {  		worker.ReportProgress (i' String.Format ("Skipped customer profile #{0}..."' row.CIMProfileId));  		continue;  	}  	if (hasCustomerProfile) {  		worker.ReportProgress (i' String.Format ("Loading customer profile #{0}..."' row.CIMProfileId));  		c = gateway.GetCustomer (row.CIMProfileId);  		if (c == null) {  			throw new ArgumentException (String.Format ("Customer profile #{0} not found."' row.CIMProfileId));  		}  		else {  			worker.ReportProgress (i' String.Format ("Customer profile #{0} found."' row.CIMProfileId));  		}  	}  	update = (c == null) || args.UpdateExisting;  	if (c == null) {  		try {  			c = gateway.CreateCustomer (row.Email' args.Description' row.SubsId);  			row.CIMProfileId = c.ProfileID;  			worker.ReportProgress (i' String.Format ("Customer profile #{0} created."' c.ProfileID));  		}  		catch (Exception createErr) {  			//Error processing request: E00039 - A duplicate record with ID ######## already exists.  			if (createErr.Message.Contains ("E00039")) {  				Match m = idPattern.Match (createErr.Message);  				if (m.Success && m.Groups [1].Success) {  					row.CIMProfileId = m.Groups [1].Value;  					row.EndEdit ();  					worker.ReportProgress (i' String.Format ("Found customer profile #{0} - Loading..."' row.CIMProfileId));  					c = gateway.GetCustomer (row.CIMProfileId);  					update = args.UpdateExisting;  				}  				else {  					throw createErr;  				}  			}  			else {  				throw createErr;  			}  		}  	}  	Address billingAddress = new Address ();  	billingAddress.City = row.City;  	billingAddress.Country = row.Country;  	billingAddress.Fax = row.Fax;  	billingAddress.First = row.NameFirst;  	billingAddress.Last = row.NameLast;  	billingAddress.Phone = row.Phone;  	billingAddress.State = row.State;  	billingAddress.Street = row.Address;  	billingAddress.Zip = row.Zip;  	if (!String.IsNullOrWhiteSpace (row.Zip4))  		billingAddress.Zip += "-" + row.Zip4;  	if (update) {  		c.BillingAddress = billingAddress;  		c.Description = args.Description;  		if (gateway.UpdateCustomer (c)) {  			worker.ReportProgress (i' String.Format ("Customer profile #{0} updated."' c.ProfileID));  		}  	}  	//Check that account id  	if (hasAccountId) {  		if (!row.AccountId.LuhnCheck ()) {  			worker.ReportProgress (i' "Warning: AccountId did not pass validation!");  		}  		else {  			CardType type = GetCardType (row.AccountId);  			if (String.IsNullOrWhiteSpace (row.AccountType))  				row.AccountType = type.ToString ();  			else if (!row.AccountType.ToLower ().Contains (type.ToString ().ToLower ()))  				worker.ReportProgress (i' String.Format ("Warning: Account type is '{0}' but AccountId is of type '{1}'"' row.AccountType' type));  		}  	}  	String cardId = null;  	PaymentProfile p = null;  	foreach (PaymentProfile pp in c.PaymentProfiles) {  		if (hasPaymentProfile && pp.ProfileID.Equals (row.CIMPaymentId' StringComparison.OrdinalIgnoreCase)) {  			worker.ReportProgress (i' String.Format ("Payment profile #{0} found."' pp.ProfileID));  			p = pp;  			break;  		}  		cardId = row.AccountId.Substring (row.AccountId.Length - 4);  		if (hasAccountId && pp.CardNumber.EndsWith (cardId)) {  			worker.ReportProgress (i' "Found payment profile for given account.");  			row.CIMPaymentId = pp.ProfileID;  			p = pp;  			break;  		}  	}  	if (p == null) {  		try {  			if (hasPaymentProfile)  				throw new ArgumentException (String.Format ("Payment profile #{0} not found."' row.CIMPaymentId));  			String profileKey = gateway.AddCreditCard (c.ProfileID' row.AccountId' row.AccountExpireMM' row.AccountExpireYY' row.AccountCSC' billingAddress);  			row.CIMPaymentId = profileKey;  			worker.ReportProgress (i' String.Format ("Payment profile #{0} created."' profileKey));  		}  		catch (Exception payErr) {  			row.CIMPaymentMessage = payErr.Message;  			worker.ReportProgress (i' payErr);  		}  	}  }  catch (Exception ex) {  	row.CIMMessage = ex.Message;  	worker.ReportProgress (i' ex);  }  finally {  	row.EndEdit ();  }  
Magic Number,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,backgroundWorkerRun_DoWork,The following statement contains a magic number: foreach (PaymentProfile pp in c.PaymentProfiles) {  	if (hasPaymentProfile && pp.ProfileID.Equals (row.CIMPaymentId' StringComparison.OrdinalIgnoreCase)) {  		worker.ReportProgress (i' String.Format ("Payment profile #{0} found."' pp.ProfileID));  		p = pp;  		break;  	}  	cardId = row.AccountId.Substring (row.AccountId.Length - 4);  	if (hasAccountId && pp.CardNumber.EndsWith (cardId)) {  		worker.ReportProgress (i' "Found payment profile for given account.");  		row.CIMPaymentId = pp.ProfileID;  		p = pp;  		break;  	}  }  
Magic Number,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,backgroundWorkerRun_DoWork,The following statement contains a magic number: cardId = row.AccountId.Substring (row.AccountId.Length - 4);  
Magic Number,CIMTool,Luhn,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,GetCheckValue,The following statement contains a magic number: return digits.Select ((d' i) => i % 2 == digits.Length % 2 ? ((2 * d) % 10) + d / 5 : d).Sum () % 10;  
Magic Number,CIMTool,Luhn,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,GetCheckValue,The following statement contains a magic number: return digits.Select ((d' i) => i % 2 == digits.Length % 2 ? ((2 * d) % 10) + d / 5 : d).Sum () % 10;  
Magic Number,CIMTool,Luhn,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,GetCheckValue,The following statement contains a magic number: return digits.Select ((d' i) => i % 2 == digits.Length % 2 ? ((2 * d) % 10) + d / 5 : d).Sum () % 10;  
Magic Number,CIMTool,Luhn,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,GetCheckValue,The following statement contains a magic number: return digits.Select ((d' i) => i % 2 == digits.Length % 2 ? ((2 * d) % 10) + d / 5 : d).Sum () % 10;  
Magic Number,CIMTool,Luhn,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,GetCheckValue,The following statement contains a magic number: return digits.Select ((d' i) => i % 2 == digits.Length % 2 ? ((2 * d) % 10) + d / 5 : d).Sum () % 10;  
Magic Number,CIMTool,Luhn,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,GetCheckValue,The following statement contains a magic number: return digits.Select ((d' i) => i % 2 == digits.Length % 2 ? ((2 * d) % 10) + d / 5 : d).Sum () % 10;  
Magic Number,CIMTool,CsvMap,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,CsvMap,The following statement contains a magic number: Map (m => m.NameLast).Name ("NameLast").Index (2);  
Magic Number,CIMTool,CsvMap,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,CsvMap,The following statement contains a magic number: Map (m => m.Company).Name ("Company").Index (3);  
Magic Number,CIMTool,CsvMap,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,CsvMap,The following statement contains a magic number: Map (m => m.Address).Name ("Address").Index (4);  
Magic Number,CIMTool,CsvMap,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,CsvMap,The following statement contains a magic number: Map (m => m.City).Name ("City").Index (5);  
Magic Number,CIMTool,CsvMap,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,CsvMap,The following statement contains a magic number: Map (m => m.State).Name ("State").Index (6);  
Magic Number,CIMTool,CsvMap,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,CsvMap,The following statement contains a magic number: Map (m => m.Zip).Name ("Zip").Index (7);  
Magic Number,CIMTool,CsvMap,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,CsvMap,The following statement contains a magic number: Map (m => m.Zip4).Name ("Zip4").Index (8);  
Magic Number,CIMTool,CsvMap,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,CsvMap,The following statement contains a magic number: Map (m => m.Country).Name ("Country").Index (9);  
Magic Number,CIMTool,CsvMap,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,CsvMap,The following statement contains a magic number: Map (m => m.Email).Name ("Email").Index (10);  
Magic Number,CIMTool,CsvMap,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,CsvMap,The following statement contains a magic number: Map (m => m.Phone).Name ("Phone").Index (11);  
Magic Number,CIMTool,CsvMap,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,CsvMap,The following statement contains a magic number: Map (m => m.Fax).Name ("Fax").Index (12);  
Magic Number,CIMTool,CsvMap,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,CsvMap,The following statement contains a magic number: Map (m => m.AccountType).Name ("AccountType").Index (13);  
Magic Number,CIMTool,CsvMap,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,CsvMap,The following statement contains a magic number: Map (m => m.AccountId).Name ("AccountId").Index (14);  
Magic Number,CIMTool,CsvMap,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,CsvMap,The following statement contains a magic number: Map (m => m.AccountExpireMM).Name ("AccountExpireMM").Index (15);  
Magic Number,CIMTool,CsvMap,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,CsvMap,The following statement contains a magic number: Map (m => m.AccountExpireYY).Name ("AccountExpireYY").Index (16);  
Magic Number,CIMTool,CsvMap,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,CsvMap,The following statement contains a magic number: Map (m => m.AccountCSC).Name ("AccountCSC").Index (17);  
Magic Number,CIMTool,CsvMap,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,CsvMap,The following statement contains a magic number: Map (m => m.CIMProfileId).Name ("CIMProfileId").Index (18);  
Magic Number,CIMTool,CsvMap,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,CsvMap,The following statement contains a magic number: Map (m => m.CIMMessage).Name ("CIMMessage").Index (19);  
Magic Number,CIMTool,CsvMap,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,CsvMap,The following statement contains a magic number: Map (m => m.CIMPaymentId).Name ("CIMPaymentId").Index (20);  
Magic Number,CIMTool,CsvMap,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,CsvMap,The following statement contains a magic number: Map (m => m.CIMPaymentMessage).Name ("CIMPaymentMessage").Index (21);  
Missing Default,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,PromptForChanges,The following switch statement is missing a default case: switch (result) {  case System.Windows.Forms.DialogResult.Yes: {  	Save ();  	break;  }  }  
Missing Default,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,GetCardType,The following switch statement is missing a default case: switch (accountId.Length) {  case 13: {  	if (accountId.StartsWith ("4"))  		return CardType.Visa;  	break;  }  case 14: {  	if (accountId.StartsWith ("300") || accountId.StartsWith ("301") || accountId.StartsWith ("302") || accountId.StartsWith ("303") || accountId.StartsWith ("304") || accountId.StartsWith ("305") || accountId.StartsWith ("36") || accountId.StartsWith ("38"))  		return CardType.DinersClub;  	break;  }  case 15: {  	if (accountId.StartsWith ("34") || accountId.StartsWith ("37"))  		return CardType.AmericanExpress;  	if (accountId.StartsWith ("2014") || accountId.StartsWith ("2149"))  		return CardType.enRoute;  	if (accountId.StartsWith ("2131") || accountId.StartsWith ("1800"))  		return CardType.JCB;  	break;  }  case 16: {  	if (accountId.StartsWith ("51") || accountId.StartsWith ("52") || accountId.StartsWith ("53") || accountId.StartsWith ("54") || accountId.StartsWith ("55"))  		return CardType.MasterCard;  	if (accountId.StartsWith ("4"))  		return CardType.Visa;  	if (accountId.StartsWith ("6011"))  		return CardType.Discover;  	if (accountId.StartsWith ("3"))  		return CardType.JCB;  	break;  }  }  
Missing Default,CIMTool,FormMain,C:\repos\detrm_CIMTool\CIMTool\FormMain.cs,backgroundWorkerLoad_DoWork,The following switch statement is missing a default case: switch (file.Extension.ToLower ()) {  case ".csv": {  	e.Result = ReadCSV (file);  	break;  }  case ".xml": {  	e.Result = ReadXML (file);  	break;  }  }  
