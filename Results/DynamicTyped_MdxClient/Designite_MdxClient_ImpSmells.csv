Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MdxClient,MdxCommand,F:\newReposMay17\DynamicTyped_MdxClient\MdxClient\MdxCommand.cs,ConvertXmlTypeToType,Cyclomatic complexity of the method is 24
Complex Method,MdxClient,MdxCommand,F:\newReposMay17\DynamicTyped_MdxClient\MdxClient\MdxCommand.cs,AddRows,Cyclomatic complexity of the method is 11
Complex Method,MdxClient,MdxParameterCollection,F:\newReposMay17\DynamicTyped_MdxClient\MdxClient\MdxParameterCollection.cs,Validate,Cyclomatic complexity of the method is 8
Long Parameter List,MdxClient,MdxDataReader,F:\newReposMay17\DynamicTyped_MdxClient\MdxClient\MdxDataReader.cs,GetBytes,The method has 5 parameters.
Long Parameter List,MdxClient,MdxDataReader,F:\newReposMay17\DynamicTyped_MdxClient\MdxClient\MdxDataReader.cs,GetChars,The method has 5 parameters.
Long Statement,MdxClient,MdxCommand,F:\newReposMay17\DynamicTyped_MdxClient\MdxClient\MdxCommand.cs,ExecuteDbDataReader,The length of the statement  "		var name = parameter.Name.StartsWith (ColumnMap.Parameter' StringComparison.OrdinalIgnoreCase) ? parameter.Name : ColumnMap.Parameter + parameter.Name; " is 151.
Long Statement,MdxClient,MdxCommand,F:\newReposMay17\DynamicTyped_MdxClient\MdxClient\MdxCommand.cs,ExecuteDbDataReader,The length of the statement  "	return behavior == CommandBehavior.CloseConnection ? new MdxDataReader (results' _connection) : new MdxDataReader (results); " is 124.
Long Statement,MdxClient,MdxCommand,F:\newReposMay17\DynamicTyped_MdxClient\MdxClient\MdxCommand.cs,AddColumnsFromRowAxis,The length of the statement  "		var dimensionPropertyColumns = rows.SelectMany (row => row.Members.SelectMany (// Project the dimension properties so we also get the member's index within the row for each: " is 173.
Long Statement,MdxClient,MdxCommand,F:\newReposMay17\DynamicTyped_MdxClient\MdxClient\MdxCommand.cs,GetCellData,The length of the statement  "		FormattedValue = cell.Elements (_namespace + "FmtValue").Any () ? cell.Element (_namespace + "FmtValue").Value : cell.Element (_namespace + "Value").Value' " is 155.
Long Statement,MdxClient,MdxCommand,F:\newReposMay17\DynamicTyped_MdxClient\MdxClient\MdxCommand.cs,AddColumnsFromColumnAxis,The length of the statement  "	// this is done after all the columns are added because we need to know the total column count for any of the modus math to work correctly " is 138.
Long Statement,MdxClient,MdxCommand,F:\newReposMay17\DynamicTyped_MdxClient\MdxClient\MdxCommand.cs,GetTypeForColumn,The length of the statement  "	var x = cells.Where (c => ((c.Ordinal + 1) % columnCount) == columnPosition).Select (t => t.Type).Distinct ().ToList (); " is 120.
Long Statement,MdxClient,MdxCommand,F:\newReposMay17\DynamicTyped_MdxClient\MdxClient\MdxCommand.cs,GetTypeForColumn,The length of the statement  "		// on counts of greater than 1 and no nulls' we have multiple number types' make them all double to accommodate the differences " is 127.
Long Statement,MdxClient,MdxCommand,F:\newReposMay17\DynamicTyped_MdxClient\MdxClient\MdxCommand.cs,AdjustValueFromColumnType,The length of the statement  "	// change type was giving odd results when a culture was passed in on the thread' for example German 5.324145E1 came out as 5324145 instead of 53.24145 " is 151.
Long Statement,MdxClient,MdxCommand,F:\newReposMay17\DynamicTyped_MdxClient\MdxClient\MdxCommand.cs,AdjustValueFromColumnType,The length of the statement  "	cell.Value = Convert.ChangeType (cell.Value' crs.Columns [columnIndex].Type ?? ConvertXmlTypeToType (cell.Type)' CultureInfo.InvariantCulture); " is 143.
Long Statement,MdxClient,MdxCommand,F:\newReposMay17\DynamicTyped_MdxClient\MdxClient\MdxCommand.cs,AddRows,The length of the statement  "		// data coming back from the cube only has cell for actual data' nulls are not represented.  We need to fill in those cells so that the data appears " is 148.
Long Statement,MdxClient,MdxCommand,F:\newReposMay17\DynamicTyped_MdxClient\MdxClient\MdxCommand.cs,AddRows,The length of the statement  "			foreach (var property in row.Members.Where (member => member.DimensionProperties != null).SelectMany (member => member.DimensionProperties)) { " is 142.
Long Statement,MdxClient,MdxCommand,F:\newReposMay17\DynamicTyped_MdxClient\MdxClient\MdxCommand.cs,AddRows,The length of the statement  "					// this is done because the xml coming back does not include nulls/empty data.  We have to fill in the gap or the subsequent objects will throw the data off " is 156.
Long Statement,MdxClient,MdxCommand,F:\newReposMay17\DynamicTyped_MdxClient\MdxClient\MdxCommand.cs,AddRows,The length of the statement  "			// go threw the members again' this time for the special columns' this is done here since the columns for them are done at the end " is 130.
Magic Number,MdxClient,MdxDataReader,F:\newReposMay17\DynamicTyped_MdxClient\MdxClient\MdxDataReader.cs,CreateSchemaTable,The following statement contains a magic number: for (int i = 0; i < 18; i++) {  	dataTable.Columns.Add (MdxDataReader._schemaTableColumnNames [i]' MdxDataReader._schemaTableColumnTypes [i]);  }  
Magic Number,MdxClient,MdxDataReader,F:\newReposMay17\DynamicTyped_MdxClient\MdxClient\MdxDataReader.cs,CreateSchemaTable,The following statement contains a magic number: foreach (Column column in _resultSet.Columns) {  	DataRow dataRow = dataTable.NewRow ();  	dataRow ["ColumnName"] = column.Name;  	dataRow ["ColumnOrdinal"] = column.CellOrdinal;  	dataRow ["ColumnSize"] = 0;  	if (column.Type == typeof(decimal)) {  		dataRow ["NumericPrecision"] = 19;  		dataRow ["NumericScale"] = 4;  	} else {  		dataRow ["NumericPrecision"] = 0;  		dataRow ["NumericScale"] = 0;  	}  	dataRow ["DataType"] = column.Type;  	dataRow ["ProviderType"] = column.Type;  	dataRow ["IsLong"] = false;  	dataRow ["AllowDBNull"] = true;  	dataRow ["IsReadOnly"] = true;  	dataRow ["IsRowVersion"] = false;  	dataRow ["IsUnique"] = false;  	dataRow ["IsKeyColumn"] = false;  	dataRow ["IsAutoIncrement"] = false;  	dataRow ["BaseSchemaName"] = null;  	dataRow ["BaseCatalogName"] = null;  	dataRow ["BaseTableName"] = null;  	dataRow ["BaseColumnName"] = null;  	dataTable.Rows.Add (dataRow);  }  
Magic Number,MdxClient,MdxDataReader,F:\newReposMay17\DynamicTyped_MdxClient\MdxClient\MdxDataReader.cs,CreateSchemaTable,The following statement contains a magic number: foreach (Column column in _resultSet.Columns) {  	DataRow dataRow = dataTable.NewRow ();  	dataRow ["ColumnName"] = column.Name;  	dataRow ["ColumnOrdinal"] = column.CellOrdinal;  	dataRow ["ColumnSize"] = 0;  	if (column.Type == typeof(decimal)) {  		dataRow ["NumericPrecision"] = 19;  		dataRow ["NumericScale"] = 4;  	} else {  		dataRow ["NumericPrecision"] = 0;  		dataRow ["NumericScale"] = 0;  	}  	dataRow ["DataType"] = column.Type;  	dataRow ["ProviderType"] = column.Type;  	dataRow ["IsLong"] = false;  	dataRow ["AllowDBNull"] = true;  	dataRow ["IsReadOnly"] = true;  	dataRow ["IsRowVersion"] = false;  	dataRow ["IsUnique"] = false;  	dataRow ["IsKeyColumn"] = false;  	dataRow ["IsAutoIncrement"] = false;  	dataRow ["BaseSchemaName"] = null;  	dataRow ["BaseCatalogName"] = null;  	dataRow ["BaseTableName"] = null;  	dataRow ["BaseColumnName"] = null;  	dataTable.Rows.Add (dataRow);  }  
Magic Number,MdxClient,MdxDataReader,F:\newReposMay17\DynamicTyped_MdxClient\MdxClient\MdxDataReader.cs,CreateSchemaTable,The following statement contains a magic number: if (column.Type == typeof(decimal)) {  	dataRow ["NumericPrecision"] = 19;  	dataRow ["NumericScale"] = 4;  } else {  	dataRow ["NumericPrecision"] = 0;  	dataRow ["NumericScale"] = 0;  }  
Magic Number,MdxClient,MdxDataReader,F:\newReposMay17\DynamicTyped_MdxClient\MdxClient\MdxDataReader.cs,CreateSchemaTable,The following statement contains a magic number: if (column.Type == typeof(decimal)) {  	dataRow ["NumericPrecision"] = 19;  	dataRow ["NumericScale"] = 4;  } else {  	dataRow ["NumericPrecision"] = 0;  	dataRow ["NumericScale"] = 0;  }  
Magic Number,MdxClient,MdxDataReader,F:\newReposMay17\DynamicTyped_MdxClient\MdxClient\MdxDataReader.cs,CreateSchemaTable,The following statement contains a magic number: dataRow ["NumericPrecision"] = 19;  
Magic Number,MdxClient,MdxDataReader,F:\newReposMay17\DynamicTyped_MdxClient\MdxClient\MdxDataReader.cs,CreateSchemaTable,The following statement contains a magic number: dataRow ["NumericScale"] = 4;  
Magic Number,MdxClient,MdxParameterCollection,F:\newReposMay17\DynamicTyped_MdxClient\MdxClient\MdxParameterCollection.cs,Validate,The following statement contains a magic number: if (text.Length == 0) {  	index = 1;  	int num = 0;  	while (index < 2147483647 && num != -1) {  		text = "Parameter" + index.ToString (CultureInfo.InvariantCulture);  		num = IndexOf (text);  		index++;  	}  	if (-1 != num) {  		text = "Parameter" + Guid.NewGuid ().ToString ();  	}  	value.ParameterName = text;  }  
Magic Number,MdxClient,MdxParameterCollection,F:\newReposMay17\DynamicTyped_MdxClient\MdxClient\MdxParameterCollection.cs,Validate,The following statement contains a magic number: while (index < 2147483647 && num != -1) {  	text = "Parameter" + index.ToString (CultureInfo.InvariantCulture);  	num = IndexOf (text);  	index++;  }  
